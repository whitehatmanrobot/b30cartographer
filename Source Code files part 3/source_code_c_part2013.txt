     {
                    Global.RO.Error(String.Format("{0} Test FAILED!!! Request should have failed but passed.", testName));
                    ResultCode = TEST_RESULTS.FAILED;
                    throw new Exception();
                }
                Global.RO.Info(String.Format("{0} Test passed", testName));    

            }



            protected void RunTest(CatalogType type, bool useCompression, string testName)            
            {
                string url = null;
                if (type == CatalogType.SQL_BASED_FE)
                {
                    Uri uri = new Uri("http://" + Global.XEnv.GetVirtualInterface("catalog").ToString() + "/Catalog/Catalog.asmx/Query?methodName=FindGames&Names=Locale&Values=en-US&Names=LegalLocale&Values=en-US&Names=Store&Values=1&Names=PageSize&Values=100&Names=PageNum&Values=1&Names=DetailView&Values=3&Names=OfferFilterLevel&Values=1&Names=UserTypes&Values=2&Names=MediaTypes&Values=1&Names=MediaTypes&Values=21&Names=MediaTypes&Values=23&Names=OfferTargetMediaTypes&Values=5&Names=OfferTargetMediaTypes&Values=18&Names=OfferTargetMediaTypes&Values=19&Names=OfferTargetMediaTypes&Values=20&Names=OfferTargetMediaTypes&Values=21&Names=OfferTargetMediaTypes&Values=22&Names=OfferTargetMediaTypes&Values=23&Names=OfferTargetMediaTypes&Values=30&Names=OfferTargetMediaTypes&Values=34&Names=ImageFormats&Values=4&Names=ImageFormats&Values=5&Names=ImageSizes&Values=10&Names=OrderBy&Values=1&Names=OrderDirection&Values=1");
                    url = uri.ToString();
                }
                else
                {
                    Uri uri = new Uri("http://" + Global.XEnv.GetVirtualInterface("marketplacecatalog").ToString() + "/MarketplaceCatalog/MarketplaceCatalogV1.svc/v1/product/en-us/66ACD000-77FE-1000-9115-D804584109F0?orderby=1&orderdirection=1&detailview=detaillevel5&pageNum=1&pagesize=10&tiers=2.3&stores=1&offerfilter=1");
                    url = uri.ToString();
                }
                RunTest(url, useCompression, testName);
            }
            
            protected override void Execute()
            {
            }
        }
        
        [TestCase, TestCasePriority(1)]
        public class P_SqlBasedFENoCompression : FECompressionTests
        {
            protected override void Execute()
            {
                RunTest(CatalogType.SQL_BASED_FE, false, "P_SqlBasedFENoCompression");
            }            
        }

        [TestCase, TestCasePriority(1)]
        public class P_FastBasedFENoCompression : FECompressionTests
        {
            protected override void Execute()
            {
                RunTest(CatalogType.FAST_BASED_FE, false, "P_FastBasedFENoCompression");
            }            
        }

        [TestCase, TestCasePriority(1)]
        public class P_SqlBasedFECompression : FECompressionTests
        {
            protected override void Execute()
            {
                RunTest(CatalogType.SQL_BASED_FE, true, "P_SqlBasedFECompression");
            }
        }

        [TestCase, TestCasePriority(1)]
        public class P_FASTBasedFECompression : FECompressionTests
        {
            protected override void Execute()
            {
                RunTest(CatalogType.FAST_BASED_FE, true, "P_FASTBasedFECompression");
            }
        }

        [TestCase, TestCasePriority(1)]
        public class P_RegularExpressionVerificationJA_JP : FECompressionTests
        {
            protected override void Execute()
            {
                Uri uri = new Uri("http://" + Global.XEnv.GetVirtualInterface("marketplacecatalog").ToString() + "/MarketplaceCatalog/MarketplaceCatalogV1.svc/v1/product/ja-jp/66ACD000-77FE-1000-9115-D804584109F0?orderby=1&orderdirection=1&detailview=detaillevel5&pageNum=1&pagesize=10&tiers=2.3&stores=1&offerfilter=1");

                RunTest(uri.ToString(), true, "P_RegularExpressionVerificationJA_JP");
            }
        }

        /*
         * In future when we add another query type we can test this
        [TestCase, TestCasePriority(1)]
        public class N_RegularExpressionVerification : FECompressionTests
        {
            protected override void Execute()
            {
                Uri uri = new Uri("http://" + Global.XEnv.GetVirtualInterface("marketplacecatalog").ToString() + "/MarketplaceCatalog/MarketplaceCatalogV1.svc/v1/product/ja-jp/66ACD000-77FE-1000-9115-D804584109F0?orderby=1&orderdirection=1&detailview=detaillevel5&pageNum=1&pagesize=10&tiers=2.3&stores=1&offerfilter=1");

                RunTest(uri.ToString(), true, "RegularExpressionVerificationJA_JP");
            }
        }

        */
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\EspEngine\SortTests.cs ===
ï»¿using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.XPath;

using Com.FastSearch.Esp.Search;
using Com.FastSearch.Esp.Search.Query;
using Com.FastSearch.Esp.Search.Result;
using Com.FastSearch.Esp.Search.View;

using xonline.common.config;
using xonline.common.espengine;
using xonline.common.service;
using xonline.common.sql.sqlclient;
using xonline.common.mgmt;
using xonline.common.utilities;
using xonline.server.catalogwatcher;
using HResult = xonline.common.service.HResult;

using ServerTestFramework;
using ServerTestFramework.LiveService;

using Com.FastSearch.Esp.Content;
using Com.FastSearch.Esp.Content.Errors;
using Com.FastSearch.Esp.Content.Util;
using Com.FastSearch.Esp.Content.Config;

namespace xonline.server.marketplace.test
{

    [TestGroup, Owner("ajaffray"), TestFrequency("Check-In"), EnvRequirement("EspTests")]
    class SortTests
    {
        private static EspHelper helper = null;

        private static Dictionary<String, List<MediaDocument>> testDocuments = new Dictionary<string, List<MediaDocument>>();

        private static readonly String BasicRomanAlphaSort_TestName = "basic_roman_alpha_sort";
        private static readonly String PunctuationAlphaSort_TestName = "punctuation_alpha_sort";
        private static readonly String MultipleCharAlphaSort_TestName = "multiple_char_alpha_sort";
        private static readonly String BasicHiraganaSort_TestName = "basic_hiragana_sort";
        private static readonly String HiraganaCaseInsensitivitySort_TestName = "hiragana_case_insensitivity_sort";
        private static readonly String HiraganaAccentSensitiveSort_TestName = "hiragana_accent_sensitive_sort";
        //private static readonly String HiraganaCaseSensitivity2Sort_TestName = "hiragana_accent_sensitive_2_sort";
        private static readonly String HiraganaAccentInsensitiveSort1_TestName = "hiragana_accent_insensitive1_sort";
        private static readonly String HiraganaAccentInsensitiveSort2_TestName = "hiragana_accent_insensitive2_sort";
        private static readonly String MostRecentOfferStartDate_TestName = "most_recent_offer_start_date_sort";
        private static readonly String DownloadCountAlltimeFreeAndPaid_TestName = "download_count_alltime_free_and_paid";
        private static readonly String DownloadCountTodayFreeAndPaid_TestName = "download_count_today_free_and_paid";
        private static readonly String DownloadCountAlltimePaid_TestName = "download_count_alltime_paid";
        private static readonly String DownloadCountTodayPaid_TestName = "download_count_today_paid";
        private static readonly String UserRatingAggragate_TestName = "user_rating_aggregate_sort";
        private static readonly String UserRatingAggragateAndNumberOfRatings_TestName = "user_rating_aggregate_and_number_of_ratings";
        private static readonly String VisibilityDate_TestName = "visibility_date_sort";
        private static readonly String ReleaseDate_TestName = "release_date_sort";

        private void CreateTestDocuments()
        {

            testDocuments = new Dictionary<string, List<MediaDocument>>();

            String testName;
            MediaDocument d1;
            MediaDocument d2;
            MediaDocument d3;
            MediaDocument d4;
            MediaDocument d5;
            MediaDocument d6;
            List<MediaDocument> expectedResult;

            #region sorttitle Test Data (Latin)
            // ----------------------------------------------------------------------------------------------------
            // Alpha sort documents (Roman alphabet)
            testName = BasicRomanAlphaSort_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1033, "en-us");
            d1.FlatFieldsString["sorttitle"] = "B Document";

            d2 = helper.CreateDocument(testName, 1033, "en-us");
            d2.FlatFieldsString["sorttitle"] = "A Document";

            d3 = helper.CreateDocument(testName, 1033, "en-us");
            d3.FlatFieldsString["sorttitle"] = "C Document";

            expectedResult.Add(d2);
            expectedResult.Add(d1);
            expectedResult.Add(d3);

            // ----------------------------------------------------------------------------------------------------
            // sorting with punctuation 1
            testName = PunctuationAlphaSort_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1033, "en-us");
            d1.FlatFieldsString["sorttitle"] = "Best Game Ever";

            d2 = helper.CreateDocument(testName, 1033, "en-us");
            d2.FlatFieldsString["sorttitle"] = "!Cest Game Ever";

            d3 = helper.CreateDocument(testName, 1033, "en-us");
            d3.FlatFieldsString["sorttitle"] = "|Aest Game Ever";

            d4 = helper.CreateDocument(testName, 1033, "en-us");
            d4.FlatFieldsString["sorttitle"] = "\"Zest Game Ever";

            d5 = helper.CreateDocument(testName, 1033, "en-us");
            d5.FlatFieldsString["sorttitle"] = "best Game Ever";

            expectedResult.Add(d3);
            expectedResult.Add(d1);
            expectedResult.Add(d5);
            expectedResult.Add(d2);
            expectedResult.Add(d4);

            // ----------------------------------------------------------------------------------------------------
            // sorting across multiple characters
            testName = MultipleCharAlphaSort_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1033, "en-us");
            d1.FlatFieldsString["sorttitle"] = "AA Document";

            d2 = helper.CreateDocument(testName, 1033, "en-us");
            d2.FlatFieldsString["sorttitle"] = "aA Document";

            d3 = helper.CreateDocument(testName, 1033, "en-us");
            d3.FlatFieldsString["sorttitle"] = "AZ Document";

            expectedResult.Add(d1);
            expectedResult.Add(d2);
            expectedResult.Add(d3);
            #endregion

            #region sorttitle Test Data (Japanese)
            // ----------------------------------------------------------------------------------------------------
            // Alpha sort documents (Basic Katakana)
            testName = BasicHiraganaSort_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1041, "ja-jp");
            d1.FlatFieldsString["sorttitle"] = "ã« Document";

            d2 = helper.CreateDocument(testName, 1041, "ja-jp");
            d2.FlatFieldsString["sorttitle"] = "ã³ Document";

            d3 = helper.CreateDocument(testName, 1041, "ja-jp");
            d3.FlatFieldsString["sorttitle"] = "ã¹ Document";

            expectedResult.Add(d1);
            expectedResult.Add(d2);
            expectedResult.Add(d3);

            // ----------------------------------------------------------------------------------------------------
            // Japanese - case (size) sensitive (1)
            //
            // Accent sensitive ( ã < ã < ã < ã )
            //
            testName = HiraganaCaseInsensitivitySort_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1041, "ja-jp");
            d1.FlatFieldsString["sorttitle"] = "Title ã";

            d2 = helper.CreateDocument(testName, 1041, "ja-jp");
            d2.FlatFieldsString["sorttitle"] = "Title ã";

            d3 = helper.CreateDocument(testName, 1041, "ja-jp");
            d3.FlatFieldsString["sorttitle"] = "Title ã";

            d4 = helper.CreateDocument(testName, 1041, "ja-jp");
            d4.FlatFieldsString["sorttitle"] = "Title ã";

            expectedResult.Add(d1);
            expectedResult.Add(d4);
            expectedResult.Add(d3);
            expectedResult.Add(d2);

            // ----------------------------------------------------------------------------------------------------
            // Japanese - accent sensitive
            //
            // Accent sensitive (  ã» < ã¼ < ã½ )
            // This test uses ã® < ã» < ã¼ < ã½ < ã to give a range where the the kana ã» (ho), its dakuten ã¼ (bo) and 
            // handakuten ã½ (po) should end up in the middle of the results.
            // 
            testName = HiraganaAccentSensitiveSort_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1041, "ja-jp");
            d1.FlatFieldsString["sorttitle"] = "Title ã®";

            d2 = helper.CreateDocument(testName, 1041, "ja-jp");
            d2.FlatFieldsString["sorttitle"] = "Title ã»";

            d3 = helper.CreateDocument(testName, 1041, "ja-jp");
            d3.FlatFieldsString["sorttitle"] = "Title ã¼";

            d4 = helper.CreateDocument(testName, 1041, "ja-jp");
            d4.FlatFieldsString["sorttitle"] = "Title ã";

            d5 = helper.CreateDocument(testName, 1041, "ja-jp");
            d5.FlatFieldsString["sorttitle"] = "Title ã½";

            expectedResult.Add(d1);
            expectedResult.Add(d2);
            expectedResult.Add(d3);
            expectedResult.Add(d5);
            expectedResult.Add(d4);


            // ----------------------------------------------------------------------------------------------------
            // Japanese - kana insensitivity (1)
            //
            // There is a one-to-one mapping between the Hiragana and Katakan character sets. When ordering, a Hiragana and
            // its corresponding Katakana sibling should be ordered together.
            //
            // For this test we use 
            // ã < ã = ã¨ < ã  (3046 < 3048 = 30A8 < 308A ) Hiragana U < Hiragana E = Katakana E < Hiragana O
            //
            testName = HiraganaAccentInsensitiveSort1_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1041, "ja-jp");
            d1.FlatFieldsString["sorttitle"] = "Title ã";

            d2 = helper.CreateDocument(testName, 1041, "ja-jp");
            d2.FlatFieldsString["sorttitle"] = "Title ã1";

            d3 = helper.CreateDocument(testName, 1041, "ja-jp");
            d3.FlatFieldsString["sorttitle"] = "Title ã¨2";

            d4 = helper.CreateDocument(testName, 1041, "ja-jp");
            d4.FlatFieldsString["sorttitle"] = "Title ã";

            expectedResult.Add(d1);
            expectedResult.Add(d2);
            expectedResult.Add(d3);
            expectedResult.Add(d4);

            // ----------------------------------------------------------------------------------------------------
            // Japanese - kana insensitivity (2)
            //
            // There is a one-to-one mapping between the Hiragana and Katakan character sets. When ordering, a Hiragana and
            // its corresponding Katakana sibling should be ordered together.
            //
            // For this test we use 
            // ã¦ < ã = ã¨ = ãª  (30A6 < 3048 = 30A8 < 30AA) Katakana U < Hiragana E = Katakana  E < Katakana O
            //
            testName = HiraganaAccentInsensitiveSort2_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1041, "ja-jp");
            d1.FlatFieldsString["sorttitle"] = "Title ã¦";

            d2 = helper.CreateDocument(testName, 1041, "ja-jp");
            d2.FlatFieldsString["sorttitle"] = "Title ã1";

            d3 = helper.CreateDocument(testName, 1041, "ja-jp");
            d3.FlatFieldsString["sorttitle"] = "Title ã¨2";

            d4 = helper.CreateDocument(testName, 1041, "ja-jp");
            d4.FlatFieldsString["sorttitle"] = "Title ãª";

            expectedResult.Add(d1);
            expectedResult.Add(d2);
            expectedResult.Add(d3);
            expectedResult.Add(d4);

            #endregion

            #region Most recent offer start date
            // ----------------------------------------------------------------------------------------------------
            // Most recent offer start date
            //
            testName = MostRecentOfferStartDate_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1033, "en-us");
            d1.FlatFieldsDateTime["mostrecentofferstartdate"] = new DateTime(2009, 12, 1);

            d2 = helper.CreateDocument(testName, 1033, "en-us");
            d2.FlatFieldsDateTime["mostrecentofferstartdate"] = new DateTime(2009, 11, 1);

            d3 = helper.CreateDocument(testName, 1033, "en-us");
            d3.FlatFieldsDateTime["mostrecentofferstartdate"] = new DateTime(2010, 1, 1);

            expectedResult.Add(d2);
            expectedResult.Add(d1);
            expectedResult.Add(d3);
            #endregion

            #region Download count all time (free and paid ) sort documents
            // ----------------------------------------------------------------------------------------------------
            // Download count all time (free and paid )
            //
            testName = DownloadCountAlltimeFreeAndPaid_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1033, "en-us");
            d1.FlatFieldsInt32["downloadcountalltimefreeandpaid"] = 100;

            d2 = helper.CreateDocument(testName, 1033, "en-us");
            d2.FlatFieldsInt32["downloadcountalltimefreeandpaid"] = 1000;

            d3 = helper.CreateDocument(testName, 1033, "en-us");
            d3.FlatFieldsInt32["downloadcountalltimefreeandpaid"] = 99;

            expectedResult.Add(d3);
            expectedResult.Add(d1);
            expectedResult.Add(d2);
            #endregion

            #region Download count today (free and paid ) sort documents
            // ----------------------------------------------------------------------------------------------------
            // Download count today (free and paid )
            //
            testName = DownloadCountTodayFreeAndPaid_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1033, "en-us");
            d1.FlatFieldsInt32["downloadcounttodayfreeandpaid"] = 100;

            d2 = helper.CreateDocument(testName, 1033, "en-us");
            d2.FlatFieldsInt32["downloadcounttodayfreeandpaid"] = 99;

            d3 = helper.CreateDocument(testName, 1033, "en-us");
            d3.FlatFieldsInt32["downloadcounttodayfreeandpaid"] = 98;

            expectedResult.Add(d3);
            expectedResult.Add(d2);
            expectedResult.Add(d1);
            #endregion

            #region Download count alltime, paid purchase sort documents
            // ----------------------------------------------------------------------------------------------------
            // Download count alltime ( paid )
            //
            testName = DownloadCountAlltimePaid_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1033, "en-us");
            d1.FlatFieldsInt32["downloadcountalltimepaid"] = 10;

            d2 = helper.CreateDocument(testName, 1033, "en-us");
            d2.FlatFieldsInt32["downloadcountalltimepaid"] = 11;

            d3 = helper.CreateDocument(testName, 1033, "en-us");
            d3.FlatFieldsInt32["downloadcountalltimepaid"] = 12;

            expectedResult.Add(d1);
            expectedResult.Add(d2);
            expectedResult.Add(d3);
            #endregion

            #region Download count today, paid purchase sort documents
            // ----------------------------------------------------------------------------------------------------
            // Download count today ( paid )
            //
            testName = DownloadCountTodayPaid_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1033, "en-us");
            d1.FlatFieldsInt32["downloadcounttodaypaid"] = 10;

            d2 = helper.CreateDocument(testName, 1033, "en-us");
            d2.FlatFieldsInt32["downloadcounttodaypaid"] = 11;

            d3 = helper.CreateDocument(testName, 1033, "en-us");
            d3.FlatFieldsInt32["downloadcounttodaypaid"] = 12;

            expectedResult.Add(d1);
            expectedResult.Add(d2);
            expectedResult.Add(d3);
            #endregion

            #region User rating/rating aggregate sort documents
            // ----------------------------------------------------------------------------------------------------
            // User rating/rating aggregate
            //
            testName = UserRatingAggragate_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1033, "en-us");
            d1.FlatFieldsSingle["userrating"] = 3.75f;

            d2 = helper.CreateDocument(testName, 1033, "en-us");
            d2.FlatFieldsSingle["userrating"] = 3.76f;

            d3 = helper.CreateDocument(testName, 1033, "en-us");
            d3.FlatFieldsSingle["userrating"] = 3.74f;

            d4 = helper.CreateDocument(testName, 1033, "en-us");

            expectedResult.Add(d4);
            expectedResult.Add(d3);
            expectedResult.Add(d1);
            expectedResult.Add(d2);

            // ----------------------------------------------------------------------------------------------------
            // User rating + number of ratings
            //
            testName = UserRatingAggragateAndNumberOfRatings_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1033, "en-us");
            d1.FlatFieldsSingle["userrating"] = 3.77f;
            d1.FlatFieldsInt32["userratingnumberofratings"] = 11;

            d2 = helper.CreateDocument(testName, 1033, "en-us");
            d2.FlatFieldsSingle["userrating"] = 3.76f;
            d2.FlatFieldsInt32["userratingnumberofratings"] = 100;

            d3 = helper.CreateDocument(testName, 1033, "en-us");
            d3.FlatFieldsSingle["userrating"] = 3.76f;
            d3.FlatFieldsInt32["userratingnumberofratings"] = 110;

            d4 = helper.CreateDocument(testName, 1033, "en-us");
            d4.FlatFieldsSingle["userrating"] = 3.76f;
            d4.FlatFieldsInt32["userratingnumberofratings"] = 99;

            d5 = helper.CreateDocument(testName, 1033, "en-us");
            d5.FlatFieldsSingle["userrating"] = 3.74f;
            d5.FlatFieldsInt32["userratingnumberofratings"] = 12;

            d6 = helper.CreateDocument(testName, 1033, "en-us");

            expectedResult.Add(d6);
            expectedResult.Add(d5);
            expectedResult.Add(d4);
            expectedResult.Add(d2);
            expectedResult.Add(d3);
            expectedResult.Add(d1);

            #endregion
            #region Visibility date
            // ----------------------------------------------------------------------------------------------------
            // Visibility Date
            //
            testName = VisibilityDate_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1033, "en-us");
            d1.FlatFieldsDateTime["visibilitydate"] = new DateTime(2009, 12, 1);

            d2 = helper.CreateDocument(testName, 1033, "en-us");
            d2.FlatFieldsDateTime["visibilitydate"] = new DateTime(2009, 11, 1);

            d3 = helper.CreateDocument(testName, 1033, "en-us");
            d3.FlatFieldsDateTime["visibilitydate"] = new DateTime(2010, 1, 1);

            expectedResult.Add(d2);
            expectedResult.Add(d1);
            expectedResult.Add(d3);
            #endregion

            #region Release date
            // ----------------------------------------------------------------------------------------------------
            // Release date
            //
            // release date is nullable - test the 'not set' case
            testName = ReleaseDate_TestName;
            expectedResult = new List<MediaDocument>();
            testDocuments[testName] = expectedResult;

            d1 = helper.CreateDocument(testName, 1033, "en-us");
            d1.FlatFieldsDateTime["releasedate"] = new DateTime(2009, 12, 1);

            d2 = helper.CreateDocument(testName, 1033, "en-us");
            d2.FlatFieldsDateTime["releasedate"] = new DateTime(2009, 11, 1);

            d3 = helper.CreateDocument(testName, 1033, "en-us");
            d3.FlatFieldsDateTime["releasedate"] = new DateTime(2010, 1, 1);

            d4 = helper.CreateDocument(testName, 1033, "en-us");

            expectedResult.Add(d4);
            expectedResult.Add(d2);
            expectedResult.Add(d1);
            expectedResult.Add(d3);

            #endregion
        }

        public SortTests()
        {
        }

        #region Test Infrastructure
        [TestGroupSetup]
        public void Setup()
        {
            helper = new EspHelper("sort_test");
            CreateTestDocuments();

            helper.RemoveUnitTestDocuments();

            List<MediaDocument> allDocuments = new List<MediaDocument>();
            foreach (String k in testDocuments.Keys)
            {
                allDocuments.AddRange(testDocuments[k]);
            }
            helper.AddUnitTestDocuments(allDocuments);
        }

        [TestGroupTearDown]
        public void Shutdown()
        {
            try
            {
                helper.RemoveUnitTestDocuments();
            }
            catch (Exception e)
            {
                Global.RO.Info(String.Format("Exception during shutdown: {0}", e));
            }

            if (helper != null)
            {
                helper.Dispose();
            }
        }

        public static List<String> ExtractIdsFromResult(String xmlResults)
        {
            List<String> ids = new List<string>();
            XPathDocument doc = new XPathDocument(new StringReader(xmlResults));
            XPathNavigator nav = doc.CreateNavigator();

            XPathNodeIterator it = nav.Select("//a:id", helper.NamespaceManager);

            // Skip the first <a:id> element - this is the id for the whole result
            it.MoveNext();

            while (it.MoveNext())
            {
                ids.Add(it.Current.Value);
            }
            return ids;
        }

        private static TEST_RESULTS VerifyOrder(String testName, Hashtable filterCriteria, Int32 direction)
        {
            String xmlAsString = helper.GetDocument(filterCriteria);
            List<String> orderedIds = ExtractIdsFromResult(xmlAsString);

            if ((orderedIds == null) || (orderedIds.Count == 0))
            {
                Global.RO.Info(String.Format("No results retrieved"));
                return TEST_RESULTS.FAILED;
            }

            List<MediaDocument> expectedResults = testDocuments[testName];
            if (orderedIds.Count != expectedResults.Count)
            {
                Global.RO.Info(String.Format("Expected {0} results but actually received {1}", orderedIds.Count, expectedResults.Count));
                return TEST_RESULTS.FAILED;
            }

            if (direction == 1)
            {
                for (Int32 index = 0; index < expectedResults.Count; index++)
                {
                    if (orderedIds[index] != expectedResults[index].DocumentId)
                    {
                        Global.RO.Info(String.Format("Expected document {0} but got doc {1}", expectedResults[index].DocumentId, orderedIds[index]));
                        return TEST_RESULTS.FAILED;
                    }
                }
            }
            else
            {
                Int32 resultIndex = 0;
                for (Int32 index = expectedResults.Count - 1; index >= 0; index--)
                {
                    if (orderedIds[resultIndex] != expectedResults[index].DocumentId)
                    {
                        Global.RO.Info(String.Format("Expected document {0} but got doc {1}", expectedResults[index].DocumentId, orderedIds[resultIndex]));
                        return TEST_RESULTS.FAILED;
                    }
                    resultIndex++;
                }
            }
            return TEST_RESULTS.PASSED;
        }

        public static TEST_RESULTS Test(String name, Int32 orderBy, Int32 direction, String locale)
        {
            Hashtable filterCriteria = helper.GetCommonFilterCriteria( name, locale);

            filterCriteria["orderby"] = orderBy;
            filterCriteria["orderdirection"] = direction;

            return VerifyOrder(name, filterCriteria, direction);
        }

        #endregion



        #region sorttitle Order Tests
        [TestCase, TestCasePriority(1)]
        class SortByTitleAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(BasicRomanAlphaSort_TestName, 1, 1, "en-us");
            }
        }
        [TestCase, TestCasePriority(1)]
        class SortByTitleDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(BasicRomanAlphaSort_TestName, 1, 2, "en-us");
            }
        }

        /****
        [TestCase, TestCasePriority(1)]
        class SortByPunctuationAlphaAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(PunctuationAlphaSort_TestName, 1, 1, "en-us");
            }
        }


        [TestCase, TestCasePriority(1)]
        class SortByPunctuationAlphaDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(PunctuationAlphaSort_TestName, 1, 2, "en-us");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortBySortTitleMultipleCharactersAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(MultipleCharAlphaSort_TestName, 1, 1, "en-us");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortBySortTitleMultipleCharactersDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(MultipleCharAlphaSort_TestName, 1, 2, "en-us");
            }
        }
        ****/

        #endregion

        [TestCase, TestCasePriority(1)]
        class SortByHiraganaTitleAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(BasicHiraganaSort_TestName, 1, 1, "ja-jp");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByHiraganaTitleDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(BasicHiraganaSort_TestName, 1, 2, "ja-jp");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByHiraganaAccentSensitiveAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(HiraganaAccentSensitiveSort_TestName, 1, 1, "ja-jp");
            }
        }


        [TestCase, TestCasePriority(1)]
        class SortByHiraganaAccentSensitiveDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(HiraganaAccentSensitiveSort_TestName, 1, 2, "ja-jp");
            }
        }

        /*****
        [TestCase, TestCasePriority(1)]
        class SortByHiraganaCaseInsensitiveAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(HiraganaCaseInsensitivitySort_TestName, 1, 1, "ja-jp");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByHiraganaCaseInsensitiveDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(HiraganaCaseInsensitivitySort_TestName, 1, 2, "ja-jp");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByAlphaKanaAccentSensitive2Asc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(HiraganaCaseSensitivity2Sort_TestName, 1, 1, "ja-jp");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByAlphaKanaAccentSensitive2Desc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(HiraganaCaseSensitivity2Sort_TestName, 1, 2, "ja-jp");
            }
        }


        [TestCase, TestCasePriority(1)]
        class SortByAlphaKanaInsensitive1Asc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(HiraganaAccentInsensitiveSort1_TestName, 1, 1, "ja-jp");
            }
        }
        ****/

        [TestCase, TestCasePriority(1)]
        class SortByAlphaKanaInsensitive1Desc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(HiraganaAccentInsensitiveSort1_TestName, 1, 2, "ja-jp");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByAlphaKanaInsensitive2Asc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(HiraganaAccentInsensitiveSort2_TestName, 1, 1, "ja-jp");
            }
        }


        [TestCase, TestCasePriority(1)]
        class SortByAlphaKanaInsensitive2Desc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(HiraganaAccentInsensitiveSort2_TestName, 1, 2, "ja-jp");
            }
        }




        #region Most recent offer start date Tests
        [TestCase, TestCasePriority(1)]
        class SortByMostRecentOfferStartDateAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(MostRecentOfferStartDate_TestName, 10, 1, "en-us");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByMostRecentOfferStartDateDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(MostRecentOfferStartDate_TestName, 10, 2, "en-us");
            }
        }
        #endregion

        #region Download count alltime, free and paid Tests
        [TestCase, TestCasePriority(1)]
        class SortByDownloadCountAllTimeFreeAndPaidAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(DownloadCountAlltimeFreeAndPaid_TestName, 4, 1, "en-us");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByDownloadCountAllTimeFreeAndPaidDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(DownloadCountAlltimeFreeAndPaid_TestName, 4, 2, "en-us");
            }
        }
        #endregion

        #region Download count today, free and paid Tests
        [TestCase, TestCasePriority(1)]
        class SortByDownloadCountTodayFreeAndPaidAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(DownloadCountTodayFreeAndPaid_TestName, 5, 1, "en-us");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByDownloadCountTodayFreeAndPaidDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(DownloadCountTodayFreeAndPaid_TestName, 5, 2, "en-us");
            }
        }
        #endregion

        #region Download count alltime, paid purchase Tests
        [TestCase, TestCasePriority(1)]
        class SortByPaidPurchaseAllTimeAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(DownloadCountAlltimePaid_TestName, 8, 1, "en-us");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByPaidPurchaseAllTimeDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(DownloadCountAlltimePaid_TestName, 8, 2, "en-us");
            }
        }
        #endregion

        #region Download count today, paid purchase Tests
        [TestCase, TestCasePriority(1)]
        class SortByPaidPurchaseTodayAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(DownloadCountTodayPaid_TestName, 9, 1, "en-us");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByPaidPurchaseTodayDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(DownloadCountTodayPaid_TestName, 9, 2, "en-us");
            }
        }
        #endregion

        #region User Rating Sorts
        [TestCase, TestCasePriority(1)]
        class SortByUserRatingAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(UserRatingAggragate_TestName, 6, 1, "en-us");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByUserRatingDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(UserRatingAggragate_TestName, 6, 2, "en-us");
            }
        }


        [TestCase, TestCasePriority(1)]
        class SortByUserRatingNumberOfRatingsAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(UserRatingAggragateAndNumberOfRatings_TestName, 6, 2, "en-us");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByUserRatingNumberOfRatingsDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(UserRatingAggragateAndNumberOfRatings_TestName, 6, 2, "en-us");
            }
        }
        #endregion

        #region Visibility date Tests
        [TestCase, TestCasePriority(1)]
        class SortByVisibilityDateAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(VisibilityDate_TestName, 2, 1, "en-us");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByVisibilityDateDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(VisibilityDate_TestName, 2, 2, "en-us");
            }
        }
        #endregion

        #region Release date Tests
        [TestCase, TestCasePriority(1)]
        class SortByReleaseDateAsc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(ReleaseDate_TestName, 3, 1, "en-us");
            }
        }

        [TestCase, TestCasePriority(1)]
        class SortByReleaseDateDesc : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(ReleaseDate_TestName, 3, 2, "en-us");
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\EspEngine\SearchTests.cs ===
ï»¿using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.XPath;

using Com.FastSearch.Esp.Search;
using Com.FastSearch.Esp.Search.Query;
using Com.FastSearch.Esp.Search.Result;
using Com.FastSearch.Esp.Search.View;

using xonline.common.config;
using xonline.common.espengine;
using xonline.common.service;
using xonline.common.sql.sqlclient;
using xonline.common.mgmt;
using xonline.common.utilities;
using xonline.server.catalogwatcher;
using HResult = xonline.common.service.HResult;

using ServerTestFramework;
using ServerTestFramework.LiveService;

using Com.FastSearch.Esp.Content;
using Com.FastSearch.Esp.Content.Errors;
using Com.FastSearch.Esp.Content.Util;
using Com.FastSearch.Esp.Content.Config;


namespace xonline.server.marketplace.test
{
    /// <summary>
    /// Normalization is the process whereby characters with the same meaning are converted
    /// to some base character. For example the digit '2' (\u0032) and 'ï¼' (\uFF12) have the same
    /// intent - to convey the number 'two'. In this case, we normalize (convert) all instances
    /// of 'ï¼' to '2'.
    /// </summary>
    [TestGroup, Owner("ajaffray"), TestFrequency("Check-In"), EnvRequirement("EspTests")]
    class SearchTests
    {
        private static EspHelper helper = null;

        private static readonly String TestDataName_BasicEnglishSearchTitle = "basic_english_search_title_test_data";
        private static readonly String TestDataName_BasicEnglishSearchDescription = "basic_english_search_description_test_data";
        private static readonly String TestDataName_BasicEnglishSearchKeywords = "basic_english_search_keywords_test_data";        
        private static readonly String TestDataName_SpellCheck_English = "spell_check_english_test_data";
        private static readonly String TestDataName_SpellCheck_Japanese = "spell_check_japanese_test_data";
        private static readonly String TestDataName_SpellCheck_OnlyOnResubmission = "spell_check_only_on_resubmission_test_data";
        private static readonly String TestDataName_AntiPhrasing = "antiphrasing_test_data";
        private static readonly String TestDataName_ProductTypeRankInfluence = "product_type_rank_influence_test_data";
        private static readonly String TestDataName_JapaneseReal_SearchTitle = "japanese_real_searchtitle_test_data";
        private static readonly String TestDataName_JapaneseReal_Conversions = "japanese_real_conversion_test_data";

        private static List<MediaDocument> testDocuments = new List<MediaDocument>();
        private static Dictionary<String, List<MediaDocument>> expectedResults = new Dictionary<string, List<MediaDocument>>();

        private static List<TestTuple> JapaneseReal_SearchTitle_Tests = new List<TestTuple>();
        private static List<TestTuple> JapaneseReal_Conversion_Tests = new List<TestTuple>();

        private void CreateTestDocuments()
        {
            testDocuments = new List<MediaDocument>();
            String testDataName;
            MediaDocument d1;
            MediaDocument d2;
            MediaDocument d3;
            MediaDocument d4;
            List<MediaDocument> expectedResult;
            String[] searchTerms;

            #region basic English search
            // ----------------------------------------------------------------------------------------------------
            // Basic English  - title
            testDataName = TestDataName_BasicEnglishSearchTitle;
            expectedResult = new List<MediaDocument>();
            expectedResults[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1033, "en-us");
            d1.FlatFieldsString["searchtitle"] = "Title AAA";

            d2 = helper.CreateDocument(testDataName, 1033, "en-us");
            d2.FlatFieldsString["searchtitle"] = "Title BBB";

            expectedResult.Add(d1);

            testDocuments.Add(d1);
            testDocuments.Add(d2);

            // ----------------------------------------------------------------------------------------------------
            // Basic English - description
            testDataName = TestDataName_BasicEnglishSearchDescription;
            expectedResult = new List<MediaDocument>();
            expectedResults[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1033, "en-us");
            d1.FlatFieldsString["searchdescription"] = "Description AAA";

            d2 = helper.CreateDocument(testDataName, 1033, "en-us");
            d2.FlatFieldsString["searchdescription"] = "Description BBB";

            expectedResult.Add(d1);

            testDocuments.Add(d1);
            testDocuments.Add(d2);

            // ----------------------------------------------------------------------------------------------------
            // Basic English - keywords
            testDataName = TestDataName_BasicEnglishSearchKeywords;
            expectedResult = new List<MediaDocument>();
            expectedResults[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1033, "en-us");
            d1.FlatFieldsString["keywords"] = "Keywords AAA";

            d2 = helper.CreateDocument(testDataName, 1033, "en-us");
            d2.FlatFieldsString["keywords"] = "Keywords BBB";

            expectedResult.Add(d1);

            testDocuments.Add(d1);
            testDocuments.Add(d2);


            #endregion

            #region Spell check test data
            // ----------------------------------------------------------------------------------------------------
            // Spell check test data
            //
            // We add a document with the title 'Alan Wake'. We then search for 'AlanWake' (no space) and spell
            // check with auto resubmission should find our doc
            //
            testDataName = TestDataName_SpellCheck_English;
            expectedResult = new List<MediaDocument>();
            expectedResults[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1033, "en-us");
            d1.FlatFieldsString["searchtitle"] = "dictionary";

            expectedResult.Add(d1);

            testDocuments.Add(d1);


            testDataName = TestDataName_SpellCheck_Japanese;
            expectedResult = new List<MediaDocument>();
            expectedResults[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "Alan Wake";

            expectedResult.Add(d1);

            testDocuments.Add(d1);
            #endregion

            #region Anti Phrasing
            // ----------------------------------------------------------------------------------------------------
            // Anti Phrasing
            //
            // There are 3 possible ways to search for test. Supppose user enters the search term 'Halo 3'
            //
            //  - 'phrase' - this would match documents such as 'Game title Halo 3', but not 'There are 3 games called Halo'
            //  - 'and' - this would match document a document with the title 'There are 3 games called Halo' - it contains 
            //      the search term '3' and 'Halo'
            //  - 'or' - this is the most liberal - it would match documents that contain the term '3' and documents that
            //      contain the term 'Halo', but the documents do not have to have both.
            //
            // For our purposes, we use 'and'
            //
            testDataName = TestDataName_AntiPhrasing;
            expectedResult = new List<MediaDocument>();
            expectedResults[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1033, "en-us");
            d1.FlatFieldsString["searchtitle"] = "Game title is Halo 3 complete phrase";

            d2 = helper.CreateDocument(testDataName, 1033, "en-us");
            d2.FlatFieldsString["searchtitle"] = "There are 3 games called Halo in catalog";

            d3 = helper.CreateDocument(testDataName, 1033, "en-us");
            d3.FlatFieldsString["searchtitle"] = "There is a halo over his head";

            d4 = helper.CreateDocument(testDataName, 1033, "en-us");
            d4.FlatFieldsString["searchtitle"] = "There are 3 other titles in this test";

            expectedResult.Add(d1);
            expectedResult.Add(d2);

            testDocuments.Add(d1);
            testDocuments.Add(d2);
            testDocuments.Add(d3);
            testDocuments.Add(d4);
            #endregion

            #region Spell check - should not happen
            // ----------------------------------------------------------------------------------------------------
            testDataName = TestDataName_SpellCheck_OnlyOnResubmission;
            expectedResult = new List<MediaDocument>();
            expectedResults[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1033, "en-us");
            d1.FlatFieldsString["searchtitle"] = "Title with unittest, a correctable word";

            expectedResult.Add(d1);
            testDocuments.Add(d1);
            #endregion

            #region Rank influenced by product type weighting
            // ----------------------------------------------------------------------------------------------------
            testDataName = TestDataName_ProductTypeRankInfluence;
            expectedResult = new List<MediaDocument>();
            expectedResults[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1033, "en-us");
            d1.FlatFieldsString["searchtitle"] = "Document with Abracadabra in title";
            d1.FlatFieldsInt32["producttypeweighting"] = 0;

            d2 = helper.CreateDocument(testDataName, 1033, "en-us");
            d2.FlatFieldsString["searchtitle"] = "Document without Abra... in title";
            d2.FlatFieldsInt32["producttypeweighting"] = 0;

            d3 = helper.CreateDocument(testDataName, 1033, "en-us");
            d3.FlatFieldsString["searchtitle"] = "Document with Abracadabra in title";
            d3.FlatFieldsInt32["producttypeweighting"] = 100;

            expectedResult.Add(d3);
            expectedResult.Add(d1);

            testDocuments.Add(d1);
            testDocuments.Add(d2);
            testDocuments.Add(d3);
            #endregion

            #region Authentic Japanese titles and search terms
            // ----------------------------------------------------------------------------------------------------
            testDataName = TestDataName_JapaneseReal_SearchTitle;
            TestTuple tp;

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "worms 2: armageddon worms 2: armageddon ã¯ã¼ã ãº2";
            tp = new TestTuple(d1, "ãã¼ãã2");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨ç - hydro thunder hurricane hydro thunder ãã¤ãã­ãµã³ãã¼ããªã±ã¼ã³";
            tp = new TestTuple(d1, "ã¯ãã©ãããã ã¼ã¯ããã¼ã");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨ç - ã­ãã¯ãã³10 å®å®ã«ã©ãèå¨!! ã­ãã¯ãã³10 å®å®ã«ã©ãèå¨!! ã­ãã¯ãã³10ã¦ãã¥ã¦ã«ã©ãã­ã§ã¦ã¤";
            tp = new TestTuple(d1, "ãã£ãã¾ã10ãã¡ããããã®ãããã");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "the idolm@ster the idolm@ster ã¢ã¤ãã«ãã¹ã¿ã¼";
            tp = new TestTuple(d1, "ããã©ãã¾ããã¼");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "halo 3 halo 3 ãã¤ã­ã¼3";
            tp = new TestTuple(d1, "ã¸ããã¼3");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "perfect dark zero perfect dark zero ãã¼ãã¨ã¯ããã¼ã¯ã¼ã­";
            tp = new TestTuple(d1, "ã±ã¼ãµããã¨ã ã¼ããã");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "ã¢ããã¬!ããã£ã¼ã¿ ã¢ããã¬!ããã£ã¼ã¿ ã¢ããã¬ããã£ã¼ã¿";
            tp = new TestTuple(d1, "ãã¤ã¾ãã´ã«ãã¼ã");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨ç - darwinia+ darwinia+ ãã¼ã¦ã¤ãã¢+";
            tp = new TestTuple(d1, "ã ã¼ããã«ã+");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "ãã©ã¹ãã¤ãã« ãã©ã¹ãã¤ãã« ãã©ã¹ãã¤ãã«ã·ã§ãã³ãã¦ã¡";
            tp = new TestTuple(d1, "ã¨ããã¦ãã¹ãããã±ãã®ãã");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "ãã¼ã¢ ã²ã·ã¥ã¿ã«ã ãã¼ã¢ ã²ã·ã¥ã¿ã«ã ãã¼ã¢ã²ã·ã¥ã¿ã«ã";
            tp = new TestTuple(d1, "ãã¼ã¢ ã²ã·ã¥ã¿ã«ã");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "ãã¼ã¢ ã²ã·ã¥ã¿ã«ã - äºåç·¨ (hd) ãã¼ã¢ ã²ã·ã¥ã¿ã«ã - äºåç·¨ (hd) ãã¼ã¢ ã²ã·ã¥ã¿ã«ã - äºåç·¨ (hd)";
            tp = new TestTuple(d1, "ãã¼ã¢ ã²ã·ã¥ã¿ã«ã");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨ç - lara croft and the guardian of light ã©ã©ã»ã¯ã­ãã: gol ã©ã©ã¯ã­ããã¢ã³ãã¬ã¼ãã³ãªãã©ã¤ã";
            tp = new TestTuple(d1, "ã©ã©ã»ã¯ã­ãã: GoL");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨ç - lara croft and the guardian of light ã©ã©ã»ã¯ã­ãã: gol ã©ã©ã¯ã­ããã¢ã³ãã¬ã¼ãã³ãªãã©ã¤ã";
            tp = new TestTuple(d1, "ã©ã©ã»ã¯ã­ãã: GoL");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨ç - comic jumper comic jumper comic jumper";
            tp = new TestTuple(d1, "Comic Jumper");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "ããªã³ã¹ãªããã«ã·ã£ ããªã³ã¹ãªããã«ã·ã£ ããªã³ã¹ãªããã«ã·ã£";
            tp = new TestTuple(d1, "ããªã³ã¹ãªããã«ã·ã£");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "bioshock 2 (jp) bioshock 2 (jp) bioshock 2 (jp)";
            tp = new TestTuple(d1, "BioShock 2");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "ãªè©¦ã·ç - ã­ãã¯ãã³9 éæãå¾©æ´»!! ã­ãã¯ãã³9 éæãå¾©æ´»!! ã­ãã¯ãã³9ã¤ãã¦ãããã«ã";
            searchTerms = new String[2];
            searchTerms[0] = "ã­ãã¯ãã³ï¼ãéæã®å¾©æ´»ï¼ï¼";
            searchTerms[1] = "ã­ãã¯ãã³";
            tp = new TestTuple(d1, searchTerms);
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "ãã©ã¹ãã¤ãã« ãã©ã¹ãã¤ãã« ãã©ã¹ãã¤ãã«ã·ã§ãã³ãã¦ã¡";
            tp = new TestTuple(d1, "ãã©ã¹ãã£ãã«");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "halo waypoint halo waypoint ãã¤ã­ã¼ã¦ã¨ã¤ãã¤ã³ã";
            tp = new TestTuple(d1, "Halo Waypoint");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨ç - castle crashers castle crashers ã­ã£ãã¹ã«ã¯ã©ãã·ã£ã¼ãº";
            tp = new TestTuple(d1, "Castle Crashers");
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨ç - snoopy flying ace snoopy flying ace ã¹ãã¼ãã¼ãã©ã¤ã³ã°ã¨ã¼ã¹";
            searchTerms = new String[3];
            searchTerms[0] = "Snoopy";
            searchTerms[1] = "ã¹ãã¼ãã¼";
            searchTerms[2] = "ãã¬ã¼ã´ã¼ãµãããããã¼ã";
            tp = new TestTuple(d1, searchTerms);
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨ç - bomberman live bomberman live ãã³ãã¼ãã³ã©ã¤ã";
            searchTerms = new String[3];
            searchTerms[0] = "Bomberman";
            searchTerms[1] = "Bomberman LIVE";
            searchTerms[2] = "ã¼ãã°ã¼";
            tp = new TestTuple(d1, searchTerms);
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨ç - limbo limbo ãªã³ã";
            searchTerms = new String[2];
            searchTerms[0] = "LIMBO";
            searchTerms[1] = "ããã¼";
            tp = new TestTuple(d1, searchTerms);
            testDocuments.Add(d1);

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "ãªè©¦ã·ç - æé³© æé³© ã¤ã«ã«ã¬";
            searchTerms = new String[2];
            searchTerms[0] = "æé³©";
            searchTerms[1] = "ãããã";
            tp = new TestTuple(d1, searchTerms);
            testDocuments.Add(d1);


            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨çã²ã¼ã  - wool wool ã¦ã¼ã«";
            searchTerms = new String[2];
            searchTerms[0] = "Wool";
            searchTerms[1] = "ãã¼ã";
            tp = new TestTuple(d1, searchTerms);
            testDocuments.Add(d1);
            #endregion

            #region Authenic Japanese conversions
            // ----------------------------------------------------------------------------------------------------
            testDataName = TestDataName_JapaneseReal_Conversions;

            // Hiragana-Katakana insensitivity
            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "ãã¤ãªã·ã§ãã¯ ãã¤ãªã·ã§ãã¯ ãã¤ãªã·ã§ãã¯";
            searchTerms = new String[2];
            searchTerms[0] = "ã°ããããã£ã";
            searchTerms[1] = "ãã¤ãªã·ã§ãã¯";
            JapaneseReal_Conversion_Tests.Add(new TestTuple(d1, searchTerms));
            testDocuments.Add(d1);

            // Hiragana-Katakana insensitivity
            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "ãè©¦ãç - ã´ã¼ã«ãã³ã¢ãã¯ã¹ ã´ã¼ã«ãã³ã¢ãã¯ã¹ ã´ã¼ã«ãã³ã¢ãã¯ã¹";
            searchTerms = new String[2];
            searchTerms[0] = "ãã¼ãã§ããã£ãã";
            searchTerms[1] = "ã´ã¼ã«ãã³ã¢ãã¯ã¹";
            JapaneseReal_Conversion_Tests.Add(new TestTuple(d1, searchTerms));
            testDocuments.Add(d1);

            // Hiragana-Katakana insensitivity
            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨ç - ã³ããã¯ã¹ã¾ã¼ã³ ã³ããã¯ã¹ã¾ã¼ã³ ã³ããã¯ã¹ã¾ã¼ã³";
            searchTerms = new String[2];
            searchTerms[0] = "ãã¿ã£ãããã¼ã";
            searchTerms[1] = "ã³ããã¯ã¹ã¾ã¼ã³";
            JapaneseReal_Conversion_Tests.Add(new TestTuple(d1, searchTerms));
            testDocuments.Add(d1);

            // Case insensitivity - note the different sized first letter in the two search terms
            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨ç - ããã¿ãã LIVE ããã¿ããLIVE ããã¿ããLIVE";
            searchTerms = new String[2];
            searchTerms[0] = "ããã¿ããLIVE";
            searchTerms[1] = "ããã¿ããLIVE";
            JapaneseReal_Conversion_Tests.Add(new TestTuple(d1, searchTerms));
            testDocuments.Add(d1);

            // Case insensitivity - note the different sized 6th letter in the two search terms
            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "å®å¨ç - ãã¬ã¤ã³ãã£ã¬ã³ã¸ ãã¬ã¤ã³ãã£ã¬ã³ã¸ ãã¬ã¤ã³ãã£ã¬ã³ã¸";
            searchTerms = new String[2];
            searchTerms[0] = "ãã¬ã¤ã³ãã¤ã¬ã³ã¸";
            searchTerms[1] = "ãã¬ã¤ã³ãã£ã¬ã³ã¸";
            JapaneseReal_Conversion_Tests.Add(new TestTuple(d1, searchTerms));
            testDocuments.Add(d1);

            #endregion

        }

        /// <summary>
        ///  Basic english search expecting match against thhe title
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class BasicEnglishTitleSearch : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(TestDataName_BasicEnglishSearchTitle, "en-us", "AAA");
            }
        }

        /// <summary>
        ///  Basic english search expecting match against thhe description
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class BasicEnglishDescriptionSearch : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(TestDataName_BasicEnglishSearchDescription, "en-us", "AAA");
            }
        }

        /// <summary>
        ///  Basic english search expecting match against thhe keywords
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class BasicEnglishKeywordsSearch : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(TestDataName_BasicEnglishSearchKeywords, "en-us", "AAA");
            }
        }


        /// <summary>
        ///  Basic english spell check test
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class BasicEnglishSpellCheck : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(TestDataName_SpellCheck_English, "en-us", "dictionar");
            }
        }

        /// <summary>
        ///  Basic english search expecting match against thhe description
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class BasicJapaneseSpellCheck : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(TestDataName_SpellCheck_Japanese, "ja-jp", "AlanWake");

            }
        }

        /// <summary>
        /// Validate that we do not do spell checking on the initial submission.
        /// In this case, the initial submission with 'unittest' should correctly match.
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class SpellCheckOnResubmissionOnly : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(TestDataName_SpellCheck_OnlyOnResubmission, "en-us", "unittest");
            }
        }


        /// <summary>
        ///  AntiPhrasing test
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class AntiPhrasing : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(TestDataName_AntiPhrasing, "en-us", "Halo 3");
            }
        }

        /// <summary>
        ///  Product type influences rank test
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class ProductTypeRankInfluence : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(TestDataName_ProductTypeRankInfluence, "en-us", "Abracadabra");
            }
        }

        /// <summary>
        ///  Authentic Japanese string tests
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class JapaneseAuthenticSearch : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(TestDataName_JapaneseReal_SearchTitle, "ja-jp", JapaneseReal_SearchTitle_Tests);
            }
        }

        /// <summary>
        ///  Authentic Japanese character conversion tests
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class JapaneseAuthenticConversion : TestBase
        {
            protected override void Execute()
            {
                ResultCode = Test(TestDataName_JapaneseReal_Conversions, "ja-jp", JapaneseReal_Conversion_Tests);
            }
        }


        #region Test Infrastructure
        public SearchTests()
        {
        }

        [TestGroupSetup]
        public void Setup()
        {
            helper = new EspHelper("search_test_data");
            CreateTestDocuments();

            helper.RemoveUnitTestDocuments();

            helper.AddUnitTestDocuments(testDocuments);
        }

        [TestGroupTearDown]
        public void Shutdown()
        {
            try
            {
                helper.RemoveUnitTestDocuments();
            }
            catch (Exception e)
            {
                Global.RO.Info(String.Format("Exception during shutdown: {0}", e));
            }

            if (helper != null)
            {
                helper.Dispose();
            }
        }
        

        public static List<String> ExtractIdsFromResult(String xmlResults)
        {
            List<String> ids = new List<string>();
            XPathDocument doc = new XPathDocument(new StringReader(xmlResults));
            XPathNavigator nav = doc.CreateNavigator();

            XPathNodeIterator it = nav.Select("//a:id", helper.NamespaceManager);

            // Skip the first <a:id> element - this is the id for the whole result
            it.MoveNext();

            while (it.MoveNext())
            {
                ids.Add(it.Current.Value);
            }
            return ids;
        }

        private static TEST_RESULTS ValidateDocumentsReturned(String testName, Hashtable filterCriteria )
        {
            List<MediaDocument> expectedResult = expectedResults[testName];
            return ValidateDocumentsReturned(expectedResult, filterCriteria);
        }

        private static TEST_RESULTS ValidateDocumentsReturned( List<MediaDocument> expectedResult, Hashtable filterCriteria)
        {
            String xmlAsString = helper.GetDocument(filterCriteria);
            List<String> orderedIds = ExtractIdsFromResult(xmlAsString);

            if ((orderedIds == null) || (orderedIds.Count == 0))
            {
                Global.RO.Info(String.Format("No results retrieved"));
                return TEST_RESULTS.FAILED;
            }

            if (orderedIds.Count != expectedResult.Count)
            {
                Global.RO.Info(String.Format("Expected {0} results but actually received {1}", expectedResult.Count, orderedIds.Count));
                return TEST_RESULTS.FAILED;
            }

            // Make sure that each of the ids in one set is in the other
            foreach (MediaDocument md in expectedResult)
            {
                if (!orderedIds.Contains(md.DocumentId))
                {
                    return TEST_RESULTS.FAILED;
                }
            }

            return TEST_RESULTS.PASSED;
        }

        public static TEST_RESULTS Test(String testDataName, String locale, string searchTerm )
        {
            Hashtable filterCriteria = helper.GetCommonFilterCriteria(testDataName, locale);

            filterCriteria["searchterm"] = searchTerm;

            Global.RO.Info(String.Format("Searching for docs with [{0}]", searchTerm ));

            return ValidateDocumentsReturned(testDataName, filterCriteria );
        }

        public static TEST_RESULTS Test(String testDataName, String locale, List<TestTuple> tests)
        {
            TEST_RESULTS result = TEST_RESULTS.PASSED;
            foreach (TestTuple testTuple in tests)
            {
                Global.RO.Info(String.Format("Search test [{0}]. Expected document [{1}]", testDataName, testTuple.ExpectedDocument.FlatFieldsString["searchtitle"] ));
                try
                {
                    foreach( String term in testTuple.SearchTerm )
                    {
                        Hashtable filterCriteria = helper.GetCommonFilterCriteria(testDataName, locale);

                        filterCriteria["searchterm"] = term;
                        Global.RO.Info(String.Format("  Searching with term [{0}]", term));
                        List<MediaDocument> expectedDocument = new List<MediaDocument>();
                        expectedDocument.Add( testTuple.ExpectedDocument );
                        if (ValidateDocumentsReturned(expectedDocument, filterCriteria) != TEST_RESULTS.PASSED)
                        {
                            result = TEST_RESULTS.FAILED;
                        }
                    }
                }
                catch( Exception e )
                {
                    Global.RO.Info(String.Format("Caught unexpected exception {0}", e));
                    result = TEST_RESULTS.FAILED;
                }
            }
            return result;
        }


        public class TestTuple
        {
            public MediaDocument ExpectedDocument { get; private set; }
            public String[] SearchTerm { get; private set; }

            public TestTuple(MediaDocument document, String searchTerm)
            {
                ExpectedDocument = document;
                SearchTerm = new String[1] { searchTerm };
            }

            public TestTuple(MediaDocument document, String[] searchTerms)
            {
                ExpectedDocument = document;
                SearchTerm = searchTerms;
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FEDB\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc

compressFiles:
	deflate.exe FindGameOffersTests.xml FindGameOffersTests.def
	deflate.exe FindGamesTests.xml FindGamesTests.def
	deflate.exe FindCategoriesTests.xml FindCategoriesTests.def
	deflate.exe FindContributorsTests.xml FindContributorsTests.def

copyConfigFile:
    copy app.config $(TARGETNAME).$(TARGETEXT).config
    
copyConfigToTarget:
    copy $(TARGETNAME).dll.config $(TARGETPATH)\$(BUILDTARGET)\$(TARGETNAME).dll.config
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FFTPExecutionService\FFTPExecutionService\Build.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

namespace FFTPExecutionService
{
    /// <summary>
    /// Enum for tracking execution stage of a build
    /// </summary>
    public enum ExecutionStage
    {
        Start = 0,
        CopyAndSnap = 1,
        Deploy = 2,
        PostDeployment = 3,
        UpdateFakeSG = 4,
        Test = 5,
        Stamp = 6,
        Complete = 7
    }

    /// <summary>
    /// Class to track builds through the service
    /// </summary>
    public class Build
    {
        public string BuildPath;
        public string BasePath;

        public string Name;
        public string ShortName;
        public string FriendlyName;
        public string TriggerFile;

        public bool Enabled = true;

        public int Major;
        public int Minor;
        public int Revision;
        public int Private;

        // Default stage is Start
        public ExecutionStage Stage = ExecutionStage.Start;

        // Reset flag for debuggin
        public bool Reset = false;

        // Use coverage bits?
        public bool UseCodeCoverage = false;

        public List<TestSuiteInformation> TestSuites = new List<TestSuiteInformation>();

        public bool HasTestSuitesToReport
        {
            get
            {
                return TestSuites.Where(x => x.IsReportingEnabled).Count() > 0;
            }
        }

        /// <summary>
        /// Returns the build number formatted as XX.XX.XXXX.XX
        /// </summary>
        public string Number
        {
            get
            {
                return String.Format("{0:00}", Major) + "." + String.Format("{0:00}", Minor) + "." + String.Format("{0:0000}", Revision) + "." + String.Format("{0:00}", Private);            
            }
            set
            {
                var buildSplit = value.Split('.');
                Major = int.Parse(buildSplit[0]);
                Minor = int.Parse(buildSplit[1]);
                Revision = int.Parse(buildSplit[2]);
                Private = int.Parse(buildSplit[3]);
            }
        }

        /// <summary>
        /// Default ctor
        /// </summary>
        public Build()
        {
        }

        public Build(string name, string shortName, string friendlyName, string basePath, string triggerFile)
        {
            Name = name;
            ShortName = shortName;
            BasePath = basePath;
            TriggerFile = triggerFile;
            FriendlyName = friendlyName;
        }

        /// <summary>
        /// Copy constructor
        /// </summary>
        /// <param name="copyFrom">Deep copy from build</param>
        public Build(Build copyFrom)
        {
            this.BuildPath = copyFrom.BuildPath;
            this.BasePath = copyFrom.BasePath;
            this.Name = copyFrom.Name;
            this.TriggerFile = copyFrom.TriggerFile;
            this.ShortName = copyFrom.ShortName;
            this.FriendlyName = copyFrom.FriendlyName;
            this.Number = copyFrom.Number;
        }

        /// <summary>
        /// Returns true if the build number passed in is newer than the build number of this build
        /// </summary>
        /// <param name="number">Build number (XX.XX.XXXX.XX) to compare</param>
        /// <returns></returns>
        public bool IsNewer(string number)
        {
            return (int.Parse(number.Replace(".", "")) > int.Parse(Number.Replace(".", "")));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FFTPExecutionService\FFTPExecutionService\Configuration.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Serialization;

namespace FFTPExecutionService
{
    public class Configuration
    {
        /// <summary>
        /// Interval (in seconds) the build watcher should sleep in between checking for new builds
        /// </summary>
        public int BuildWatcherSleepInterval = 60;

        /// <summary>
        /// Name of Xblob to target
        /// </summary>
        public string XblobName = "";

        /// <summary>
        /// List of builds being tracked for testing
        /// </summary>
        public List<Build> TrackedBuilds = new List<Build>();

        /// <summary>
        /// Default ctor
        /// </summary>
        public Configuration()
        {
        }

        /// <summary>
        /// Serializes configuration to disk
        /// </summary>
        /// <param name="fileName">File path and name to serialize to</param>
        public void Serialize(string fileName)
        {
            XmlSerializer xmlWriter = new XmlSerializer(typeof(Configuration));
            using (FileStream fileWriter = new FileStream(fileName, FileMode.Create))
            {
                xmlWriter.Serialize(fileWriter, this);
                fileWriter.Close();
            }
        }

        /// <summary>
        /// Deserializes configruation from disk
        /// </summary>
        /// <param name="fileName">File pat and name to deserialize from</param>
        /// <returns></returns>
        public static Configuration Deserialize(string fileName)
        {
            XmlSerializer xmlReader = new XmlSerializer(typeof(Configuration));
            Configuration result;
            using (FileStream fileReader = new FileStream(fileName, FileMode.Open))
            {
                result = xmlReader.Deserialize(fileReader) as Configuration;
                fileReader.Close();
            }

            if (result != null)
            {
                foreach (var build in result.TrackedBuilds)
                {
                    // For debugging, if Reset flag is set reset this build number
                    if (build.Reset)
                    {
                        build.Number = "0.0.0.0";
                        build.Reset = false;
                    }
                }
            }

            return result;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\CatalogWebService\TestSuite\FullTestSuitePart1.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class FullTestSuitePart1 : PtfTestClassBase {
        
        public FullTestSuitePart1() {
            this.SetSwitch("generatedtestpath", "..\\\\TestSuite");
            this.SetSwitch("noviewer", "false");
            this.SetSwitch("viewcollapselabels", "true");
            this.SetSwitch("stopaterror", "false");
            this.SetSwitch("depthfirst", "false");
            this.SetSwitch("displayrequirements", "true");
            this.SetSwitch("defaultparameterexpansion", "product");
            this.SetSwitch("proceedcontroltimeout", "2");
            this.SetSwitch("quiescencetimeout", "2");
            this.SetSwitch("defaultparameterexpansionlimit", "2048");
            this.SetSwitch("codegenerationtimeout", "300");
            this.SetSwitch("statebound", "-1");
            this.SetSwitch("stepbound", "-1");
            this.SetSwitch("pathbound", "-1");
            this.SetSwitch("stepsperstatebound", "1024");
        }
        
        #region Expect Delegates
        public delegate void SaveAudioEncodingDelegate1(string @return);
        
        public delegate void SaveDRMTaskDelegate1(string @return);
        
        public delegate void SaveImageDelegate1(string @return);
        
        public delegate void SaveLicenseTypeDelegate1(string @return);
        
        public delegate void SavePricingRuleDelegate1(string @return);
        
        public delegate void SaveTaskDelegate1(string @return);
        
        public delegate void SaveVideoEncodingDelegate1(string @return);
        
        public delegate void SaveEntityDelegate1(string @return);
        
        public delegate void SaveTaskDelegate2(string @return);
        
        public delegate void GetArticleDelegate1(string @return);
        
        public delegate void GetArticleArrayDelegate1(string @return);
        
        public delegate void GetAudioEncodingArrayDelegate1(string @return);
        
        public delegate void GetCategorySystemDelegate1(string @return);
        
        public delegate void GetCategorySystemArrayDelegate1(string @return);
        
        public delegate void GetClientTypeArrayDelegate1(string @return);
        
        public delegate void GetContributorDelegate1(string @return);
        
        public delegate void GetContributorArrayDelegate1(string @return);
        
        public delegate void GetContributorRelationshipTypeArrayDelegate1(string @return);
        
        public delegate void GetCountryDelegate1(string @return);
        
        public delegate void GetCountryArrayDelegate1(string @return);
        
        public delegate void GetCurrencyDelegate1(string @return);
        
        public delegate void GetCurrencyArrayDelegate1(string @return);
        
        public delegate void GetDRMLicenseIssuerDelegate1(string @return);
        
        public delegate void GetDRMLicenseIssuerArrayDelegate1(string @return);
        
        public delegate void GetEntityDelegate1(string @return);
        
        public delegate void GetEntityArrayDelegate1(string @return);
        
        public delegate void GetGameDelegate1(string @return);
        
        public delegate void GetGameContentDelegate1(string @return);
        
        public delegate void GetImageDelegate1(string @return);
        
        public delegate void GetImageFormatDelegate1(string @return);
        
        public delegate void GetImageSizeArrayDelegate1(string @return);
        
        public delegate void GetLicenseClassDelegate1(string @return);
        
        public delegate void GetLicenseClassArrayDelegate1(string @return);
        
        public delegate void GetLicenseTypeDelegate1(string @return);
        
        public delegate void GetLicenseTypeArrayDelegate1(string @return);
        
        public delegate void GetLocaleArrayDelegate1(string @return);
        
        public delegate void GetMediaRelationshipTypeArrayDelegate1(string @return);
        
        public delegate void GetMediaTypeArrayDelegate1(string @return);
        
        public delegate void GetMetadataProviderDelegate1(string @return);
        
        public delegate void GetMetadataProviderArrayDelegate1(string @return);
        
        public delegate void GetOfferDelegate1(string @return);
        
        public delegate void GetPreviewMediaInstanceTypeArrayDelegate1(string @return);
        
        public delegate void GetPricingRuleDelegate1(string @return);
        
        public delegate void GetPricingRuleArrayDelegate1(string @return);
        
        public delegate void GetProviderDelegate1(string @return);
        
        public delegate void GetProviderArrayDelegate1(string @return);
        
        public delegate void GetRatingSystemDelegate1(string @return);
        
        public delegate void GetRatingSystemArrayDelegate1(string @return);
        
        public delegate void GetRoleArrayDelegate1(string @return);
        
        public delegate void GetStoreArrayDelegate1(string @return);
        
        public delegate void GetTasksDelegate1(string @return);
        
        public delegate void GetAvailableTaskAsXMLDelegate1(string @return);
        
        public delegate void GetTaskStatusArrayDelegate1(string @return);
        
        public delegate void GetTaskByStatusDelegate1(string @return);
        
        public delegate void GetUserTypeArrayDelegate1(string @return);
        
        public delegate void GetVideoDelegate1(string @return);
        
        public delegate void GetVideoDefinitionArrayDelegate1(string @return);
        
        public delegate void GetVideoEncodingArrayDelegate1(string @return);
        
        public delegate void GetVideoSeasonDelegate1(string @return);
        
        public delegate void GetVideoSeriesDelegate1(string @return);
        
        public delegate void GetVisibilityLevelArrayDelegate1(string @return);
        
        public delegate void GetVisibilityStatusArrayDelegate1(string @return);
        
        public delegate void GetAvailableEntityIdDelegate1(string @return);
        
        public delegate void GetAvailableCategoryIdDelegate1(string @return);
        
        public delegate void GetAvailableCategorySystemIdDelegate1(string @return);
        
        public delegate void GetAvailableRatingSystemIdDelegate1(string @return);
        
        public delegate void GetAvailableRatingValueIdDelegate1(string @return);
        
        public delegate void GetAvailableRatingDescriptorIdDelegate1(string @return);
        
        public delegate void GetAvailableLicenseTypeIdDelegate1(string @return);
        
        public delegate void GetCatalogIdDelegate1(string @return);
        
        public delegate void GetExternalIdDelegate1(string @return);
        
        public delegate void GetExternalFeedSourceDelegate1(string @return);
        
        public delegate void GetExternalFeedMappingObjectDelegate1(string @return);
        
        public delegate void SaveExternalFeedMapping1Delegate1(string @return);
        
        public delegate void SaveExternalFeedMapping2Delegate1(string @return);
        
        public delegate void SaveExternalFeedMapping3Delegate1(string @return);
        
        public delegate void PingDelegate1(string @return);
        
        public delegate void PurgeTaskQueueDelegate1(string @return);
        
        public delegate void GetPaymentMethodDelegate1(string @return);
        
        public delegate void GetPaymentMethodArrayDelegate1(string @return);
        
        public delegate void GetExternalFeedSourceArrayDelegate1(string @return);
        
        public delegate void GetExternalFeedMappingObjectArrayDelegate1(string @return);
        
        public delegate void GameOfferSearchDelegate1(string @return);
        
        public delegate void GamePublisherSearchDelegate1(string @return);
        
        public delegate void GameTitleSearchDelegate1(string @return);
        
        public delegate void SaveCategoryDelegate1(string @return);
        
        public delegate void SaveContributorDelegate1(string @return);
        
        public delegate void SaveGameDelegate1(string @return);
        
        public delegate void SaveGameContentDelegate1(string @return);
        
        public delegate void SaveOfferDelegate1(string @return);
        
        public delegate void SavePublishingBatchRequestDelegate1(string @return);
        
        public delegate void SaveVideoDelegate1(string @return);
        
        public delegate void SaveVideoSeasonDelegate1(string @return);
        
        public delegate void SaveVideoSeriesDelegate1(string @return);
        
        public delegate void GetPodcastByIdDelegate1(string @return);
        
        public delegate void GetPodcastByUriDelegate1(string @return);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase SaveAudioEncodingInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveAudioEncoding", typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.ShortStringType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveDRMTaskInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveDRMTask", typeof(InputTypes.ServiceType), typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.DateTimeType), typeof(InputTypes.MediumStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.RelatedItemIdType), typeof(bool), typeof(InputTypes.RelatedItemIdType));
        
        static System.Reflection.MethodBase SaveImageInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveImage", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(InputTypes.MediumStringType), typeof(InputTypes.ShortStringType), typeof(bool), typeof(InputTypes.MediumStringType), typeof(InputTypes.MediumStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.DateTimeType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveLicenseTypeInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveLicenseType", typeof(InputTypes.ServiceType), typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ShortStringType), typeof(InputTypes.XmlType), typeof(InputTypes.ArrayType));
        
        static System.Reflection.MethodBase SavePricingRuleInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SavePricingRule", typeof(InputTypes.ServiceType), typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ShortStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DecimalType), typeof(InputTypes.DecimalType), typeof(InputTypes.DateTimeType), typeof(InputTypes.ArrayType));
        
        static System.Reflection.MethodBase SaveTaskInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveTask", typeof(InputTypes.ServiceType), typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.DateTimeType), typeof(InputTypes.MediumStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.RelatedItemIdType));
        
        static System.Reflection.MethodBase SaveVideoEncodingInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveVideoEncoding", typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.ShortStringType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveEntityInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveEntity", typeof(InputTypes.ServiceType), typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.MediumStringType), typeof(InputTypes.MediumStringType), typeof(InputTypes.ShortStringType), typeof(InputTypes.ShortStringType), typeof(bool), typeof(bool), typeof(bool));
        
        static System.Reflection.MethodBase SaveTaskInfo1 = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveTask", typeof(InputTypes.ServiceType), typeof(InputTypes.XmlType));
        
        static System.Reflection.MethodBase GetArticleInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetArticle", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetArticleArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetArticleArray", typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAudioEncodingArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAudioEncodingArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCategorySystemInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCategorySystem", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCategorySystemArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCategorySystemArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetClientTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetClientTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetContributorInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetContributor", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetContributorArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetContributorArray", typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetContributorRelationshipTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetContributorRelationshipTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCountryInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCountry", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCountryArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCountryArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCurrencyInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCurrency", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCurrencyArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCurrencyArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetDRMLicenseIssuerInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetDRMLicenseIssuer", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetDRMLicenseIssuerArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetDRMLicenseIssuerArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetEntityInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetEntity", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetEntityArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetEntityArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetGameInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetGame", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetGameContentInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetGameContent", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetImageInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetImage", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetImageFormatInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetImageFormat", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetImageSizeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetImageSizeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetLicenseClassInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetLicenseClass", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetLicenseClassArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetLicenseClassArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetLicenseTypeInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetLicenseType", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetLicenseTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetLicenseTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetLocaleArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetLocaleArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetMediaRelationshipTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetMediaRelationshipTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetMediaTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetMediaTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetMetadataProviderInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetMetadataProvider", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetMetadataProviderArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetMetadataProviderArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetOfferInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetOffer", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPreviewMediaInstanceTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPreviewMediaInstanceTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPricingRuleInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPricingRule", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPricingRuleArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPricingRuleArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetProviderInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetProvider", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetProviderArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetProviderArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetRatingSystemInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetRatingSystem", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetRatingSystemArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetRatingSystemArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetRoleArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetRoleArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetStoreArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetStoreArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetTasksInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetTasks", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableTaskAsXMLInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableTaskAsXML", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetTaskStatusArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetTaskStatusArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetTaskByStatusInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetTaskByStatus", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetUserTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetUserTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVideoInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVideo", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVideoDefinitionArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVideoDefinitionArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVideoEncodingArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVideoEncodingArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVideoSeasonInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVideoSeason", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVideoSeriesInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVideoSeries", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVisibilityLevelArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVisibilityLevelArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVisibilityStatusArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVisibilityStatusArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableEntityIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableEntityId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableCategoryIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableCategoryId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableCategorySystemIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableCategorySystemId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableRatingSystemIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableRatingSystemId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableRatingValueIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableRatingValueId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableRatingDescriptorIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableRatingDescriptorId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableLicenseTypeIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableLicenseTypeId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCatalogIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCatalogId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetExternalIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetExternalId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetExternalFeedSourceInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetExternalFeedSource", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetExternalFeedMappingObjectInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetExternalFeedMappingObject", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveExternalFeedMapping1Info = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveExternalFeedMapping1", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveExternalFeedMapping2Info = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveExternalFeedMapping2");
        
        static System.Reflection.MethodBase SaveExternalFeedMapping3Info = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveExternalFeedMapping3");
        
        static System.Reflection.MethodBase PingInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "Ping", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase PurgeTaskQueueInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "PurgeTaskQueue", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPaymentMethodInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPaymentMethod", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPaymentMethodArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPaymentMethodArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetExternalFeedSourceArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetExternalFeedSourceArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetExternalFeedMappingObjectArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetExternalFeedMappingObjectArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GameOfferSearchInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GameOfferSearch", typeof(InputTypes.StringType), typeof(InputTypes.MaxRows), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GamePublisherSearchInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GamePublisherSearch", typeof(InputTypes.FindType), typeof(InputTypes.MaxRows), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GameTitleSearchInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GameTitleSearch", typeof(InputTypes.StringType), typeof(InputTypes.IntegerType), typeof(InputTypes.MaxRows), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveCategoryInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveCategory", typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.IdType), typeof(InputTypes.TreeParentIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveContributorInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveContributor", typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.MediumStringType), typeof(InputTypes.DateTimeType), typeof(InputTypes.MediumStringType), typeof(InputTypes.ShortStringType), typeof(InputTypes.ShortStringType), typeof(bool), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveGameInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveGame", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(InputTypes.ShortStringType), typeof(bool), typeof(InputTypes.IntegerType), typeof(InputTypes.MediumStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.DateTimeType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveGameContentInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveGameContent", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(bool), typeof(InputTypes.ShortStringType), typeof(InputTypes.IntegerType), typeof(InputTypes.RelatedItemIdType), typeof(bool), typeof(InputTypes.MediumStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.ContentBitFilterType), typeof(InputTypes.DateTimeType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveOfferInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveOffer", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.MediumStringType), typeof(InputTypes.OfferType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SavePublishingBatchRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SavePublishingBatchRequest", typeof(InputTypes.ChangeType), typeof(InputTypes.DateTimeType), typeof(InputTypes.DateTimeType), typeof(InputTypes.PublishingVisibilityStatusType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveVideoInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveVideo", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(InputTypes.ShortStringType), typeof(InputTypes.ShortStringType), typeof(InputTypes.IntegerType), typeof(InputTypes.IntegerType), typeof(bool), typeof(InputTypes.ShortStringType), typeof(InputTypes.MediumStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.ShortStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ShortStringType), typeof(InputTypes.ShortStringType), typeof(InputTypes.DateTimeType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveVideoSeasonInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveVideoSeason", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(InputTypes.ShortStringType), typeof(bool), typeof(bool), typeof(InputTypes.MediumStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.IntegerType), typeof(InputTypes.DateTimeType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveVideoSeriesInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveVideoSeries", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(InputTypes.ShortStringType), typeof(bool), typeof(bool), typeof(InputTypes.MediumStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.ShortStringType), typeof(InputTypes.DateTimeType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPodcastByIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPodcastById", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPodcastByUriInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPodcastByUri", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        #endregion
        
        #region Adapter Instances
        private Adapter.ICatalogWebServiceAdapter ICatalogWebServiceAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ICatalogWebServiceAdapterInstance = ((Adapter.ICatalogWebServiceAdapter)(this.Manager.GetAdapter(typeof(Adapter.ICatalogWebServiceAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S0() {
            this.Manager.BeginTest("FullTestSuitePart1S0");
            this.Manager.Comment("reaching state \'S0\'");
            string temp0;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,CorrectHeader)\'");
            temp0 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"NoError\"\'");
            this.Manager.Assert((temp0 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveAudioEncoding, state S1)", TestManagerHelpers.Describe(temp0)));
            this.Manager.Comment("reaching state \'S1736\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S2() {
            this.Manager.BeginTest("FullTestSuitePart1S2");
            this.Manager.Comment("reaching state \'S2\'");
            string temp1;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Delete,New,Length50,CorrectHeader)\'");
            temp1 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"NoError\"\'");
            this.Manager.Assert((temp1 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveAudioEncoding, state S3)", TestManagerHelpers.Describe(temp1)));
            this.Manager.Comment("reaching state \'S1737\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S4() {
            this.Manager.BeginTest("FullTestSuitePart1S4");
            this.Manager.Comment("reaching state \'S4\'");
            string temp2;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Delete,Existing,Length50,CorrectHeader)\'");
            temp2 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"NoError\"\'");
            this.Manager.Assert((temp2 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveAudioEncoding, state S5)", TestManagerHelpers.Describe(temp2)));
            this.Manager.Comment("reaching state \'S1738\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S6() {
            this.Manager.BeginTest("FullTestSuitePart1S6");
            this.Manager.Comment("reaching state \'S6\'");
            string temp3;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,New,Length50,CorrectHeader)\'");
            temp3 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"NoError\"\'");
            this.Manager.Assert((temp3 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveAudioEncoding, state S7)", TestManagerHelpers.Describe(temp3)));
            this.Manager.Comment("reaching state \'S1739\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S8() {
            this.Manager.BeginTest("FullTestSuitePart1S8");
            this.Manager.Comment("reaching state \'S8\'");
            string temp4;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,Existing,Today,Future,Lengt" +
                    "h255,Length2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp4 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp4 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S9)", TestManagerHelpers.Describe(temp4)));
            this.Manager.Comment("reaching state \'S1740\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S10() {
            this.Manager.BeginTest("FullTestSuitePart1S10");
            this.Manager.Comment("reaching state \'S10\'");
            string temp5;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp5 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp5 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S11)", TestManagerHelpers.Describe(temp5)));
            this.Manager.Comment("reaching state \'S1741\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S12() {
            this.Manager.BeginTest("FullTestSuitePart1S12");
            this.Manager.Comment("reaching state \'S12\'");
            string temp6;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp6 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp6 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S13)", TestManagerHelpers.Describe(temp6)));
            this.Manager.Comment("reaching state \'S1742\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S14() {
            this.Manager.BeginTest("FullTestSuitePart1S14");
            this.Manager.Comment("reaching state \'S14\'");
            string temp7;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp7 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp7 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S15)", TestManagerHelpers.Describe(temp7)));
            this.Manager.Comment("reaching state \'S1743\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S16() {
            this.Manager.BeginTest("FullTestSuitePart1S16");
            this.Manager.Comment("reaching state \'S16\'");
            string temp8;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp8 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp8 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S17)", TestManagerHelpers.Describe(temp8)));
            this.Manager.Comment("reaching state \'S1744\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S18() {
            this.Manager.BeginTest("FullTestSuitePart1S18");
            this.Manager.Comment("reaching state \'S18\'");
            string temp9;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp9 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp9 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S19)", TestManagerHelpers.Describe(temp9)));
            this.Manager.Comment("reaching state \'S1745\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S20() {
            this.Manager.BeginTest("FullTestSuitePart1S20");
            this.Manager.Comment("reaching state \'S20\'");
            string temp10;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp10 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp10 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S21)", TestManagerHelpers.Describe(temp10)));
            this.Manager.Comment("reaching state \'S1746\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S22() {
            this.Manager.BeginTest("FullTestSuitePart1S22");
            this.Manager.Comment("reaching state \'S22\'");
            string temp11;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,Existing,Today,Future,Lengt" +
                    "h255,Length2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp11 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp11 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S23)", TestManagerHelpers.Describe(temp11)));
            this.Manager.Comment("reaching state \'S1747\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S24() {
            this.Manager.BeginTest("FullTestSuitePart1S24");
            this.Manager.Comment("reaching state \'S24\'");
            string temp12;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,Existing,Today,Future,Lengt" +
                    "h255,Length2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp12 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp12 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S25)", TestManagerHelpers.Describe(temp12)));
            this.Manager.Comment("reaching state \'S1748\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S26() {
            this.Manager.BeginTest("FullTestSuitePart1S26");
            this.Manager.Comment("reaching state \'S26\'");
            string temp13;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,Existing,Today,Future,Lengt" +
                    "h255,Length2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp13 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp13 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S27)", TestManagerHelpers.Describe(temp13)));
            this.Manager.Comment("reaching state \'S1749\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S28() {
            this.Manager.BeginTest("FullTestSuitePart1S28");
            this.Manager.Comment("reaching state \'S28\'");
            string temp14;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,New,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp14 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp14 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S29)", TestManagerHelpers.Describe(temp14)));
            this.Manager.Comment("reaching state \'S1750\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S30() {
            this.Manager.BeginTest("FullTestSuitePart1S30");
            this.Manager.Comment("reaching state \'S30\'");
            string temp15;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp15 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp15 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S31)", TestManagerHelpers.Describe(temp15)));
            this.Manager.Comment("reaching state \'S1751\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S32() {
            this.Manager.BeginTest("FullTestSuitePart1S32");
            this.Manager.Comment("reaching state \'S32\'");
            string temp16;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,New,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp16 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp16 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S33)", TestManagerHelpers.Describe(temp16)));
            this.Manager.Comment("reaching state \'S1752\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S34() {
            this.Manager.BeginTest("FullTestSuitePart1S34");
            this.Manager.Comment("reaching state \'S34\'");
            string temp17;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp17 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp17 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S35)", TestManagerHelpers.Describe(temp17)));
            this.Manager.Comment("reaching state \'S1753\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S36() {
            this.Manager.BeginTest("FullTestSuitePart1S36");
            this.Manager.Comment("reaching state \'S36\'");
            string temp18;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,New,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp18 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp18 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S37)", TestManagerHelpers.Describe(temp18)));
            this.Manager.Comment("reaching state \'S1754\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S38() {
            this.Manager.BeginTest("FullTestSuitePart1S38");
            this.Manager.Comment("reaching state \'S38\'");
            string temp19;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,New,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp19 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp19 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S39)", TestManagerHelpers.Describe(temp19)));
            this.Manager.Comment("reaching state \'S1755\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S40() {
            this.Manager.BeginTest("FullTestSuitePart1S40");
            this.Manager.Comment("reaching state \'S40\'");
            string temp20;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Null,Null,Empty,CorrectHeader)\'");
            temp20 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp20 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S41)", TestManagerHelpers.Describe(temp20)));
            this.Manager.Comment("reaching state \'S1756\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S42() {
            this.Manager.BeginTest("FullTestSuitePart1S42");
            this.Manager.Comment("reaching state \'S42\'");
            string temp21;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Null,Null,Empty,CorrectHeader)\'");
            temp21 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp21 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S43)", TestManagerHelpers.Describe(temp21)));
            this.Manager.Comment("reaching state \'S1757\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S44() {
            this.Manager.BeginTest("FullTestSuitePart1S44");
            this.Manager.Comment("reaching state \'S44\'");
            string temp22;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Null,Null,Empty,CorrectHeader)\'");
            temp22 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp22 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S45)", TestManagerHelpers.Describe(temp22)));
            this.Manager.Comment("reaching state \'S1758\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S46() {
            this.Manager.BeginTest("FullTestSuitePart1S46");
            this.Manager.Comment("reaching state \'S46\'");
            string temp23;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Null,Null,Empty,CorrectHeader)\'");
            temp23 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp23 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S47)", TestManagerHelpers.Describe(temp23)));
            this.Manager.Comment("reaching state \'S1759\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S48() {
            this.Manager.BeginTest("FullTestSuitePart1S48");
            this.Manager.Comment("reaching state \'S48\'");
            string temp24;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Null,Null,Empty,CorrectHeader)\'");
            temp24 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp24 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S49)", TestManagerHelpers.Describe(temp24)));
            this.Manager.Comment("reaching state \'S1760\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S50() {
            this.Manager.BeginTest("FullTestSuitePart1S50");
            this.Manager.Comment("reaching state \'S50\'");
            string temp25;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Null,Null,Empty,CorrectHeader)\'");
            temp25 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp25 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S51)", TestManagerHelpers.Describe(temp25)));
            this.Manager.Comment("reaching state \'S1761\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S52
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S52() {
            this.Manager.BeginTest("FullTestSuitePart1S52");
            this.Manager.Comment("reaching state \'S52\'");
            string temp26;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Full,Empty,Empty,CorrectHeader)\'");
            temp26 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp26 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S53)", TestManagerHelpers.Describe(temp26)));
            this.Manager.Comment("reaching state \'S1762\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S54() {
            this.Manager.BeginTest("FullTestSuitePart1S54");
            this.Manager.Comment("reaching state \'S54\'");
            string temp27;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Full,Empty,Empty,CorrectHeader)\'");
            temp27 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp27 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S55)", TestManagerHelpers.Describe(temp27)));
            this.Manager.Comment("reaching state \'S1763\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S56() {
            this.Manager.BeginTest("FullTestSuitePart1S56");
            this.Manager.Comment("reaching state \'S56\'");
            string temp28;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp28 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp28 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S57)", TestManagerHelpers.Describe(temp28)));
            this.Manager.Comment("reaching state \'S1764\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S58() {
            this.Manager.BeginTest("FullTestSuitePart1S58");
            this.Manager.Comment("reaching state \'S58\'");
            string temp29;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp29 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp29 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S59)", TestManagerHelpers.Describe(temp29)));
            this.Manager.Comment("reaching state \'S1765\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S60() {
            this.Manager.BeginTest("FullTestSuitePart1S60");
            this.Manager.Comment("reaching state \'S60\'");
            string temp30;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp30 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp30 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S61)", TestManagerHelpers.Describe(temp30)));
            this.Manager.Comment("reaching state \'S1766\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S62() {
            this.Manager.BeginTest("FullTestSuitePart1S62");
            this.Manager.Comment("reaching state \'S62\'");
            string temp31;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp31 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp31 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S63)", TestManagerHelpers.Describe(temp31)));
            this.Manager.Comment("reaching state \'S1767\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S64() {
            this.Manager.BeginTest("FullTestSuitePart1S64");
            this.Manager.Comment("reaching state \'S64\'");
            string temp32;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp32 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S65\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp32 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S65)", TestManagerHelpers.Describe(temp32)));
            this.Manager.Comment("reaching state \'S1768\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S66
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S66() {
            this.Manager.BeginTest("FullTestSuitePart1S66");
            this.Manager.Comment("reaching state \'S66\'");
            string temp33;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp33 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S67\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp33 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S67)", TestManagerHelpers.Describe(temp33)));
            this.Manager.Comment("reaching state \'S1769\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S68
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S68() {
            this.Manager.BeginTest("FullTestSuitePart1S68");
            this.Manager.Comment("reaching state \'S68\'");
            string temp34;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Null,Full,Empty,CorrectHeader)\'");
            temp34 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp34 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S69)", TestManagerHelpers.Describe(temp34)));
            this.Manager.Comment("reaching state \'S1770\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S70
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S70() {
            this.Manager.BeginTest("FullTestSuitePart1S70");
            this.Manager.Comment("reaching state \'S70\'");
            string temp35;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Null,Full,Empty,CorrectHeader)\'");
            temp35 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp35 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S71)", TestManagerHelpers.Describe(temp35)));
            this.Manager.Comment("reaching state \'S1771\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S72() {
            this.Manager.BeginTest("FullTestSuitePart1S72");
            this.Manager.Comment("reaching state \'S72\'");
            string temp36;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Null,Full,Empty,CorrectHeader)\'");
            temp36 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp36 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S73)", TestManagerHelpers.Describe(temp36)));
            this.Manager.Comment("reaching state \'S1772\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S74
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S74() {
            this.Manager.BeginTest("FullTestSuitePart1S74");
            this.Manager.Comment("reaching state \'S74\'");
            string temp37;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Null,Full,Empty,CorrectHeader)\'");
            temp37 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp37 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S75)", TestManagerHelpers.Describe(temp37)));
            this.Manager.Comment("reaching state \'S1773\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S76
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S76() {
            this.Manager.BeginTest("FullTestSuitePart1S76");
            this.Manager.Comment("reaching state \'S76\'");
            string temp38;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Full,TwoElementsOneEmpty,Empty,Co" +
                    "rrectHeader)\'");
            temp38 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp38 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S77)", TestManagerHelpers.Describe(temp38)));
            this.Manager.Comment("reaching state \'S1774\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S78
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S78() {
            this.Manager.BeginTest("FullTestSuitePart1S78");
            this.Manager.Comment("reaching state \'S78\'");
            string temp39;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Full,TwoElementsOneEmpty,Empty,Correct" +
                    "Header)\'");
            temp39 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp39 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S79)", TestManagerHelpers.Describe(temp39)));
            this.Manager.Comment("reaching state \'S1775\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S80
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S80() {
            this.Manager.BeginTest("FullTestSuitePart1S80");
            this.Manager.Comment("reaching state \'S80\'");
            string temp40;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp40 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp40 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S81)", TestManagerHelpers.Describe(temp40)));
            this.Manager.Comment("reaching state \'S1776\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S82
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S82() {
            this.Manager.BeginTest("FullTestSuitePart1S82");
            this.Manager.Comment("reaching state \'S82\'");
            string temp41;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Full,TwoElementsOneEmpty,Empty,Correct" +
                    "Header)\'");
            temp41 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp41 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S83)", TestManagerHelpers.Describe(temp41)));
            this.Manager.Comment("reaching state \'S1777\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S84() {
            this.Manager.BeginTest("FullTestSuitePart1S84");
            this.Manager.Comment("reaching state \'S84\'");
            string temp42;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,Empty,Correct" +
                    "Header)\'");
            temp42 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp42 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S85)", TestManagerHelpers.Describe(temp42)));
            this.Manager.Comment("reaching state \'S1778\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S86
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S86() {
            this.Manager.BeginTest("FullTestSuitePart1S86");
            this.Manager.Comment("reaching state \'S86\'");
            string temp43;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,Empty,Co" +
                    "rrectHeader)\'");
            temp43 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp43 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S87)", TestManagerHelpers.Describe(temp43)));
            this.Manager.Comment("reaching state \'S1779\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S88
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S88() {
            this.Manager.BeginTest("FullTestSuitePart1S88");
            this.Manager.Comment("reaching state \'S88\'");
            string temp44;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp44 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp44 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S89)", TestManagerHelpers.Describe(temp44)));
            this.Manager.Comment("reaching state \'S1780\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S90
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S90() {
            this.Manager.BeginTest("FullTestSuitePart1S90");
            this.Manager.Comment("reaching state \'S90\'");
            string temp45;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp45 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp45 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S91)", TestManagerHelpers.Describe(temp45)));
            this.Manager.Comment("reaching state \'S1781\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S92
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S92() {
            this.Manager.BeginTest("FullTestSuitePart1S92");
            this.Manager.Comment("reaching state \'S92\'");
            string temp46;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Null,Null,Empty,CorrectHeader)\'");
            temp46 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp46 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S93)", TestManagerHelpers.Describe(temp46)));
            this.Manager.Comment("reaching state \'S1782\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S94
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S94() {
            this.Manager.BeginTest("FullTestSuitePart1S94");
            this.Manager.Comment("reaching state \'S94\'");
            string temp47;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp47 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp47 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S95)", TestManagerHelpers.Describe(temp47)));
            this.Manager.Comment("reaching state \'S1783\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S96
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S96() {
            this.Manager.BeginTest("FullTestSuitePart1S96");
            this.Manager.Comment("reaching state \'S96\'");
            string temp48;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp48 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S97\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp48 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S97)", TestManagerHelpers.Describe(temp48)));
            this.Manager.Comment("reaching state \'S1784\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S98
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S98() {
            this.Manager.BeginTest("FullTestSuitePart1S98");
            this.Manager.Comment("reaching state \'S98\'");
            string temp49;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Full,Empty,Empty,CorrectHeader)\'");
            temp49 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S99\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp49 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S99)", TestManagerHelpers.Describe(temp49)));
            this.Manager.Comment("reaching state \'S1785\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S100
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S100() {
            this.Manager.BeginTest("FullTestSuitePart1S100");
            this.Manager.Comment("reaching state \'S100\'");
            string temp50;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp50 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S101\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp50 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S101)", TestManagerHelpers.Describe(temp50)));
            this.Manager.Comment("reaching state \'S1786\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S102
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S102() {
            this.Manager.BeginTest("FullTestSuitePart1S102");
            this.Manager.Comment("reaching state \'S102\'");
            string temp51;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Empty,Null,Empty,CorrectHeader)\'");
            temp51 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S103\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp51 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S103)", TestManagerHelpers.Describe(temp51)));
            this.Manager.Comment("reaching state \'S1787\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S104
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S104() {
            this.Manager.BeginTest("FullTestSuitePart1S104");
            this.Manager.Comment("reaching state \'S104\'");
            string temp52;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Empty,Full,Empty,CorrectHeader)\'");
            temp52 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S105\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp52 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S105)", TestManagerHelpers.Describe(temp52)));
            this.Manager.Comment("reaching state \'S1788\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S106
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S106() {
            this.Manager.BeginTest("FullTestSuitePart1S106");
            this.Manager.Comment("reaching state \'S106\'");
            string temp53;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp53 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp53 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S107)", TestManagerHelpers.Describe(temp53)));
            this.Manager.Comment("reaching state \'S1789\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S108
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S108() {
            this.Manager.BeginTest("FullTestSuitePart1S108");
            this.Manager.Comment("reaching state \'S108\'");
            string temp54;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp54 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp54 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S109)", TestManagerHelpers.Describe(temp54)));
            this.Manager.Comment("reaching state \'S1790\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S110
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S110() {
            this.Manager.BeginTest("FullTestSuitePart1S110");
            this.Manager.Comment("reaching state \'S110\'");
            string temp55;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp55 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S111\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp55 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S111)", TestManagerHelpers.Describe(temp55)));
            this.Manager.Comment("reaching state \'S1791\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S112
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S112() {
            this.Manager.BeginTest("FullTestSuitePart1S112");
            this.Manager.Comment("reaching state \'S112\'");
            string temp56;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp56 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp56 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S113)", TestManagerHelpers.Describe(temp56)));
            this.Manager.Comment("reaching state \'S1792\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S114
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S114() {
            this.Manager.BeginTest("FullTestSuitePart1S114");
            this.Manager.Comment("reaching state \'S114\'");
            string temp57;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp57 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S115\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp57 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S115)", TestManagerHelpers.Describe(temp57)));
            this.Manager.Comment("reaching state \'S1793\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S116
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S116() {
            this.Manager.BeginTest("FullTestSuitePart1S116");
            this.Manager.Comment("reaching state \'S116\'");
            string temp58;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp58 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp58 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S117)", TestManagerHelpers.Describe(temp58)));
            this.Manager.Comment("reaching state \'S1794\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S118
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S118() {
            this.Manager.BeginTest("FullTestSuitePart1S118");
            this.Manager.Comment("reaching state \'S118\'");
            string temp59;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Null,Full,Empty,CorrectHeader)\'");
            temp59 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp59 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S119)", TestManagerHelpers.Describe(temp59)));
            this.Manager.Comment("reaching state \'S1795\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S120
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S120() {
            this.Manager.BeginTest("FullTestSuitePart1S120");
            this.Manager.Comment("reaching state \'S120\'");
            string temp60;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Null,Full,Empty,CorrectHeader)\'");
            temp60 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp60 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S121)", TestManagerHelpers.Describe(temp60)));
            this.Manager.Comment("reaching state \'S1796\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S122
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S122() {
            this.Manager.BeginTest("FullTestSuitePart1S122");
            this.Manager.Comment("reaching state \'S122\'");
            string temp61;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Null,Full,Empty,CorrectHeader)\'");
            temp61 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp61 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S123)", TestManagerHelpers.Describe(temp61)));
            this.Manager.Comment("reaching state \'S1797\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S124
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S124() {
            this.Manager.BeginTest("FullTestSuitePart1S124");
            this.Manager.Comment("reaching state \'S124\'");
            string temp62;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,Empty,Empty,CorrectHeader)\'" +
                    "");
            temp62 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp62 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S125)", TestManagerHelpers.Describe(temp62)));
            this.Manager.Comment("reaching state \'S1798\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S126
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S126() {
            this.Manager.BeginTest("FullTestSuitePart1S126");
            this.Manager.Comment("reaching state \'S126\'");
            string temp63;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,Empty,Empty,Correc" +
                    "tHeader)\'");
            temp63 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S127\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp63 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S127)", TestManagerHelpers.Describe(temp63)));
            this.Manager.Comment("reaching state \'S1799\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S128
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S128() {
            this.Manager.BeginTest("FullTestSuitePart1S128");
            this.Manager.Comment("reaching state \'S128\'");
            string temp64;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Empty,C" +
                    "orrectHeader)\'");
            temp64 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp64 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S129)", TestManagerHelpers.Describe(temp64)));
            this.Manager.Comment("reaching state \'S1800\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S130
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S130() {
            this.Manager.BeginTest("FullTestSuitePart1S130");
            this.Manager.Comment("reaching state \'S130\'");
            string temp65;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,OnlyOneElement,Empty,Correc" +
                    "tHeader)\'");
            temp65 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S131\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp65 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S131)", TestManagerHelpers.Describe(temp65)));
            this.Manager.Comment("reaching state \'S1801\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S132
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S132() {
            this.Manager.BeginTest("FullTestSuitePart1S132");
            this.Manager.Comment("reaching state \'S132\'");
            string temp66;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp66 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S133\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp66 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S133)", TestManagerHelpers.Describe(temp66)));
            this.Manager.Comment("reaching state \'S1802\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S134
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S134() {
            this.Manager.BeginTest("FullTestSuitePart1S134");
            this.Manager.Comment("reaching state \'S134\'");
            string temp67;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp67 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S135\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp67 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S135)", TestManagerHelpers.Describe(temp67)));
            this.Manager.Comment("reaching state \'S1803\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S136
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S136() {
            this.Manager.BeginTest("FullTestSuitePart1S136");
            this.Manager.Comment("reaching state \'S136\'");
            string temp68;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp68 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S137\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp68 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S137)", TestManagerHelpers.Describe(temp68)));
            this.Manager.Comment("reaching state \'S1804\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S138
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S138() {
            this.Manager.BeginTest("FullTestSuitePart1S138");
            this.Manager.Comment("reaching state \'S138\'");
            string temp69;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Null,Full,Empty,CorrectHeader)\'");
            temp69 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S139\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp69 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S139)", TestManagerHelpers.Describe(temp69)));
            this.Manager.Comment("reaching state \'S1805\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S140
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S140() {
            this.Manager.BeginTest("FullTestSuitePart1S140");
            this.Manager.Comment("reaching state \'S140\'");
            string temp70;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Full,Full,Empty,CorrectHeader)\'");
            temp70 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S141\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp70 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S141)", TestManagerHelpers.Describe(temp70)));
            this.Manager.Comment("reaching state \'S1806\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S142
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S142() {
            this.Manager.BeginTest("FullTestSuitePart1S142");
            this.Manager.Comment("reaching state \'S142\'");
            string temp71;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp71 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S143\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp71 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S143)", TestManagerHelpers.Describe(temp71)));
            this.Manager.Comment("reaching state \'S1807\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S144
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S144() {
            this.Manager.BeginTest("FullTestSuitePart1S144");
            this.Manager.Comment("reaching state \'S144\'");
            string temp72;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Full,TwoElementsOneEmpty,Empty,CorrectHeade" +
                    "r)\'");
            temp72 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp72 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S145)", TestManagerHelpers.Describe(temp72)));
            this.Manager.Comment("reaching state \'S1808\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S146
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S146() {
            this.Manager.BeginTest("FullTestSuitePart1S146");
            this.Manager.Comment("reaching state \'S146\'");
            string temp73;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp73 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp73 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S147)", TestManagerHelpers.Describe(temp73)));
            this.Manager.Comment("reaching state \'S1809\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S148
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S148() {
            this.Manager.BeginTest("FullTestSuitePart1S148");
            this.Manager.Comment("reaching state \'S148\'");
            string temp74;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp74 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp74 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S149)", TestManagerHelpers.Describe(temp74)));
            this.Manager.Comment("reaching state \'S1810\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S150
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S150() {
            this.Manager.BeginTest("FullTestSuitePart1S150");
            this.Manager.Comment("reaching state \'S150\'");
            string temp75;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp75 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp75 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S151)", TestManagerHelpers.Describe(temp75)));
            this.Manager.Comment("reaching state \'S1811\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S152
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S152() {
            this.Manager.BeginTest("FullTestSuitePart1S152");
            this.Manager.Comment("reaching state \'S152\'");
            string temp76;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHead" +
                    "er)\'");
            temp76 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S153\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp76 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S153)", TestManagerHelpers.Describe(temp76)));
            this.Manager.Comment("reaching state \'S1812\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S154
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S154() {
            this.Manager.BeginTest("FullTestSuitePart1S154");
            this.Manager.Comment("reaching state \'S154\'");
            string temp77;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp77 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp77 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S155)", TestManagerHelpers.Describe(temp77)));
            this.Manager.Comment("reaching state \'S1813\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S156
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S156() {
            this.Manager.BeginTest("FullTestSuitePart1S156");
            this.Manager.Comment("reaching state \'S156\'");
            string temp78;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp78 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S157\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp78 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S157)", TestManagerHelpers.Describe(temp78)));
            this.Manager.Comment("reaching state \'S1814\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S158
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S158() {
            this.Manager.BeginTest("FullTestSuitePart1S158");
            this.Manager.Comment("reaching state \'S158\'");
            string temp79;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp79 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S159\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp79 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S159)", TestManagerHelpers.Describe(temp79)));
            this.Manager.Comment("reaching state \'S1815\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S160
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S160() {
            this.Manager.BeginTest("FullTestSuitePart1S160");
            this.Manager.Comment("reaching state \'S160\'");
            string temp80;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp80 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S161\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp80 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S161)", TestManagerHelpers.Describe(temp80)));
            this.Manager.Comment("reaching state \'S1816\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S162
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S162() {
            this.Manager.BeginTest("FullTestSuitePart1S162");
            this.Manager.Comment("reaching state \'S162\'");
            string temp81;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp81 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S163\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp81 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S163)", TestManagerHelpers.Describe(temp81)));
            this.Manager.Comment("reaching state \'S1817\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S164
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S164() {
            this.Manager.BeginTest("FullTestSuitePart1S164");
            this.Manager.Comment("reaching state \'S164\'");
            string temp82;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Full,Empty,Empty,CorrectHeader)\'");
            temp82 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S165\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp82 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S165)", TestManagerHelpers.Describe(temp82)));
            this.Manager.Comment("reaching state \'S1818\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S166
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S166() {
            this.Manager.BeginTest("FullTestSuitePart1S166");
            this.Manager.Comment("reaching state \'S166\'");
            string temp83;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Empty,Empty,Empty,CorrectHeader)\'");
            temp83 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S167\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp83 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S167)", TestManagerHelpers.Describe(temp83)));
            this.Manager.Comment("reaching state \'S1819\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S168
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S168() {
            this.Manager.BeginTest("FullTestSuitePart1S168");
            this.Manager.Comment("reaching state \'S168\'");
            string temp84;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Empty,Empty,Empty,CorrectHeader)\'");
            temp84 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S169\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp84 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S169)", TestManagerHelpers.Describe(temp84)));
            this.Manager.Comment("reaching state \'S1820\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S170
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S170() {
            this.Manager.BeginTest("FullTestSuitePart1S170");
            this.Manager.Comment("reaching state \'S170\'");
            string temp85;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Empty,Empty,Empty,CorrectHeader)\'");
            temp85 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S171\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp85 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S171)", TestManagerHelpers.Describe(temp85)));
            this.Manager.Comment("reaching state \'S1821\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S172
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S172() {
            this.Manager.BeginTest("FullTestSuitePart1S172");
            this.Manager.Comment("reaching state \'S172\'");
            string temp86;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp86 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S173\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp86 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S173)", TestManagerHelpers.Describe(temp86)));
            this.Manager.Comment("reaching state \'S1822\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S174
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S174() {
            this.Manager.BeginTest("FullTestSuitePart1S174");
            this.Manager.Comment("reaching state \'S174\'");
            string temp87;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp87 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp87 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S175)", TestManagerHelpers.Describe(temp87)));
            this.Manager.Comment("reaching state \'S1823\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S176
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S176() {
            this.Manager.BeginTest("FullTestSuitePart1S176");
            this.Manager.Comment("reaching state \'S176\'");
            string temp88;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp88 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S177\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp88 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S177)", TestManagerHelpers.Describe(temp88)));
            this.Manager.Comment("reaching state \'S1824\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S178
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S178() {
            this.Manager.BeginTest("FullTestSuitePart1S178");
            this.Manager.Comment("reaching state \'S178\'");
            string temp89;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Null,Full,Empty,CorrectHeader)\'");
            temp89 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S179\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp89 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S179)", TestManagerHelpers.Describe(temp89)));
            this.Manager.Comment("reaching state \'S1825\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S180
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S180() {
            this.Manager.BeginTest("FullTestSuitePart1S180");
            this.Manager.Comment("reaching state \'S180\'");
            string temp90;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Null,Full,Empty,CorrectHeader)\'");
            temp90 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S181\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp90 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S181)", TestManagerHelpers.Describe(temp90)));
            this.Manager.Comment("reaching state \'S1826\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S182
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S182() {
            this.Manager.BeginTest("FullTestSuitePart1S182");
            this.Manager.Comment("reaching state \'S182\'");
            string temp91;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Null,Full,Empty,CorrectHeader)\'");
            temp91 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S183\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp91 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S183)", TestManagerHelpers.Describe(temp91)));
            this.Manager.Comment("reaching state \'S1827\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S184
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S184() {
            this.Manager.BeginTest("FullTestSuitePart1S184");
            this.Manager.Comment("reaching state \'S184\'");
            string temp92;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Full,Full,Empty,CorrectHeader)\'");
            temp92 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp92 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S185)", TestManagerHelpers.Describe(temp92)));
            this.Manager.Comment("reaching state \'S1828\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S186
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S186() {
            this.Manager.BeginTest("FullTestSuitePart1S186");
            this.Manager.Comment("reaching state \'S186\'");
            string temp93;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Full,Empty,Empty,CorrectHeader)\'");
            temp93 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S187\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp93 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S187)", TestManagerHelpers.Describe(temp93)));
            this.Manager.Comment("reaching state \'S1829\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S188
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S188() {
            this.Manager.BeginTest("FullTestSuitePart1S188");
            this.Manager.Comment("reaching state \'S188\'");
            string temp94;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Full,OnlyOneElement,Empty,Correct" +
                    "Header)\'");
            temp94 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S189\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp94 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S189)", TestManagerHelpers.Describe(temp94)));
            this.Manager.Comment("reaching state \'S1830\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S190
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S190() {
            this.Manager.BeginTest("FullTestSuitePart1S190");
            this.Manager.Comment("reaching state \'S190\'");
            string temp95;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Full,Empty,Empty,CorrectHeader)\'");
            temp95 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S191\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp95 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S191)", TestManagerHelpers.Describe(temp95)));
            this.Manager.Comment("reaching state \'S1831\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S192
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S192() {
            this.Manager.BeginTest("FullTestSuitePart1S192");
            this.Manager.Comment("reaching state \'S192\'");
            string temp96;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Full,Null,Empty,CorrectHeader)\'");
            temp96 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S193\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp96 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S193)", TestManagerHelpers.Describe(temp96)));
            this.Manager.Comment("reaching state \'S1832\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S194
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S194() {
            this.Manager.BeginTest("FullTestSuitePart1S194");
            this.Manager.Comment("reaching state \'S194\'");
            string temp97;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Full,Empty,Empty,CorrectHeader)\'");
            temp97 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S195\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp97 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S195)", TestManagerHelpers.Describe(temp97)));
            this.Manager.Comment("reaching state \'S1833\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S196
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S196() {
            this.Manager.BeginTest("FullTestSuitePart1S196");
            this.Manager.Comment("reaching state \'S196\'");
            string temp98;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp98 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S197\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp98 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S197)", TestManagerHelpers.Describe(temp98)));
            this.Manager.Comment("reaching state \'S1834\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S198
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S198() {
            this.Manager.BeginTest("FullTestSuitePart1S198");
            this.Manager.Comment("reaching state \'S198\'");
            string temp99;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeade" +
                    "r)\'");
            temp99 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S199\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp99 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S199)", TestManagerHelpers.Describe(temp99)));
            this.Manager.Comment("reaching state \'S1835\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S200
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S200() {
            this.Manager.BeginTest("FullTestSuitePart1S200");
            this.Manager.Comment("reaching state \'S200\'");
            string temp100;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp100 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S201\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp100 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S201)", TestManagerHelpers.Describe(temp100)));
            this.Manager.Comment("reaching state \'S1836\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S202
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S202() {
            this.Manager.BeginTest("FullTestSuitePart1S202");
            this.Manager.Comment("reaching state \'S202\'");
            string temp101;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp101 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S203\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp101 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S203)", TestManagerHelpers.Describe(temp101)));
            this.Manager.Comment("reaching state \'S1837\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S204
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S204() {
            this.Manager.BeginTest("FullTestSuitePart1S204");
            this.Manager.Comment("reaching state \'S204\'");
            string temp102;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp102 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S205\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp102 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S205)", TestManagerHelpers.Describe(temp102)));
            this.Manager.Comment("reaching state \'S1838\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S206
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S206() {
            this.Manager.BeginTest("FullTestSuitePart1S206");
            this.Manager.Comment("reaching state \'S206\'");
            string temp103;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp103 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S207\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp103 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S207)", TestManagerHelpers.Describe(temp103)));
            this.Manager.Comment("reaching state \'S1839\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S208
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S208() {
            this.Manager.BeginTest("FullTestSuitePart1S208");
            this.Manager.Comment("reaching state \'S208\'");
            string temp104;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp104 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S209\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp104 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S209)", TestManagerHelpers.Describe(temp104)));
            this.Manager.Comment("reaching state \'S1840\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S210
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S210() {
            this.Manager.BeginTest("FullTestSuitePart1S210");
            this.Manager.Comment("reaching state \'S210\'");
            string temp105;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Null,Empty,Empty,CorrectHeader)\'");
            temp105 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S211\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp105 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S211)", TestManagerHelpers.Describe(temp105)));
            this.Manager.Comment("reaching state \'S1841\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S212
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S212() {
            this.Manager.BeginTest("FullTestSuitePart1S212");
            this.Manager.Comment("reaching state \'S212\'");
            string temp106;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp106 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S213\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp106 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S213)", TestManagerHelpers.Describe(temp106)));
            this.Manager.Comment("reaching state \'S1842\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S214
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S214() {
            this.Manager.BeginTest("FullTestSuitePart1S214");
            this.Manager.Comment("reaching state \'S214\'");
            string temp107;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp107 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S215\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp107 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S215)", TestManagerHelpers.Describe(temp107)));
            this.Manager.Comment("reaching state \'S1843\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S216
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S216() {
            this.Manager.BeginTest("FullTestSuitePart1S216");
            this.Manager.Comment("reaching state \'S216\'");
            string temp108;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Empty,Empty,Empty,CorrectHeader)\'");
            temp108 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S217\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp108 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S217)", TestManagerHelpers.Describe(temp108)));
            this.Manager.Comment("reaching state \'S1844\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S218
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S218() {
            this.Manager.BeginTest("FullTestSuitePart1S218");
            this.Manager.Comment("reaching state \'S218\'");
            string temp109;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,Empty,Empty,CorrectHead" +
                    "er)\'");
            temp109 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S219\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp109 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S219)", TestManagerHelpers.Describe(temp109)));
            this.Manager.Comment("reaching state \'S1845\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S220
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S220() {
            this.Manager.BeginTest("FullTestSuitePart1S220");
            this.Manager.Comment("reaching state \'S220\'");
            string temp110;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp110 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S221\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp110 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S221)", TestManagerHelpers.Describe(temp110)));
            this.Manager.Comment("reaching state \'S1846\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S222
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S222() {
            this.Manager.BeginTest("FullTestSuitePart1S222");
            this.Manager.Comment("reaching state \'S222\'");
            string temp111;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp111 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S223\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp111 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S223)", TestManagerHelpers.Describe(temp111)));
            this.Manager.Comment("reaching state \'S1847\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S224
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S224() {
            this.Manager.BeginTest("FullTestSuitePart1S224");
            this.Manager.Comment("reaching state \'S224\'");
            string temp112;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp112 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S225\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp112 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S225)", TestManagerHelpers.Describe(temp112)));
            this.Manager.Comment("reaching state \'S1848\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S226
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S226() {
            this.Manager.BeginTest("FullTestSuitePart1S226");
            this.Manager.Comment("reaching state \'S226\'");
            string temp113;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp113 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S227\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp113 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S227)", TestManagerHelpers.Describe(temp113)));
            this.Manager.Comment("reaching state \'S1849\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S228
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S228() {
            this.Manager.BeginTest("FullTestSuitePart1S228");
            this.Manager.Comment("reaching state \'S228\'");
            string temp114;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp114 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S229\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp114 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S229)", TestManagerHelpers.Describe(temp114)));
            this.Manager.Comment("reaching state \'S1850\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S230
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S230() {
            this.Manager.BeginTest("FullTestSuitePart1S230");
            this.Manager.Comment("reaching state \'S230\'");
            string temp115;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Empty,Full,Empty,CorrectHeader)\'");
            temp115 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S231\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp115 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S231)", TestManagerHelpers.Describe(temp115)));
            this.Manager.Comment("reaching state \'S1851\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S232
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S232() {
            this.Manager.BeginTest("FullTestSuitePart1S232");
            this.Manager.Comment("reaching state \'S232\'");
            string temp116;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp116 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S233\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp116 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S233)", TestManagerHelpers.Describe(temp116)));
            this.Manager.Comment("reaching state \'S1852\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S234
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S234() {
            this.Manager.BeginTest("FullTestSuitePart1S234");
            this.Manager.Comment("reaching state \'S234\'");
            string temp117;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Null,TwoElementsOneEmpty,Empty,Co" +
                    "rrectHeader)\'");
            temp117 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S235\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp117 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S235)", TestManagerHelpers.Describe(temp117)));
            this.Manager.Comment("reaching state \'S1853\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S236
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S236() {
            this.Manager.BeginTest("FullTestSuitePart1S236");
            this.Manager.Comment("reaching state \'S236\'");
            string temp118;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Null,TwoElementsOneEmpty,Empty,Correct" +
                    "Header)\'");
            temp118 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S237\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp118 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S237)", TestManagerHelpers.Describe(temp118)));
            this.Manager.Comment("reaching state \'S1854\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S238
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S238() {
            this.Manager.BeginTest("FullTestSuitePart1S238");
            this.Manager.Comment("reaching state \'S238\'");
            string temp119;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Null,TwoElementsOneEmpty,Empty,Correct" +
                    "Header)\'");
            temp119 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S239\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp119 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S239)", TestManagerHelpers.Describe(temp119)));
            this.Manager.Comment("reaching state \'S1855\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S240
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S240() {
            this.Manager.BeginTest("FullTestSuitePart1S240");
            this.Manager.Comment("reaching state \'S240\'");
            string temp120;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp120 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S241\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp120 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S241)", TestManagerHelpers.Describe(temp120)));
            this.Manager.Comment("reaching state \'S1856\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S242
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S242() {
            this.Manager.BeginTest("FullTestSuitePart1S242");
            this.Manager.Comment("reaching state \'S242\'");
            string temp121;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Full,Null,Empty,CorrectHeader)\'");
            temp121 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S243\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp121 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S243)", TestManagerHelpers.Describe(temp121)));
            this.Manager.Comment("reaching state \'S1857\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S244
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S244() {
            this.Manager.BeginTest("FullTestSuitePart1S244");
            this.Manager.Comment("reaching state \'S244\'");
            string temp122;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Full,Full,Empty,CorrectHeader)\'");
            temp122 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S245\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp122 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S245)", TestManagerHelpers.Describe(temp122)));
            this.Manager.Comment("reaching state \'S1858\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S246
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S246() {
            this.Manager.BeginTest("FullTestSuitePart1S246");
            this.Manager.Comment("reaching state \'S246\'");
            string temp123;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp123 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S247\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp123 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S247)", TestManagerHelpers.Describe(temp123)));
            this.Manager.Comment("reaching state \'S1859\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S248
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S248() {
            this.Manager.BeginTest("FullTestSuitePart1S248");
            this.Manager.Comment("reaching state \'S248\'");
            string temp124;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Empty,Null,Empty,CorrectHeader)\'");
            temp124 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S249\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp124 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S249)", TestManagerHelpers.Describe(temp124)));
            this.Manager.Comment("reaching state \'S1860\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S250
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S250() {
            this.Manager.BeginTest("FullTestSuitePart1S250");
            this.Manager.Comment("reaching state \'S250\'");
            string temp125;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Empty,Null,Empty,CorrectHeader)\'");
            temp125 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S251\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp125 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S251)", TestManagerHelpers.Describe(temp125)));
            this.Manager.Comment("reaching state \'S1861\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S252
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S252() {
            this.Manager.BeginTest("FullTestSuitePart1S252");
            this.Manager.Comment("reaching state \'S252\'");
            string temp126;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Empty,Null,Empty,CorrectHeader)\'");
            temp126 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S253\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp126 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S253)", TestManagerHelpers.Describe(temp126)));
            this.Manager.Comment("reaching state \'S1862\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S254
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S254() {
            this.Manager.BeginTest("FullTestSuitePart1S254");
            this.Manager.Comment("reaching state \'S254\'");
            string temp127;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Empty,Full,Empty,CorrectHeader)\'");
            temp127 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S255\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp127 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S255)", TestManagerHelpers.Describe(temp127)));
            this.Manager.Comment("reaching state \'S1863\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S256
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S256() {
            this.Manager.BeginTest("FullTestSuitePart1S256");
            this.Manager.Comment("reaching state \'S256\'");
            string temp128;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp128 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S257\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp128 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S257)", TestManagerHelpers.Describe(temp128)));
            this.Manager.Comment("reaching state \'S1864\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S258
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S258() {
            this.Manager.BeginTest("FullTestSuitePart1S258");
            this.Manager.Comment("reaching state \'S258\'");
            string temp129;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Full,Empty,Empty,CorrectHeader)\'");
            temp129 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S259\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp129 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S259)", TestManagerHelpers.Describe(temp129)));
            this.Manager.Comment("reaching state \'S1865\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S260
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S260() {
            this.Manager.BeginTest("FullTestSuitePart1S260");
            this.Manager.Comment("reaching state \'S260\'");
            string temp130;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp130 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S261\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp130 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S261)", TestManagerHelpers.Describe(temp130)));
            this.Manager.Comment("reaching state \'S1866\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S262
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S262() {
            this.Manager.BeginTest("FullTestSuitePart1S262");
            this.Manager.Comment("reaching state \'S262\'");
            string temp131;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp131 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S263\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp131 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S263)", TestManagerHelpers.Describe(temp131)));
            this.Manager.Comment("reaching state \'S1867\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S264
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S264() {
            this.Manager.BeginTest("FullTestSuitePart1S264");
            this.Manager.Comment("reaching state \'S264\'");
            string temp132;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,Empty,Correc" +
                    "tHeader)\'");
            temp132 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S265\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp132 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S265)", TestManagerHelpers.Describe(temp132)));
            this.Manager.Comment("reaching state \'S1868\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S266
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S266() {
            this.Manager.BeginTest("FullTestSuitePart1S266");
            this.Manager.Comment("reaching state \'S266\'");
            string temp133;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'" +
                    "");
            temp133 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S267\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp133 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S267)", TestManagerHelpers.Describe(temp133)));
            this.Manager.Comment("reaching state \'S1869\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S268
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S268() {
            this.Manager.BeginTest("FullTestSuitePart1S268");
            this.Manager.Comment("reaching state \'S268\'");
            string temp134;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp134 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S269\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp134 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S269)", TestManagerHelpers.Describe(temp134)));
            this.Manager.Comment("reaching state \'S1870\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S270
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S270() {
            this.Manager.BeginTest("FullTestSuitePart1S270");
            this.Manager.Comment("reaching state \'S270\'");
            string temp135;
            this.Manager.Comment(@"executing step 'call SaveImage(Add,New,Length255,Length50,True,Length255,Length255,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeader)'");
            temp135 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S271\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp135 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S271)", TestManagerHelpers.Describe(temp135)));
            this.Manager.Comment("reaching state \'S1871\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S272
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S272() {
            this.Manager.BeginTest("FullTestSuitePart1S272");
            this.Manager.Comment("reaching state \'S272\'");
            string temp136;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp136 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S273\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp136 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S273)", TestManagerHelpers.Describe(temp136)));
            this.Manager.Comment("reaching state \'S1872\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S274
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S274() {
            this.Manager.BeginTest("FullTestSuitePart1S274");
            this.Manager.Comment("reaching state \'S274\'");
            string temp137;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp137 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S275\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp137 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S275)", TestManagerHelpers.Describe(temp137)));
            this.Manager.Comment("reaching state \'S1873\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S276
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S276() {
            this.Manager.BeginTest("FullTestSuitePart1S276");
            this.Manager.Comment("reaching state \'S276\'");
            string temp138;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Full,Full,Empty,CorrectHeader)\'");
            temp138 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S277\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp138 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S277)", TestManagerHelpers.Describe(temp138)));
            this.Manager.Comment("reaching state \'S1874\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S278
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S278() {
            this.Manager.BeginTest("FullTestSuitePart1S278");
            this.Manager.Comment("reaching state \'S278\'");
            string temp139;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Full,Full,Empty,CorrectHeader)\'");
            temp139 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S279\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp139 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S279)", TestManagerHelpers.Describe(temp139)));
            this.Manager.Comment("reaching state \'S1875\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S280
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S280() {
            this.Manager.BeginTest("FullTestSuitePart1S280");
            this.Manager.Comment("reaching state \'S280\'");
            string temp140;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Full,Full,Empty,CorrectHeader)\'");
            temp140 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S281\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp140 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S281)", TestManagerHelpers.Describe(temp140)));
            this.Manager.Comment("reaching state \'S1876\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S282
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S282() {
            this.Manager.BeginTest("FullTestSuitePart1S282");
            this.Manager.Comment("reaching state \'S282\'");
            string temp141;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp141 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S283\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp141 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S283)", TestManagerHelpers.Describe(temp141)));
            this.Manager.Comment("reaching state \'S1877\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S284
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S284() {
            this.Manager.BeginTest("FullTestSuitePart1S284");
            this.Manager.Comment("reaching state \'S284\'");
            string temp142;
            this.Manager.Comment(@"executing step 'call SaveImage(Add,New,Length255,Length50,True,Length255,Length255,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)'");
            temp142 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S285\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp142 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S285)", TestManagerHelpers.Describe(temp142)));
            this.Manager.Comment("reaching state \'S1878\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S286
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S286() {
            this.Manager.BeginTest("FullTestSuitePart1S286");
            this.Manager.Comment("reaching state \'S286\'");
            string temp143;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,Null,Empty,Correct" +
                    "Header)\'");
            temp143 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S287\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp143 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S287)", TestManagerHelpers.Describe(temp143)));
            this.Manager.Comment("reaching state \'S1879\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S288
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S288() {
            this.Manager.BeginTest("FullTestSuitePart1S288");
            this.Manager.Comment("reaching state \'S288\'");
            string temp144;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,Empty,Empty,CorrectHead" +
                    "er)\'");
            temp144 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S289\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp144 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S289)", TestManagerHelpers.Describe(temp144)));
            this.Manager.Comment("reaching state \'S1880\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S290
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S290() {
            this.Manager.BeginTest("FullTestSuitePart1S290");
            this.Manager.Comment("reaching state \'S290\'");
            string temp145;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp145 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S291\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp145 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S291)", TestManagerHelpers.Describe(temp145)));
            this.Manager.Comment("reaching state \'S1881\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S292
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S292() {
            this.Manager.BeginTest("FullTestSuitePart1S292");
            this.Manager.Comment("reaching state \'S292\'");
            string temp146;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp146 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S293\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp146 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S293)", TestManagerHelpers.Describe(temp146)));
            this.Manager.Comment("reaching state \'S1882\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S294
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S294() {
            this.Manager.BeginTest("FullTestSuitePart1S294");
            this.Manager.Comment("reaching state \'S294\'");
            string temp147;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Empty,Null,Empty,CorrectHeader)\'");
            temp147 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S295\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp147 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S295)", TestManagerHelpers.Describe(temp147)));
            this.Manager.Comment("reaching state \'S1883\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S296
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S296() {
            this.Manager.BeginTest("FullTestSuitePart1S296");
            this.Manager.Comment("reaching state \'S296\'");
            string temp148;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Null,Null,Empty,CorrectHeader)\'");
            temp148 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S297\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp148 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S297)", TestManagerHelpers.Describe(temp148)));
            this.Manager.Comment("reaching state \'S1884\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S298
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S298() {
            this.Manager.BeginTest("FullTestSuitePart1S298");
            this.Manager.Comment("reaching state \'S298\'");
            string temp149;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp149 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S299\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp149 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S299)", TestManagerHelpers.Describe(temp149)));
            this.Manager.Comment("reaching state \'S1885\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S300
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S300() {
            this.Manager.BeginTest("FullTestSuitePart1S300");
            this.Manager.Comment("reaching state \'S300\'");
            string temp150;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Null,Empty,Empty,CorrectHeader)\'");
            temp150 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S301\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp150 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S301)", TestManagerHelpers.Describe(temp150)));
            this.Manager.Comment("reaching state \'S1886\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S302
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S302() {
            this.Manager.BeginTest("FullTestSuitePart1S302");
            this.Manager.Comment("reaching state \'S302\'");
            string temp151;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp151 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S303\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp151 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S303)", TestManagerHelpers.Describe(temp151)));
            this.Manager.Comment("reaching state \'S1887\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S304
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S304() {
            this.Manager.BeginTest("FullTestSuitePart1S304");
            this.Manager.Comment("reaching state \'S304\'");
            string temp152;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp152 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S305\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp152 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S305)", TestManagerHelpers.Describe(temp152)));
            this.Manager.Comment("reaching state \'S1888\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S306
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S306() {
            this.Manager.BeginTest("FullTestSuitePart1S306");
            this.Manager.Comment("reaching state \'S306\'");
            string temp153;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Empty,Empty,Empty,CorrectHeader)\'");
            temp153 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S307\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp153 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S307)", TestManagerHelpers.Describe(temp153)));
            this.Manager.Comment("reaching state \'S1889\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S308
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S308() {
            this.Manager.BeginTest("FullTestSuitePart1S308");
            this.Manager.Comment("reaching state \'S308\'");
            string temp154;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp154 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S309\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp154 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S309)", TestManagerHelpers.Describe(temp154)));
            this.Manager.Comment("reaching state \'S1890\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S310
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S310() {
            this.Manager.BeginTest("FullTestSuitePart1S310");
            this.Manager.Comment("reaching state \'S310\'");
            string temp155;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Empty,Empty,Empty,CorrectHeader)\'");
            temp155 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S311\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp155 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S311)", TestManagerHelpers.Describe(temp155)));
            this.Manager.Comment("reaching state \'S1891\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S312
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S312() {
            this.Manager.BeginTest("FullTestSuitePart1S312");
            this.Manager.Comment("reaching state \'S312\'");
            string temp156;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp156 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S313\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp156 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S313)", TestManagerHelpers.Describe(temp156)));
            this.Manager.Comment("reaching state \'S1892\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S314
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S314() {
            this.Manager.BeginTest("FullTestSuitePart1S314");
            this.Manager.Comment("reaching state \'S314\'");
            string temp157;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp157 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S315\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp157 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S315)", TestManagerHelpers.Describe(temp157)));
            this.Manager.Comment("reaching state \'S1893\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S316
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S316() {
            this.Manager.BeginTest("FullTestSuitePart1S316");
            this.Manager.Comment("reaching state \'S316\'");
            string temp158;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp158 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S317\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp158 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S317)", TestManagerHelpers.Describe(temp158)));
            this.Manager.Comment("reaching state \'S1894\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S318
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S318() {
            this.Manager.BeginTest("FullTestSuitePart1S318");
            this.Manager.Comment("reaching state \'S318\'");
            string temp159;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp159 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S319\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp159 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S319)", TestManagerHelpers.Describe(temp159)));
            this.Manager.Comment("reaching state \'S1895\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S320
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S320() {
            this.Manager.BeginTest("FullTestSuitePart1S320");
            this.Manager.Comment("reaching state \'S320\'");
            string temp160;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp160 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S321\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp160 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S321)", TestManagerHelpers.Describe(temp160)));
            this.Manager.Comment("reaching state \'S1896\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S322
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S322() {
            this.Manager.BeginTest("FullTestSuitePart1S322");
            this.Manager.Comment("reaching state \'S322\'");
            string temp161;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp161 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S323\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp161 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S323)", TestManagerHelpers.Describe(temp161)));
            this.Manager.Comment("reaching state \'S1897\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S324
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S324() {
            this.Manager.BeginTest("FullTestSuitePart1S324");
            this.Manager.Comment("reaching state \'S324\'");
            string temp162;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Null,Full,Empty,CorrectHeader)\'");
            temp162 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S325\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp162 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S325)", TestManagerHelpers.Describe(temp162)));
            this.Manager.Comment("reaching state \'S1898\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S326
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S326() {
            this.Manager.BeginTest("FullTestSuitePart1S326");
            this.Manager.Comment("reaching state \'S326\'");
            string temp163;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,TwoElementsOneEmpty,Empty,C" +
                    "orrectHeader)\'");
            temp163 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S327\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp163 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S327)", TestManagerHelpers.Describe(temp163)));
            this.Manager.Comment("reaching state \'S1899\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S328
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S328() {
            this.Manager.BeginTest("FullTestSuitePart1S328");
            this.Manager.Comment("reaching state \'S328\'");
            string temp164;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Empty,TwoElementsOneEmpty,Empty,Correc" +
                    "tHeader)\'");
            temp164 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S329\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp164 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S329)", TestManagerHelpers.Describe(temp164)));
            this.Manager.Comment("reaching state \'S1900\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S330
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S330() {
            this.Manager.BeginTest("FullTestSuitePart1S330");
            this.Manager.Comment("reaching state \'S330\'");
            string temp165;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Null,OnlyOneElement,Empty,CorrectHeade" +
                    "r)\'");
            temp165 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S331\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp165 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S331)", TestManagerHelpers.Describe(temp165)));
            this.Manager.Comment("reaching state \'S1901\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S332
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S332() {
            this.Manager.BeginTest("FullTestSuitePart1S332");
            this.Manager.Comment("reaching state \'S332\'");
            string temp166;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Null,Null,Empty,CorrectHeader)\'");
            temp166 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S333\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp166 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S333)", TestManagerHelpers.Describe(temp166)));
            this.Manager.Comment("reaching state \'S1902\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S334
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S334() {
            this.Manager.BeginTest("FullTestSuitePart1S334");
            this.Manager.Comment("reaching state \'S334\'");
            string temp167;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Empty,OnlyOneElement,Empty,CorrectHead" +
                    "er)\'");
            temp167 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S335\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp167 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S335)", TestManagerHelpers.Describe(temp167)));
            this.Manager.Comment("reaching state \'S1903\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S336
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S336() {
            this.Manager.BeginTest("FullTestSuitePart1S336");
            this.Manager.Comment("reaching state \'S336\'");
            string temp168;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Full,Null,Empty,CorrectHeader)\'");
            temp168 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S337\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp168 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S337)", TestManagerHelpers.Describe(temp168)));
            this.Manager.Comment("reaching state \'S1904\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S338
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S338() {
            this.Manager.BeginTest("FullTestSuitePart1S338");
            this.Manager.Comment("reaching state \'S338\'");
            string temp169;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Full,Null,Empty,CorrectHeader)\'");
            temp169 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S339\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp169 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S339)", TestManagerHelpers.Describe(temp169)));
            this.Manager.Comment("reaching state \'S1905\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S340
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S340() {
            this.Manager.BeginTest("FullTestSuitePart1S340");
            this.Manager.Comment("reaching state \'S340\'");
            string temp170;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Full,Null,Empty,CorrectHeader)\'");
            temp170 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S341\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp170 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S341)", TestManagerHelpers.Describe(temp170)));
            this.Manager.Comment("reaching state \'S1906\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S342
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S342() {
            this.Manager.BeginTest("FullTestSuitePart1S342");
            this.Manager.Comment("reaching state \'S342\'");
            string temp171;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Empty,Full,Empty,CorrectHeader)\'");
            temp171 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S343\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp171 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S343)", TestManagerHelpers.Describe(temp171)));
            this.Manager.Comment("reaching state \'S1907\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S344
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S344() {
            this.Manager.BeginTest("FullTestSuitePart1S344");
            this.Manager.Comment("reaching state \'S344\'");
            string temp172;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp172 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S345\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp172 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S345)", TestManagerHelpers.Describe(temp172)));
            this.Manager.Comment("reaching state \'S1908\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S346
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S346() {
            this.Manager.BeginTest("FullTestSuitePart1S346");
            this.Manager.Comment("reaching state \'S346\'");
            string temp173;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Full,Empty,Empty,CorrectHeader)\'");
            temp173 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S347\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp173 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S347)", TestManagerHelpers.Describe(temp173)));
            this.Manager.Comment("reaching state \'S1909\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S348
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S348() {
            this.Manager.BeginTest("FullTestSuitePart1S348");
            this.Manager.Comment("reaching state \'S348\'");
            string temp174;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp174 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S349\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp174 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S349)", TestManagerHelpers.Describe(temp174)));
            this.Manager.Comment("reaching state \'S1910\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S350
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S350() {
            this.Manager.BeginTest("FullTestSuitePart1S350");
            this.Manager.Comment("reaching state \'S350\'");
            string temp175;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Full,Null,Empty,CorrectHeader)\'");
            temp175 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S351\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp175 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S351)", TestManagerHelpers.Describe(temp175)));
            this.Manager.Comment("reaching state \'S1911\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S352
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S352() {
            this.Manager.BeginTest("FullTestSuitePart1S352");
            this.Manager.Comment("reaching state \'S352\'");
            string temp176;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp176 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S353\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp176 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S353)", TestManagerHelpers.Describe(temp176)));
            this.Manager.Comment("reaching state \'S1912\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S354
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S354() {
            this.Manager.BeginTest("FullTestSuitePart1S354");
            this.Manager.Comment("reaching state \'S354\'");
            string temp177;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Null,Empty,Empty,CorrectHeader)\'");
            temp177 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S355\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp177 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S355)", TestManagerHelpers.Describe(temp177)));
            this.Manager.Comment("reaching state \'S1913\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S356
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S356() {
            this.Manager.BeginTest("FullTestSuitePart1S356");
            this.Manager.Comment("reaching state \'S356\'");
            string temp178;
            this.Manager.Comment(@"executing step 'call SaveImage(Add,New,Length255,Length50,True,Length255,Length255,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeader)'");
            temp178 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S357\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp178 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S357)", TestManagerHelpers.Describe(temp178)));
            this.Manager.Comment("reaching state \'S1914\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S358
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S358() {
            this.Manager.BeginTest("FullTestSuitePart1S358");
            this.Manager.Comment("reaching state \'S358\'");
            string temp179;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp179 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S359\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp179 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S359)", TestManagerHelpers.Describe(temp179)));
            this.Manager.Comment("reaching state \'S1915\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S360
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S360() {
            this.Manager.BeginTest("FullTestSuitePart1S360");
            this.Manager.Comment("reaching state \'S360\'");
            string temp180;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp180 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S361\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp180 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S361)", TestManagerHelpers.Describe(temp180)));
            this.Manager.Comment("reaching state \'S1916\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S362
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S362() {
            this.Manager.BeginTest("FullTestSuitePart1S362");
            this.Manager.Comment("reaching state \'S362\'");
            string temp181;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp181 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S363\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp181 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S363)", TestManagerHelpers.Describe(temp181)));
            this.Manager.Comment("reaching state \'S1917\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S364
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S364() {
            this.Manager.BeginTest("FullTestSuitePart1S364");
            this.Manager.Comment("reaching state \'S364\'");
            string temp182;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp182 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S365\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp182 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S365)", TestManagerHelpers.Describe(temp182)));
            this.Manager.Comment("reaching state \'S1918\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S366
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S366() {
            this.Manager.BeginTest("FullTestSuitePart1S366");
            this.Manager.Comment("reaching state \'S366\'");
            string temp183;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp183 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S367\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp183 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S367)", TestManagerHelpers.Describe(temp183)));
            this.Manager.Comment("reaching state \'S1919\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S368
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S368() {
            this.Manager.BeginTest("FullTestSuitePart1S368");
            this.Manager.Comment("reaching state \'S368\'");
            string temp184;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp184 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S369\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp184 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S369)", TestManagerHelpers.Describe(temp184)));
            this.Manager.Comment("reaching state \'S1920\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S370
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S370() {
            this.Manager.BeginTest("FullTestSuitePart1S370");
            this.Manager.Comment("reaching state \'S370\'");
            string temp185;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp185 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S371\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp185 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S371)", TestManagerHelpers.Describe(temp185)));
            this.Manager.Comment("reaching state \'S1921\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S372
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S372() {
            this.Manager.BeginTest("FullTestSuitePart1S372");
            this.Manager.Comment("reaching state \'S372\'");
            string temp186;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp186 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S373\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp186 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S373)", TestManagerHelpers.Describe(temp186)));
            this.Manager.Comment("reaching state \'S1922\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S374
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S374() {
            this.Manager.BeginTest("FullTestSuitePart1S374");
            this.Manager.Comment("reaching state \'S374\'");
            string temp187;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Full,OnlyOneElement,Empty,CorrectHeade" +
                    "r)\'");
            temp187 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S375\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp187 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S375)", TestManagerHelpers.Describe(temp187)));
            this.Manager.Comment("reaching state \'S1923\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S376
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S376() {
            this.Manager.BeginTest("FullTestSuitePart1S376");
            this.Manager.Comment("reaching state \'S376\'");
            string temp188;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Full,Null,Empty,CorrectHeader)\'");
            temp188 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S377\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp188 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S377)", TestManagerHelpers.Describe(temp188)));
            this.Manager.Comment("reaching state \'S1924\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S378
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S378() {
            this.Manager.BeginTest("FullTestSuitePart1S378");
            this.Manager.Comment("reaching state \'S378\'");
            string temp189;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Empty,Null,Empty,CorrectHeader)\'");
            temp189 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S379\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp189 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S379)", TestManagerHelpers.Describe(temp189)));
            this.Manager.Comment("reaching state \'S1925\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S380
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S380() {
            this.Manager.BeginTest("FullTestSuitePart1S380");
            this.Manager.Comment("reaching state \'S380\'");
            string temp190;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Empty,Null,Empty,CorrectHeader)\'");
            temp190 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S381\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp190 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S381)", TestManagerHelpers.Describe(temp190)));
            this.Manager.Comment("reaching state \'S1926\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S382
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S382() {
            this.Manager.BeginTest("FullTestSuitePart1S382");
            this.Manager.Comment("reaching state \'S382\'");
            string temp191;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Empty,Full,Empty,CorrectHeader)\'");
            temp191 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S383\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp191 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S383)", TestManagerHelpers.Describe(temp191)));
            this.Manager.Comment("reaching state \'S1927\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S384
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S384() {
            this.Manager.BeginTest("FullTestSuitePart1S384");
            this.Manager.Comment("reaching state \'S384\'");
            string temp192;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Empty,Null,Empty,CorrectHeader)\'");
            temp192 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S385\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp192 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S385)", TestManagerHelpers.Describe(temp192)));
            this.Manager.Comment("reaching state \'S1928\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S386
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S386() {
            this.Manager.BeginTest("FullTestSuitePart1S386");
            this.Manager.Comment("reaching state \'S386\'");
            string temp193;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp193 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S387\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp193 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S387)", TestManagerHelpers.Describe(temp193)));
            this.Manager.Comment("reaching state \'S1929\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S388
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S388() {
            this.Manager.BeginTest("FullTestSuitePart1S388");
            this.Manager.Comment("reaching state \'S388\'");
            string temp194;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Null,Full,Empty,CorrectHeader)\'");
            temp194 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S389\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp194 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S389)", TestManagerHelpers.Describe(temp194)));
            this.Manager.Comment("reaching state \'S1930\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S390
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S390() {
            this.Manager.BeginTest("FullTestSuitePart1S390");
            this.Manager.Comment("reaching state \'S390\'");
            string temp195;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp195 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S391\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp195 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S391)", TestManagerHelpers.Describe(temp195)));
            this.Manager.Comment("reaching state \'S1931\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S392
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S392() {
            this.Manager.BeginTest("FullTestSuitePart1S392");
            this.Manager.Comment("reaching state \'S392\'");
            string temp196;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp196 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S393\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp196 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S393)", TestManagerHelpers.Describe(temp196)));
            this.Manager.Comment("reaching state \'S1932\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S394
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S394() {
            this.Manager.BeginTest("FullTestSuitePart1S394");
            this.Manager.Comment("reaching state \'S394\'");
            string temp197;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp197 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S395\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp197 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S395)", TestManagerHelpers.Describe(temp197)));
            this.Manager.Comment("reaching state \'S1933\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S396
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S396() {
            this.Manager.BeginTest("FullTestSuitePart1S396");
            this.Manager.Comment("reaching state \'S396\'");
            string temp198;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp198 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S397\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp198 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S397)", TestManagerHelpers.Describe(temp198)));
            this.Manager.Comment("reaching state \'S1934\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S398
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S398() {
            this.Manager.BeginTest("FullTestSuitePart1S398");
            this.Manager.Comment("reaching state \'S398\'");
            string temp199;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp199 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S399\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp199 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S399)", TestManagerHelpers.Describe(temp199)));
            this.Manager.Comment("reaching state \'S1935\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S400
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S400() {
            this.Manager.BeginTest("FullTestSuitePart1S400");
            this.Manager.Comment("reaching state \'S400\'");
            string temp200;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp200 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S401\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp200 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S401)", TestManagerHelpers.Describe(temp200)));
            this.Manager.Comment("reaching state \'S1936\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S402
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S402() {
            this.Manager.BeginTest("FullTestSuitePart1S402");
            this.Manager.Comment("reaching state \'S402\'");
            string temp201;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeade" +
                    "r)\'");
            temp201 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S403\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp201 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S403)", TestManagerHelpers.Describe(temp201)));
            this.Manager.Comment("reaching state \'S1937\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S404
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S404() {
            this.Manager.BeginTest("FullTestSuitePart1S404");
            this.Manager.Comment("reaching state \'S404\'");
            string temp202;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp202 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S405\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp202 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S405)", TestManagerHelpers.Describe(temp202)));
            this.Manager.Comment("reaching state \'S1938\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S406
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S406() {
            this.Manager.BeginTest("FullTestSuitePart1S406");
            this.Manager.Comment("reaching state \'S406\'");
            string temp203;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp203 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S407\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp203 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S407)", TestManagerHelpers.Describe(temp203)));
            this.Manager.Comment("reaching state \'S1939\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S408
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S408() {
            this.Manager.BeginTest("FullTestSuitePart1S408");
            this.Manager.Comment("reaching state \'S408\'");
            string temp204;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Full,Null,Empty,CorrectHeader)\'");
            temp204 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S409\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp204 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S409)", TestManagerHelpers.Describe(temp204)));
            this.Manager.Comment("reaching state \'S1940\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S410
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S410() {
            this.Manager.BeginTest("FullTestSuitePart1S410");
            this.Manager.Comment("reaching state \'S410\'");
            string temp205;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Full,Null,Empty,CorrectHeader)\'");
            temp205 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S411\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp205 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S411)", TestManagerHelpers.Describe(temp205)));
            this.Manager.Comment("reaching state \'S1941\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S412
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S412() {
            this.Manager.BeginTest("FullTestSuitePart1S412");
            this.Manager.Comment("reaching state \'S412\'");
            string temp206;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Full,Null,Empty,CorrectHeader)\'");
            temp206 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S413\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp206 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S413)", TestManagerHelpers.Describe(temp206)));
            this.Manager.Comment("reaching state \'S1942\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S414
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S414() {
            this.Manager.BeginTest("FullTestSuitePart1S414");
            this.Manager.Comment("reaching state \'S414\'");
            string temp207;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Full,Null,Empty,CorrectHeader)\'");
            temp207 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S415\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp207 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S415)", TestManagerHelpers.Describe(temp207)));
            this.Manager.Comment("reaching state \'S1943\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S416
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S416() {
            this.Manager.BeginTest("FullTestSuitePart1S416");
            this.Manager.Comment("reaching state \'S416\'");
            string temp208;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Full,Empty,Co" +
                    "rrectHeader)\'");
            temp208 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S417\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp208 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S417)", TestManagerHelpers.Describe(temp208)));
            this.Manager.Comment("reaching state \'S1944\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S418
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S418() {
            this.Manager.BeginTest("FullTestSuitePart1S418");
            this.Manager.Comment("reaching state \'S418\'");
            string temp209;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,Full,Empty,Correct" +
                    "Header)\'");
            temp209 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S419\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp209 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S419)", TestManagerHelpers.Describe(temp209)));
            this.Manager.Comment("reaching state \'S1945\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S420
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S420() {
            this.Manager.BeginTest("FullTestSuitePart1S420");
            this.Manager.Comment("reaching state \'S420\'");
            string temp210;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,Empty,CorrectHead" +
                    "er)\'");
            temp210 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S421\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp210 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S421)", TestManagerHelpers.Describe(temp210)));
            this.Manager.Comment("reaching state \'S1946\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S422
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S422() {
            this.Manager.BeginTest("FullTestSuitePart1S422");
            this.Manager.Comment("reaching state \'S422\'");
            string temp211;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Full,Null,Empty,CorrectHeader)\'");
            temp211 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S423\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp211 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S423)", TestManagerHelpers.Describe(temp211)));
            this.Manager.Comment("reaching state \'S1947\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S424
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S424() {
            this.Manager.BeginTest("FullTestSuitePart1S424");
            this.Manager.Comment("reaching state \'S424\'");
            string temp212;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Empty,Null,Empty,CorrectHeader)\'");
            temp212 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S425\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp212 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S425)", TestManagerHelpers.Describe(temp212)));
            this.Manager.Comment("reaching state \'S1948\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S426
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S426() {
            this.Manager.BeginTest("FullTestSuitePart1S426");
            this.Manager.Comment("reaching state \'S426\'");
            string temp213;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Empty,Full,Empty,CorrectHeader)\'");
            temp213 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S427\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp213 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S427)", TestManagerHelpers.Describe(temp213)));
            this.Manager.Comment("reaching state \'S1949\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S428
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S428() {
            this.Manager.BeginTest("FullTestSuitePart1S428");
            this.Manager.Comment("reaching state \'S428\'");
            string temp214;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp214 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S429\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp214 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S429)", TestManagerHelpers.Describe(temp214)));
            this.Manager.Comment("reaching state \'S1950\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S430
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S430() {
            this.Manager.BeginTest("FullTestSuitePart1S430");
            this.Manager.Comment("reaching state \'S430\'");
            string temp215;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Full,Empty,CorrectHeader)\'");
            temp215 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S431\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp215 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S431)", TestManagerHelpers.Describe(temp215)));
            this.Manager.Comment("reaching state \'S1951\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S432
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S432() {
            this.Manager.BeginTest("FullTestSuitePart1S432");
            this.Manager.Comment("reaching state \'S432\'");
            string temp216;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Null,Full,Empty,CorrectHeader)\'");
            temp216 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S433\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp216 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S433)", TestManagerHelpers.Describe(temp216)));
            this.Manager.Comment("reaching state \'S1952\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S434
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S434() {
            this.Manager.BeginTest("FullTestSuitePart1S434");
            this.Manager.Comment("reaching state \'S434\'");
            string temp217;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Null,Full,Empty,CorrectHeader)\'");
            temp217 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S435\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp217 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S435)", TestManagerHelpers.Describe(temp217)));
            this.Manager.Comment("reaching state \'S1953\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S436
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S436() {
            this.Manager.BeginTest("FullTestSuitePart1S436");
            this.Manager.Comment("reaching state \'S436\'");
            string temp218;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Null,Full,Empty,CorrectHeader)\'");
            temp218 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S437\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp218 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S437)", TestManagerHelpers.Describe(temp218)));
            this.Manager.Comment("reaching state \'S1954\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S438
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S438() {
            this.Manager.BeginTest("FullTestSuitePart1S438");
            this.Manager.Comment("reaching state \'S438\'");
            string temp219;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,Full,Empty,CorrectHeade" +
                    "r)\'");
            temp219 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S439\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp219 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S439)", TestManagerHelpers.Describe(temp219)));
            this.Manager.Comment("reaching state \'S1955\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S440
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S440() {
            this.Manager.BeginTest("FullTestSuitePart1S440");
            this.Manager.Comment("reaching state \'S440\'");
            string temp220;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Empty,Correc" +
                    "tHeader)\'");
            temp220 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S441\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp220 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S441)", TestManagerHelpers.Describe(temp220)));
            this.Manager.Comment("reaching state \'S1956\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S442
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S442() {
            this.Manager.BeginTest("FullTestSuitePart1S442");
            this.Manager.Comment("reaching state \'S442\'");
            string temp221;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp221 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S443\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp221 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S443)", TestManagerHelpers.Describe(temp221)));
            this.Manager.Comment("reaching state \'S1957\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S444
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S444() {
            this.Manager.BeginTest("FullTestSuitePart1S444");
            this.Manager.Comment("reaching state \'S444\'");
            string temp222;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp222 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S445\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp222 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S445)", TestManagerHelpers.Describe(temp222)));
            this.Manager.Comment("reaching state \'S1958\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S446
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S446() {
            this.Manager.BeginTest("FullTestSuitePart1S446");
            this.Manager.Comment("reaching state \'S446\'");
            string temp223;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,TwoElementsOneEmpty,OnlyOneElement,Empty,Correct" +
                    "Header)\'");
            temp223 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S447\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp223 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S447)", TestManagerHelpers.Describe(temp223)));
            this.Manager.Comment("reaching state \'S1959\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S448
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S448() {
            this.Manager.BeginTest("FullTestSuitePart1S448");
            this.Manager.Comment("reaching state \'S448\'");
            string temp224;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp224 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S449\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp224 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S449)", TestManagerHelpers.Describe(temp224)));
            this.Manager.Comment("reaching state \'S1960\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S450
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S450() {
            this.Manager.BeginTest("FullTestSuitePart1S450");
            this.Manager.Comment("reaching state \'S450\'");
            string temp225;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp225 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S451\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp225 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S451)", TestManagerHelpers.Describe(temp225)));
            this.Manager.Comment("reaching state \'S1961\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S452
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S452() {
            this.Manager.BeginTest("FullTestSuitePart1S452");
            this.Manager.Comment("reaching state \'S452\'");
            string temp226;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp226 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S453\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp226 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S453)", TestManagerHelpers.Describe(temp226)));
            this.Manager.Comment("reaching state \'S1962\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S454
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S454() {
            this.Manager.BeginTest("FullTestSuitePart1S454");
            this.Manager.Comment("reaching state \'S454\'");
            string temp227;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp227 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S455\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp227 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S455)", TestManagerHelpers.Describe(temp227)));
            this.Manager.Comment("reaching state \'S1963\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S456
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S456() {
            this.Manager.BeginTest("FullTestSuitePart1S456");
            this.Manager.Comment("reaching state \'S456\'");
            string temp228;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp228 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S457\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp228 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S457)", TestManagerHelpers.Describe(temp228)));
            this.Manager.Comment("reaching state \'S1964\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S458
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S458() {
            this.Manager.BeginTest("FullTestSuitePart1S458");
            this.Manager.Comment("reaching state \'S458\'");
            string temp229;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeade" +
                    "r)\'");
            temp229 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S459\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp229 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S459)", TestManagerHelpers.Describe(temp229)));
            this.Manager.Comment("reaching state \'S1965\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S460
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S460() {
            this.Manager.BeginTest("FullTestSuitePart1S460");
            this.Manager.Comment("reaching state \'S460\'");
            string temp230;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp230 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S461\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp230 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S461)", TestManagerHelpers.Describe(temp230)));
            this.Manager.Comment("reaching state \'S1966\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S462
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S462() {
            this.Manager.BeginTest("FullTestSuitePart1S462");
            this.Manager.Comment("reaching state \'S462\'");
            string temp231;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp231 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S463\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp231 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S463)", TestManagerHelpers.Describe(temp231)));
            this.Manager.Comment("reaching state \'S1967\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S464
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S464() {
            this.Manager.BeginTest("FullTestSuitePart1S464");
            this.Manager.Comment("reaching state \'S464\'");
            string temp232;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp232 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S465\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp232 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S465)", TestManagerHelpers.Describe(temp232)));
            this.Manager.Comment("reaching state \'S1968\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S466
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S466() {
            this.Manager.BeginTest("FullTestSuitePart1S466");
            this.Manager.Comment("reaching state \'S466\'");
            string temp233;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Null,Null,Empty,CorrectHeader)\'");
            temp233 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S467\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp233 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S467)", TestManagerHelpers.Describe(temp233)));
            this.Manager.Comment("reaching state \'S1969\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S468
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S468() {
            this.Manager.BeginTest("FullTestSuitePart1S468");
            this.Manager.Comment("reaching state \'S468\'");
            string temp234;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp234 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S469\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp234 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S469)", TestManagerHelpers.Describe(temp234)));
            this.Manager.Comment("reaching state \'S1970\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S470
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S470() {
            this.Manager.BeginTest("FullTestSuitePart1S470");
            this.Manager.Comment("reaching state \'S470\'");
            string temp235;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp235 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S471\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp235 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S471)", TestManagerHelpers.Describe(temp235)));
            this.Manager.Comment("reaching state \'S1971\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S472
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S472() {
            this.Manager.BeginTest("FullTestSuitePart1S472");
            this.Manager.Comment("reaching state \'S472\'");
            string temp236;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp236 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S473\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp236 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S473)", TestManagerHelpers.Describe(temp236)));
            this.Manager.Comment("reaching state \'S1972\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S474
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S474() {
            this.Manager.BeginTest("FullTestSuitePart1S474");
            this.Manager.Comment("reaching state \'S474\'");
            string temp237;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Full,Full,Empty,CorrectHeader)\'");
            temp237 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S475\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp237 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S475)", TestManagerHelpers.Describe(temp237)));
            this.Manager.Comment("reaching state \'S1973\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S476
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S476() {
            this.Manager.BeginTest("FullTestSuitePart1S476");
            this.Manager.Comment("reaching state \'S476\'");
            string temp238;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp238 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S477\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp238 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S477)", TestManagerHelpers.Describe(temp238)));
            this.Manager.Comment("reaching state \'S1974\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S478
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S478() {
            this.Manager.BeginTest("FullTestSuitePart1S478");
            this.Manager.Comment("reaching state \'S478\'");
            string temp239;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp239 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S479\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp239 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S479)", TestManagerHelpers.Describe(temp239)));
            this.Manager.Comment("reaching state \'S1975\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S480
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S480() {
            this.Manager.BeginTest("FullTestSuitePart1S480");
            this.Manager.Comment("reaching state \'S480\'");
            string temp240;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Empty,Full,Empty,CorrectHeader)\'");
            temp240 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S481\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp240 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S481)", TestManagerHelpers.Describe(temp240)));
            this.Manager.Comment("reaching state \'S1976\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S482
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S482() {
            this.Manager.BeginTest("FullTestSuitePart1S482");
            this.Manager.Comment("reaching state \'S482\'");
            string temp241;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp241 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S483\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp241 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S483)", TestManagerHelpers.Describe(temp241)));
            this.Manager.Comment("reaching state \'S1977\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S484
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S484() {
            this.Manager.BeginTest("FullTestSuitePart1S484");
            this.Manager.Comment("reaching state \'S484\'");
            string temp242;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp242 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S485\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp242 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S485)", TestManagerHelpers.Describe(temp242)));
            this.Manager.Comment("reaching state \'S1978\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S486
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S486() {
            this.Manager.BeginTest("FullTestSuitePart1S486");
            this.Manager.Comment("reaching state \'S486\'");
            string temp243;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp243 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S487\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp243 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S487)", TestManagerHelpers.Describe(temp243)));
            this.Manager.Comment("reaching state \'S1979\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S488
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S488() {
            this.Manager.BeginTest("FullTestSuitePart1S488");
            this.Manager.Comment("reaching state \'S488\'");
            string temp244;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp244 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S489\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp244 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S489)", TestManagerHelpers.Describe(temp244)));
            this.Manager.Comment("reaching state \'S1980\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S490
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S490() {
            this.Manager.BeginTest("FullTestSuitePart1S490");
            this.Manager.Comment("reaching state \'S490\'");
            string temp245;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,OnlyOneElement,TwoElementsOneEmpty,Empty,Correct" +
                    "Header)\'");
            temp245 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S491\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp245 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S491)", TestManagerHelpers.Describe(temp245)));
            this.Manager.Comment("reaching state \'S1981\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S492
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S492() {
            this.Manager.BeginTest("FullTestSuitePart1S492");
            this.Manager.Comment("reaching state \'S492\'");
            string temp246;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp246 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S493\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp246 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S493)", TestManagerHelpers.Describe(temp246)));
            this.Manager.Comment("reaching state \'S1982\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S494
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S494() {
            this.Manager.BeginTest("FullTestSuitePart1S494");
            this.Manager.Comment("reaching state \'S494\'");
            string temp247;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp247 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S495\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp247 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S495)", TestManagerHelpers.Describe(temp247)));
            this.Manager.Comment("reaching state \'S1983\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S496
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S496() {
            this.Manager.BeginTest("FullTestSuitePart1S496");
            this.Manager.Comment("reaching state \'S496\'");
            string temp248;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp248 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S497\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp248 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S497)", TestManagerHelpers.Describe(temp248)));
            this.Manager.Comment("reaching state \'S1984\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S498
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S498() {
            this.Manager.BeginTest("FullTestSuitePart1S498");
            this.Manager.Comment("reaching state \'S498\'");
            string temp249;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp249 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S499\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp249 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S499)", TestManagerHelpers.Describe(temp249)));
            this.Manager.Comment("reaching state \'S1985\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S500
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S500() {
            this.Manager.BeginTest("FullTestSuitePart1S500");
            this.Manager.Comment("reaching state \'S500\'");
            string temp250;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Null,Empty,Co" +
                    "rrectHeader)\'");
            temp250 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S501\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp250 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S501)", TestManagerHelpers.Describe(temp250)));
            this.Manager.Comment("reaching state \'S1986\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S502
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S502() {
            this.Manager.BeginTest("FullTestSuitePart1S502");
            this.Manager.Comment("reaching state \'S502\'");
            string temp251;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,OnlyOneElement,Empty,Correc" +
                    "tHeader)\'");
            temp251 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S503\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp251 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S503)", TestManagerHelpers.Describe(temp251)));
            this.Manager.Comment("reaching state \'S1987\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S504
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S504() {
            this.Manager.BeginTest("FullTestSuitePart1S504");
            this.Manager.Comment("reaching state \'S504\'");
            string temp252;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp252 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S505\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp252 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S505)", TestManagerHelpers.Describe(temp252)));
            this.Manager.Comment("reaching state \'S1988\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S506
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S506() {
            this.Manager.BeginTest("FullTestSuitePart1S506");
            this.Manager.Comment("reaching state \'S506\'");
            string temp253;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp253 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S507\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp253 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S507)", TestManagerHelpers.Describe(temp253)));
            this.Manager.Comment("reaching state \'S1989\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S508
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S508() {
            this.Manager.BeginTest("FullTestSuitePart1S508");
            this.Manager.Comment("reaching state \'S508\'");
            string temp254;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Full,Null,Empty,CorrectHeader)\'");
            temp254 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S509\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp254 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S509)", TestManagerHelpers.Describe(temp254)));
            this.Manager.Comment("reaching state \'S1990\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S510
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S510() {
            this.Manager.BeginTest("FullTestSuitePart1S510");
            this.Manager.Comment("reaching state \'S510\'");
            string temp255;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp255 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S511\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp255 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S511)", TestManagerHelpers.Describe(temp255)));
            this.Manager.Comment("reaching state \'S1991\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S512
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S512() {
            this.Manager.BeginTest("FullTestSuitePart1S512");
            this.Manager.Comment("reaching state \'S512\'");
            string temp256;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp256 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S513\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp256 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S513)", TestManagerHelpers.Describe(temp256)));
            this.Manager.Comment("reaching state \'S1992\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S514
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S514() {
            this.Manager.BeginTest("FullTestSuitePart1S514");
            this.Manager.Comment("reaching state \'S514\'");
            string temp257;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Full,Null,Empty,CorrectHeader)\'");
            temp257 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S515\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp257 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S515)", TestManagerHelpers.Describe(temp257)));
            this.Manager.Comment("reaching state \'S1993\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S516
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S516() {
            this.Manager.BeginTest("FullTestSuitePart1S516");
            this.Manager.Comment("reaching state \'S516\'");
            string temp258;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp258 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S517\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp258 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S517)", TestManagerHelpers.Describe(temp258)));
            this.Manager.Comment("reaching state \'S1994\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S518
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S518() {
            this.Manager.BeginTest("FullTestSuitePart1S518");
            this.Manager.Comment("reaching state \'S518\'");
            string temp259;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp259 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S519\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp259 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S519)", TestManagerHelpers.Describe(temp259)));
            this.Manager.Comment("reaching state \'S1995\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S520
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S520() {
            this.Manager.BeginTest("FullTestSuitePart1S520");
            this.Manager.Comment("reaching state \'S520\'");
            string temp260;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,Null,Empty,CorrectHeade" +
                    "r)\'");
            temp260 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S521\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp260 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S521)", TestManagerHelpers.Describe(temp260)));
            this.Manager.Comment("reaching state \'S1996\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S522
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S522() {
            this.Manager.BeginTest("FullTestSuitePart1S522");
            this.Manager.Comment("reaching state \'S522\'");
            string temp261;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,Null,Empty,Correct" +
                    "Header)\'");
            temp261 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S523\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp261 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S523)", TestManagerHelpers.Describe(temp261)));
            this.Manager.Comment("reaching state \'S1997\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S524
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S524() {
            this.Manager.BeginTest("FullTestSuitePart1S524");
            this.Manager.Comment("reaching state \'S524\'");
            string temp262;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Null,Empty,Correct" +
                    "Header)\'");
            temp262 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S525\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp262 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S525)", TestManagerHelpers.Describe(temp262)));
            this.Manager.Comment("reaching state \'S1998\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S526
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S526() {
            this.Manager.BeginTest("FullTestSuitePart1S526");
            this.Manager.Comment("reaching state \'S526\'");
            string temp263;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Null,Empty,Empty,CorrectHeader)\'");
            temp263 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S527\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp263 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S527)", TestManagerHelpers.Describe(temp263)));
            this.Manager.Comment("reaching state \'S1999\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S528
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S528() {
            this.Manager.BeginTest("FullTestSuitePart1S528");
            this.Manager.Comment("reaching state \'S528\'");
            string temp264;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp264 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S529\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp264 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S529)", TestManagerHelpers.Describe(temp264)));
            this.Manager.Comment("reaching state \'S2000\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S530
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S530() {
            this.Manager.BeginTest("FullTestSuitePart1S530");
            this.Manager.Comment("reaching state \'S530\'");
            string temp265;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Null,Null,Empty,CorrectHeader)\'");
            temp265 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S531\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp265 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S531)", TestManagerHelpers.Describe(temp265)));
            this.Manager.Comment("reaching state \'S2001\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S532
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S532() {
            this.Manager.BeginTest("FullTestSuitePart1S532");
            this.Manager.Comment("reaching state \'S532\'");
            string temp266;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp266 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S533\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp266 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S533)", TestManagerHelpers.Describe(temp266)));
            this.Manager.Comment("reaching state \'S2002\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S534
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S534() {
            this.Manager.BeginTest("FullTestSuitePart1S534");
            this.Manager.Comment("reaching state \'S534\'");
            string temp267;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp267 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S535\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp267 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S535)", TestManagerHelpers.Describe(temp267)));
            this.Manager.Comment("reaching state \'S2003\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S536
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S536() {
            this.Manager.BeginTest("FullTestSuitePart1S536");
            this.Manager.Comment("reaching state \'S536\'");
            string temp268;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHead" +
                    "er)\'");
            temp268 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S537\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp268 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S537)", TestManagerHelpers.Describe(temp268)));
            this.Manager.Comment("reaching state \'S2004\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S538
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S538() {
            this.Manager.BeginTest("FullTestSuitePart1S538");
            this.Manager.Comment("reaching state \'S538\'");
            string temp269;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp269 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S539\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp269 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S539)", TestManagerHelpers.Describe(temp269)));
            this.Manager.Comment("reaching state \'S2005\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S540
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S540() {
            this.Manager.BeginTest("FullTestSuitePart1S540");
            this.Manager.Comment("reaching state \'S540\'");
            string temp270;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp270 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S541\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp270 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S541)", TestManagerHelpers.Describe(temp270)));
            this.Manager.Comment("reaching state \'S2006\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S542
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S542() {
            this.Manager.BeginTest("FullTestSuitePart1S542");
            this.Manager.Comment("reaching state \'S542\'");
            string temp271;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp271 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S543\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp271 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S543)", TestManagerHelpers.Describe(temp271)));
            this.Manager.Comment("reaching state \'S2007\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S544
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S544() {
            this.Manager.BeginTest("FullTestSuitePart1S544");
            this.Manager.Comment("reaching state \'S544\'");
            string temp272;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Empty,Empty,Empty,CorrectHeader)\'");
            temp272 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S545\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp272 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S545)", TestManagerHelpers.Describe(temp272)));
            this.Manager.Comment("reaching state \'S2008\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S546
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S546() {
            this.Manager.BeginTest("FullTestSuitePart1S546");
            this.Manager.Comment("reaching state \'S546\'");
            string temp273;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Empty,Empty,Empty,CorrectHeader)\'");
            temp273 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S547\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp273 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S547)", TestManagerHelpers.Describe(temp273)));
            this.Manager.Comment("reaching state \'S2009\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S548
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S548() {
            this.Manager.BeginTest("FullTestSuitePart1S548");
            this.Manager.Comment("reaching state \'S548\'");
            string temp274;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Empty,Empty,Empty,CorrectHeader)\'");
            temp274 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S549\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp274 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S549)", TestManagerHelpers.Describe(temp274)));
            this.Manager.Comment("reaching state \'S2010\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S550
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S550() {
            this.Manager.BeginTest("FullTestSuitePart1S550");
            this.Manager.Comment("reaching state \'S550\'");
            string temp275;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Null,Empty,Empty,CorrectHeader)\'");
            temp275 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S551\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp275 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S551)", TestManagerHelpers.Describe(temp275)));
            this.Manager.Comment("reaching state \'S2011\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S552
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S552() {
            this.Manager.BeginTest("FullTestSuitePart1S552");
            this.Manager.Comment("reaching state \'S552\'");
            string temp276;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp276 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S553\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp276 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S553)", TestManagerHelpers.Describe(temp276)));
            this.Manager.Comment("reaching state \'S2012\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S554
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S554() {
            this.Manager.BeginTest("FullTestSuitePart1S554");
            this.Manager.Comment("reaching state \'S554\'");
            string temp277;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Null,Null,Empty,CorrectHeader)\'");
            temp277 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S555\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp277 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S555)", TestManagerHelpers.Describe(temp277)));
            this.Manager.Comment("reaching state \'S2013\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S556
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S556() {
            this.Manager.BeginTest("FullTestSuitePart1S556");
            this.Manager.Comment("reaching state \'S556\'");
            string temp278;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp278 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S557\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp278 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S557)", TestManagerHelpers.Describe(temp278)));
            this.Manager.Comment("reaching state \'S2014\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S558
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S558() {
            this.Manager.BeginTest("FullTestSuitePart1S558");
            this.Manager.Comment("reaching state \'S558\'");
            string temp279;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp279 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S559\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp279 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S559)", TestManagerHelpers.Describe(temp279)));
            this.Manager.Comment("reaching state \'S2015\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S560
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S560() {
            this.Manager.BeginTest("FullTestSuitePart1S560");
            this.Manager.Comment("reaching state \'S560\'");
            string temp280;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Full,Null,Empty,CorrectHeader)\'");
            temp280 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S561\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp280 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S561)", TestManagerHelpers.Describe(temp280)));
            this.Manager.Comment("reaching state \'S2016\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S562
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S562() {
            this.Manager.BeginTest("FullTestSuitePart1S562");
            this.Manager.Comment("reaching state \'S562\'");
            string temp281;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Full,Null,Empty,CorrectHeader)\'");
            temp281 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S563\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp281 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S563)", TestManagerHelpers.Describe(temp281)));
            this.Manager.Comment("reaching state \'S2017\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S564
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S564() {
            this.Manager.BeginTest("FullTestSuitePart1S564");
            this.Manager.Comment("reaching state \'S564\'");
            string temp282;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp282 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S565\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp282 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S565)", TestManagerHelpers.Describe(temp282)));
            this.Manager.Comment("reaching state \'S2018\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S566
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S566() {
            this.Manager.BeginTest("FullTestSuitePart1S566");
            this.Manager.Comment("reaching state \'S566\'");
            string temp283;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp283 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S567\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp283 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S567)", TestManagerHelpers.Describe(temp283)));
            this.Manager.Comment("reaching state \'S2019\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S568
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S568() {
            this.Manager.BeginTest("FullTestSuitePart1S568");
            this.Manager.Comment("reaching state \'S568\'");
            string temp284;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Empty,Null,Empty,CorrectHeader)\'");
            temp284 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S569\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp284 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S569)", TestManagerHelpers.Describe(temp284)));
            this.Manager.Comment("reaching state \'S2020\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S570
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S570() {
            this.Manager.BeginTest("FullTestSuitePart1S570");
            this.Manager.Comment("reaching state \'S570\'");
            string temp285;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp285 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S571\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp285 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S571)", TestManagerHelpers.Describe(temp285)));
            this.Manager.Comment("reaching state \'S2021\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S572
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S572() {
            this.Manager.BeginTest("FullTestSuitePart1S572");
            this.Manager.Comment("reaching state \'S572\'");
            string temp286;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp286 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S573\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp286 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S573)", TestManagerHelpers.Describe(temp286)));
            this.Manager.Comment("reaching state \'S2022\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S574
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S574() {
            this.Manager.BeginTest("FullTestSuitePart1S574");
            this.Manager.Comment("reaching state \'S574\'");
            string temp287;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp287 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S575\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp287 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S575)", TestManagerHelpers.Describe(temp287)));
            this.Manager.Comment("reaching state \'S2023\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S576
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S576() {
            this.Manager.BeginTest("FullTestSuitePart1S576");
            this.Manager.Comment("reaching state \'S576\'");
            string temp288;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp288 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S577\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp288 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S577)", TestManagerHelpers.Describe(temp288)));
            this.Manager.Comment("reaching state \'S2024\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S578
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S578() {
            this.Manager.BeginTest("FullTestSuitePart1S578");
            this.Manager.Comment("reaching state \'S578\'");
            string temp289;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Empty,Full,Empty,CorrectHeader)\'");
            temp289 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S579\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp289 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S579)", TestManagerHelpers.Describe(temp289)));
            this.Manager.Comment("reaching state \'S2025\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S580
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S580() {
            this.Manager.BeginTest("FullTestSuitePart1S580");
            this.Manager.Comment("reaching state \'S580\'");
            string temp290;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp290 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S581\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp290 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S581)", TestManagerHelpers.Describe(temp290)));
            this.Manager.Comment("reaching state \'S2026\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S582
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S582() {
            this.Manager.BeginTest("FullTestSuitePart1S582");
            this.Manager.Comment("reaching state \'S582\'");
            string temp291;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp291 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S583\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp291 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S583)", TestManagerHelpers.Describe(temp291)));
            this.Manager.Comment("reaching state \'S2027\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S584
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S584() {
            this.Manager.BeginTest("FullTestSuitePart1S584");
            this.Manager.Comment("reaching state \'S584\'");
            string temp292;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp292 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S585\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp292 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S585)", TestManagerHelpers.Describe(temp292)));
            this.Manager.Comment("reaching state \'S2028\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S586
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S586() {
            this.Manager.BeginTest("FullTestSuitePart1S586");
            this.Manager.Comment("reaching state \'S586\'");
            string temp293;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Empty,Empty,Empty,CorrectHeader)\'");
            temp293 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S587\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp293 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S587)", TestManagerHelpers.Describe(temp293)));
            this.Manager.Comment("reaching state \'S2029\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S588
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S588() {
            this.Manager.BeginTest("FullTestSuitePart1S588");
            this.Manager.Comment("reaching state \'S588\'");
            string temp294;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Full,Empty,CorrectHeader)\'");
            temp294 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S589\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp294 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S589)", TestManagerHelpers.Describe(temp294)));
            this.Manager.Comment("reaching state \'S2030\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S590
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S590() {
            this.Manager.BeginTest("FullTestSuitePart1S590");
            this.Manager.Comment("reaching state \'S590\'");
            string temp295;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Empty,Full,Empty,CorrectHeader)\'");
            temp295 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S591\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp295 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S591)", TestManagerHelpers.Describe(temp295)));
            this.Manager.Comment("reaching state \'S2031\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S592
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S592() {
            this.Manager.BeginTest("FullTestSuitePart1S592");
            this.Manager.Comment("reaching state \'S592\'");
            string temp296;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Empty,Full,Empty,CorrectHeader)\'");
            temp296 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S593\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp296 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S593)", TestManagerHelpers.Describe(temp296)));
            this.Manager.Comment("reaching state \'S2032\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S594
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S594() {
            this.Manager.BeginTest("FullTestSuitePart1S594");
            this.Manager.Comment("reaching state \'S594\'");
            string temp297;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'" +
                    "");
            temp297 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S595\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp297 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S595)", TestManagerHelpers.Describe(temp297)));
            this.Manager.Comment("reaching state \'S2033\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S596
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S596() {
            this.Manager.BeginTest("FullTestSuitePart1S596");
            this.Manager.Comment("reaching state \'S596\'");
            string temp298;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Null,Empty,Empty,CorrectHeader)\'");
            temp298 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S597\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp298 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S597)", TestManagerHelpers.Describe(temp298)));
            this.Manager.Comment("reaching state \'S2034\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S598
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S598() {
            this.Manager.BeginTest("FullTestSuitePart1S598");
            this.Manager.Comment("reaching state \'S598\'");
            string temp299;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp299 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S599\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp299 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S599)", TestManagerHelpers.Describe(temp299)));
            this.Manager.Comment("reaching state \'S2035\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S600
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S600() {
            this.Manager.BeginTest("FullTestSuitePart1S600");
            this.Manager.Comment("reaching state \'S600\'");
            string temp300;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Null,Full,Empty,CorrectHeader)\'");
            temp300 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S601\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp300 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S601)", TestManagerHelpers.Describe(temp300)));
            this.Manager.Comment("reaching state \'S2036\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S602
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S602() {
            this.Manager.BeginTest("FullTestSuitePart1S602");
            this.Manager.Comment("reaching state \'S602\'");
            string temp301;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Null,Full,Empty,CorrectHeader)\'");
            temp301 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S603\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp301 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S603)", TestManagerHelpers.Describe(temp301)));
            this.Manager.Comment("reaching state \'S2037\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S604
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S604() {
            this.Manager.BeginTest("FullTestSuitePart1S604");
            this.Manager.Comment("reaching state \'S604\'");
            string temp302;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Null,Full,Empty,CorrectHeader)\'");
            temp302 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S605\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp302 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S605)", TestManagerHelpers.Describe(temp302)));
            this.Manager.Comment("reaching state \'S2038\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S606
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S606() {
            this.Manager.BeginTest("FullTestSuitePart1S606");
            this.Manager.Comment("reaching state \'S606\'");
            string temp303;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Null,Full,Empty,CorrectHeader)\'");
            temp303 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S607\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp303 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S607)", TestManagerHelpers.Describe(temp303)));
            this.Manager.Comment("reaching state \'S2039\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S608
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S608() {
            this.Manager.BeginTest("FullTestSuitePart1S608");
            this.Manager.Comment("reaching state \'S608\'");
            string temp304;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp304 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S609\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp304 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S609)", TestManagerHelpers.Describe(temp304)));
            this.Manager.Comment("reaching state \'S2040\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S610
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S610() {
            this.Manager.BeginTest("FullTestSuitePart1S610");
            this.Manager.Comment("reaching state \'S610\'");
            string temp305;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Empty,Empty,Empty,CorrectHeader)\'");
            temp305 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S611\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp305 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S611)", TestManagerHelpers.Describe(temp305)));
            this.Manager.Comment("reaching state \'S2041\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S612
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S612() {
            this.Manager.BeginTest("FullTestSuitePart1S612");
            this.Manager.Comment("reaching state \'S612\'");
            string temp306;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp306 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S613\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp306 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S613)", TestManagerHelpers.Describe(temp306)));
            this.Manager.Comment("reaching state \'S2042\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S614
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S614() {
            this.Manager.BeginTest("FullTestSuitePart1S614");
            this.Manager.Comment("reaching state \'S614\'");
            string temp307;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Null,Empty,CorrectHeader)\'");
            temp307 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S615\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp307 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S615)", TestManagerHelpers.Describe(temp307)));
            this.Manager.Comment("reaching state \'S2043\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S616
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S616() {
            this.Manager.BeginTest("FullTestSuitePart1S616");
            this.Manager.Comment("reaching state \'S616\'");
            string temp308;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Empty,Empty,Empty,CorrectHeader)\'");
            temp308 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S617\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp308 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S617)", TestManagerHelpers.Describe(temp308)));
            this.Manager.Comment("reaching state \'S2044\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S618
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S618() {
            this.Manager.BeginTest("FullTestSuitePart1S618");
            this.Manager.Comment("reaching state \'S618\'");
            string temp309;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp309 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S619\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp309 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S619)", TestManagerHelpers.Describe(temp309)));
            this.Manager.Comment("reaching state \'S2045\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S620
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S620() {
            this.Manager.BeginTest("FullTestSuitePart1S620");
            this.Manager.Comment("reaching state \'S620\'");
            string temp310;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Empty,Empty,Empty,CorrectHeader)\'");
            temp310 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S621\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp310 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S621)", TestManagerHelpers.Describe(temp310)));
            this.Manager.Comment("reaching state \'S2046\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S622
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S622() {
            this.Manager.BeginTest("FullTestSuitePart1S622");
            this.Manager.Comment("reaching state \'S622\'");
            string temp311;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Empty,OnlyOneElement,Empty,CorrectHead" +
                    "er)\'");
            temp311 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S623\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp311 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S623)", TestManagerHelpers.Describe(temp311)));
            this.Manager.Comment("reaching state \'S2047\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S624
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S624() {
            this.Manager.BeginTest("FullTestSuitePart1S624");
            this.Manager.Comment("reaching state \'S624\'");
            string temp312;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Empty,TwoElementsOneEmpty,Empty,Correc" +
                    "tHeader)\'");
            temp312 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S625\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp312 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S625)", TestManagerHelpers.Describe(temp312)));
            this.Manager.Comment("reaching state \'S2048\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S626
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S626() {
            this.Manager.BeginTest("FullTestSuitePart1S626");
            this.Manager.Comment("reaching state \'S626\'");
            string temp313;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Empty,Null,Empty,CorrectHeader)\'");
            temp313 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S627\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp313 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S627)", TestManagerHelpers.Describe(temp313)));
            this.Manager.Comment("reaching state \'S2049\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S628
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S628() {
            this.Manager.BeginTest("FullTestSuitePart1S628");
            this.Manager.Comment("reaching state \'S628\'");
            string temp314;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Empty,Full,Empty,CorrectHeader)\'");
            temp314 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S629\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp314 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S629)", TestManagerHelpers.Describe(temp314)));
            this.Manager.Comment("reaching state \'S2050\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S630
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S630() {
            this.Manager.BeginTest("FullTestSuitePart1S630");
            this.Manager.Comment("reaching state \'S630\'");
            string temp315;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp315 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S631\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp315 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S631)", TestManagerHelpers.Describe(temp315)));
            this.Manager.Comment("reaching state \'S2051\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S632
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S632() {
            this.Manager.BeginTest("FullTestSuitePart1S632");
            this.Manager.Comment("reaching state \'S632\'");
            string temp316;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHead" +
                    "er)\'");
            temp316 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S633\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp316 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S633)", TestManagerHelpers.Describe(temp316)));
            this.Manager.Comment("reaching state \'S2052\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S634
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S634() {
            this.Manager.BeginTest("FullTestSuitePart1S634");
            this.Manager.Comment("reaching state \'S634\'");
            string temp317;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,CorrectHeader)\'" +
                    "");
            temp317 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S635\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp317 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S635)", TestManagerHelpers.Describe(temp317)));
            this.Manager.Comment("reaching state \'S2053\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S636
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S636() {
            this.Manager.BeginTest("FullTestSuitePart1S636");
            this.Manager.Comment("reaching state \'S636\'");
            string temp318;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp318 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S637\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp318 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S637)", TestManagerHelpers.Describe(temp318)));
            this.Manager.Comment("reaching state \'S2054\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S638
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S638() {
            this.Manager.BeginTest("FullTestSuitePart1S638");
            this.Manager.Comment("reaching state \'S638\'");
            string temp319;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp319 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S639\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp319 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S639)", TestManagerHelpers.Describe(temp319)));
            this.Manager.Comment("reaching state \'S2055\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S640
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S640() {
            this.Manager.BeginTest("FullTestSuitePart1S640");
            this.Manager.Comment("reaching state \'S640\'");
            string temp320;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp320 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S641\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp320 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S641)", TestManagerHelpers.Describe(temp320)));
            this.Manager.Comment("reaching state \'S2056\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S642
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S642() {
            this.Manager.BeginTest("FullTestSuitePart1S642");
            this.Manager.Comment("reaching state \'S642\'");
            string temp321;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp321 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S643\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp321 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S643)", TestManagerHelpers.Describe(temp321)));
            this.Manager.Comment("reaching state \'S2057\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S644
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S644() {
            this.Manager.BeginTest("FullTestSuitePart1S644");
            this.Manager.Comment("reaching state \'S644\'");
            string temp322;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp322 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S645\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp322 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S645)", TestManagerHelpers.Describe(temp322)));
            this.Manager.Comment("reaching state \'S2058\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S646
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S646() {
            this.Manager.BeginTest("FullTestSuitePart1S646");
            this.Manager.Comment("reaching state \'S646\'");
            string temp323;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp323 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S647\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp323 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S647)", TestManagerHelpers.Describe(temp323)));
            this.Manager.Comment("reaching state \'S2059\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S648
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S648() {
            this.Manager.BeginTest("FullTestSuitePart1S648");
            this.Manager.Comment("reaching state \'S648\'");
            string temp324;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp324 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S649\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp324 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S649)", TestManagerHelpers.Describe(temp324)));
            this.Manager.Comment("reaching state \'S2060\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S650
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S650() {
            this.Manager.BeginTest("FullTestSuitePart1S650");
            this.Manager.Comment("reaching state \'S650\'");
            string temp325;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp325 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S651\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp325 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S651)", TestManagerHelpers.Describe(temp325)));
            this.Manager.Comment("reaching state \'S2061\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S652
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S652() {
            this.Manager.BeginTest("FullTestSuitePart1S652");
            this.Manager.Comment("reaching state \'S652\'");
            string temp326;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Null,Empty,Empty,CorrectHeader)\'");
            temp326 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S653\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp326 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S653)", TestManagerHelpers.Describe(temp326)));
            this.Manager.Comment("reaching state \'S2062\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S654
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S654() {
            this.Manager.BeginTest("FullTestSuitePart1S654");
            this.Manager.Comment("reaching state \'S654\'");
            string temp327;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Full,Full,Empty,CorrectHeader)\'");
            temp327 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S655\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp327 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S655)", TestManagerHelpers.Describe(temp327)));
            this.Manager.Comment("reaching state \'S2063\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S656
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S656() {
            this.Manager.BeginTest("FullTestSuitePart1S656");
            this.Manager.Comment("reaching state \'S656\'");
            string temp328;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp328 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S657\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp328 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S657)", TestManagerHelpers.Describe(temp328)));
            this.Manager.Comment("reaching state \'S2064\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S658
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S658() {
            this.Manager.BeginTest("FullTestSuitePart1S658");
            this.Manager.Comment("reaching state \'S658\'");
            string temp329;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp329 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S659\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp329 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S659)", TestManagerHelpers.Describe(temp329)));
            this.Manager.Comment("reaching state \'S2065\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S660
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S660() {
            this.Manager.BeginTest("FullTestSuitePart1S660");
            this.Manager.Comment("reaching state \'S660\'");
            string temp330;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Empty,Null,Empty,CorrectHeader)\'");
            temp330 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S661\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp330 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S661)", TestManagerHelpers.Describe(temp330)));
            this.Manager.Comment("reaching state \'S2066\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S662
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S662() {
            this.Manager.BeginTest("FullTestSuitePart1S662");
            this.Manager.Comment("reaching state \'S662\'");
            string temp331;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Null,Null,Empty,CorrectHeader)\'");
            temp331 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S663\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp331 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S663)", TestManagerHelpers.Describe(temp331)));
            this.Manager.Comment("reaching state \'S2067\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S664
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S664() {
            this.Manager.BeginTest("FullTestSuitePart1S664");
            this.Manager.Comment("reaching state \'S664\'");
            string temp332;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Full,Null,Empty,CorrectHeader)\'");
            temp332 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S665\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp332 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S665)", TestManagerHelpers.Describe(temp332)));
            this.Manager.Comment("reaching state \'S2068\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S666
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S666() {
            this.Manager.BeginTest("FullTestSuitePart1S666");
            this.Manager.Comment("reaching state \'S666\'");
            string temp333;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp333 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S667\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp333 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S667)", TestManagerHelpers.Describe(temp333)));
            this.Manager.Comment("reaching state \'S2069\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S668
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S668() {
            this.Manager.BeginTest("FullTestSuitePart1S668");
            this.Manager.Comment("reaching state \'S668\'");
            string temp334;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Null,TwoElementsOneEmpty,Empty,CorrectHeade" +
                    "r)\'");
            temp334 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S669\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp334 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S669)", TestManagerHelpers.Describe(temp334)));
            this.Manager.Comment("reaching state \'S2070\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S670
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S670() {
            this.Manager.BeginTest("FullTestSuitePart1S670");
            this.Manager.Comment("reaching state \'S670\'");
            string temp335;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Empty,Empty,Empty,CorrectHeader)\'");
            temp335 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S671\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp335 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S671)", TestManagerHelpers.Describe(temp335)));
            this.Manager.Comment("reaching state \'S2071\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S672
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S672() {
            this.Manager.BeginTest("FullTestSuitePart1S672");
            this.Manager.Comment("reaching state \'S672\'");
            string temp336;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Empty,Empty,Empty,CorrectHeader)\'");
            temp336 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S673\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp336 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S673)", TestManagerHelpers.Describe(temp336)));
            this.Manager.Comment("reaching state \'S2072\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S674
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S674() {
            this.Manager.BeginTest("FullTestSuitePart1S674");
            this.Manager.Comment("reaching state \'S674\'");
            string temp337;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp337 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S675\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp337 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S675)", TestManagerHelpers.Describe(temp337)));
            this.Manager.Comment("reaching state \'S2073\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S676
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S676() {
            this.Manager.BeginTest("FullTestSuitePart1S676");
            this.Manager.Comment("reaching state \'S676\'");
            string temp338;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,TwoElementsOneEmpty,OnlyOneElement,Empty,Correct" +
                    "Header)\'");
            temp338 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S677\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp338 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S677)", TestManagerHelpers.Describe(temp338)));
            this.Manager.Comment("reaching state \'S2074\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S678
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S678() {
            this.Manager.BeginTest("FullTestSuitePart1S678");
            this.Manager.Comment("reaching state \'S678\'");
            string temp339;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeade" +
                    "r)\'");
            temp339 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S679\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp339 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S679)", TestManagerHelpers.Describe(temp339)));
            this.Manager.Comment("reaching state \'S2075\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S680
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S680() {
            this.Manager.BeginTest("FullTestSuitePart1S680");
            this.Manager.Comment("reaching state \'S680\'");
            string temp340;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,OnlyOneElement,OnlyOneElement,Empty,CorrectHeade" +
                    "r)\'");
            temp340 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S681\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp340 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S681)", TestManagerHelpers.Describe(temp340)));
            this.Manager.Comment("reaching state \'S2076\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S682
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S682() {
            this.Manager.BeginTest("FullTestSuitePart1S682");
            this.Manager.Comment("reaching state \'S682\'");
            string temp341;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeade" +
                    "r)\'");
            temp341 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S683\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp341 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S683)", TestManagerHelpers.Describe(temp341)));
            this.Manager.Comment("reaching state \'S2077\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S684
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S684() {
            this.Manager.BeginTest("FullTestSuitePart1S684");
            this.Manager.Comment("reaching state \'S684\'");
            string temp342;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp342 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S685\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp342 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S685)", TestManagerHelpers.Describe(temp342)));
            this.Manager.Comment("reaching state \'S2078\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S686
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S686() {
            this.Manager.BeginTest("FullTestSuitePart1S686");
            this.Manager.Comment("reaching state \'S686\'");
            string temp343;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp343 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S687\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp343 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S687)", TestManagerHelpers.Describe(temp343)));
            this.Manager.Comment("reaching state \'S2079\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S688
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S688() {
            this.Manager.BeginTest("FullTestSuitePart1S688");
            this.Manager.Comment("reaching state \'S688\'");
            string temp344;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Null,Empty,Empty,CorrectHeader)\'");
            temp344 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S689\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp344 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S689)", TestManagerHelpers.Describe(temp344)));
            this.Manager.Comment("reaching state \'S2080\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S690
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S690() {
            this.Manager.BeginTest("FullTestSuitePart1S690");
            this.Manager.Comment("reaching state \'S690\'");
            string temp345;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Null,Empty,CorrectHeader)\'");
            temp345 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S691\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp345 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S691)", TestManagerHelpers.Describe(temp345)));
            this.Manager.Comment("reaching state \'S2081\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S692
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S692() {
            this.Manager.BeginTest("FullTestSuitePart1S692");
            this.Manager.Comment("reaching state \'S692\'");
            string temp346;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,Null,Empty,CorrectHeade" +
                    "r)\'");
            temp346 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S693\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp346 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S693)", TestManagerHelpers.Describe(temp346)));
            this.Manager.Comment("reaching state \'S2082\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S694
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S694() {
            this.Manager.BeginTest("FullTestSuitePart1S694");
            this.Manager.Comment("reaching state \'S694\'");
            string temp347;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp347 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S695\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp347 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S695)", TestManagerHelpers.Describe(temp347)));
            this.Manager.Comment("reaching state \'S2083\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S696
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S696() {
            this.Manager.BeginTest("FullTestSuitePart1S696");
            this.Manager.Comment("reaching state \'S696\'");
            string temp348;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,Empty,Co" +
                    "rrectHeader)\'");
            temp348 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S697\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp348 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S697)", TestManagerHelpers.Describe(temp348)));
            this.Manager.Comment("reaching state \'S2084\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S698
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S698() {
            this.Manager.BeginTest("FullTestSuitePart1S698");
            this.Manager.Comment("reaching state \'S698\'");
            string temp349;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp349 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S699\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp349 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S699)", TestManagerHelpers.Describe(temp349)));
            this.Manager.Comment("reaching state \'S2085\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S700
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S700() {
            this.Manager.BeginTest("FullTestSuitePart1S700");
            this.Manager.Comment("reaching state \'S700\'");
            string temp350;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Empty,Null,Empty,CorrectHeader)\'");
            temp350 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S701\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp350 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S701)", TestManagerHelpers.Describe(temp350)));
            this.Manager.Comment("reaching state \'S2086\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S702
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S702() {
            this.Manager.BeginTest("FullTestSuitePart1S702");
            this.Manager.Comment("reaching state \'S702\'");
            string temp351;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp351 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S703\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp351 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S703)", TestManagerHelpers.Describe(temp351)));
            this.Manager.Comment("reaching state \'S2087\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S704
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S704() {
            this.Manager.BeginTest("FullTestSuitePart1S704");
            this.Manager.Comment("reaching state \'S704\'");
            string temp352;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Empty,Full,Empty,CorrectHeader)\'");
            temp352 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S705\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp352 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S705)", TestManagerHelpers.Describe(temp352)));
            this.Manager.Comment("reaching state \'S2088\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S706
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S706() {
            this.Manager.BeginTest("FullTestSuitePart1S706");
            this.Manager.Comment("reaching state \'S706\'");
            string temp353;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Empty,Empty,CorrectHeader)\'");
            temp353 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S707\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp353 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S707)", TestManagerHelpers.Describe(temp353)));
            this.Manager.Comment("reaching state \'S2089\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S708
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S708() {
            this.Manager.BeginTest("FullTestSuitePart1S708");
            this.Manager.Comment("reaching state \'S708\'");
            string temp354;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Full,Empty,Empty,CorrectHeader)\'");
            temp354 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S709\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp354 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S709)", TestManagerHelpers.Describe(temp354)));
            this.Manager.Comment("reaching state \'S2090\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S710
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S710() {
            this.Manager.BeginTest("FullTestSuitePart1S710");
            this.Manager.Comment("reaching state \'S710\'");
            string temp355;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Full,Full,Empty,CorrectHeader)\'");
            temp355 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S711\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp355 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S711)", TestManagerHelpers.Describe(temp355)));
            this.Manager.Comment("reaching state \'S2091\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S712
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S712() {
            this.Manager.BeginTest("FullTestSuitePart1S712");
            this.Manager.Comment("reaching state \'S712\'");
            string temp356;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp356 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S713\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp356 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S713)", TestManagerHelpers.Describe(temp356)));
            this.Manager.Comment("reaching state \'S2092\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S714
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S714() {
            this.Manager.BeginTest("FullTestSuitePart1S714");
            this.Manager.Comment("reaching state \'S714\'");
            string temp357;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeade" +
                    "r)\'");
            temp357 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S715\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp357 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S715)", TestManagerHelpers.Describe(temp357)));
            this.Manager.Comment("reaching state \'S2093\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S716
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S716() {
            this.Manager.BeginTest("FullTestSuitePart1S716");
            this.Manager.Comment("reaching state \'S716\'");
            string temp358;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Full,Null,Empty,CorrectHeader)\'");
            temp358 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S717\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp358 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S717)", TestManagerHelpers.Describe(temp358)));
            this.Manager.Comment("reaching state \'S2094\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S718
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S718() {
            this.Manager.BeginTest("FullTestSuitePart1S718");
            this.Manager.Comment("reaching state \'S718\'");
            string temp359;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp359 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S719\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp359 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S719)", TestManagerHelpers.Describe(temp359)));
            this.Manager.Comment("reaching state \'S2095\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S720
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S720() {
            this.Manager.BeginTest("FullTestSuitePart1S720");
            this.Manager.Comment("reaching state \'S720\'");
            string temp360;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp360 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S721\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp360 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S721)", TestManagerHelpers.Describe(temp360)));
            this.Manager.Comment("reaching state \'S2096\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S722
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S722() {
            this.Manager.BeginTest("FullTestSuitePart1S722");
            this.Manager.Comment("reaching state \'S722\'");
            string temp361;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Full,Full,Empty,CorrectHeader)\'");
            temp361 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S723\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp361 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S723)", TestManagerHelpers.Describe(temp361)));
            this.Manager.Comment("reaching state \'S2097\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S724
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S724() {
            this.Manager.BeginTest("FullTestSuitePart1S724");
            this.Manager.Comment("reaching state \'S724\'");
            string temp362;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Full,Full,Empty,CorrectHeader)\'");
            temp362 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S725\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp362 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S725)", TestManagerHelpers.Describe(temp362)));
            this.Manager.Comment("reaching state \'S2098\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S726
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S726() {
            this.Manager.BeginTest("FullTestSuitePart1S726");
            this.Manager.Comment("reaching state \'S726\'");
            string temp363;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Full,Empty,Empty,CorrectHeader)\'");
            temp363 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S727\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp363 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S727)", TestManagerHelpers.Describe(temp363)));
            this.Manager.Comment("reaching state \'S2099\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S728
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S728() {
            this.Manager.BeginTest("FullTestSuitePart1S728");
            this.Manager.Comment("reaching state \'S728\'");
            string temp364;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp364 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S729\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp364 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S729)", TestManagerHelpers.Describe(temp364)));
            this.Manager.Comment("reaching state \'S2100\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S730
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S730() {
            this.Manager.BeginTest("FullTestSuitePart1S730");
            this.Manager.Comment("reaching state \'S730\'");
            string temp365;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp365 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S731\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp365 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S731)", TestManagerHelpers.Describe(temp365)));
            this.Manager.Comment("reaching state \'S2101\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S732
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S732() {
            this.Manager.BeginTest("FullTestSuitePart1S732");
            this.Manager.Comment("reaching state \'S732\'");
            string temp366;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp366 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S733\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp366 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S733)", TestManagerHelpers.Describe(temp366)));
            this.Manager.Comment("reaching state \'S2102\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S734
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S734() {
            this.Manager.BeginTest("FullTestSuitePart1S734");
            this.Manager.Comment("reaching state \'S734\'");
            string temp367;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Full,Empty,Empty,CorrectHeader)\'");
            temp367 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S735\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp367 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S735)", TestManagerHelpers.Describe(temp367)));
            this.Manager.Comment("reaching state \'S2103\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S736
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S736() {
            this.Manager.BeginTest("FullTestSuitePart1S736");
            this.Manager.Comment("reaching state \'S736\'");
            string temp368;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp368 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S737\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp368 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S737)", TestManagerHelpers.Describe(temp368)));
            this.Manager.Comment("reaching state \'S2104\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S738
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S738() {
            this.Manager.BeginTest("FullTestSuitePart1S738");
            this.Manager.Comment("reaching state \'S738\'");
            string temp369;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,Null,Empty,CorrectHeade" +
                    "r)\'");
            temp369 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S739\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp369 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S739)", TestManagerHelpers.Describe(temp369)));
            this.Manager.Comment("reaching state \'S2105\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S740
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S740() {
            this.Manager.BeginTest("FullTestSuitePart1S740");
            this.Manager.Comment("reaching state \'S740\'");
            string temp370;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Full,Null,Empty,CorrectHeader)\'");
            temp370 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S741\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp370 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S741)", TestManagerHelpers.Describe(temp370)));
            this.Manager.Comment("reaching state \'S2106\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S742
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S742() {
            this.Manager.BeginTest("FullTestSuitePart1S742");
            this.Manager.Comment("reaching state \'S742\'");
            string temp371;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Empty,Empty,Empty,CorrectHeader)\'");
            temp371 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S743\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp371 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S743)", TestManagerHelpers.Describe(temp371)));
            this.Manager.Comment("reaching state \'S2107\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S744
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S744() {
            this.Manager.BeginTest("FullTestSuitePart1S744");
            this.Manager.Comment("reaching state \'S744\'");
            string temp372;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp372 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S745\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp372 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S745)", TestManagerHelpers.Describe(temp372)));
            this.Manager.Comment("reaching state \'S2108\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S746
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S746() {
            this.Manager.BeginTest("FullTestSuitePart1S746");
            this.Manager.Comment("reaching state \'S746\'");
            string temp373;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Full,Empty,Empty,CorrectHeader)\'");
            temp373 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S747\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp373 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S747)", TestManagerHelpers.Describe(temp373)));
            this.Manager.Comment("reaching state \'S2109\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S748
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S748() {
            this.Manager.BeginTest("FullTestSuitePart1S748");
            this.Manager.Comment("reaching state \'S748\'");
            string temp374;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Full,Empty,Empty,CorrectHeader)\'");
            temp374 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S749\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp374 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S749)", TestManagerHelpers.Describe(temp374)));
            this.Manager.Comment("reaching state \'S2110\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S750
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S750() {
            this.Manager.BeginTest("FullTestSuitePart1S750");
            this.Manager.Comment("reaching state \'S750\'");
            string temp375;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp375 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S751\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp375 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S751)", TestManagerHelpers.Describe(temp375)));
            this.Manager.Comment("reaching state \'S2111\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S752
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S752() {
            this.Manager.BeginTest("FullTestSuitePart1S752");
            this.Manager.Comment("reaching state \'S752\'");
            string temp376;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp376 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S753\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp376 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S753)", TestManagerHelpers.Describe(temp376)));
            this.Manager.Comment("reaching state \'S2112\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S754
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S754() {
            this.Manager.BeginTest("FullTestSuitePart1S754");
            this.Manager.Comment("reaching state \'S754\'");
            string temp377;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp377 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S755\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp377 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S755)", TestManagerHelpers.Describe(temp377)));
            this.Manager.Comment("reaching state \'S2113\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S756
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S756() {
            this.Manager.BeginTest("FullTestSuitePart1S756");
            this.Manager.Comment("reaching state \'S756\'");
            string temp378;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Null,Empty,Empty,CorrectHeader)\'");
            temp378 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S757\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp378 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S757)", TestManagerHelpers.Describe(temp378)));
            this.Manager.Comment("reaching state \'S2114\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S758
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S758() {
            this.Manager.BeginTest("FullTestSuitePart1S758");
            this.Manager.Comment("reaching state \'S758\'");
            string temp379;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Empty,Null,Empty,CorrectHeader)\'");
            temp379 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S759\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp379 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S759)", TestManagerHelpers.Describe(temp379)));
            this.Manager.Comment("reaching state \'S2115\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S760
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S760() {
            this.Manager.BeginTest("FullTestSuitePart1S760");
            this.Manager.Comment("reaching state \'S760\'");
            string temp380;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Full,Empty,Empty,CorrectHeader)\'");
            temp380 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S761\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp380 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S761)", TestManagerHelpers.Describe(temp380)));
            this.Manager.Comment("reaching state \'S2116\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S762
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S762() {
            this.Manager.BeginTest("FullTestSuitePart1S762");
            this.Manager.Comment("reaching state \'S762\'");
            string temp381;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp381 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S763\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp381 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S763)", TestManagerHelpers.Describe(temp381)));
            this.Manager.Comment("reaching state \'S2117\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S764
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S764() {
            this.Manager.BeginTest("FullTestSuitePart1S764");
            this.Manager.Comment("reaching state \'S764\'");
            string temp382;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Empty,Empty,CorrectHeader)\'");
            temp382 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S765\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp382 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S765)", TestManagerHelpers.Describe(temp382)));
            this.Manager.Comment("reaching state \'S2118\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S766
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S766() {
            this.Manager.BeginTest("FullTestSuitePart1S766");
            this.Manager.Comment("reaching state \'S766\'");
            string temp383;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp383 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S767\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp383 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S767)", TestManagerHelpers.Describe(temp383)));
            this.Manager.Comment("reaching state \'S2119\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S768
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S768() {
            this.Manager.BeginTest("FullTestSuitePart1S768");
            this.Manager.Comment("reaching state \'S768\'");
            string temp384;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Full,Empty,Empty,CorrectHeader)\'");
            temp384 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S769\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp384 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S769)", TestManagerHelpers.Describe(temp384)));
            this.Manager.Comment("reaching state \'S2120\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S770
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S770() {
            this.Manager.BeginTest("FullTestSuitePart1S770");
            this.Manager.Comment("reaching state \'S770\'");
            string temp385;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Full,Empty,Empty,CorrectHeader)\'");
            temp385 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S771\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp385 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S771)", TestManagerHelpers.Describe(temp385)));
            this.Manager.Comment("reaching state \'S2121\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S772
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S772() {
            this.Manager.BeginTest("FullTestSuitePart1S772");
            this.Manager.Comment("reaching state \'S772\'");
            string temp386;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp386 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S773\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp386 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S773)", TestManagerHelpers.Describe(temp386)));
            this.Manager.Comment("reaching state \'S2122\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S774
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S774() {
            this.Manager.BeginTest("FullTestSuitePart1S774");
            this.Manager.Comment("reaching state \'S774\'");
            string temp387;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Full,Null,Empty,CorrectHeader)\'");
            temp387 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S775\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp387 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S775)", TestManagerHelpers.Describe(temp387)));
            this.Manager.Comment("reaching state \'S2123\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S776
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S776() {
            this.Manager.BeginTest("FullTestSuitePart1S776");
            this.Manager.Comment("reaching state \'S776\'");
            string temp388;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Full,Empty,Empty,CorrectHeader)\'");
            temp388 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S777\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp388 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S777)", TestManagerHelpers.Describe(temp388)));
            this.Manager.Comment("reaching state \'S2124\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S778
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S778() {
            this.Manager.BeginTest("FullTestSuitePart1S778");
            this.Manager.Comment("reaching state \'S778\'");
            string temp389;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Full,Empty,Empty,CorrectHeader)\'");
            temp389 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S779\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp389 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S779)", TestManagerHelpers.Describe(temp389)));
            this.Manager.Comment("reaching state \'S2125\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S780
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S780() {
            this.Manager.BeginTest("FullTestSuitePart1S780");
            this.Manager.Comment("reaching state \'S780\'");
            string temp390;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp390 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S781\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp390 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S781)", TestManagerHelpers.Describe(temp390)));
            this.Manager.Comment("reaching state \'S2126\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S782
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S782() {
            this.Manager.BeginTest("FullTestSuitePart1S782");
            this.Manager.Comment("reaching state \'S782\'");
            string temp391;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp391 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S783\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp391 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S783)", TestManagerHelpers.Describe(temp391)));
            this.Manager.Comment("reaching state \'S2127\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S784
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S784() {
            this.Manager.BeginTest("FullTestSuitePart1S784");
            this.Manager.Comment("reaching state \'S784\'");
            string temp392;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Full,Empty,Empty,CorrectHeader)\'");
            temp392 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S785\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp392 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S785)", TestManagerHelpers.Describe(temp392)));
            this.Manager.Comment("reaching state \'S2128\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S786
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S786() {
            this.Manager.BeginTest("FullTestSuitePart1S786");
            this.Manager.Comment("reaching state \'S786\'");
            string temp393;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp393 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S787\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp393 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S787)", TestManagerHelpers.Describe(temp393)));
            this.Manager.Comment("reaching state \'S2129\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S788
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S788() {
            this.Manager.BeginTest("FullTestSuitePart1S788");
            this.Manager.Comment("reaching state \'S788\'");
            string temp394;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Full,Null,Empty,CorrectHeader)\'");
            temp394 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S789\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp394 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S789)", TestManagerHelpers.Describe(temp394)));
            this.Manager.Comment("reaching state \'S2130\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S790
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S790() {
            this.Manager.BeginTest("FullTestSuitePart1S790");
            this.Manager.Comment("reaching state \'S790\'");
            string temp395;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Full,Null,Empty,CorrectHeader)\'");
            temp395 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S791\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp395 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S791)", TestManagerHelpers.Describe(temp395)));
            this.Manager.Comment("reaching state \'S2131\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S792
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S792() {
            this.Manager.BeginTest("FullTestSuitePart1S792");
            this.Manager.Comment("reaching state \'S792\'");
            string temp396;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Full,Null,Empty,CorrectHeader)\'");
            temp396 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S793\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp396 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S793)", TestManagerHelpers.Describe(temp396)));
            this.Manager.Comment("reaching state \'S2132\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S794
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S794() {
            this.Manager.BeginTest("FullTestSuitePart1S794");
            this.Manager.Comment("reaching state \'S794\'");
            string temp397;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Full,Empty,Empty,CorrectHeader)\'");
            temp397 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S795\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp397 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S795)", TestManagerHelpers.Describe(temp397)));
            this.Manager.Comment("reaching state \'S2133\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S796
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S796() {
            this.Manager.BeginTest("FullTestSuitePart1S796");
            this.Manager.Comment("reaching state \'S796\'");
            string temp398;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp398 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S797\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp398 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S797)", TestManagerHelpers.Describe(temp398)));
            this.Manager.Comment("reaching state \'S2134\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S798
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S798() {
            this.Manager.BeginTest("FullTestSuitePart1S798");
            this.Manager.Comment("reaching state \'S798\'");
            string temp399;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Empty,Null,Empty,CorrectHeader)\'");
            temp399 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S799\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp399 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S799)", TestManagerHelpers.Describe(temp399)));
            this.Manager.Comment("reaching state \'S2135\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S800
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S800() {
            this.Manager.BeginTest("FullTestSuitePart1S800");
            this.Manager.Comment("reaching state \'S800\'");
            string temp400;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp400 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S801\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp400 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S801)", TestManagerHelpers.Describe(temp400)));
            this.Manager.Comment("reaching state \'S2136\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S802
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S802() {
            this.Manager.BeginTest("FullTestSuitePart1S802");
            this.Manager.Comment("reaching state \'S802\'");
            string temp401;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp401 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S803\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp401 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S803)", TestManagerHelpers.Describe(temp401)));
            this.Manager.Comment("reaching state \'S2137\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S804
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S804() {
            this.Manager.BeginTest("FullTestSuitePart1S804");
            this.Manager.Comment("reaching state \'S804\'");
            string temp402;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Empty,Full,Empty,CorrectHeader)\'");
            temp402 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S805\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp402 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S805)", TestManagerHelpers.Describe(temp402)));
            this.Manager.Comment("reaching state \'S2138\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S806
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S806() {
            this.Manager.BeginTest("FullTestSuitePart1S806");
            this.Manager.Comment("reaching state \'S806\'");
            string temp403;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,OnlyOneElement,OnlyOneElement,Empty,CorrectHeade" +
                    "r)\'");
            temp403 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S807\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp403 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S807)", TestManagerHelpers.Describe(temp403)));
            this.Manager.Comment("reaching state \'S2139\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S808
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S808() {
            this.Manager.BeginTest("FullTestSuitePart1S808");
            this.Manager.Comment("reaching state \'S808\'");
            string temp404;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Correc" +
                    "tHeader)\'");
            temp404 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S809\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp404 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S809)", TestManagerHelpers.Describe(temp404)));
            this.Manager.Comment("reaching state \'S2140\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S810
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S810() {
            this.Manager.BeginTest("FullTestSuitePart1S810");
            this.Manager.Comment("reaching state \'S810\'");
            string temp405;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Full,Full,Empty,CorrectHeader)\'");
            temp405 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S811\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp405 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S811)", TestManagerHelpers.Describe(temp405)));
            this.Manager.Comment("reaching state \'S2141\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S812
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S812() {
            this.Manager.BeginTest("FullTestSuitePart1S812");
            this.Manager.Comment("reaching state \'S812\'");
            string temp406;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Null,Null,Empty,CorrectHeader)\'");
            temp406 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S813\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp406 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S813)", TestManagerHelpers.Describe(temp406)));
            this.Manager.Comment("reaching state \'S2142\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S814
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S814() {
            this.Manager.BeginTest("FullTestSuitePart1S814");
            this.Manager.Comment("reaching state \'S814\'");
            string temp407;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Null,Empty,Empty,CorrectHeader)\'");
            temp407 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S815\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp407 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S815)", TestManagerHelpers.Describe(temp407)));
            this.Manager.Comment("reaching state \'S2143\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S816
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S816() {
            this.Manager.BeginTest("FullTestSuitePart1S816");
            this.Manager.Comment("reaching state \'S816\'");
            string temp408;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Null,Empty,Empty,CorrectHeader)\'");
            temp408 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S817\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp408 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S817)", TestManagerHelpers.Describe(temp408)));
            this.Manager.Comment("reaching state \'S2144\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S818
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S818() {
            this.Manager.BeginTest("FullTestSuitePart1S818");
            this.Manager.Comment("reaching state \'S818\'");
            string temp409;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Full,Empty,Empty,CorrectHeader)\'");
            temp409 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S819\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp409 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S819)", TestManagerHelpers.Describe(temp409)));
            this.Manager.Comment("reaching state \'S2145\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S820
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S820() {
            this.Manager.BeginTest("FullTestSuitePart1S820");
            this.Manager.Comment("reaching state \'S820\'");
            string temp410;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,Null,Empty,CorrectHeader)\'");
            temp410 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S821\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp410 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S821)", TestManagerHelpers.Describe(temp410)));
            this.Manager.Comment("reaching state \'S2146\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S822
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S822() {
            this.Manager.BeginTest("FullTestSuitePart1S822");
            this.Manager.Comment("reaching state \'S822\'");
            string temp411;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp411 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S823\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp411 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S823)", TestManagerHelpers.Describe(temp411)));
            this.Manager.Comment("reaching state \'S2147\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S824
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S824() {
            this.Manager.BeginTest("FullTestSuitePart1S824");
            this.Manager.Comment("reaching state \'S824\'");
            string temp412;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp412 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S825\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp412 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S825)", TestManagerHelpers.Describe(temp412)));
            this.Manager.Comment("reaching state \'S2148\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S826
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S826() {
            this.Manager.BeginTest("FullTestSuitePart1S826");
            this.Manager.Comment("reaching state \'S826\'");
            string temp413;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp413 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S827\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp413 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S827)", TestManagerHelpers.Describe(temp413)));
            this.Manager.Comment("reaching state \'S2149\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S828
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S828() {
            this.Manager.BeginTest("FullTestSuitePart1S828");
            this.Manager.Comment("reaching state \'S828\'");
            string temp414;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,Full,Empty,CorrectHeade" +
                    "r)\'");
            temp414 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S829\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp414 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S829)", TestManagerHelpers.Describe(temp414)));
            this.Manager.Comment("reaching state \'S2150\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S830
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S830() {
            this.Manager.BeginTest("FullTestSuitePart1S830");
            this.Manager.Comment("reaching state \'S830\'");
            string temp415;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Empty,Full,Empty,CorrectHeader)\'");
            temp415 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S831\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp415 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S831)", TestManagerHelpers.Describe(temp415)));
            this.Manager.Comment("reaching state \'S2151\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S832
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S832() {
            this.Manager.BeginTest("FullTestSuitePart1S832");
            this.Manager.Comment("reaching state \'S832\'");
            string temp416;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp416 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S833\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp416 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S833)", TestManagerHelpers.Describe(temp416)));
            this.Manager.Comment("reaching state \'S2152\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S834
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S834() {
            this.Manager.BeginTest("FullTestSuitePart1S834");
            this.Manager.Comment("reaching state \'S834\'");
            string temp417;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Full,Full,Empty,CorrectHeader)\'");
            temp417 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S835\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp417 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S835)", TestManagerHelpers.Describe(temp417)));
            this.Manager.Comment("reaching state \'S2153\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S836
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S836() {
            this.Manager.BeginTest("FullTestSuitePart1S836");
            this.Manager.Comment("reaching state \'S836\'");
            string temp418;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp418 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S837\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp418 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S837)", TestManagerHelpers.Describe(temp418)));
            this.Manager.Comment("reaching state \'S2154\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S838
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S838() {
            this.Manager.BeginTest("FullTestSuitePart1S838");
            this.Manager.Comment("reaching state \'S838\'");
            string temp419;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp419 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S839\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp419 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S839)", TestManagerHelpers.Describe(temp419)));
            this.Manager.Comment("reaching state \'S2155\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S840
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S840() {
            this.Manager.BeginTest("FullTestSuitePart1S840");
            this.Manager.Comment("reaching state \'S840\'");
            string temp420;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp420 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S841\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp420 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S841)", TestManagerHelpers.Describe(temp420)));
            this.Manager.Comment("reaching state \'S2156\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S842
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S842() {
            this.Manager.BeginTest("FullTestSuitePart1S842");
            this.Manager.Comment("reaching state \'S842\'");
            string temp421;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp421 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S843\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp421 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S843)", TestManagerHelpers.Describe(temp421)));
            this.Manager.Comment("reaching state \'S2157\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S844
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S844() {
            this.Manager.BeginTest("FullTestSuitePart1S844");
            this.Manager.Comment("reaching state \'S844\'");
            string temp422;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Full,Full,Empty,CorrectHeader)\'");
            temp422 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S845\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp422 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S845)", TestManagerHelpers.Describe(temp422)));
            this.Manager.Comment("reaching state \'S2158\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S846
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S846() {
            this.Manager.BeginTest("FullTestSuitePart1S846");
            this.Manager.Comment("reaching state \'S846\'");
            string temp423;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp423 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S847\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp423 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S847)", TestManagerHelpers.Describe(temp423)));
            this.Manager.Comment("reaching state \'S2159\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S848
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S848() {
            this.Manager.BeginTest("FullTestSuitePart1S848");
            this.Manager.Comment("reaching state \'S848\'");
            string temp424;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,OnlyOneElement,TwoElementsOneEmpty,Empty,Correct" +
                    "Header)\'");
            temp424 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S849\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp424 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S849)", TestManagerHelpers.Describe(temp424)));
            this.Manager.Comment("reaching state \'S2160\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S850
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S850() {
            this.Manager.BeginTest("FullTestSuitePart1S850");
            this.Manager.Comment("reaching state \'S850\'");
            string temp425;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp425 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S851\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp425 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S851)", TestManagerHelpers.Describe(temp425)));
            this.Manager.Comment("reaching state \'S2161\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S852
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S852() {
            this.Manager.BeginTest("FullTestSuitePart1S852");
            this.Manager.Comment("reaching state \'S852\'");
            string temp426;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp426 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S853\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp426 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S853)", TestManagerHelpers.Describe(temp426)));
            this.Manager.Comment("reaching state \'S2162\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S854
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S854() {
            this.Manager.BeginTest("FullTestSuitePart1S854");
            this.Manager.Comment("reaching state \'S854\'");
            string temp427;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp427 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S855\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp427 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S855)", TestManagerHelpers.Describe(temp427)));
            this.Manager.Comment("reaching state \'S2163\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S856
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S856() {
            this.Manager.BeginTest("FullTestSuitePart1S856");
            this.Manager.Comment("reaching state \'S856\'");
            string temp428;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,Full,Empty,CorrectHeade" +
                    "r)\'");
            temp428 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S857\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp428 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S857)", TestManagerHelpers.Describe(temp428)));
            this.Manager.Comment("reaching state \'S2164\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S858
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S858() {
            this.Manager.BeginTest("FullTestSuitePart1S858");
            this.Manager.Comment("reaching state \'S858\'");
            string temp429;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeade" +
                    "r)\'");
            temp429 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S859\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp429 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S859)", TestManagerHelpers.Describe(temp429)));
            this.Manager.Comment("reaching state \'S2165\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S860
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S860() {
            this.Manager.BeginTest("FullTestSuitePart1S860");
            this.Manager.Comment("reaching state \'S860\'");
            string temp430;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp430 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S861\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp430 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S861)", TestManagerHelpers.Describe(temp430)));
            this.Manager.Comment("reaching state \'S2166\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S862
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S862() {
            this.Manager.BeginTest("FullTestSuitePart1S862");
            this.Manager.Comment("reaching state \'S862\'");
            string temp431;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp431 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S863\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp431 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S863)", TestManagerHelpers.Describe(temp431)));
            this.Manager.Comment("reaching state \'S2167\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S864
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S864() {
            this.Manager.BeginTest("FullTestSuitePart1S864");
            this.Manager.Comment("reaching state \'S864\'");
            string temp432;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp432 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S865\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp432 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S865)", TestManagerHelpers.Describe(temp432)));
            this.Manager.Comment("reaching state \'S2168\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S866
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S866() {
            this.Manager.BeginTest("FullTestSuitePart1S866");
            this.Manager.Comment("reaching state \'S866\'");
            string temp433;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp433 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S867\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp433 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S867)", TestManagerHelpers.Describe(temp433)));
            this.Manager.Comment("reaching state \'S2169\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S868
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S868() {
            this.Manager.BeginTest("FullTestSuitePart1S868");
            this.Manager.Comment("reaching state \'S868\'");
            string temp434;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp434 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S869\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp434 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S869)", TestManagerHelpers.Describe(temp434)));
            this.Manager.Comment("reaching state \'S2170\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S870
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S870() {
            this.Manager.BeginTest("FullTestSuitePart1S870");
            this.Manager.Comment("reaching state \'S870\'");
            string temp435;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Full,Full,Empty,CorrectHeader)\'");
            temp435 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S871\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp435 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S871)", TestManagerHelpers.Describe(temp435)));
            this.Manager.Comment("reaching state \'S2171\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S872
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S872() {
            this.Manager.BeginTest("FullTestSuitePart1S872");
            this.Manager.Comment("reaching state \'S872\'");
            string temp436;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Full,Empty,Empty,CorrectHeader)\'");
            temp436 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S873\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp436 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S873)", TestManagerHelpers.Describe(temp436)));
            this.Manager.Comment("reaching state \'S2172\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S874
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S874() {
            this.Manager.BeginTest("FullTestSuitePart1S874");
            this.Manager.Comment("reaching state \'S874\'");
            string temp437;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Full,Full,Empty,CorrectHeader)\'");
            temp437 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S875\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp437 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S875)", TestManagerHelpers.Describe(temp437)));
            this.Manager.Comment("reaching state \'S2173\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S876
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S876() {
            this.Manager.BeginTest("FullTestSuitePart1S876");
            this.Manager.Comment("reaching state \'S876\'");
            string temp438;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp438 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S877\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp438 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S877)", TestManagerHelpers.Describe(temp438)));
            this.Manager.Comment("reaching state \'S2174\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S878
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S878() {
            this.Manager.BeginTest("FullTestSuitePart1S878");
            this.Manager.Comment("reaching state \'S878\'");
            string temp439;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Full,Null,Empty,CorrectHeader)\'");
            temp439 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S879\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp439 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S879)", TestManagerHelpers.Describe(temp439)));
            this.Manager.Comment("reaching state \'S2175\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S880
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S880() {
            this.Manager.BeginTest("FullTestSuitePart1S880");
            this.Manager.Comment("reaching state \'S880\'");
            string temp440;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Full,Empty,Empty,CorrectHeader)\'");
            temp440 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S881\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp440 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S881)", TestManagerHelpers.Describe(temp440)));
            this.Manager.Comment("reaching state \'S2176\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S882
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S882() {
            this.Manager.BeginTest("FullTestSuitePart1S882");
            this.Manager.Comment("reaching state \'S882\'");
            string temp441;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Empty,Full,Empty,CorrectHeader)\'");
            temp441 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S883\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp441 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S883)", TestManagerHelpers.Describe(temp441)));
            this.Manager.Comment("reaching state \'S2177\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S884
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S884() {
            this.Manager.BeginTest("FullTestSuitePart1S884");
            this.Manager.Comment("reaching state \'S884\'");
            string temp442;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp442 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S885\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp442 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S885)", TestManagerHelpers.Describe(temp442)));
            this.Manager.Comment("reaching state \'S2178\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S886
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S886() {
            this.Manager.BeginTest("FullTestSuitePart1S886");
            this.Manager.Comment("reaching state \'S886\'");
            string temp443;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Full,Full,Empty,CorrectHeader)\'");
            temp443 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S887\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp443 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S887)", TestManagerHelpers.Describe(temp443)));
            this.Manager.Comment("reaching state \'S2179\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S888
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S888() {
            this.Manager.BeginTest("FullTestSuitePart1S888");
            this.Manager.Comment("reaching state \'S888\'");
            string temp444;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp444 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S889\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp444 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S889)", TestManagerHelpers.Describe(temp444)));
            this.Manager.Comment("reaching state \'S2180\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S890
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S890() {
            this.Manager.BeginTest("FullTestSuitePart1S890");
            this.Manager.Comment("reaching state \'S890\'");
            string temp445;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Full,Full,Empty,CorrectHeader)\'");
            temp445 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S891\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp445 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S891)", TestManagerHelpers.Describe(temp445)));
            this.Manager.Comment("reaching state \'S2181\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S892
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S892() {
            this.Manager.BeginTest("FullTestSuitePart1S892");
            this.Manager.Comment("reaching state \'S892\'");
            string temp446;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp446 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S893\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp446 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S893)", TestManagerHelpers.Describe(temp446)));
            this.Manager.Comment("reaching state \'S2182\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S894
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S894() {
            this.Manager.BeginTest("FullTestSuitePart1S894");
            this.Manager.Comment("reaching state \'S894\'");
            string temp447;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp447 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S895\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp447 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S895)", TestManagerHelpers.Describe(temp447)));
            this.Manager.Comment("reaching state \'S2183\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S896
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S896() {
            this.Manager.BeginTest("FullTestSuitePart1S896");
            this.Manager.Comment("reaching state \'S896\'");
            string temp448;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp448 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S897\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp448 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S897)", TestManagerHelpers.Describe(temp448)));
            this.Manager.Comment("reaching state \'S2184\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S898
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S898() {
            this.Manager.BeginTest("FullTestSuitePart1S898");
            this.Manager.Comment("reaching state \'S898\'");
            string temp449;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp449 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S899\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp449 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S899)", TestManagerHelpers.Describe(temp449)));
            this.Manager.Comment("reaching state \'S2185\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S900
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S900() {
            this.Manager.BeginTest("FullTestSuitePart1S900");
            this.Manager.Comment("reaching state \'S900\'");
            string temp450;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Full,Null,Empty,CorrectHeader)\'");
            temp450 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S901\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp450 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S901)", TestManagerHelpers.Describe(temp450)));
            this.Manager.Comment("reaching state \'S2186\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S902
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S902() {
            this.Manager.BeginTest("FullTestSuitePart1S902");
            this.Manager.Comment("reaching state \'S902\'");
            string temp451;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Empty,Null,Empty,CorrectHeader)\'");
            temp451 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S903\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp451 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S903)", TestManagerHelpers.Describe(temp451)));
            this.Manager.Comment("reaching state \'S2187\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S904
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S904() {
            this.Manager.BeginTest("FullTestSuitePart1S904");
            this.Manager.Comment("reaching state \'S904\'");
            string temp452;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Empty,Empty,Empty,CorrectHeader)\'");
            temp452 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S905\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp452 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S905)", TestManagerHelpers.Describe(temp452)));
            this.Manager.Comment("reaching state \'S2188\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S906
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S906() {
            this.Manager.BeginTest("FullTestSuitePart1S906");
            this.Manager.Comment("reaching state \'S906\'");
            string temp453;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Empty,Null,Empty,CorrectHeader)\'");
            temp453 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S907\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp453 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S907)", TestManagerHelpers.Describe(temp453)));
            this.Manager.Comment("reaching state \'S2189\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S908
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S908() {
            this.Manager.BeginTest("FullTestSuitePart1S908");
            this.Manager.Comment("reaching state \'S908\'");
            string temp454;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Empty,Null,Empty,CorrectHeader)\'");
            temp454 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S909\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp454 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S909)", TestManagerHelpers.Describe(temp454)));
            this.Manager.Comment("reaching state \'S2190\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S910
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S910() {
            this.Manager.BeginTest("FullTestSuitePart1S910");
            this.Manager.Comment("reaching state \'S910\'");
            string temp455;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Empty,Null,Empty,CorrectHeader)\'");
            temp455 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S911\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp455 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S911)", TestManagerHelpers.Describe(temp455)));
            this.Manager.Comment("reaching state \'S2191\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S912
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S912() {
            this.Manager.BeginTest("FullTestSuitePart1S912");
            this.Manager.Comment("reaching state \'S912\'");
            string temp456;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp456 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S913\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp456 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S913)", TestManagerHelpers.Describe(temp456)));
            this.Manager.Comment("reaching state \'S2192\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S914
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S914() {
            this.Manager.BeginTest("FullTestSuitePart1S914");
            this.Manager.Comment("reaching state \'S914\'");
            string temp457;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp457 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S915\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp457 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S915)", TestManagerHelpers.Describe(temp457)));
            this.Manager.Comment("reaching state \'S2193\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S916
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S916() {
            this.Manager.BeginTest("FullTestSuitePart1S916");
            this.Manager.Comment("reaching state \'S916\'");
            string temp458;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Null,Empty,Empty,CorrectHeader)\'");
            temp458 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S917\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp458 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S917)", TestManagerHelpers.Describe(temp458)));
            this.Manager.Comment("reaching state \'S2194\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S918
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S918() {
            this.Manager.BeginTest("FullTestSuitePart1S918");
            this.Manager.Comment("reaching state \'S918\'");
            string temp459;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Null,Empty,Empty,CorrectHeader)\'");
            temp459 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S919\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp459 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S919)", TestManagerHelpers.Describe(temp459)));
            this.Manager.Comment("reaching state \'S2195\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S920
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S920() {
            this.Manager.BeginTest("FullTestSuitePart1S920");
            this.Manager.Comment("reaching state \'S920\'");
            string temp460;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Null,Empty,Empty,CorrectHeader)\'");
            temp460 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S921\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp460 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S921)", TestManagerHelpers.Describe(temp460)));
            this.Manager.Comment("reaching state \'S2196\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S922
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S922() {
            this.Manager.BeginTest("FullTestSuitePart1S922");
            this.Manager.Comment("reaching state \'S922\'");
            string temp461;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Null,Null,Empty,CorrectHeader)\'");
            temp461 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S923\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp461 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S923)", TestManagerHelpers.Describe(temp461)));
            this.Manager.Comment("reaching state \'S2197\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S924
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S924() {
            this.Manager.BeginTest("FullTestSuitePart1S924");
            this.Manager.Comment("reaching state \'S924\'");
            string temp462;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Null,Null,Empty,CorrectHeader)\'");
            temp462 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S925\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp462 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S925)", TestManagerHelpers.Describe(temp462)));
            this.Manager.Comment("reaching state \'S2198\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S926
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S926() {
            this.Manager.BeginTest("FullTestSuitePart1S926");
            this.Manager.Comment("reaching state \'S926\'");
            string temp463;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Null,Null,Empty,CorrectHeader)\'");
            temp463 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S927\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp463 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S927)", TestManagerHelpers.Describe(temp463)));
            this.Manager.Comment("reaching state \'S2199\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S928
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S928() {
            this.Manager.BeginTest("FullTestSuitePart1S928");
            this.Manager.Comment("reaching state \'S928\'");
            string temp464;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Null,Empty,Empty,CorrectHeader)\'");
            temp464 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S929\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp464 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S929)", TestManagerHelpers.Describe(temp464)));
            this.Manager.Comment("reaching state \'S2200\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S930
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S930() {
            this.Manager.BeginTest("FullTestSuitePart1S930");
            this.Manager.Comment("reaching state \'S930\'");
            string temp465;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Null,Empty,Empty,CorrectHeader)\'");
            temp465 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S931\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp465 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S931)", TestManagerHelpers.Describe(temp465)));
            this.Manager.Comment("reaching state \'S2201\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S932
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S932() {
            this.Manager.BeginTest("FullTestSuitePart1S932");
            this.Manager.Comment("reaching state \'S932\'");
            string temp466;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Null,Null,Empty,CorrectHeader)\'");
            temp466 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S933\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp466 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S933)", TestManagerHelpers.Describe(temp466)));
            this.Manager.Comment("reaching state \'S2202\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S934
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S934() {
            this.Manager.BeginTest("FullTestSuitePart1S934");
            this.Manager.Comment("reaching state \'S934\'");
            string temp467;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Null,Null,Empty,CorrectHeader)\'");
            temp467 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S935\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp467 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S935)", TestManagerHelpers.Describe(temp467)));
            this.Manager.Comment("reaching state \'S2203\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S936
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S936() {
            this.Manager.BeginTest("FullTestSuitePart1S936");
            this.Manager.Comment("reaching state \'S936\'");
            string temp468;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Null,Empty,Empty,CorrectHeader)\'");
            temp468 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S937\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp468 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S937)", TestManagerHelpers.Describe(temp468)));
            this.Manager.Comment("reaching state \'S2204\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S938
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S938() {
            this.Manager.BeginTest("FullTestSuitePart1S938");
            this.Manager.Comment("reaching state \'S938\'");
            string temp469;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,TwoElementsOneEmpty,Null,Empty,CorrectHeader)\'");
            temp469 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S939\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp469 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S939)", TestManagerHelpers.Describe(temp469)));
            this.Manager.Comment("reaching state \'S2205\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S940
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S940() {
            this.Manager.BeginTest("FullTestSuitePart1S940");
            this.Manager.Comment("reaching state \'S940\'");
            string temp470;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Full,Full,Empty,CorrectHeader)\'");
            temp470 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S941\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp470 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S941)", TestManagerHelpers.Describe(temp470)));
            this.Manager.Comment("reaching state \'S2206\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S942
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S942() {
            this.Manager.BeginTest("FullTestSuitePart1S942");
            this.Manager.Comment("reaching state \'S942\'");
            string temp471;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp471 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S943\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp471 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S943)", TestManagerHelpers.Describe(temp471)));
            this.Manager.Comment("reaching state \'S2207\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S944
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S944() {
            this.Manager.BeginTest("FullTestSuitePart1S944");
            this.Manager.Comment("reaching state \'S944\'");
            string temp472;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Empty,Full,Empty,CorrectHeader)\'");
            temp472 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S945\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp472 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S945)", TestManagerHelpers.Describe(temp472)));
            this.Manager.Comment("reaching state \'S2208\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S946
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S946() {
            this.Manager.BeginTest("FullTestSuitePart1S946");
            this.Manager.Comment("reaching state \'S946\'");
            string temp473;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp473 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S947\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp473 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S947)", TestManagerHelpers.Describe(temp473)));
            this.Manager.Comment("reaching state \'S2209\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S948
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S948() {
            this.Manager.BeginTest("FullTestSuitePart1S948");
            this.Manager.Comment("reaching state \'S948\'");
            string temp474;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Full,Full,Empty,CorrectHeader)\'");
            temp474 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S949\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp474 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S949)", TestManagerHelpers.Describe(temp474)));
            this.Manager.Comment("reaching state \'S2210\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S950
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S950() {
            this.Manager.BeginTest("FullTestSuitePart1S950");
            this.Manager.Comment("reaching state \'S950\'");
            string temp475;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,OnlyOneElement,OnlyOneElement,Empty,CorrectHead" +
                    "er)\'");
            temp475 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S951\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp475 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S951)", TestManagerHelpers.Describe(temp475)));
            this.Manager.Comment("reaching state \'S2211\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S952
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S952() {
            this.Manager.BeginTest("FullTestSuitePart1S952");
            this.Manager.Comment("reaching state \'S952\'");
            string temp476;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp476 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S953\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp476 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S953)", TestManagerHelpers.Describe(temp476)));
            this.Manager.Comment("reaching state \'S2212\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S954
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S954() {
            this.Manager.BeginTest("FullTestSuitePart1S954");
            this.Manager.Comment("reaching state \'S954\'");
            string temp477;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp477 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S955\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp477 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S955)", TestManagerHelpers.Describe(temp477)));
            this.Manager.Comment("reaching state \'S2213\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S956
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S956() {
            this.Manager.BeginTest("FullTestSuitePart1S956");
            this.Manager.Comment("reaching state \'S956\'");
            string temp478;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp478 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S957\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp478 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S957)", TestManagerHelpers.Describe(temp478)));
            this.Manager.Comment("reaching state \'S2214\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S958
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S958() {
            this.Manager.BeginTest("FullTestSuitePart1S958");
            this.Manager.Comment("reaching state \'S958\'");
            string temp479;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,Co" +
                    "rrectHeader)\'");
            temp479 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S959\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp479 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S959)", TestManagerHelpers.Describe(temp479)));
            this.Manager.Comment("reaching state \'S2215\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S960
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S960() {
            this.Manager.BeginTest("FullTestSuitePart1S960");
            this.Manager.Comment("reaching state \'S960\'");
            string temp480;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeade" +
                    "r)\'");
            temp480 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S961\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp480 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S961)", TestManagerHelpers.Describe(temp480)));
            this.Manager.Comment("reaching state \'S2216\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S962
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S962() {
            this.Manager.BeginTest("FullTestSuitePart1S962");
            this.Manager.Comment("reaching state \'S962\'");
            string temp481;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp481 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S963\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp481 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S963)", TestManagerHelpers.Describe(temp481)));
            this.Manager.Comment("reaching state \'S2217\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S964
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S964() {
            this.Manager.BeginTest("FullTestSuitePart1S964");
            this.Manager.Comment("reaching state \'S964\'");
            string temp482;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,Full,Empty,Correct" +
                    "Header)\'");
            temp482 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S965\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp482 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S965)", TestManagerHelpers.Describe(temp482)));
            this.Manager.Comment("reaching state \'S2218\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S966
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S966() {
            this.Manager.BeginTest("FullTestSuitePart1S966");
            this.Manager.Comment("reaching state \'S966\'");
            string temp483;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Full,Full,Empty,CorrectHeader)\'");
            temp483 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S967\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp483 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S967)", TestManagerHelpers.Describe(temp483)));
            this.Manager.Comment("reaching state \'S2219\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S968
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S968() {
            this.Manager.BeginTest("FullTestSuitePart1S968");
            this.Manager.Comment("reaching state \'S968\'");
            string temp484;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,Full,Empty,CorrectHeader)\'");
            temp484 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S969\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp484 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S969)", TestManagerHelpers.Describe(temp484)));
            this.Manager.Comment("reaching state \'S2220\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S970
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S970() {
            this.Manager.BeginTest("FullTestSuitePart1S970");
            this.Manager.Comment("reaching state \'S970\'");
            string temp485;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Empty,Full,Empty,CorrectHeader)\'");
            temp485 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S971\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp485 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S971)", TestManagerHelpers.Describe(temp485)));
            this.Manager.Comment("reaching state \'S2221\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S972
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S972() {
            this.Manager.BeginTest("FullTestSuitePart1S972");
            this.Manager.Comment("reaching state \'S972\'");
            string temp486;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp486 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S973\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp486 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S973)", TestManagerHelpers.Describe(temp486)));
            this.Manager.Comment("reaching state \'S2222\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S974
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S974() {
            this.Manager.BeginTest("FullTestSuitePart1S974");
            this.Manager.Comment("reaching state \'S974\'");
            string temp487;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Empty,Null,Empty,CorrectHeader)\'");
            temp487 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S975\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp487 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S975)", TestManagerHelpers.Describe(temp487)));
            this.Manager.Comment("reaching state \'S2223\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S976
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S976() {
            this.Manager.BeginTest("FullTestSuitePart1S976");
            this.Manager.Comment("reaching state \'S976\'");
            string temp488;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Empty,Null,Empty,CorrectHeader)\'");
            temp488 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S977\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp488 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S977)", TestManagerHelpers.Describe(temp488)));
            this.Manager.Comment("reaching state \'S2224\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S978
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S978() {
            this.Manager.BeginTest("FullTestSuitePart1S978");
            this.Manager.Comment("reaching state \'S978\'");
            string temp489;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp489 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S979\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp489 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S979)", TestManagerHelpers.Describe(temp489)));
            this.Manager.Comment("reaching state \'S2225\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S980
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S980() {
            this.Manager.BeginTest("FullTestSuitePart1S980");
            this.Manager.Comment("reaching state \'S980\'");
            string temp490;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Full,Empty,Empty,CorrectHeader)\'");
            temp490 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S981\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp490 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S981)", TestManagerHelpers.Describe(temp490)));
            this.Manager.Comment("reaching state \'S2226\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S982
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S982() {
            this.Manager.BeginTest("FullTestSuitePart1S982");
            this.Manager.Comment("reaching state \'S982\'");
            string temp491;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Empty,Null,Empty,CorrectHeader)\'");
            temp491 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S983\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp491 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S983)", TestManagerHelpers.Describe(temp491)));
            this.Manager.Comment("reaching state \'S2227\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S984
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S984() {
            this.Manager.BeginTest("FullTestSuitePart1S984");
            this.Manager.Comment("reaching state \'S984\'");
            string temp492;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,OnlyOneElement,OnlyOneElement,Empty,CorrectHead" +
                    "er)\'");
            temp492 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S985\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp492 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S985)", TestManagerHelpers.Describe(temp492)));
            this.Manager.Comment("reaching state \'S2228\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S986
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S986() {
            this.Manager.BeginTest("FullTestSuitePart1S986");
            this.Manager.Comment("reaching state \'S986\'");
            string temp493;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,OnlyOneElement,Empty,Empty,CorrectHeader)\'");
            temp493 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S987\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp493 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S987)", TestManagerHelpers.Describe(temp493)));
            this.Manager.Comment("reaching state \'S2229\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S988
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S988() {
            this.Manager.BeginTest("FullTestSuitePart1S988");
            this.Manager.Comment("reaching state \'S988\'");
            string temp494;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,OnlyOneElement,Null,Empty,CorrectHeader)\'");
            temp494 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S989\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp494 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S989)", TestManagerHelpers.Describe(temp494)));
            this.Manager.Comment("reaching state \'S2230\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S990
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S990() {
            this.Manager.BeginTest("FullTestSuitePart1S990");
            this.Manager.Comment("reaching state \'S990\'");
            string temp495;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Null,Empty,Empty,CorrectHeader)\'");
            temp495 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S991\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp495 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S991)", TestManagerHelpers.Describe(temp495)));
            this.Manager.Comment("reaching state \'S2231\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S992
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S992() {
            this.Manager.BeginTest("FullTestSuitePart1S992");
            this.Manager.Comment("reaching state \'S992\'");
            string temp496;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp496 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S993\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp496 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S993)", TestManagerHelpers.Describe(temp496)));
            this.Manager.Comment("reaching state \'S2232\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S994
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S994() {
            this.Manager.BeginTest("FullTestSuitePart1S994");
            this.Manager.Comment("reaching state \'S994\'");
            string temp497;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp497 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S995\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp497 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S995)", TestManagerHelpers.Describe(temp497)));
            this.Manager.Comment("reaching state \'S2233\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S996
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S996() {
            this.Manager.BeginTest("FullTestSuitePart1S996");
            this.Manager.Comment("reaching state \'S996\'");
            string temp498;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp498 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S997\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp498 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S997)", TestManagerHelpers.Describe(temp498)));
            this.Manager.Comment("reaching state \'S2234\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S998
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S998() {
            this.Manager.BeginTest("FullTestSuitePart1S998");
            this.Manager.Comment("reaching state \'S998\'");
            string temp499;
            this.Manager.Comment(@"executing step 'call SaveImage(Add,New,Length255,Length50,True,Length255,Length255,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeader)'");
            temp499 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S999\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp499 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S999)", TestManagerHelpers.Describe(temp499)));
            this.Manager.Comment("reaching state \'S2235\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1000
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1000() {
            this.Manager.BeginTest("FullTestSuitePart1S1000");
            this.Manager.Comment("reaching state \'S1000\'");
            string temp500;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp500 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1001\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp500 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1001)", TestManagerHelpers.Describe(temp500)));
            this.Manager.Comment("reaching state \'S2236\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1002
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1002() {
            this.Manager.BeginTest("FullTestSuitePart1S1002");
            this.Manager.Comment("reaching state \'S1002\'");
            string temp501;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,OnlyOneElement,Empty,Co" +
                    "rrectHeader)\'");
            temp501 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1003\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp501 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1003)", TestManagerHelpers.Describe(temp501)));
            this.Manager.Comment("reaching state \'S2237\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1004
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1004() {
            this.Manager.BeginTest("FullTestSuitePart1S1004");
            this.Manager.Comment("reaching state \'S1004\'");
            string temp502;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHead" +
                    "er)\'");
            temp502 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1005\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp502 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1005)", TestManagerHelpers.Describe(temp502)));
            this.Manager.Comment("reaching state \'S2238\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1006
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1006() {
            this.Manager.BeginTest("FullTestSuitePart1S1006");
            this.Manager.Comment("reaching state \'S1006\'");
            string temp503;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp503 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1007\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp503 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1007)", TestManagerHelpers.Describe(temp503)));
            this.Manager.Comment("reaching state \'S2239\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1008
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1008() {
            this.Manager.BeginTest("FullTestSuitePart1S1008");
            this.Manager.Comment("reaching state \'S1008\'");
            string temp504;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp504 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1009\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp504 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1009)", TestManagerHelpers.Describe(temp504)));
            this.Manager.Comment("reaching state \'S2240\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1010
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1010() {
            this.Manager.BeginTest("FullTestSuitePart1S1010");
            this.Manager.Comment("reaching state \'S1010\'");
            string temp505;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Empty,Full,Empty,CorrectHeader)\'");
            temp505 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1011\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp505 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1011)", TestManagerHelpers.Describe(temp505)));
            this.Manager.Comment("reaching state \'S2241\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1012
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1012() {
            this.Manager.BeginTest("FullTestSuitePart1S1012");
            this.Manager.Comment("reaching state \'S1012\'");
            string temp506;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Full,Full,Empty,CorrectHeader)\'");
            temp506 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1013\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp506 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1013)", TestManagerHelpers.Describe(temp506)));
            this.Manager.Comment("reaching state \'S2242\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1014
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1014() {
            this.Manager.BeginTest("FullTestSuitePart1S1014");
            this.Manager.Comment("reaching state \'S1014\'");
            string temp507;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp507 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1015\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp507 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1015)", TestManagerHelpers.Describe(temp507)));
            this.Manager.Comment("reaching state \'S2243\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1016
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1016() {
            this.Manager.BeginTest("FullTestSuitePart1S1016");
            this.Manager.Comment("reaching state \'S1016\'");
            string temp508;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Full,Full,Empty,CorrectHeader)\'");
            temp508 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1017\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp508 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1017)", TestManagerHelpers.Describe(temp508)));
            this.Manager.Comment("reaching state \'S2244\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1018
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1018() {
            this.Manager.BeginTest("FullTestSuitePart1S1018");
            this.Manager.Comment("reaching state \'S1018\'");
            string temp509;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Empty,Full,Empty,CorrectHeader)\'");
            temp509 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1019\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp509 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1019)", TestManagerHelpers.Describe(temp509)));
            this.Manager.Comment("reaching state \'S2245\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1020
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1020() {
            this.Manager.BeginTest("FullTestSuitePart1S1020");
            this.Manager.Comment("reaching state \'S1020\'");
            string temp510;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp510 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1021\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp510 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1021)", TestManagerHelpers.Describe(temp510)));
            this.Manager.Comment("reaching state \'S2246\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1022
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1022() {
            this.Manager.BeginTest("FullTestSuitePart1S1022");
            this.Manager.Comment("reaching state \'S1022\'");
            string temp511;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Empty,Full,Empty,CorrectHeader)\'");
            temp511 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1023\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp511 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1023)", TestManagerHelpers.Describe(temp511)));
            this.Manager.Comment("reaching state \'S2247\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1024
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1024() {
            this.Manager.BeginTest("FullTestSuitePart1S1024");
            this.Manager.Comment("reaching state \'S1024\'");
            string temp512;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp512 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1025\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp512 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1025)", TestManagerHelpers.Describe(temp512)));
            this.Manager.Comment("reaching state \'S2248\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1026
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1026() {
            this.Manager.BeginTest("FullTestSuitePart1S1026");
            this.Manager.Comment("reaching state \'S1026\'");
            string temp513;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp513 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1027\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp513 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1027)", TestManagerHelpers.Describe(temp513)));
            this.Manager.Comment("reaching state \'S2249\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1028
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1028() {
            this.Manager.BeginTest("FullTestSuitePart1S1028");
            this.Manager.Comment("reaching state \'S1028\'");
            string temp514;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,OnlyOneElement,Full,Empty,CorrectHeader)\'");
            temp514 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1029\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp514 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1029)", TestManagerHelpers.Describe(temp514)));
            this.Manager.Comment("reaching state \'S2250\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1030
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1030() {
            this.Manager.BeginTest("FullTestSuitePart1S1030");
            this.Manager.Comment("reaching state \'S1030\'");
            string temp515;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Full,Full,Empty,CorrectHeader)\'");
            temp515 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1031\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp515 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1031)", TestManagerHelpers.Describe(temp515)));
            this.Manager.Comment("reaching state \'S2251\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1032
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1032() {
            this.Manager.BeginTest("FullTestSuitePart1S1032");
            this.Manager.Comment("reaching state \'S1032\'");
            string temp516;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Full,Full,Empty,CorrectHeader)\'");
            temp516 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1033\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp516 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1033)", TestManagerHelpers.Describe(temp516)));
            this.Manager.Comment("reaching state \'S2252\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1034
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1034() {
            this.Manager.BeginTest("FullTestSuitePart1S1034");
            this.Manager.Comment("reaching state \'S1034\'");
            string temp517;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Empty,Full,Empty,CorrectHeader)\'");
            temp517 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1035\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp517 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1035)", TestManagerHelpers.Describe(temp517)));
            this.Manager.Comment("reaching state \'S2253\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1036
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1036() {
            this.Manager.BeginTest("FullTestSuitePart1S1036");
            this.Manager.Comment("reaching state \'S1036\'");
            string temp518;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Full,OnlyOneElement,Empty,CorrectHeade" +
                    "r)\'");
            temp518 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1037\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp518 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1037)", TestManagerHelpers.Describe(temp518)));
            this.Manager.Comment("reaching state \'S2254\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1038
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1038() {
            this.Manager.BeginTest("FullTestSuitePart1S1038");
            this.Manager.Comment("reaching state \'S1038\'");
            string temp519;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,OnlyOneElement,TwoElementsOneEmpty,Empty,Correc" +
                    "tHeader)\'");
            temp519 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1039\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp519 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1039)", TestManagerHelpers.Describe(temp519)));
            this.Manager.Comment("reaching state \'S2255\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1040
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1040() {
            this.Manager.BeginTest("FullTestSuitePart1S1040");
            this.Manager.Comment("reaching state \'S1040\'");
            string temp520;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp520 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1041\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp520 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1041)", TestManagerHelpers.Describe(temp520)));
            this.Manager.Comment("reaching state \'S2256\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1042
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1042() {
            this.Manager.BeginTest("FullTestSuitePart1S1042");
            this.Manager.Comment("reaching state \'S1042\'");
            string temp521;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,TwoElementsOneEmpty,OnlyOneElement,Empty,Correc" +
                    "tHeader)\'");
            temp521 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1043\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp521 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1043)", TestManagerHelpers.Describe(temp521)));
            this.Manager.Comment("reaching state \'S2257\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1044
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1044() {
            this.Manager.BeginTest("FullTestSuitePart1S1044");
            this.Manager.Comment("reaching state \'S1044\'");
            string temp522;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp522 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1045\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp522 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1045)", TestManagerHelpers.Describe(temp522)));
            this.Manager.Comment("reaching state \'S2258\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1046
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1046() {
            this.Manager.BeginTest("FullTestSuitePart1S1046");
            this.Manager.Comment("reaching state \'S1046\'");
            string temp523;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp523 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1047\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp523 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1047)", TestManagerHelpers.Describe(temp523)));
            this.Manager.Comment("reaching state \'S2259\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1048
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1048() {
            this.Manager.BeginTest("FullTestSuitePart1S1048");
            this.Manager.Comment("reaching state \'S1048\'");
            string temp524;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp524 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1049\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp524 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1049)", TestManagerHelpers.Describe(temp524)));
            this.Manager.Comment("reaching state \'S2260\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1050
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1050() {
            this.Manager.BeginTest("FullTestSuitePart1S1050");
            this.Manager.Comment("reaching state \'S1050\'");
            string temp525;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Null,Full,Empty,CorrectHeader)\'");
            temp525 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1051\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp525 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1051)", TestManagerHelpers.Describe(temp525)));
            this.Manager.Comment("reaching state \'S2261\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1052
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1052() {
            this.Manager.BeginTest("FullTestSuitePart1S1052");
            this.Manager.Comment("reaching state \'S1052\'");
            string temp526;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp526 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1053\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp526 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1053)", TestManagerHelpers.Describe(temp526)));
            this.Manager.Comment("reaching state \'S2262\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1054
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1054() {
            this.Manager.BeginTest("FullTestSuitePart1S1054");
            this.Manager.Comment("reaching state \'S1054\'");
            string temp527;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp527 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1055\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp527 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1055)", TestManagerHelpers.Describe(temp527)));
            this.Manager.Comment("reaching state \'S2263\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1056
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1056() {
            this.Manager.BeginTest("FullTestSuitePart1S1056");
            this.Manager.Comment("reaching state \'S1056\'");
            string temp528;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Empty,TwoElementsOneEmpty,Empty,CorrectHead" +
                    "er)\'");
            temp528 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1057\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp528 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1057)", TestManagerHelpers.Describe(temp528)));
            this.Manager.Comment("reaching state \'S2264\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1058
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1058() {
            this.Manager.BeginTest("FullTestSuitePart1S1058");
            this.Manager.Comment("reaching state \'S1058\'");
            string temp529;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp529 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1059\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp529 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1059)", TestManagerHelpers.Describe(temp529)));
            this.Manager.Comment("reaching state \'S2265\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1060
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1060() {
            this.Manager.BeginTest("FullTestSuitePart1S1060");
            this.Manager.Comment("reaching state \'S1060\'");
            string temp530;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp530 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1061\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp530 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1061)", TestManagerHelpers.Describe(temp530)));
            this.Manager.Comment("reaching state \'S2266\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1062
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1062() {
            this.Manager.BeginTest("FullTestSuitePart1S1062");
            this.Manager.Comment("reaching state \'S1062\'");
            string temp531;
            this.Manager.Comment(@"executing step 'call SaveImage(Add,New,Length255,Length50,True,Length255,Length255,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,CorrectHeader)'");
            temp531 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1063\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp531 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1063)", TestManagerHelpers.Describe(temp531)));
            this.Manager.Comment("reaching state \'S2267\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1064
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1064() {
            this.Manager.BeginTest("FullTestSuitePart1S1064");
            this.Manager.Comment("reaching state \'S1064\'");
            string temp532;
            this.Manager.Comment(@"executing step 'call SaveImage(Add,New,Length255,Length50,True,Length255,Length255,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,CorrectHeader)'");
            temp532 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1065\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp532 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1065)", TestManagerHelpers.Describe(temp532)));
            this.Manager.Comment("reaching state \'S2268\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1066
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1066() {
            this.Manager.BeginTest("FullTestSuitePart1S1066");
            this.Manager.Comment("reaching state \'S1066\'");
            string temp533;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Co" +
                    "rrectHeader)\'");
            temp533 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1067\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp533 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1067)", TestManagerHelpers.Describe(temp533)));
            this.Manager.Comment("reaching state \'S2269\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1068
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1068() {
            this.Manager.BeginTest("FullTestSuitePart1S1068");
            this.Manager.Comment("reaching state \'S1068\'");
            string temp534;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Full,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Correct" +
                    "Header)\'");
            temp534 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1069\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp534 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1069)", TestManagerHelpers.Describe(temp534)));
            this.Manager.Comment("reaching state \'S2270\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1070
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1070() {
            this.Manager.BeginTest("FullTestSuitePart1S1070");
            this.Manager.Comment("reaching state \'S1070\'");
            string temp535;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Full,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp535 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1071\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp535 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1071)", TestManagerHelpers.Describe(temp535)));
            this.Manager.Comment("reaching state \'S2271\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1072
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1072() {
            this.Manager.BeginTest("FullTestSuitePart1S1072");
            this.Manager.Comment("reaching state \'S1072\'");
            string temp536;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Full,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp536 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1073\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp536 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1073)", TestManagerHelpers.Describe(temp536)));
            this.Manager.Comment("reaching state \'S2272\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1074
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1074() {
            this.Manager.BeginTest("FullTestSuitePart1S1074");
            this.Manager.Comment("reaching state \'S1074\'");
            string temp537;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,OnlyOneElement,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp537 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1075\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp537 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1075)", TestManagerHelpers.Describe(temp537)));
            this.Manager.Comment("reaching state \'S2273\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1076
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1076() {
            this.Manager.BeginTest("FullTestSuitePart1S1076");
            this.Manager.Comment("reaching state \'S1076\'");
            string temp538;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp538 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1077\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp538 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1077)", TestManagerHelpers.Describe(temp538)));
            this.Manager.Comment("reaching state \'S2274\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1078
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1078() {
            this.Manager.BeginTest("FullTestSuitePart1S1078");
            this.Manager.Comment("reaching state \'S1078\'");
            string temp539;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Null,Empty,Empty,CorrectHeader)\'");
            temp539 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1079\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp539 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1079)", TestManagerHelpers.Describe(temp539)));
            this.Manager.Comment("reaching state \'S2275\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1080
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1080() {
            this.Manager.BeginTest("FullTestSuitePart1S1080");
            this.Manager.Comment("reaching state \'S1080\'");
            string temp540;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Full,Empty,Correct" +
                    "Header)\'");
            temp540 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1081\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp540 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1081)", TestManagerHelpers.Describe(temp540)));
            this.Manager.Comment("reaching state \'S2276\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1082
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1082() {
            this.Manager.BeginTest("FullTestSuitePart1S1082");
            this.Manager.Comment("reaching state \'S1082\'");
            string temp541;
            this.Manager.Comment(@"executing step 'call SaveImage(Add,New,Length255,Length50,True,Length255,Length255,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeader)'");
            temp541 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1083\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp541 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1083)", TestManagerHelpers.Describe(temp541)));
            this.Manager.Comment("reaching state \'S2277\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1084
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1084() {
            this.Manager.BeginTest("FullTestSuitePart1S1084");
            this.Manager.Comment("reaching state \'S1084\'");
            string temp542;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp542 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1085\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp542 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1085)", TestManagerHelpers.Describe(temp542)));
            this.Manager.Comment("reaching state \'S2278\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1086
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1086() {
            this.Manager.BeginTest("FullTestSuitePart1S1086");
            this.Manager.Comment("reaching state \'S1086\'");
            string temp543;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp543 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1087\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp543 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1087)", TestManagerHelpers.Describe(temp543)));
            this.Manager.Comment("reaching state \'S2279\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1088
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1088() {
            this.Manager.BeginTest("FullTestSuitePart1S1088");
            this.Manager.Comment("reaching state \'S1088\'");
            string temp544;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp544 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1089\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp544 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1089)", TestManagerHelpers.Describe(temp544)));
            this.Manager.Comment("reaching state \'S2280\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1090
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1090() {
            this.Manager.BeginTest("FullTestSuitePart1S1090");
            this.Manager.Comment("reaching state \'S1090\'");
            string temp545;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp545 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1091\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp545 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1091)", TestManagerHelpers.Describe(temp545)));
            this.Manager.Comment("reaching state \'S2281\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1092
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1092() {
            this.Manager.BeginTest("FullTestSuitePart1S1092");
            this.Manager.Comment("reaching state \'S1092\'");
            string temp546;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp546 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1093\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp546 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1093)", TestManagerHelpers.Describe(temp546)));
            this.Manager.Comment("reaching state \'S2282\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1094
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1094() {
            this.Manager.BeginTest("FullTestSuitePart1S1094");
            this.Manager.Comment("reaching state \'S1094\'");
            string temp547;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'" +
                    "");
            temp547 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1095\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp547 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1095)", TestManagerHelpers.Describe(temp547)));
            this.Manager.Comment("reaching state \'S2283\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1096
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1096() {
            this.Manager.BeginTest("FullTestSuitePart1S1096");
            this.Manager.Comment("reaching state \'S1096\'");
            string temp548;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp548 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1097\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp548 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1097)", TestManagerHelpers.Describe(temp548)));
            this.Manager.Comment("reaching state \'S2284\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1098
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1098() {
            this.Manager.BeginTest("FullTestSuitePart1S1098");
            this.Manager.Comment("reaching state \'S1098\'");
            string temp549;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,OnlyOneElement,OnlyOneElement,Empty,CorrectHeade" +
                    "r)\'");
            temp549 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1099\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp549 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1099)", TestManagerHelpers.Describe(temp549)));
            this.Manager.Comment("reaching state \'S2285\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1100
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1100() {
            this.Manager.BeginTest("FullTestSuitePart1S1100");
            this.Manager.Comment("reaching state \'S1100\'");
            string temp550;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp550 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1101\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp550 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1101)", TestManagerHelpers.Describe(temp550)));
            this.Manager.Comment("reaching state \'S2286\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1102
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1102() {
            this.Manager.BeginTest("FullTestSuitePart1S1102");
            this.Manager.Comment("reaching state \'S1102\'");
            string temp551;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp551 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1103\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp551 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1103)", TestManagerHelpers.Describe(temp551)));
            this.Manager.Comment("reaching state \'S2287\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1104
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1104() {
            this.Manager.BeginTest("FullTestSuitePart1S1104");
            this.Manager.Comment("reaching state \'S1104\'");
            string temp552;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,OnlyOneElement,OnlyOneElement,Empty,CorrectHeade" +
                    "r)\'");
            temp552 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1105\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp552 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1105)", TestManagerHelpers.Describe(temp552)));
            this.Manager.Comment("reaching state \'S2288\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1106
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1106() {
            this.Manager.BeginTest("FullTestSuitePart1S1106");
            this.Manager.Comment("reaching state \'S1106\'");
            string temp553;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp553 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1107\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp553 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1107)", TestManagerHelpers.Describe(temp553)));
            this.Manager.Comment("reaching state \'S2289\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1108
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1108() {
            this.Manager.BeginTest("FullTestSuitePart1S1108");
            this.Manager.Comment("reaching state \'S1108\'");
            string temp554;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp554 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1109\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp554 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1109)", TestManagerHelpers.Describe(temp554)));
            this.Manager.Comment("reaching state \'S2290\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1110
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1110() {
            this.Manager.BeginTest("FullTestSuitePart1S1110");
            this.Manager.Comment("reaching state \'S1110\'");
            string temp555;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp555 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1111\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp555 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1111)", TestManagerHelpers.Describe(temp555)));
            this.Manager.Comment("reaching state \'S2291\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1112
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1112() {
            this.Manager.BeginTest("FullTestSuitePart1S1112");
            this.Manager.Comment("reaching state \'S1112\'");
            string temp556;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp556 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1113\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp556 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1113)", TestManagerHelpers.Describe(temp556)));
            this.Manager.Comment("reaching state \'S2292\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1114
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1114() {
            this.Manager.BeginTest("FullTestSuitePart1S1114");
            this.Manager.Comment("reaching state \'S1114\'");
            string temp557;
            this.Manager.Comment(@"executing step 'call SaveImage(Add,New,Length255,Length50,True,Length255,Length255,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeader)'");
            temp557 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1115\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp557 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1115)", TestManagerHelpers.Describe(temp557)));
            this.Manager.Comment("reaching state \'S2293\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1116
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1116() {
            this.Manager.BeginTest("FullTestSuitePart1S1116");
            this.Manager.Comment("reaching state \'S1116\'");
            string temp558;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Full,OnlyOneElement,Empty,CorrectHeader)\'");
            temp558 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1117\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp558 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1117)", TestManagerHelpers.Describe(temp558)));
            this.Manager.Comment("reaching state \'S2294\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1118
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1118() {
            this.Manager.BeginTest("FullTestSuitePart1S1118");
            this.Manager.Comment("reaching state \'S1118\'");
            string temp559;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp559 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1119\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp559 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1119)", TestManagerHelpers.Describe(temp559)));
            this.Manager.Comment("reaching state \'S2295\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1120
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1120() {
            this.Manager.BeginTest("FullTestSuitePart1S1120");
            this.Manager.Comment("reaching state \'S1120\'");
            string temp560;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,OnlyOneElement,OnlyOneElement,Empty,CorrectHeader)\'");
            temp560 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1121\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp560 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1121)", TestManagerHelpers.Describe(temp560)));
            this.Manager.Comment("reaching state \'S2296\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1122
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1122() {
            this.Manager.BeginTest("FullTestSuitePart1S1122");
            this.Manager.Comment("reaching state \'S1122\'");
            string temp561;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp561 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1123\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp561 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1123)", TestManagerHelpers.Describe(temp561)));
            this.Manager.Comment("reaching state \'S2297\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1124
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1124() {
            this.Manager.BeginTest("FullTestSuitePart1S1124");
            this.Manager.Comment("reaching state \'S1124\'");
            string temp562;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Empty,Full,Empty,CorrectHeader)\'");
            temp562 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1125\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp562 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1125)", TestManagerHelpers.Describe(temp562)));
            this.Manager.Comment("reaching state \'S2298\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1126
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1126() {
            this.Manager.BeginTest("FullTestSuitePart1S1126");
            this.Manager.Comment("reaching state \'S1126\'");
            string temp563;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Empty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp563 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1127\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp563 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1127)", TestManagerHelpers.Describe(temp563)));
            this.Manager.Comment("reaching state \'S2299\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1128
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1128() {
            this.Manager.BeginTest("FullTestSuitePart1S1128");
            this.Manager.Comment("reaching state \'S1128\'");
            string temp564;
            this.Manager.Comment(@"executing step 'call SaveImage(Add,New,Length255,Length50,True,Length255,Length255,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeader)'");
            temp564 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1129\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp564 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1129)", TestManagerHelpers.Describe(temp564)));
            this.Manager.Comment("reaching state \'S2300\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1130
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1130() {
            this.Manager.BeginTest("FullTestSuitePart1S1130");
            this.Manager.Comment("reaching state \'S1130\'");
            string temp565;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,OnlyOneElement,TwoElementsOneEmpty,Empty,Correc" +
                    "tHeader)\'");
            temp565 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1131\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp565 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1131)", TestManagerHelpers.Describe(temp565)));
            this.Manager.Comment("reaching state \'S2301\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1132
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1132() {
            this.Manager.BeginTest("FullTestSuitePart1S1132");
            this.Manager.Comment("reaching state \'S1132\'");
            string temp566;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp566 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1133\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp566 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1133)", TestManagerHelpers.Describe(temp566)));
            this.Manager.Comment("reaching state \'S2302\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1134
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1134() {
            this.Manager.BeginTest("FullTestSuitePart1S1134");
            this.Manager.Comment("reaching state \'S1134\'");
            string temp567;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,OnlyOneElement,Empty,Correct" +
                    "Header)\'");
            temp567 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1135\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp567 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1135)", TestManagerHelpers.Describe(temp567)));
            this.Manager.Comment("reaching state \'S2303\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1136
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1136() {
            this.Manager.BeginTest("FullTestSuitePart1S1136");
            this.Manager.Comment("reaching state \'S1136\'");
            string temp568;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp568 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1137\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp568 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1137)", TestManagerHelpers.Describe(temp568)));
            this.Manager.Comment("reaching state \'S2304\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1138
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1138() {
            this.Manager.BeginTest("FullTestSuitePart1S1138");
            this.Manager.Comment("reaching state \'S1138\'");
            string temp569;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Null,Full,Empty,CorrectHeader)\'");
            temp569 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1139\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp569 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1139)", TestManagerHelpers.Describe(temp569)));
            this.Manager.Comment("reaching state \'S2305\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1140
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1140() {
            this.Manager.BeginTest("FullTestSuitePart1S1140");
            this.Manager.Comment("reaching state \'S1140\'");
            string temp570;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp570 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1141\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp570 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1141)", TestManagerHelpers.Describe(temp570)));
            this.Manager.Comment("reaching state \'S2306\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1142
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1142() {
            this.Manager.BeginTest("FullTestSuitePart1S1142");
            this.Manager.Comment("reaching state \'S1142\'");
            string temp571;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'" +
                    "");
            temp571 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1143\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp571 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1143)", TestManagerHelpers.Describe(temp571)));
            this.Manager.Comment("reaching state \'S2307\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1144
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1144() {
            this.Manager.BeginTest("FullTestSuitePart1S1144");
            this.Manager.Comment("reaching state \'S1144\'");
            string temp572;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp572 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1145\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp572 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1145)", TestManagerHelpers.Describe(temp572)));
            this.Manager.Comment("reaching state \'S2308\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1146
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1146() {
            this.Manager.BeginTest("FullTestSuitePart1S1146");
            this.Manager.Comment("reaching state \'S1146\'");
            string temp573;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,TwoElementsOneEmpty,Null,OnlyOneElement,Empty,CorrectHeade" +
                    "r)\'");
            temp573 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1147\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp573 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1147)", TestManagerHelpers.Describe(temp573)));
            this.Manager.Comment("reaching state \'S2309\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1148
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1148() {
            this.Manager.BeginTest("FullTestSuitePart1S1148");
            this.Manager.Comment("reaching state \'S1148\'");
            string temp574;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,Null,OnlyOneElement,Empty,Correct" +
                    "Header)\'");
            temp574 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1149\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp574 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1149)", TestManagerHelpers.Describe(temp574)));
            this.Manager.Comment("reaching state \'S2310\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1150
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1150() {
            this.Manager.BeginTest("FullTestSuitePart1S1150");
            this.Manager.Comment("reaching state \'S1150\'");
            string temp575;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp575 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1151\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp575 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1151)", TestManagerHelpers.Describe(temp575)));
            this.Manager.Comment("reaching state \'S2311\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1152
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1152() {
            this.Manager.BeginTest("FullTestSuitePart1S1152");
            this.Manager.Comment("reaching state \'S1152\'");
            string temp576;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Null,Empty,Empty,CorrectHeader)\'");
            temp576 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1153\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp576 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1153)", TestManagerHelpers.Describe(temp576)));
            this.Manager.Comment("reaching state \'S2312\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1154
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1154() {
            this.Manager.BeginTest("FullTestSuitePart1S1154");
            this.Manager.Comment("reaching state \'S1154\'");
            string temp577;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Null,Null,Empty,CorrectHeader)\'");
            temp577 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1155\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp577 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1155)", TestManagerHelpers.Describe(temp577)));
            this.Manager.Comment("reaching state \'S2313\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1156
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1156() {
            this.Manager.BeginTest("FullTestSuitePart1S1156");
            this.Manager.Comment("reaching state \'S1156\'");
            string temp578;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Correc" +
                    "tHeader)\'");
            temp578 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1157\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp578 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1157)", TestManagerHelpers.Describe(temp578)));
            this.Manager.Comment("reaching state \'S2314\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1158
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1158() {
            this.Manager.BeginTest("FullTestSuitePart1S1158");
            this.Manager.Comment("reaching state \'S1158\'");
            string temp579;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,C" +
                    "orrectHeader)\'");
            temp579 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1159\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp579 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1159)", TestManagerHelpers.Describe(temp579)));
            this.Manager.Comment("reaching state \'S2315\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1160
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1160() {
            this.Manager.BeginTest("FullTestSuitePart1S1160");
            this.Manager.Comment("reaching state \'S1160\'");
            string temp580;
            this.Manager.Comment(@"executing step 'call SaveImage(Add,New,Length255,Length50,True,Length255,Length255,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,CorrectHeader)'");
            temp580 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1161\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp580 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1161)", TestManagerHelpers.Describe(temp580)));
            this.Manager.Comment("reaching state \'S2316\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1162
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1162() {
            this.Manager.BeginTest("FullTestSuitePart1S1162");
            this.Manager.Comment("reaching state \'S1162\'");
            string temp581;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp581 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1163\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp581 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1163)", TestManagerHelpers.Describe(temp581)));
            this.Manager.Comment("reaching state \'S2317\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1164
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1164() {
            this.Manager.BeginTest("FullTestSuitePart1S1164");
            this.Manager.Comment("reaching state \'S1164\'");
            string temp582;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp582 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1165\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp582 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1165)", TestManagerHelpers.Describe(temp582)));
            this.Manager.Comment("reaching state \'S2318\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1166
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1166() {
            this.Manager.BeginTest("FullTestSuitePart1S1166");
            this.Manager.Comment("reaching state \'S1166\'");
            string temp583;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Null,Full,Empty,CorrectHeader)\'");
            temp583 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1167\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp583 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1167)", TestManagerHelpers.Describe(temp583)));
            this.Manager.Comment("reaching state \'S2319\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1168
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1168() {
            this.Manager.BeginTest("FullTestSuitePart1S1168");
            this.Manager.Comment("reaching state \'S1168\'");
            string temp584;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp584 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1169\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp584 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1169)", TestManagerHelpers.Describe(temp584)));
            this.Manager.Comment("reaching state \'S2320\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1170
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1170() {
            this.Manager.BeginTest("FullTestSuitePart1S1170");
            this.Manager.Comment("reaching state \'S1170\'");
            string temp585;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,OnlyOneElement,Empty,Correct" +
                    "Header)\'");
            temp585 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1171\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp585 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1171)", TestManagerHelpers.Describe(temp585)));
            this.Manager.Comment("reaching state \'S2321\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1172
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1172() {
            this.Manager.BeginTest("FullTestSuitePart1S1172");
            this.Manager.Comment("reaching state \'S1172\'");
            string temp586;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp586 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1173\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp586 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1173)", TestManagerHelpers.Describe(temp586)));
            this.Manager.Comment("reaching state \'S2322\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1174
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1174() {
            this.Manager.BeginTest("FullTestSuitePart1S1174");
            this.Manager.Comment("reaching state \'S1174\'");
            string temp587;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp587 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1175\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp587 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1175)", TestManagerHelpers.Describe(temp587)));
            this.Manager.Comment("reaching state \'S2323\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1176
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1176() {
            this.Manager.BeginTest("FullTestSuitePart1S1176");
            this.Manager.Comment("reaching state \'S1176\'");
            string temp588;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Null,Null,Empty,CorrectHeader)\'");
            temp588 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1177\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp588 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1177)", TestManagerHelpers.Describe(temp588)));
            this.Manager.Comment("reaching state \'S2324\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1178
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1178() {
            this.Manager.BeginTest("FullTestSuitePart1S1178");
            this.Manager.Comment("reaching state \'S1178\'");
            string temp589;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Null,Empty,Empty,CorrectHeader)\'");
            temp589 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1179\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp589 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1179)", TestManagerHelpers.Describe(temp589)));
            this.Manager.Comment("reaching state \'S2325\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1180
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1180() {
            this.Manager.BeginTest("FullTestSuitePart1S1180");
            this.Manager.Comment("reaching state \'S1180\'");
            string temp590;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp590 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1181\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp590 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1181)", TestManagerHelpers.Describe(temp590)));
            this.Manager.Comment("reaching state \'S2326\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1182
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1182() {
            this.Manager.BeginTest("FullTestSuitePart1S1182");
            this.Manager.Comment("reaching state \'S1182\'");
            string temp591;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Null,Null,Empty,CorrectHeader)\'");
            temp591 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1183\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp591 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1183)", TestManagerHelpers.Describe(temp591)));
            this.Manager.Comment("reaching state \'S2327\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1184
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1184() {
            this.Manager.BeginTest("FullTestSuitePart1S1184");
            this.Manager.Comment("reaching state \'S1184\'");
            string temp592;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Null,Null,Empty,CorrectHeader)\'");
            temp592 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1185\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp592 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1185)", TestManagerHelpers.Describe(temp592)));
            this.Manager.Comment("reaching state \'S2328\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1186
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1186() {
            this.Manager.BeginTest("FullTestSuitePart1S1186");
            this.Manager.Comment("reaching state \'S1186\'");
            string temp593;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,TwoElementsOneEmpty,Empty,Empty,CorrectHeader)\'");
            temp593 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1187\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp593 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1187)", TestManagerHelpers.Describe(temp593)));
            this.Manager.Comment("reaching state \'S2329\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1188
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1188() {
            this.Manager.BeginTest("FullTestSuitePart1S1188");
            this.Manager.Comment("reaching state \'S1188\'");
            string temp594;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,TwoElementsOneEmpty,OnlyOneElement,Empty,CorrectHeader)\'");
            temp594 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1189\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp594 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1189)", TestManagerHelpers.Describe(temp594)));
            this.Manager.Comment("reaching state \'S2330\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1190
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1190() {
            this.Manager.BeginTest("FullTestSuitePart1S1190");
            this.Manager.Comment("reaching state \'S1190\'");
            string temp595;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Null,Empty,Empty,CorrectHeader)\'");
            temp595 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1191\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp595 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1191)", TestManagerHelpers.Describe(temp595)));
            this.Manager.Comment("reaching state \'S2331\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1192
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1192() {
            this.Manager.BeginTest("FullTestSuitePart1S1192");
            this.Manager.Comment("reaching state \'S1192\'");
            string temp596;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Null,Empty,Empty,CorrectHeader)\'");
            temp596 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1193\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp596 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1193)", TestManagerHelpers.Describe(temp596)));
            this.Manager.Comment("reaching state \'S2332\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1194
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1194() {
            this.Manager.BeginTest("FullTestSuitePart1S1194");
            this.Manager.Comment("reaching state \'S1194\'");
            string temp597;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Null,Null,Empty,CorrectHeader)\'");
            temp597 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1195\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp597 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1195)", TestManagerHelpers.Describe(temp597)));
            this.Manager.Comment("reaching state \'S2333\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1196
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1196() {
            this.Manager.BeginTest("FullTestSuitePart1S1196");
            this.Manager.Comment("reaching state \'S1196\'");
            string temp598;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Null,Null,Empty,CorrectHeader)\'");
            temp598 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1197\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp598 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1197)", TestManagerHelpers.Describe(temp598)));
            this.Manager.Comment("reaching state \'S2334\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1198
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1198() {
            this.Manager.BeginTest("FullTestSuitePart1S1198");
            this.Manager.Comment("reaching state \'S1198\'");
            string temp599;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp599 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1199\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp599 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1199)", TestManagerHelpers.Describe(temp599)));
            this.Manager.Comment("reaching state \'S2335\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1200
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1200() {
            this.Manager.BeginTest("FullTestSuitePart1S1200");
            this.Manager.Comment("reaching state \'S1200\'");
            string temp600;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp600 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1201\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp600 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1201)", TestManagerHelpers.Describe(temp600)));
            this.Manager.Comment("reaching state \'S2336\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1202
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1202() {
            this.Manager.BeginTest("FullTestSuitePart1S1202");
            this.Manager.Comment("reaching state \'S1202\'");
            string temp601;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,TwoElementsOneEmpty,Full,Empty,CorrectHeader)\'");
            temp601 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1203\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp601 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1203)", TestManagerHelpers.Describe(temp601)));
            this.Manager.Comment("reaching state \'S2337\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1204
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1204() {
            this.Manager.BeginTest("FullTestSuitePart1S1204");
            this.Manager.Comment("reaching state \'S1204\'");
            string temp602;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp602 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1205\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp602 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1205)", TestManagerHelpers.Describe(temp602)));
            this.Manager.Comment("reaching state \'S2338\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1206
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1206() {
            this.Manager.BeginTest("FullTestSuitePart1S1206");
            this.Manager.Comment("reaching state \'S1206\'");
            string temp603;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp603 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1207\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp603 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1207)", TestManagerHelpers.Describe(temp603)));
            this.Manager.Comment("reaching state \'S2339\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1208
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1208() {
            this.Manager.BeginTest("FullTestSuitePart1S1208");
            this.Manager.Comment("reaching state \'S1208\'");
            string temp604;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Null,Empty,Empty,CorrectHeader)\'");
            temp604 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1209\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp604 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1209)", TestManagerHelpers.Describe(temp604)));
            this.Manager.Comment("reaching state \'S2340\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1210
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1210() {
            this.Manager.BeginTest("FullTestSuitePart1S1210");
            this.Manager.Comment("reaching state \'S1210\'");
            string temp605;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp605 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1211\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp605 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1211)", TestManagerHelpers.Describe(temp605)));
            this.Manager.Comment("reaching state \'S2341\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1212
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1212() {
            this.Manager.BeginTest("FullTestSuitePart1S1212");
            this.Manager.Comment("reaching state \'S1212\'");
            string temp606;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp606 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1213\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp606 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1213)", TestManagerHelpers.Describe(temp606)));
            this.Manager.Comment("reaching state \'S2342\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1214
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1214() {
            this.Manager.BeginTest("FullTestSuitePart1S1214");
            this.Manager.Comment("reaching state \'S1214\'");
            string temp607;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp607 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1215\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp607 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1215)", TestManagerHelpers.Describe(temp607)));
            this.Manager.Comment("reaching state \'S2343\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1216
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1216() {
            this.Manager.BeginTest("FullTestSuitePart1S1216");
            this.Manager.Comment("reaching state \'S1216\'");
            string temp608;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp608 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1217\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp608 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1217)", TestManagerHelpers.Describe(temp608)));
            this.Manager.Comment("reaching state \'S2344\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1218
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1218() {
            this.Manager.BeginTest("FullTestSuitePart1S1218");
            this.Manager.Comment("reaching state \'S1218\'");
            string temp609;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,C" +
                    "orrectHeader)\'");
            temp609 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1219\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp609 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1219)", TestManagerHelpers.Describe(temp609)));
            this.Manager.Comment("reaching state \'S2345\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1220
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1220() {
            this.Manager.BeginTest("FullTestSuitePart1S1220");
            this.Manager.Comment("reaching state \'S1220\'");
            string temp610;
            this.Manager.Comment(@"executing step 'call SaveImage(Add,New,Length255,Length50,True,Length255,Length255,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,OnlyOneElement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,CorrectHeader)'");
            temp610 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1221\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp610 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1221)", TestManagerHelpers.Describe(temp610)));
            this.Manager.Comment("reaching state \'S2346\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1222
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1222() {
            this.Manager.BeginTest("FullTestSuitePart1S1222");
            this.Manager.Comment("reaching state \'S1222\'");
            string temp611;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Correct" +
                    "Header)\'");
            temp611 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1223\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp611 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1223)", TestManagerHelpers.Describe(temp611)));
            this.Manager.Comment("reaching state \'S2347\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1224
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1224() {
            this.Manager.BeginTest("FullTestSuitePart1S1224");
            this.Manager.Comment("reaching state \'S1224\'");
            string temp612;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp612 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1225\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp612 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1225)", TestManagerHelpers.Describe(temp612)));
            this.Manager.Comment("reaching state \'S2348\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1226
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1226() {
            this.Manager.BeginTest("FullTestSuitePart1S1226");
            this.Manager.Comment("reaching state \'S1226\'");
            string temp613;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Correct" +
                    "Header)\'");
            temp613 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1227\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp613 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1227)", TestManagerHelpers.Describe(temp613)));
            this.Manager.Comment("reaching state \'S2349\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1228
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1228() {
            this.Manager.BeginTest("FullTestSuitePart1S1228");
            this.Manager.Comment("reaching state \'S1228\'");
            string temp614;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp614 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1229\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp614 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1229)", TestManagerHelpers.Describe(temp614)));
            this.Manager.Comment("reaching state \'S2350\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1230
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1230() {
            this.Manager.BeginTest("FullTestSuitePart1S1230");
            this.Manager.Comment("reaching state \'S1230\'");
            string temp615;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Null,Full,Empty,CorrectHeader)\'");
            temp615 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1231\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp615 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1231)", TestManagerHelpers.Describe(temp615)));
            this.Manager.Comment("reaching state \'S2351\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1232
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1232() {
            this.Manager.BeginTest("FullTestSuitePart1S1232");
            this.Manager.Comment("reaching state \'S1232\'");
            string temp616;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp616 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1233\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp616 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1233)", TestManagerHelpers.Describe(temp616)));
            this.Manager.Comment("reaching state \'S2352\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1234
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1234() {
            this.Manager.BeginTest("FullTestSuitePart1S1234");
            this.Manager.Comment("reaching state \'S1234\'");
            string temp617;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Co" +
                    "rrectHeader)\'");
            temp617 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1235\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp617 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1235)", TestManagerHelpers.Describe(temp617)));
            this.Manager.Comment("reaching state \'S2353\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1236
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1236() {
            this.Manager.BeginTest("FullTestSuitePart1S1236");
            this.Manager.Comment("reaching state \'S1236\'");
            string temp618;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,OnlyOneElement,TwoElementsOneEmpty,Empty,Correct" +
                    "Header)\'");
            temp618 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1237\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp618 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1237)", TestManagerHelpers.Describe(temp618)));
            this.Manager.Comment("reaching state \'S2354\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1238
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1238() {
            this.Manager.BeginTest("FullTestSuitePart1S1238");
            this.Manager.Comment("reaching state \'S1238\'");
            string temp619;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,TwoElementsOneEmpty,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Co" +
                    "rrectHeader)\'");
            temp619 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1239\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp619 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1239)", TestManagerHelpers.Describe(temp619)));
            this.Manager.Comment("reaching state \'S2355\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1240
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1240() {
            this.Manager.BeginTest("FullTestSuitePart1S1240");
            this.Manager.Comment("reaching state \'S1240\'");
            string temp620;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Empty,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp620 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1241\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp620 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1241)", TestManagerHelpers.Describe(temp620)));
            this.Manager.Comment("reaching state \'S2356\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1242
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1242() {
            this.Manager.BeginTest("FullTestSuitePart1S1242");
            this.Manager.Comment("reaching state \'S1242\'");
            string temp621;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp621 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1243\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp621 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1243)", TestManagerHelpers.Describe(temp621)));
            this.Manager.Comment("reaching state \'S2357\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1244
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1244() {
            this.Manager.BeginTest("FullTestSuitePart1S1244");
            this.Manager.Comment("reaching state \'S1244\'");
            string temp622;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,OnlyOneElement,TwoElementsOneEmpty,Empty,Correct" +
                    "Header)\'");
            temp622 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1245\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp622 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1245)", TestManagerHelpers.Describe(temp622)));
            this.Manager.Comment("reaching state \'S2358\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1246
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1246() {
            this.Manager.BeginTest("FullTestSuitePart1S1246");
            this.Manager.Comment("reaching state \'S1246\'");
            string temp623;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp623 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1247\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp623 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1247)", TestManagerHelpers.Describe(temp623)));
            this.Manager.Comment("reaching state \'S2359\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1248
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1248() {
            this.Manager.BeginTest("FullTestSuitePart1S1248");
            this.Manager.Comment("reaching state \'S1248\'");
            string temp624;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp624 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1249\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp624 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1249)", TestManagerHelpers.Describe(temp624)));
            this.Manager.Comment("reaching state \'S2360\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1250
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1250() {
            this.Manager.BeginTest("FullTestSuitePart1S1250");
            this.Manager.Comment("reaching state \'S1250\'");
            string temp625;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,OnlyOneElement,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp625 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1251\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp625 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1251)", TestManagerHelpers.Describe(temp625)));
            this.Manager.Comment("reaching state \'S2361\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1252
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1252() {
            this.Manager.BeginTest("FullTestSuitePart1S1252");
            this.Manager.Comment("reaching state \'S1252\'");
            string temp626;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Empty,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp626 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1253\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp626 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1253)", TestManagerHelpers.Describe(temp626)));
            this.Manager.Comment("reaching state \'S2362\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1254
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1254() {
            this.Manager.BeginTest("FullTestSuitePart1S1254");
            this.Manager.Comment("reaching state \'S1254\'");
            string temp627;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Null,Empty,Empty,CorrectHeader)\'");
            temp627 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1255\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp627 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1255)", TestManagerHelpers.Describe(temp627)));
            this.Manager.Comment("reaching state \'S2363\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1256
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1256() {
            this.Manager.BeginTest("FullTestSuitePart1S1256");
            this.Manager.Comment("reaching state \'S1256\'");
            string temp628;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Null,OnlyOneElement,Empty,CorrectHeader)\'");
            temp628 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1257\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp628 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1257)", TestManagerHelpers.Describe(temp628)));
            this.Manager.Comment("reaching state \'S2364\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1258
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1258() {
            this.Manager.BeginTest("FullTestSuitePart1S1258");
            this.Manager.Comment("reaching state \'S1258\'");
            string temp629;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Null,Full,Empty,CorrectHeader)\'");
            temp629 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1259\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp629 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1259)", TestManagerHelpers.Describe(temp629)));
            this.Manager.Comment("reaching state \'S2365\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1260
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1260() {
            this.Manager.BeginTest("FullTestSuitePart1S1260");
            this.Manager.Comment("reaching state \'S1260\'");
            string temp630;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,OnlyOneElement,OnlyOneE" +
                    "lement,OnlyOneElement,Null,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Correct" +
                    "Header)\'");
            temp630 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1261\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp630 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1261)", TestManagerHelpers.Describe(temp630)));
            this.Manager.Comment("reaching state \'S2366\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1262
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1262() {
            this.Manager.BeginTest("FullTestSuitePart1S1262");
            this.Manager.Comment("reaching state \'S1262\'");
            string temp631;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,TwoElementsOneEmpty,Onl" +
                    "yOneElement,OnlyOneElement,Null,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,Co" +
                    "rrectHeader)\'");
            temp631 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1263\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp631 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1263)", TestManagerHelpers.Describe(temp631)));
            this.Manager.Comment("reaching state \'S2367\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1264
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1264() {
            this.Manager.BeginTest("FullTestSuitePart1S1264");
            this.Manager.Comment("reaching state \'S1264\'");
            string temp632;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Null,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp632 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1265\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp632 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1265)", TestManagerHelpers.Describe(temp632)));
            this.Manager.Comment("reaching state \'S2368\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1266
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1266() {
            this.Manager.BeginTest("FullTestSuitePart1S1266");
            this.Manager.Comment("reaching state \'S1266\'");
            string temp633;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Full,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp633 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Full, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1267\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp633 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1267)", TestManagerHelpers.Describe(temp633)));
            this.Manager.Comment("reaching state \'S2369\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1268
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1268() {
            this.Manager.BeginTest("FullTestSuitePart1S1268");
            this.Manager.Comment("reaching state \'S1268\'");
            string temp634;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp634 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1269\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp634 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1269)", TestManagerHelpers.Describe(temp634)));
            this.Manager.Comment("reaching state \'S2370\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1270
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1270() {
            this.Manager.BeginTest("FullTestSuitePart1S1270");
            this.Manager.Comment("reaching state \'S1270\'");
            string temp635;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Null,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp635 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1271\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp635 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1271)", TestManagerHelpers.Describe(temp635)));
            this.Manager.Comment("reaching state \'S2371\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1272
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1272() {
            this.Manager.BeginTest("FullTestSuitePart1S1272");
            this.Manager.Comment("reaching state \'S1272\'");
            string temp636;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,OnlyOneElement,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp636 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1273\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp636 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1273)", TestManagerHelpers.Describe(temp636)));
            this.Manager.Comment("reaching state \'S2372\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1274
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1274() {
            this.Manager.BeginTest("FullTestSuitePart1S1274");
            this.Manager.Comment("reaching state \'S1274\'");
            string temp637;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,Empty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp637 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.Empty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1275\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp637 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1275)", TestManagerHelpers.Describe(temp637)));
            this.Manager.Comment("reaching state \'S2373\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1276
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1276() {
            this.Manager.BeginTest("FullTestSuitePart1S1276");
            this.Manager.Comment("reaching state \'S1276\'");
            string temp638;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Null,TwoElementsOneEmpty,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp638 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1277\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp638 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1277)", TestManagerHelpers.Describe(temp638)));
            this.Manager.Comment("reaching state \'S2374\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1278
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1278() {
            this.Manager.BeginTest("FullTestSuitePart1S1278");
            this.Manager.Comment("reaching state \'S1278\'");
            string temp639;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Empty,OnlyOneElement,On" +
                    "lyOneElement,Empty,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp639 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1279\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp639 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1279)", TestManagerHelpers.Describe(temp639)));
            this.Manager.Comment("reaching state \'S2375\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1280
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1280() {
            this.Manager.BeginTest("FullTestSuitePart1S1280");
            this.Manager.Comment("reaching state \'S1280\'");
            string temp640;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Full,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp640 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1281\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp640 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1281)", TestManagerHelpers.Describe(temp640)));
            this.Manager.Comment("reaching state \'S2376\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1282
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1282() {
            this.Manager.BeginTest("FullTestSuitePart1S1282");
            this.Manager.Comment("reaching state \'S1282\'");
            string temp641;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,OnlyOneElement,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp641 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1283\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp641 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1283)", TestManagerHelpers.Describe(temp641)));
            this.Manager.Comment("reaching state \'S2377\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1284
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1284() {
            this.Manager.BeginTest("FullTestSuitePart1S1284");
            this.Manager.Comment("reaching state \'S1284\'");
            string temp642;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Full,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp642 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1285\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp642 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1285)", TestManagerHelpers.Describe(temp642)));
            this.Manager.Comment("reaching state \'S2378\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1286
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1286() {
            this.Manager.BeginTest("FullTestSuitePart1S1286");
            this.Manager.Comment("reaching state \'S1286\'");
            string temp643;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Full,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp643 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Full, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1287\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp643 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1287)", TestManagerHelpers.Describe(temp643)));
            this.Manager.Comment("reaching state \'S2379\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1288
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1288() {
            this.Manager.BeginTest("FullTestSuitePart1S1288");
            this.Manager.Comment("reaching state \'S1288\'");
            string temp644;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,OnlyOneElement,Null,OnlyOneElement,Onl" +
                    "yOneElement,Empty,Null,TwoElementsOneEmpty,Empty,CorrectHeader)\'");
            temp644 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Null, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Null, InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1289\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp644 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S1289)", TestManagerHelpers.Describe(temp644)));
            this.Manager.Comment("reaching state \'S2380\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1290
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1290() {
            this.Manager.BeginTest("FullTestSuitePart1S1290");
            this.Manager.Comment("reaching state \'S1290\'");
            string temp645;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,New,Existing,Length50,Vali" +
                    "d,Full)\'");
            temp645 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.Full);
            this.Manager.Comment("reaching state \'S1291\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp645 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S1291)", TestManagerHelpers.Describe(temp645)));
            this.Manager.Comment("reaching state \'S2381\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1292
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1292() {
            this.Manager.BeginTest("FullTestSuitePart1S1292");
            this.Manager.Comment("reaching state \'S1292\'");
            string temp646;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,Existing,Existing,Length50" +
                    ",Valid,TwoElementsOneEmpty)\'");
            temp646 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.TwoElementsOneEmpty);
            this.Manager.Comment("reaching state \'S1293\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp646 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S1293)", TestManagerHelpers.Describe(temp646)));
            this.Manager.Comment("reaching state \'S2382\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1294
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1294() {
            this.Manager.BeginTest("FullTestSuitePart1S1294");
            this.Manager.Comment("reaching state \'S1294\'");
            string temp647;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,Existing,Existing,Length50" +
                    ",Valid,OnlyOneElement)\'");
            temp647 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S1295\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp647 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S1295)", TestManagerHelpers.Describe(temp647)));
            this.Manager.Comment("reaching state \'S2383\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1296
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1296() {
            this.Manager.BeginTest("FullTestSuitePart1S1296");
            this.Manager.Comment("reaching state \'S1296\'");
            string temp648;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,Existing,Existing,Length50" +
                    ",Valid,Empty)\'");
            temp648 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S1297\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp648 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S1297)", TestManagerHelpers.Describe(temp648)));
            this.Manager.Comment("reaching state \'S2384\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1298
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1298() {
            this.Manager.BeginTest("FullTestSuitePart1S1298");
            this.Manager.Comment("reaching state \'S1298\'");
            string temp649;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,New,Existing,Length50,Vali" +
                    "d,TwoElementsOneEmpty)\'");
            temp649 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.TwoElementsOneEmpty);
            this.Manager.Comment("reaching state \'S1299\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp649 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S1299)", TestManagerHelpers.Describe(temp649)));
            this.Manager.Comment("reaching state \'S2385\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1300
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1300() {
            this.Manager.BeginTest("FullTestSuitePart1S1300");
            this.Manager.Comment("reaching state \'S1300\'");
            string temp650;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,Existing,Existing,Length50" +
                    ",Valid,Null)\'");
            temp650 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.Null);
            this.Manager.Comment("reaching state \'S1301\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp650 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S1301)", TestManagerHelpers.Describe(temp650)));
            this.Manager.Comment("reaching state \'S2386\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1302
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1302() {
            this.Manager.BeginTest("FullTestSuitePart1S1302");
            this.Manager.Comment("reaching state \'S1302\'");
            string temp651;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,New,Existing,Length50,Vali" +
                    "d,Empty)\'");
            temp651 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S1303\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp651 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S1303)", TestManagerHelpers.Describe(temp651)));
            this.Manager.Comment("reaching state \'S2387\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1304
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1304() {
            this.Manager.BeginTest("FullTestSuitePart1S1304");
            this.Manager.Comment("reaching state \'S1304\'");
            string temp652;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,New,Existing,Length50,Vali" +
                    "d,OnlyOneElement)\'");
            temp652 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S1305\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp652 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S1305)", TestManagerHelpers.Describe(temp652)));
            this.Manager.Comment("reaching state \'S2388\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1306
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1306() {
            this.Manager.BeginTest("FullTestSuitePart1S1306");
            this.Manager.Comment("reaching state \'S1306\'");
            string temp653;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,New,Existing,Length50,Vali" +
                    "d,Null)\'");
            temp653 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.Null);
            this.Manager.Comment("reaching state \'S1307\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp653 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S1307)", TestManagerHelpers.Describe(temp653)));
            this.Manager.Comment("reaching state \'S2389\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1308
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1308() {
            this.Manager.BeginTest("FullTestSuitePart1S1308");
            this.Manager.Comment("reaching state \'S1308\'");
            string temp654;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,Existing,Existing,Length50" +
                    ",Valid,Full)\'");
            temp654 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.Full);
            this.Manager.Comment("reaching state \'S1309\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp654 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S1309)", TestManagerHelpers.Describe(temp654)));
            this.Manager.Comment("reaching state \'S2390\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1310
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1310() {
            this.Manager.BeginTest("FullTestSuitePart1S1310");
            this.Manager.Comment("reaching state \'S1310\'");
            string temp655;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,Existing,Exis" +
                    "ting,Existing,Length50,Existing,Existing,Existing,Today,Empty)\'");
            temp655 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S1311\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp655 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S1311)", TestManagerHelpers.Describe(temp655)));
            this.Manager.Comment("reaching state \'S2391\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1312
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1312() {
            this.Manager.BeginTest("FullTestSuitePart1S1312");
            this.Manager.Comment("reaching state \'S1312\'");
            string temp656;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,Existing,Exis" +
                    "ting,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp656 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S1313\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp656 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S1313)", TestManagerHelpers.Describe(temp656)));
            this.Manager.Comment("reaching state \'S2392\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1314
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1314() {
            this.Manager.BeginTest("FullTestSuitePart1S1314");
            this.Manager.Comment("reaching state \'S1314\'");
            string temp657;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,Existing" +
                    ",Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp657 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S1315\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp657 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S1315)", TestManagerHelpers.Describe(temp657)));
            this.Manager.Comment("reaching state \'S2393\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1316
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1316() {
            this.Manager.BeginTest("FullTestSuitePart1S1316");
            this.Manager.Comment("reaching state \'S1316\'");
            string temp658;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,Existing" +
                    ",Existing,Existing,Length50,Existing,Existing,Existing,Today,TwoElementsOneEmpty" +
                    ")\'");
            temp658 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.TwoElementsOneEmpty);
            this.Manager.Comment("reaching state \'S1317\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp658 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S1317)", TestManagerHelpers.Describe(temp658)));
            this.Manager.Comment("reaching state \'S2394\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1318
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1318() {
            this.Manager.BeginTest("FullTestSuitePart1S1318");
            this.Manager.Comment("reaching state \'S1318\'");
            string temp659;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,Existing,Exis" +
                    "ting,Existing,Length50,Existing,Existing,Existing,Today,Null)\'");
            temp659 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.Null);
            this.Manager.Comment("reaching state \'S1319\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp659 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S1319)", TestManagerHelpers.Describe(temp659)));
            this.Manager.Comment("reaching state \'S2395\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1320
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1320() {
            this.Manager.BeginTest("FullTestSuitePart1S1320");
            this.Manager.Comment("reaching state \'S1320\'");
            string temp660;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,Existing" +
                    ",Existing,Existing,Length50,Existing,Existing,Existing,Today,Null)\'");
            temp660 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.Null);
            this.Manager.Comment("reaching state \'S1321\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp660 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S1321)", TestManagerHelpers.Describe(temp660)));
            this.Manager.Comment("reaching state \'S2396\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1322
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1322() {
            this.Manager.BeginTest("FullTestSuitePart1S1322");
            this.Manager.Comment("reaching state \'S1322\'");
            string temp661;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,Existing" +
                    ",Existing,Existing,Length50,Existing,Existing,Existing,Today,Empty)\'");
            temp661 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S1323\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp661 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S1323)", TestManagerHelpers.Describe(temp661)));
            this.Manager.Comment("reaching state \'S2397\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1324
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1324() {
            this.Manager.BeginTest("FullTestSuitePart1S1324");
            this.Manager.Comment("reaching state \'S1324\'");
            string temp662;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,Existing,Exis" +
                    "ting,Existing,Length50,Existing,Existing,Existing,Today,TwoElementsOneEmpty)\'");
            temp662 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.TwoElementsOneEmpty);
            this.Manager.Comment("reaching state \'S1325\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp662 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S1325)", TestManagerHelpers.Describe(temp662)));
            this.Manager.Comment("reaching state \'S2398\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1326
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1326() {
            this.Manager.BeginTest("FullTestSuitePart1S1326");
            this.Manager.Comment("reaching state \'S1326\'");
            string temp663;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,Existing,Exis" +
                    "ting,Existing,Length50,Existing,Existing,Existing,Today,Full)\'");
            temp663 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.Full);
            this.Manager.Comment("reaching state \'S1327\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp663 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S1327)", TestManagerHelpers.Describe(temp663)));
            this.Manager.Comment("reaching state \'S2399\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1328
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1328() {
            this.Manager.BeginTest("FullTestSuitePart1S1328");
            this.Manager.Comment("reaching state \'S1328\'");
            string temp664;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,Existing" +
                    ",Existing,Existing,Length50,Existing,Existing,Existing,Today,Full)\'");
            temp664 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.Full);
            this.Manager.Comment("reaching state \'S1329\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp664 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S1329)", TestManagerHelpers.Describe(temp664)));
            this.Manager.Comment("reaching state \'S2400\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1330
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1330() {
            this.Manager.BeginTest("FullTestSuitePart1S1330");
            this.Manager.Comment("reaching state \'S1330\'");
            string temp665;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Add,New,Today,Future,Length255,Length" +
                    "2000,Length2000,Length2000,Length2000,Existing)\'");
            temp665 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S1331\'");
            this.Manager.Comment("checking step \'return SaveTask/\"NoError\"\'");
            this.Manager.Assert((temp665 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveTask, state S1331)", TestManagerHelpers.Describe(temp665)));
            this.Manager.Comment("reaching state \'S2401\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1332
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1332() {
            this.Manager.BeginTest("FullTestSuitePart1S1332");
            this.Manager.Comment("reaching state \'S1332\'");
            string temp666;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Delete,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing)\'");
            temp666 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S1333\'");
            this.Manager.Comment("checking step \'return SaveTask/\"NoError\"\'");
            this.Manager.Assert((temp666 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveTask, state S1333)", TestManagerHelpers.Describe(temp666)));
            this.Manager.Comment("reaching state \'S2402\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1334
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1334() {
            this.Manager.BeginTest("FullTestSuitePart1S1334");
            this.Manager.Comment("reaching state \'S1334\'");
            string temp667;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Delete,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,Existing)\'");
            temp667 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S1335\'");
            this.Manager.Comment("checking step \'return SaveTask/\"NoError\"\'");
            this.Manager.Assert((temp667 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveTask, state S1335)", TestManagerHelpers.Describe(temp667)));
            this.Manager.Comment("reaching state \'S2403\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1336
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1336() {
            this.Manager.BeginTest("FullTestSuitePart1S1336");
            this.Manager.Comment("reaching state \'S1336\'");
            string temp668;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Add,Existing,Today,Future,Length255,L" +
                    "ength2000,Length2000,Length2000,Length2000,Existing)\'");
            temp668 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S1337\'");
            this.Manager.Comment("checking step \'return SaveTask/\"NoError\"\'");
            this.Manager.Assert((temp668 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveTask, state S1337)", TestManagerHelpers.Describe(temp668)));
            this.Manager.Comment("reaching state \'S2404\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1338
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1338() {
            this.Manager.BeginTest("FullTestSuitePart1S1338");
            this.Manager.Comment("reaching state \'S1338\'");
            string temp669;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Add,Existing,Length50,CorrectHeader)\'");
            temp669 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1339\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"NoError\"\'");
            this.Manager.Assert((temp669 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveVideoEncoding, state S1339)", TestManagerHelpers.Describe(temp669)));
            this.Manager.Comment("reaching state \'S2405\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1340
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1340() {
            this.Manager.BeginTest("FullTestSuitePart1S1340");
            this.Manager.Comment("reaching state \'S1340\'");
            string temp670;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Delete,New,Length50,CorrectHeader)\'");
            temp670 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1341\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"NoError\"\'");
            this.Manager.Assert((temp670 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveVideoEncoding, state S1341)", TestManagerHelpers.Describe(temp670)));
            this.Manager.Comment("reaching state \'S2406\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1342
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1342() {
            this.Manager.BeginTest("FullTestSuitePart1S1342");
            this.Manager.Comment("reaching state \'S1342\'");
            string temp671;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Delete,Existing,Length50,CorrectHeader)\'");
            temp671 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1343\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"NoError\"\'");
            this.Manager.Assert((temp671 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveVideoEncoding, state S1343)", TestManagerHelpers.Describe(temp671)));
            this.Manager.Comment("reaching state \'S2407\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1344
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1344() {
            this.Manager.BeginTest("FullTestSuitePart1S1344");
            this.Manager.Comment("reaching state \'S1344\'");
            string temp672;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Add,New,Length50,CorrectHeader)\'");
            temp672 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1345\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"NoError\"\'");
            this.Manager.Assert((temp672 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveVideoEncoding, state S1345)", TestManagerHelpers.Describe(temp672)));
            this.Manager.Comment("reaching state \'S2408\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1346
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1346() {
            this.Manager.BeginTest("FullTestSuitePart1S1346");
            this.Manager.Comment("reaching state \'S1346\'");
            string temp673;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,False,False,False)\'");
            temp673 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S1347\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp673 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1347)", TestManagerHelpers.Describe(temp673)));
            this.Manager.Comment("reaching state \'S2409\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1348
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1348() {
            this.Manager.BeginTest("FullTestSuitePart1S1348");
            this.Manager.Comment("reaching state \'S1348\'");
            string temp674;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,True,True,True)\'");
            temp674 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S1349\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp674 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1349)", TestManagerHelpers.Describe(temp674)));
            this.Manager.Comment("reaching state \'S2410\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1350
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1350() {
            this.Manager.BeginTest("FullTestSuitePart1S1350");
            this.Manager.Comment("reaching state \'S1350\'");
            string temp675;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,True,False,True)\'");
            temp675 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S1351\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp675 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1351)", TestManagerHelpers.Describe(temp675)));
            this.Manager.Comment("reaching state \'S2411\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1352
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1352() {
            this.Manager.BeginTest("FullTestSuitePart1S1352");
            this.Manager.Comment("reaching state \'S1352\'");
            string temp676;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,True,True,True)\'");
            temp676 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S1353\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp676 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1353)", TestManagerHelpers.Describe(temp676)));
            this.Manager.Comment("reaching state \'S2412\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1354
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1354() {
            this.Manager.BeginTest("FullTestSuitePart1S1354");
            this.Manager.Comment("reaching state \'S1354\'");
            string temp677;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,False,True,True)\'");
            temp677 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S1355\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp677 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1355)", TestManagerHelpers.Describe(temp677)));
            this.Manager.Comment("reaching state \'S2413\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1356
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1356() {
            this.Manager.BeginTest("FullTestSuitePart1S1356");
            this.Manager.Comment("reaching state \'S1356\'");
            string temp678;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,True,True,False)\'");
            temp678 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S1357\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp678 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1357)", TestManagerHelpers.Describe(temp678)));
            this.Manager.Comment("reaching state \'S2414\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1358
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1358() {
            this.Manager.BeginTest("FullTestSuitePart1S1358");
            this.Manager.Comment("reaching state \'S1358\'");
            string temp679;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,True,False,True)\'");
            temp679 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S1359\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp679 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1359)", TestManagerHelpers.Describe(temp679)));
            this.Manager.Comment("reaching state \'S2415\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1360
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1360() {
            this.Manager.BeginTest("FullTestSuitePart1S1360");
            this.Manager.Comment("reaching state \'S1360\'");
            string temp680;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,True,False,False)\'");
            temp680 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S1361\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp680 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1361)", TestManagerHelpers.Describe(temp680)));
            this.Manager.Comment("reaching state \'S2416\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1362
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1362() {
            this.Manager.BeginTest("FullTestSuitePart1S1362");
            this.Manager.Comment("reaching state \'S1362\'");
            string temp681;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,False,False,True)\'");
            temp681 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S1363\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp681 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1363)", TestManagerHelpers.Describe(temp681)));
            this.Manager.Comment("reaching state \'S2417\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1364
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1364() {
            this.Manager.BeginTest("FullTestSuitePart1S1364");
            this.Manager.Comment("reaching state \'S1364\'");
            string temp682;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,True,True,False)\'");
            temp682 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S1365\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp682 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1365)", TestManagerHelpers.Describe(temp682)));
            this.Manager.Comment("reaching state \'S2418\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1366
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1366() {
            this.Manager.BeginTest("FullTestSuitePart1S1366");
            this.Manager.Comment("reaching state \'S1366\'");
            string temp683;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,False,True,True)\'");
            temp683 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S1367\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp683 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1367)", TestManagerHelpers.Describe(temp683)));
            this.Manager.Comment("reaching state \'S2419\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1368
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1368() {
            this.Manager.BeginTest("FullTestSuitePart1S1368");
            this.Manager.Comment("reaching state \'S1368\'");
            string temp684;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,False,True,False)\'");
            temp684 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S1369\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp684 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1369)", TestManagerHelpers.Describe(temp684)));
            this.Manager.Comment("reaching state \'S2420\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1370
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1370() {
            this.Manager.BeginTest("FullTestSuitePart1S1370");
            this.Manager.Comment("reaching state \'S1370\'");
            string temp685;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,False,True,False)\'");
            temp685 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S1371\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp685 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1371)", TestManagerHelpers.Describe(temp685)));
            this.Manager.Comment("reaching state \'S2421\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1372
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1372() {
            this.Manager.BeginTest("FullTestSuitePart1S1372");
            this.Manager.Comment("reaching state \'S1372\'");
            string temp686;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,False,False,False)\'");
            temp686 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S1373\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp686 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1373)", TestManagerHelpers.Describe(temp686)));
            this.Manager.Comment("reaching state \'S2422\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1374
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1374() {
            this.Manager.BeginTest("FullTestSuitePart1S1374");
            this.Manager.Comment("reaching state \'S1374\'");
            string temp687;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,True,False,False)\'");
            temp687 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S1375\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp687 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1375)", TestManagerHelpers.Describe(temp687)));
            this.Manager.Comment("reaching state \'S2423\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1376
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1376() {
            this.Manager.BeginTest("FullTestSuitePart1S1376");
            this.Manager.Comment("reaching state \'S1376\'");
            string temp688;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,False,False,True)\'");
            temp688 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S1377\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp688 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S1377)", TestManagerHelpers.Describe(temp688)));
            this.Manager.Comment("reaching state \'S2424\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1378
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1378() {
            this.Manager.BeginTest("FullTestSuitePart1S1378");
            this.Manager.Comment("reaching state \'S1378\'");
            string temp689;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Valid)\'");
            temp689 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.XmlType.Valid);
            this.Manager.Comment("reaching state \'S1379\'");
            this.Manager.Comment("checking step \'return SaveTask/\"NoError\"\'");
            this.Manager.Assert((temp689 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveTask, state S1379)", TestManagerHelpers.Describe(temp689)));
            this.Manager.Comment("reaching state \'S2425\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1380
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1380() {
            this.Manager.BeginTest("FullTestSuitePart1S1380");
            this.Manager.Comment("reaching state \'S1380\'");
            string temp690;
            this.Manager.Comment("executing step \'call GetArticle(Existing,CorrectHeader)\'");
            temp690 = this.ICatalogWebServiceAdapterInstance.GetArticle(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1381\'");
            this.Manager.Comment("checking step \'return GetArticle/\"NoError\"\'");
            this.Manager.Assert((temp690 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetArticle, state S1381)", TestManagerHelpers.Describe(temp690)));
            this.Manager.Comment("reaching state \'S2426\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1382
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1382() {
            this.Manager.BeginTest("FullTestSuitePart1S1382");
            this.Manager.Comment("reaching state \'S1382\'");
            string temp691;
            this.Manager.Comment("executing step \'call GetArticle(New,CorrectHeader)\'");
            temp691 = this.ICatalogWebServiceAdapterInstance.GetArticle(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1383\'");
            this.Manager.Comment("checking step \'return GetArticle/\"NoError\"\'");
            this.Manager.Assert((temp691 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetArticle, state S1383)", TestManagerHelpers.Describe(temp691)));
            this.Manager.Comment("reaching state \'S2427\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1384
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1384() {
            this.Manager.BeginTest("FullTestSuitePart1S1384");
            this.Manager.Comment("reaching state \'S1384\'");
            string temp692;
            this.Manager.Comment("executing step \'call GetArticleArray(OnlyOneElement,CorrectHeader)\'");
            temp692 = this.ICatalogWebServiceAdapterInstance.GetArticleArray(InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1385\'");
            this.Manager.Comment("checking step \'return GetArticleArray/\"NoError\"\'");
            this.Manager.Assert((temp692 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetArticleArray, state S1385)", TestManagerHelpers.Describe(temp692)));
            this.Manager.Comment("reaching state \'S2428\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1386
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1386() {
            this.Manager.BeginTest("FullTestSuitePart1S1386");
            this.Manager.Comment("reaching state \'S1386\'");
            string temp693;
            this.Manager.Comment("executing step \'call GetArticleArray(TwoElementsOneEmpty,CorrectHeader)\'");
            temp693 = this.ICatalogWebServiceAdapterInstance.GetArticleArray(InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1387\'");
            this.Manager.Comment("checking step \'return GetArticleArray/\"NoError\"\'");
            this.Manager.Assert((temp693 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetArticleArray, state S1387)", TestManagerHelpers.Describe(temp693)));
            this.Manager.Comment("reaching state \'S2429\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1388
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1388() {
            this.Manager.BeginTest("FullTestSuitePart1S1388");
            this.Manager.Comment("reaching state \'S1388\'");
            string temp694;
            this.Manager.Comment("executing step \'call GetArticleArray(Full,CorrectHeader)\'");
            temp694 = this.ICatalogWebServiceAdapterInstance.GetArticleArray(InputTypes.ArrayType.Full, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1389\'");
            this.Manager.Comment("checking step \'return GetArticleArray/\"NoError\"\'");
            this.Manager.Assert((temp694 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetArticleArray, state S1389)", TestManagerHelpers.Describe(temp694)));
            this.Manager.Comment("reaching state \'S2430\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1390
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1390() {
            this.Manager.BeginTest("FullTestSuitePart1S1390");
            this.Manager.Comment("reaching state \'S1390\'");
            string temp695;
            this.Manager.Comment("executing step \'call GetArticleArray(Empty,CorrectHeader)\'");
            temp695 = this.ICatalogWebServiceAdapterInstance.GetArticleArray(InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1391\'");
            this.Manager.Comment("checking step \'return GetArticleArray/\"NoError\"\'");
            this.Manager.Assert((temp695 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetArticleArray, state S1391)", TestManagerHelpers.Describe(temp695)));
            this.Manager.Comment("reaching state \'S2431\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1392
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1392() {
            this.Manager.BeginTest("FullTestSuitePart1S1392");
            this.Manager.Comment("reaching state \'S1392\'");
            string temp696;
            this.Manager.Comment("executing step \'call GetArticleArray(Null,CorrectHeader)\'");
            temp696 = this.ICatalogWebServiceAdapterInstance.GetArticleArray(InputTypes.ArrayType.Null, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1393\'");
            this.Manager.Comment("checking step \'return GetArticleArray/\"NoError\"\'");
            this.Manager.Assert((temp696 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetArticleArray, state S1393)", TestManagerHelpers.Describe(temp696)));
            this.Manager.Comment("reaching state \'S2432\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1394
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1394() {
            this.Manager.BeginTest("FullTestSuitePart1S1394");
            this.Manager.Comment("reaching state \'S1394\'");
            string temp697;
            this.Manager.Comment("executing step \'call GetAudioEncodingArray(CorrectHeader)\'");
            temp697 = this.ICatalogWebServiceAdapterInstance.GetAudioEncodingArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1395\'");
            this.Manager.Comment("checking step \'return GetAudioEncodingArray/\"NoError\"\'");
            this.Manager.Assert((temp697 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAudioEncodingArray, state S1395)" +
                        "", TestManagerHelpers.Describe(temp697)));
            this.Manager.Comment("reaching state \'S2433\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1396
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1396() {
            this.Manager.BeginTest("FullTestSuitePart1S1396");
            this.Manager.Comment("reaching state \'S1396\'");
            string temp698;
            this.Manager.Comment("executing step \'call GetCategorySystem(Existing,CorrectHeader)\'");
            temp698 = this.ICatalogWebServiceAdapterInstance.GetCategorySystem(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1397\'");
            this.Manager.Comment("checking step \'return GetCategorySystem/\"NoError\"\'");
            this.Manager.Assert((temp698 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCategorySystem, state S1397)", TestManagerHelpers.Describe(temp698)));
            this.Manager.Comment("reaching state \'S2434\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1398
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1398() {
            this.Manager.BeginTest("FullTestSuitePart1S1398");
            this.Manager.Comment("reaching state \'S1398\'");
            string temp699;
            this.Manager.Comment("executing step \'call GetCategorySystem(New,CorrectHeader)\'");
            temp699 = this.ICatalogWebServiceAdapterInstance.GetCategorySystem(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1399\'");
            this.Manager.Comment("checking step \'return GetCategorySystem/\"NoError\"\'");
            this.Manager.Assert((temp699 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCategorySystem, state S1399)", TestManagerHelpers.Describe(temp699)));
            this.Manager.Comment("reaching state \'S2435\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1400
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1400() {
            this.Manager.BeginTest("FullTestSuitePart1S1400");
            this.Manager.Comment("reaching state \'S1400\'");
            string temp700;
            this.Manager.Comment("executing step \'call GetCategorySystemArray(CorrectHeader)\'");
            temp700 = this.ICatalogWebServiceAdapterInstance.GetCategorySystemArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1401\'");
            this.Manager.Comment("checking step \'return GetCategorySystemArray/\"NoError\"\'");
            this.Manager.Assert((temp700 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCategorySystemArray, state S1401" +
                        ")", TestManagerHelpers.Describe(temp700)));
            this.Manager.Comment("reaching state \'S2436\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1402
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1402() {
            this.Manager.BeginTest("FullTestSuitePart1S1402");
            this.Manager.Comment("reaching state \'S1402\'");
            string temp701;
            this.Manager.Comment("executing step \'call GetClientTypeArray(CorrectHeader)\'");
            temp701 = this.ICatalogWebServiceAdapterInstance.GetClientTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1403\'");
            this.Manager.Comment("checking step \'return GetClientTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp701 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetClientTypeArray, state S1403)", TestManagerHelpers.Describe(temp701)));
            this.Manager.Comment("reaching state \'S2437\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1404
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1404() {
            this.Manager.BeginTest("FullTestSuitePart1S1404");
            this.Manager.Comment("reaching state \'S1404\'");
            string temp702;
            this.Manager.Comment("executing step \'call GetContributor(Existing,CorrectHeader)\'");
            temp702 = this.ICatalogWebServiceAdapterInstance.GetContributor(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1405\'");
            this.Manager.Comment("checking step \'return GetContributor/\"NoError\"\'");
            this.Manager.Assert((temp702 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributor, state S1405)", TestManagerHelpers.Describe(temp702)));
            this.Manager.Comment("reaching state \'S2438\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1406
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1406() {
            this.Manager.BeginTest("FullTestSuitePart1S1406");
            this.Manager.Comment("reaching state \'S1406\'");
            string temp703;
            this.Manager.Comment("executing step \'call GetContributor(New,CorrectHeader)\'");
            temp703 = this.ICatalogWebServiceAdapterInstance.GetContributor(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1407\'");
            this.Manager.Comment("checking step \'return GetContributor/\"NoError\"\'");
            this.Manager.Assert((temp703 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributor, state S1407)", TestManagerHelpers.Describe(temp703)));
            this.Manager.Comment("reaching state \'S2439\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1408
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1408() {
            this.Manager.BeginTest("FullTestSuitePart1S1408");
            this.Manager.Comment("reaching state \'S1408\'");
            string temp704;
            this.Manager.Comment("executing step \'call GetContributorArray(Full,CorrectHeader)\'");
            temp704 = this.ICatalogWebServiceAdapterInstance.GetContributorArray(InputTypes.ArrayType.Full, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1409\'");
            this.Manager.Comment("checking step \'return GetContributorArray/\"NoError\"\'");
            this.Manager.Assert((temp704 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributorArray, state S1409)", TestManagerHelpers.Describe(temp704)));
            this.Manager.Comment("reaching state \'S2440\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1410
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1410() {
            this.Manager.BeginTest("FullTestSuitePart1S1410");
            this.Manager.Comment("reaching state \'S1410\'");
            string temp705;
            this.Manager.Comment("executing step \'call GetContributorArray(Empty,CorrectHeader)\'");
            temp705 = this.ICatalogWebServiceAdapterInstance.GetContributorArray(InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1411\'");
            this.Manager.Comment("checking step \'return GetContributorArray/\"NoError\"\'");
            this.Manager.Assert((temp705 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributorArray, state S1411)", TestManagerHelpers.Describe(temp705)));
            this.Manager.Comment("reaching state \'S2441\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1412
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1412() {
            this.Manager.BeginTest("FullTestSuitePart1S1412");
            this.Manager.Comment("reaching state \'S1412\'");
            string temp706;
            this.Manager.Comment("executing step \'call GetContributorArray(TwoElementsOneEmpty,CorrectHeader)\'");
            temp706 = this.ICatalogWebServiceAdapterInstance.GetContributorArray(InputTypes.ArrayType.TwoElementsOneEmpty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1413\'");
            this.Manager.Comment("checking step \'return GetContributorArray/\"NoError\"\'");
            this.Manager.Assert((temp706 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributorArray, state S1413)", TestManagerHelpers.Describe(temp706)));
            this.Manager.Comment("reaching state \'S2442\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1414
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1414() {
            this.Manager.BeginTest("FullTestSuitePart1S1414");
            this.Manager.Comment("reaching state \'S1414\'");
            string temp707;
            this.Manager.Comment("executing step \'call GetContributorArray(OnlyOneElement,CorrectHeader)\'");
            temp707 = this.ICatalogWebServiceAdapterInstance.GetContributorArray(InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1415\'");
            this.Manager.Comment("checking step \'return GetContributorArray/\"NoError\"\'");
            this.Manager.Assert((temp707 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributorArray, state S1415)", TestManagerHelpers.Describe(temp707)));
            this.Manager.Comment("reaching state \'S2443\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1416
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1416() {
            this.Manager.BeginTest("FullTestSuitePart1S1416");
            this.Manager.Comment("reaching state \'S1416\'");
            string temp708;
            this.Manager.Comment("executing step \'call GetContributorArray(Null,CorrectHeader)\'");
            temp708 = this.ICatalogWebServiceAdapterInstance.GetContributorArray(InputTypes.ArrayType.Null, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1417\'");
            this.Manager.Comment("checking step \'return GetContributorArray/\"NoError\"\'");
            this.Manager.Assert((temp708 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributorArray, state S1417)", TestManagerHelpers.Describe(temp708)));
            this.Manager.Comment("reaching state \'S2444\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1418
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1418() {
            this.Manager.BeginTest("FullTestSuitePart1S1418");
            this.Manager.Comment("reaching state \'S1418\'");
            string temp709;
            this.Manager.Comment("executing step \'call GetContributorRelationshipTypeArray(CorrectHeader)\'");
            temp709 = this.ICatalogWebServiceAdapterInstance.GetContributorRelationshipTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1419\'");
            this.Manager.Comment("checking step \'return GetContributorRelationshipTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp709 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributorRelationshipTypeArray" +
                        ", state S1419)", TestManagerHelpers.Describe(temp709)));
            this.Manager.Comment("reaching state \'S2445\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1420
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1420() {
            this.Manager.BeginTest("FullTestSuitePart1S1420");
            this.Manager.Comment("reaching state \'S1420\'");
            string temp710;
            this.Manager.Comment("executing step \'call GetCountry(Existing,CorrectHeader)\'");
            temp710 = this.ICatalogWebServiceAdapterInstance.GetCountry(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1421\'");
            this.Manager.Comment("checking step \'return GetCountry/\"NoError\"\'");
            this.Manager.Assert((temp710 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCountry, state S1421)", TestManagerHelpers.Describe(temp710)));
            this.Manager.Comment("reaching state \'S2446\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1422
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1422() {
            this.Manager.BeginTest("FullTestSuitePart1S1422");
            this.Manager.Comment("reaching state \'S1422\'");
            string temp711;
            this.Manager.Comment("executing step \'call GetCountry(New,CorrectHeader)\'");
            temp711 = this.ICatalogWebServiceAdapterInstance.GetCountry(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1423\'");
            this.Manager.Comment("checking step \'return GetCountry/\"NoError\"\'");
            this.Manager.Assert((temp711 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCountry, state S1423)", TestManagerHelpers.Describe(temp711)));
            this.Manager.Comment("reaching state \'S2447\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1424
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1424() {
            this.Manager.BeginTest("FullTestSuitePart1S1424");
            this.Manager.Comment("reaching state \'S1424\'");
            string temp712;
            this.Manager.Comment("executing step \'call GetCountryArray(CorrectHeader)\'");
            temp712 = this.ICatalogWebServiceAdapterInstance.GetCountryArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1425\'");
            this.Manager.Comment("checking step \'return GetCountryArray/\"NoError\"\'");
            this.Manager.Assert((temp712 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCountryArray, state S1425)", TestManagerHelpers.Describe(temp712)));
            this.Manager.Comment("reaching state \'S2448\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1426
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1426() {
            this.Manager.BeginTest("FullTestSuitePart1S1426");
            this.Manager.Comment("reaching state \'S1426\'");
            string temp713;
            this.Manager.Comment("executing step \'call GetCurrency(Existing,CorrectHeader)\'");
            temp713 = this.ICatalogWebServiceAdapterInstance.GetCurrency(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1427\'");
            this.Manager.Comment("checking step \'return GetCurrency/\"NoError\"\'");
            this.Manager.Assert((temp713 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCurrency, state S1427)", TestManagerHelpers.Describe(temp713)));
            this.Manager.Comment("reaching state \'S2449\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1428
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1428() {
            this.Manager.BeginTest("FullTestSuitePart1S1428");
            this.Manager.Comment("reaching state \'S1428\'");
            string temp714;
            this.Manager.Comment("executing step \'call GetCurrency(New,CorrectHeader)\'");
            temp714 = this.ICatalogWebServiceAdapterInstance.GetCurrency(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1429\'");
            this.Manager.Comment("checking step \'return GetCurrency/\"NoError\"\'");
            this.Manager.Assert((temp714 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCurrency, state S1429)", TestManagerHelpers.Describe(temp714)));
            this.Manager.Comment("reaching state \'S2450\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1430
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1430() {
            this.Manager.BeginTest("FullTestSuitePart1S1430");
            this.Manager.Comment("reaching state \'S1430\'");
            string temp715;
            this.Manager.Comment("executing step \'call GetCurrencyArray(CorrectHeader)\'");
            temp715 = this.ICatalogWebServiceAdapterInstance.GetCurrencyArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1431\'");
            this.Manager.Comment("checking step \'return GetCurrencyArray/\"NoError\"\'");
            this.Manager.Assert((temp715 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCurrencyArray, state S1431)", TestManagerHelpers.Describe(temp715)));
            this.Manager.Comment("reaching state \'S2451\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1432
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1432() {
            this.Manager.BeginTest("FullTestSuitePart1S1432");
            this.Manager.Comment("reaching state \'S1432\'");
            string temp716;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuer(Existing,CorrectHeader)\'");
            temp716 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuer(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1433\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuer/\"NoError\"\'");
            this.Manager.Assert((temp716 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetDRMLicenseIssuer, state S1433)", TestManagerHelpers.Describe(temp716)));
            this.Manager.Comment("reaching state \'S2452\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1434
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1434() {
            this.Manager.BeginTest("FullTestSuitePart1S1434");
            this.Manager.Comment("reaching state \'S1434\'");
            string temp717;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuer(New,CorrectHeader)\'");
            temp717 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuer(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1435\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuer/\"NoError\"\'");
            this.Manager.Assert((temp717 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetDRMLicenseIssuer, state S1435)", TestManagerHelpers.Describe(temp717)));
            this.Manager.Comment("reaching state \'S2453\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1436
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1436() {
            this.Manager.BeginTest("FullTestSuitePart1S1436");
            this.Manager.Comment("reaching state \'S1436\'");
            string temp718;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuerArray(CorrectHeader)\'");
            temp718 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuerArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1437\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuerArray/\"NoError\"\'");
            this.Manager.Assert((temp718 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetDRMLicenseIssuerArray, state S14" +
                        "37)", TestManagerHelpers.Describe(temp718)));
            this.Manager.Comment("reaching state \'S2454\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1438
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1438() {
            this.Manager.BeginTest("FullTestSuitePart1S1438");
            this.Manager.Comment("reaching state \'S1438\'");
            string temp719;
            this.Manager.Comment("executing step \'call GetEntity(Existing,CorrectHeader)\'");
            temp719 = this.ICatalogWebServiceAdapterInstance.GetEntity(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1439\'");
            this.Manager.Comment("checking step \'return GetEntity/\"NoError\"\'");
            this.Manager.Assert((temp719 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetEntity, state S1439)", TestManagerHelpers.Describe(temp719)));
            this.Manager.Comment("reaching state \'S2455\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1440
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1440() {
            this.Manager.BeginTest("FullTestSuitePart1S1440");
            this.Manager.Comment("reaching state \'S1440\'");
            string temp720;
            this.Manager.Comment("executing step \'call GetEntity(New,CorrectHeader)\'");
            temp720 = this.ICatalogWebServiceAdapterInstance.GetEntity(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1441\'");
            this.Manager.Comment("checking step \'return GetEntity/\"NoError\"\'");
            this.Manager.Assert((temp720 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetEntity, state S1441)", TestManagerHelpers.Describe(temp720)));
            this.Manager.Comment("reaching state \'S2456\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1442
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1442() {
            this.Manager.BeginTest("FullTestSuitePart1S1442");
            this.Manager.Comment("reaching state \'S1442\'");
            string temp721;
            this.Manager.Comment("executing step \'call GetEntityArray(CorrectHeader)\'");
            temp721 = this.ICatalogWebServiceAdapterInstance.GetEntityArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1443\'");
            this.Manager.Comment("checking step \'return GetEntityArray/\"NoError\"\'");
            this.Manager.Assert((temp721 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetEntityArray, state S1443)", TestManagerHelpers.Describe(temp721)));
            this.Manager.Comment("reaching state \'S2457\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1444
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1444() {
            this.Manager.BeginTest("FullTestSuitePart1S1444");
            this.Manager.Comment("reaching state \'S1444\'");
            string temp722;
            this.Manager.Comment("executing step \'call GetGame(Existing,CorrectHeader)\'");
            temp722 = this.ICatalogWebServiceAdapterInstance.GetGame(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1445\'");
            this.Manager.Comment("checking step \'return GetGame/\"NoError\"\'");
            this.Manager.Assert((temp722 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetGame, state S1445)", TestManagerHelpers.Describe(temp722)));
            this.Manager.Comment("reaching state \'S2458\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1446
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1446() {
            this.Manager.BeginTest("FullTestSuitePart1S1446");
            this.Manager.Comment("reaching state \'S1446\'");
            string temp723;
            this.Manager.Comment("executing step \'call GetGame(New,CorrectHeader)\'");
            temp723 = this.ICatalogWebServiceAdapterInstance.GetGame(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1447\'");
            this.Manager.Comment("checking step \'return GetGame/\"NoError\"\'");
            this.Manager.Assert((temp723 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetGame, state S1447)", TestManagerHelpers.Describe(temp723)));
            this.Manager.Comment("reaching state \'S2459\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1448
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1448() {
            this.Manager.BeginTest("FullTestSuitePart1S1448");
            this.Manager.Comment("reaching state \'S1448\'");
            string temp724;
            this.Manager.Comment("executing step \'call GetGameContent(Existing,CorrectHeader)\'");
            temp724 = this.ICatalogWebServiceAdapterInstance.GetGameContent(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1449\'");
            this.Manager.Comment("checking step \'return GetGameContent/\"NoError\"\'");
            this.Manager.Assert((temp724 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetGameContent, state S1449)", TestManagerHelpers.Describe(temp724)));
            this.Manager.Comment("reaching state \'S2460\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1450
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1450() {
            this.Manager.BeginTest("FullTestSuitePart1S1450");
            this.Manager.Comment("reaching state \'S1450\'");
            string temp725;
            this.Manager.Comment("executing step \'call GetGameContent(New,CorrectHeader)\'");
            temp725 = this.ICatalogWebServiceAdapterInstance.GetGameContent(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1451\'");
            this.Manager.Comment("checking step \'return GetGameContent/\"NoError\"\'");
            this.Manager.Assert((temp725 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetGameContent, state S1451)", TestManagerHelpers.Describe(temp725)));
            this.Manager.Comment("reaching state \'S2461\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1452
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1452() {
            this.Manager.BeginTest("FullTestSuitePart1S1452");
            this.Manager.Comment("reaching state \'S1452\'");
            string temp726;
            this.Manager.Comment("executing step \'call GetImage(Existing,CorrectHeader)\'");
            temp726 = this.ICatalogWebServiceAdapterInstance.GetImage(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1453\'");
            this.Manager.Comment("checking step \'return GetImage/\"NoError\"\'");
            this.Manager.Assert((temp726 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetImage, state S1453)", TestManagerHelpers.Describe(temp726)));
            this.Manager.Comment("reaching state \'S2462\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1454
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1454() {
            this.Manager.BeginTest("FullTestSuitePart1S1454");
            this.Manager.Comment("reaching state \'S1454\'");
            string temp727;
            this.Manager.Comment("executing step \'call GetImage(New,CorrectHeader)\'");
            temp727 = this.ICatalogWebServiceAdapterInstance.GetImage(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1455\'");
            this.Manager.Comment("checking step \'return GetImage/\"NoError\"\'");
            this.Manager.Assert((temp727 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetImage, state S1455)", TestManagerHelpers.Describe(temp727)));
            this.Manager.Comment("reaching state \'S2463\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1456
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1456() {
            this.Manager.BeginTest("FullTestSuitePart1S1456");
            this.Manager.Comment("reaching state \'S1456\'");
            string temp728;
            this.Manager.Comment("executing step \'call GetImageFormat(CorrectHeader)\'");
            temp728 = this.ICatalogWebServiceAdapterInstance.GetImageFormat(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1457\'");
            this.Manager.Comment("checking step \'return GetImageFormat/\"NoError\"\'");
            this.Manager.Assert((temp728 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetImageFormat, state S1457)", TestManagerHelpers.Describe(temp728)));
            this.Manager.Comment("reaching state \'S2464\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1458
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1458() {
            this.Manager.BeginTest("FullTestSuitePart1S1458");
            this.Manager.Comment("reaching state \'S1458\'");
            string temp729;
            this.Manager.Comment("executing step \'call GetImageSizeArray(CorrectHeader)\'");
            temp729 = this.ICatalogWebServiceAdapterInstance.GetImageSizeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1459\'");
            this.Manager.Comment("checking step \'return GetImageSizeArray/\"NoError\"\'");
            this.Manager.Assert((temp729 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetImageSizeArray, state S1459)", TestManagerHelpers.Describe(temp729)));
            this.Manager.Comment("reaching state \'S2465\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1460
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1460() {
            this.Manager.BeginTest("FullTestSuitePart1S1460");
            this.Manager.Comment("reaching state \'S1460\'");
            string temp730;
            this.Manager.Comment("executing step \'call GetLicenseClass(Existing,CorrectHeader)\'");
            temp730 = this.ICatalogWebServiceAdapterInstance.GetLicenseClass(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1461\'");
            this.Manager.Comment("checking step \'return GetLicenseClass/\"NoError\"\'");
            this.Manager.Assert((temp730 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseClass, state S1461)", TestManagerHelpers.Describe(temp730)));
            this.Manager.Comment("reaching state \'S2466\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1462
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1462() {
            this.Manager.BeginTest("FullTestSuitePart1S1462");
            this.Manager.Comment("reaching state \'S1462\'");
            string temp731;
            this.Manager.Comment("executing step \'call GetLicenseClass(New,CorrectHeader)\'");
            temp731 = this.ICatalogWebServiceAdapterInstance.GetLicenseClass(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1463\'");
            this.Manager.Comment("checking step \'return GetLicenseClass/\"NoError\"\'");
            this.Manager.Assert((temp731 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseClass, state S1463)", TestManagerHelpers.Describe(temp731)));
            this.Manager.Comment("reaching state \'S2467\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1464
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1464() {
            this.Manager.BeginTest("FullTestSuitePart1S1464");
            this.Manager.Comment("reaching state \'S1464\'");
            string temp732;
            this.Manager.Comment("executing step \'call GetLicenseClassArray(CorrectHeader)\'");
            temp732 = this.ICatalogWebServiceAdapterInstance.GetLicenseClassArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1465\'");
            this.Manager.Comment("checking step \'return GetLicenseClassArray/\"NoError\"\'");
            this.Manager.Assert((temp732 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseClassArray, state S1465)", TestManagerHelpers.Describe(temp732)));
            this.Manager.Comment("reaching state \'S2468\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1466
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1466() {
            this.Manager.BeginTest("FullTestSuitePart1S1466");
            this.Manager.Comment("reaching state \'S1466\'");
            string temp733;
            this.Manager.Comment("executing step \'call GetLicenseType(Existing,CorrectHeader)\'");
            temp733 = this.ICatalogWebServiceAdapterInstance.GetLicenseType(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1467\'");
            this.Manager.Comment("checking step \'return GetLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp733 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseType, state S1467)", TestManagerHelpers.Describe(temp733)));
            this.Manager.Comment("reaching state \'S2469\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1468
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1468() {
            this.Manager.BeginTest("FullTestSuitePart1S1468");
            this.Manager.Comment("reaching state \'S1468\'");
            string temp734;
            this.Manager.Comment("executing step \'call GetLicenseType(New,CorrectHeader)\'");
            temp734 = this.ICatalogWebServiceAdapterInstance.GetLicenseType(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1469\'");
            this.Manager.Comment("checking step \'return GetLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp734 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseType, state S1469)", TestManagerHelpers.Describe(temp734)));
            this.Manager.Comment("reaching state \'S2470\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1470
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1470() {
            this.Manager.BeginTest("FullTestSuitePart1S1470");
            this.Manager.Comment("reaching state \'S1470\'");
            string temp735;
            this.Manager.Comment("executing step \'call GetLicenseTypeArray(CorrectHeader)\'");
            temp735 = this.ICatalogWebServiceAdapterInstance.GetLicenseTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1471\'");
            this.Manager.Comment("checking step \'return GetLicenseTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp735 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseTypeArray, state S1471)", TestManagerHelpers.Describe(temp735)));
            this.Manager.Comment("reaching state \'S2471\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1472
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1472() {
            this.Manager.BeginTest("FullTestSuitePart1S1472");
            this.Manager.Comment("reaching state \'S1472\'");
            string temp736;
            this.Manager.Comment("executing step \'call GetLocaleArray(CorrectHeader)\'");
            temp736 = this.ICatalogWebServiceAdapterInstance.GetLocaleArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1473\'");
            this.Manager.Comment("checking step \'return GetLocaleArray/\"NoError\"\'");
            this.Manager.Assert((temp736 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLocaleArray, state S1473)", TestManagerHelpers.Describe(temp736)));
            this.Manager.Comment("reaching state \'S2472\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1474
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1474() {
            this.Manager.BeginTest("FullTestSuitePart1S1474");
            this.Manager.Comment("reaching state \'S1474\'");
            string temp737;
            this.Manager.Comment("executing step \'call GetMediaRelationshipTypeArray(CorrectHeader)\'");
            temp737 = this.ICatalogWebServiceAdapterInstance.GetMediaRelationshipTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1475\'");
            this.Manager.Comment("checking step \'return GetMediaRelationshipTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp737 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMediaRelationshipTypeArray, stat" +
                        "e S1475)", TestManagerHelpers.Describe(temp737)));
            this.Manager.Comment("reaching state \'S2473\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1476
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1476() {
            this.Manager.BeginTest("FullTestSuitePart1S1476");
            this.Manager.Comment("reaching state \'S1476\'");
            string temp738;
            this.Manager.Comment("executing step \'call GetMediaTypeArray(CorrectHeader)\'");
            temp738 = this.ICatalogWebServiceAdapterInstance.GetMediaTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1477\'");
            this.Manager.Comment("checking step \'return GetMediaTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp738 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMediaTypeArray, state S1477)", TestManagerHelpers.Describe(temp738)));
            this.Manager.Comment("reaching state \'S2474\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1478
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1478() {
            this.Manager.BeginTest("FullTestSuitePart1S1478");
            this.Manager.Comment("reaching state \'S1478\'");
            string temp739;
            this.Manager.Comment("executing step \'call GetMetadataProvider(Existing,CorrectHeader)\'");
            temp739 = this.ICatalogWebServiceAdapterInstance.GetMetadataProvider(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1479\'");
            this.Manager.Comment("checking step \'return GetMetadataProvider/\"NoError\"\'");
            this.Manager.Assert((temp739 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMetadataProvider, state S1479)", TestManagerHelpers.Describe(temp739)));
            this.Manager.Comment("reaching state \'S2475\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1480
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1480() {
            this.Manager.BeginTest("FullTestSuitePart1S1480");
            this.Manager.Comment("reaching state \'S1480\'");
            string temp740;
            this.Manager.Comment("executing step \'call GetMetadataProvider(New,CorrectHeader)\'");
            temp740 = this.ICatalogWebServiceAdapterInstance.GetMetadataProvider(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1481\'");
            this.Manager.Comment("checking step \'return GetMetadataProvider/\"NoError\"\'");
            this.Manager.Assert((temp740 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMetadataProvider, state S1481)", TestManagerHelpers.Describe(temp740)));
            this.Manager.Comment("reaching state \'S2476\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1482
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1482() {
            this.Manager.BeginTest("FullTestSuitePart1S1482");
            this.Manager.Comment("reaching state \'S1482\'");
            string temp741;
            this.Manager.Comment("executing step \'call GetMetadataProviderArray(CorrectHeader)\'");
            temp741 = this.ICatalogWebServiceAdapterInstance.GetMetadataProviderArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1483\'");
            this.Manager.Comment("checking step \'return GetMetadataProviderArray/\"NoError\"\'");
            this.Manager.Assert((temp741 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMetadataProviderArray, state S14" +
                        "83)", TestManagerHelpers.Describe(temp741)));
            this.Manager.Comment("reaching state \'S2477\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1484
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1484() {
            this.Manager.BeginTest("FullTestSuitePart1S1484");
            this.Manager.Comment("reaching state \'S1484\'");
            string temp742;
            this.Manager.Comment("executing step \'call GetOffer(Existing,CorrectHeader)\'");
            temp742 = this.ICatalogWebServiceAdapterInstance.GetOffer(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1485\'");
            this.Manager.Comment("checking step \'return GetOffer/\"NoError\"\'");
            this.Manager.Assert((temp742 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetOffer, state S1485)", TestManagerHelpers.Describe(temp742)));
            this.Manager.Comment("reaching state \'S2478\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1486
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1486() {
            this.Manager.BeginTest("FullTestSuitePart1S1486");
            this.Manager.Comment("reaching state \'S1486\'");
            string temp743;
            this.Manager.Comment("executing step \'call GetOffer(New,CorrectHeader)\'");
            temp743 = this.ICatalogWebServiceAdapterInstance.GetOffer(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1487\'");
            this.Manager.Comment("checking step \'return GetOffer/\"NoError\"\'");
            this.Manager.Assert((temp743 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetOffer, state S1487)", TestManagerHelpers.Describe(temp743)));
            this.Manager.Comment("reaching state \'S2479\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1488
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1488() {
            this.Manager.BeginTest("FullTestSuitePart1S1488");
            this.Manager.Comment("reaching state \'S1488\'");
            string temp744;
            this.Manager.Comment("executing step \'call GetPreviewMediaInstanceTypeArray(CorrectHeader)\'");
            temp744 = this.ICatalogWebServiceAdapterInstance.GetPreviewMediaInstanceTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1489\'");
            this.Manager.Comment("checking step \'return GetPreviewMediaInstanceTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp744 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPreviewMediaInstanceTypeArray, s" +
                        "tate S1489)", TestManagerHelpers.Describe(temp744)));
            this.Manager.Comment("reaching state \'S2480\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1490
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1490() {
            this.Manager.BeginTest("FullTestSuitePart1S1490");
            this.Manager.Comment("reaching state \'S1490\'");
            string temp745;
            this.Manager.Comment("executing step \'call GetPricingRule(Existing,CorrectHeader)\'");
            temp745 = this.ICatalogWebServiceAdapterInstance.GetPricingRule(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1491\'");
            this.Manager.Comment("checking step \'return GetPricingRule/\"NoError\"\'");
            this.Manager.Assert((temp745 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPricingRule, state S1491)", TestManagerHelpers.Describe(temp745)));
            this.Manager.Comment("reaching state \'S2481\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1492
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1492() {
            this.Manager.BeginTest("FullTestSuitePart1S1492");
            this.Manager.Comment("reaching state \'S1492\'");
            string temp746;
            this.Manager.Comment("executing step \'call GetPricingRule(New,CorrectHeader)\'");
            temp746 = this.ICatalogWebServiceAdapterInstance.GetPricingRule(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1493\'");
            this.Manager.Comment("checking step \'return GetPricingRule/\"NoError\"\'");
            this.Manager.Assert((temp746 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPricingRule, state S1493)", TestManagerHelpers.Describe(temp746)));
            this.Manager.Comment("reaching state \'S2482\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1494
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1494() {
            this.Manager.BeginTest("FullTestSuitePart1S1494");
            this.Manager.Comment("reaching state \'S1494\'");
            string temp747;
            this.Manager.Comment("executing step \'call GetPricingRuleArray(CorrectHeader)\'");
            temp747 = this.ICatalogWebServiceAdapterInstance.GetPricingRuleArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1495\'");
            this.Manager.Comment("checking step \'return GetPricingRuleArray/\"NoError\"\'");
            this.Manager.Assert((temp747 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPricingRuleArray, state S1495)", TestManagerHelpers.Describe(temp747)));
            this.Manager.Comment("reaching state \'S2483\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1496
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1496() {
            this.Manager.BeginTest("FullTestSuitePart1S1496");
            this.Manager.Comment("reaching state \'S1496\'");
            string temp748;
            this.Manager.Comment("executing step \'call GetProvider(Existing,CorrectHeader)\'");
            temp748 = this.ICatalogWebServiceAdapterInstance.GetProvider(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1497\'");
            this.Manager.Comment("checking step \'return GetProvider/\"NoError\"\'");
            this.Manager.Assert((temp748 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetProvider, state S1497)", TestManagerHelpers.Describe(temp748)));
            this.Manager.Comment("reaching state \'S2484\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1498
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1498() {
            this.Manager.BeginTest("FullTestSuitePart1S1498");
            this.Manager.Comment("reaching state \'S1498\'");
            string temp749;
            this.Manager.Comment("executing step \'call GetProvider(New,CorrectHeader)\'");
            temp749 = this.ICatalogWebServiceAdapterInstance.GetProvider(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1499\'");
            this.Manager.Comment("checking step \'return GetProvider/\"NoError\"\'");
            this.Manager.Assert((temp749 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetProvider, state S1499)", TestManagerHelpers.Describe(temp749)));
            this.Manager.Comment("reaching state \'S2485\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1500
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1500() {
            this.Manager.BeginTest("FullTestSuitePart1S1500");
            this.Manager.Comment("reaching state \'S1500\'");
            string temp750;
            this.Manager.Comment("executing step \'call GetProviderArray(CorrectHeader)\'");
            temp750 = this.ICatalogWebServiceAdapterInstance.GetProviderArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1501\'");
            this.Manager.Comment("checking step \'return GetProviderArray/\"NoError\"\'");
            this.Manager.Assert((temp750 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetProviderArray, state S1501)", TestManagerHelpers.Describe(temp750)));
            this.Manager.Comment("reaching state \'S2486\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1502
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1502() {
            this.Manager.BeginTest("FullTestSuitePart1S1502");
            this.Manager.Comment("reaching state \'S1502\'");
            string temp751;
            this.Manager.Comment("executing step \'call GetRatingSystem(Existing,CorrectHeader)\'");
            temp751 = this.ICatalogWebServiceAdapterInstance.GetRatingSystem(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1503\'");
            this.Manager.Comment("checking step \'return GetRatingSystem/\"NoError\"\'");
            this.Manager.Assert((temp751 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetRatingSystem, state S1503)", TestManagerHelpers.Describe(temp751)));
            this.Manager.Comment("reaching state \'S2487\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1504
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1504() {
            this.Manager.BeginTest("FullTestSuitePart1S1504");
            this.Manager.Comment("reaching state \'S1504\'");
            string temp752;
            this.Manager.Comment("executing step \'call GetRatingSystem(New,CorrectHeader)\'");
            temp752 = this.ICatalogWebServiceAdapterInstance.GetRatingSystem(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1505\'");
            this.Manager.Comment("checking step \'return GetRatingSystem/\"NoError\"\'");
            this.Manager.Assert((temp752 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetRatingSystem, state S1505)", TestManagerHelpers.Describe(temp752)));
            this.Manager.Comment("reaching state \'S2488\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1506
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1506() {
            this.Manager.BeginTest("FullTestSuitePart1S1506");
            this.Manager.Comment("reaching state \'S1506\'");
            string temp753;
            this.Manager.Comment("executing step \'call GetRatingSystemArray(CorrectHeader)\'");
            temp753 = this.ICatalogWebServiceAdapterInstance.GetRatingSystemArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1507\'");
            this.Manager.Comment("checking step \'return GetRatingSystemArray/\"NoError\"\'");
            this.Manager.Assert((temp753 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetRatingSystemArray, state S1507)", TestManagerHelpers.Describe(temp753)));
            this.Manager.Comment("reaching state \'S2489\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1508
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1508() {
            this.Manager.BeginTest("FullTestSuitePart1S1508");
            this.Manager.Comment("reaching state \'S1508\'");
            string temp754;
            this.Manager.Comment("executing step \'call GetRoleArray(CorrectHeader)\'");
            temp754 = this.ICatalogWebServiceAdapterInstance.GetRoleArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1509\'");
            this.Manager.Comment("checking step \'return GetRoleArray/\"NoError\"\'");
            this.Manager.Assert((temp754 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetRoleArray, state S1509)", TestManagerHelpers.Describe(temp754)));
            this.Manager.Comment("reaching state \'S2490\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1510
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1510() {
            this.Manager.BeginTest("FullTestSuitePart1S1510");
            this.Manager.Comment("reaching state \'S1510\'");
            string temp755;
            this.Manager.Comment("executing step \'call GetStoreArray(CorrectHeader)\'");
            temp755 = this.ICatalogWebServiceAdapterInstance.GetStoreArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1511\'");
            this.Manager.Comment("checking step \'return GetStoreArray/\"NoError\"\'");
            this.Manager.Assert((temp755 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetStoreArray, state S1511)", TestManagerHelpers.Describe(temp755)));
            this.Manager.Comment("reaching state \'S2491\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1512
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1512() {
            this.Manager.BeginTest("FullTestSuitePart1S1512");
            this.Manager.Comment("reaching state \'S1512\'");
            string temp756;
            this.Manager.Comment("executing step \'call GetTasks(CorrectHeader)\'");
            temp756 = this.ICatalogWebServiceAdapterInstance.GetTasks(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1513\'");
            this.Manager.Comment("checking step \'return GetTasks/\"NoError\"\'");
            this.Manager.Assert((temp756 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetTasks, state S1513)", TestManagerHelpers.Describe(temp756)));
            this.Manager.Comment("reaching state \'S2492\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1514
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1514() {
            this.Manager.BeginTest("FullTestSuitePart1S1514");
            this.Manager.Comment("reaching state \'S1514\'");
            string temp757;
            this.Manager.Comment("executing step \'call GetAvailableTaskAsXML(CorrectHeader)\'");
            temp757 = this.ICatalogWebServiceAdapterInstance.GetAvailableTaskAsXML(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1515\'");
            this.Manager.Comment("checking step \'return GetAvailableTaskAsXML/\"NoError\"\'");
            this.Manager.Assert((temp757 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableTaskAsXML, state S1515)" +
                        "", TestManagerHelpers.Describe(temp757)));
            this.Manager.Comment("reaching state \'S2493\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1516
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1516() {
            this.Manager.BeginTest("FullTestSuitePart1S1516");
            this.Manager.Comment("reaching state \'S1516\'");
            string temp758;
            this.Manager.Comment("executing step \'call GetTaskStatusArray(CorrectHeader)\'");
            temp758 = this.ICatalogWebServiceAdapterInstance.GetTaskStatusArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1517\'");
            this.Manager.Comment("checking step \'return GetTaskStatusArray/\"NoError\"\'");
            this.Manager.Assert((temp758 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetTaskStatusArray, state S1517)", TestManagerHelpers.Describe(temp758)));
            this.Manager.Comment("reaching state \'S2494\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1518
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1518() {
            this.Manager.BeginTest("FullTestSuitePart1S1518");
            this.Manager.Comment("reaching state \'S1518\'");
            string temp759;
            this.Manager.Comment("executing step \'call GetTaskByStatus(Existing,CorrectHeader)\'");
            temp759 = this.ICatalogWebServiceAdapterInstance.GetTaskByStatus(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1519\'");
            this.Manager.Comment("checking step \'return GetTaskByStatus/\"NoError\"\'");
            this.Manager.Assert((temp759 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetTaskByStatus, state S1519)", TestManagerHelpers.Describe(temp759)));
            this.Manager.Comment("reaching state \'S2495\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1520
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1520() {
            this.Manager.BeginTest("FullTestSuitePart1S1520");
            this.Manager.Comment("reaching state \'S1520\'");
            string temp760;
            this.Manager.Comment("executing step \'call GetTaskByStatus(New,CorrectHeader)\'");
            temp760 = this.ICatalogWebServiceAdapterInstance.GetTaskByStatus(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1521\'");
            this.Manager.Comment("checking step \'return GetTaskByStatus/\"NoError\"\'");
            this.Manager.Assert((temp760 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetTaskByStatus, state S1521)", TestManagerHelpers.Describe(temp760)));
            this.Manager.Comment("reaching state \'S2496\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1522
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1522() {
            this.Manager.BeginTest("FullTestSuitePart1S1522");
            this.Manager.Comment("reaching state \'S1522\'");
            string temp761;
            this.Manager.Comment("executing step \'call GetUserTypeArray(CorrectHeader)\'");
            temp761 = this.ICatalogWebServiceAdapterInstance.GetUserTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1523\'");
            this.Manager.Comment("checking step \'return GetUserTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp761 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetUserTypeArray, state S1523)", TestManagerHelpers.Describe(temp761)));
            this.Manager.Comment("reaching state \'S2497\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1524
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1524() {
            this.Manager.BeginTest("FullTestSuitePart1S1524");
            this.Manager.Comment("reaching state \'S1524\'");
            string temp762;
            this.Manager.Comment("executing step \'call GetVideo(Existing,CorrectHeader)\'");
            temp762 = this.ICatalogWebServiceAdapterInstance.GetVideo(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1525\'");
            this.Manager.Comment("checking step \'return GetVideo/\"NoError\"\'");
            this.Manager.Assert((temp762 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideo, state S1525)", TestManagerHelpers.Describe(temp762)));
            this.Manager.Comment("reaching state \'S2498\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1526
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1526() {
            this.Manager.BeginTest("FullTestSuitePart1S1526");
            this.Manager.Comment("reaching state \'S1526\'");
            string temp763;
            this.Manager.Comment("executing step \'call GetVideo(New,CorrectHeader)\'");
            temp763 = this.ICatalogWebServiceAdapterInstance.GetVideo(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1527\'");
            this.Manager.Comment("checking step \'return GetVideo/\"NoError\"\'");
            this.Manager.Assert((temp763 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideo, state S1527)", TestManagerHelpers.Describe(temp763)));
            this.Manager.Comment("reaching state \'S2499\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1528
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1528() {
            this.Manager.BeginTest("FullTestSuitePart1S1528");
            this.Manager.Comment("reaching state \'S1528\'");
            string temp764;
            this.Manager.Comment("executing step \'call GetVideoDefinitionArray(CorrectHeader)\'");
            temp764 = this.ICatalogWebServiceAdapterInstance.GetVideoDefinitionArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1529\'");
            this.Manager.Comment("checking step \'return GetVideoDefinitionArray/\"NoError\"\'");
            this.Manager.Assert((temp764 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoDefinitionArray, state S152" +
                        "9)", TestManagerHelpers.Describe(temp764)));
            this.Manager.Comment("reaching state \'S2500\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1530
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1530() {
            this.Manager.BeginTest("FullTestSuitePart1S1530");
            this.Manager.Comment("reaching state \'S1530\'");
            string temp765;
            this.Manager.Comment("executing step \'call GetVideoEncodingArray(CorrectHeader)\'");
            temp765 = this.ICatalogWebServiceAdapterInstance.GetVideoEncodingArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1531\'");
            this.Manager.Comment("checking step \'return GetVideoEncodingArray/\"NoError\"\'");
            this.Manager.Assert((temp765 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoEncodingArray, state S1531)" +
                        "", TestManagerHelpers.Describe(temp765)));
            this.Manager.Comment("reaching state \'S2501\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1532
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1532() {
            this.Manager.BeginTest("FullTestSuitePart1S1532");
            this.Manager.Comment("reaching state \'S1532\'");
            string temp766;
            this.Manager.Comment("executing step \'call GetVideoSeason(Existing,CorrectHeader)\'");
            temp766 = this.ICatalogWebServiceAdapterInstance.GetVideoSeason(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1533\'");
            this.Manager.Comment("checking step \'return GetVideoSeason/\"NoError\"\'");
            this.Manager.Assert((temp766 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoSeason, state S1533)", TestManagerHelpers.Describe(temp766)));
            this.Manager.Comment("reaching state \'S2502\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1534
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1534() {
            this.Manager.BeginTest("FullTestSuitePart1S1534");
            this.Manager.Comment("reaching state \'S1534\'");
            string temp767;
            this.Manager.Comment("executing step \'call GetVideoSeason(New,CorrectHeader)\'");
            temp767 = this.ICatalogWebServiceAdapterInstance.GetVideoSeason(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1535\'");
            this.Manager.Comment("checking step \'return GetVideoSeason/\"NoError\"\'");
            this.Manager.Assert((temp767 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoSeason, state S1535)", TestManagerHelpers.Describe(temp767)));
            this.Manager.Comment("reaching state \'S2503\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1536
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1536() {
            this.Manager.BeginTest("FullTestSuitePart1S1536");
            this.Manager.Comment("reaching state \'S1536\'");
            string temp768;
            this.Manager.Comment("executing step \'call GetVideoSeries(Existing,CorrectHeader)\'");
            temp768 = this.ICatalogWebServiceAdapterInstance.GetVideoSeries(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1537\'");
            this.Manager.Comment("checking step \'return GetVideoSeries/\"NoError\"\'");
            this.Manager.Assert((temp768 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoSeries, state S1537)", TestManagerHelpers.Describe(temp768)));
            this.Manager.Comment("reaching state \'S2504\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1538
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1538() {
            this.Manager.BeginTest("FullTestSuitePart1S1538");
            this.Manager.Comment("reaching state \'S1538\'");
            string temp769;
            this.Manager.Comment("executing step \'call GetVideoSeries(New,CorrectHeader)\'");
            temp769 = this.ICatalogWebServiceAdapterInstance.GetVideoSeries(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1539\'");
            this.Manager.Comment("checking step \'return GetVideoSeries/\"NoError\"\'");
            this.Manager.Assert((temp769 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoSeries, state S1539)", TestManagerHelpers.Describe(temp769)));
            this.Manager.Comment("reaching state \'S2505\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1540
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1540() {
            this.Manager.BeginTest("FullTestSuitePart1S1540");
            this.Manager.Comment("reaching state \'S1540\'");
            string temp770;
            this.Manager.Comment("executing step \'call GetVisibilityLevelArray(CorrectHeader)\'");
            temp770 = this.ICatalogWebServiceAdapterInstance.GetVisibilityLevelArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1541\'");
            this.Manager.Comment("checking step \'return GetVisibilityLevelArray/\"NoError\"\'");
            this.Manager.Assert((temp770 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVisibilityLevelArray, state S154" +
                        "1)", TestManagerHelpers.Describe(temp770)));
            this.Manager.Comment("reaching state \'S2506\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1542
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1542() {
            this.Manager.BeginTest("FullTestSuitePart1S1542");
            this.Manager.Comment("reaching state \'S1542\'");
            string temp771;
            this.Manager.Comment("executing step \'call GetVisibilityStatusArray(CorrectHeader)\'");
            temp771 = this.ICatalogWebServiceAdapterInstance.GetVisibilityStatusArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1543\'");
            this.Manager.Comment("checking step \'return GetVisibilityStatusArray/\"NoError\"\'");
            this.Manager.Assert((temp771 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVisibilityStatusArray, state S15" +
                        "43)", TestManagerHelpers.Describe(temp771)));
            this.Manager.Comment("reaching state \'S2507\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1544
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1544() {
            this.Manager.BeginTest("FullTestSuitePart1S1544");
            this.Manager.Comment("reaching state \'S1544\'");
            string temp772;
            this.Manager.Comment("executing step \'call GetAvailableEntityId(CorrectHeader)\'");
            temp772 = this.ICatalogWebServiceAdapterInstance.GetAvailableEntityId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1545\'");
            this.Manager.Comment("checking step \'return GetAvailableEntityId/\"NoError\"\'");
            this.Manager.Assert((temp772 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableEntityId, state S1545)", TestManagerHelpers.Describe(temp772)));
            this.Manager.Comment("reaching state \'S2508\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1546
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1546() {
            this.Manager.BeginTest("FullTestSuitePart1S1546");
            this.Manager.Comment("reaching state \'S1546\'");
            string temp773;
            this.Manager.Comment("executing step \'call GetAvailableCategoryId(CorrectHeader)\'");
            temp773 = this.ICatalogWebServiceAdapterInstance.GetAvailableCategoryId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1547\'");
            this.Manager.Comment("checking step \'return GetAvailableCategoryId/\"NoError\"\'");
            this.Manager.Assert((temp773 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableCategoryId, state S1547" +
                        ")", TestManagerHelpers.Describe(temp773)));
            this.Manager.Comment("reaching state \'S2509\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1548
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1548() {
            this.Manager.BeginTest("FullTestSuitePart1S1548");
            this.Manager.Comment("reaching state \'S1548\'");
            string temp774;
            this.Manager.Comment("executing step \'call GetAvailableCategorySystemId(CorrectHeader)\'");
            temp774 = this.ICatalogWebServiceAdapterInstance.GetAvailableCategorySystemId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1549\'");
            this.Manager.Comment("checking step \'return GetAvailableCategorySystemId/\"NoError\"\'");
            this.Manager.Assert((temp774 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableCategorySystemId, state" +
                        " S1549)", TestManagerHelpers.Describe(temp774)));
            this.Manager.Comment("reaching state \'S2510\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1550
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1550() {
            this.Manager.BeginTest("FullTestSuitePart1S1550");
            this.Manager.Comment("reaching state \'S1550\'");
            string temp775;
            this.Manager.Comment("executing step \'call GetAvailableRatingSystemId(CorrectHeader)\'");
            temp775 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingSystemId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1551\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingSystemId/\"NoError\"\'");
            this.Manager.Assert((temp775 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableRatingSystemId, state S" +
                        "1551)", TestManagerHelpers.Describe(temp775)));
            this.Manager.Comment("reaching state \'S2511\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1552
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1552() {
            this.Manager.BeginTest("FullTestSuitePart1S1552");
            this.Manager.Comment("reaching state \'S1552\'");
            string temp776;
            this.Manager.Comment("executing step \'call GetAvailableRatingValueId(CorrectHeader)\'");
            temp776 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingValueId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1553\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingValueId/\"NoError\"\'");
            this.Manager.Assert((temp776 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableRatingValueId, state S1" +
                        "553)", TestManagerHelpers.Describe(temp776)));
            this.Manager.Comment("reaching state \'S2512\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1554
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1554() {
            this.Manager.BeginTest("FullTestSuitePart1S1554");
            this.Manager.Comment("reaching state \'S1554\'");
            string temp777;
            this.Manager.Comment("executing step \'call GetAvailableRatingDescriptorId(CorrectHeader)\'");
            temp777 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingDescriptorId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1555\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingDescriptorId/\"NoError\"\'");
            this.Manager.Assert((temp777 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableRatingDescriptorId, sta" +
                        "te S1555)", TestManagerHelpers.Describe(temp777)));
            this.Manager.Comment("reaching state \'S2513\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1556
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1556() {
            this.Manager.BeginTest("FullTestSuitePart1S1556");
            this.Manager.Comment("reaching state \'S1556\'");
            string temp778;
            this.Manager.Comment("executing step \'call GetAvailableLicenseTypeId(CorrectHeader)\'");
            temp778 = this.ICatalogWebServiceAdapterInstance.GetAvailableLicenseTypeId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1557\'");
            this.Manager.Comment("checking step \'return GetAvailableLicenseTypeId/\"NoError\"\'");
            this.Manager.Assert((temp778 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableLicenseTypeId, state S1" +
                        "557)", TestManagerHelpers.Describe(temp778)));
            this.Manager.Comment("reaching state \'S2514\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1558
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1558() {
            this.Manager.BeginTest("FullTestSuitePart1S1558");
            this.Manager.Comment("reaching state \'S1558\'");
            string temp779;
            this.Manager.Comment("executing step \'call GetCatalogId(CorrectHeader)\'");
            temp779 = this.ICatalogWebServiceAdapterInstance.GetCatalogId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1559\'");
            this.Manager.Comment("checking step \'return GetCatalogId/\"NoError\"\'");
            this.Manager.Assert((temp779 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCatalogId, state S1559)", TestManagerHelpers.Describe(temp779)));
            this.Manager.Comment("reaching state \'S2515\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1560
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1560() {
            this.Manager.BeginTest("FullTestSuitePart1S1560");
            this.Manager.Comment("reaching state \'S1560\'");
            string temp780;
            this.Manager.Comment("executing step \'call GetExternalId(CorrectHeader)\'");
            temp780 = this.ICatalogWebServiceAdapterInstance.GetExternalId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1561\'");
            this.Manager.Comment("checking step \'return GetExternalId/\"NoError\"\'");
            this.Manager.Assert((temp780 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalId, state S1561)", TestManagerHelpers.Describe(temp780)));
            this.Manager.Comment("reaching state \'S2516\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1562
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1562() {
            this.Manager.BeginTest("FullTestSuitePart1S1562");
            this.Manager.Comment("reaching state \'S1562\'");
            string temp781;
            this.Manager.Comment("executing step \'call GetExternalFeedSource(CorrectHeader)\'");
            temp781 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedSource(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1563\'");
            this.Manager.Comment("checking step \'return GetExternalFeedSource/\"NoError\"\'");
            this.Manager.Assert((temp781 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalFeedSource, state S1563)" +
                        "", TestManagerHelpers.Describe(temp781)));
            this.Manager.Comment("reaching state \'S2517\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1564
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1564() {
            this.Manager.BeginTest("FullTestSuitePart1S1564");
            this.Manager.Comment("reaching state \'S1564\'");
            string temp782;
            this.Manager.Comment("executing step \'call GetExternalFeedMappingObject(CorrectHeader)\'");
            temp782 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedMappingObject(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1565\'");
            this.Manager.Comment("checking step \'return GetExternalFeedMappingObject/\"NoError\"\'");
            this.Manager.Assert((temp782 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalFeedMappingObject, state" +
                        " S1565)", TestManagerHelpers.Describe(temp782)));
            this.Manager.Comment("reaching state \'S2518\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1566
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1566() {
            this.Manager.BeginTest("FullTestSuitePart1S1566");
            this.Manager.Comment("reaching state \'S1566\'");
            string temp783;
            this.Manager.Comment("executing step \'call SaveExternalFeedMapping1(CorrectHeader)\'");
            temp783 = this.ICatalogWebServiceAdapterInstance.SaveExternalFeedMapping1(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1567\'");
            this.Manager.Comment("checking step \'return SaveExternalFeedMapping1/\"NoError\"\'");
            this.Manager.Assert((temp783 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveExternalFeedMapping1, state S15" +
                        "67)", TestManagerHelpers.Describe(temp783)));
            this.Manager.Comment("reaching state \'S2519\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1568
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1568() {
            this.Manager.BeginTest("FullTestSuitePart1S1568");
            this.Manager.Comment("reaching state \'S1568\'");
            string temp784;
            this.Manager.Comment("executing step \'call SaveExternalFeedMapping2()\'");
            temp784 = this.ICatalogWebServiceAdapterInstance.SaveExternalFeedMapping2();
            this.Manager.Comment("reaching state \'S1569\'");
            this.Manager.Comment("checking step \'return SaveExternalFeedMapping2/\"NoError\"\'");
            this.Manager.Assert((temp784 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveExternalFeedMapping2, state S15" +
                        "69)", TestManagerHelpers.Describe(temp784)));
            this.Manager.Comment("reaching state \'S2520\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1570
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1570() {
            this.Manager.BeginTest("FullTestSuitePart1S1570");
            this.Manager.Comment("reaching state \'S1570\'");
            string temp785;
            this.Manager.Comment("executing step \'call SaveExternalFeedMapping3()\'");
            temp785 = this.ICatalogWebServiceAdapterInstance.SaveExternalFeedMapping3();
            this.Manager.Comment("reaching state \'S1571\'");
            this.Manager.Comment("checking step \'return SaveExternalFeedMapping3/\"NoError\"\'");
            this.Manager.Assert((temp785 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveExternalFeedMapping3, state S15" +
                        "71)", TestManagerHelpers.Describe(temp785)));
            this.Manager.Comment("reaching state \'S2521\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1572
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1572() {
            this.Manager.BeginTest("FullTestSuitePart1S1572");
            this.Manager.Comment("reaching state \'S1572\'");
            string temp786;
            this.Manager.Comment("executing step \'call Ping(CorrectHeader)\'");
            temp786 = this.ICatalogWebServiceAdapterInstance.Ping(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1573\'");
            this.Manager.Comment("checking step \'return Ping/\"NoError\"\'");
            this.Manager.Assert((temp786 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of Ping, state S1573)", TestManagerHelpers.Describe(temp786)));
            this.Manager.Comment("reaching state \'S2522\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1574
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1574() {
            this.Manager.BeginTest("FullTestSuitePart1S1574");
            this.Manager.Comment("reaching state \'S1574\'");
            string temp787;
            this.Manager.Comment("executing step \'call PurgeTaskQueue(CorrectHeader)\'");
            temp787 = this.ICatalogWebServiceAdapterInstance.PurgeTaskQueue(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1575\'");
            this.Manager.Comment("checking step \'return PurgeTaskQueue/\"NoError\"\'");
            this.Manager.Assert((temp787 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of PurgeTaskQueue, state S1575)", TestManagerHelpers.Describe(temp787)));
            this.Manager.Comment("reaching state \'S2523\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1576
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1576() {
            this.Manager.BeginTest("FullTestSuitePart1S1576");
            this.Manager.Comment("reaching state \'S1576\'");
            string temp788;
            this.Manager.Comment("executing step \'call GetPaymentMethod(Existing,CorrectHeader)\'");
            temp788 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethod(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1577\'");
            this.Manager.Comment("checking step \'return GetPaymentMethod/\"NoError\"\'");
            this.Manager.Assert((temp788 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPaymentMethod, state S1577)", TestManagerHelpers.Describe(temp788)));
            this.Manager.Comment("reaching state \'S2524\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1578
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1578() {
            this.Manager.BeginTest("FullTestSuitePart1S1578");
            this.Manager.Comment("reaching state \'S1578\'");
            string temp789;
            this.Manager.Comment("executing step \'call GetPaymentMethod(New,CorrectHeader)\'");
            temp789 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethod(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1579\'");
            this.Manager.Comment("checking step \'return GetPaymentMethod/\"NoError\"\'");
            this.Manager.Assert((temp789 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPaymentMethod, state S1579)", TestManagerHelpers.Describe(temp789)));
            this.Manager.Comment("reaching state \'S2525\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1580
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1580() {
            this.Manager.BeginTest("FullTestSuitePart1S1580");
            this.Manager.Comment("reaching state \'S1580\'");
            string temp790;
            this.Manager.Comment("executing step \'call GetPaymentMethodArray(CorrectHeader)\'");
            temp790 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethodArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1581\'");
            this.Manager.Comment("checking step \'return GetPaymentMethodArray/\"NoError\"\'");
            this.Manager.Assert((temp790 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPaymentMethodArray, state S1581)" +
                        "", TestManagerHelpers.Describe(temp790)));
            this.Manager.Comment("reaching state \'S2526\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1582
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1582() {
            this.Manager.BeginTest("FullTestSuitePart1S1582");
            this.Manager.Comment("reaching state \'S1582\'");
            string temp791;
            this.Manager.Comment("executing step \'call GetExternalFeedSourceArray(CorrectHeader)\'");
            temp791 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedSourceArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1583\'");
            this.Manager.Comment("checking step \'return GetExternalFeedSourceArray/\"NoError\"\'");
            this.Manager.Assert((temp791 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalFeedSourceArray, state S" +
                        "1583)", TestManagerHelpers.Describe(temp791)));
            this.Manager.Comment("reaching state \'S2527\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1584
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1584() {
            this.Manager.BeginTest("FullTestSuitePart1S1584");
            this.Manager.Comment("reaching state \'S1584\'");
            string temp792;
            this.Manager.Comment("executing step \'call GetExternalFeedMappingObjectArray(CorrectHeader)\'");
            temp792 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedMappingObjectArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1585\'");
            this.Manager.Comment("checking step \'return GetExternalFeedMappingObjectArray/\"NoError\"\'");
            this.Manager.Assert((temp792 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalFeedMappingObjectArray, " +
                        "state S1585)", TestManagerHelpers.Describe(temp792)));
            this.Manager.Comment("reaching state \'S2528\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1586
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1586() {
            this.Manager.BeginTest("FullTestSuitePart1S1586");
            this.Manager.Comment("reaching state \'S1586\'");
            string temp793;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length1,CorrectHeader)\'");
            temp793 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1587\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp793 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1587)", TestManagerHelpers.Describe(temp793)));
            this.Manager.Comment("reaching state \'S2529\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1588
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1588() {
            this.Manager.BeginTest("FullTestSuitePart1S1588");
            this.Manager.Comment("reaching state \'S1588\'");
            string temp794;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length0,CorrectHeader)\'");
            temp794 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1589\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp794 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1589)", TestManagerHelpers.Describe(temp794)));
            this.Manager.Comment("reaching state \'S2530\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1590
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1590() {
            this.Manager.BeginTest("FullTestSuitePart1S1590");
            this.Manager.Comment("reaching state \'S1590\'");
            string temp795;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length0,CorrectHeader)\'");
            temp795 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1591\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp795 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1591)", TestManagerHelpers.Describe(temp795)));
            this.Manager.Comment("reaching state \'S2531\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1592
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1592() {
            this.Manager.BeginTest("FullTestSuitePart1S1592");
            this.Manager.Comment("reaching state \'S1592\'");
            string temp796;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length1,CorrectHeader)\'");
            temp796 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1593\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp796 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1593)", TestManagerHelpers.Describe(temp796)));
            this.Manager.Comment("reaching state \'S2532\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1594
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1594() {
            this.Manager.BeginTest("FullTestSuitePart1S1594");
            this.Manager.Comment("reaching state \'S1594\'");
            string temp797;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length0,CorrectHeader)\'");
            temp797 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1595\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp797 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1595)", TestManagerHelpers.Describe(temp797)));
            this.Manager.Comment("reaching state \'S2533\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1596
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1596() {
            this.Manager.BeginTest("FullTestSuitePart1S1596");
            this.Manager.Comment("reaching state \'S1596\'");
            string temp798;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length1,CorrectHeader)\'");
            temp798 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1597\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp798 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1597)", TestManagerHelpers.Describe(temp798)));
            this.Manager.Comment("reaching state \'S2534\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1598
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1598() {
            this.Manager.BeginTest("FullTestSuitePart1S1598");
            this.Manager.Comment("reaching state \'S1598\'");
            string temp799;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length1,CorrectHeader)\'");
            temp799 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1599\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp799 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1599)", TestManagerHelpers.Describe(temp799)));
            this.Manager.Comment("reaching state \'S2535\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1600
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1600() {
            this.Manager.BeginTest("FullTestSuitePart1S1600");
            this.Manager.Comment("reaching state \'S1600\'");
            string temp800;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length500,CorrectHeader)\'");
            temp800 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1601\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp800 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1601)", TestManagerHelpers.Describe(temp800)));
            this.Manager.Comment("reaching state \'S2536\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1602
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1602() {
            this.Manager.BeginTest("FullTestSuitePart1S1602");
            this.Manager.Comment("reaching state \'S1602\'");
            string temp801;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length500,CorrectHeader)\'");
            temp801 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1603\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp801 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1603)", TestManagerHelpers.Describe(temp801)));
            this.Manager.Comment("reaching state \'S2537\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1604
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1604() {
            this.Manager.BeginTest("FullTestSuitePart1S1604");
            this.Manager.Comment("reaching state \'S1604\'");
            string temp802;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length500,CorrectHeader)\'");
            temp802 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1605\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp802 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1605)", TestManagerHelpers.Describe(temp802)));
            this.Manager.Comment("reaching state \'S2538\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1606
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1606() {
            this.Manager.BeginTest("FullTestSuitePart1S1606");
            this.Manager.Comment("reaching state \'S1606\'");
            string temp803;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length1,CorrectHeader)\'");
            temp803 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1607\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp803 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1607)", TestManagerHelpers.Describe(temp803)));
            this.Manager.Comment("reaching state \'S2539\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1608
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1608() {
            this.Manager.BeginTest("FullTestSuitePart1S1608");
            this.Manager.Comment("reaching state \'S1608\'");
            string temp804;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length1,CorrectHeader)\'");
            temp804 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1609\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp804 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1609)", TestManagerHelpers.Describe(temp804)));
            this.Manager.Comment("reaching state \'S2540\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1610
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1610() {
            this.Manager.BeginTest("FullTestSuitePart1S1610");
            this.Manager.Comment("reaching state \'S1610\'");
            string temp805;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length500,CorrectHeader)\'");
            temp805 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1611\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp805 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1611)", TestManagerHelpers.Describe(temp805)));
            this.Manager.Comment("reaching state \'S2541\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1612
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1612() {
            this.Manager.BeginTest("FullTestSuitePart1S1612");
            this.Manager.Comment("reaching state \'S1612\'");
            string temp806;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length500,CorrectHeader)\'");
            temp806 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1613\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp806 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1613)", TestManagerHelpers.Describe(temp806)));
            this.Manager.Comment("reaching state \'S2542\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1614
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1614() {
            this.Manager.BeginTest("FullTestSuitePart1S1614");
            this.Manager.Comment("reaching state \'S1614\'");
            string temp807;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length251,CorrectHeader)\'");
            temp807 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1615\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp807 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1615)", TestManagerHelpers.Describe(temp807)));
            this.Manager.Comment("reaching state \'S2543\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1616
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1616() {
            this.Manager.BeginTest("FullTestSuitePart1S1616");
            this.Manager.Comment("reaching state \'S1616\'");
            string temp808;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length500,CorrectHeader)\'");
            temp808 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1617\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp808 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1617)", TestManagerHelpers.Describe(temp808)));
            this.Manager.Comment("reaching state \'S2544\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1618
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1618() {
            this.Manager.BeginTest("FullTestSuitePart1S1618");
            this.Manager.Comment("reaching state \'S1618\'");
            string temp809;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length251,CorrectHeader)\'");
            temp809 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1619\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp809 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1619)", TestManagerHelpers.Describe(temp809)));
            this.Manager.Comment("reaching state \'S2545\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1620
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1620() {
            this.Manager.BeginTest("FullTestSuitePart1S1620");
            this.Manager.Comment("reaching state \'S1620\'");
            string temp810;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length0,CorrectHeader)\'");
            temp810 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1621\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp810 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1621)", TestManagerHelpers.Describe(temp810)));
            this.Manager.Comment("reaching state \'S2546\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1622
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1622() {
            this.Manager.BeginTest("FullTestSuitePart1S1622");
            this.Manager.Comment("reaching state \'S1622\'");
            string temp811;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length251,CorrectHeader)\'");
            temp811 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1623\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp811 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1623)", TestManagerHelpers.Describe(temp811)));
            this.Manager.Comment("reaching state \'S2547\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1624
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1624() {
            this.Manager.BeginTest("FullTestSuitePart1S1624");
            this.Manager.Comment("reaching state \'S1624\'");
            string temp812;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length251,CorrectHeader)\'");
            temp812 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1625\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp812 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1625)", TestManagerHelpers.Describe(temp812)));
            this.Manager.Comment("reaching state \'S2548\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1626
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1626() {
            this.Manager.BeginTest("FullTestSuitePart1S1626");
            this.Manager.Comment("reaching state \'S1626\'");
            string temp813;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length0,CorrectHeader)\'");
            temp813 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1627\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp813 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1627)", TestManagerHelpers.Describe(temp813)));
            this.Manager.Comment("reaching state \'S2549\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1628
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1628() {
            this.Manager.BeginTest("FullTestSuitePart1S1628");
            this.Manager.Comment("reaching state \'S1628\'");
            string temp814;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length0,CorrectHeader)\'");
            temp814 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1629\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp814 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1629)", TestManagerHelpers.Describe(temp814)));
            this.Manager.Comment("reaching state \'S2550\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1630
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1630() {
            this.Manager.BeginTest("FullTestSuitePart1S1630");
            this.Manager.Comment("reaching state \'S1630\'");
            string temp815;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length251,CorrectHeader)\'");
            temp815 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1631\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp815 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1631)", TestManagerHelpers.Describe(temp815)));
            this.Manager.Comment("reaching state \'S2551\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1632
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1632() {
            this.Manager.BeginTest("FullTestSuitePart1S1632");
            this.Manager.Comment("reaching state \'S1632\'");
            string temp816;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length251,CorrectHeader)\'");
            temp816 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1633\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp816 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1633)", TestManagerHelpers.Describe(temp816)));
            this.Manager.Comment("reaching state \'S2552\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1634
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1634() {
            this.Manager.BeginTest("FullTestSuitePart1S1634");
            this.Manager.Comment("reaching state \'S1634\'");
            string temp817;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length250,CorrectHeader)\'");
            temp817 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1635\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp817 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1635)", TestManagerHelpers.Describe(temp817)));
            this.Manager.Comment("reaching state \'S2553\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1636
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1636() {
            this.Manager.BeginTest("FullTestSuitePart1S1636");
            this.Manager.Comment("reaching state \'S1636\'");
            string temp818;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length250,CorrectHeader)\'");
            temp818 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1637\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp818 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1637)", TestManagerHelpers.Describe(temp818)));
            this.Manager.Comment("reaching state \'S2554\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1638
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1638() {
            this.Manager.BeginTest("FullTestSuitePart1S1638");
            this.Manager.Comment("reaching state \'S1638\'");
            string temp819;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length250,CorrectHeader)\'");
            temp819 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1639\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp819 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1639)", TestManagerHelpers.Describe(temp819)));
            this.Manager.Comment("reaching state \'S2555\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1640
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1640() {
            this.Manager.BeginTest("FullTestSuitePart1S1640");
            this.Manager.Comment("reaching state \'S1640\'");
            string temp820;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length250,CorrectHeader)\'");
            temp820 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1641\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp820 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1641)", TestManagerHelpers.Describe(temp820)));
            this.Manager.Comment("reaching state \'S2556\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1642
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1642() {
            this.Manager.BeginTest("FullTestSuitePart1S1642");
            this.Manager.Comment("reaching state \'S1642\'");
            string temp821;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length250,CorrectHeader)\'");
            temp821 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1643\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp821 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1643)", TestManagerHelpers.Describe(temp821)));
            this.Manager.Comment("reaching state \'S2557\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1644
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1644() {
            this.Manager.BeginTest("FullTestSuitePart1S1644");
            this.Manager.Comment("reaching state \'S1644\'");
            string temp822;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length250,CorrectHeader)\'");
            temp822 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1645\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp822 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S1645)", TestManagerHelpers.Describe(temp822)));
            this.Manager.Comment("reaching state \'S2558\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1646
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1646() {
            this.Manager.BeginTest("FullTestSuitePart1S1646");
            this.Manager.Comment("reaching state \'S1646\'");
            string temp823;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length0,CorrectHeader)\'");
            temp823 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1647\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp823 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1647)", TestManagerHelpers.Describe(temp823)));
            this.Manager.Comment("reaching state \'S2559\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1648
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1648() {
            this.Manager.BeginTest("FullTestSuitePart1S1648");
            this.Manager.Comment("reaching state \'S1648\'");
            string temp824;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length250,CorrectHeader)\'");
            temp824 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1649\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp824 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1649)", TestManagerHelpers.Describe(temp824)));
            this.Manager.Comment("reaching state \'S2560\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1650
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1650() {
            this.Manager.BeginTest("FullTestSuitePart1S1650");
            this.Manager.Comment("reaching state \'S1650\'");
            string temp825;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length250,CorrectHeader)\'");
            temp825 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1651\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp825 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1651)", TestManagerHelpers.Describe(temp825)));
            this.Manager.Comment("reaching state \'S2561\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1652
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1652() {
            this.Manager.BeginTest("FullTestSuitePart1S1652");
            this.Manager.Comment("reaching state \'S1652\'");
            string temp826;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length0,CorrectHeader)\'");
            temp826 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1653\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp826 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1653)", TestManagerHelpers.Describe(temp826)));
            this.Manager.Comment("reaching state \'S2562\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1654
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1654() {
            this.Manager.BeginTest("FullTestSuitePart1S1654");
            this.Manager.Comment("reaching state \'S1654\'");
            string temp827;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length500,CorrectHeader)\'");
            temp827 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1655\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp827 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1655)", TestManagerHelpers.Describe(temp827)));
            this.Manager.Comment("reaching state \'S2563\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1656
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1656() {
            this.Manager.BeginTest("FullTestSuitePart1S1656");
            this.Manager.Comment("reaching state \'S1656\'");
            string temp828;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length251,CorrectHeader)\'");
            temp828 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1657\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp828 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1657)", TestManagerHelpers.Describe(temp828)));
            this.Manager.Comment("reaching state \'S2564\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1658
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1658() {
            this.Manager.BeginTest("FullTestSuitePart1S1658");
            this.Manager.Comment("reaching state \'S1658\'");
            string temp829;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length1,CorrectHeader)\'");
            temp829 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1659\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp829 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1659)", TestManagerHelpers.Describe(temp829)));
            this.Manager.Comment("reaching state \'S2565\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1660
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1660() {
            this.Manager.BeginTest("FullTestSuitePart1S1660");
            this.Manager.Comment("reaching state \'S1660\'");
            string temp830;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length500,CorrectHeader)\'");
            temp830 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1661\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp830 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1661)", TestManagerHelpers.Describe(temp830)));
            this.Manager.Comment("reaching state \'S2566\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1662
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1662() {
            this.Manager.BeginTest("FullTestSuitePart1S1662");
            this.Manager.Comment("reaching state \'S1662\'");
            string temp831;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length0,CorrectHeader)\'");
            temp831 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1663\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp831 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1663)", TestManagerHelpers.Describe(temp831)));
            this.Manager.Comment("reaching state \'S2567\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1664
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1664() {
            this.Manager.BeginTest("FullTestSuitePart1S1664");
            this.Manager.Comment("reaching state \'S1664\'");
            string temp832;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length500,CorrectHeader)\'");
            temp832 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1665\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp832 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1665)", TestManagerHelpers.Describe(temp832)));
            this.Manager.Comment("reaching state \'S2568\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1666
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1666() {
            this.Manager.BeginTest("FullTestSuitePart1S1666");
            this.Manager.Comment("reaching state \'S1666\'");
            string temp833;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length250,CorrectHeader)\'");
            temp833 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1667\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp833 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1667)", TestManagerHelpers.Describe(temp833)));
            this.Manager.Comment("reaching state \'S2569\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1668
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1668() {
            this.Manager.BeginTest("FullTestSuitePart1S1668");
            this.Manager.Comment("reaching state \'S1668\'");
            string temp834;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length251,CorrectHeader)\'");
            temp834 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1669\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp834 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1669)", TestManagerHelpers.Describe(temp834)));
            this.Manager.Comment("reaching state \'S2570\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1670
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1670() {
            this.Manager.BeginTest("FullTestSuitePart1S1670");
            this.Manager.Comment("reaching state \'S1670\'");
            string temp835;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length1,CorrectHeader)\'");
            temp835 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1671\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp835 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1671)", TestManagerHelpers.Describe(temp835)));
            this.Manager.Comment("reaching state \'S2571\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1672
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1672() {
            this.Manager.BeginTest("FullTestSuitePart1S1672");
            this.Manager.Comment("reaching state \'S1672\'");
            string temp836;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length251,CorrectHeader)\'");
            temp836 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1673\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp836 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1673)", TestManagerHelpers.Describe(temp836)));
            this.Manager.Comment("reaching state \'S2572\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1674
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1674() {
            this.Manager.BeginTest("FullTestSuitePart1S1674");
            this.Manager.Comment("reaching state \'S1674\'");
            string temp837;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length1,CorrectHeader)\'");
            temp837 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1675\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp837 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S1675)", TestManagerHelpers.Describe(temp837)));
            this.Manager.Comment("reaching state \'S2573\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1676
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1676() {
            this.Manager.BeginTest("FullTestSuitePart1S1676");
            this.Manager.Comment("reaching state \'S1676\'");
            string temp838;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length251,CorrectHeader)\'");
            temp838 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1677\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp838 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1677)", TestManagerHelpers.Describe(temp838)));
            this.Manager.Comment("reaching state \'S2574\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1678
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1678() {
            this.Manager.BeginTest("FullTestSuitePart1S1678");
            this.Manager.Comment("reaching state \'S1678\'");
            string temp839;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length250,CorrectHeade" +
                    "r)\'");
            temp839 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1679\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp839 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1679)", TestManagerHelpers.Describe(temp839)));
            this.Manager.Comment("reaching state \'S2575\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1680
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1680() {
            this.Manager.BeginTest("FullTestSuitePart1S1680");
            this.Manager.Comment("reaching state \'S1680\'");
            string temp840;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length500,CorrectHeade" +
                    "r)\'");
            temp840 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1681\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp840 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1681)", TestManagerHelpers.Describe(temp840)));
            this.Manager.Comment("reaching state \'S2576\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1682
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1682() {
            this.Manager.BeginTest("FullTestSuitePart1S1682");
            this.Manager.Comment("reaching state \'S1682\'");
            string temp841;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length500,CorrectHead" +
                    "er)\'");
            temp841 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1683\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp841 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1683)", TestManagerHelpers.Describe(temp841)));
            this.Manager.Comment("reaching state \'S2577\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1684
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1684() {
            this.Manager.BeginTest("FullTestSuitePart1S1684");
            this.Manager.Comment("reaching state \'S1684\'");
            string temp842;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length0,CorrectHeader" +
                    ")\'");
            temp842 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1685\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp842 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1685)", TestManagerHelpers.Describe(temp842)));
            this.Manager.Comment("reaching state \'S2578\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1686
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1686() {
            this.Manager.BeginTest("FullTestSuitePart1S1686");
            this.Manager.Comment("reaching state \'S1686\'");
            string temp843;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length0,CorrectHeader)" +
                    "\'");
            temp843 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1687\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp843 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1687)", TestManagerHelpers.Describe(temp843)));
            this.Manager.Comment("reaching state \'S2579\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1688
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1688() {
            this.Manager.BeginTest("FullTestSuitePart1S1688");
            this.Manager.Comment("reaching state \'S1688\'");
            string temp844;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length250,CorrectHead" +
                    "er)\'");
            temp844 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1689\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp844 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1689)", TestManagerHelpers.Describe(temp844)));
            this.Manager.Comment("reaching state \'S2580\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1690
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1690() {
            this.Manager.BeginTest("FullTestSuitePart1S1690");
            this.Manager.Comment("reaching state \'S1690\'");
            string temp845;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length0,CorrectHeader)\'");
            temp845 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1691\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp845 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1691)", TestManagerHelpers.Describe(temp845)));
            this.Manager.Comment("reaching state \'S2581\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1692
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1692() {
            this.Manager.BeginTest("FullTestSuitePart1S1692");
            this.Manager.Comment("reaching state \'S1692\'");
            string temp846;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length1,CorrectHeader" +
                    ")\'");
            temp846 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1693\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp846 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1693)", TestManagerHelpers.Describe(temp846)));
            this.Manager.Comment("reaching state \'S2582\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1694
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1694() {
            this.Manager.BeginTest("FullTestSuitePart1S1694");
            this.Manager.Comment("reaching state \'S1694\'");
            string temp847;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length1,CorrectHeader)" +
                    "\'");
            temp847 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1695\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp847 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1695)", TestManagerHelpers.Describe(temp847)));
            this.Manager.Comment("reaching state \'S2583\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1696
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1696() {
            this.Manager.BeginTest("FullTestSuitePart1S1696");
            this.Manager.Comment("reaching state \'S1696\'");
            string temp848;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length251,CorrectHead" +
                    "er)\'");
            temp848 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1697\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp848 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1697)", TestManagerHelpers.Describe(temp848)));
            this.Manager.Comment("reaching state \'S2584\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1698
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1698() {
            this.Manager.BeginTest("FullTestSuitePart1S1698");
            this.Manager.Comment("reaching state \'S1698\'");
            string temp849;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length251,CorrectHeade" +
                    "r)\'");
            temp849 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1699\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp849 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1699)", TestManagerHelpers.Describe(temp849)));
            this.Manager.Comment("reaching state \'S2585\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1700
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1700() {
            this.Manager.BeginTest("FullTestSuitePart1S1700");
            this.Manager.Comment("reaching state \'S1700\'");
            string temp850;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length250,CorrectHeader)\'");
            temp850 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1701\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp850 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1701)", TestManagerHelpers.Describe(temp850)));
            this.Manager.Comment("reaching state \'S2586\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1702
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1702() {
            this.Manager.BeginTest("FullTestSuitePart1S1702");
            this.Manager.Comment("reaching state \'S1702\'");
            string temp851;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length1,CorrectHeader)\'");
            temp851 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1703\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp851 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1703)", TestManagerHelpers.Describe(temp851)));
            this.Manager.Comment("reaching state \'S2587\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1704
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1704() {
            this.Manager.BeginTest("FullTestSuitePart1S1704");
            this.Manager.Comment("reaching state \'S1704\'");
            string temp852;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length250,CorrectHeader)\'");
            temp852 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1705\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp852 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1705)", TestManagerHelpers.Describe(temp852)));
            this.Manager.Comment("reaching state \'S2588\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1706
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1706() {
            this.Manager.BeginTest("FullTestSuitePart1S1706");
            this.Manager.Comment("reaching state \'S1706\'");
            string temp853;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length1,CorrectHeader)\'");
            temp853 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1707\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp853 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1707)", TestManagerHelpers.Describe(temp853)));
            this.Manager.Comment("reaching state \'S2589\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1708
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1708() {
            this.Manager.BeginTest("FullTestSuitePart1S1708");
            this.Manager.Comment("reaching state \'S1708\'");
            string temp854;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length250,CorrectHeade" +
                    "r)\'");
            temp854 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1709\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp854 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1709)", TestManagerHelpers.Describe(temp854)));
            this.Manager.Comment("reaching state \'S2590\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1710
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1710() {
            this.Manager.BeginTest("FullTestSuitePart1S1710");
            this.Manager.Comment("reaching state \'S1710\'");
            string temp855;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length250,CorrectHea" +
                    "der)\'");
            temp855 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1711\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp855 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1711)", TestManagerHelpers.Describe(temp855)));
            this.Manager.Comment("reaching state \'S2591\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1712
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1712() {
            this.Manager.BeginTest("FullTestSuitePart1S1712");
            this.Manager.Comment("reaching state \'S1712\'");
            string temp856;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length1,CorrectHeade" +
                    "r)\'");
            temp856 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1713\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp856 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1713)", TestManagerHelpers.Describe(temp856)));
            this.Manager.Comment("reaching state \'S2592\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1714
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1714() {
            this.Manager.BeginTest("FullTestSuitePart1S1714");
            this.Manager.Comment("reaching state \'S1714\'");
            string temp857;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length500,CorrectHeader)\'");
            temp857 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1715\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp857 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1715)", TestManagerHelpers.Describe(temp857)));
            this.Manager.Comment("reaching state \'S2593\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1716
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1716() {
            this.Manager.BeginTest("FullTestSuitePart1S1716");
            this.Manager.Comment("reaching state \'S1716\'");
            string temp858;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length1,CorrectHeader)" +
                    "\'");
            temp858 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1717\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp858 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1717)", TestManagerHelpers.Describe(temp858)));
            this.Manager.Comment("reaching state \'S2594\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1718
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1718() {
            this.Manager.BeginTest("FullTestSuitePart1S1718");
            this.Manager.Comment("reaching state \'S1718\'");
            string temp859;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length500,CorrectHeader)\'");
            temp859 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1719\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp859 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1719)", TestManagerHelpers.Describe(temp859)));
            this.Manager.Comment("reaching state \'S2595\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1720
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1720() {
            this.Manager.BeginTest("FullTestSuitePart1S1720");
            this.Manager.Comment("reaching state \'S1720\'");
            string temp860;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length0,CorrectHeader)\'");
            temp860 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1721\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp860 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1721)", TestManagerHelpers.Describe(temp860)));
            this.Manager.Comment("reaching state \'S2596\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1722
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1722() {
            this.Manager.BeginTest("FullTestSuitePart1S1722");
            this.Manager.Comment("reaching state \'S1722\'");
            string temp861;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length251,CorrectHeader)\'");
            temp861 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1723\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp861 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1723)", TestManagerHelpers.Describe(temp861)));
            this.Manager.Comment("reaching state \'S2597\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1724
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1724() {
            this.Manager.BeginTest("FullTestSuitePart1S1724");
            this.Manager.Comment("reaching state \'S1724\'");
            string temp862;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length0,CorrectHeade" +
                    "r)\'");
            temp862 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1725\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp862 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1725)", TestManagerHelpers.Describe(temp862)));
            this.Manager.Comment("reaching state \'S2598\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1726
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1726() {
            this.Manager.BeginTest("FullTestSuitePart1S1726");
            this.Manager.Comment("reaching state \'S1726\'");
            string temp863;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length251,CorrectHea" +
                    "der)\'");
            temp863 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1727\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp863 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1727)", TestManagerHelpers.Describe(temp863)));
            this.Manager.Comment("reaching state \'S2599\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1728
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1728() {
            this.Manager.BeginTest("FullTestSuitePart1S1728");
            this.Manager.Comment("reaching state \'S1728\'");
            string temp864;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length500,CorrectHea" +
                    "der)\'");
            temp864 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1729\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp864 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1729)", TestManagerHelpers.Describe(temp864)));
            this.Manager.Comment("reaching state \'S2600\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1730
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1730() {
            this.Manager.BeginTest("FullTestSuitePart1S1730");
            this.Manager.Comment("reaching state \'S1730\'");
            string temp865;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length0,CorrectHeader)" +
                    "\'");
            temp865 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1731\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp865 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1731)", TestManagerHelpers.Describe(temp865)));
            this.Manager.Comment("reaching state \'S2601\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1732
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1732() {
            this.Manager.BeginTest("FullTestSuitePart1S1732");
            this.Manager.Comment("reaching state \'S1732\'");
            string temp866;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length251,CorrectHeade" +
                    "r)\'");
            temp866 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1733\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp866 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1733)", TestManagerHelpers.Describe(temp866)));
            this.Manager.Comment("reaching state \'S2602\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1734
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart1S1734() {
            this.Manager.BeginTest("FullTestSuitePart1S1734");
            this.Manager.Comment("reaching state \'S1734\'");
            string temp867;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length500,CorrectHeade" +
                    "r)\'");
            temp867 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1735\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp867 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1735)", TestManagerHelpers.Describe(temp867)));
            this.Manager.Comment("reaching state \'S2603\'");
            this.Manager.EndTest();
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FFTPExecutionService\FFTPExecutionService\Execution.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;

namespace FFTPExecutionService
{
    public enum LogLevel
    {
        CriticalError = 0,
        Error = 1,
        Warning = 2,
        Information = 4,
        Debug = 8
    };

    public static class Execution
    {
        // Config to be loaded from XML
        public static Configuration Config;

        // Base folder
        public static string BaseFolder = @"C:\FFTPExecutionService";
        
        // Name of config file
        private static string ConfigurationFile = Path.Combine(BaseFolder, "configuration.xml");

        // internal threads for watching and deploying builds
        internal static Thread BuildWatcherThread;
        internal static Thread DeployAndTestRunnerThread;        

        // Folder to drop results in
        public static string ResultsFileDestinationFolder = string.Format(@"\\mw1855-3\fftp\drop\");
        
        public static void Run(string[] args)
        {
            Thread.CurrentThread.Name = "Main";
            LogText("Initalizing", LogLevel.Information);

            // Load configuration file
            if (File.Exists(ConfigurationFile))
            {
                LogText("Reading configuration file", LogLevel.Information);

                try
                {
                    Config = Configuration.Deserialize(ConfigurationFile);
                }
                catch
                {
                    LogText("Unable to read configuration; exiting", LogLevel.Error);
                    return;
                }

                if (Config == null)
                {
                    LogText("Unable to read configuration; exiting", LogLevel.Error);
                    return;
                }
            }
            else // If one does not exist build from scratch
            {
                LogText("Configuration file does not exist; building one from scratch", LogLevel.Warning);
                BuildConfiguration();
            }

            if (Config.XblobName == null || Config.XblobName == "")
            {
                LogText("No Xblob name specified in configuration; exiting", LogLevel.Error);
                return;
            }

            // Start build watcher thread
            LogText("Kicking off Build Watcher thread", LogLevel.Information);
            BuildWatcherThread = new Thread(BuildWatcher);
            BuildWatcherThread.Start();

            // Start deploy/test runner thread
            LogText("Kicking off Deploy and Test Runner thread", LogLevel.Information);
            DeployAndTestRunnerThread = new Thread(DeployAndTestRunner);
            DeployAndTestRunnerThread.Start();
        }

        /// <summary>
        /// Builds the default configuration file
        /// </summary>
        private static void BuildConfiguration()
        {
            Config = new Configuration()
            {
                BuildWatcherSleepInterval = 60
            };

            /*var bundlesWorkBuild = new Build("XONLINE_BUNDLES_WORK", "BUNDLES_WORK", "Bundles Work Branch", @"\\edge-svcs\release\xonline\BUNDLES_WORK\", "Latest.tst");
            bundlesWorkBuild.TestSuites.Add("ProductManagementTest");
            bundlesWorkBuild.TestSuites.Add("OfferManagementTest");
            Config.TrackedBuilds.Add(bundlesWorkBuild);

            var mobilePDLCWorkBuild = new Build("XONLINE_MOBILEPDLC_WORK", "MOBILEPDLC_WORK", "Mobile PDLC Work Branch", @"\\edge-svcs\release\xonline\MOBILEPDLC_WORK\", "Latest.tst");
            mobilePDLCWorkBuild.TestSuites.Add("ProductManagementTest");
            mobilePDLCWorkBuild.TestSuites.Add("OfferManagementTest");
            Config.TrackedBuilds.Add(mobilePDLCWorkBuild);*/

            var xsrBuild = new Build("XONLINE_MAR11XSR", "MAR11XSR", "Current XSR Branch", @"\\edge-svcs\release\xonline\MAR11XSR\", "Latest.tst");
            xsrBuild.TestSuites.Add(new TestSuiteInformation { Name = "ProductManagementTest", IsReportingEnabled = false, Type = "STF" });
            xsrBuild.TestSuites.Add(new TestSuiteInformation { Name = "OfferManagementTest", IsReportingEnabled = false, Type = "STF" });
            xsrBuild.TestSuites.Add(new TestSuiteInformation { Name = "MarketplaceCatalogTests", IsReportingEnabled = false, Type = "STF" });
            xsrBuild.TestSuites.Add(new TestSuiteInformation { Name = "CatalogQueryTests", IsReportingEnabled = false, Type = "STF" });
            xsrBuild.TestSuites.Add(new TestSuiteInformation { Name = "RateMediaFDTest", IsReportingEnabled = false, Type = "STF" });
            Config.TrackedBuilds.Add(xsrBuild);

            var mainBuild = new Build("XONLINE_MAIN", "MAIN", "Main Branch", @"\\edge-svcs\release\xonline\MAIN\", "Latest.tst");
            mainBuild.TestSuites.Add(new TestSuiteInformation { Name = "ProductManagementTest", Type = "STF" });
            mainBuild.TestSuites.Add(new TestSuiteInformation { Name = "OfferManagementTest", Type = "STF" });
            mainBuild.TestSuites.Add(new TestSuiteInformation { Name = "CatalogQueryTests", Type = "STF" });
            mainBuild.TestSuites.Add(new TestSuiteInformation { Name = "MarketplaceCatalogTests", IsReportingEnabled = false, Type = "STF" });
            mainBuild.TestSuites.Add(new TestSuiteInformation { Name = "RateMediaFDTest", IsReportingEnabled = false, Type = "STF" });

            Config.TrackedBuilds.Add(mainBuild);

            var fastBrowseWorkBuild = new Build("XONLINE_FASTBROWSE_WORK", "FASTBROWSE_WORK", "Fast Browse Work Branch", @"\\edge-svcs\release\xonline\FASTBROWSE_WORK\", "Latest.tst");
            fastBrowseWorkBuild.TestSuites.Add(new TestSuiteInformation { Name = "CatalogQueryTests", Type = "STF" });
            fastBrowseWorkBuild.TestSuites.Add(new TestSuiteInformation { Name = "MarketplaceCatalogTests", IsReportingEnabled = false, Type = "STF" });
            Config.TrackedBuilds.Add(fastBrowseWorkBuild);

            var userRatingsWork = new Build("XONLINE_USERRATINGS_WORK", "USERRATINGS_WORK", "User Ratings Work Branch", @"\\edge-svcs\release\xonline\USERRATINGS_WORK\", "Latest.tst");
            userRatingsWork.TestSuites.Add(new TestSuiteInformation { Name = "RateMediaFDTest", IsReportingEnabled = false, Type = "STF" });
            Config.TrackedBuilds.Add(userRatingsWork);

            SerializeConfiguration();
        }

        /// <summary>
        /// Serializes the configuration file to disk
        /// </summary>
        private static void SerializeConfiguration()
        {
            lock (Config)
            {
                Config.Serialize(ConfigurationFile);
            }
        }

        // Create a new log writer stream
        private static TextWriter LogWriter = new StreamWriter(Path.Combine(BaseFolder, "FFTPExecutionService.log"), true);

        /// <summary>
        /// Log text to the log writer
        /// </summary>
        /// <param name="logMessage">Message to write</param>
        /// <param name="logLevel">Logging level</param>
        public static void LogText(string logMessage, LogLevel logLevel)
        {
            lock (LogWriter)
            {
                var now = DateTime.Now;
                string line = now.ToShortDateString() + " " + now.ToLongTimeString() + "\t" + Thread.CurrentThread.Name + "\t" + logLevel.ToString() + "\t" + logMessage;
                Console.WriteLine(line);
                LogWriter.WriteLine(line);
                LogWriter.Flush();
            }
        }

        /// <summary>
        /// Waits on build locations for new builds and queues newly discovered builds for processing
        /// </summary>
        private static void BuildWatcher()
        {
            Thread.CurrentThread.Name = "BuildWatcher";
            LogText("Initalizing", LogLevel.Information);

            LogText("Watching " + Config.TrackedBuilds.Count + " builds: ", LogLevel.Information);
            foreach (var build in Config.TrackedBuilds)
            {
                LogText("\t" + build.Name + ": ", LogLevel.Information);
                LogText("\t\t" + build.BuildPath, LogLevel.Information);
                LogText("\t\t Last build executed was " + build.Number, LogLevel.Information);
            }

            // Start by looking at all of the builds that are being tracked, if any are in an intermediate stage (not Complete) then add it to the processing queue
            bool newBuildAdded = false;
            foreach (var build in Config.TrackedBuilds.Where(x=>x.Enabled))
            {
                
                if (build.Stage != ExecutionStage.Complete)
                {
                    lock (DeployAndTestRunnerQueue)
                    {
                        DeployAndTestRunnerQueue.Enqueue(build);
                        newBuildAdded = true;
                    }
                }
            }

            // If builds were added notify the thread(s) watching the queue
            if (newBuildAdded)
            {
                lock (DeployAndTestRunnerQueue)
                {
                    Monitor.Pulse(DeployAndTestRunnerQueue);
                }
                newBuildAdded = false;
            }

            // Loop until service host says stop
            while (true)
            {
                newBuildAdded = false;
                
                // Loop through each tracked build
                foreach(var build in Config.TrackedBuilds.Where(x=>x.Enabled))
                {
                    string[] buildPaths;
                    try
                    {
                        // Create the list of directories from the build share and order them by version string
                        buildPaths = Directory.GetDirectories(build.BasePath, "??.??.????.??").OrderByDescending(x => x).ToArray();

                        // Loop through each build path
                        foreach (var buildPath in buildPaths)
                        {
                            // Save off the build number by blanking out the discovered path's root path
                            var number = buildPath.Replace(build.BasePath, "");

                            // Check to see if this build path is newer than the last one run
                            if (build.IsNewer(number))
                            {
                                // Verify that the trigger file exists
                                if (File.Exists(buildPath + "\\" + build.TriggerFile))
                                {
                                    // We found a new build: lock the config, log the result and update this build with the new path/number
                                    lock (Config)
                                    {
                                        LogText("Found new build for " + build.Name, LogLevel.Information);
                                        LogText("\t Old: " + build.Number + "\t New: " + number, LogLevel.Information);

                                        // Found a newer build to test
                                        build.Number = number;
                                        build.BuildPath = buildPath;
                                        build.Stage = ExecutionStage.Start;
                                    }

                                    // Lock the deploy/test queue to enqueue this build
                                    lock (DeployAndTestRunnerQueue)
                                    {
                                        DeployAndTestRunnerQueue.Enqueue(build);
                                    }

                                    // Flag this to nofify Deploy And Test Runner that a new build is ready
                                    newBuildAdded = true;
                                }
                            }
                            else
                            {
                                // Folder is not a newer version, just move on
                                continue;
                            }
                        }
                    }
                    catch (ThreadAbortException)
                    {
                        // just eat it, Windows Service was shut down
                    }
                    catch (System.IO.IOException e)
                    {
                        // Folder is unavailable, log the problem as a warning
                        LogText("Error accessing " + build.BasePath + ":", LogLevel.Warning);
                        LogText("\t" + e.Message, LogLevel.Warning);
                    }
                }

                // If we found a new build during discovery
                if (newBuildAdded)
                {
                    // Write out the configuration file in case the steps are interrupted in the future
                    SerializeConfiguration();

                    // Notify the deploy/test thread that there is a new build for it
                    lock (DeployAndTestRunnerQueue)
                    {
                        Monitor.Pulse(DeployAndTestRunnerQueue);
                    }
                    newBuildAdded = false;
                }

                // Sleep for the set time
                LogText("Sleeping for " + Config.BuildWatcherSleepInterval + " seconds", LogLevel.Debug);
                Thread.Sleep(Config.BuildWatcherSleepInterval * 1000);
            }
        }

        // Queue for newly discovered builds
        private static Queue<Build> DeployAndTestRunnerQueue = new Queue<Build>();

        /// <summary>
        /// Waits on DeployAndTestRunnerQueue for newly discovered builds to test on
        /// </summary>
        private static void DeployAndTestRunner()
        {
            Thread.CurrentThread.Name = "DeployAndTestRunner";
            LogText("Initalizing", LogLevel.Information);

            try
            {
                // Loop until service host says stop
                while (true)
                {
                    // Iterate through the queue
                    while (DeployAndTestRunnerQueue.Count > 0)
                    {
                        // Keep track of our start time to detect failures
                        DateTime startTime = DateTime.Now;

                        // Lock the queue and take the build on the top
                        Build thisBuild;
                        lock (DeployAndTestRunnerQueue)
                        {
                            thisBuild = DeployAndTestRunnerQueue.Dequeue();
                        }

                        // Build the build metadata
                        string nameAndNumber = thisBuild.Name + "-" + thisBuild.Number;
                        LogText("New build dequeued: " + nameAndNumber, LogLevel.Information);
                        //Should move this to Build information
                        string logFolder = Path.Combine(BaseFolder, "Logs\\" + thisBuild.Name + "\\" + thisBuild.Number + "\\");

                        // Create Octopus and test log folders for this new build
                        LogText("\t[" + nameAndNumber + "] Creating log folders \"" + logFolder, LogLevel.Information);
                        Directory.CreateDirectory(logFolder);
                        Directory.CreateDirectory(logFolder + "OctopusLogs\\");

                        // If this build is in the Start stage, move it to the Copy stage
                        if (thisBuild.Stage == ExecutionStage.Start)
                        {
                            LogText("\t[" + nameAndNumber + "] Moving from START to COPYANDSNAP stage", LogLevel.Information);
                            thisBuild.Stage = ExecutionStage.CopyAndSnap;

                            // Write out the configuration file in case the steps are interrupted in the future
                            SerializeConfiguration();
                        }

                        // For builds in the Copy stage
                        if (thisBuild.Stage == ExecutionStage.CopyAndSnap)
                        {
                            // Keep track of our start time to detect failures
                            startTime = DateTime.Now;

                            // Kill all STFGui.exe processes
                            string processName = "STFGui";

                            foreach (Process proc in Process.GetProcessesByName(processName))
                                proc.Kill();

                            // Delete the build folder
                            DeleteDirectory(@"C:\XOShares\" + thisBuild.ShortName + @"\Esp\Merged");

                            // Copy bits to local share
                            LogText("\t[" + nameAndNumber + "] Executing copy script ", LogLevel.Information);
                            LogText("\t[" + nameAndNumber + "]\tExecuteCopy.cmd " + thisBuild.Name + " " + thisBuild.BuildPath, LogLevel.Debug);

                            // Copy the build bits from the build share
                            using (var executeCopy = new System.Diagnostics.Process())
                            using (var executeSnap = new System.Diagnostics.Process())
                            {
                                // Use the ExecuteCopy.cmd script
                                executeCopy.StartInfo.FileName = Path.Combine(BaseFolder, @"scripts\ExecuteCopy.cmd");
                                executeCopy.StartInfo.Arguments = thisBuild.Name + " " + thisBuild.BuildPath + " " + (thisBuild.UseCodeCoverage ? "-useCoveredBuild" : "");
                                executeCopy.StartInfo.Verb = "runas";
                                executeCopy.StartInfo.UseShellExecute = true;
                                executeCopy.Start();

                                // Use the ExecuteSnap.cmd script
                                executeSnap.StartInfo.FileName = Path.Combine(BaseFolder, @"scripts\ExecuteSnap.cmd");
                                executeSnap.StartInfo.Arguments = thisBuild.Name;
                                executeSnap.StartInfo.Verb = "runas";
                                executeSnap.StartInfo.UseShellExecute = true;
                                executeSnap.Start();

                                // Wait an hour to copy
                                if (!executeCopy.WaitForExit((int)TimeSpan.FromHours(1).TotalMilliseconds) || executeCopy.ExitCode != 0)
                                {
                                    LogText("\t[" + nameAndNumber + "] Copy failed", LogLevel.Error);
                                    continue;
                                }

                                LogText("\t[" + nameAndNumber + "] Copy exit code: " + executeCopy.ExitCode, LogLevel.Information);

                                // Copy should take at least a minute, anything shorter than that should be considered a failure
                                if ((DateTime.Now - startTime).TotalMinutes <= 1)
                                {
                                    LogText("\t[" + nameAndNumber + "] Copy did not take the expected time to complete, assuming failure", LogLevel.Error);

                                    // Exit for now so that we can debug the failure.  TODO: Remove this and retry
                                    if (thisBuild.HasTestSuitesToReport)
                                        Environment.Exit(1);
                                    //continue;
                                }

                                // Wait for Snap to complete
                                executeSnap.WaitForExit((int)TimeSpan.FromHours(1).TotalMilliseconds);
                            }

                            // Move this build to the Deploy stage
                            LogText("\t[" + nameAndNumber + "] Moving from COPYANDSNAP to DEPLOY stage", LogLevel.Information);
                            thisBuild.Stage = ExecutionStage.Deploy;

                            // Write out the configuration file in case the steps are interrupted in the future
                            SerializeConfiguration();
                        }


                        // For builds in the Deploy stage
                        if (thisBuild.Stage == ExecutionStage.Deploy)
                        {
                            // Copy the custom configuration to the deployment folder
                            string configDir = @"C:\XOShares\" + thisBuild.ShortName + @"\Esp\Merged\configuration\custom\XBLMFFTP\";
                            LogText("\t[" + nameAndNumber + "] Copying configuration manifest to " + configDir, LogLevel.Information);
                            if (!Directory.Exists(configDir))
                                Directory.CreateDirectory(configDir);
                            File.Copy(Path.Combine(BaseFolder, @"Resources\Configurations\") + thisBuild.ShortName + @"\configuration.xml", configDir + "configuration.xml", true);
                            ReplaceInFile(configDir + "configuration.xml", "\\{0\\}", Config.XblobName);

                            // Define how many times we are to retry.  TODO: Remove the Environment.Exit(1) below to allow this to retry
                            int tries = 0;
                            int maxTries = 5;
                            bool deploySuccess = false;

                            // Keep looping until we run out of retries
                            while (tries < maxTries)
                            {
                                tries++;

                                if (tries > 1)
                                    LogText("\t[" + nameAndNumber + "] Retrying (" + tries + "/" + maxTries + "):", LogLevel.Information);

                                LogText("\t[" + nameAndNumber + "] Executing: adt -deploy -customconfig XBLMFFTP -prop", LogLevel.Information);

                                // Keep track of our start time to detect failures
                                startTime = DateTime.Now;

                                // Deploy the build
                                using (var deployScript = new System.Diagnostics.Process())
                                {
                                    // Use the ExecuteDeploy.cmd script
                                    deployScript.StartInfo.FileName = Path.Combine(BaseFolder, @"scripts\ExecuteDeploy.cmd");
                                    deployScript.StartInfo.Arguments = thisBuild.Name;
                                    deployScript.StartInfo.Verb = "runas";
                                    deployScript.StartInfo.UseShellExecute = true;
                                    deployScript.Start();

                                    // Wait two hours to deploy
                                    if (!deployScript.WaitForExit((int)TimeSpan.FromHours(2).TotalMilliseconds) || deployScript.ExitCode != 0)
                                    {
                                        LogText("\t[" + nameAndNumber + "] Deploy failed", LogLevel.Error);
                                        if (thisBuild.HasTestSuitesToReport)
                                            Environment.Exit(1);
                                        continue;
                                    }
                                    else
                                    {
                                        LogText("\t[" + nameAndNumber + "] Deployment exit code: " + deployScript.ExitCode, LogLevel.Information);

                                        // Deployment should take at least 5 minutes, anything shorter than that shoukd be considered a failure
                                        if ((DateTime.Now - startTime).TotalMinutes > 5)
                                        {
                                            deploySuccess = true;
                                            break;
                                        }

                                        // Didn't take long enough, fail
                                        LogText("\t[" + nameAndNumber + "] Deployment did not take the expected time to complete, assuming failure", LogLevel.Error);

                                        // Exit for now so that we can debug the failure.  TODO: Remove this and retry
                                        if (thisBuild.HasTestSuitesToReport)
                                            Environment.Exit(1);
                                        //continue;
                                    }
                                }
                            }

                            // Retried too many times and didn't deploy successfully, log message and give up
                            if (!deploySuccess)
                            {
                                LogText("\t[" + nameAndNumber + "] Deployment failed too many times; giving up", LogLevel.Error);
                                continue;
                            }

                            // Deployment was successful, move from Deploy stage to Test stage
                            LogText("\t[" + nameAndNumber + "] Moving from DEPLOY to PostDeployment stage", LogLevel.Information);
                            thisBuild.Stage = ExecutionStage.PostDeployment;

                            // Write out the configuration file in case the steps are interrupted in the future
                            SerializeConfiguration();
                        }

                        if (thisBuild.Stage == ExecutionStage.PostDeployment)
                        {
                            LogText("\t[" + nameAndNumber + "] Executing: ExecutePostDeployment.cmd " + BaseFolder + " " + Config.XblobName, LogLevel.Information);

                            using (var deployPostDeploymentScript = new System.Diagnostics.Process())
                            {
                                // Use the ExecuteDeploy.cmd script
                                deployPostDeploymentScript.StartInfo.FileName = Path.Combine(BaseFolder, @"scripts\ExecutePostDeployment.cmd");
                                deployPostDeploymentScript.StartInfo.Arguments = BaseFolder + " " + Config.XblobName;
                                deployPostDeploymentScript.StartInfo.Verb = "runas";
                                deployPostDeploymentScript.StartInfo.UseShellExecute = true;
                                deployPostDeploymentScript.Start();

                                // Wait 10 minutes to update
                                if (!deployPostDeploymentScript.WaitForExit((int)TimeSpan.FromMinutes(10).TotalMilliseconds) || deployPostDeploymentScript.ExitCode != 0)
                                {
                                    LogText("\t[" + nameAndNumber + "] ExecutePostDeployment script exit code: " + deployPostDeploymentScript.ExitCode, LogLevel.Error);
                                    Environment.Exit(1);
                                    continue;
                                }

                            }

                            // Deployment was successful, move from Deploy stage to Test stage
                            LogText("\t[" + nameAndNumber + "] Moving from PostDeployment to UpdateFakeSG stage", LogLevel.Information);
                            thisBuild.Stage = ExecutionStage.UpdateFakeSG;

                            // Write out the configuration file in case the steps are interrupted in the future
                            SerializeConfiguration();
                        }

                        if (thisBuild.Stage == ExecutionStage.UpdateFakeSG)
                        {
                            LogText("\t[" + nameAndNumber + "] Executing: ExecuteFakeSGUpdate.cmd", LogLevel.Information);

                            using (var deployFakeSGUpdateScript = new System.Diagnostics.Process())
                            {
                                // Use the ExecuteFakeSGUpdate.cmd script
                                deployFakeSGUpdateScript.StartInfo.FileName = Path.Combine(BaseFolder, @"scripts\ExecuteFakeSGUpdate.cmd");
                                deployFakeSGUpdateScript.StartInfo.Arguments = thisBuild.ShortName;
                                deployFakeSGUpdateScript.StartInfo.Verb = "runas";
                                deployFakeSGUpdateScript.StartInfo.UseShellExecute = true;
                                deployFakeSGUpdateScript.Start();

                                // Wait 10 minutes to update
                                if (!deployFakeSGUpdateScript.WaitForExit((int)TimeSpan.FromMinutes(10).TotalMilliseconds) || deployFakeSGUpdateScript.ExitCode != 0)
                                {
                                    LogText("\t[" + nameAndNumber + "] FakeSG update exit code: " + deployFakeSGUpdateScript.ExitCode, LogLevel.Error);
                                    Environment.Exit(1);
                                    continue;
                                }

                            }

                            // Deployment was successful, move from Deploy stage to Test stage
                            LogText("\t[" + nameAndNumber + "] Moving from UPDATEFAKESG to TEST stage", LogLevel.Information);
                            thisBuild.Stage = ExecutionStage.Test;

                            // Write out the configuration file in case the steps are interrupted in the future
                            SerializeConfiguration();
                        }

                        // For builds in the Test stage
                        if (thisBuild.Stage == ExecutionStage.Test)
                        {
                            string logPrefix = String.Format("\t[{0}]", nameAndNumber);
                            ExecuteStageTest(thisBuild, logFolder, logPrefix);
                        }

                        // For builds in the Stamp stage
                        if (thisBuild.Stage == ExecutionStage.Stamp)
                        {
                            // Verify that at least one test suite is valid for reporting
                            if (thisBuild.TestSuites.Where(x => x.IsReportingEnabled).Count() > 0)
                            {
                                // Create the stamp file
                                string buildStampFile = ResultsFileDestinationFolder + "Xbox - " + thisBuild.FriendlyName + ".txt";
                                LogText("\t[" + nameAndNumber + "] Stamping build file " + buildStampFile + " with \"" + thisBuild.Number + "\"", LogLevel.Information);

                                // Write the stamp file
                                using (TextWriter buildWriter = new StreamWriter(buildStampFile, false))
                                {
                                    buildWriter.Write(thisBuild.Number); // TODO: Handle stamping failure gracefully
                                }
                            }

                            // Move this build from Stamp stage to Complete Stage
                            LogText("\t[" + nameAndNumber + "] Moving from STAMP to COMPLETE stage", LogLevel.Information);
                            thisBuild.Stage = ExecutionStage.Complete;

                            // Write out the configuration file, we're done!
                            SerializeConfiguration();
                        }
                    }

                    // Queue processing is complete, wait for a new build to be available
                    lock (DeployAndTestRunnerQueue)
                    {
                        LogText("Waiting for new build to deploy and test", LogLevel.Information);

                        // Sleep until a new build is available
                        Monitor.Wait(DeployAndTestRunnerQueue);

                        // Thread is awake, new build(s) are ready
                        LogText("New build(s) ready", LogLevel.Information);
                    }
                }
            }
            catch (ThreadAbortException)
            {
                // just eat it, Windows Service was shut down
            }
            catch (Exception e)
            {
                LogText(e.ToString(), LogLevel.Error);
                throw;
            }
        }

        private static void ExecuteStageTest(Build thisBuild, string logFolder, string logPrefix)
        {
            // Execute each test suite defined for this build
            foreach (var testSuite in thisBuild.TestSuites)
            {
                var testExecutor = TestExecutorFactory.CreateTestStage(testSuite.Type, logFolder);
                testExecutor.Execute(thisBuild, testSuite, logPrefix);
            }

            // Move this build from Test stage to Stamp Stage
            LogText(logPrefix + " Test executions complete", LogLevel.Information);
            LogText(logPrefix + " Moving from TEST to STAMP stage", LogLevel.Information);
            thisBuild.Stage = ExecutionStage.Stamp;

            // Write out the configuration file in case the steps are interrupted in the future
            SerializeConfiguration();
        }

        /// <summary>
        /// Helper function to recursively delete a directory and all of the files/folders in it
        /// </summary>
        /// <param name="path">Directory to delete</param>
        /// <returns></returns>
        private static bool DeleteDirectory(string path)
        {
            if (Directory.Exists(path))
            {
                try
                {
                    ClearAttributes(path);
                    Directory.Delete(path, true);
                }
                catch (IOException e)
                {
                    Console.WriteLine(e.Message);
                    return false;
                }
            }
            return true;
        }


        /// <summary>
        /// Helper function to recursively remove attributes from all files in a folder
        /// </summary>
        /// <param name="path">Directory to remove attributes from</param>
        private static void ClearAttributes(string path)
        {
            if (Directory.Exists(path))
            {
                string[] subDirs = Directory.GetDirectories(path);
                foreach (string dir in subDirs)
                    ClearAttributes(dir);
                string[] files = files = Directory.GetFiles(path);
                foreach (string file in files)
                    File.SetAttributes(file, FileAttributes.Normal);
            }
        }

        /// <summary>
        /// Replaces text inside of a file
        /// </summary>
        /// <param name="filePath"></param>
        /// <param name="searchText"></param>
        /// <param name="replaceText"></param>
        static public void ReplaceInFile(string filePath, string searchText, string replaceText)
        {
            StreamReader reader = new StreamReader(filePath);
            string content = reader.ReadToEnd();
            reader.Close();

            content = Regex.Replace(content, searchText, replaceText);

            StreamWriter writer = new StreamWriter(filePath);
            writer.Write(content);
            writer.Close();
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FFTPExecutionService\FFTPExecutionService\ExecutionServiceHost.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;

namespace FFTPExecutionService
{
    partial class ExecutionServiceHost : ServiceBase
    {
        public ExecutionServiceHost()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            Execution.Run(args);
        }

        protected override void OnStop()
        {
            
            if (Execution.BuildWatcherThread != null && Execution.BuildWatcherThread.IsAlive)
            {
                Execution.BuildWatcherThread.Abort();
            }

            if (Execution.DeployAndTestRunnerThread != null && Execution.DeployAndTestRunnerThread.IsAlive)
            {
                Execution.DeployAndTestRunnerThread.Abort();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FFTPExecutionService\FFTPExecutionService\Program.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.ServiceProcess;

namespace FFTPExecutionService
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        static void Main()
        {
            bool runCommand = (Environment.CommandLine.IndexOf("run", StringComparison.OrdinalIgnoreCase) != -1);
            bool debugCommand = (Environment.CommandLine.IndexOf("debug", StringComparison.OrdinalIgnoreCase) != -1);
            if (debugCommand)
            {
                Debugger.Launch();
                //while (!Debugger.IsAttached) { Thread.Sleep(1000); }
            }
            if (runCommand)
            {
                Execution.Run(new string[] { });
            }
            else
            {
                ServiceBase[] ServicesToRun;
                ServicesToRun = new ServiceBase[] { new ExecutionServiceHost() };
                ServiceBase.Run(ServicesToRun);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FFTPExecutionService\FFTPExecutionService\ExecutionServiceHost.Designer.cs ===
ï»¿namespace FFTPExecutionService
{
    partial class ExecutionServiceHost
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();
            this.ServiceName = "ServiceHost";
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FFTPExecutionService\FFTPExecutionService\TestSuiteInformation.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FFTPExecutionService
{
    public class TestSuiteInformation
    {
        public string Name { get; set;}

        public bool IsReportingEnabled { get; set; }

        public string Type { get; set; }

        public TestSuiteInformation()
        {
            IsReportingEnabled = true;
        }

        public override string ToString()
        {
            return string.Format("({0},{1},{2})", Name, IsReportingEnabled, Type);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FFTPExecutionService\FFTPExecutionService\TestExecutor\MsTestExecutor.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using System.IO;

namespace FFTPExecutionService
{
    public class MsTestExecutor : TestExecutor
    {
        public string MsTestExecutablePath { get; private set; }

        public MsTestExecutor(string baseFolder, string resultFolder, string logFolder, string msTestExecutablePath)
            : base(baseFolder, resultFolder, logFolder)
        {
            this.MsTestExecutablePath = msTestExecutablePath;
        }

        public override void Execute(Build buildInformation, TestSuiteInformation testSuite, string logPrefix)
        {
            DeployCommonConfig(buildInformation, logPrefix);
            ExecuteTest(buildInformation, testSuite, logPrefix);
        }

        protected void ExecuteTest(Build buildInformation, TestSuiteInformation testSuite, string logPrefix)
        {
            string trxResultsFilePath = this.TestLogFolder + GetTrxResultsFileName(buildInformation, testSuite);
            ExecuteMsTest(buildInformation, testSuite.Name, trxResultsFilePath, logPrefix);
            ReportResults(buildInformation, testSuite, trxResultsFilePath, logPrefix);
        }

        protected void ReportResults(Build buildInformation, TestSuiteInformation testSuite, string trxResultsFilePath, string logPrefix)
        {
            // Copy TRX to build share (\\mw1855-3\fftp\drop)
            if (!testSuite.IsReportingEnabled)
            {
                LogText(logPrefix + " Skipping results copy for " + testSuite.Name, LogLevel.Information);
                return;
            }
            
            LogText(logPrefix + " Copying TRX and results to build share for " + testSuite.Name, LogLevel.Information);
            string trxResultsFileName = Path.GetFileName(trxResultsFilePath);
            var resultsFilePath = ReportingResultFolder + trxResultsFileName;
            LogText(logPrefix + "\t \"" + trxResultsFilePath + "\" to \"" + resultsFilePath + "\"", LogLevel.Information);

            // Copy TRX logs to drop share
            File.Copy(trxResultsFilePath, resultsFilePath, true);
        }

        private void ExecuteMsTest(Build thisBuild, string testSuiteName, string trxResultsFilePath, string logPrefix)
        {
            string executeTestCommandArgs =
                String.Format(@"/resultsFile:""{0}"" /testmetadata:""{1}.vsmdi""", trxResultsFilePath, testSuiteName);
            string workingFolder = GetTestDllFolder(thisBuild);
            LogText(logPrefix + "\t" + executeTestCommandArgs, LogLevel.Information);
            //MSTest.exe /resultsFile:{trxResultsFile} /testmetadata:{tests.vsmdi} /testlist:{0}?
            // Execute the tests
            using (var executeTest = new System.Diagnostics.Process())
            {
                // Use ExecuteTests.cmd script
                executeTest.StartInfo.FileName = this.MsTestExecutablePath;
                executeTest.StartInfo.WorkingDirectory = workingFolder;
                executeTest.StartInfo.Arguments = executeTestCommandArgs;
                executeTest.StartInfo.Verb = "runas";
                executeTest.StartInfo.UseShellExecute = true;
                executeTest.Start();
                executeTest.WaitForExit();
            }
        }

        private void DeployCommonConfig(Build buildInformation, string logPrefix)
        {
            string configFileName = "CommonConfig.xml";
            string xblobName = Execution.Config.XblobName;
            var configDestinationPath = GetTestDllFolder(buildInformation) + configFileName;
            
            LogText(logPrefix + " Copying " + configFileName, LogLevel.Information);
            if (File.Exists(configDestinationPath))
                File.SetAttributes(configDestinationPath, FileAttributes.Normal);
            
            File.Copy(Path.Combine(BaseFolder, @"Resources\" + configFileName), configDestinationPath, true);
            Execution.ReplaceInFile(configDestinationPath, "#XBLOB#", xblobName);
        }

        private static string GetTestDllFolder(Build thisBuild)
        {
            return String.Format(@"C:\XOShares\{0}\Tests\64bit\MsTestSuites\", thisBuild.ShortName);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FFTPExecutionService\FFTPExecutionService\TestExecutor\TestExecutorFactory.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace FFTPExecutionService
{
    public static class TestExecutorFactory
    {
        public static TestExecutor CreateTestStage(string testType, string logFolder)
        {
            if (testType.Equals("STF", StringComparison.OrdinalIgnoreCase))
            {
                return new StfTestExecutor(Execution.BaseFolder, Execution.ResultsFileDestinationFolder, logFolder);
            }
            else if (testType.Equals("MSTEST2008", StringComparison.OrdinalIgnoreCase))
            {
                string msTestPath = @"C:\MSTEST2008\MSTest.exe";
                return new MsTestExecutor(Execution.BaseFolder, Execution.ResultsFileDestinationFolder, logFolder, msTestPath);
            }
            else if (testType.Equals("MSTEST2010", StringComparison.OrdinalIgnoreCase))
            {
                string msTestPath = Path.Combine(Execution.BaseFolder, @"resources\Tools\MSTest2010\MSTest.exe");
                return new MsTestExecutor(Execution.BaseFolder, Execution.ResultsFileDestinationFolder, logFolder, msTestPath);
            }
            else
            {
                string message = "Invalid test type: " + testType;
                Execution.LogText(message, LogLevel.Error);
                throw new ArgumentException(message, "testType");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FFTPExecutionService\FFTPExecutionService\TestExecutor\TestExecutor.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace FFTPExecutionService
{
    public abstract class TestExecutor
    {
        // Base folder
        public string BaseFolder { get; private set; }

        // Base folder
        public string ReportingResultFolder { get; private set; }

        public string TestLogFolder { get; private set; }

        // Owners to ignore
        public static string[] OwnersToIgnore = { "pefan", "jeeshn", "johnmcp" };

        public TestExecutor(string baseFolder, string reportingResultFolder, string logFolder)
        {
            this.BaseFolder = baseFolder;
            this.ReportingResultFolder = reportingResultFolder;
            this.TestLogFolder = logFolder + @"Tests\";
            Directory.CreateDirectory(this.TestLogFolder);
        }

        public abstract void Execute(Build buildInformation, TestSuiteInformation testSuite, string logPrefix);

        protected static void LogText(string logMessage, LogLevel logLevel)
        {
            Execution.LogText(logMessage, logLevel);
        }

        protected virtual string GetTrxResultsFileName(Build buildInformation, TestSuiteInformation testSuite)
        {
           return String.Format("Xbox - {0} - {1}.trx", buildInformation.FriendlyName, testSuite.Name);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FFTPExecutionService\FFTPExecutionService\TestExecutor\StfTestExecutor.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using System.IO;

namespace FFTPExecutionService
{
    public class StfTestExecutor : TestExecutor
    {
        public StfTestExecutor(string baseFolder, string resultFolder, string logFolder)
            : base(baseFolder, resultFolder, logFolder)
        {
        }

        public override void Execute(Build buildInformation, TestSuiteInformation testSuite, string logPrefix)
        {
            string stfResultsFile = GetStfResultsFileName(buildInformation, testSuite);
            string trxResultsFile = GetTrxResultsFileName(buildInformation, testSuite);
            ExecuteStfTest(buildInformation, testSuite.Name, stfResultsFile, logPrefix);
            RemoveTestResultsByOwner(stfResultsFile, OwnersToIgnore);
            ConvertStfResultToTrxResult(buildInformation, testSuite, trxResultsFile, stfResultsFile, logPrefix);
            ReportResults(buildInformation, testSuite, stfResultsFile, trxResultsFile, logPrefix);
        }

        private void ExecuteStfTest(Build buildInformation, string testSuiteName, string stfResultsFile, string logPrefix)
        {
            {// Update STF.xml with the environment settings correct (copy stage overwrites test settings)
                LogText(logPrefix + " Copying stf.xml", LogLevel.Information);
                var stfConfigFile = @"C:\XOShares\" + buildInformation.ShortName + @"\Tests\32bit\stftests\stf.xml";
                if (File.Exists(stfConfigFile))
                    File.SetAttributes(stfConfigFile, FileAttributes.Normal);
                File.Copy(Path.Combine(BaseFolder, @"Resources\stf.xml"), stfConfigFile, true);
                Execution.ReplaceInFile(stfConfigFile, "\\{0\\}", Execution.Config.XblobName);
            }

            string executeTestCommandArgs = // thisBuild.Name + " " + thisBuild.ShortName + " " + string.Format(@"/xmlfile:{2} /logdir:{1} /e:Xblob C:\XOShares\{3}\Tests\32bit\stftests\suites\{0}.dll", testSuiteName, testLogFolder, stfResultsFile, thisBuild.ShortName);
                String.Format(@"{0} {1} /xmlfile:{3}{4} /logdir:{3} /e:Xblob C:\XOShares\{1}\Tests\32bit\stftests\suites\{2}.dll {5}",
                buildInformation.Name, buildInformation.ShortName, testSuiteName, this.TestLogFolder, stfResultsFile, (buildInformation.UseCodeCoverage?"/codecoverage":""));

            LogText(logPrefix + "\t" + executeTestCommandArgs, LogLevel.Information);

            // Execute the tests
            using (var executeTest = new System.Diagnostics.Process())
            {
                // Use ExecuteTests.cmd script
                executeTest.StartInfo.FileName = Path.Combine(BaseFolder, @"scripts\ExecuteTests.cmd");
                executeTest.StartInfo.Arguments = executeTestCommandArgs;
                executeTest.StartInfo.Verb = "runas";
                executeTest.StartInfo.UseShellExecute = true;
                executeTest.Start();
                executeTest.WaitForExit();
            }
        }

        protected void ReportResults(Build buildInformation, TestSuiteInformation testSuite, string stfResultsFile, string trxResultsFile, string logPrefix)
        {
            // Copy TRX to build share (\\mw1855-3\fftp\drop)
            if (testSuite.IsReportingEnabled)
            {
                LogText(logPrefix + " Copying TRX and results to build share for " + testSuite.Name, LogLevel.Information);
                var trxResultFilePath = ReportingResultFolder + trxResultsFile;
                LogText(logPrefix + "\t \"" + this.TestLogFolder + trxResultsFile + "\" to \"" + trxResultFilePath + "\"", LogLevel.Information);

                // Copy TRX logs to drop share
                File.Copy(this.TestLogFolder + trxResultsFile, trxResultFilePath, true);
                // Copy STF logs to drop share
                File.Copy(this.TestLogFolder + stfResultsFile, ReportingResultFolder + "Xbox - " + buildInformation.FriendlyName + " - " + testSuite.Name + " - STF Log.xml", true);
            }
            else
            {
                LogText(logPrefix + " Skipping results copy for " + testSuite.Name, LogLevel.Information);
            }
        }

        private void ConvertStfResultToTrxResult(Build buildInformation, TestSuiteInformation testSuite, string trxResultsFile, string stfResultsFile, string logPrefix)
        {
            // Run Stf2Trx converter tool to convert STF test results to TRX
            LogText(logPrefix + " Converting test output to TRX for " + testSuite.Name, LogLevel.Information);
            var serializedRunResultsFolder = @"C:\XOShares\" + buildInformation.ShortName + @"\Tests\32bit\stftests\FuncOutput\SerializedRunResults\";
            var serializedRunResultsFile = Directory.GetFiles(serializedRunResultsFolder, testSuite.Name + "*.*").FirstOrDefault();

            // If the TRX file exists already (rerun), delete it or the Stf2Trx tool will complain
            if (File.Exists(this.TestLogFolder + trxResultsFile))
            {
                LogText(logPrefix + "\t\"" + this.TestLogFolder + trxResultsFile + "\" exists, deleting", LogLevel.Debug);
                File.Delete(this.TestLogFolder + trxResultsFile);
            }

            // Prepare the Stf2Trx tool
            var executeTRXConverterArgs = "\"" + serializedRunResultsFile + "\" \"" + this.TestLogFolder + stfResultsFile + "\" \"" + this.TestLogFolder + trxResultsFile + "\"";
            LogText(logPrefix + "\t" + executeTRXConverterArgs, LogLevel.Information);
            // Execute the Stf2Trx tool
            using (var executeTRXConverter = new System.Diagnostics.Process())
            {
                executeTRXConverter.StartInfo.FileName = Path.Combine(BaseFolder, @"Resources\Tools\Stf2TrxTool\Stf2TrxTool.exe");
                executeTRXConverter.StartInfo.Arguments = executeTRXConverterArgs;
                executeTRXConverter.StartInfo.Verb = "runas";
                executeTRXConverter.StartInfo.UseShellExecute = true;
                executeTRXConverter.Start();
                executeTRXConverter.WaitForExit();
            }
        }

        private void RemoveTestResultsByOwner(string stfResultsFile, string[] owners)
        {
            string file = this.TestLogFolder + stfResultsFile;
            // Filter non-CS test cases
            var resultsXDoc = XDocument.Load(file);

            int failures = int.Parse(resultsXDoc.Element("test-results").Attribute("failures").Value);
            int notRun = int.Parse(resultsXDoc.Element("test-results").Attribute("not-run").Value);

            foreach (var ownerToIgnore in owners)
            {
                RemoveOwnerTestCases(resultsXDoc.Element("test-results").Element("test-suite"), ownerToIgnore, ref failures, ref notRun);
            }

            resultsXDoc.Element("test-results").Attribute("failures").Value = failures.ToString();
            resultsXDoc.Element("test-results").Attribute("not-run").Value = notRun.ToString();

            resultsXDoc.Save(file);

        }

        private static void RemoveOwnerTestCases(XElement testSuite, string ownerName, ref int failures, ref int notRun)
        {
            foreach (var childTestSuite in testSuite.Element("results").Elements("test-suite"))
                RemoveOwnerTestCases(childTestSuite, ownerName, ref failures, ref notRun);
            var testCases = testSuite.Element("results").Elements("test-case");
            foreach (var testCase in testCases)
            {
                if (testCase.Attribute("owner") != null)
                {
                    if (testCase.Attribute("owner").Value == ownerName)
                    {
                        if (testCase.Element("failure") != null)
                        {
                            failures--;
                            testCase.Element("failure").Remove();
                        }
                        if (testCase.Element("reason") != null)
                        {
                            testCase.Element("reason").Remove();
                        }
                        testCase.Attribute("executed").Value = "False";
                        if (testCase.Attribute("success") != null)
                            testCase.Attribute("success").Remove();

                        var reason = new XElement("reason");
                        var message = new XElement("message");
                        message.SetValue("<![CDATA[The node is marked as Ignored]]>");
                        reason.Add(message);
                        testCase.Add(reason);
                        notRun++;
                    }
                }
            }
        }

        protected virtual string GetStfResultsFileName(Build buildInformation, TestSuiteInformation testSuite)
        {
            return String.Format("{0}.xml", testSuite.Name);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\fse\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\fse\FsePluginTest.cs ===
using System.Diagnostics;
using System.IO;

using System.Text;
using System.Xml.Serialization;
using System;
using System.Web;
using System.Xml;
using ServerTestFramework;
using System.Data;
using System.Data.SqlClient;

using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.fse;
using xonline.common.service;
using xonline.common.catalogutil;

namespace xonline.test.marketplace.fse
{

    [TestGroup, Owner("craigta"), TestFrequency("Check-In"), EnvRequirement("fse")]
    public class FseTester
    {
        private static string catalogUrl = string.Empty;

        private static void AddFseMethod(string api, string method, string procedure)
        {
            using (SqlClient client = new SqlClient(Interface.npdb, false))
            {
                string cmd = String.Format("INSERT INTO [npdb].[dbo].[t_fse_methods]([vc_api_name],[vc_method_name],[vc_interface],[vc_virtual_interface],[ti_use_webstore],[vc_procedure_name],[i_cache_duration],[i_cache_page_size],[i_max_page_size],[dt_change_datetime],[i_db_page_base],[i_db_page_size],[i_db_retry_count],[i_cache_page_base],[i_cache_retry_count],[i_cache_retry_milliseconds],[vc_environment],[ti_use_assembly])"
                                         + "VALUES('{0}','{1}',null,null,0,'{2}',600,100,100,GETUTCDATE(),1,1000,2,1,10,250,'ALL',1)", api, method, procedure);
                client.Command.CommandText = cmd;
                client.Command.CommandType = CommandType.Text;
                client.ExecuteNonQuery();
            }
        }

        private static void AddFseParameter(string api, string method, int ordinal, string parameterName, string parameterValue)
        {
            using (SqlClient client = new SqlClient(Interface.npdb, false))
            {
                string cmd = String.Format("INSERT INTO [npdb].[dbo].[t_fse_parameters]([vc_api_name],[vc_method_name],[si_ordinal],[vc_parameter_name],[ti_parameter_type],[vc_parameter_mapping],[si_min_occurs],[si_max_occurs],[vc_default_value],[vc_regex_value],[dt_change_datetime],[i_flags],[vc_environment])"                                         
                                        + "VALUES('{0}','{1}',{2},'{3}',3,'{4}',0,1,'{5}','',GETUTCDATE(),3,'ALL')", api, method, ordinal, parameterName, parameterName, parameterValue);
                client.Command.CommandText = cmd;
                client.Command.CommandType = CommandType.Text;
                client.ExecuteNonQuery();
            }
        }

        private static void RemoveFseMethod(string method)
        {
            using (SqlClient client = new SqlClient(Interface.npdb, false))
            {
                string cmd = String.Format("DELETE FROM [npdb].[dbo].[t_fse_methods] WHERE [vc_method_name] = '{0}'",method);
                client.Command.CommandText = cmd;
                client.Command.CommandType = CommandType.Text;
                client.ExecuteNonQuery();
            }

        }

        private static void RemoveFseParameter(string method, string parameterName)
        {
            using (SqlClient client = new SqlClient(Interface.npdb, false))
            {
                string cmd = String.Format("DELETE FROM [npdb].[dbo].[t_fse_parameters] WHERE [vc_method_name] = '{0}' AND [vc_parameter_name] = '{1}'",method,parameterName);
                client.Command.CommandText = cmd;
                client.Command.CommandType = CommandType.Text;
                client.ExecuteNonQuery();
            }
        }

        [TestGroupSetup]
        public void Setup()
        {
            catalogUrl = String.Format("http://{0}/Catalog/Catalog.asmx/Query?methodName=FindGames&Names=Locale&Values=en-US&Names=LegalLocale&Values=en-US&Names=Store&Values=1&Names=PageSize&Values=100&Names=PageNum&Values=1&Names=DetailView&Values=3&Names=OfferFilterLevel&Values=2&Names=UserTypes&Values=2&Names=MediaTypes&Values=1&Names=MediaTypes&Values=21&Names=MediaTypes&Values=23&Names=OfferTargetMediaTypes&Values=5&Names=OfferTargetMediaTypes&Values=18&Names=OfferTargetMediaTypes&Values=19&Names=OfferTargetMediaTypes&Values=20&Names=OfferTargetMediaTypes&Values=21&Names=OfferTargetMediaTypes&Values=22&Names=OfferTargetMediaTypes&Values=23&Names=OfferTargetMediaTypes&Values=30&Names=OfferTargetMediaTypes&Values=34&Names=ImageFormats&Values=4&Names=ImageFormats&Values=5&Names=ImageSizes&Values=10&Names=OrderBy&Values=1&Names=OrderDirection&Values=1", Global.XEnv.GetVirtualInterface(VirtualInterface.catalog)); 
            AddFseMethod("PluginTest", "PluginTestMethod", "xonline.common.fseplugin.PluginTest");
            AddFseParameter("PluginTest", "PluginTestMethod", 10, "Url", catalogUrl);
        }

        [TestGroupTearDown]
        public void Shutdown() 
        {
            RemoveFseParameter("PluginTestMethod", "Url");
            RemoveFseMethod("PluginTestMethod");            
        }

        [TestCase, TestCasePriority(1)]
        public class P_Fse_With_Value : TestBase
        {
            public P_Fse_With_Value() { }

            protected override void Execute()
            {
                string findCategories = String.Format("http://{0}/Catalog/Catalog.asmx/Query?methodName=FindCategories&Names=Locale&Values=en-US&Names=LegalLocale&Values=en-US&Names=Store&Values=1&Names=PageSize&Values=100&Names=PageNum&Values=1&Names=DetailView&Values=3&Names=OfferFilterLevel&Values=1&Names=CategorySystemId&Values=4000&Names=OrderBy&Values=11&Names=OrderDirection&Values=1", Global.XEnv.GetVirtualInterface(VirtualInterface.catalog));
                ResultCode = TEST_RESULTS.PASSED;

                string[] names = { "Url" };
                string[] values = { findCategories };

                FseService service = new FseService("PluginTest", "npdb", new CatalogResultHandler(), new CatalogPageHandler());
                FseRequest request = new FseRequest("PluginTestMethod", names, values);
                FseResponse response = service.Execute(request);

                XmlTextReader directRead = new XmlTextReader(findCategories);
                directRead.Read();
                directRead.Read();
                if (!response.XmlNode.InnerXml.Contains(directRead.ReadOuterXml()))
                {
                    Global.RO.Error("XML from FSE and XML directly from catalog does not match");
                    ResultCode = TEST_RESULTS.FAILED;
                }
            }
        }

        [TestCase, TestCasePriority(1)]
        public class P_Fse_With_Value_From_Cache : TestBase
        {
            public P_Fse_With_Value_From_Cache() { }

            protected override void Execute()
            {
                string findCategories = String.Format("http://{0}/Catalog/Catalog.asmx/Query?methodName=FindCategories&Names=Locale&Values=en-US&Names=LegalLocale&Values=en-US&Names=Store&Values=1&Names=PageSize&Values=100&Names=PageNum&Values=1&Names=DetailView&Values=3&Names=OfferFilterLevel&Values=1&Names=CategorySystemId&Values=4000&Names=OrderBy&Values=11&Names=OrderDirection&Values=1", Global.XEnv.GetVirtualInterface(VirtualInterface.catalog));
                ResultCode = TEST_RESULTS.PASSED;

                string[] names = { "Url" };
                string[] values = { findCategories };

                FseService service = new FseService("PluginTest", "npdb", new CatalogResultHandler(), new CatalogPageHandler());
                FseRequest request = new FseRequest("PluginTestMethod", names, values);
                FseResponse response = service.Execute(request);
                response = service.Execute(request); // Second call guarantees we get it from the cache

                XmlTextReader directRead = new XmlTextReader(findCategories);
                directRead.Read();
                directRead.Read();
                if (!response.XmlNode.InnerXml.Contains(directRead.ReadOuterXml()))
                {
                    Global.RO.Error("XML from FSE and XML directly from catalog does not match");
                    ResultCode = TEST_RESULTS.FAILED;
                }
            }
        }


        [TestCase, TestCasePriority(1)]
        public class P_Fse_With_Defaults : TestBase
        {
            public P_Fse_With_Defaults() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                string[] names = null;
                string[] values = null;

                FseService service = new FseService("PluginTest", "npdb", new CatalogResultHandler(), new CatalogPageHandler());
                FseRequest request = new FseRequest("PluginTestMethod", names, values);
                FseResponse response = service.Execute(request);

                XmlTextReader directRead = new XmlTextReader(catalogUrl);
                directRead.Read();
                directRead.Read();
                if (!response.XmlNode.InnerXml.Contains(directRead.ReadOuterXml()))
                {
                    Global.RO.Error("XML from FSE and XML directly from catalog does not match");
                    ResultCode = TEST_RESULTS.FAILED;
                }
            }
        }

        [TestCase, TestCasePriority(2)]
        public class N_Fse_Class_Does_Not_Exist : TestBase
        {
            public N_Fse_Class_Does_Not_Exist() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                try
                {
                    // Put in the values for class which does not exist
                    AddFseMethod("DoesNotExist", "DoesNotExistMethod", "xonline.common.fseplugin.DoesNotExist");
                    AddFseParameter("DoesNotExist", "DoesNotExistMethod", 10, "DoesNotExist", "DoesNotExist");

                    string[] names = null;
                    string[] values = null;

                    FseService service = new FseService("DoesNotExist", "npdb", new CatalogResultHandler(), new CatalogPageHandler());
                    FseRequest request = new FseRequest("DoesNotExistMethod", names, values);
                    FseResponse response = service.Execute(request);
                }
                catch (xonline.common.fse.ApplicationException ex)
                {
                    if (ex.HResult == xonline.common.service.HResult.XONLINE_E_FSE_BIN_ERROR_CONSTRUCTING)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }                    
                }
                finally
                {
                    // Cleanup the does not exist API               
                    RemoveFseParameter("DoesNotExistMethod", "DoesNotExist");
                    RemoveFseMethod("DoesNotExistMethod"); 
                }
            }
        }

        [TestCase, TestCasePriority(2)]
        public class N_Fse_Class_Does_Not_Implement_Interface : TestBase
        {
            public N_Fse_Class_Does_Not_Implement_Interface() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                try
                {
                    // Put in the values for class which does not exist
                    AddFseMethod("NoInterface", "NoInterfaceMethod", "xonline.common.catalogutil.CatalogHelper");
                    AddFseParameter("NoInterface", "NoInterfaceMethod", 10, "NoInterface", "NoInterface");

                    string[] names = null;
                    string[] values = null;

                    FseService service = new FseService("NoInterface", "npdb", new CatalogResultHandler(), new CatalogPageHandler());
                    FseRequest request = new FseRequest("NoInterfaceMethod", names, values);
                    FseResponse response = service.Execute(request);
                }
                catch (xonline.common.fse.ApplicationException ex)
                {
                    if (ex.HResult == xonline.common.service.HResult.XONLINE_E_FSE_BIN_ERROR_CONSTRUCTING)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    // Cleanup the does not exist API               
                    RemoveFseParameter("NoInterfaceMethod", "NoInterface");
                    RemoveFseMethod("NoInterfaceMethod");
                }
            }
        }

        [TestCase, TestCasePriority(2)]
        public class N_Fse_Class_Throws_Exception : TestBase
        {
            public N_Fse_Class_Throws_Exception() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                try
                {
                    AddFseParameter("PluginTest", "PluginTestMethod", 10, "ThrowException", "");

                    string[] names = { "ThrowException" };
                    string[] values = { "Exception" };

                    FseService service = new FseService("PluginTest", "npdb", new CatalogResultHandler(), new CatalogPageHandler());
                    FseRequest request = new FseRequest("PluginTestMethod", names, values);
                    FseResponse response = service.Execute(request);
                }
                catch (xonline.common.fse.ApplicationException ex)
                {
                    if (ex.HResult == xonline.common.service.HResult.XONLINE_E_FSE_BIN_ERROR_EXECUTING)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    RemoveFseParameter("PluginTestMethod", "ThrowException");
                }
            }
        }

        [TestCase, TestCasePriority(2)]
        public class N_Fse_Class_Throws_FileLoadException : TestBase
        {
            public N_Fse_Class_Throws_FileLoadException() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                try
                {
                    AddFseParameter("PluginTest", "PluginTestMethod", 10, "ThrowException", "");

                    string[] names = { "ThrowException" };
                    string[] values = { "FileLoadException" };

                    FseService service = new FseService("PluginTest", "npdb", new CatalogResultHandler(), new CatalogPageHandler());
                    FseRequest request = new FseRequest("PluginTestMethod", names, values);
                    FseResponse response = service.Execute(request);
                }
                catch (xonline.common.fse.ApplicationException ex)
                {
                    if (ex.HResult == xonline.common.service.HResult.XONLINE_E_FSE_BIN_ERROR_EXECUTING)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    RemoveFseParameter("PluginTestMethod", "ThrowException");
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\CatalogConstants.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="CatalogConstants.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   class to expose the catalog constants
// </summary>
//-----------------------------------------------------------------------
namespace LiveToolsTesting
{
    /// <summary>
    /// Defines constants within the catalog
    /// </summary>
    public static class CatalogConstants
    {
        public const int MediaRelationshipMediaToImage = 15;
        public const int MediaRelationshipMediaToSellImage = 27;

        /// <summary>
        /// Checks if the game content is actually modeled as a game
        /// </summary>
        /// <param name="mediaTypeId">The specified media type id</param>
        /// <returns>true if the game content is actually modeled as a game; otherwise, false</returns>
        public static bool IsContentGame(int mediaTypeId)
        {
            switch (mediaTypeId)
            {
                default:
                    return false;
            }
        }

        /// <summary>
        /// Checks if the media relationship specified the media is an image
        /// </summary>
        /// <param name="mediaRelationshipTypeId">The specified media relationship type id</param>
        /// <returns>true if the media relationship is an image; otherwise, false</returns>
        public static bool IsMediaRelationshipImage(int mediaRelationshipTypeId)
        {
            switch (mediaRelationshipTypeId)
            {
                case CatalogConstants.MediaRelationshipMediaToImage:
                    return true;

                case CatalogConstants.MediaRelationshipMediaToSellImage:
                    return true;

                default:
                    return false;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\CatalogServicesInternal.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Text;
using ContentIngestionService;

namespace LiveToolsTesting
{
    class CatalogServicesInternal : CatalogServices
    {
        private Random random = new Random();

        protected override System.Net.WebRequest GetWebRequest(Uri uri)
        {
            System.Net.HttpWebRequest webRequest = (System.Net.HttpWebRequest)base.GetWebRequest(uri);
            webRequest.Headers.Add("Subject-Name", "MarketplaceInternalPartner");
            webRequest.Headers.Add("Client-IP-Port", "127.0.0.1:80");

            byte[] randomBytes = new byte[8];
            random.NextBytes(randomBytes);

            StringBuilder stringBuilder = new StringBuilder();

            foreach (byte randomByte in randomBytes)
            {
                stringBuilder.AppendFormat("{0:x2}", randomByte);
            }

            webRequest.Headers.Add("RequestId", stringBuilder.ToString());

            return webRequest;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\Config.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="Config.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   class to load the config
// </summary>
//-----------------------------------------------------------------------
namespace LiveToolsTesting
{
    using System;
    using System.Configuration;
    using System.Reflection;

    /// <summary>
    /// Provides access to the configuration
    /// </summary>
    public class Config
    {
        /// <summary>
        /// catalogServicesPath is the path portion of the web service url
        /// </summary>
        private string catalogServicesPath;

        /// <summary>
        /// catalogServicesPort is the port portion of the web service url
        /// </summary>
        private string catalogServicesPort;

        /// <summary>
        /// catalogServicesServer is the server portion of the web service url
        /// </summary>
        private string catalogServicesServer;

        /// <summary>
        /// catalogServicesUrl is the web service url
        /// </summary>
        private string catalogServicesUrl;

        /// <summary>
        /// catalogDatabase is the name of the sql database hosting the catalog
        /// </summary>
        private string catalogDatabase;

        /// <summary>
        /// catalogServer is the name of the sql server hosting the catalog
        /// </summary>
        private string catalogServer;

        /// <summary>
        /// downloadServer is the name of the server hosting the download location
        /// </summary>
        private string downloadServer;

        /// <summary>
        /// environment is the name of the current xbox live environment
        /// </summary>
        private string environment;

        /// <summary>
        /// leaderboardServer is the name of the server hosting the leaderboard service for these tests
        /// </summary>
        private string leaderboardServer;

        /// <summary>
        /// liveToolsPath is the full path to the live tools
        /// </summary>
        private string liveToolsPath;

        /// <summary>
        /// matchServer is the name of the server hosting the matchmaking service for these tests
        /// </summary>
        private string matchServer;

        /// <summary>
        /// titleVaultPath is the full path to the TitleVault hosting the deployed files
        /// </summary>
        private string titleVaultPath;

        /// <summary>
        /// uodbDatabase is the name of the sql database hosting uodb
        /// </summary>
        private string uodbDatabase;

        /// <summary>
        /// uodbServer is the name of the sql server hosting uodb
        /// </summary>
        private string uodbServer;

        /// <summary>
        /// Initializes a new instance of the Config class
        /// </summary>
        public Config()
        {
            Configuration configuration = ConfigurationManager.OpenExeConfiguration(Assembly.GetExecutingAssembly().Location);

            this.environment = configuration.AppSettings.Settings["Environment"].Value;

            this.catalogServicesServer = configuration.AppSettings.Settings["CatalogServicesServer"].Value;
            this.catalogServicesPort = configuration.AppSettings.Settings["CatalogServicesPort"].Value;
            this.catalogServicesPath = configuration.AppSettings.Settings["CatalogServicesPath"].Value;

            this.catalogServicesUrl = String.Format("http://{0}:{1}/{2}", this.catalogServicesServer, this.catalogServicesPort, this.catalogServicesPath);

            this.catalogServer = configuration.AppSettings.Settings["CatalogServer"].Value;
            this.catalogDatabase = configuration.AppSettings.Settings["CatalogDatabase"].Value;

            this.uodbServer = configuration.AppSettings.Settings["UodbServer"].Value;
            this.uodbDatabase = configuration.AppSettings.Settings["UodbDatabase"].Value;

            this.downloadServer = configuration.AppSettings.Settings["DownloadServer"].Value;

            this.liveToolsPath = configuration.AppSettings.Settings["LiveToolsPath"].Value;
            this.titleVaultPath = configuration.AppSettings.Settings["TitleVaultPath"].Value;

            this.leaderboardServer = configuration.AppSettings.Settings["LeaderboardServer"].Value;
            this.matchServer = configuration.AppSettings.Settings["MatchServer"].Value;
        }

        /// <summary>
        /// Gets the name of sql database hosting the catalog
        /// </summary>
        public string CatalogDatabase
        {
            get { return this.catalogDatabase; }
        }

        /// <summary>
        /// Gets the name of the sql server hosting the catalog
        /// </summary>
        public string CatalogServer
        {
            get { return this.catalogServer; }
        }

        /// <summary>
        /// Gets the url of the web service
        /// </summary>
        public string CatalogServicesUrl
        {
            get { return this.catalogServicesUrl; }
        }

        /// <summary>
        /// Gets the name of the download server
        /// </summary>
        public string DownloadServer
        {
            get { return this.downloadServer; }
        }

        /// <summary>
        /// Gets the name of the current xbox live environment
        /// </summary>
        public string Environment
        {
            get { return this.environment; }
        }

        /// <summary>
        /// Gets the name of the server hosting the leaderboard service
        /// </summary>
        public string LeaderboardServer
        {
            get { return this.leaderboardServer; }
        }

        /// <summary>
        /// Gets the full path to the live tools
        /// </summary>
        public string LiveToolsPath
        {
            get { return this.liveToolsPath; }
        }

        /// <summary>
        /// Gets the name of the server hosting the matchmaking service
        /// </summary>
        public string MatchServer
        {
            get { return this.matchServer; }
        }

        /// <summary>
        /// Gets the full path to the TitleVault hosting the deployed files
        /// </summary>
        public string TitleVaultPath
        {
            get { return this.titleVaultPath; }
        }

        /// <summary>
        /// Gets the name of the sql database hosting uodb
        /// </summary>
        public string UodbDatabase
        {
            get { return this.uodbDatabase; }
        }

        /// <summary>
        /// Gets the name of the sql server hosting uodb
        /// </summary>
        public string UodbServer
        {
            get { return this.uodbServer; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\main.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="main.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   LiveTools testing - main entry point
// </summary>
//-----------------------------------------------------------------------
// Assembly marked as compliant.
[assembly: System.CLSCompliant(true)]

// Assembly marked as security transparent
[assembly: System.Security.SecurityTransparent]

namespace LiveToolsTesting
{
    using System;
    using System.Collections.Specialized;
    using System.IO;

    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System.Xml;

    /// <summary>
    /// The class exposed to nunit
    /// </summary>
    [TestClass]
    public class LiveToolsTests
    {
        /// <summary>
        /// catalog is the catalog object for interacting with the catalog
        /// </summary>
        private Catalog catalog;

        /// <summary>
        /// config is the config object for accessing the configuration
        /// </summary>
        private Config config;

        /// <summary>
        /// testContextInstance is the test context instance for this instance
        /// </summary>
        private TestContext testContextInstance;

        /// <summary>
        /// Initializes a new instance of the LiveToolsTests class
        /// </summary>
        public LiveToolsTests()
        {
            this.config = new Config();
            this.catalog = new Catalog(this.config);
        }

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        /// <summary>
        /// For generating filenames.  If we have multiple of the same offerId, 
        /// we expect the filenames to be slightly different.  Format should be 
        /// LiveContent_<GUID>.xml, LiveContent_<GUID>_2.xml, LiveContent_<GUID>_3.xml, etc.
        /// </summary>
        /// <param name="offerIds">string of offerIds separated by semicolons (;)</param>
        /// <returns>An array of strings with duplicate ids given unique identifiers</returns>
        private string[] RenameDuplicateOfferIds(string offerIds)
        {
            string[] filenameArray = offerIds.Split(';');
            for (int i = 0; i < filenameArray.Length - 1; ++i)
            {
                int count = 2;
                for (int k = 1; k < filenameArray.Length; ++k)
                {
                    if (string.Equals(filenameArray[i].ToUpper(), filenameArray[k].ToUpper()))
                    {
                        filenameArray[k] += "_" + Convert.ToString(count);
                        ++count;
                    }
                }
            }

            return filenameArray;
        }

        #region LiveContent
        /// <summary>
        /// The test method to test and verify live content
        /// </summary>
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "|DataDirectory|\\LiveContentTests.xml", "LiveContentTestP1", DataAccessMethod.Sequential)]
        public void LiveContentTestsP1()
        {
            LiveContentTest();
        }

        /// <summary>
        /// The test method to test and verify live content
        /// </summary>
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "|DataDirectory|\\LiveContentTests.xml", "LiveContentTestP2", DataAccessMethod.Sequential)]
        public void LiveContentTestsP2()
        {
            LiveContentTest();
        }

        /// <summary>
        /// The test method to test and verify live content
        /// </summary>
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "|DataDirectory|\\LiveContentTests.xml", "LiveContentTestP3", DataAccessMethod.Sequential)]
        public void LiveContentTestsP3()
        {
            LiveContentTest();
        }

        public void LiveContentTest()
        {
            string testName = TestContext.DataRow["Name"] as string;
            string titleId = TestContext.DataRow["TitleId"] as string;
            int consoleTypeId = Convert.ToInt32(TestContext.DataRow["ConsoleTypeId"]);
            string offerIds = TestContext.DataRow["OfferIds"] as string;
            int mediaTypeId = Convert.ToInt32(TestContext.DataRow["MediaTypeId"]);
            string liveTitleFileName = String.Format(@"LiveContent\{0}\LiveTitle.xml", testName);

            string expectedException = string.Empty;
            if (TestContext.DataRow.Table.Columns.Contains("ExpectedException"))
            {
                expectedException = TestContext.DataRow["ExpectedException"] as string;
            }

            Console.WriteLine("Start {0}", testName);

            // initialize the game instance
            GameGuid gameGuid = new GameGuid(this.config, this.catalog, titleId, consoleTypeId);

            Console.WriteLine("Remove from Catalog");

            // remove the existing game and its associated content from the catalog, if necessary
            gameGuid.GetObject();
            gameGuid.Remove();

            Console.WriteLine("Prop Game to Catalog");

            // prop the game to the catalog
            gameGuid.SetObject(liveTitleFileName);

            string[] filenameArray = RenameDuplicateOfferIds(offerIds);

            string[] offerIdArray = offerIds.Split(';');
            for(int i = 0; i < offerIdArray.Length; ++i)
            {
                string inputFileName = String.Format(@"LiveContent\{0}\{1}\{2}.offer", testName, titleId, offerIdArray[i]);
                string liveContentFileName = String.Format(@"LiveContent\{0}\LiveContent_{1}.xml", testName, filenameArray[i]);

                // initialize the game content instance
                GameContentGuid gameContentGuid = new GameContentGuid(this.config, this.catalog, titleId, consoleTypeId, mediaTypeId, offerIdArray[i]);

                Console.WriteLine("Prop GameContent to Catalog ({0})", liveContentFileName);

                // prop the game content to the catalog
                gameContentGuid.SetObject(liveContentFileName);

                Console.WriteLine("Check for Expected Exceptions");

                // check for the expected exception, if one was provided.  If not found, continue as normal.
                if (false == gameContentGuid.ExceptionExists(expectedException))
                {
                    Console.WriteLine("Verify GameContent");

                    // verify the game content has been propped
                    //***We need to re-evaluate this function, I don't think it's working properly.***
                    //It seems to look for files that aren't there (missing on purpose) or looking for incorrectly
                    //named files (.cab instead of .xpkg, and we don't copy .xpkg to titlevault anyway)
                    //gameContentGuid.Verify(inputFileName);
                }
            }

            Console.WriteLine("Remove from Catalog");

            // remove the game and its associated content from the catalog
            gameGuid.GetObject();
            gameGuid.Remove();

            Console.WriteLine("Finish {0}", testName);
        } 
        #endregion

        #region LiveOffer
        /// <summary>
        /// The test method to test and verify live offer
        /// </summary>
        /// <param name="stringDictionary">The dictionary of name value pairs parsed from the xml file</param>
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "|DataDirectory|\\LiveOfferTests.xml", "LiveOfferTestP1", DataAccessMethod.Sequential)]
        public void LiveOfferTestsP1()
        {
            LiveOfferTest();
        }

        /// <summary>
        /// The test method to test and verify live offer
        /// </summary>
        /// <param name="stringDictionary">The dictionary of name value pairs parsed from the xml file</param>
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "|DataDirectory|\\LiveOfferTests.xml", "LiveOfferTestP2", DataAccessMethod.Sequential)]
        public void LiveOfferTestsP2()
        {
            LiveOfferTest();
        }

        /// <summary>
        /// The test method to test and verify live offer
        /// </summary>
        /// <param name="stringDictionary">The dictionary of name value pairs parsed from the xml file</param>
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "|DataDirectory|\\LiveOfferTests.xml", "LiveOfferTestP3", DataAccessMethod.Sequential)]
        public void LiveOfferTestsP3()
        {
            LiveOfferTest();
        }

        public void LiveOfferTest()
        {
            string testName = TestContext.DataRow["Name"] as string;
            string titleId = TestContext.DataRow["TitleId"] as string;
            int consoleTypeId = Convert.ToInt32(TestContext.DataRow["ConsoleTypeId"]);
            string offerIds = TestContext.DataRow["OfferIds"] as string;
            int mediaTypeId = Convert.ToInt32(TestContext.DataRow["MediaTypeId"] as string);
            string liveTitleFileName = String.Format(@"LiveOffer\{0}\LiveTitle.xml", testName);
            string expectedException = string.Empty;

            if (TestContext.DataRow.Table.Columns.Contains("ExpectedException"))
            {
                expectedException = TestContext.DataRow["ExpectedException"] as string;
            }

            Console.WriteLine("Start {0}", testName);

            // initialize the game instance
            GameGuid gameGuid = new GameGuid(this.config, this.catalog, titleId, consoleTypeId);

            Console.WriteLine("Remove from Catalog");

            // remove the existing game and its associated content from the catalog, if necessary
            gameGuid.GetObject();
            gameGuid.Remove();

            Console.WriteLine("Prop Game to Catalog");

            // prop the game to the catalog
            gameGuid.SetObject(liveTitleFileName);

            string[] filenameArray = RenameDuplicateOfferIds(offerIds);

            string[] offerIdArray = offerIds.Split(';');
            for(int i = 0; i < offerIdArray.Length; ++i)
            {
                string offerId = offerIdArray[i];

                string inputFileName = String.Format(@"LiveOffer\{0}\{1}\{2}.offer", testName, titleId, offerId);
                string liveContentFileName = String.Format(@"LiveOffer\{0}\LiveContent_{1}.xml", testName, filenameArray[i]);
                string liveOfferFileName = String.Format(@"LiveOffer\{0}\LiveOffer_{1}.xml", testName, filenameArray[i]);
                string gameContentGuidExpectedFileName = String.Format(@"LiveOffer\{0}\GameContentGuid_{1}_Expected.xml", testName, filenameArray[i]);
                string gameContentGuidActualFileName = String.Format(@"LiveOffer\{0}\GameContentGuid_{1}_Actual.xml", testName, filenameArray[i]);
                string offerGuidExpectedFileName = String.Format(@"LiveOffer\{0}\OfferGuid_{1}_Expected.xml", testName, filenameArray[i]);
                string offerGuidActualFileName = String.Format(@"LiveOffer\{0}\OfferGuid_{1}_Actual.xml", testName, filenameArray[i]);


                // initialize the game content instance
                GameContentGuid gameContentGuid = new GameContentGuid(this.config, this.catalog, titleId, consoleTypeId, mediaTypeId, offerId);

                Console.WriteLine("Prop GameContent to Catalog ({0})", liveContentFileName);

                // prop the game content to the catalog
                gameContentGuid.SetObject(liveContentFileName);

                // initialize the offer instance
                OfferGuid offerGuid = new OfferGuid(this.config, this.catalog, titleId, consoleTypeId, offerId);

                Console.WriteLine("Prop Offer to Catalog ({0})", liveOfferFileName);

                // prop the offer to the catalog
                offerGuid.SetObject(liveOfferFileName);

                Console.WriteLine("Check for Expected Exceptions");
                
                // check for the expected exception, if one was provided.  If not found, continue as normal.
                if (false == offerGuid.ExceptionExists(expectedException))
                {
                    Console.WriteLine("Get GameContent from Catalog");

                    // initialize the game content actual instance (retrieved from the catalog)
                    GameContentGuid gameContentGuidActual = new GameContentGuid(this.config, this.catalog, titleId, consoleTypeId, mediaTypeId, offerId);

                    // get the game content actual instance (retrieved from the catalog)
                    gameContentGuidActual.GetObject();

                    Console.WriteLine("Save Actual GameContent to {0}", gameContentGuidActualFileName);

                    // serialize the game content actual instance (retrieved from the catalog) to disk
                    Serializer.SerializeToFile(gameContentGuidActual, gameContentGuidActualFileName);

                    Console.WriteLine("Get Expected GameContent from {0}", gameContentGuidExpectedFileName);

                    // deserialize the game content expected instance (previously verified) from disk
                    GameContentGuid gameContentGuidExpected = Serializer.DeserializeFromFile(gameContentGuidExpectedFileName, typeof(GameContentGuid)) as GameContentGuid;

                    if (null == gameContentGuidExpected)
                    {
                        // game content expected instance (previously verified) does not exist on disk
                        Assert.Fail(String.Format("{0} does not exist.  No validation has been performed.", gameContentGuidExpectedFileName));
                    }

                    Console.WriteLine("Verify Expected GameContent == Actual GameContent");

                    // assert game content actual instance (retrieved from the catalog) and game content expected instance (previously verified) are equal
                    Assert.AreEqual(gameContentGuidExpected, gameContentGuidActual, String.Format("{0} and {1} are not equal.", gameContentGuidExpectedFileName, gameContentGuidActualFileName));

                    Console.WriteLine("Verify GameContent");

                    // verify the game content has been propped
                    //***We need to re-evaluate this function, I don't think it's working properly.***
                    //It seems to look for files that aren't there (missing on purpose) or looking for incorrectly
                    //named files (.cab instead of .xpkg, and we don't copy .xpkg to titlevault anyway)
                    //gameContentGuidActual.Verify(inputFileName);

                    Console.WriteLine("Get Offer from Catalog");

                    // initialize the offer actual instance (retrieved from the catalog)
                    OfferGuid offerGuidActual = new OfferGuid(this.config, this.catalog, titleId, consoleTypeId, offerId);

                    // get the offer actual instance (retrieved from the catalog)
                    offerGuidActual.GetObject();

                    Console.WriteLine("Save Actual Offer to {0}", offerGuidActualFileName);

                    // serialize the offer actual instance (retrieved from the catalog) to disk
                    Serializer.SerializeToFile(offerGuidActual, offerGuidActualFileName);

                    Console.WriteLine("Get Expected Offer from {0}", offerGuidExpectedFileName);

                    // deserialize the offer expected instance (previously verified) from disk
                    OfferGuid offerGuidExpected = Serializer.DeserializeFromFile(offerGuidExpectedFileName, typeof(OfferGuid)) as OfferGuid;

                    if (null == offerGuidExpected)
                    {
                        // offer expected instance (previously verified) does not exist on disk
                        Assert.Fail(String.Format("{0} does not exist.  No validation has been performed.", offerGuidExpectedFileName));
                    }

                    Console.WriteLine("Verify Expected Offer == Actual Offer");

                    // assert offer actual instance (retrieved from the catalog) and offer expected instance (previously verified) are equal
                    Assert.AreEqual(offerGuidExpected, offerGuidActual, String.Format("{0} and {1} are not equal.", offerGuidExpectedFileName, offerGuidActualFileName));

                    Console.WriteLine("Verify Offer");

                    // verify the offer has been propped
                    //***We need to re-evaluate this function, I don't think it's working properly.***
                    //It seems to look for files that aren't there (missing on purpose) or looking for incorrectly
                    //named files (.cab instead of .xpkg, and we don't copy .xpkg to titlevault anyway)
                    //offerGuidActual.Verify(inputFileName);
                }
            }
            Console.WriteLine("Remove from Catalog");

            // remove the game and its associated content from the catalog
            gameGuid.GetObject();
            gameGuid.Remove();

            Console.WriteLine("Finish {0}", testName);
        } 
        #endregion

        #region LiveTitle
        /// <summary>
        /// The test method to test and verify live title priority 1 tests
        /// </summary>
        /// <param name="stringDictionary">The dictionary of name value pairs parsed from the xml file</param>
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "|DataDirectory|\\LiveTitleTests.xml", "LiveTitleTestP1", DataAccessMethod.Sequential)]
        public void LiveTitleTestsP1()
        {
            LiveTitleTest();
        }

        /// <summary>
        /// The test method to test and verify live title priority 2 tests
        /// </summary>
        /// <param name="stringDictionary">The dictionary of name value pairs parsed from the xml file</param>
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "|DataDirectory|\\LiveTitleTests.xml", "LiveTitleTestP2", DataAccessMethod.Sequential)]
        public void LiveTitleTestsP2()
        {
            LiveTitleTest();
        }

        /// <summary>
        /// The test method to test and verify live title priority 2 tests
        /// </summary>
        /// <param name="stringDictionary">The dictionary of name value pairs parsed from the xml file</param>
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "|DataDirectory|\\LiveTitleTests.xml", "LiveTitleTestP3", DataAccessMethod.Sequential)]
        public void LiveTitleTestsP3()
        {
            LiveTitleTest();
        }

        public void LiveTitleTest()
        {
            string testName = TestContext.DataRow["Name"] as string;
            string titleId = TestContext.DataRow["TitleId"] as string;
            int consoleTypeId = Convert.ToInt32(TestContext.DataRow["ConsoleTypeId"]);
            string liveTitleFileName = String.Format(@"LiveTitle\{0}\LiveTitle.xml", testName);
            string gameGuidExpectedFileName = String.Format(@"LiveTitle\{0}\GameGuid_Expected.xml", testName);
            string gameGuidActualFileName = String.Format(@"LiveTitle\{0}\GameGuid_Actual.xml", testName);
            string expectedException = string.Empty;

            if(TestContext.DataRow.Table.Columns.Contains("ExpectedException"))
            {
                expectedException = TestContext.DataRow["ExpectedException"] as string;
            }

            Console.WriteLine("Start {0}", testName);

            // initialize the game instance
            GameGuid gameGuid = new GameGuid(this.config, this.catalog, titleId, consoleTypeId);

            Console.WriteLine("Remove from Catalog");

            // remove the existing game and its associated content from the catalog, if necessary
            gameGuid.GetObject();
            gameGuid.Remove();

            Console.WriteLine("Prop Game to Catalog");

            // prop the game to the catalog
            gameGuid.SetObject(liveTitleFileName);

            Console.WriteLine("Check for Expected Exceptions");

            // check for the expected exception, if one was provided.  If not found, continue as normal.
            if(false == gameGuid.ExceptionExists(expectedException))
            {
                Console.WriteLine("Get Game from Catalog");

                // initialize the game actual instance (retrieved from the catalog)
                GameGuid gameGuidActual = new GameGuid(this.config, this.catalog, titleId, consoleTypeId);

                // get the game actual instance (retrieved from the catalog)
                gameGuidActual.GetObject();

                Console.WriteLine("Save Actual Game to {0}", gameGuidActualFileName);

                // serialize the game actual instance (retrieved from the catalog) to disk
                Serializer.SerializeToFile(gameGuidActual, gameGuidActualFileName);

                Console.WriteLine("Get Expected Game from {0}", gameGuidExpectedFileName);

                // deserialize the game expected instance (previously verified) from disk
                GameGuid gameGuidExpected = Serializer.DeserializeFromFile(gameGuidExpectedFileName, typeof(GameGuid)) as GameGuid;

                if (null == gameGuidExpected)
                {
                    // game expected instance (previously verified) does not exist on disk
                    Assert.Fail("GameGuid_Expected.xml does not exist.  No validation has been performed.");
                }

                Console.WriteLine("Verify Expected Game == Actual Game");

                // assert game actual instance (retrieved from the catalog) and game expected instance (previously verified) are equal
                Assert.AreEqual(gameGuidExpected, gameGuidActual, String.Format("{0} and {1} are not equal.", gameGuidExpectedFileName, gameGuidActualFileName));

                Console.WriteLine("Verify Game");

                // verify the game has been propped
                string inputFileName = String.Format(@"LiveTitle\{0}\{1}\{2}.marketplace", testName, titleId, titleId);
                if (false == File.Exists(inputFileName))
                {
                    inputFileName = String.Format(@"LiveTitle\{0}\{1}\{2}.xlast", testName, titleId, titleId);
                }
                if (false == File.Exists(inputFileName))
                {
                    //There's a possibility of there being multiple xlast files, in which case the naming convention
                    //is {titleId}_{integer 1-9}.xlast.  We want to verify the very last title propped.
                    int xlastId = 1;
                    string tempFileName = String.Format(@"LiveTitle\{0}\{1}\{2}_{3}.xlast", testName, titleId, titleId, xlastId);
                    while (File.Exists(tempFileName))
                    {
                        inputFileName = tempFileName;
                        ++xlastId;
                        tempFileName = String.Format(@"LiveTitle\{0}\{1}\{2}_{3}.xlast", testName, titleId, titleId, xlastId);
                    }
                }

                gameGuidActual.Verify(inputFileName);
            }

            Console.WriteLine("Remove from Catalog");

            // remove the game and its associated content from the catalog
            gameGuid.GetObject();
            gameGuid.Remove();

            Console.WriteLine("Finish {0}", testName);
        } 
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\GameContentGuid.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="GameContentGuid.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   class to build a game content guid from a title id, console type id, media type id, and offer id
// </summary>
//-----------------------------------------------------------------------
namespace LiveToolsTesting
{
    using System;
    using System.IO;
    using System.Xml;
    using System.Xml.XPath;

    using Microsoft.VisualStudio.TestTools.UnitTesting;

    using ContentIngestionService;

    /// <summary>
    /// Represents a game content object within the catalog
    /// </summary>
    public class GameContentGuid : GenericGuid
    {
        /// <summary>
        /// gameContent is the game content object returned from the web service
        /// </summary>
        private GameContent gameContent;

        /// <summary>
        /// offerId is the offer id for this game content
        /// </summary>
        private string offerId;

        /// <summary>
        /// Initializes a new instance of the GameContentGuid class
        /// </summary>
        /// <param name="config">The instance of the Config class exposing all of the configuration</param>
        /// <param name="catalog">The instance of the Catalog class for interacting with the catalog</param>
        /// <param name="titleId">The specified title id</param>
        /// <param name="consoleTypeId">The specified console type id</param>
        /// <param name="offerId">The specified offer id</param>
        public GameContentGuid(Config config, Catalog catalog, string titleId, int consoleTypeId, int mediaTypeId, string offerId)
            : base(config, catalog, titleId, consoleTypeId)
        {
            this.offerId = "0x" + offerId;

            ulong offerIdValue = ulong.Parse(offerId, System.Globalization.NumberStyles.HexNumber);
            ulong offerIdLow = offerIdValue & 0x00000000FFFFFFFF;
            ulong offerIdHigh = offerIdValue >> 32;

            int arcadeGameMediaType = 23;
            int gameMediaType = 1;

            if (mediaTypeId == arcadeGameMediaType || mediaTypeId == gameMediaType)
            {
                this.Guid = new Guid("66ACD000-77FE-1000-9115-D8" + consoleTypeId.ToString("D2") + titleId);
            }
            else
            {
                this.Guid = new Guid("00000000-0000-40" + (offerIdLow >> 24).ToString("X2") + "-80" + ((offerIdLow & 0x00FF0000) >> 16).ToString("X2") + "-" + (offerIdLow & 0x0000FFFF).ToString("X4") + offerIdHigh.ToString("X8"));
            }
        }

        /// <summary>
        /// Initializes a new instance of the GameContentGuid class
        /// </summary>
        internal GameContentGuid()
            : base()
        {
        }

        /// <summary>
        /// Gets or sets the game content object returned from the web service
        /// </summary>
        public GameContent GameContent
        {
            get { return this.gameContent; }
            set { this.gameContent = value; }
        }

        /// <summary>
        /// Determines whether the two objects have the same value
        /// </summary>
        /// <param name="left">The left comparand</param>
        /// <param name="right">The right comparand</param>
        /// <returns>true if the value of left and right are the same; otherwise, false</returns>
        public static bool operator ==(GameContentGuid left, GameContentGuid right)
        {
            if (true == System.Object.ReferenceEquals(left, right))
            {
                return true;
            }

            if ((null == left) || (null == right))
            {
                return false;
            }

            return left.Equals(right);
        }

        /// <summary>
        /// Determines whether the two objects have different values
        /// </summary>
        /// <param name="left">The left comparand</param>
        /// <param name="right">The right comparand</param>
        /// <returns>true if the value of left and right are different; otherwise, false</returns>
        public static bool operator !=(GameContentGuid left, GameContentGuid right)
        {
            return !(left == right);
        }

        /// <summary>
        /// Determines whether the two objects have the same value
        /// </summary>
        /// <param name="other">The specified object</param>
        /// <returns>true if the value of other is the same as this instance; otherwise, false</returns>
        public bool Equals(GameContentGuid other)
        {
            return base.Equals(other, typeof(GameContentGuid));
        }

        /// <summary>
        /// Determines whether the two objects have the same value
        /// </summary>
        /// <param name="obj">The specified object</param>
        /// <returns>true if the value of other is the same as this instance; otherwise, false</returns>
        public override bool Equals(object obj)
        {
            if (false == (obj is GameContentGuid))
            {
                return false;
            }

            return this.Equals(obj as GameContentGuid);
        }

        /// <summary>
        /// Returns the hash code for the current object
        /// </summary>
        /// <returns>The hash code for the current object</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Get the game content and its associated content from the catalog
        /// </summary>
        public override void GetObject()
        {
            this.gameContent = this.Catalog.GetGameContent(this.Guid);

            if (null != this.gameContent)
            {
                this.ObjectExists = true;
                this.GetImages(this.gameContent.Relationships);
            }
        }

        /// <summary>
        /// Set the game content and its associated content into the catalog
        /// </summary>
        /// <param name="fileName">The file name containing the game content to add</param>
        public override void SetObject(string fileName)
        {
            this.ObjectExists = this.Catalog.SetGameContent(this.TitleId, fileName);
        }

        /// <summary>
        /// Verifies this game content and its associated content within the catalog
        /// </summary>
        /// <param name="fileName">The file name containg the game content to add</param>
        public override void Verify(string fileName)
        {
            Console.WriteLine("Get ContentID ({0})", fileName);

            string titleIdPath = this.TitleId.Substring(2);
            string offerIdPath = this.offerId.Substring(2);

            // get the content id from the offer file
            XPathNavigator xpathNavigator = null;
            using (FileStream fileStream = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Read))
            {
                using (StreamReader streamReader = new StreamReader(fileStream))
                {
                    xpathNavigator = new XPathDocument(streamReader).CreateNavigator();
                }
            }

            XmlNamespaceManager xmlNamespaceManager = new XmlNamespaceManager(xpathNavigator.NameTable);
            xmlNamespaceManager.AddNamespace("ns", xpathNavigator.SelectSingleNode("*").NamespaceURI);

            XPathNavigator xpathNavigatorContentId = xpathNavigator.SelectSingleNode(".//ns:LiveOffer/ns:content/ns:contentID", xmlNamespaceManager);
            string contentId = xpathNavigatorContentId.Value.Substring(2);

            // check if the cab file exists in titlevault
            string titleVaultFile = String.Format(@"{0}\{1}\{2}_{3}.cab", this.Config.TitleVaultPath, titleIdPath, offerIdPath, contentId);

            Console.WriteLine("Check GameContent File in TitleVault ({0})", titleVaultFile);

            if (true == this.ObjectExists)
            {
                Assert.IsTrue(File.Exists(titleVaultFile), String.Format("{0} does not exist and it should", titleVaultFile));
            }
            else
            {
                Assert.IsFalse(File.Exists(titleVaultFile), String.Format("{0} exists and it should not", titleVaultFile));
            }

            // check if the package file exists on the download server
            string packageFile = null;

            if (4 == this.ConsoleTypeId)
            {
                packageFile = String.Format(@"\\{0}\Content\{1}\{2}.cab", this.Config.DownloadServer, titleIdPath, titleIdPath);
            }
            else
            {
                packageFile = String.Format(@"\\{0}\Content\{1}\{2}.xcp", this.Config.DownloadServer, titleIdPath, contentId);
            }

            Console.WriteLine("Check GameContent File on Download Server ({0})", packageFile);

            if (true == this.ObjectExists)
            {
                Assert.IsTrue(File.Exists(packageFile), String.Format("{0} does not exist and it should", packageFile));
            }
            else
            {
                Assert.IsFalse(File.Exists(packageFile), String.Format("{0} exists and it should not", packageFile));
            }

            base.Verify(fileName);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\Catalog.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="Catalog.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   class to interact with the catalog
// </summary>
//-----------------------------------------------------------------------
namespace LiveToolsTesting
{
    using System;
    using System.Collections.Generic;
    using System.Data.SqlClient;
    using System.IO;
    using System.Reflection;

    using Microsoft.VisualStudio.TestTools.UnitTesting;

    using ContentIngestionService;

    /// <summary>
    /// Provides access to get, set, and remove objects from the catalog
    /// </summary>
    public class Catalog
    {
        /// <summary>
        /// applicationName is the application name sent in the sql command
        /// </summary>
        private string applicationName;

        /// <summary>
        /// catalogDatabase is the name of the sql database hosting the catalog
        /// </summary>
        private string catalogDatabase;

        /// <summary>
        /// catalogServer is the name of the sql server hosting the catalog
        /// </summary>
        private string catalogServer;

        /// <summary>
        /// catalogServices is the web service instance to the catalog
        /// </summary>
        private CatalogServicesInternal catalogServices = new CatalogServicesInternal();

        /// <summary>
        /// environment is the name of the current xbox live environment
        /// </summary>
        private string environment;

        /// <summary>
        /// exePath is the full path to the live tools
        /// </summary>
        private string exePath;

        /// <summary>
        /// tokenReplace is the instance to replace the tokens in a command line
        /// </summary>
        private TokenReplace tokenReplace = new TokenReplace();

        /// <summary>
        /// sqlGameRemove is the sql script to remove the game and its associated content from the catalog
        /// </summary>
        private string sqlGameRemove;

        /// <summary>
        /// uodbDatabase is the name of the sql database hosting uodb
        /// </summary>
        private string uodbDatabase;

        /// <summary>
        /// uodbServer is the name of the sql server hosting uodb
        /// </summary>
        private string uodbServer;

        /// <summary>
        /// processOutputList is the output from the LiveTools executables after they've been run
        /// </summary>
        private ProcessOutputList processOutputList;

        public ProcessOutputList ProcessOutputList
        {
            get { return processOutputList; }
        }

        /// <summary>
        /// Initializes a new instance of the Catalog class
        /// </summary>
        /// <param name="config">The instance of the Config class exposing all of the configuration</param>
        public Catalog(Config config)
        {
            string[] fullName = Assembly.GetExecutingAssembly().FullName.Split(',');
            this.applicationName = fullName[0] + " (" + fullName[1].Trim() + ")";

            this.catalogServices.Url = config.CatalogServicesUrl;

            this.catalogServer = config.CatalogServer;
            this.catalogDatabase = config.CatalogDatabase;

            this.environment = config.Environment;

            this.exePath = config.LiveToolsPath;

            this.tokenReplace.Add("%LBS%", config.LeaderboardServer);
            this.tokenReplace.Add("%MATCHSVR%", config.MatchServer);

            this.uodbServer = config.UodbServer;
            this.uodbDatabase = config.UodbDatabase;

            // load the game remove sql script
            using (Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream("LiveToolsTesting.Resources.GameRemove.sql"))
            {
                using (StreamReader streamReader = new StreamReader(stream))
                {
                    this.sqlGameRemove = streamReader.ReadToEnd();
                }
            }
        }

        /// <summary>
        /// Get the game object from the catalog
        /// </summary>
        /// <param name="value">The specified game guid to get</param>
        /// <returns>The game object from the catalog</returns>
        public Game GetGame(Guid value)
        {
            return this.catalogServices.GetGame(value);
        }

        /// <summary>
        /// Get the game content object from the catalog
        /// </summary>
        /// <param name="value">The specified game content guid to get</param>
        /// <returns>The game content object from the catalog</returns>
        public GameContent GetGameContent(Guid value)
        {
            return this.catalogServices.GetGameContent(value);
        }

        /// <summary>
        /// Get the image object from the catalog
        /// </summary>
        /// <param name="value">The specified image guid to get</param>
        /// <returns>The image object from the catalog</returns>
        public Image GetImage(Guid value)
        {
            return this.catalogServices.GetImage(value);
        }

        /// <summary>
        /// Get the offer object from the catalog
        /// </summary>
        /// <param name="value">The specified offer guid to get</param>
        /// <returns>The offer object from the catalog</returns>
        public Offer GetOffer(Guid value)
        {
            return this.catalogServices.GetOffer(value);
        }

        /// <summary>
        /// Get the system updates from the catalog
        /// </summary>
        /// <param name="titleId">The title id specifying the system updates to get from the catalog</param>
        /// <returns>The system updates from the catalog</returns>
        public SystemUpdate[] GetSystemUpdates(string titleId)
        {
            if (0 != String.Compare("0xFFFE07D1", titleId, true))
            {
                return null;
            }

            SqlConnectionStringBuilder sqlConnectionStringBuilder = new SqlConnectionStringBuilder();
            sqlConnectionStringBuilder.ApplicationName = this.applicationName;
            sqlConnectionStringBuilder.DataSource = "NPDB";
            sqlConnectionStringBuilder.InitialCatalog = "NPDB";
            sqlConnectionStringBuilder.IntegratedSecurity = true;

            List<SystemUpdate> listSystemUpdates = new List<SystemUpdate>();

            // get the system updates
            using (SqlConnection sqlConnection = new SqlConnection(sqlConnectionStringBuilder.ConnectionString))
            {
                SqlCommand sqlCommand = sqlConnection.CreateCommand();
                sqlCommand.CommandText = String.Format("SELECT * FROM [t_live_registry_settings] WHERE [vc_environment] = '{0}' AND [si_build] IS NOT NULL AND [si_qfe] IS NOT NULL", this.environment);

                sqlConnection.Open();

                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                while (true == sqlDataReader.Read())
                {
                    listSystemUpdates.Add(new SystemUpdate((int)sqlDataReader["si_build"], (int)sqlDataReader["si_qfe"], (int)sqlDataReader["ti_beta_machine"], (string)sqlDataReader["vc_setting"], (string)sqlDataReader["vc_value"]));
                }
            }

            SystemUpdate[] systemUpdates = new SystemUpdate[listSystemUpdates.Count];
            listSystemUpdates.CopyTo(systemUpdates);

            return systemUpdates;
        }

        /// <summary>
        /// Get the title versions from the catalog
        /// </summary>
        /// <param name="titleId">The title id specifying the title versions to get from the catalog</param>
        /// <returns>The title versions from the catalog</returns>
        public TitleVersion[] GetTitleVersions(string titleId)
        {
            SqlConnectionStringBuilder sqlConnectionStringBuilder = new SqlConnectionStringBuilder();
            sqlConnectionStringBuilder.ApplicationName = this.applicationName;
            sqlConnectionStringBuilder.DataSource = this.uodbServer;
            sqlConnectionStringBuilder.InitialCatalog = this.uodbDatabase;
            sqlConnectionStringBuilder.IntegratedSecurity = true;

            List<TitleVersion> listTitleVersions = new List<TitleVersion>();

            // get the title versions
            using (SqlConnection sqlConnection = new SqlConnection(sqlConnectionStringBuilder.ConnectionString))
            {
                SqlCommand sqlCommand = sqlConnection.CreateCommand();
                sqlCommand.CommandText = String.Format("SELECT * FROM [t_title_versions] WHERE [i_title_id] = {0}", titleId);

                sqlConnection.Open();

                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                while (true == sqlDataReader.Read())
                {
                    listTitleVersions.Add(new TitleVersion((int)sqlDataReader["i_base_version"], (int)sqlDataReader["i_update_version"], (int)sqlDataReader["i_beta_version"]));
                }
            }

            foreach (TitleVersion titleVersion in listTitleVersions)
            {
                // get the title update packages
                using (SqlConnection sqlConnection = new SqlConnection(sqlConnectionStringBuilder.ConnectionString))
                {
                    SqlCommand sqlCommand = sqlConnection.CreateCommand();
                    sqlCommand.CommandText = String.Format("SELECT * FROM [t_title_update_packages] WHERE [i_title_id] = {0} AND [i_title_base_version] = {1} AND [i_title_update_version] = {2}", titleId, titleVersion.BaseVersion, titleVersion.UpdateVersion);

                    sqlConnection.Open();

                    titleVersion.UpdatePackages = sqlCommand.ExecuteNonQuery();
                }

                // get the title update locations
                using (SqlConnection sqlConnection = new SqlConnection(sqlConnectionStringBuilder.ConnectionString))
                {
                    SqlCommand sqlCommand = sqlConnection.CreateCommand();
                    sqlCommand.CommandText = String.Format("SELECT * FROM [t_title_update_locations] WHERE [i_title_id] = {0} AND [i_title_base_version] = {1} AND [i_title_update_version] = {2}", titleId, titleVersion.BaseVersion, titleVersion.UpdateVersion);

                    sqlConnection.Open();

                    titleVersion.UpdateLocations = sqlCommand.ExecuteNonQuery();
                }
            }

            TitleVersion[] titleVersions = new TitleVersion[listTitleVersions.Count];
            listTitleVersions.CopyTo(titleVersions);

            return titleVersions;
        }

        /// <summary>
        /// Remove the game and its associated content from the catalog
        /// </summary>
        /// <param name="value">The media id for the game</param>
        public void Remove(Guid value)
        {
            SqlConnectionStringBuilder sqlConnectionStringBuilder = new SqlConnectionStringBuilder();
            sqlConnectionStringBuilder.ApplicationName = this.applicationName;
            sqlConnectionStringBuilder.DataSource = this.catalogServer;
            sqlConnectionStringBuilder.InitialCatalog = this.catalogDatabase;
            sqlConnectionStringBuilder.IntegratedSecurity = true;

            // remove the system update
            using (SqlConnection sqlConnection = new SqlConnection(sqlConnectionStringBuilder.ConnectionString))
            {
                sqlConnection.Open();

                // create the sql transaction so we can rollback on any error
                SqlTransaction sqlTransaction = sqlConnection.BeginTransaction();

                // create the sql parameter which is the title id
                SqlParameter sqlParameterTitleId = new SqlParameter();
                sqlParameterTitleId.DbType = System.Data.DbType.String;
                sqlParameterTitleId.ParameterName = "@titleId";
                sqlParameterTitleId.Value = value.ToString().Substring(28);

                // create the sql parameter which is the media id (guid)
                SqlParameter sqlParameter = new SqlParameter();
                sqlParameter.DbType = System.Data.DbType.Guid;
                sqlParameter.ParameterName = "@mediaId";
                sqlParameter.Value = value;

                // create the sql command which is the game remove script
                SqlCommand sqlCommand = sqlConnection.CreateCommand();
                sqlCommand.CommandText = this.sqlGameRemove;
                sqlCommand.Parameters.Add(sqlParameter);
                sqlCommand.Parameters.Add(sqlParameterTitleId);
                sqlCommand.Transaction = sqlTransaction;

                try
                {
                    // execute the sql command
                    sqlCommand.ExecuteNonQuery();

                    // commit the transaction
                    sqlTransaction.Commit();
                }
                catch (SqlException e)
                {
                    try
                    {
                        // attempt to rollback the transaction
                        sqlTransaction.Rollback();
                    }
                    catch (SqlException)
                    {
                    }

                    Assert.Fail(String.Format("Cannot Remove Game From Catalog.  SqlException: {0}", e.Message));
                }

                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Remove the system update from the catalog
        /// </summary>
        /// <param name="systemUpdate">The system update object to remove from the catalog</param>
        public void RemoveSystemUpdate(SystemUpdate systemUpdate)
        {
            SqlConnectionStringBuilder sqlConnectionStringBuilder = new SqlConnectionStringBuilder();
            sqlConnectionStringBuilder.ApplicationName = this.applicationName;
            sqlConnectionStringBuilder.DataSource = "NPDB";
            sqlConnectionStringBuilder.InitialCatalog = "NPDB";
            sqlConnectionStringBuilder.IntegratedSecurity = true;

            // remove the system update
            using (SqlConnection sqlConnection = new SqlConnection(sqlConnectionStringBuilder.ConnectionString))
            {
                SqlCommand sqlCommand = sqlConnection.CreateCommand();
                sqlCommand.CommandText = String.Format("DELETE FROM [t_live_registry_settings] WHERE [vc_environment] = '{0}' AND [si_build] = {1} AND [si_qfe] = {2}", this.environment, systemUpdate.Build, systemUpdate.Qfe);

                sqlConnection.Open();

                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Remove the title versions from the catalog
        /// </summary>
        /// <param name="titleId">The title id of the game</param>
        /// <param name="titleVersion">The title version to remove from the catalog</param>
        public void RemoveTitleVersion(string titleId, TitleVersion titleVersion)
        {
            SqlConnectionStringBuilder sqlConnectionStringBuilder = new SqlConnectionStringBuilder();
            sqlConnectionStringBuilder.ApplicationName = this.applicationName;
            sqlConnectionStringBuilder.DataSource = this.uodbServer;
            sqlConnectionStringBuilder.InitialCatalog = this.uodbDatabase;
            sqlConnectionStringBuilder.IntegratedSecurity = true;

            // remove the title update locations
            using (SqlConnection sqlConnection = new SqlConnection(sqlConnectionStringBuilder.ConnectionString))
            {
                SqlCommand sqlCommand = sqlConnection.CreateCommand();
                sqlCommand.CommandText = String.Format("DELETE FROM [t_title_update_locations] WHERE [i_title_id] = {0} AND [i_title_base_version] = {1} AND [i_title_update_version] = {2}", titleId, titleVersion.BaseVersion, titleVersion.UpdateVersion);

                sqlConnection.Open();

                sqlCommand.ExecuteNonQuery();
            }

            // remove the title update packages
            using (SqlConnection sqlConnection = new SqlConnection(sqlConnectionStringBuilder.ConnectionString))
            {
                SqlCommand sqlCommand = sqlConnection.CreateCommand();
                sqlCommand.CommandText = String.Format("DELETE FROM [t_title_update_packages] WHERE [i_title_id] = {0} AND [i_title_base_version] = {1} AND [i_title_update_version] = {2}", titleId, titleVersion.BaseVersion, titleVersion.UpdateVersion);

                sqlConnection.Open();

                sqlCommand.ExecuteNonQuery();
            }

            // remove the title version
            using (SqlConnection sqlConnection = new SqlConnection(sqlConnectionStringBuilder.ConnectionString))
            {
                SqlCommand sqlCommand = sqlConnection.CreateCommand();
                sqlCommand.CommandText = String.Format("DELETE FROM [t_title_versions] WHERE [i_title_id] = {0} AND [i_base_version] = {1} AND [i_update_version] = {2} AND [i_beta_version] = {3}", titleId, titleVersion.BaseVersion, titleVersion.UpdateVersion, titleVersion.BaseVersion);

                sqlConnection.Open();

                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Add the game to the catalog
        /// </summary>
        /// <param name="titleId">The title id of the game</param>
        /// <param name="fileName">The file name containing the game to add</param>
        /// <returns>true if the game was added; otherwise, false</returns>
        public bool SetGame(string titleId, string fileName)
        {
            return this.SetObject("LiveTitle.exe", fileName, titleId.Substring(2));
        }

        /// <summary>
        /// Add the game content to the catalog
        /// </summary>
        /// <param name="titleId">The title id of the game</param>
        /// <param name="fileName">The file name containing the game content to add</param>
        /// <returns>true if the game content was added; otherwise, false</returns>
        public bool SetGameContent(string titleId, string fileName)
        {
            return this.SetObject("LiveContent.exe", fileName, titleId.Substring(2));
        }

        /// <summary>
        /// Add the offer to the catalog
        /// </summary>
        /// <param name="titleId">The title id of the game</param>
        /// <param name="fileName">The file name containing the offer to add</param>
        /// <returns>true if the offer was added; otherwise, false</returns>
        public bool SetOffer(string titleId, string fileName)
        {
            return this.SetObject("LiveOffer.exe", fileName, titleId.Substring(2));
        }

        /// <summary>
        /// Add an object to the catalog
        /// </summary>
        /// <param name="exeName">The name of the executable to add the object to the catalog</param>
        /// <param name="fileName">The file name containing the object to add</param>
        /// <param name="workingSubdirectory">The path to the working directory for the executable</param>
        /// <returns>true if the object was added; otherwise, false</returns>
        private bool SetObject(string exeName, string fileName, string workingSubdirectory)
        {
            string workingDirectory = Path.Combine(Path.GetDirectoryName(Path.GetFullPath(fileName)), workingSubdirectory);
            processOutputList = new ProcessOutputList(this.tokenReplace, this.exePath, exeName, fileName, workingDirectory);
            processOutputList.Run();

            foreach (ProcessOutput processOutput in processOutputList.ProcessOutputs)
            {
                if (0 != processOutput.ExitCode)
                {
                    return false;
                }
            }

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\GameGuid.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="GameGuid.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   class to build a game guid from a title id and console type id
// </summary>
//-----------------------------------------------------------------------
namespace LiveToolsTesting
{
    using System;
    using System.IO;
    using System.Xml;

    using Microsoft.VisualStudio.TestTools.UnitTesting;

    using Microsoft.XmlDiffPatch;

    using ContentIngestionService;

    /// <summary>
    /// Represents a game object within the catalog
    /// </summary>
    public class GameGuid : GenericGuid
    {
        /// <summary>
        /// Game is the game object returned from the web service
        /// </summary>
        private Game game;

        /// <summary>
        /// systemUpdates is the array of system update objects for this game
        /// </summary>
        private SystemUpdate[] systemUpdates;

        /// <summary>
        /// titleVersions is the array of title version objects for this game
        /// </summary>
        private TitleVersion[] titleVersions;

        /// <summary>
        /// Initializes a new instance of the GameGuid class
        /// </summary>
        /// <param name="config">The instance of the Config class exposing all of the configuration</param>
        /// <param name="catalog">The instance of the Catalog class for interacting with the catalog</param>
        /// <param name="titleId">The specified title id</param>
        /// <param name="consoleTypeId">The specified console type id</param>
        public GameGuid(Config config, Catalog catalog, string titleId, int consoleTypeId)
            : base(config, catalog, titleId, consoleTypeId)
        {
            this.Guid = new Guid("66ACD000-77FE-1000-9115-D8" + consoleTypeId.ToString("D2") + titleId);
        }

        /// <summary>
        /// Initializes a new instance of the GameGuid class
        /// </summary>
        internal GameGuid()
            : base()
        {
        }

        /// <summary>
        /// Gets or sets the game object returned from the web service
        /// </summary>
        public Game Game
        {
            get { return this.game; }
            set { this.game = value; }
        }

        /// <summary>
        /// Gets or sets the array of system update objects for this game
        /// </summary>
        public SystemUpdate[] SystemUpdates
        {
            get { return this.systemUpdates; }
            set { this.systemUpdates = value; }
        }

        /// <summary>
        /// Gets or sets the array of title version objects for this game
        /// </summary>
        public TitleVersion[] TitleVersions
        {
            get { return this.titleVersions; }
            set { this.titleVersions = value; }
        }

        /// <summary>
        /// Determines whether the two objects have the same value
        /// </summary>
        /// <param name="left">The left comparand</param>
        /// <param name="right">The right comparand</param>
        /// <returns>true if the value of left and right are the same; otherwise, false</returns>
        public static bool operator ==(GameGuid left, GameGuid right)
        {
            if (true == System.Object.ReferenceEquals(left, right))
            {
                return true;
            }

            if ((null == left) || (null == right))
            {
                return false;
            }

            return left.Equals(right);
        }

        /// <summary>
        /// Determines whether the two objects have different values
        /// </summary>
        /// <param name="left">The left comparand</param>
        /// <param name="right">The right comparand</param>
        /// <returns>true if the value of left and right are different; otherwise, false</returns>
        public static bool operator !=(GameGuid left, GameGuid right)
        {
            return !(left == right);
        }

        /// <summary>
        /// Determines whether the two objects have the same value
        /// </summary>
        /// <param name="other">The specified object</param>
        /// <returns>true if the value of other is the same as this instance; otherwise, false</returns>
        public bool Equals(GameGuid other)
        {
            return base.Equals(other, typeof(GameGuid));
        }

        /// <summary>
        /// Determines whether the two objects have the same value
        /// </summary>
        /// <param name="obj">The specified object</param>
        /// <returns>true if the value of other is the same as this instance; otherwise, false</returns>
        public override bool Equals(object obj)
        {
            if (false == (obj is GameGuid))
            {
                return false;
            }

            return this.Equals(obj as GameGuid);
        }

        /// <summary>
        /// Returns the hash code for the current object
        /// </summary>
        /// <returns>The hash code for the current object</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Get the game and its associated content from the catalog
        /// </summary>
        public override void GetObject()
        {
            this.game = this.Catalog.GetGame(this.Guid);

            if (null != this.game)
            {
                this.ObjectExists = true;
                this.GetImages(this.game.Relationships);
            }

            this.titleVersions = this.Catalog.GetTitleVersions(this.TitleId);
            this.systemUpdates = this.Catalog.GetSystemUpdates(this.TitleId);
        }

        /// <summary>
        /// Remove the game and its associated content from the catalog
        /// </summary>
        public void Remove()
        {
            if (null != this.game)
            {
                this.Catalog.Remove(this.game.Id);
            }

            if (null != this.titleVersions)
            {
                foreach (TitleVersion titleVersion in this.titleVersions)
                {
                    this.Catalog.RemoveTitleVersion(this.TitleId, titleVersion);
                }
            }

            if (null != this.systemUpdates)
            {
                foreach (SystemUpdate systemUpdate in this.systemUpdates)
                {
                    this.Catalog.RemoveSystemUpdate(systemUpdate);
                }
            }
        }

        /// <summary>
        /// Set the game and its associated content into the catalog
        /// </summary>
        /// <param name="fileName">The file name containg the game to add</param>
        public override void SetObject(string fileName)
        {
            this.ObjectExists = this.Catalog.SetGame(this.TitleId, fileName);
        }

        /// <summary>
        /// Verifies this game and its associated content within the catalog
        /// </summary>
        /// <param name="fileName">The file name containg the game to add</param>
        public override void Verify(string fileName)
        {
            Console.WriteLine("Check File in TitleVault ({0})", fileName);

            // check if file exists in titlevault
            string titleVaultPath = String.Format("{0}\\{1}", this.Config.TitleVaultPath, this.TitleId.Substring(2));

            string titleVaultFile = String.Format("{0}\\{1}{2}", titleVaultPath, this.TitleId.Substring(2), Path.GetExtension(fileName));

            if (true == this.ObjectExists)
            {
                Assert.IsTrue(File.Exists(titleVaultFile), String.Format("{0} does not exist and it should", titleVaultFile));
            }
            else
            {
                Assert.IsFalse(File.Exists(titleVaultFile), String.Format("{0} exists and it should not", titleVaultFile));
            }

            // check if ltc exists in titlevault
            if ("marketplace" != Path.GetExtension(fileName))
            {
                string titleVaultLtc = String.Format("{0}\\{1}_ltc.xml", titleVaultPath, this.TitleId.Substring(2));

                Console.WriteLine("Check LTC in TitleVault ({0})", titleVaultLtc);

                if (true == this.ObjectExists)
                {
                    Assert.IsTrue(File.Exists(titleVaultLtc), String.Format("{0} does not exist and it should", titleVaultLtc));
                }
                else
                {
                    Assert.IsFalse(File.Exists(titleVaultLtc), String.Format("{0} exists and it should not", titleVaultLtc));
                }
            }

            base.Verify(fileName);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\GenericGuid.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="GenericGuid.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   generic guid class
// </summary>
//-----------------------------------------------------------------------
namespace LiveToolsTesting
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Xml;
    using System.Xml.XPath;

    using Microsoft.VisualStudio.TestTools.UnitTesting;

    using ContentIngestionService;
    using Microsoft.XmlDiffPatch;

    /// <summary>
    /// Represents an object within the catalog
    /// </summary>
    public abstract class GenericGuid : IEquatable<GenericGuid>
    {
        /// <summary>
        /// catalog is the catalog object for interacting with the catalog
        /// </summary>
        private Catalog catalog;

        /// <summary>
        /// config is the config object for accessing the configuration
        /// </summary>
        private Config config;

        /// <summary>
        /// consoleTypeId is the console type id for the game
        /// </summary>
        private int consoleTypeId;

        /// <summary>
        /// guid is the media id of this object
        /// </summary>
        private Guid guid;

        /// <summary>
        /// images is the array of images associated with this object
        /// </summary>
        private Image[] images;

        /// <summary>
        /// objectExists specifies if the object exists in the catalog
        /// </summary>
        private bool objectExists;

        /// <summary>
        /// titleId is the title id for the game
        /// </summary>
        private string titleId;

        /// <summary>
        /// xmlDiffReport is the object for comparing instances of this class
        /// </summary>
        internal XmlDiffReport xmlDiffReport = new XmlDiffReport();

        /// <summary>
        /// Initializes a new instance of the GenericGuid class
        /// </summary>
        /// <param name="config">The instance of the Config class exposing all of the configuration</param>
        /// <param name="catalog">The instance of the Catalog class for interacting with the catalog</param>
        /// <param name="titleId">The title id of the game</param>
        /// <param name="consoleTypeId">The console type id of the game</param>
        public GenericGuid(Config config, Catalog catalog, string titleId, int consoleTypeId)
        {
            this.config = config;
            this.catalog = catalog;
            this.titleId = "0x" + titleId;
            this.consoleTypeId = consoleTypeId;
        }

        /// <summary>
        /// Initializes a new instance of the GenericGuid class
        /// </summary>
        internal GenericGuid()
        {
        }

        /// <summary>
        /// Gets the catalog object for interacting with the catalog
        /// </summary>
        public Catalog Catalog
        {
            get { return this.catalog; }
        }

        /// <summary>
        /// Gets the config object for accessing the configuration
        /// </summary>
        public Config Config
        {
            get { return this.config; }
        }

        /// <summary>
        /// Gets or sets the console type id for the game
        /// </summary>
        public int ConsoleTypeId
        {
            get { return this.consoleTypeId; }
            set { this.consoleTypeId = value; }
        }

        /// <summary>
        /// Gets or sets the media id for this object
        /// </summary>
        public Guid Guid
        {
            get { return this.guid; }
            set { this.guid = value; }
        }

        /// <summary>
        /// Gets or sets the array of images associated with this object
        /// </summary>
        public Image[] Images
        {
            get { return this.images; }
            set { this.images = value; }
        }

        /// <summary>
        /// Gets or sets the title id for the game
        /// </summary>
        public string TitleId
        {
            get { return this.titleId; }
            set { this.titleId = value; }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the object exists in the catalog
        /// </summary>
        internal bool ObjectExists
        {
            get { return this.objectExists; }
            set { this.objectExists = value; }
        }

        /// <summary>
        /// Determines whether the two objects have the same value
        /// </summary>
        /// <param name="left">The left comparand</param>
        /// <param name="right">The right comparand</param>
        /// <returns>true if the value of left and right are the same; otherwise, false</returns>
        public static bool operator ==(GenericGuid left, GenericGuid right)
        {
            if (true == System.Object.ReferenceEquals(left, right))
            {
                return true;
            }

            if ((null == left) || (null == right))
            {
                return false;
            }

            return left.Equals(right);
        }

        /// <summary>
        /// Determines whether the two objects have different values
        /// </summary>
        /// <param name="left">The left comparand</param>
        /// <param name="right">The right comparand</param>
        /// <returns>true if the value of left and right are different; otherwise, false</returns>
        public static bool operator !=(GenericGuid left, GenericGuid right)
        {
            return !(left == right);
        }

        /// <summary>
        /// Determines whether the two objects have the same value
        /// </summary>
        /// <param name="other">The specified object</param>
        /// <returns>true if the value of other is the same as this instance; otherwise, false</returns>
        public bool Equals(object obj, Type type)
        {
            if (true == System.Object.ReferenceEquals(this, obj))
            {
                return true;
            }

            if (null == obj)
            {
                return false;
            }

            XmlDocument xmlDocumentThis = Serializer.Serialize(this, type);
            XmlDocument xmlDocumentOther = Serializer.Serialize(obj, type);

            xmlDiffReport.IgnoreXPath(".//GameGuid/Images/Image/VisibilityDate");
            xmlDiffReport.IgnoreXPath(".//GameGuid/Game/VisibilityDate");
            xmlDiffReport.IgnoreXPath(".//GameGuid/Images/Image/Instances/MediaInstance/Id");
            xmlDiffReport.IgnoreXPath(".//GameContentGuid/Images/Image/Instances/MediaInstance/Id");
            xmlDiffReport.IgnoreXPath(".//GameContentGuid/Images/Image/VisibilityDate");
            xmlDiffReport.IgnoreXPath(".//GameContentGuid/GameContent/VisibilityDate");
            xmlDiffReport.IgnoreXPath(".//GameContentGuid/GameContent/Instances/MediaInstance/EncryptedKey/EncryptedSymKey");
            xmlDiffReport.IgnoreXPath(".//GameContentGuid/GameContent/Instances/MediaInstance/EncryptedKey/EncryptedPublicKey");
            xmlDiffReport.IgnoreXPath(".//GameContentGuid/GameContent/Instances/MediaInstance/GameContentInstanceFiles/GameContentInstanceFile/FileUrl");

            xmlDiffReport.Compare(xmlDocumentThis, xmlDocumentOther);


            foreach (XmlDiffDetail xmlDiffDetail in xmlDiffReport.Details)
            {
                Console.WriteLine("XmlDiffDetail:");
                Console.WriteLine("  Difference: " + xmlDiffDetail.Difference);

                if (null != xmlDiffDetail.Source)
                {
                    Console.WriteLine("  Source:");
                    Console.WriteLine("    XPath: " + xmlDiffDetail.Source.XPath);
                    Console.WriteLine("    XPathLocation: " + xmlDiffDetail.Source.XPathLocation);
                    Console.WriteLine("    Value: " + xmlDiffDetail.Source.Value);
                }

                if (null != xmlDiffDetail.Destination)
                {
                    Console.WriteLine("  Destination:");
                    Console.WriteLine("    XPath: " + xmlDiffDetail.Destination.XPath);
                    Console.WriteLine("    XPathLocation: " + xmlDiffDetail.Destination.XPathLocation);
                    Console.WriteLine("    Value: " + xmlDiffDetail.Destination.Value);
                }
            }

            return 0 == xmlDiffReport.Details.Count;
        }

        /// <summary>
        /// Determines whether the two objects have the same value
        /// </summary>
        /// <param name="other">The specified object</param>
        /// <returns>true if the value of other is the same as this instance; otherwise, false</returns>
        public bool Equals(GenericGuid other)
        {
            return this.Equals(other, typeof(GenericGuid));
        }

        /// <summary>
        /// Determines whether the two objects have the same value
        /// </summary>
        /// <param name="obj">The specified object</param>
        /// <returns>true if the value of other is the same as this instance; otherwise, false</returns>
        public override bool Equals(object obj)
        {
            if (false == (obj is GenericGuid))
            {
                return false;
            }

            return this.Equals(obj as GenericGuid);
        }

        /// <summary>
        /// Returns the hash code for the current object
        /// </summary>
        /// <returns>The hash code for the current object</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Gets this object and its associated content from the catalog
        /// </summary>
        public abstract void GetObject();

        /// <summary>
        /// Sets this object and its associated content into the catalog
        /// </summary>
        /// <param name="fileName">The file name containg the object to add</param>
        public abstract void SetObject(string fileName);

        /// <summary>
        /// Verifies this object and its associated content within the catalog
        /// </summary>
        /// <param name="fileName">The file name containg the object to add</param>
        public virtual void Verify(string fileName)
        {
            string extension = Path.GetExtension(fileName).ToLower();
            string query = null;

            Console.WriteLine("Get Images XPath ({0})", fileName);

            if (".marketplace" == extension)
            {
                query = "/ns:XboxLiveSubmissionProject/ns:MarketlaceConfigProject/ns:Images/ns:Image/ns:Path";
            }
            else if (".offer" == extension)
            {
                query = "/ns:LiveOffer/ns:contentOffer/ns:offerBasicInfo/ns:offerCultureDetails/ns:imageFilePath";
            }
            else if (".xlast" == extension)
            {
                query = "/ns:XboxLiveSubmissionProject/ns:GameConfigProject/ns:Images/ns:Image/ns:Path";
            }

            if (null == query)
            {
                Assert.Fail(String.Format("Unknown file extension: {0}", extension));
            }

            string titleIdPath = this.titleId.Substring(2);

            // get the images from the file
            XPathNavigator xpathNavigator = null;
            using (FileStream fileStream = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Read))
            {
                using (StreamReader streamReader = new StreamReader(fileStream))
                {
                    xpathNavigator = new XPathDocument(streamReader).CreateNavigator();
                }
            }

            XmlNamespaceManager xmlNamespaceManager = new XmlNamespaceManager(xpathNavigator.NameTable);
            xmlNamespaceManager.AddNamespace("ns", xpathNavigator.SelectSingleNode("*").NamespaceURI);

            XPathNodeIterator xpathNodeIterator = xpathNavigator.Select(query, xmlNamespaceManager);
            while (true == xpathNodeIterator.MoveNext())
            {
                // check if the image exists in titlevault
                string titleVaultFile = String.Format(@"{0}\{1}\{2}", this.config.TitleVaultPath, titleIdPath, xpathNodeIterator.Current.Value);

                Console.WriteLine("Check Image in TitleVault ({0})", titleVaultFile);
                if (false == this.ObjectExists) //maybe it's under a different guid, try the game guid
                {
                    this.Guid = new Guid("66ACD000-77FE-1000-9115-D8" + consoleTypeId.ToString("D2") + titleId);
                }
                if (true == this.ObjectExists)
                {
                    Assert.IsTrue(File.Exists(titleVaultFile), String.Format("{0} does not exist and it should", titleVaultFile));
                }
                else
                {
                    Assert.IsFalse(File.Exists(titleVaultFile), String.Format("{0} exists and it should not", titleVaultFile));
                }
            }
        }

        /// <summary>
        /// Get the images associated to this object from the catalog
        /// </summary>
        /// <param name="mediaRelationships">The related media to this object</param>
        internal void GetImages(MediaRelationship[] mediaRelationships)
        {
            List<Image> listImages = new List<Image>();

            foreach (MediaRelationship mediaRelationship in mediaRelationships)
            {
                if (false == CatalogConstants.IsMediaRelationshipImage(mediaRelationship.MediaRelationshipTypeId))
                {
                    continue;
                }

                listImages.Add(this.catalog.GetImage(mediaRelationship.RelatedMediaId));
            }

            if (0 == listImages.Count)
            {
                return;
            }

            this.images = new Image[listImages.Count];
            listImages.CopyTo(this.images);
        }

        /// <summary>
        /// Returns true or false, depending if the expectedException exists or not
        /// </summary>
        /// <param name="expectedException"></param>
        /// <returns>true, if the expection exists.  False if the exception </returns>
        public bool ExceptionExists(string expectedException)
        {
            bool exceptionFound = false;

            //if given an exception, search the output for that exception.
            if (string.Empty != expectedException && null != expectedException)
            {
                foreach (ProcessOutput processOutput in this.Catalog.ProcessOutputList.ProcessOutputs)
                {
                    if (processOutput.Output.Contains(expectedException))
                    {
                        exceptionFound = true;
                    }
                }
            }
            else
            {
                Console.WriteLine("No Exceptions to Find");
                return false; //no, there is no exception
            }


            if (exceptionFound)
            {
                Console.WriteLine("Expected Exception Found, Exiting");
                return true; //yes, the exception exists
            }
            else if (false == exceptionFound && expectedException != string.Empty)
            {
                //Fail if we were expecting an exception and it was not found.
                Assert.Fail(string.Format("Expected Exception NOT Found ({0}), Exiting", expectedException));
            }

            return false; //no, there is no exception
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\SystemUpdate.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="SystemUpdate.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   class to build a system update
// </summary>
//-----------------------------------------------------------------------
namespace LiveToolsTesting
{
    public class SystemUpdate
    {
        private int build;
        private int qfe;
        private int betaMachine;
        private string setting;
        private string value;

        internal SystemUpdate()
        {
        }

        public SystemUpdate(int build, int qfe, int betaMachine, string setting, string value)
        {
            this.build = build;
            this.qfe = qfe;
            this.betaMachine = betaMachine;
            this.setting = setting;
            this.value = value;
        }

        public int Build
        {
            get { return this.build; }
            set { this.build = value; }
        }

        public int Qfe
        {
            get { return this.qfe; }
            set { this.qfe = value; }
        }

        public int BetaMachine
        {
            get { return this.betaMachine; }
            set { this.betaMachine = value; }
        }

        public string Setting
        {
            get { return this.setting; }
            set { this.setting = value; }
        }

        public string Value
        {
            get { return this.value; }
            set { this.value = value; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\Serializer.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="Serializer.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   class to build a serialize and deserialize an object to and from an xml document
// </summary>
//-----------------------------------------------------------------------
namespace LiveToolsTesting
{
    using System;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    /// <summary>
    /// Serializes and deserializes objects into and from xml documents
    /// </summary>
    public static class Serializer
    {
        /// <summary>
        /// Deserialize the xml file to a specified object type
        /// </summary>
        /// <param name="fileName">The xml file representing the specified object type</param>
        /// <param name="type">The specified object type</param>
        /// <returns>The object represented by the xml document</returns>
        public static object DeserializeFromFile(string fileName, Type type)
        {
            try
            {
                // load and deserialize the xml document specified by the fileName
                using (FileStream fileStream = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Read))
                {
                    XmlSerializer xmlSerializer = new XmlSerializer(type);
                    return xmlSerializer.Deserialize(fileStream);
                }
            }
            catch (InvalidOperationException)
            {
            }
            catch (IOException)
            {
            }

            return null;
        }

        /// <summary>
        /// Serialize the specified object to an xml document
        /// </summary>
        /// <param name="obj">The specified object</param>
        /// <returns>The xml document representing the object</returns>
        public static XmlDocument Serialize(object obj)
        {
            return Serializer.Serialize(obj, obj.GetType());
        }

        /// <summary>
        /// Serialize the specified object to an xml document
        /// </summary>
        /// <param name="obj">The specified object</param>
        /// <param name="type">The specified object type</param>
        /// <returns>The xml document representing the object</returns>
        public static XmlDocument Serialize(object obj, Type type)
        {
            XmlDocument xmlDocument = new XmlDocument();

            if (null == obj)
            {
                return xmlDocument;
            }

            StringBuilder stringBuilder = new StringBuilder();
            using (StringWriterUTF8 stringWriter = new StringWriterUTF8(stringBuilder))
            {
                XmlSerializer xmlSerializer = new XmlSerializer(type);
                xmlSerializer.Serialize(stringWriter, obj);
            }

            xmlDocument.PreserveWhitespace = true;
            xmlDocument.LoadXml(stringBuilder.ToString());

            return xmlDocument;
        }

        /// <summary>
        /// Serialize the specified object to an xml file
        /// </summary>
        /// <param name="obj">The specified object</param>
        /// <param name="fileName">The xml file representing the specified object type</param>
        public static void SerializeToFile(object obj, string fileName)
        {
            XmlDocument xmlDocument = Serializer.Serialize(obj);

            // save the xml document
            xmlDocument.Save(fileName);
        }

        /// <summary>
        /// Implements a StringWriter for writing an xml document to a UTF8 string
        /// </summary>
        internal class StringWriterUTF8 : StringWriter
        {
            /// <summary>
            /// encoding is the encoding in which the output is written
            /// </summary>
            private Encoding encoding = Encoding.UTF8;

            /// <summary>
            /// Initializes a new instance of the StringWriterUTF8 class
            /// </summary>
            /// <param name="stringBuilder">The StringBuilder to write to</param>
            public StringWriterUTF8(StringBuilder stringBuilder)
                : base(stringBuilder)
            {
            }

            /// <summary>
            /// Gets the encoding in which the output is written
            /// </summary>
            public override Encoding Encoding
            {
                get { return this.encoding; }
            }

            /// <summary>
            /// Releases the unmanaged resources used by the StringWriterUTF8 and optionally releases the managed resources
            /// </summary>
            /// <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
            protected override void Dispose(bool disposing)
            {
                base.Dispose(disposing);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\OfferGuid.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="OfferGuid.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   class to build a offer guid from a offer
// </summary>
//-----------------------------------------------------------------------
namespace LiveToolsTesting
{
    using System;
    using System.IO;
    using System.Xml;
    using System.Xml.XPath;

    using Microsoft.VisualStudio.TestTools.UnitTesting;

    using ContentIngestionService;

    /// <summary>
    /// Represents an offer object within the catalog
    /// </summary>
    public class OfferGuid : GenericGuid
    {
        /// <summary>
        /// offer is the offer object returned from the web service
        /// </summary>
        private Offer offer;

        /// <summary>
        /// offerId is the offer id for this offer
        /// </summary>
        private string offerId;

        /// <summary>
        /// Initializes a new instance of the OfferGuid class
        /// </summary>
        /// <param name="config">The instance of the Config class exposing all of the configuration</param>
        /// <param name="catalog">The instance of the Catalog class for interacting with the catalog</param>
        /// <param name="titleId">The specified title id</param>
        /// <param name="consoleTypeId">The specified console type id</param>
        /// <param name="offerId">The specified offer id</param>
        public OfferGuid(Config config, Catalog catalog, string titleId, int consoleTypeId, string offerId)
            : base(config, catalog, titleId, consoleTypeId)
        {
            this.offerId = "0x" + offerId;

            this.Guid = new Guid(String.Format("{0}-0000-4000-8000-0000{1}", offerId.Substring(8, 8), offerId.Substring(0, 8)));
        }

        /// <summary>
        /// Initializes a new instance of the OfferGuid class
        /// </summary>
        internal OfferGuid()
            : base()
        {
        }

        /// <summary>
        /// Gets or sets the offer object returned from the web service
        /// </summary>
        public Offer Offer
        {
            get { return this.offer; }
            set { this.offer = value; }
        }

        /// <summary>
        /// Gets or sets the offer id for this offer
        /// </summary>
        public string OfferId
        {
            get { return this.offerId; }
            set { this.offerId = value; }
        }

        /// <summary>
        /// Determines whether the two objects have the same value
        /// </summary>
        /// <param name="left">The left comparand</param>
        /// <param name="right">The right comparand</param>
        /// <returns>true if the value of left and right are the same; otherwise, false</returns>
        public static bool operator ==(OfferGuid left, OfferGuid right)
        {
            if (true == System.Object.ReferenceEquals(left, right))
            {
                return true;
            }

            if ((null == left) || (null == right))
            {
                return false;
            }

            return left.Equals(right);
        }

        /// <summary>
        /// Determines whether the two objects have different values
        /// </summary>
        /// <param name="left">The left comparand</param>
        /// <param name="right">The right comparand</param>
        /// <returns>true if the value of left and right are different; otherwise, false</returns>
        public static bool operator !=(OfferGuid left, OfferGuid right)
        {
            return !(left == right);
        }

        /// <summary>
        /// Determines whether the two objects have the same value
        /// </summary>
        /// <param name="other">The specified object</param>
        /// <returns>true if the value of other is the same as this instance; otherwise, false</returns>
        public bool Equals(OfferGuid other)
        {
            return base.Equals(other, typeof(OfferGuid));
        }

        /// <summary>
        /// Determines whether the two objects have the same value
        /// </summary>
        /// <param name="obj">The specified object</param>
        /// <returns>true if the value of other is the same as this instance; otherwise, false</returns>
        public override bool Equals(object obj)
        {
            if (false == (obj is OfferGuid))
            {
                return false;
            }

            return this.Equals(obj as OfferGuid);
        }

        /// <summary>
        /// Returns the hash code for the current object
        /// </summary>
        /// <returns>The hash code for the current object</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Get the offer and its associated content from the catalog
        /// </summary>
        public override void GetObject()
        {
            this.offer = this.Catalog.GetOffer(this.Guid);

            if (null != this.offer)
            {
                this.ObjectExists = true;
            }
        }

        /// <summary>
        /// Set the offer and its associated content into the catalog
        /// </summary>
        /// <param name="fileName">The file name containg the offer to add</param>
        public override void SetObject(string fileName)
        {
            this.ObjectExists = this.Catalog.SetOffer(this.TitleId, fileName);
        }

        /// <summary>
        /// Verifies this offer and its associated content within the catalog
        /// </summary>
        /// <param name="fileName">The file name containg the offer to add</param>
        public override void Verify(string fileName)
        {
            // get the count of content offers from the offer file
            Console.WriteLine("Get ContentOffer Count ({0})", fileName);

            XPathNavigator xpathNavigator = null;
            using (FileStream fileStream = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Read))
            {
                using (StreamReader streamReader = new StreamReader(fileStream))
                {
                    xpathNavigator = new XPathDocument(streamReader).CreateNavigator();
                }
            }

            XmlNamespaceManager xmlNamespaceManager = new XmlNamespaceManager(xpathNavigator.NameTable);
            xmlNamespaceManager.AddNamespace("ns", xpathNavigator.SelectSingleNode("*").NamespaceURI);

            int contentOfferCount = xpathNavigator.Select("/ns:LiveOffer/ns:contentOffer", xmlNamespaceManager).Count;

            // check if the offer file exists in titlevault
            string titleVaultFile = String.Format(@"{0}\{1}\{2}_[{3}].offer", this.Config.TitleVaultPath, this.TitleId.Substring(2), Path.GetFileNameWithoutExtension(fileName), contentOfferCount);

            Console.WriteLine("Check Offer File in TitleVault ({0})", titleVaultFile);

            if (true == this.ObjectExists)
            {
                Assert.IsTrue(File.Exists(titleVaultFile), String.Format("{0} does not exist and it should", titleVaultFile));
            }
            else
            {
                Assert.IsFalse(File.Exists(titleVaultFile), String.Format("{0} exists and it should not", titleVaultFile));
            }

            base.Verify(fileName);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\ProcessOutputList.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="ProcessOutputList.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   class to execute a series of command lines
// </summary>
//-----------------------------------------------------------------------
namespace LiveToolsTesting
{
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.IO;
    using System.Xml.XPath;

    /// <summary>
    /// Provides access to run a series of executables and command lines
    /// </summary>
    public class ProcessOutputList
    {
        /// <summary>
        /// collectionProcessOutputs is the collection of standard outputs from each process
        /// </summary>
        private ReadOnlyCollection<ProcessOutput> collectionProcessOutputs;

        /// <summary>
        /// <summary>
        /// exeName is the name of the executable to run
        /// </summary>
        private string exeName;

        /// <summary>
        /// exePath is the directory of the executable to run 
        /// </summary>
        private string exePath;

        /// <summary>
        /// tokenReplace is the instance to replace the tokens in a command line
        /// </summary>
        private TokenReplace tokenReplace;

        /// <summary>
        /// workingDirectory is the initial directory of the executable to be started
        /// </summary>
        private string workingDirectory;

        /// <summary>
        /// xpathNavigator is the xml document containing the series of command lines
        /// </summary>
        private XPathNavigator xpathNavigator;

        /// <summary>
        /// Initializes a new instance of the ProcessOutputList class
        /// </summary>
        /// <param name="tokenReplace">The TokenReplace instance to replace the tokens within the command line</param>
        /// <param name="exePath">The path of the specified executable to run</param>
        /// <param name="exeName">The specified executable to run</param>
        /// <param name="fileName">The specified file name</param>
        /// <param name="workingDirectory">The path in which to run the specified executable</param>
        public ProcessOutputList(TokenReplace tokenReplace, string exePath, string exeName, string fileName, string workingDirectory)
        {
            this.tokenReplace = tokenReplace;
            this.exePath = exePath;
            this.exeName = exeName;

            // load the xml document specified by the fileName
            try
            {
                using (FileStream fileStream = new FileStream(Path.GetFullPath(fileName), FileMode.Open, FileAccess.Read, FileShare.Read))
                {
                    using (StreamReader streamReader = new StreamReader(fileStream))
                    {
                        this.xpathNavigator = new XPathDocument(streamReader).CreateNavigator();
                    }
                }

                this.workingDirectory = workingDirectory;
            }
            catch (IOException)
            {
            }
        }

        /// <summary>
        /// Gets the collection of standard outputs from each process
        /// </summary>
        public ReadOnlyCollection<ProcessOutput> ProcessOutputs
        {
            get { return this.collectionProcessOutputs; }
        }

        /// <summary>
        /// Executes each command line specified in the xml document
        /// </summary>
        public void Run()
        {
            List<ProcessOutput> listProcessOutputs = new List<ProcessOutput>();

            XPathNodeIterator xpathNodeIterator = this.xpathNavigator.Select(".//CommandLines/CommandLine");
            while (true == xpathNodeIterator.MoveNext())
            {
                string arguments = this.tokenReplace.Replace(xpathNodeIterator.Current.Value);

                ProcessOutput processOutput = new ProcessOutput(this.exePath, this.exeName, arguments, this.workingDirectory);
                processOutput.Run();
                listProcessOutputs.Add(processOutput);
            }

            this.collectionProcessOutputs = new ReadOnlyCollection<ProcessOutput>(listProcessOutputs);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\ProcessOutput.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="ProcessOutput.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   class to execute a process and expose its output and return code
// </summary>
//-----------------------------------------------------------------------
namespace LiveToolsTesting
{
    using System.Diagnostics;
    using System.IO;
    using System.Text;

    /// <summary>
    /// Provides access to run an executable and get its exit code and standard output
    /// </summary>
    public class ProcessOutput
    {
        /// <summary>
        /// arguments is the arguments passed to the executable
        /// </summary>
        private string arguments;

        /// <summary>
        /// exeName is the name of the executable to run
        /// </summary>
        private string exeName;

        /// <summary>
        /// exePath is the directory of the executable to run 
        /// </summary>
        private string exePath;

        /// <summary>
        /// exitCode is the exit code of the executable
        /// </summary>
        private int exitCode;

        /// <summary>
        /// output is the standard output of the executable
        /// </summary>
        private string output;

        /// <summary>
        /// stringBuilder is the string builder object to capture the standard output of the executable
        /// </summary>
        private StringBuilder stringBuilder;

        /// <summary>
        /// workingDirectory is the initial directory of the executable to be started
        /// </summary>
        private string workingDirectory;

        /// <summary>
        /// Initializes a new instance of the ProcessOutput class
        /// </summary>
        /// <param name="exePath">The directory of the executable to run</param>
        /// <param name="exeName">The name of the executable to run</param>
        /// <param name="arguments">The arguments to pass to the process</param>
        /// <param name="workingDirectory">The working directory for the process</param>
        public ProcessOutput(string exePath, string exeName, string arguments, string workingDirectory)
        {
            this.exePath = exePath;
            this.exeName = exeName;
            this.arguments = arguments;
            this.workingDirectory = workingDirectory;
        }

        /// <summary>
        /// Gets the exit code of the process
        /// </summary>
        public int ExitCode
        {
            get { return this.exitCode; }
        }

        /// <summary>
        /// Gets the standard output of the process
        /// </summary>
        public string Output
        {
            get { return this.output; }
        }

        /// <summary>
        /// Run the specified executable with the specified arguments and capture the output and exit code
        /// </summary>
        public void Run()
        {
            ProcessStartInfo processStartInfo = new ProcessStartInfo(Path.Combine(this.exePath, this.exeName), this.arguments);
            processStartInfo.CreateNoWindow = true;
            processStartInfo.ErrorDialog = false;
            processStartInfo.RedirectStandardOutput = true;
            processStartInfo.UseShellExecute = false;
            processStartInfo.WorkingDirectory = this.workingDirectory;

            Process process = new Process();
            process.StartInfo = processStartInfo;

            this.stringBuilder = new StringBuilder();
            process.OutputDataReceived += new DataReceivedEventHandler(this.OutputDataReceivedHandler);

            process.Start();
            process.BeginOutputReadLine();
            process.WaitForExit();

            this.exitCode = process.ExitCode;
            this.output = this.stringBuilder.ToString();
        }

        /// <summary>
        /// Handles the OutputDataReceived event of the Process
        /// </summary>
        /// <param name="sender">The source of the event</param>
        /// <param name="e">A DataReceivedEventArgs that contains the event data</param>
        private void OutputDataReceivedHandler(object sender, DataReceivedEventArgs e)
        {
            if (null != e.Data)
            {
                Trace.WriteLine(e.Data);
                this.stringBuilder.AppendLine(e.Data);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\TitleVersion.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="TitleVersion.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   class to build a title version
// </summary>
//-----------------------------------------------------------------------
namespace LiveToolsTesting
{
    public class TitleVersion
    {
        private int baseVersion;
        private int updateVersion;
        private int betaVersion;
        private int updatePackages;
        private int updateLocations;

        internal TitleVersion()
        {
        }

        public TitleVersion(int baseVersion, int updateVersion, int betaVersion)
        {
            this.baseVersion = baseVersion;
            this.updateVersion = updateVersion;
            this.betaVersion = betaVersion;
        }

        public int BaseVersion
        {
            get { return this.baseVersion; }
            set { this.baseVersion = value; }
        }

        public int UpdateVersion
        {
            get { return this.updateVersion; }
            set { this.updateVersion = value; }
        }

        public int BetaVersion
        {
            get { return this.betaVersion; }
            set { this.betaVersion = value; }
        }

        public int UpdatePackages
        {
            get { return this.updatePackages; }
            set { this.updatePackages = value; }
        }

        public int UpdateLocations
        {
            get { return this.updateLocations; }
            set { this.updateLocations = value; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\TokenReplace.cs ===
ï»¿//-----------------------------------------------------------------------
// <copyright file="TokenReplace.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//   class to replace tokens in a command line
// </summary>
//-----------------------------------------------------------------------
namespace LiveToolsTesting
{
    using System.Collections.Generic;

    /// <summary>
    /// Provides a method to replace tokens in a command line
    /// </summary>
    public class TokenReplace
    {
        /// <summary>
        /// collectionTokens is the collection of tokens and their replacement value
        /// </summary>
        private Dictionary<string, string> collectionTokens = new Dictionary<string, string>();

        /// <summary>
        /// Initializes a new instance of the TokenReplace class
        /// </summary>
        public TokenReplace()
        {
        }

        /// <summary>
        /// Adds the specified token and its replacement value
        /// </summary>
        /// <param name="token">The token</param>
        /// <param name="value">The replacement value for the token</param>
        public void Add(string token, string value)
        {
            this.collectionTokens[token] = value;
        }

        /// <summary>
        /// Replaces the tokens in the command line
        /// </summary>
        /// <param name="value">The specified command line</param>
        /// <returns>The command line with the tokens replaced</returns>
        public string Replace(string value)
        {
            foreach (string token in this.collectionTokens.Keys)
            {
                value = value.Replace(token, this.collectionTokens[token]);
            }

            return value;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FEDB\test.cs ===
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Text;
using System.Xml;

using Microsoft.EMS.Tools.Common;
using DBSchema;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Microsoft.EMS.Test.Catalog 
{
	[TestClass]
	public class TestCases 
	{
		private class TestcaseInfo
        {
            private string command;
            private string results;

            public string Command
            {
                get { return command; }
            }

            public string Results
            {
                get { return results; }
            }

            public TestcaseInfo(string newCommand, string newResults)
            {
                command = newCommand;
                results = newResults;
            }
        }
        

        private static List<XmlNode> expectedEntries;
        private static List<XmlNode> returnedEntries;
        private static Dictionary<string, TestcaseInfo> testcaseTable;
	private static IDataInterface dataInterface = null;

	public TestCases() { }

        //Used to retrieve streams to embedded resources
        private static Stream GetEmbeddedResourceStream(string fileName)
        {
            Assert.IsNotNull(fileName, "Invalid parameter");

            Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(fileName);
                        
            if (stream != null)
            {
				return new DeflateStream(stream, CompressionMode.Decompress);                
            }
StreamWriter writer = new StreamWriter(@"c:\err.txt"); writer.WriteLine(fileName); writer.Close();
            return null;
        }



	private static void Validator(object sender, System.Xml.Schema.ValidationEventArgs eventArgs)
        {
            throw eventArgs.Exception;
        }


		private static void LoadTestcaseData()
	{
		Configuration config = ConfigurationManager.OpenExeConfiguration(
		System.Reflection.Assembly.GetExecutingAssembly().Location);
		string configPath = config.AppSettings.Settings["SchemaConfigFile"].Value;
		string serverName = config.AppSettings.Settings["ServerName"].Value;
		string databaseName = config.AppSettings.Settings["DatabaseName"].Value;
			
			Assembly assembly = Assembly.LoadFrom(config.AppSettings.Settings["DataInterfaceModule"].Value);
            dataInterface = (IDataInterface)assembly.CreateInstance("Microsoft.EMS.Tools.StoredProcedureLoader");
            
            dataInterface.LoadInterface(
                    serverName,
                    new object[] {
                        databaseName, 
                        new System.Xml.Schema.ValidationEventHandler(Validator), 
                        null });
                        
            testcaseTable = new Dictionary<string, TestcaseInfo>();

            using (XmlTextReader reader = new XmlTextReader(Assembly.GetExecutingAssembly().GetManifestResourceStream("FEDBGamesCases_0001_Functional.procedures.xml")))
            {
                reader.Read();
                reader.ReadStartElement("Procedures");
                reader.Read();
                
                while (XmlNodeType.EndElement != reader.MoveToContent())
                {
                    using (XmlTextReader testcaseReader = new XmlTextReader(GetEmbeddedResourceStream("FEDBGamesCases_0001_Functional." + reader.Name + "Tests.def")))
                    {
                        testcaseReader.Read();
                        testcaseReader.ReadStartElement("Tests");

                        while (testcaseReader.ReadToNextSibling("testCase"))
                        {
							StringBuilder builder = new StringBuilder();
							TextWriter command = new StringWriter(builder);          
							XmlTextWriter commandWriter = new XmlTextWriter(command);                
				            string testCaseName = testcaseReader["Description"];

                            testcaseReader.ReadToDescendant("input");
                            testcaseReader.Read();
                            commandWriter.WriteStartElement(reader.Name);//, EMSCatalog.GetSchemaNamespace());
			    commandWriter.WriteAttributeString("xmlns", "urn:dbschema-config");
                            

                            while (testcaseReader.Name != "input")
                            {
                                if(testcaseReader.NodeType == XmlNodeType.Element)
                                {
									string parameterValue = testcaseReader.ReadString();
									if("NULL" != parameterValue)
										commandWriter.WriteElementString(testcaseReader.Name, parameterValue);
                                }
                                
                                testcaseReader.Read();
                            }
                            commandWriter.WriteEndElement();
                            string commandString = builder.ToString();
                            
                            commandString = commandString.Replace("&lt;", "<");
                            commandString = commandString.Replace("&gt;", ">");
                            
                            testcaseReader.ReadToNextSibling("RESULTS_NODE");
                            string resultsString = testcaseReader.ReadInnerXml();
                            
                            testcaseTable.Add(testCaseName, new TestcaseInfo(
                                commandString,
                                resultsString));
                                
                            testcaseReader.Read();
                        }
                    }

                    reader.Read();
                }

                reader.Close();
            }
        }
        

        private static bool CompareXmlResults(XmlNode expectedElement, XmlNode returnedElement)
        {
            if (expectedElement.ChildNodes.Count != returnedElement.ChildNodes.Count)
                return false;

            else if (expectedElement.Name != returnedElement.Name)
                return false;

            else if (expectedElement.Name == "updated")
                return true;

            else if (expectedElement.Value != returnedElement.Value)
                return false;
                        
            for (int i = 0; i < expectedElement.ChildNodes.Count; i++)
            {
                if (expectedElement.ChildNodes[i].Name == "entry")
                {
                    expectedEntries.Add(expectedElement.ChildNodes[i]);
                    returnedEntries.Add(returnedElement.ChildNodes[i]);
                }
            }
                        
            for (int i = 0; i < expectedEntries.Count; i++)
            {
                bool match = false;
                for (int j = 0; j < returnedEntries.Count; j++)
                {
                    if (CompareInnerEntryXML(expectedEntries[i], returnedEntries[j]))
                    {
                        expectedEntries.RemoveAt(i--);
                        returnedEntries.RemoveAt(j--);
                        match = true;
                        break;
                    }
                }

                if (!match)
                    return false;
            }

            return true;
        }

        private static bool CompareInnerEntryXML(XmlNode expectedElement, XmlNode returnedElement)
        {
            if (expectedElement.ChildNodes.Count != returnedElement.ChildNodes.Count)
                return false;

            else if (expectedElement.Name != returnedElement.Name)
                return false;

            else if (expectedElement.Name == "updated")
                return true;

            else if (expectedElement.Value != returnedElement.Value)
                return false;

            if (null != expectedElement.Attributes &&
                null != returnedElement.Attributes)
            {
                if (expectedElement.Attributes.Count != returnedElement.Attributes.Count)
                    return false;

                for (int j = 0; j < expectedElement.Attributes.Count; j++)
                {
                    if (expectedElement.Attributes[j].Name != "live:itemNum")
                    {
                        if (expectedElement.Attributes[j].Name != returnedElement.Attributes[j].Name)
                            return false;

                        else if (expectedElement.Attributes[j].Value != returnedElement.Attributes[j].Value)
                            return false;
                    }
                }
            }

            for (int i = 0; i < expectedElement.ChildNodes.Count; i++)
            {

                if (!CompareInnerEntryXML(expectedElement.ChildNodes[i], returnedElement.ChildNodes[i]))
                    return false;
            }

            return true;
        }


        
        private static void validationHandler(object sender, System.Xml.Schema.ValidationEventArgs e)
        {
            Trace.Assert(false, e.Message);
        }
        
        //Use ClassInitialize to run code before running the first test in the class
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext) 
        {
		LoadTestcaseData();
		expectedEntries = new List<XmlNode>();
		returnedEntries = new List<XmlNode>();

	    if (!Directory.Exists(Directory.GetCurrentDirectory() + @"\expectedResults\"))
                Directory.CreateDirectory(Directory.GetCurrentDirectory() + @"\expectedResults\");

            if (!Directory.Exists(Directory.GetCurrentDirectory() + @"\returnedResults\"))
                Directory.CreateDirectory(Directory.GetCurrentDirectory() + @"\returnedResults\");
        }


        
        private static void ExecuteTestCase(string method)
        {
		TestcaseInfo testcaseInfo = testcaseTable[method];
		
			MemoryStream stream = new MemoryStream();
            XmlTextWriter writer = new XmlTextWriter(stream, Encoding.UTF8);

            string results = dataInterface.ExecuteAPI(
                method,
                testcaseInfo.Command,
                    new object[] {
                    true,
                    new System.Xml.Schema.ValidationEventHandler(validationHandler),
                    writer});

            writer.Flush();
            results = Encoding.UTF8.GetString(stream.ToArray());
            results = results.Substring(1);
            
            string expectResultsString = String.Empty;
            XmlDocument expectedResults = new XmlDocument();
            XmlDocument returnedResults = new XmlDocument();
            try
            {
                expectedResults.LoadXml(testcaseInfo.Results.Replace(" xmlns=\"\">", ">"));
                    returnedResults.LoadXml(results);

                bool result = CompareXmlResults(expectedResults.DocumentElement, returnedResults.DocumentElement);
    
                if (!result)
                {			
                    throw new XmlException();
                }
            }
            catch (XmlException)
            {
                XmlTextWriter expectedWriter = new XmlTextWriter(Directory.GetCurrentDirectory() + @"\expectedResults\" + method + ".txt", Encoding.UTF8);
                XmlTextWriter returnedWriter = new XmlTextWriter(Directory.GetCurrentDirectory() + @"\returnedResults\" + method + ".txt", Encoding.UTF8);

                expectedWriter.Formatting = Formatting.Indented;
                returnedWriter.Formatting = Formatting.Indented;
				expectedResults.WriteTo(expectedWriter);
				returnedResults.WriteTo(returnedWriter);

				expectedWriter.Close();
				returnedWriter.Close();
				throw;
            }
        }


[TestMethod]
	public void FindGames_locale_0()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_1()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_2()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_3()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_4()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_5()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_6()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_7()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_8()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_9()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_10()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_11()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_12()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_13()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_14()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_15()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_16()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_17()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_18()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_19()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_20()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_21()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_22()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_23()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_24()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_25()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_26()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_27()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_28()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_29()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_30()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_31()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_32()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_33()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_34()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_35()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_36()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_37()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_38()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_39()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_40()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_41()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_42()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_43()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_44()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_45()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_46()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_47()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_48()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_49()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_50()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_51()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_52()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_53()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_54()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_55()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_56()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_57()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_58()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_59()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_60()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_61()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_62()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_63()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_64()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_65()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_66()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_67()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_68()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_69()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_70()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_71()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_72()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_73()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_74()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_75()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_76()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_77()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_78()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_79()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_80()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_81()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_82()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_83()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_84()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_85()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_86()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_87()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_88()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_89()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_90()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_91()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_92()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_93()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_94()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_locale_95()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_96()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_97()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_98()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_99()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_100()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_101()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_102()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_103()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_104()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_105()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_106()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_107()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_108()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_109()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_110()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_111()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_112()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_113()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_114()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_115()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_116()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_117()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_118()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_119()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_120()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_121()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_122()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_123()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_124()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_125()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_126()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_127()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_128()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_129()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_130()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_131()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_132()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_133()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_134()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_135()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_136()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_137()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_138()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_139()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_140()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_141()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_142()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_143()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_144()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_145()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_146()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_147()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_148()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_149()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_150()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_151()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_152()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_153()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_154()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_155()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_156()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_157()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_158()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_159()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_160()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_161()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_162()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_163()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_164()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_165()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_166()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_167()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_168()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_169()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_170()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_171()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_172()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_173()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_174()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_legalLocale_175()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_176()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_177()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_178()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_179()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_180()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_181()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_182()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_183()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_184()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_185()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_186()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_187()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_188()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_189()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_190()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_191()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_192()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_193()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_194()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_195()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_196()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_197()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_198()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_199()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_200()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_201()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_202()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_203()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_204()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_205()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_206()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_store_207()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_208()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_209()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_210()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_211()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_212()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_213()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_214()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_215()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_216()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_217()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_218()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_219()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_220()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_221()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_222()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_223()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_224()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_225()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_226()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_227()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_228()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_229()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_230()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_231()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_232()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_233()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_234()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_235()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_236()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_237()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_238()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_239()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_240()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_241()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_242()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_243()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_244()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_245()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_246()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_247()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_248()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_249()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_250()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_251()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_252()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_253()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_254()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_255()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_256()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_257()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_258()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_259()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_260()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_261()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_262()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_263()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_264()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_265()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_266()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_267()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_268()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_269()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_270()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageSize_271()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_272()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_273()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_274()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_275()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_276()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_277()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_278()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_279()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_280()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_281()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_282()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_283()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_284()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_285()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_286()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_287()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_288()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_289()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_290()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_291()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_292()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_293()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_294()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_295()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_296()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_297()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_298()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_299()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_300()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_301()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_302()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_303()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_304()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_305()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_306()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_307()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_308()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_309()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_310()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_311()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_312()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_313()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_314()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_315()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_316()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_317()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_318()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_319()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_320()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_321()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_322()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_323()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_324()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_325()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_326()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_327()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_328()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_329()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_330()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_331()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_332()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_333()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_334()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_pageNum_335()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_336()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_337()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_338()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_339()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_340()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_341()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_342()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_343()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_344()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_345()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_346()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_347()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_348()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_349()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_350()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_351()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_352()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_353()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_354()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_355()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_356()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_357()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_358()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_359()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_360()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_361()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_362()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_363()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_364()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_365()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_366()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_367()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_368()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_369()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_370()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_371()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_372()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_373()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_374()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_375()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_376()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_377()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_378()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_379()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_380()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_381()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_382()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_383()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_384()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_385()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_386()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_387()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_388()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_389()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_390()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_391()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_392()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_393()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_394()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_395()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_396()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_397()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_398()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_399()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_400()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_401()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_402()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_403()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_404()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_405()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_406()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_407()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_408()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_409()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_410()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_411()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_412()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_413()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_414()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_415()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_416()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_417()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_418()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_419()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_420()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_421()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_422()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_423()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_424()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_425()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_426()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_427()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_428()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_429()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_430()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_431()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_432()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_433()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_434()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_435()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_436()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_437()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_438()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_439()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_440()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_441()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_442()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_443()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_444()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_445()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_446()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_detailView_447()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_448()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_449()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_450()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_451()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_452()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_453()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_454()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_455()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_456()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_457()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_458()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_459()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_460()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_461()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_462()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_463()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_464()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_465()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_466()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_467()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_468()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_469()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_470()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_471()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_472()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_473()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_474()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_475()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_476()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_477()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_478()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_479()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_480()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_481()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_482()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_483()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_484()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_485()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_486()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_487()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_488()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_489()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_490()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_491()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_492()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_493()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_494()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_495()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_496()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_497()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_498()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_499()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_500()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_501()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_502()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_503()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_504()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_505()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_506()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_507()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_508()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_509()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_510()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_offerFilterLevel_511()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_512()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_513()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_514()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_515()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_516()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_517()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_518()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_519()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_520()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_521()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_522()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_523()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_524()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_525()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_526()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_527()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_528()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_529()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_530()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_531()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_532()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_533()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_534()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaIds_535()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_536()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_537()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_538()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_539()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_540()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_541()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_542()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_543()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_544()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_545()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_546()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_547()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_548()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_549()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_550()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_551()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_552()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_553()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_554()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_555()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_556()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_557()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_558()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_559()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_560()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_561()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_562()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_563()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_564()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_565()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_566()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_567()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_568()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_569()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_570()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_571()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_572()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_573()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_574()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_575()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_576()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_577()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_578()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_579()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_580()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_581()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_582()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_583()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_584()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_585()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_586()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_587()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_588()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_589()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_590()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_591()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_592()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_593()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_594()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_595()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_596()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_597()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_598()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_599()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_600()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_601()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_602()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_603()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_604()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_605()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_606()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_607()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_608()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_609()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_610()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_611()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_612()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_613()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_614()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_ratingIds_615()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_616()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_617()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_618()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_619()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_620()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_621()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_622()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_623()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_624()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_625()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_626()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_627()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_628()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_629()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_630()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_631()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_632()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_633()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_634()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_635()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_636()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_637()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_638()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_639()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_640()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_641()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_642()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_643()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_644()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_645()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_646()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_647()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_648()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_649()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_650()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_651()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_652()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_653()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_654()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_655()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_656()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_657()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_658()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_659()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_660()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_661()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_662()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_userTypes_663()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_664()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_665()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_666()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_667()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_668()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_669()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_670()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_671()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_672()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_673()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_674()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_675()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_676()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_677()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_678()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_679()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_680()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_681()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_682()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_683()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_684()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_685()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_686()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_mediaTypes_687()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_688()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_689()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_690()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_691()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_692()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_693()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_694()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_695()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_696()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_697()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_698()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_699()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_700()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_701()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_702()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_703()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_704()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_705()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_706()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_707()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_708()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_709()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_710()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_711()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_712()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_713()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_714()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_715()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_716()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_717()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_718()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_719()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_720()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_721()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_722()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_723()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_724()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_725()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_726()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_727()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_728()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_729()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_730()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_731()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_732()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_733()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_734()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_735()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_736()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_737()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_738()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_739()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_740()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_741()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_742()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_743()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_744()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_745()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_746()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_747()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_748()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_749()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_750()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_751()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_752()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_753()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_754()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_755()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_756()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_757()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_758()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_759()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_760()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_761()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_762()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_763()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_764()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_765()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_766()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_767()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_768()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_769()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_770()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_771()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_772()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_773()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_774()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_775()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_776()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_777()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_778()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_779()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_780()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_781()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_782()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_categoryIds_783()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_784()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_785()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_786()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_787()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_788()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_789()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_790()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_791()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_792()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_793()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_794()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_795()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_796()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_797()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_798()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_799()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_800()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_801()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_802()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_803()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_804()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_805()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_806()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_807()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_808()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_809()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_810()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_811()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_812()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_813()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_814()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageTypeIds_815()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_816()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_817()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_818()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_819()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_820()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_821()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_822()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_823()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_824()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_825()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_826()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_827()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_828()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_829()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_830()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_831()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_832()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_833()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_834()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_835()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_836()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_837()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_838()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_839()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_840()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_841()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_842()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_843()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_844()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_845()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_846()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_847()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_848()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_849()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_850()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_851()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_852()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_853()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_854()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_855()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_856()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_857()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_858()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_859()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_860()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_861()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_862()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_863()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_864()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_865()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_866()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_867()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_868()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_869()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_870()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_871()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_872()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_873()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_874()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_875()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_876()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_877()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_878()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_879()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_880()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_881()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_882()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_883()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_884()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_885()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_886()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_887()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_888()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_889()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_890()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_891()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_892()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_893()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_894()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageFormats_895()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_896()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_897()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_898()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_899()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_900()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_901()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_902()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_903()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_904()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_905()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_906()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_907()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_908()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_909()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_910()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_911()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_912()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_913()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_914()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_915()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_916()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_917()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_918()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_919()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_920()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_921()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_922()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_923()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_924()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_925()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_926()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_927()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_928()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_929()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_930()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_931()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_932()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_933()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_934()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_935()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_936()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_937()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_938()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_939()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_940()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_941()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_942()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_943()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_944()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_945()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_946()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_947()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_948()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_949()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_950()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_951()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_952()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_953()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_954()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_955()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_956()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_957()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_958()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_959()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_960()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_961()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_962()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_963()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_964()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_965()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_966()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_967()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_968()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_969()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_970()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_971()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_972()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_973()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_974()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_imageSizes_975()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_976()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_977()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_978()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_979()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_980()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_981()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_982()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_983()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_984()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_985()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_986()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_987()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_988()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_989()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_990()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_titleFilters_991()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_992()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_993()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_994()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_995()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_996()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_997()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_998()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_999()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1000()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1001()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1002()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1003()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1004()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1005()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1006()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1007()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1008()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1009()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1010()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1011()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1012()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1013()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1014()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_targetMediaTypes_1015()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1016()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1017()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1018()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1019()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1020()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1021()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1022()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1023()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1024()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1025()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1026()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1027()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1028()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1029()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1030()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1031()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1032()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1033()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1034()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1035()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1036()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1037()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1038()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1039()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1040()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1041()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1042()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1043()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1044()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1045()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1046()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1047()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1048()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1049()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1050()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1051()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1052()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1053()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1054()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1055()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1056()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1057()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1058()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1059()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1060()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1061()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1062()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1063()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1064()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1065()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1066()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1067()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1068()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1069()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1070()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1071()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1072()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1073()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1074()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1075()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1076()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1077()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    ExecuteTestCase(methodBase.Name);
	}


	[TestMethod]
	public void FindGames_queryModifiers_1078()
	{
	    StackFrame stackFrame = new StackFrame();
	    MethodBase methodBase = stackFrame.GetMethod();	    
	    Ex