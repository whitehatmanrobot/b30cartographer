ing xmlCfgFileName )
			{
				XmlDocument cfg = new XmlDocument();
				int nCount = 0;

				//Load the the document with the last book node.
				XmlTextReader reader = new XmlTextReader( xmlCfgFileName );
				reader.WhitespaceHandling = WhitespaceHandling.None;
				reader.MoveToContent();
				cfg.Load(reader);
				XmlElement docElement = cfg.DocumentElement;

				// this is the node which hold the http server we want to connect to.
				XmlNodeList nl = docElement.SelectNodes( "//LivePxyTest/server" );

				// Get the http server we want to talk to.
				_httpserver = (nl[0].Attributes.GetNamedItem("value")).Value;

				nl = docElement.SelectNodes( "//LivePxyTest/test/case" );

				// create the number of test cases we'll be using...
				_tests = new TestCase[nl.Count];
				foreach( XmlNode xn in nl )
				{
					TestCase newcase = null;
					switch( xn.Attributes.GetNamedItem("type").Value )
					{
						case "1":
						{
							TestForwardRequest tfr = new TestForwardRequest( _httpserver );

							tfr.XRL = xn.Attributes.GetNamedItem("xrl").Value;
							tfr.Body = xn.Attributes.GetNamedItem("body").Value;

							newcase = (TestCase)tfr;
						}
							break;
						case "2":
						{
							TestGetSiteInfo tgsi = new TestGetSiteInfo( _httpserver );

							tgsi.SiteId = Int32.Parse( xn.Attributes.GetNamedItem("siteid").Value );

							newcase = (TestCase)tgsi;
						}
							break;
						case "3":
						{
							TestLookupPUID tlp = new TestLookupPUID( _httpserver );

							tlp.NumberOfPUIDs = Int32.Parse( xn.Attributes.GetNamedItem("numberofpuids").Value );

							// look at all the child nodes.
							foreach ( XmlNode xchild in xn.ChildNodes )
							{
								tlp.AddPUID( UInt64.Parse(xchild.Attributes.GetNamedItem("value").Value) );
							}

							newcase = (TestCase)tlp;
						}
							break;
						case "4":
						{
							TestLookupGamerTag tlgt = new TestLookupGamerTag( _httpserver );

							tlgt.NumberOfGamerTags = Int32.Parse( xn.Attributes.GetNamedItem("numberofgamertags").Value );

							// look at all the child nodes.
							foreach ( XmlNode xchild in xn.ChildNodes )
							{
								tlgt.AddGamerTag( xchild.Attributes.GetNamedItem("value").Value );
							}

							newcase = (TestCase)tlgt;
						}
							break;
						default:
						{
							throw new Exception("LivePxyTest:  XML file contains invalid test case type.");
						}
					}

					_tests[nCount] = newcase;

					nCount++;
				}

			}

			public TestCase[] _tests;
			protected string     _httpserver;

			private const string http_request_header = "POST /liveproxy/forwardrequest.aspx HTTP/1.0\r\nAccept: */*\r\nUser-Agent: httppost\r\nHost: UdpSender\r\nxrl: value\r\n\r\n";
		}

		#endregion

		public static string httpServer = Global.XEnv.GetVirtualInterface(VirtualInterface.livepxy).ToString();

		[TestCase, Description("FuncGetSitePUID_GetSitePUID")]
		class FuncGetSitePUID_GetSitePUID : TestBase
		{
			protected override void Execute()
			{
				try
				{
					ResultCode = TEST_RESULTS.FAILED;

					TestGetSitePUIDs thisTest = new TestGetSitePUIDs(httpServer);
					thisTest.SubjectName = "test.xbltest.rdo.001";

					thisTest.Run();

					string result = thisTest.ToString();

					if((result.IndexOf("MachinePUID:") != -1) &&
						(result.IndexOf("UserPUID:") != -1) &&
						(result.IndexOf("Content-Type = xon/0") != -1)
						)
						ResultCode = TEST_RESULTS.PASSED;
				}
				catch(Exception e)
				{
					Console.WriteLine( e.ToString() );
				}
			}
		}


		[TestCase, Description("FuncLSPLookupGamerTag_LookupGamerTag")]
		class FuncLSPLookupGamerTag_LookupGamerTag : TestBase
		{
			protected override void Execute()
			{
				try
				{
					ResultCode = TEST_RESULTS.FAILED;

					TestLookupGamerTag thisTest = new TestLookupGamerTag(httpServer, 1);

					thisTest.AddGamerTag("webuser1");
					thisTest.Run();

					string result = thisTest.ToString();

					int PUIDStart = result.LastIndexOf('\n');
					string sPUID = result.Substring(PUIDStart+1);
					if((sPUID != "0") &&
						(result.IndexOf("Content-Type = xon/0") != -1))
						ResultCode = TEST_RESULTS.PASSED;
				}
				catch(Exception e)
				{
					Console.WriteLine( e.ToString() );
				}
			}
		}

	}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WebSGBVTs\Tests\StoregeWidgetTests.cs ===
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using ServerTestFramework.WebWidget;
using ServerTestFramework.Web.Storage;
using xonline.common.config;

namespace WebSGBVTs
{
	/// <summary>
	/// Storage Widget Tests.  Lifted and modified from the StorageWidget test dll
	/// </summary>
	[TestGroup]
	public class StorageWidgetTests : TestNode
	{
		#region Intialization and cleanup code
		public override void PreRun ()
		{
			// connect to storage DB
			try
			{
				ConsoleX.Write("Connecting to Storage DB...");
				Helpers.sqlTitleConn = new SqlConnection[Global.XEnv.GetServerListByInterface(Interface.storedb).Length];
				Helpers.sqlUserConn = new SqlConnection[Global.XEnv.GetServerListByInterface(Interface.storedb).Length];
				for (int i=0; i<Global.XEnv.GetServerListByInterface(Interface.storedb).Length; i++)
				{
					Helpers.sqlTitleConn[i] = new SqlConnection("Data Source="+Global.XEnv.GetServerListByInterface(Interface.storedb)[i]+";Integrated Security=SSPI;Initial Catalog=TitleDB");
					Helpers.sqlTitleConn[i].Open();
					Helpers.sqlUserConn[i] = new SqlConnection("Data Source="+Global.XEnv.GetServerListByInterface(Interface.storedb)[i]+";Integrated Security=SSPI;Initial Catalog=TUserDB");
					Helpers.sqlUserConn[i].Open();
				}
				ConsoleX.WriteLine("done");
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine("Unable to connect to Storage DB: "+e.Message);
			}

			/* upload files for ReadTitleFile tests */

			ConsoleX.Write("Removing files from stress...");
			WCStorage storage = new WCStorage();
			byte [] data = null;

			// remove any pre-existing files
			uint titleId = Helpers.titleRW;
			while (titleId != 0)
			{
				try
				{
					FileEnumerationInfo[] eInfo = storage.EnumerateTitleFiles(titleId,"%",DateTime.UtcNow.AddYears(-1).ToLocalTime());
					for (int i=0; i<eInfo.Length; i++)
					{
						if (eInfo[i].FileName.StartsWith("stw") ||
							(eInfo[i].FileName.StartsWith("widget") && !eInfo[i].FileName.StartsWith("widgettest")))
						{
							try
							{
								storage.DeleteTitleFile(titleId,eInfo[i].FileName);
							}
							catch
							{
								ConsoleX.WriteLine("Unable to delete file "+eInfo[i].FileName+" for title "+titleId);
							}
						}
					}
				}
				catch (Exception e)
				{
					ConsoleX.WriteLine("Error clearing title files for title "+titleId+": "+e.Message);
				}

				switch (titleId)
				{
					case Helpers.titleRW:
						titleId = Helpers.titleReadTestsMax;
						break;
					case Helpers.titleReadTestsMax:
						titleId = Helpers.titleReadTests;
						break;
					case Helpers.titleReadTests:
						titleId = 0;
						break;
				}
			}
			ConsoleX.WriteLine("done");

			// files with different name lengths
			ConsoleX.Write("Uploading files for ReadTitleFile tests...");

			try
			{
				if (Helpers.TotalMatchingFiles("select count(*) from t_files where i_title_id = "+Helpers.titleReadTests+" and vc_name not like '%b' and vc_name not like '%bz'",Helpers.sqlTitleConn) != 12)
				{
					// blob
					data = Hexer.unhex("C0558E31542FA6B9");
					storage.WriteTitleFile(Helpers.titleReadTests,"1",FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteTitleFile(Helpers.titleReadTests,"fT",FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteTitleFile(Helpers.titleReadTests,"widgettestwith32charsabcdef_ghij",FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteTitleFile(Helpers.titleReadTests,"64charsInWidgetTestabcdef_ghijKL64charsInWidgetTestabcdef_ghijKL",FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteTitleFile(Helpers.titleReadTests,@"0123456789abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ-_.",FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					string filename = "255charsInWidgetTestTitleMaxFileLengths";
					for (int i=0; i<5; i++)
						filename += filename;
					filename = filename.Substring(0,227);
					storage.WriteTitleFile(Helpers.titleReadTests,filename,FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());

					// package
					System.IO.FileStream fs = System.IO.File.OpenRead(@"TestFiles\stdtest.xcp");
					data = new byte[fs.Length];
					fs.Read(data,0,(int)fs.Length);
					fs.Close();
					storage.WriteTitleFile(Helpers.titleReadTests,"z",FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteTitleFile(Helpers.titleReadTests,"fZ",FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteTitleFile(Helpers.titleReadTests,"widgettestwith32charsabcdef_ghiz",FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteTitleFile(Helpers.titleReadTests,"64charsInWidgetTestabcdef_ghijKL64charsInWidgetTestabcdef_ghijKZ",FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteTitleFile(Helpers.titleReadTests,@"0123456789abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXY-_.Z",FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					filename = filename.Substring(0,226) + "z";
					storage.WriteTitleFile(Helpers.titleReadTests,filename,FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine("Unable to write files for Read tests: "+e.Message);
			}

			// files of different sizes

			try
			{
				if (Helpers.TotalMatchingFiles("select count(*) from t_files where i_title_id = "+Helpers.titleReadTests+" and vc_name like '%b' or vc_name like '%bz'",Helpers.sqlTitleConn) != 7)
				{
					string [] sizes = { "1KB", "10KB", "1MB" };

					storage.WriteTitleFile(Helpers.titleReadTests,"1B",FileContentTypeEnum.Blob,new byte[] {0x7F},DateTime.UtcNow.AddDays(4).ToLocalTime());
					foreach (string size in sizes)
					{
						System.IO.FileStream fStream = System.IO.File.OpenRead(@"testfiles\"+size+".test");
						int fileLen = (int)fStream.Length;
						data = new byte[fileLen];
						int nBytesRead = fStream.Read(data,0,fileLen);
						fStream.Close();
						if (nBytesRead != fileLen)
							throw new Exception();

						storage.WriteTitleFile(Helpers.titleReadTests,size,FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());

						System.IO.FileStream fs = System.IO.File.OpenRead(@"TestFiles\"+size+".xcp");
						data = new byte[fs.Length];
						fs.Read(data,0,(int)fs.Length);
						fs.Close();
						storage.WriteTitleFile(Helpers.titleReadTests,size+"z",FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					}
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine("Unable to upload files for Read tests: "+e.Message);
			}

			// upload 5MB file

			try
			{
				if (Helpers.TotalMatchingFiles("select count(*) from t_files where i_title_id = "+Helpers.titleReadTestsMax,Helpers.sqlTitleConn) != 1)
				{
					System.IO.FileStream fStream = System.IO.File.OpenRead(@"testfiles\5MB.test");
					int fileLen = (int)fStream.Length;
					data = new byte[fileLen];
					int nBytesRead = fStream.Read(data,0,fileLen);
					fStream.Close();
					if (nBytesRead != fileLen)
						throw new Exception();

					storage.WriteTitleFile(Helpers.titleReadTestsMax,"5MB",FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine("Unable to upload files for Read tests: "+e.Message);
			}

			// max files for one title (read-only title)

			try
			{

				// use partner with read-write privilege
				WCStorage storageAdmin = new WCStorage(Global.XEnv.GetVirtualInterface(VirtualInterface.wcstorage),new RequestInfo("asschw"));
				// remove any pre-existing files from stress tests
				titleId = Helpers.titleROnly;
				try
				{
					FileEnumerationInfo[] eInfo = storage.EnumerateTitleFiles(titleId,"%",DateTime.UtcNow.AddYears(-1).ToLocalTime());
					for (int i=0; i<eInfo.Length; i++)
					{
						if (eInfo[i].FileName.StartsWith("stw") ||
							(eInfo[i].FileName.StartsWith("widget") && eInfo[i].FileName.Length > 8))
						{
							try
							{
								storageAdmin.DeleteTitleFile(titleId,eInfo[i].FileName);
							}
							catch
							{
								ConsoleX.WriteLine("Unable to delete file "+eInfo[i].FileName+" for title "+titleId);
							}
						}
					}
				}
				catch
				{
					ConsoleX.WriteLine("Error clearing title files for title "+titleId);
				}

				// check DB to see if files already loaded
				if (Helpers.TotalMatchingFiles("select count(*) from t_files where i_title_id = "+Helpers.titleROnly,Helpers.sqlTitleConn) != 50)
				{
					// add files
					for (int i=1; i<51; i++)
					{
						data = new byte[i];
						for (int j=0; j<data.Length; j++)
							data[j] = (byte)Helpers.rnd.Next(256);

						storageAdmin.WriteTitleFile(Helpers.titleROnly,"widget"+i.ToString(),FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					}
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine("Unable to populate read-only title: "+e.Message);
			}

			// get modified date of "fT" and "fZ" for ReadTitleFile tests
			Helpers.dtModified[0] = DateTime.Now;
			Helpers.dtModified[1] = DateTime.Now;

			SqlDataReader myDataReader = null;
			for (int i=0; i<Helpers.sqlTitleConn.Length; i++)
			{
				try
				{
					SqlCommand cmd = new SqlCommand("select dt_modified from t_files where i_title_id = "+Helpers.titleReadTests+" and vc_name = '/fT'",Helpers.sqlTitleConn[i]);
					myDataReader = cmd.ExecuteReader();

					if (myDataReader.Read())
						Helpers.dtModified[0] = myDataReader.GetDateTime(0).ToLocalTime();

					myDataReader.Close();

					cmd.CommandText = "select dt_modified from t_files where i_title_id = "+Helpers.titleReadTests+" and vc_name = '/fZ'";
					myDataReader = cmd.ExecuteReader();

					if (myDataReader.Read())
						Helpers.dtModified[1] = myDataReader.GetDateTime(0).ToLocalTime();
				}
				catch
				{
					ConsoleX.WriteLine("Unable to determine modified date.");
					if (Helpers.sqlTitleConn[i].State != ConnectionState.Open)
						Helpers.sqlTitleConn[i].Open();
				}
				finally
				{
					if (myDataReader != null && !myDataReader.IsClosed)
						myDataReader.Close();
				}
			}

			ConsoleX.WriteLine("done");
			ConsoleX.Write("Uploading files for ReadUserFile tests...");

			/* upload files for ReadUserFile tests */

			// files with different name lengths

			try
			{
				// check DB to see if files already loaded
				if (Helpers.TotalMatchingFiles("select count(*) from t_files where i_title_id = "+Helpers.titleReadTests+" and vc_name not like '%b' and vc_name not like '%bz' and bi_user_puid = 2814749767105536",Helpers.sqlUserConn) != 6)
				{
					// blob
					data = Hexer.unhex("C0558E31542FA6B9");
					storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+1023)),"webuser1023","1",FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+1023)),"webuser1023","fT",FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+1023)),"webuser1023","widgettestwith32charsabcdef_ghij",FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+1023)),"webuser1023","64charsInWidgetTestabcdef_ghijKL64charsInWidgetTestabcdef_ghijKL",FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+1023)),"webuser1023",@"0123456789abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ-_.",FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					string filename = "255charsInWidgetTestTitleMaxFileLengths";
					for (int i=0; i<5; i++)
						filename += filename;
					filename = filename.Substring(0,210);
					storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+1023)),"webuser1023",filename,FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
				}

				if (Helpers.TotalMatchingFiles("select count(*) from t_files where i_title_id = "+Helpers.titleReadTests+" and vc_name not like '%b' and vc_name not like '%bz' and bi_user_puid = 2814749767105559",Helpers.sqlUserConn) != 6)
				{
					// package
					System.IO.FileStream fs = System.IO.File.OpenRead(@"TestFiles\stdtest.xcp");
					data = new byte[fs.Length];
					fs.Read(data,0,(int)fs.Length);
					fs.Close();
					storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+1000)),"webuser1000","z",FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+1000)),"webuser1000","fZ",FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+1000)),"webuser1000","widgettestwith32charsabcdef_ghiz",FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+1000)),"webuser1000","64charsInWidgetTestabcdef_ghijKL64charsInWidgetTestabcdef_ghijKZ",FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+1000)),"webuser1000",@"0123456789abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXY-_.Z",FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					string filename = "255charsInWidgetTestTitleMaxFileLengths";
					for (int i=0; i<5; i++)
						filename += filename;
					filename = filename.Substring(0,209) + "z";
					storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+1000)),"webuser1000",filename,FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine("Unable to write files for Read tests: "+e.Message);
			}

			// files of different sizes

			try
			{
				// check DB to see if files already loaded
				if (Helpers.TotalMatchingFiles("select count(*) from t_files where i_title_id = "+Helpers.titleReadTests+" and vc_name like '%b' or vc_name like '%bz'",Helpers.sqlUserConn) != 5)
				{
					string [] sizes = { "1KB", "10KB" };

					storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+900)),"webuser900","1B",FileContentTypeEnum.Blob,new byte[] {0x7F},DateTime.UtcNow.AddDays(4).ToLocalTime());
					foreach (string size in sizes)
					{
						System.IO.FileStream fStream = System.IO.File.OpenRead(@"testfiles\"+size+".test");
						int fileLen = (int)fStream.Length;
						data = new byte[fileLen];
						int nBytesRead = fStream.Read(data,0,fileLen);
						fStream.Close();
						if (nBytesRead != fileLen)
							throw new Exception();

						storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+900)),"webuser900",size,FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
						System.IO.FileStream fs = System.IO.File.OpenRead(@"TestFiles\"+size+".xcp");
						data = new byte[fs.Length];
						fs.Read(data,0,(int)fs.Length);
						fs.Close();
						storage.WriteUserFile(Helpers.titleReadTests,BitConverter.GetBytes((long)(562949953420287+900)),"webuser900",size+"z",FileContentTypeEnum.Package,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					}
				}

				// upload 64KB file

				// check DB to see if file already loaded
				if (Helpers.TotalMatchingFiles("select count(*) from t_files where i_title_id = "+Helpers.titleReadTestsMax+" and vc_name like '%64KB'",Helpers.sqlUserConn) != 1)
				{
					System.IO.FileStream fStream = System.IO.File.OpenRead(@"testfiles\64KB.test");
					int fileLen = (int)fStream.Length;
					data = new byte[fileLen];
					int nBytesRead = fStream.Read(data,0,fileLen);
					fStream.Close();
					if (nBytesRead != fileLen)
						throw new Exception();

					storage.WriteUserFile(Helpers.titleReadTestsMax,BitConverter.GetBytes((long)(562949953420287+900)),"webuser900","64KB",FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine("Unable to upload files for Read tests: "+e.Message);
			}

			// max files for one title (read-only title)

			try
			{
				if (Helpers.TotalMatchingFiles("select count(*) from t_files where i_title_id = "+Helpers.titleROnly+" and bi_user_puid = 2814749767106539",Helpers.sqlUserConn) != 8)
				{
					// use partner with read-write privilege
					WCStorage storageAdmin = new WCStorage(Global.XEnv.GetVirtualInterface(VirtualInterface.wcstorage),new RequestInfo("asschw"));
					// add files
					for (int i=1; i<9; i++)
					{
						data = new byte[i];
						for (int j=0; j<data.Length; j++)
							data[j] = (byte)Helpers.rnd.Next(256);

						storageAdmin.WriteUserFile(Helpers.titleROnly,BitConverter.GetBytes((long)(562949953420287+20)),"webuser20","widget"+i.ToString(),FileContentTypeEnum.Blob,data,DateTime.UtcNow.AddDays(4).ToLocalTime());
					}
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine("Unable to populate read-only title: "+e.Message);
			}

			// get modified date of "fT" and "fZ" for ReadUserFile tests
			Helpers.dtModifiedUser[0] = DateTime.Now;
			Helpers.dtModifiedUser[1] = DateTime.Now;

			for (int i=0; i<Helpers.sqlUserConn.Length; i++)
			{
				try
				{
					SqlCommand cmd = new SqlCommand("select dt_modified from t_files where i_title_id = "+Helpers.titleReadTests+" and vc_name like '/%/fT'",Helpers.sqlUserConn[i]);
					myDataReader = cmd.ExecuteReader();

					if (myDataReader.Read())
						Helpers.dtModifiedUser[0] = myDataReader.GetDateTime(0).ToLocalTime();

					myDataReader.Close();

					cmd.CommandText = "select dt_modified from t_files where i_title_id = "+Helpers.titleReadTests+" and vc_name like '/%/fZ'";
					myDataReader = cmd.ExecuteReader();

					if (myDataReader.Read())
						Helpers.dtModifiedUser[1] = myDataReader.GetDateTime(0).ToLocalTime();
				}
				catch
				{
					ConsoleX.WriteLine("Unable to determine modified date.");
					if (Helpers.sqlUserConn[i].State != ConnectionState.Open)
						Helpers.sqlUserConn[i].Open();
				}
				finally
				{
					if (myDataReader != null && !myDataReader.IsClosed)
						myDataReader.Close();
				}
			}
			ConsoleX.WriteLine("done");
		}
		public override void PostRun ()
		{
			// disconnect from storage DB
			for (int i=0; i<Helpers.sqlTitleConn.Length; i++)
			{
				if (Helpers.sqlTitleConn[i] != null && Helpers.sqlTitleConn[i].State != ConnectionState.Closed)
					Helpers.sqlTitleConn[i].Close();
				if (Helpers.sqlUserConn[i] != null && Helpers.sqlUserConn[i].State != ConnectionState.Closed)
					Helpers.sqlUserConn[i].Close();
			}
		}
		#endregion

		#region Common Code
		public struct Files
		{
			public byte [] title;
			public byte [] user;
		}

		public class Helpers
		{
			public const uint titleRW = 400001;
			public const uint titleROnly = 400000;
			public const uint titleReadTests = 0xb2d2;
			public const uint titleReadTestsMax = 0xc3b0;

			public static DateTime [] dtModified = new DateTime[2];
			public static DateTime [] dtModifiedUser = new DateTime[2];

			public static SqlConnection [] sqlTitleConn = null;
			public static SqlConnection [] sqlUserConn = null;

			public static System.Random rnd = new Random((int)DateTime.Now.ToFileTime());

			public static int TotalMatchingFiles(string sqlCmd, SqlConnection[] sqlConn)
			{
				int nFiles = 0;
				for (int i=0; i<sqlConn.Length; i++)
				{
					SqlCommand cmd = new SqlCommand(sqlCmd,sqlConn[i]);
					SqlDataReader myDataReader = null;

					try
					{
						// check DB to see if files already loaded
						myDataReader = cmd.ExecuteReader();

						if (myDataReader.Read())
							nFiles += myDataReader.GetInt32(0);
					}
					catch (Exception e)
					{
						ConsoleX.WriteLine("Unable to access files for Read tests: "+e.Message);
						if (sqlConn[i].State != ConnectionState.Open)
							sqlConn[i].Open();
					}
					finally
					{
						if (myDataReader != null && !myDataReader.IsClosed)
						{
							myDataReader.Close();
							myDataReader = null;
						}
					}
				}

				return nFiles;
			}


			public static bool IsBlacklistedDigest(byte [] digest, bool remove)
			{
				bool bRet = false;

				SqlConnection [] sqlConn = new SqlConnection[Global.XEnv.GetServerListByInterface(Interface.npdb).Length];

				for (int i=0; i<sqlConn.Length; i++)
				{
                    IInterfaceInfo npdbInfo = Config.GetInterface(Global.XEnv.GetServerListByInterface(Interface.npdb)[i], Interface.npdb);
                    sqlConn[i] = new SqlConnection(npdbInfo.SqlConnectionString);
					sqlConn[i].Open();

					SqlDataReader myDataReader = null;

					try
					{
						SqlCommand mySqlCommand = new SqlCommand("select count(*) from t_blacklisted_digests where bin_digest = 0x"+Hexer.tohex(digest)+" and ti_is_blacklisted <> 0", sqlConn[i]);
						myDataReader = mySqlCommand.ExecuteReader();

						// Always call Read before accessing data.
						if (myDataReader.Read())
						{
							bRet=(myDataReader.GetInt32(0) == 1);
						}
						else
							ConsoleX.WriteLine("No rows returned for select count(*)");

						if (remove)
						{
							myDataReader.Close();
							SqlCommand cmd = new SqlCommand("update t_blacklisted_digests set ti_is_blacklisted = 0 where bin_digest = 0x"+Hexer.tohex(digest)+" and ti_is_blacklisted <> 0", sqlConn[i]);
							cmd.ExecuteNonQuery();
						}
					}
					finally
					{
						// Always call Close when done reading.
						if (myDataReader != null && !myDataReader.IsClosed)
							myDataReader.Close();
						if (sqlConn[i] != null && sqlConn[i].State != ConnectionState.Closed)
							sqlConn[i].Close();
					}

					if (bRet)
						return true;
				}

				ConsoleX.WriteLine("Digest not found in table of blacklisted digests.");
				return false;
			}

			// stress-related objects and methods

			public static bool logging = true;
			public static System.IO.StreamWriter strWriter = null;
			public static ArrayList StressTitles = new ArrayList();
			public static ArrayList StressTitlesRead = new ArrayList();
			public static ArrayList StressTitlesWrite = new ArrayList();
			public static int AvgUserDataSize = 0;
			public static int AvgTitleDataSize = 0;
			public static ArrayList StressUsers = new ArrayList();
			public static Hashtable StressUploadFiles = new Hashtable();

			public static uint GetStressTitle()
			{
				return (uint)StressTitles[rnd.Next(StressTitles.Count)];
			}

			public static uint GetStressTitleRead()
			{
				return (uint)StressTitlesRead[rnd.Next(StressTitlesRead.Count)];
			}

			public static uint GetStressTitleWrite()
			{
				return (uint)StressTitlesWrite[rnd.Next(StressTitlesWrite.Count)];
			}

			public static PuidName GetStressUser()
			{
				PuidName user = null;
				lock(StressUsers)
				{
					int index = rnd.Next(StressUsers.Count);
					user = (PuidName)StressUsers[index];
					StressUsers.RemoveAt(index);
				}
				return user;
			}

			public static void ReturnStressUser(PuidName user)
			{
				lock(StressUsers)
				{
					StressUsers.Add(user);
				}
			}

			public static byte [] GetStressDataToWrite(uint titleId, bool title)
			{
				byte [] uploadBytes = null;
				if (title)
					uploadBytes = ((Files)StressUploadFiles[titleId]).title;
				else
					uploadBytes = ((Files)StressUploadFiles[titleId]).user;

				return uploadBytes;
			}

			public static void StressVerifyReadTitle(ReadFileInfo rInfo, uint titleId)
			{
				if (rInfo.FileSize != AvgTitleDataSize)
					throw new Exception("Verify Title Error: Unexpected file size");
				if (rInfo.TitleID != titleId)
					throw new Exception("Verify Title Error: Unexpected titleId");
				if (rInfo.GamerTag != "??????")
					throw new Exception("Verify Title Error: Unexpected GamerTag");
			}

			public static void StressVerifyReadUser(ReadFileInfo rInfo, uint titleId, string GamerTag)
			{
				if (rInfo.FileSize != AvgUserDataSize)
					throw new Exception("Verify User Error: Unexpected file size");
				if (rInfo.TitleID != titleId)
					throw new Exception("Verify User Error: Unexpected titleId");
				if (rInfo.GamerTag.CompareTo(GamerTag) != 0)
					throw new Exception("Verify User Error: Unexpected GamerTag");
			}
		}

		#endregion

		#region EnumerateTitleFiles Helpers
		public static bool EnumerateTitleFiles_VerifyPositive(FileEnumerationInfo [] result, FileEnumerationInfo [] expected)
		{
			bool bRet = false;

			if (result.Length != expected.Length)
				return false;
			if (result.Length == 0)
				return true;
			for (int i=0; i<result.Length; i++)
			{
				// find matching filename in expected
				int index = 0;
				for (index=0; index<expected.Length; index++)
					if (result[i].FileName == expected[index].FileName)
						break;
				if (index == expected.Length)
					return false;	// no match found
				if (result[i].FileContentType != expected[index].FileContentType ||
					result[i].FileSize != expected[index].FileSize ||
					result[i].GamerTag != expected[index].GamerTag ||
					result[i].TitleID != expected[index].TitleID ||
					result[i].TitleVersion != expected[index].TitleVersion ||
					result[i].UserCountryID != expected[index].UserCountryID)
					return false;
				// check creation and modified dates
				SqlDataReader myDataReader = null;
				for (int iSql=0; iSql<Helpers.sqlTitleConn.Length; iSql++)
				{
					try
					{
						SqlCommand cmd = new SqlCommand("select dt_created, dt_modified from t_files where vc_name = '/"+result[i].FileName+"' and i_title_id = "+result[i].TitleID,Helpers.sqlTitleConn[iSql]);
						myDataReader = cmd.ExecuteReader();

						if (myDataReader.Read())
						{
							if (myDataReader.GetDateTime(0) == result[i].CreationDate.ToUniversalTime() &&
								myDataReader.GetDateTime(1) == result[i].ModifiedDate.ToUniversalTime())
								bRet = true;
							break;
						}
					}
					catch
					{
						if (Helpers.sqlTitleConn[iSql].State != ConnectionState.Open)
							Helpers.sqlTitleConn[iSql].Open();
						ConsoleX.WriteLine("Unable to access DB for CreateDate comparison.");
					}
					finally
					{
						if (myDataReader != null && !myDataReader.IsClosed)
							myDataReader.Close();
					}
				}
			}

			return bRet;
		}

		public static bool EnumerateTitleFiles_RunPositiveTest(uint titleId, FileEnumerationInfo [] expInfo)
		{
			return EnumerateTitleFiles_RunPositiveTest(titleId,"fT",DateTime.UtcNow.AddDays(-5).ToLocalTime(),expInfo);
		}

		public static bool EnumerateTitleFiles_RunPositiveTest(string fileQuery, FileEnumerationInfo [] expInfo)
		{
			return EnumerateTitleFiles_RunPositiveTest(Helpers.titleReadTests,fileQuery,DateTime.UtcNow.AddDays(-5).ToLocalTime(),expInfo);
		}

		public static bool EnumerateTitleFiles_RunPositiveTest(DateTime ifModifiedSince, FileEnumerationInfo [] expInfo)
		{
			return EnumerateTitleFiles_RunPositiveTest(Helpers.titleReadTests,"fT",ifModifiedSince,expInfo);
		}

		public static bool EnumerateTitleFiles_RunPositiveTest(uint titleId, string fileQuery, DateTime ifModifiedSince, FileEnumerationInfo [] expInfo)
		{
			bool bRet = true;
			WCStorage storage = new WCStorage(Global.XEnv.GetVirtualInterface (VirtualInterface.websg), CertificateStore.LookupCertificate(null, Helper.Certificate));

			try
			{
				FileEnumerationInfo [] retInfo = storage.EnumerateTitleFiles(titleId,fileQuery,ifModifiedSince);

				if (!EnumerateTitleFiles_VerifyPositive(retInfo,expInfo))
					bRet = false;
			}
			catch
			{
				bRet = false;
			}

			return bRet;
		}

		#endregion

		#region EnumerateTitleFiles Tests
		[TestCase, Description("EnumerateTitleFiles Valid: fileQuery full filename")]
		class EnumerateTitleFiles_ValidQueryFullFilename : TestBase
		{
			protected override void Execute()
			{
				FileEnumerationInfo [] expInfo = new FileEnumerationInfo[1];
				expInfo[0] = new FileEnumerationInfo();
				expInfo[0].GamerTag = "??????";
				expInfo[0].TitleID = Helpers.titleReadTests;
				expInfo[0].TitleVersion = 0;
				expInfo[0].UserCountryID = 0;
				expInfo[0].FileName = "fT";
				expInfo[0].FileSize = 8;
				expInfo[0].FileContentType = FileContentTypeEnum.Blob;

				if (EnumerateTitleFiles_RunPositiveTest("fT%",expInfo))
					ResultCode = TEST_RESULTS.PASSED;
				else
					ResultCode = TEST_RESULTS.FAILED;

				if (!EnumerateTitleFiles_RunPositiveTest("%fT",expInfo))
					ResultCode = TEST_RESULTS.FAILED;

				if (!EnumerateTitleFiles_RunPositiveTest("f%T",expInfo))
					ResultCode = TEST_RESULTS.FAILED;
			}
		} // EnumerateTitleFiles_ValidQueryFullFilename
		#endregion

		#region GetTitleQuota Helpers
		public static bool GetTitleQuota_VerifyPositive(QuotaInfo result, QuotaInfo exp)
		{
			return (result.MaxFileSize == exp.MaxFileSize &&
				result.TotalBytesMax == exp.TotalBytesMax &&
				result.TotalBytesUsed == exp.TotalBytesUsed &&
				result.TotalFilesMax == exp.TotalFilesMax &&
				result.TotalFilesUsed == exp.TotalFilesUsed);
		}

		public static bool GetTitleQuota_RunPositiveTest(uint titleId, QuotaInfo eQuota)
		{
			bool bRet = true;
			WCStorage storage = new WCStorage(Global.XEnv.GetVirtualInterface (VirtualInterface.websg), CertificateStore.LookupCertificate(null, Helper.Certificate));

			try
			{
				QuotaInfo rQuota = storage.GetTitleQuota(titleId);

				if (!GetTitleQuota_VerifyPositive(rQuota, eQuota))
				{
					ConsoleX.WriteLine("Returned data does not match expected.");
					bRet = false;
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine(e.Message);
				bRet = false;
			}

			return bRet;
		}
		#endregion

		#region GetTitleQuota Tests
		[TestCase, Description("GetTitleQuota Valid: Read-Only Title")]
		class GetTitleQuota_ValidReadOnlyTitle : TestBase
		{
			protected override void Execute()
			{
				QuotaInfo eQuota = new QuotaInfo();
				eQuota.MaxFileSize = 5242880;	// 5 MB
				eQuota.TotalBytesMax = 5242880;	// 5 MB
				eQuota.TotalFilesMax = 50;

				eQuota.TotalBytesUsed = 1275;
				eQuota.TotalFilesUsed = 50;

				if (GetTitleQuota_RunPositiveTest(Helpers.titleROnly,eQuota))
					ResultCode = TEST_RESULTS.PASSED;
				else
					ResultCode = TEST_RESULTS.FAILED;
			}
		}
		#endregion

		#region ReadTitleFile Helpers
		public static bool ReadTitleFile_VerifyPositive(ReadFileInfo result, ReadFileInfo expected, string filename)
		{
			bool bRet = false;
			try
			{
				if (result.FileContentType != expected.FileContentType ||
					result.FileNotModified != expected.FileNotModified ||
					result.FileSize != expected.FileSize ||
					result.GamerTag != expected.GamerTag ||
					result.TitleID != expected.TitleID ||
					result.TitleVersion != expected.TitleVersion ||
					result.UserCountryID != expected.UserCountryID)
					throw new Exception("Data mismatch between result and expected");
				// check data
				if (result.FileSize != 0 && result.FileContentType == FileContentTypeEnum.Package)
				{
					// package

					// calculate start locations of hashes
					ushort cbCFHeader = BitConverter.ToUInt16(expected.FileData,36);
					ushort cFolders = BitConverter.ToUInt16(expected.FileData,26);
					long coffFolders = 40 + cbCFHeader;
					long coffCabStart = BitConverter.ToUInt32(expected.FileData,(int)coffFolders);
					uint cCFData = BitConverter.ToUInt32(expected.FileData,(int)coffFolders+4);

					// check file EXCEPT those locations
					for (int i=0; i<result.FileSize; i++)
						if (result.FileData[i] != expected.FileData[i] &&
							!(i >= 40 && i < 60) &&
							!(i >= coffCabStart && i < coffCabStart + 4) &&
							!(i >= coffFolders + 8 && i < coffFolders + 28) &&
							!(i >= coffCabStart + 44 + 112 && i < coffCabStart + 144 + 112) &&
							!(i >= 128 && i < 228))
							throw new Exception("File contents don't match expected.");

					// check checksum of contentmeta.xbx (should be 0)
					/*					int checksumRangeArrayOffset = (int)coffCabStart + 4;
										int checksumRangeSize = 4 + (int)BitConverter.ToUInt16(result.FileData,(int)coffCabStart + 4);
										byte [] forCheckSum = new byte[checksumRangeSize];
										Array.Copy(result.FileData,checksumRangeArrayOffset,forCheckSum,0,checksumRangeSize);
										UInt32 crc = BitConverter.ToUInt32(CRC32.Crc32(forCheckSum),0);
										if (crc != BitConverter.ToUInt32(result.FileData,(int)coffCabStart))
											return false;
					*/					if (BitConverter.ToUInt32(result.FileData,(int)coffCabStart) != 0)
											throw new Exception("Checksum not equal 0");

					// check hash for contentmeta.xbx
					System.Security.Cryptography.SHA1CryptoServiceProvider encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
					byte[] hashVal = null;
					int index = 0, cbData = 0, cbTotalCFDataSize = 0, dataArrayOffset = 0;
					for (index=(int)coffCabStart; index<coffCabStart+cCFData-1; index++)
					{
						index += 4;
						cbData = BitConverter.ToUInt16(result.FileData,index);
						cbTotalCFDataSize = cbData + 8;
						dataArrayOffset = index-4;
						encoder.TransformBlock(result.FileData, dataArrayOffset, cbTotalCFDataSize, result.FileData, dataArrayOffset);
						index += 2 + cbData;
					}
					index += 4;
					cbData = BitConverter.ToUInt16(result.FileData,index);
					cbTotalCFDataSize = cbData + 8;
					dataArrayOffset = index-4;
					encoder.TransformFinalBlock(result.FileData, dataArrayOffset, cbTotalCFDataSize);
					hashVal = encoder.Hash;
					for (int i=0; i<20; i++)
						if (result.FileData[coffFolders + 8 + i] != hashVal[i])
							throw new Exception("Hash of contentmeta.xbx doesn't match expected.");

					// check hash for folder info
					encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
					hashVal = encoder.ComputeHash(result.FileData,(int)coffFolders,cFolders*36);
					for (int i=0; i<20; i++)
						if (result.FileData[40 + i] != hashVal[i])
							throw new Exception("Hash of folder info doesn't match expected.");

					// check signature for HEADER
					byte [] signature = new byte[100];
					Array.Copy(result.FileData,128,signature,0,100);
					encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
					byte [] digest = encoder.ComputeHash(result.FileData,0,0x7C);

					ServerTestFramework.WebWidget.WCSignature sig = new WCSignature();
					ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest [] sigReq = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[1];
					sigReq[0] = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest();
					sigReq[0]._digest = digest;
					sigReq[0]._signature = signature;
					try
					{
						uint [] response = sig.VerifySignature(sigReq);
						if (response[0] != 0)
							throw new Exception("Header signature doesn't match expected.");
					}
					catch (Exception e)
					{
						ConsoleX.WriteLine(e.Message);
						return false;
					}

					// check signature for CONTENTMETA.XBX
					signature = new byte[100];
					Array.Copy(result.FileData,coffCabStart + 44 + 112,signature,0,100);
					encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
					digest = encoder.ComputeHash(result.FileData,(int)coffCabStart + 44,112);

					sigReq = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[1];
					sigReq[0] = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest();
					sigReq[0]._digest = digest;
					sigReq[0]._signature = signature;
					try
					{
						uint [] response = sig.VerifySignature(sigReq);
						if (response[0] != 0)
							throw new Exception("ContentMeta.xbx signature doesn't match expected.");
					}
					catch (Exception e)
					{
						ConsoleX.WriteLine(e.Message);
						return false;
					}
				}
				else
				{
					// blob
					for (int i=0; i<result.FileSize; i++)
						if (result.FileData[i] != expected.FileData[i])
							throw new Exception("Blob data doesn't match expected.");
				}
				// check creation date
				if (result.FileSize == 0)
				{
					bRet = (result.CreationDate.ToUniversalTime() == DateTime.FromFileTimeUtc(0));
					if (!bRet)
						ConsoleX.WriteLine("Creation date for file size = 0 not set to FileTime = 0.");
					return bRet;
				}

				SqlDataReader myDataReader = null;
				for (int i=0; i<Helpers.sqlTitleConn.Length; i++)
				{
					try
					{
						SqlCommand cmd = new SqlCommand("select dt_created from t_files where vc_name = '/"+filename+"' and i_title_id = "+result.TitleID,Helpers.sqlTitleConn[i]);
						myDataReader = cmd.ExecuteReader();

						if (myDataReader.Read())
						{
							if (myDataReader.GetDateTime(0) == result.CreationDate.ToUniversalTime())
								bRet = true;
							else
								ConsoleX.WriteLine("Creation date does not match date in Database");
							break;
						}
					}
					catch
					{
						if (Helpers.sqlTitleConn[i].State != ConnectionState.Open)
							Helpers.sqlTitleConn[i].Open();
						ConsoleX.WriteLine("Unable to access DB for CreateDate comparison.");
					}
					finally
					{
						if (myDataReader != null && !myDataReader.IsClosed)
							myDataReader.Close();
					}
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine(e.Message);
				bRet = false;
			}
			if (!bRet)
				ConsoleX.WriteLine("Verification failed.");

			return bRet;
		}

		public static bool ReadTitleFile_RunPositiveTest(string filename)
		{
			return ReadTitleFile_RunPositiveTest(Helpers.titleReadTests, filename, Helpers.dtModified[0].AddDays(-5), null);
		}

		public static bool ReadTitleFile_RunPositiveTest(string filename, DateTime modifiedSince)
		{
			return ReadTitleFile_RunPositiveTest(Helpers.titleReadTests, filename,modifiedSince, null);
		}

		public static bool ReadTitleFile_RunPositiveTest(string filename, string fileToTestWith)
		{
			return ReadTitleFile_RunPositiveTest(Helpers.titleReadTests, filename, Helpers.dtModified[0].AddDays(-5), fileToTestWith);
		}

		public static bool ReadTitleFile_RunPositiveTest(uint titleId, string filename, DateTime ifModifiedSinceDate, string fileToTestWith)
		{
			bool bRet = true;
			WCStorage storage = new WCStorage(Global.XEnv.GetVirtualInterface (VirtualInterface.websg), CertificateStore.LookupCertificate(null, Helper.Certificate));

			// get data that will be read
			byte [] data = null;
			if (filename.StartsWith("widget") && filename.Length <= 8)
			{
				// read data from db
				SqlDataReader myDataReader = null;
				string sqlQuery = "select uid_blob from t_files where vc_name = '/"+filename+"' and i_title_id = "+titleId;

				for (int i=0; i<Helpers.sqlTitleConn.Length; i++)
				{
					try
					{
						data = new byte[Convert.ToInt32(filename.Substring(6))];

						SqlCommand sqlComm = new SqlCommand(sqlQuery,Helpers.sqlTitleConn[i]);
						myDataReader = sqlComm.ExecuteReader();

						if (!myDataReader.Read())
							continue;

						object uid_blob = myDataReader.GetValue(0);

						myDataReader.Close();
						sqlQuery = "select bin_blob from t_blobs where uid_blob = '"+uid_blob+"'";
						sqlComm = new SqlCommand(sqlQuery,Helpers.sqlTitleConn[i]);
						myDataReader = sqlComm.ExecuteReader();

						if (!myDataReader.Read())
							throw new Exception("Data not found.");
						myDataReader.GetBytes(0,0,data,0,data.Length);
						break;
					}
					catch (Exception e)
					{
						ConsoleX.WriteLine("Error retrieving data from DB: "+e.Message);
						if (Helpers.sqlTitleConn[i].State != ConnectionState.Open)
							Helpers.sqlTitleConn[i].Open();
					}
					finally
					{
						if (myDataReader != null && !myDataReader.IsClosed)
							myDataReader.Close();
					}
				}
			}
			else if (fileToTestWith == "1B")
				data = Hexer.unhex("7F");
			else if (fileToTestWith != null)
			{
				try
				{
					System.IO.FileStream fStream = System.IO.File.OpenRead(@"testfiles\"+fileToTestWith);
					int fileLen = (int)fStream.Length;
					data = new byte[fileLen];
					int nBytesRead = fStream.Read(data,0,fileLen);
					fStream.Close();
					if (nBytesRead != fileLen)
						throw new Exception();
				}
				catch
				{
					ConsoleX.WriteLine("Failed to read file for upload.");
					return false;
				}
			}
			else
				data = Hexer.unhex("C0558E31542FA6B9");

			// read file
			try
			{
				ReadFileInfo rInfo = storage.ReadTitleFile(titleId,filename,ifModifiedSinceDate);

				ReadFileInfo expInfo = new ReadFileInfo();
				expInfo.GamerTag = "??????";
				expInfo.FileNotModified = true;
				if ((!filename.ToLower().EndsWith("z") && Helpers.dtModified[0] > ifModifiedSinceDate) ||
					(filename.ToLower().EndsWith("z") && Helpers.dtModified[1] > ifModifiedSinceDate))
				{
					expInfo.FileData = data;
					expInfo.FileNotModified = false;
					expInfo.FileSize = (uint)data.Length;
					expInfo.TitleID = titleId;
					expInfo.TitleVersion = 0;
					expInfo.UserCountryID = 0;
					if (filename.ToLower().EndsWith("z"))
						expInfo.FileContentType = FileContentTypeEnum.Package;
					else
						expInfo.FileContentType = FileContentTypeEnum.Blob;
				}

				if (!ReadTitleFile_VerifyPositive(rInfo,expInfo,filename))
					bRet = false;
			}
			catch
			{
				bRet = false;
			}

			return bRet;
		}
		#endregion

		#region ReadTitleFile Tests
		[TestCase, Description("ReadTitleFile Valid: ReadOnly Title")]
		class ReadTitleFile_ValidReadOnlyTitle : TestBase
		{
			protected override void Execute()
			{
				if (ReadTitleFile_RunPositiveTest(Helpers.titleROnly,"widget2",DateTime.UtcNow.AddDays(-5).ToLocalTime(),null))
					ResultCode = TEST_RESULTS.PASSED;
				else
					ResultCode = TEST_RESULTS.FAILED;
			}
		} // ReadTitleFile_ValidReadOnlyTitle
		#endregion

		#region ReadUserFile Helpers
		public static bool ReadUserFile_VerifyPositive(ReadFileInfo result, ReadFileInfo expected, string filename)
		{
			bool bRet = false;
			try
			{
				if (result.FileContentType != expected.FileContentType ||
					result.FileNotModified != expected.FileNotModified ||
					result.FileSize != expected.FileSize ||
					result.GamerTag != expected.GamerTag ||
					result.TitleID != expected.TitleID ||
					result.TitleVersion != expected.TitleVersion ||
					result.UserCountryID != expected.UserCountryID)
					throw new Exception("Data mismatch between result and expected");
				// check data
				if (result.FileSize != 0 && result.FileContentType == FileContentTypeEnum.Package)
				{
					// package

					// calculate start locations of hashes
					ushort cbCFHeader = BitConverter.ToUInt16(expected.FileData,36);
					ushort cFolders = BitConverter.ToUInt16(expected.FileData,26);
					long coffFolders = 40 + cbCFHeader;
					long coffCabStart = BitConverter.ToUInt32(expected.FileData,(int)coffFolders);
					uint cCFData = BitConverter.ToUInt32(expected.FileData,(int)coffFolders+4);

					// check file EXCEPT those locations
					for (int i=0; i<result.FileSize; i++)
						if (result.FileData[i] != expected.FileData[i] &&
							!(i >= 40 && i < 60) &&
							!(i >= coffCabStart && i < coffCabStart + 4) &&
							!(i >= coffFolders + 8 && i < coffFolders + 28) &&
							!(i >= coffCabStart + 44 + 112 && i < coffCabStart + 144 + 112) &&
							!(i >= 128 && i < 228))
							throw new Exception("File contents don't match expected.");

					// check checksum of contentmeta.xbx (should be 0)
					/*					int checksumRangeArrayOffset = (int)coffCabStart + 4;
										int checksumRangeSize = 4 + (int)BitConverter.ToUInt16(result.FileData,(int)coffCabStart + 4);
										byte [] forCheckSum = new byte[checksumRangeSize];
										Array.Copy(result.FileData,checksumRangeArrayOffset,forCheckSum,0,checksumRangeSize);
										UInt32 crc = BitConverter.ToUInt32(CRC32.Crc32(forCheckSum),0);
										if (crc != BitConverter.ToUInt32(result.FileData,(int)coffCabStart))
											return false;
					*/					if (BitConverter.ToUInt32(result.FileData,(int)coffCabStart) != 0)
											throw new Exception("Checksum not equal 0");

					// check hash for contentmeta.xbx
					System.Security.Cryptography.SHA1CryptoServiceProvider encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
					byte[] hashVal = null;
					int index = 0, cbData = 0, cbTotalCFDataSize = 0, dataArrayOffset = 0;
					for (index=(int)coffCabStart; index<coffCabStart+cCFData-1; index++)
					{
						index += 4;
						cbData = BitConverter.ToUInt16(result.FileData,index);
						cbTotalCFDataSize = cbData + 8;
						dataArrayOffset = index-4;
						encoder.TransformBlock(result.FileData, dataArrayOffset, cbTotalCFDataSize, result.FileData, dataArrayOffset);
						index += 2 + cbData;
					}
					index += 4;
					cbData = BitConverter.ToUInt16(result.FileData,index);
					cbTotalCFDataSize = cbData + 8;
					dataArrayOffset = index-4;
					encoder.TransformFinalBlock(result.FileData, dataArrayOffset, cbTotalCFDataSize);
					hashVal = encoder.Hash;
					for (int i=0; i<20; i++)
						if (result.FileData[coffFolders + 8 + i] != hashVal[i])
							throw new Exception("Hash of contentmeta.xbx doesn't match expected.");

					// check hash for folder info
					encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
					hashVal = encoder.ComputeHash(result.FileData,(int)coffFolders,cFolders*36);
					for (int i=0; i<20; i++)
						if (result.FileData[40 + i] != hashVal[i])
							throw new Exception("Hash of folder info doesn't match expected.");

					// check signature for HEADER
					byte [] signature = new byte[100];
					Array.Copy(result.FileData,128,signature,0,100);
					encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
					byte [] digest = encoder.ComputeHash(result.FileData,0,0x7C);

					ServerTestFramework.WebWidget.WCSignature sig = new WCSignature();
					ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest [] sigReq = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[1];
					sigReq[0] = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest();
					sigReq[0]._digest = digest;
					sigReq[0]._signature = signature;
					try
					{
						uint [] response = sig.VerifySignature(sigReq);
						if (response[0] != 0)
							throw new Exception("Header signature doesn't match expected.");
					}
					catch (Exception e)
					{
						ConsoleX.WriteLine(e.Message);
						return false;
					}

					// check signature for CONTENTMETA.XBX
					signature = new byte[100];
					Array.Copy(result.FileData,coffCabStart + 44 + 112,signature,0,100);
					encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
					digest = encoder.ComputeHash(result.FileData,(int)coffCabStart + 44,112);

					sigReq = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[1];
					sigReq[0] = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest();
					sigReq[0]._digest = digest;
					sigReq[0]._signature = signature;
					try
					{
						uint [] response = sig.VerifySignature(sigReq);
						if (response[0] != 0)
							throw new Exception("ContentMeta.xbx signature doesn't match expected.");
					}
					catch (Exception e)
					{
						ConsoleX.WriteLine(e.Message);
						return false;
					}
				}
				else
				{
					// blob
					for (int i=0; i<result.FileSize; i++)
						if (result.FileData[i] != expected.FileData[i])
							throw new Exception("Blob data doesn't match expected.");
				}
				// check creation date
				if (result.FileSize == 0)
				{
					bRet = (result.CreationDate.ToUniversalTime() == DateTime.FromFileTimeUtc(0));
					if (!bRet)
						ConsoleX.WriteLine("Creation date for file size = 0 not set to FileTime = 0.");
					return bRet;
				}

				SqlDataReader myDataReader = null;
				for (int i=0; i<Helpers.sqlUserConn.Length; i++)
				{
					try
					{
						SqlCommand cmd = new SqlCommand("select dt_created from t_files where vc_name = '/"+Hexer.tohex(result.TitleID)+"/"+filename+"' and i_title_id = "+result.TitleID,Helpers.sqlUserConn[i]);
						myDataReader = cmd.ExecuteReader();

						if (!myDataReader.Read())
							continue;

						if (myDataReader.GetDateTime(0) == result.CreationDate.ToUniversalTime())
							bRet = true;
						else
							ConsoleX.WriteLine("Creation date does not match date in Database");
					}
					catch
					{
						if (Helpers.sqlUserConn[i].State != ConnectionState.Open)
							Helpers.sqlUserConn[i].Open();
						ConsoleX.WriteLine("Unable to access DB for CreateDate comparison.");
					}
					finally
					{
						if (myDataReader != null && !myDataReader.IsClosed)
							myDataReader.Close();
					}
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine(e.Message);
				bRet = false;
			}

			if (!bRet)
				ConsoleX.WriteLine("Verification failed.");

			return bRet;
		}

		public static bool ReadUserFile_RunPositiveTest(byte[] webId, string gamerTag, string filename)
		{
			return ReadUserFile_RunPositiveTest(Helpers.titleReadTests, webId, gamerTag, filename, Helpers.dtModifiedUser[0].AddDays(-5), null);
		}

		public static bool ReadUserFile_RunPositiveTest(byte[] webId, string gamerTag, string filename, DateTime modifiedSince)
		{
			return ReadUserFile_RunPositiveTest(Helpers.titleReadTests, webId, gamerTag, filename,modifiedSince, null);
		}

		public static bool ReadUserFile_RunPositiveTest(byte[] webId, string gamerTag, string filename, string fileToTestWith)
		{
			return ReadUserFile_RunPositiveTest(Helpers.titleReadTests, webId, gamerTag, filename, Helpers.dtModifiedUser[0].AddDays(-5), fileToTestWith);
		}

		public static bool ReadUserFile_RunPositiveTest(uint titleId, byte[] webId, string gamerTag, string filename, DateTime ifModifiedSinceDate, string fileToTestWith)
		{
			bool bRet = true;
			WCStorage storage = new WCStorage(Global.XEnv.GetVirtualInterface (VirtualInterface.websg), CertificateStore.LookupCertificate(null, Helper.Certificate));

			// get data that will be read
			byte [] data = null;
			if (filename.StartsWith("widget") && filename.Length <= 7)
			{
				// read data from db
				SqlDataReader myDataReader = null;
				string sqlQuery = "select uid_blob from t_files where vc_name = '/"+Hexer.tohex(titleId)+"/"+filename+"' and i_title_id = "+titleId;

				for (int i=0; i<Helpers.sqlUserConn.Length; i++)
				{
					try
					{
						data = new byte[Convert.ToInt32(filename.Substring(6))];

						SqlCommand sqlComm = new SqlCommand(sqlQuery,Helpers.sqlUserConn[i]);
						myDataReader = sqlComm.ExecuteReader();

						if (!myDataReader.Read())
							continue;
						object uid_blob = myDataReader.GetValue(0);

						myDataReader.Close();
						sqlQuery = "select bin_blob from t_blobs where uid_blob = '"+uid_blob+"'";
						sqlComm = new SqlCommand(sqlQuery,Helpers.sqlUserConn[i]);
						myDataReader = sqlComm.ExecuteReader();

						if (!myDataReader.Read())
							throw new Exception("Data not found.");
						myDataReader.GetBytes(0,0,data,0,data.Length);
						break;
					}
					catch (Exception e)
					{
						ConsoleX.WriteLine("Error retrieving data from DB: "+e.Message);
						if (Helpers.sqlUserConn[i].State != ConnectionState.Open)
							Helpers.sqlUserConn[i].Open();
					}
					finally
					{
						if (myDataReader != null && !myDataReader.IsClosed)
							myDataReader.Close();
					}
				}
			}
			else if (fileToTestWith == "1B")
				data = Hexer.unhex("7F");
			else if (fileToTestWith != null)
			{
				try
				{
					System.IO.FileStream fStream = System.IO.File.OpenRead(@"testfiles\"+fileToTestWith);
					int fileLen = (int)fStream.Length;
					data = new byte[fileLen];
					int nBytesRead = fStream.Read(data,0,fileLen);
					fStream.Close();
					if (nBytesRead != fileLen)
						throw new Exception();
				}
				catch
				{
					ConsoleX.WriteLine("Failed to read file for upload.");
					return false;
				}
			}
				/*			else if (filename.ToLower().EndsWith("z"))
							{
								string bytes = "F801CBA42520680400D3";
								for (int i=0; i<5; i++)
									bytes += bytes;
								data = Hexer.unhex(bytes.Substring(0,228*2));
							}
				*/			else
				data = Hexer.unhex("C0558E31542FA6B9");

			// read file
			try
			{
				ReadFileInfo rInfo = storage.ReadUserFile(titleId,webId,gamerTag,filename,ifModifiedSinceDate);

				ReadFileInfo expInfo = new ReadFileInfo();
				expInfo.FileNotModified = true;
				expInfo.GamerTag = "??????";
				if ((!filename.ToLower().EndsWith("z") && Helpers.dtModifiedUser[0] > ifModifiedSinceDate) ||
					(filename.ToLower().EndsWith("z") && Helpers.dtModifiedUser[1] > ifModifiedSinceDate))
				{
					expInfo.GamerTag = gamerTag;
					expInfo.FileData = data;
					expInfo.FileNotModified = false;
					expInfo.FileSize = (uint)data.Length;
					expInfo.TitleID = titleId;
					expInfo.TitleVersion = 0;
					expInfo.UserCountryID = 0;
					if (filename.ToLower().EndsWith("z"))
						expInfo.FileContentType = FileContentTypeEnum.Package;
					else
						expInfo.FileContentType = FileContentTypeEnum.Blob;
				}

				if (!ReadUserFile_VerifyPositive(rInfo,expInfo,filename))
					bRet = false;
			}
			catch
			{
				bRet = false;
			}

			return bRet;
		}
		#endregion

		#region ReadUserFile Tests
		[TestCase, Description("ReadUserFile Valid: ReadOnly Title")]
		class ReadUserFile_ValidReadOnlyTitle : TestBase
		{
			protected override void Execute()
			{
				if (ReadUserFile_RunPositiveTest(Helpers.titleROnly,BitConverter.GetBytes((long)(562949953420287+20)),"webuser20","widget2",DateTime.UtcNow.AddDays(-5).ToLocalTime(),null))
					ResultCode = TEST_RESULTS.PASSED;
				else
					ResultCode = TEST_RESULTS.FAILED;
			}
		} // ReadUserFile_ValidReadOnlyTitle
		#endregion

		#region RevokeTitleFile Helpers
		public static byte [] RevokeTitleFile_GetHash(uint titleId, string filename)
		{
			byte [] bin_hash = null;

			// locate entry in SQL DB
			string sqlQuery = "select bin_client_hash from t_files where vc_name = '/"+filename+"' and i_title_id = "+titleId;
			SqlDataReader myDataReader = null;

			for (int iSql=0; iSql<Helpers.sqlTitleConn.Length; iSql++)
			{
				try
				{
					SqlCommand sqlComm = new SqlCommand(sqlQuery,Helpers.sqlTitleConn[iSql]);
					myDataReader = sqlComm.ExecuteReader();

					if (!myDataReader.Read())
						continue;
					bin_hash = new byte[20];
					myDataReader.GetBytes(0,0,bin_hash,0,20);
				}
				catch
				{
					if (Helpers.sqlTitleConn[iSql].State != ConnectionState.Open)
						Helpers.sqlTitleConn[iSql].Open();
				}
				finally
				{
					if (myDataReader != null && !myDataReader.IsClosed)
						myDataReader.Close();
				}
			}

			return bin_hash;
		}

		public static bool RevokeTitleFile_VerifyRevoked(uint titleId, string filename, byte [] bin_hash)
		{
			// make sure hash added to blacklisted digests on NPDB
			if (!Helpers.IsBlacklistedDigest(bin_hash,true))
				return false;

			// make sure file deleted
			return RevokeTitleFile_VerifyDeleted(titleId,filename);
		}

		public static bool RevokeTitleFile_VerifyDeleted(uint titleId, string filename)
		{
			bool bRet = true;

			try
			{
				if (Helpers.TotalMatchingFiles("select count(*) from t_files where i_title_id = "+titleId+" and vc_name = '"+filename+"'",Helpers.sqlTitleConn) != 0)
				{
					ConsoleX.WriteLine("File not deleted from the database after Revoke.");
					bRet = false;
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine(e.Message);
				bRet = false;
			}

			return bRet;
		}

		public static bool RevokeTitleFile_RunPositiveTest(string filename, FileContentTypeEnum contentType, byte [] data)
		{
			return RevokeTitleFile_RunPositiveTest(filename,contentType,data,DateTime.UtcNow.AddMonths(1).ToLocalTime());
		}

		public static bool RevokeTitleFile_RunPositiveTest(string filename, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate)
		{
			bool bRet = true;
			WCStorage storage = new WCStorage(Global.XEnv.GetVirtualInterface (VirtualInterface.websg), CertificateStore.LookupCertificate(null, Helper.Certificate));

			// write file
			try
			{
				storage.WriteTitleFile(Helpers.titleRW,filename,contentType,data,expirationDate);
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine("Error writing file: "+e.Message);
				return false;
			}

			byte [] bin_hash = RevokeTitleFile_GetHash(Helpers.titleRW,filename);	// gets hash of file

			// revoke file
			try
			{
				storage.RevokeTitleFile(Helpers.titleRW,filename);

				if (!RevokeTitleFile_VerifyRevoked(Helpers.titleRW,filename,bin_hash))
					bRet = false;
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine("Error revoking file: "+e.Message);
				bRet = false;
			}

			return bRet;
		}
		#endregion

		#region RevokeTitleFile Tests
		[TestCase, Description("RevokeTitleFile Valid: filename 1 char")]
		class RevokeTitleFile_ValidFilename1Char : TestBase
		{
			protected override void Execute()
			{
				string filename = "p";
				byte [] data = new byte[512];
				Helpers.rnd.NextBytes(data);

				if (RevokeTitleFile_RunPositiveTest(filename,FileContentTypeEnum.Blob,data))
					ResultCode = TEST_RESULTS.PASSED;
				else
					ResultCode = TEST_RESULTS.FAILED;

				System.IO.FileStream fs = System.IO.File.OpenRead(@"TestFiles\func400001.xcp");
				data = new byte[fs.Length];
				fs.Read(data,0,(int)fs.Length);
				fs.Close();
				if (!RevokeTitleFile_RunPositiveTest(filename,FileContentTypeEnum.Package,data))
					ResultCode = TEST_RESULTS.FAILED;
			}
		} // RevokeTitleFile_ValidFilename1Char
		#endregion

		#region RevokeUserFile Helpers
		public static byte [] RevokeUserFile_GetHash(uint titleId, string gamerTag, string filename)
		{
			byte [] bin_hash = null;

			// locate entry in SQL DB
			string sqlQuery = "select bin_client_hash from t_files where vc_name = '/"+Hexer.tohex(titleId)+"/"+filename+"' and i_title_id = "+titleId+" and bi_user_puid = "+Convert.ToString(0x0009FFFFFFFFFFFF-Convert.ToInt64(gamerTag.Substring(7)));
			SqlDataReader myDataReader = null;

			for (int iSql=0; iSql<Helpers.sqlUserConn.Length; iSql++)
			{
				try
				{
					SqlCommand sqlComm = new SqlCommand(sqlQuery,Helpers.sqlUserConn[iSql]);
					myDataReader = sqlComm.ExecuteReader();

					if (!myDataReader.Read())
						continue;
					bin_hash = new byte[20];
					myDataReader.GetBytes(0,0,bin_hash,0,20);
				}
				catch
				{
					if (Helpers.sqlUserConn[iSql].State != ConnectionState.Open)
						Helpers.sqlUserConn[iSql].Open();
				}
				finally
				{
					if (myDataReader != null && !myDataReader.IsClosed)
						myDataReader.Close();
				}
			}

			return bin_hash;
		}

		public static bool RevokeUserFile_VerifyRevoked(uint titleId, string gamerTag, string filename, byte [] bin_hash)
		{
			// make sure hash added to blacklisted digests on NPDB
			if (!Helpers.IsBlacklistedDigest(bin_hash,true))
				return false;

			// make sure file deleted
			return RevokeUserFile_VerifyDeleted(titleId,gamerTag,filename);
		}

		public static bool RevokeUserFile_VerifyDeleted(uint titleId, string gamerTag, string filename)
		{
			bool bRet = true;
			try
			{
				if (Helpers.TotalMatchingFiles("select count(*) from t_files where i_title_id = "+titleId+" and vc_name = '/"+filename+"' and bi_user_puid = "+Convert.ToString(0x0009FFFFFFFFFFFF-Convert.ToInt64(gamerTag.Substring(7))),Helpers.sqlUserConn) != 0)
				{
					ConsoleX.WriteLine("File not deleted from the database after Revoke.");
					bRet = false;
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine(e.Message);
				bRet = false;
			}

			return bRet;
		}

		public static bool RevokeUserFile_RunPositiveTest(string filename, FileContentTypeEnum contentType, byte [] data)
		{
			return RevokeUserFile_RunPositiveTest(filename,contentType,data,DateTime.UtcNow.AddMonths(1).ToLocalTime());
		}

		public static bool RevokeUserFile_RunPositiveTest(string filename, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate)
		{
			bool bRet = true;
			WCStorage storage = new WCStorage(Global.XEnv.GetVirtualInterface (VirtualInterface.websg), CertificateStore.LookupCertificate(null, Helper.Certificate));

			byte [] webId = BitConverter.GetBytes((long)(562949953420287+20));
			string gamerTag = "webuser20";

			// write file
			try
			{
				storage.WriteUserFile(Helpers.titleRW,webId,gamerTag,filename,contentType,data,expirationDate);
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine("Error writing file: "+e.Message);
				return false;
			}

			byte [] bin_hash = RevokeUserFile_GetHash(Helpers.titleRW,gamerTag,filename);

			// revoke file
			try
			{
				storage.RevokeUserFile(Helpers.titleRW,webId,gamerTag,filename);

				if (!RevokeUserFile_VerifyRevoked(Helpers.titleRW,gamerTag,filename,bin_hash))
					bRet = false;
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine("Error revoking file: "+e.Message);
				bRet = false;
			}

			return bRet;
		}
		#endregion

		#region RevokeUserFile Tests
		[TestCase, Description("RevokeUserFile Valid: filename 1 char")]
		class RevokeUserFile_ValidFilename1Char : TestBase
		{
			protected override void Execute()
			{
				string filename = "p";
				byte [] data = new byte[512];
				Helpers.rnd.NextBytes(data);

				if (RevokeUserFile_RunPositiveTest(filename,FileContentTypeEnum.Blob,data))
					ResultCode = TEST_RESULTS.PASSED;
				else
					ResultCode = TEST_RESULTS.FAILED;

				System.IO.FileStream fs = System.IO.File.OpenRead(@"TestFiles\func400001.xcp");
				data = new byte[fs.Length];
				fs.Read(data,0,(int)fs.Length);
				fs.Close();
				if (!RevokeUserFile_RunPositiveTest(filename,FileContentTypeEnum.Package,data))
					ResultCode = TEST_RESULTS.FAILED;
			}
		} // RevokeUserFile_ValidFilename1Char
		#endregion

		#region WriteDeleteTitleFile Helpers
		public static bool WriteDeleteTitleFile_VerifyPositive(uint titleId, string filename, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate, bool overwritten)
		{
			bool bRet = false;

			string xbox_puid = Helper.XUID;
/*			if (titleId == Helpers.titleROnly)
				xbox_puid = -174772929940867185;
			else
				xbox_puid = -157570299311790857;
*/
			// locate entry in SQL DB
			string sqlQuery = "select uid_blob from t_files where vc_name = '/"+filename+"' and i_content_type = "+(int)contentType+" and i_title_id = "+titleId+" and i_title_version = 0 and bi_user_puid = 0 and ti_user_country_id = 0 and bi_xbox_puid = "+xbox_puid+" and i_size = "+data.Length;
			if (!overwritten)
				sqlQuery += " and dt_created >= '"+DateTime.UtcNow.AddMinutes(-5).GetDateTimeFormats()[71]+"' and dt_created <= '"+DateTime.UtcNow.AddMinutes(5).GetDateTimeFormats()[71]+"'";
			if (expirationDate == DateTime.MinValue)
				sqlQuery += " and dt_expires = '"+DateTime.MinValue.ToUniversalTime().GetDateTimeFormats()[71]+"'";
			else
			{
				sqlQuery += " and dt_expires >= '"+expirationDate.ToUniversalTime().GetDateTimeFormats()[71]+"'";
				if (expirationDate.ToUniversalTime() < DateTime.MaxValue)
					sqlQuery += " and dt_expires <= '"+expirationDate.ToUniversalTime().AddSeconds(1).GetDateTimeFormats()[71]+"'";
			}
			SqlDataReader myDataReader = null;

			for (int iSql=0; iSql<Helpers.sqlTitleConn.Length; iSql++)
			{
				try
				{
					SqlCommand sqlComm = new SqlCommand(sqlQuery,Helpers.sqlTitleConn[iSql]);
					myDataReader = sqlComm.ExecuteReader();

					if (!myDataReader.Read())
						continue;

					object uid_blob = myDataReader.GetValue(0);

					myDataReader.Close();
					sqlQuery = "select bin_blob from t_blobs where uid_blob = '"+uid_blob+"'";
					sqlComm = new SqlCommand(sqlQuery,Helpers.sqlTitleConn[iSql]);
					myDataReader = sqlComm.ExecuteReader();

					if (!myDataReader.Read())
						throw new Exception("Data not found.");
					byte [] bin_blob = new byte[data.Length];
					myDataReader.GetBytes(0,0,bin_blob,0,bin_blob.Length);

					// check data
					if (bin_blob.Length != 0 && contentType == FileContentTypeEnum.Package)
					{
						// package

						// calculate start locations of hashes
						ushort cbCFHeader = BitConverter.ToUInt16(data,36);
						ushort cFolders = BitConverter.ToUInt16(data,26);
						long coffFolders = 40 + cbCFHeader;
						long coffCabStart = BitConverter.ToUInt32(data,(int)coffFolders);
						uint cCFData = BitConverter.ToUInt32(data,(int)coffFolders+4);

						// check file EXCEPT those locations
						for (int i=0; i<bin_blob.Length; i++)
							if (bin_blob[i] != data[i] &&
								!(i >= 40 && i < 60) &&
								!(i >= coffCabStart && i < coffCabStart + 4) &&
								!(i >= coffFolders + 8 && i < coffFolders + 28) &&
								!(i >= coffCabStart + 44 + 112 && i < coffCabStart + 144 + 112) &&
								!(i >= 128 && i < 228))
								throw new Exception("File contents don't match expected.");

						// check checksum of contentmeta.xbx (should be 0)
						if (BitConverter.ToUInt32(bin_blob,(int)coffCabStart) != 0)
							throw new Exception("Checksum not equal 0");

						// check hash for contentmeta.xbx
						System.Security.Cryptography.SHA1CryptoServiceProvider encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
						byte[] hashVal = null;
						int index = 0, cbData = 0, cbTotalCFDataSize = 0, dataArrayOffset = 0;
						for (index=(int)coffCabStart; index<coffCabStart+cCFData-1; index++)
						{
							index += 4;
							cbData = BitConverter.ToUInt16(bin_blob,index);
							cbTotalCFDataSize = cbData + 8;
							dataArrayOffset = index-4;
							encoder.TransformBlock(bin_blob, dataArrayOffset, cbTotalCFDataSize, bin_blob, dataArrayOffset);
							index += 2 + cbData;
						}
						index += 4;
						cbData = BitConverter.ToUInt16(bin_blob,index);
						cbTotalCFDataSize = cbData + 8;
						dataArrayOffset = index-4;
						encoder.TransformFinalBlock(bin_blob, dataArrayOffset, cbTotalCFDataSize);
						hashVal = encoder.Hash;
						for (int i=0; i<20; i++)
							if (bin_blob[coffFolders + 8 + i] != hashVal[i])
								throw new Exception("Hash of contentmeta.xbx doesn't match expected.");

						// check hash for folder info
						encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
						hashVal = encoder.ComputeHash(bin_blob,(int)coffFolders,cFolders*36);
						for (int i=0; i<20; i++)
							if (bin_blob[40 + i] != hashVal[i])
								throw new Exception("Hash of folder info doesn't match expected.");

						// check signature for HEADER
						byte [] signature = new byte[100];
						Array.Copy(bin_blob,128,signature,0,100);
						encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
						byte [] digest = encoder.ComputeHash(bin_blob,0,0x7C);

						ServerTestFramework.WebWidget.WCSignature sig = new WCSignature();
						ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest [] sigReq = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[1];
						sigReq[0] = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest();
						sigReq[0]._digest = digest;
						sigReq[0]._signature = signature;
						try
						{
							uint [] response = sig.VerifySignature(sigReq);
							if (response[0] != 0)
								throw new Exception("Header signature doesn't match expected.");
						}
						catch (Exception e)
						{
							ConsoleX.WriteLine(e.Message);
							return false;
						}

						// check signature for CONTENTMETA.XBX
						signature = new byte[100];
						Array.Copy(bin_blob,coffCabStart + 44 + 112,signature,0,100);
						encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
						digest = encoder.ComputeHash(bin_blob,(int)coffCabStart + 44,112);

						sigReq = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[1];
						sigReq[0] = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest();
						sigReq[0]._digest = digest;
						sigReq[0]._signature = signature;
						try
						{
							uint [] response = sig.VerifySignature(sigReq);
							if (response[0] != 0)
								throw new Exception("ContentMeta.xbx signature doesn't match expected.");
						}
						catch (Exception e)
						{
							ConsoleX.WriteLine(e.Message);
							return false;
						}
					}
					else
					{
						// blob
						for (int i=0; i<bin_blob.Length; i++)
							if (bin_blob[i] != data[i])
								throw new Exception("Blob data doesn't match expected.");
					}
					bRet = true;
				}
				catch (Exception e)
				{
                    Global.RO.Warn(e.ToString());
					if (Helpers.sqlTitleConn[iSql].State != ConnectionState.Open)
						Helpers.sqlTitleConn[iSql].Open();
				}
				finally
				{
					if (myDataReader != null && !myDataReader.IsClosed)
						myDataReader.Close();
				}
			}

			if (!bRet)
				ConsoleX.WriteLine("Write verification failed");

			return bRet;
		}

		public static bool WriteDeleteTitleFile_VerifyDeleted(uint titleId, string filename)
		{
			bool bRet = true;

			try
			{
				if (Helpers.TotalMatchingFiles("select count(*) from t_files where i_title_id = "+titleId+" and vc_name = '/"+filename+"'",Helpers.sqlTitleConn) != 0)
				{
					ConsoleX.WriteLine("File not deleted.");
					bRet = false;
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine(e.Message);
				bRet = false;
			}

			return bRet;
		}

		public static bool WriteDeleteTitleFile_RunPositiveTest(string filename, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate)
		{
			return WriteDeleteTitleFile_RunPositiveTest(Helpers.titleRW,filename,contentType,data,expirationDate,null,false);
		}

		public static bool WriteDeleteTitleFile_RunPositiveTest(uint titleId, string filename, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate)
		{
			return WriteDeleteTitleFile_RunPositiveTest(titleId,filename,contentType,data,expirationDate,null,false);
		}

		public static bool WriteDeleteTitleFile_RunPositiveTest(uint titleId, string filename, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate, RequestInfo reqInfo, bool overwritten)
		{
			bool bRet = true;
			WCStorage storage = null;
			if (reqInfo == null)
				//Global.XEnv.GetVirtualInterface (VirtualInterface.websg), CertificateStore.LookupCertificate(null, Helper.Certificate)
				storage = new WCStorage(Global.XEnv.GetVirtualInterface (VirtualInterface.websg), CertificateStore.LookupCertificate(null, Helper.Certificate));

			else
				storage = new WCStorage(Global.XEnv.GetVirtualInterface(VirtualInterface.wcstorage),reqInfo);

			// write file
			try
			{
				storage.WriteTitleFile(titleId,        filename,contentType,data,expirationDate);
//				storage.WriteTitleFile(Helpers.titleRW,filename,contentType,data,expirationDate);

				if (!WriteDeleteTitleFile_VerifyPositive(titleId,filename,contentType,data,expirationDate,overwritten))
					bRet = false;
			}
			catch (Exception e)
			{
				bRet = false;
				ConsoleX.ClearLine();
				ConsoleX.WriteLine("Error writing file: "+e.Message);
				return bRet;
			}

			if (overwritten)
				return bRet;

			// delete file
			try
			{
				storage.DeleteTitleFile(titleId,filename);

				if (!WriteDeleteTitleFile_VerifyDeleted(titleId,filename))
					bRet = false;
			}
			catch (Exception e)
			{
				bRet = false;
				ConsoleX.WriteLine("Error deleting file: "+e.Message);
			}

			return bRet;
		}
		#endregion

		#region WriteDeleteTitleFile Tests
		[TestCase, Description("WriteDeleteTitleFile Valid: filename 1 char")]
		class WriteDeleteTitleFile_ValidFilename1Char : TestBase
		{
			protected override void Execute()
			{
				string filename = "p";
				byte [] data = Hexer.unhex("F731");
				DateTime expirationDate = DateTime.UtcNow.AddMinutes(5).ToLocalTime();

				if (WriteDeleteTitleFile_RunPositiveTest(filename,FileContentTypeEnum.Blob,data,expirationDate))
					ResultCode = TEST_RESULTS.PASSED;
				else
					ResultCode = TEST_RESULTS.FAILED;

				System.IO.FileStream fs = System.IO.File.OpenRead(@"TestFiles\func400001.xcp");
				data = new byte[fs.Length];
				fs.Read(data,0,(int)fs.Length);
				fs.Close();
				if (!WriteDeleteTitleFile_RunPositiveTest(filename,FileContentTypeEnum.Package,data,expirationDate))
					ResultCode = TEST_RESULTS.FAILED;
			}
		} // WriteDeleteTitleFile_ValidFilename1Char
		[TestCase, Description("WriteDeleteTitleFile Valid: data 34KB")]
			public class WriteDeleteTitleFile_Valid34KBData : TestBase
		{
			protected override void Execute()
			{
				string filename = "widget34KB";
				byte [] data = RandomEx.GlobalRandGen.GenerateRandomBlob(34 * 1024);
				DateTime expirationDate = DateTime.UtcNow.AddMinutes(5).ToLocalTime();

				if (WriteDeleteTitleFile_RunPositiveTest(filename,FileContentTypeEnum.Blob,data,expirationDate))
					ResultCode = TEST_RESULTS.PASSED;
				else
					ResultCode = TEST_RESULTS.FAILED;
			}
		}
		[TestCase, Description("WriteDeleteTitleFile Valid: data 35KB")]
			public class WriteDeleteTitleFile_Valid35KBData : TestBase
		{
			protected override void Execute()
			{
                string filename = "widget35KB";
                byte[] data = RandomEx.GlobalRandGen.GenerateRandomBlob(35 * 1024);
				DateTime expirationDate = DateTime.UtcNow.AddMinutes(5).ToLocalTime();

				if (WriteDeleteTitleFile_RunPositiveTest(filename,FileContentTypeEnum.Blob,data,expirationDate))
					ResultCode = TEST_RESULTS.PASSED;
				else
					ResultCode = TEST_RESULTS.FAILED;
			}
		}

		[TestCase, Description("WriteDeleteTitleFile Valid: data 36KB")]
			public class WriteDeleteTitleFile_Valid36KBData : TestBase
		{
			protected override void Execute()
			{
                string filename = "widget36KB";
                byte[] data = RandomEx.GlobalRandGen.GenerateRandomBlob(36 * 1024);
				DateTime expirationDate = DateTime.UtcNow.AddMinutes(5).ToLocalTime();

				if (WriteDeleteTitleFile_RunPositiveTest(filename,FileContentTypeEnum.Blob,data,expirationDate))
					ResultCode = TEST_RESULTS.PASSED;
				else
					ResultCode = TEST_RESULTS.FAILED;
			}
		}

		[TestCase, Description("WriteDeleteTitleFile Valid: data 1MB")]
			public class WriteDeleteTitleFile_Valid1MBData : TestBase
		{
			protected override void Execute()
			{
                string filename = "widget1MB";
                byte[] data = RandomEx.GlobalRandGen.GenerateRandomBlob(1024 * 1024);
				DateTime expirationDate = DateTime.UtcNow.AddMinutes(5).ToLocalTime();

				if (WriteDeleteTitleFile_RunPositiveTest(filename,FileContentTypeEnum.Blob,data,expirationDate))
					ResultCode = TEST_RESULTS.PASSED;
				else
					ResultCode = TEST_RESULTS.FAILED;
			}
		}
		[TestCase, Description("WriteDeleteTitleFile Valid: data 5MB"), Ignore]
		public class WriteDeleteTitleFile_Valid5MBData : TestBase
		{
			protected override void Execute()
			{
                string filename = "widget5MB";
                byte[] data = RandomEx.GlobalRandGen.GenerateRandomBlob(5 * 1024 * 1024);
				DateTime expirationDate = DateTime.UtcNow.AddMinutes(5).ToLocalTime();

				if (WriteDeleteTitleFile_RunPositiveTest(filename,FileContentTypeEnum.Blob,data,expirationDate))
					ResultCode = TEST_RESULTS.PASSED;
				else
					ResultCode = TEST_RESULTS.FAILED;
			}
        }

        [TestCase, Description("WriteDeleteTitleFile: Performs a Binary Search to find the max value")]
        public class WriteDeleteTitleFile_MaxSizeBinarySearch : TestBase
        {
            protected override void Execute ()
            {
                string filename = "widgetBinSrch";
                DateTime expirationDate = DateTime.UtcNow.AddMinutes(5).ToLocalTime();
                int max = 64 * 1024;
                int low = 0;
                int current = max;

                while (true)
                {
                    byte[] data = new byte[current];
                    bool good = true;

                    try
                    {
                        WriteDeleteTitleFile_Private(Helpers.titleRW, filename, FileContentTypeEnum.Blob, data, expirationDate);
                    }
                    catch (System.Net.WebException e)
                    {
                        good = ((System.Net.HttpWebResponse)e.Response).StatusCode != System.Net.HttpStatusCode.RequestEntityTooLarge;
                    }
                    catch (Exception)
                    {
                        // do nothing here
                    }

                    Global.RO.Info("Tried {0} bytes, which was: {1}", current, good ? "GOOD" : "BAD");

                    if (good)
                    {
                        if (current == max)
                        {
                            Global.RO.Success("Done! Size is {0} bytes", current);
                            break;
                        }

                        if (max - low == 1)
                        {
                            Global.RO.Success("Done! Size is {0} bytes", low);
                            break;
                        }

                        low = current;
                        current = (max - low + 1) / 2 + low;
                    }
                    else
                    {
                        max = current;
                        current = (max - low) / 2 + low;
                    }
                }

                ResultCode = TEST_RESULTS.PASSED;
            }

            private void WriteDeleteTitleFile_Private (uint titleId, string filename, FileContentTypeEnum contentType, byte[] data, DateTime expirationDate)
            {
                WCStorage storage = null;
                storage = new WCStorage(Global.XEnv.GetVirtualInterface(VirtualInterface.websg), 
                    CertificateStore.LookupCertificate(null, Helper.Certificate));

                // write file
                storage.WriteTitleFile(titleId, filename, contentType, data, expirationDate);

                WriteDeleteTitleFile_VerifyPositive(titleId, filename, contentType, data, expirationDate, false);

                // delete file
                try
                {
                    storage.DeleteTitleFile(titleId, filename);
                    WriteDeleteTitleFile_VerifyDeleted(titleId, filename);
                }
                catch (Exception e)
                {
                    ConsoleX.WriteLine("Error deleting file: " + e.Message);
                }
            }
        }

		#endregion

		#region WriteDeleteUserFile Helpers
		public static bool WriteDeleteUserFile_VerifyPositive(uint titleId, string gamerTag, string filename, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate, bool overwritten)
		{
			bool bRet = false;

			string xbox_puid = Helper.XUID;
/*			if (titleId == Helpers.titleROnly)
				xbox_puid = -174772929940867185;
			else
				xbox_puid = -157570299311790857;
*/

			// locate entry in SQL DB
			string sqlQuery = "select uid_blob from t_files where vc_name = '/"+Hexer.tohex(titleId)+"/"+filename+"' and i_content_type = "+((int)contentType).ToString()+" and i_title_id = "+titleId+" and i_title_version = 0 and bi_user_puid = "+Convert.ToString(0x0009FFFFFFFFFFFF-Convert.ToInt64(gamerTag.Substring(7)))+" and ti_user_country_id = 0 and bi_xbox_puid = "+xbox_puid+" and i_size = "+data.Length;
			if (!overwritten)
				sqlQuery += " and dt_created >= '"+DateTime.UtcNow.AddMinutes(-5).GetDateTimeFormats()[71]+"' and dt_created <= '"+DateTime.UtcNow.AddMinutes(5).GetDateTimeFormats()[71]+"'";
			if (expirationDate == DateTime.MinValue)
				sqlQuery += " and dt_expires = '"+DateTime.MinValue.ToUniversalTime().GetDateTimeFormats()[71]+"'";
			else
			{
				sqlQuery += " and dt_expires >= '"+expirationDate.ToUniversalTime().GetDateTimeFormats()[71]+"'";
				if (expirationDate.ToUniversalTime() < DateTime.MaxValue)
					sqlQuery += " and dt_expires <= '"+expirationDate.ToUniversalTime().AddSeconds(1).GetDateTimeFormats()[71]+"'";
			}
			SqlDataReader myDataReader = null;

			for (int iSql=0; iSql<Helpers.sqlUserConn.Length; iSql++)
			{
				try
				{
					SqlCommand sqlComm = new SqlCommand(sqlQuery,Helpers.sqlUserConn[iSql]);
					myDataReader = sqlComm.ExecuteReader();

					if (!myDataReader.Read())
						continue;

					object uid_blob = myDataReader.GetValue(0);

					myDataReader.Close();
					sqlQuery = "select bin_blob from t_blobs where uid_blob = '"+uid_blob+"'";
					sqlComm = new SqlCommand(sqlQuery,Helpers.sqlUserConn[iSql]);
					myDataReader = sqlComm.ExecuteReader();

					if (!myDataReader.Read())
						throw new Exception("Data not found.");
					byte [] bin_blob = new byte[data.Length];
					myDataReader.GetBytes(0,0,bin_blob,0,bin_blob.Length);

					// check data
					if (bin_blob.Length != 0 && contentType == FileContentTypeEnum.Package)
					{
						// package

						// calculate start locations of hashes
						ushort cbCFHeader = BitConverter.ToUInt16(data,36);
						ushort cFolders = BitConverter.ToUInt16(data,26);
						long coffFolders = 40 + cbCFHeader;
						long coffCabStart = BitConverter.ToUInt32(data,(int)coffFolders);
						uint cCFData = BitConverter.ToUInt32(data,(int)coffFolders+4);

						// check file EXCEPT those locations
						for (int i=0; i<bin_blob.Length; i++)
							if (bin_blob[i] != data[i] &&
								!(i >= 40 && i < 60) &&
								!(i >= coffCabStart && i < coffCabStart + 4) &&
								!(i >= coffFolders + 8 && i < coffFolders + 28) &&
								!(i >= coffCabStart + 44 + 112 && i < coffCabStart + 144 + 112) &&
								!(i >= 128 && i < 228))
								throw new Exception("File contents don't match expected.");

						// check checksum of contentmeta.xbx (should be 0)
						if (BitConverter.ToUInt32(bin_blob,(int)coffCabStart) != 0)
							throw new Exception("Checksum not equal 0");

						// check hash for contentmeta.xbx
						System.Security.Cryptography.SHA1CryptoServiceProvider encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
						byte[] hashVal = null;
						int index = 0, cbData = 0, cbTotalCFDataSize = 0, dataArrayOffset = 0;
						for (index=(int)coffCabStart; index<coffCabStart+cCFData-1; index++)
						{
							index += 4;
							cbData = BitConverter.ToUInt16(bin_blob,index);
							cbTotalCFDataSize = cbData + 8;
							dataArrayOffset = index-4;
							encoder.TransformBlock(bin_blob, dataArrayOffset, cbTotalCFDataSize, bin_blob, dataArrayOffset);
							index += 2 + cbData;
						}
						index += 4;
						cbData = BitConverter.ToUInt16(bin_blob,index);
						cbTotalCFDataSize = cbData + 8;
						dataArrayOffset = index-4;
						encoder.TransformFinalBlock(bin_blob, dataArrayOffset, cbTotalCFDataSize);
						hashVal = encoder.Hash;
						for (int i=0; i<20; i++)
							if (bin_blob[coffFolders + 8 + i] != hashVal[i])
								throw new Exception("Hash of contentmeta.xbx doesn't match expected.");

						// check hash for folder info
						encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
						hashVal = encoder.ComputeHash(bin_blob,(int)coffFolders,cFolders*36);
						for (int i=0; i<20; i++)
							if (bin_blob[40 + i] != hashVal[i])
								throw new Exception("Hash of folder info doesn't match expected.");

						// check signature for HEADER
						byte [] signature = new byte[100];
						Array.Copy(bin_blob,128,signature,0,100);
						encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
						byte [] digest = encoder.ComputeHash(bin_blob,0,0x7C);

						ServerTestFramework.WebWidget.WCSignature sig = new WCSignature();
						ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest [] sigReq = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[1];
						sigReq[0] = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest();
						sigReq[0]._digest = digest;
						sigReq[0]._signature = signature;
						try
						{
							uint [] response = sig.VerifySignature(sigReq);
							if (response[0] != 0)
								throw new Exception("Header signature doesn't match expected.");
						}
						catch (Exception e)
						{
							ConsoleX.WriteLine(e.Message);
							return false;
						}

						// check signature for CONTENTMETA.XBX
						signature = new byte[100];
						Array.Copy(bin_blob,coffCabStart + 44 + 112,signature,0,100);
						encoder = new System.Security.Cryptography.SHA1CryptoServiceProvider();
						digest = encoder.ComputeHash(bin_blob,(int)coffCabStart + 44,112);

						sigReq = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[1];
						sigReq[0] = new ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest();
						sigReq[0]._digest = digest;
						sigReq[0]._signature = signature;
						try
						{
							uint [] response = sig.VerifySignature(sigReq);
							if (response[0] != 0)
								throw new Exception("ContentMeta.xbx signature doesn't match expected.");
						}
						catch (Exception e)
						{
							ConsoleX.WriteLine(e.Message);
							return false;
						}
					}
					else
					{
						// blob
						for (int i=0; i<bin_blob.Length; i++)
							if (bin_blob[i] != data[i])
								throw new Exception("Blob data doesn't match expected.");
					}
					bRet = true;
				}
				catch
				{
					if (Helpers.sqlUserConn[iSql].State != ConnectionState.Open)
						Helpers.sqlUserConn[iSql].Open();
				}
				finally
				{
					if (myDataReader != null && !myDataReader.IsClosed)
						myDataReader.Close();
				}
			}

			if (!bRet)
				ConsoleX.WriteLine("Write verification failed");

			return bRet;
		}

		public static bool WriteDeleteUserFile_VerifyDeleted(uint titleId, string gamerTag, string filename)
		{
			bool bRet = true;

			try
			{
				if (Helpers.TotalMatchingFiles("select count(*) from t_files where i_title_id = "+titleId+" and vc_name = '/"+Hexer.tohex(titleId)+"/"+filename+"' and bi_user_puid = "+Convert.ToString(0x0009FFFFFFFFFFFF-Convert.ToInt64(gamerTag.Substring(7))),Helpers.sqlUserConn) != 0)
				{
					ConsoleX.WriteLine("File not deleted.");
					bRet = false;
				}
			}
			catch (Exception e)
			{
				ConsoleX.WriteLine(e.Message);
				bRet = false;
			}

			return bRet;
		}

		public static bool WriteDeleteUserFile_RunPositiveTest(string filename, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate)
		{
			return WriteDeleteUserFile_RunPositiveTest(Helpers.titleRW,filename,contentType,data,expirationDate,null,false);
		}

		public static bool WriteDeleteUserFile_RunPositiveTest(uint titleId, string filename, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate)
		{
			return WriteDeleteUserFile_RunPositiveTest(titleId,filename,contentType,data,expirationDate,null,false);
		}

		public static bool WriteDeleteUserFile_RunPositiveTest(uint titleId, string filename, FileContentTypeEnum contentType, byte [] data, DateTime expirationDate, RequestInfo reqInfo, bool overwritten)
		{
			bool bRet = true;
			WCStorage storage = null;
			if (reqInfo == null)
				storage = new WCStorage(Global.XEnv.GetVirtualInterface (VirtualInterface.websg), CertificateStore.LookupCertificate(null, Helper.Certificate));

			else
				storage = new WCStorage(Global.XEnv.GetVirtualInterface(VirtualInterface.wcstorage),reqInfo);

			byte [] webId = BitConverter.GetBytes((long)(562949953420287+20));
			string gamerTag = "webuser20";

			// write file
			try
			{
				storage.WriteUserFile(titleId,webId,gamerTag,filename,contentType,data,expirationDate);

				if (!WriteDeleteUserFile_VerifyPositive(titleId,gamerTag,filename,contentType,data,expirationDate,overwritten))
					bRet = false;
			}
			catch (Exception e)
			{
				bRet = false;
				ConsoleX.ClearLine();
				ConsoleX.WriteLine("Error writing file: "+e.Message);
				return bRet;
			}

			if (overwritten)
				return bRet;

			// delete file
			try
			{
				storage.DeleteUserFile(titleId,webId,gamerTag,filename);

				if (!WriteDeleteUserFile_VerifyDeleted(titleId,gamerTag,filename))
					bRet = false;
			}
			catch (Exception e)
			{
				bRet = false;
				ConsoleX.WriteLine("Error deleting file: "+e.Message);
			}

			return bRet;
		}
		#endregion

		#region WriteDeleteUserFile Tests
		[TestCase, Description("WriteDeleteUserFile Valid: filename 1 char")]
		class WriteDeleteUserFile_ValidFilename1Char : TestBase
		{
			protected override void Execute()
			{
				string filename = "p";
				byte [] data = Hexer.unhex("F731");
				DateTime expirationDate = DateTime.UtcNow.AddMinutes(5).ToLocalTime();

				if (WriteDeleteUserFile_RunPositiveTest(filename,FileContentTypeEnum.Blob,data,expirationDate))
					ResultCode = TEST_RESULTS.PASSED;
				else
					ResultCode = TEST_RESULTS.FAILED;

				System.IO.FileStream fs = System.IO.File.OpenRead(@"TestFiles\func400001.xcp");
				data = new byte[fs.Length];
				fs.Read(data,0,(int)fs.Length);
				fs.Close();
				if (!WriteDeleteUserFile_RunPositiveTest(filename,FileContentTypeEnum.Package,data,expirationDate))
					ResultCode = TEST_RESULTS.FAILED;
			}
		} // WriteDeleteUserFile_ValidFilename1Char
		#endregion
	} // StorageWidgetTests
} // namespace WebSGBVTs
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WebSGTest\CDatafile.cs ===
using System;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;
using System.Net;
using System.Diagnostics;

namespace WebSGTest {

    public struct TESTCASE {

        public string szTestName;
        public uint   Request_uiPacketSize;
        public int    Request_iTimeOutMilliseconds;
        public int    Request_iClientTimeOutMilliseconds;
        public string Request_szAPItoCall;
        public string Request_szURL;
        public string Request_szCertificate;
        public uint   Request_uiStartPacketSizeRange;
        public uint   Request_uiEndPacketSizeRange;
        public uint   Request_uiSkipSizeRange;

        public string Request_SubjectName;
        public string Request_SOAPAction;
        public string Request_ClientIPPort;
        public string Request_RequestId;

        public uint   Response_uiPayloadSize;
        // Program Control codes
        public uint    uiNumberOfTests;
        public bool   bStress;
        public string HTTP_Method;
        public string szWhichRequestType;
        // Stress Weighting system
        public int    iWeightingPercentage;
    }

    public class CDatafile {


        const string TESTCASE_CASE_BEGIN         = "[CASE %d BEGIN]\n";
        const string TESTCASE_CASE_END           = "[CASE %d END]\n";
        uint uiGiveMeNumberOfCases = 0;
        string g_szDriverFilename;

        public uint GiveMeNumberOfCases(){
            return uiGiveMeNumberOfCases;
        }
        
 
        public TESTCASE []LoadTestCasesToRun( string szDriverFilename ){

            //bool b = false;
            bool bLoopBreak = false;
            string szLineParserBuffer;
            Regex r = new Regex(" +"); 
            string[] szStrings;
            StreamReader srReadConfig = null ;
            g_szDriverFilename = szDriverFilename;
            TESTCASE [] ptc = null;
           
            try {
                srReadConfig = new StreamReader( g_szDriverFilename , false );
                // Get number of test in the test.
                bLoopBreak = false;
               
                while (( szLineParserBuffer = srReadConfig.ReadLine()) != null){
                    //Console.WriteLine("{0}", szLineParserBuffer);
                    if (true == bLoopBreak)
                        break;
                    if ( -1 != szLineParserBuffer.IndexOf("[TESTS_TO_RUN_START]" )){
                        while (( szLineParserBuffer = srReadConfig.ReadLine()) != null){
                            if ( -1 != szLineParserBuffer.IndexOf("[TESTS_TO_RUN_END]")){
                                // if end is found stop.
                                bLoopBreak = true;
                                break;
                            }else
                                //ignore blank lines count only full lines.       
                                if ( "" == szLineParserBuffer.ToString()){
                                continue;
                            }else{
                                //szStrings = r.Split(szLineParserBuffer);
                                //szTestNames[uiGiveMeNumberOfCases] = szString[0];
                                uiGiveMeNumberOfCases += 1;
                               // Console.WriteLine("Count {0}", uiGiveMeNumberOfCases);
                            }
                        }                    
                    }                    
                }
                srReadConfig.Close();
                if (uiGiveMeNumberOfCases == 0)
                    goto c0;
                //
                // Create number of test cases to run.
                //
                ptc = new TESTCASE[uiGiveMeNumberOfCases];
                
                // Now load the names of the test into the array.
                uint uiCaseNumber = 0;
                string [] szTestNamesArray= new string[uiGiveMeNumberOfCases];
                int [] iTestNameWeightingPercentage= new int[uiGiveMeNumberOfCases];
                
                bLoopBreak = false;
                srReadConfig = new StreamReader(g_szDriverFilename, false );
                while (( szLineParserBuffer = srReadConfig.ReadLine()) != null){
                    if (true == bLoopBreak)
                        break;
                    if ( -1 != szLineParserBuffer.IndexOf("[TESTS_TO_RUN_START]" )){
                        while (( szLineParserBuffer = srReadConfig.ReadLine()) != null){
                            if ( -1 != szLineParserBuffer.IndexOf("[TESTS_TO_RUN_END]")){
                                // if end is found stop.
                                bLoopBreak = true;
                                break;
                            }else
                                //ignore blank lines count only full lines.       
                                if ( "" == szLineParserBuffer.ToString()){
                                continue;
                            }else{
                                szStrings = r.Split(szLineParserBuffer);
                                szTestNamesArray[uiCaseNumber] = szStrings[0];
                                if (1 != szStrings.Length){
                                    iTestNameWeightingPercentage[ uiCaseNumber] =  Convert.ToInt32(szStrings[1],10);
                                }
                                //Console.WriteLine("Count {0} {1}", uiCaseNumber, szTestNamesArray[uiCaseNumber] );
                                //Console.WriteLine("Count {0} {1}", uiCaseNumber, iTestNameWeightingPercentage[uiCaseNumber]  );
                                uiCaseNumber += 1;
                            }
                        }
                    }                    
                }
                // Load and run Cases.
                for (uint i = 0; i < uiGiveMeNumberOfCases; i++){
                    ptc[i] = LoadSingleCaseTestData( szTestNamesArray[i], iTestNameWeightingPercentage[i] );
                    ptc[i].uiNumberOfTests = uiGiveMeNumberOfCases;
                }
            }catch (Exception e) { 
                Console.Write("CDataFile.LoadTestCasesToRun{0}\n",e.Message.ToString());
                ptc = null;
            }
            c0:
                //if (b == false){
                //    Console.WriteLine("Could not find Entry in Driver file\n");
               // }
            srReadConfig.Close();
            return ptc;
        }


        public TESTCASE LoadSingleCaseTestData( string szTestName, int iWeightingPercentage ) {
            /*++
             Copyright (c) 2001-2002, Microsoft.

                Author:  Wally W. Ho (wallyho)
                Date:    12/21/2001

                Routine Description:
                    This will read a test cast enclosed by 
                    [CASE %d BEGIN] and [CASE %d END] 
                    Add to the structure a formed POST request and formatted POST body input
                Arguments:
                    A structure to store the data retrieved.
                Return Value:
                  BOOL indicating success or failure (TRUE/ FALSE)
            --*/
            bool b = false;
            string szLineParserBuffer;
            Regex r = new Regex(" +"); 
            string[] szStrings;
            StreamReader srReadConfig = null ;
            TESTCASE ptc = new TESTCASE();
            
            try {
                //Walk down the Sample File to the Case Specified.
                srReadConfig = new StreamReader(g_szDriverFilename, false );
                // Create the [CASE %d BEGIN] search criteria
                string szCaseSearchBegin = TESTCASE_CASE_BEGIN;

                // Walk down to the Test Name we are looking for.

                while (( szLineParserBuffer = srReadConfig.ReadLine()) != null){
                    //Console.WriteLine("->>{0}", szLineParserBuffer);
                    if ( -1 != szLineParserBuffer.IndexOf("TEST_NAME" )){
                        // Now check if this is the right test.
                        // Direct comparison.
                        szStrings = r.Split(szLineParserBuffer);
                        //foreach (string szString in szStrings)
                        //    Console.WriteLine("Yes {0}",szString);
                        szCaseSearchBegin = szStrings[1];
                        if ( true == szCaseSearchBegin.Equals( szTestName) ) {
                            // Found the case.. lets read from it till the end.
                            ptc.szTestName = szTestName;
                            ptc.iWeightingPercentage = iWeightingPercentage;
                            break;
                        } 
                        //loop around till end 
                    }
                }
                if (szLineParserBuffer == null){
                    goto c0;
                }

                // Read out the data.
                while (( szLineParserBuffer = srReadConfig.ReadLine()) != null){
                    if ( -1 != szLineParserBuffer.IndexOf(" END]")){
                        // if end is found stop.
                        break;
                    }
                    if ( -1 != szLineParserBuffer.IndexOf( "WEBSG_REQUEST" )){
                        szStrings = r.Split(szLineParserBuffer);
                        if ( true == szStrings[1].Equals("uiPacketSize") ) {
                            ptc.Request_uiPacketSize = Convert.ToUInt32(szStrings[2],10);
                        } else
                            if ( true == szStrings[1].Equals("iTimeOutMilliseconds") ) {
                            ptc.Request_iTimeOutMilliseconds = Convert.ToInt32(szStrings[2],10);
                        } else
                            if ( true == szStrings[1].Equals("iClientTimeOutMilliseconds") ) {
                            ptc.Request_iClientTimeOutMilliseconds = Convert.ToInt32(szStrings[2],10);
                        } else
                            if ( true == szStrings[1].Equals("szAPItoCall") ) {
                            ptc.Request_szAPItoCall = szStrings[2];
                        } else
                            if ( true == szStrings[1].Equals("szURL") ) {
                            ptc.Request_szURL = szStrings[2];
                        } else
                            if ( true == szStrings[1].Equals("uiStartPacketSizeRange") ) {
                            ptc.Request_uiStartPacketSizeRange = Convert.ToUInt32(szStrings[2],10);
                        } else
                            if ( true == szStrings[1].Equals("uiSkipSizeRange") ) {
                            ptc.Request_uiSkipSizeRange = Convert.ToUInt32(szStrings[2],10);
                        } else
                            if ( true == szStrings[1].Equals("uiEndPacketSizeRange") ) {
                            ptc.Request_uiEndPacketSizeRange = Convert.ToUInt32(szStrings[2],10);
                        } else
                            if ( true == szStrings[1].Equals("szCertificate") ) {
                            ptc.Request_szCertificate = szStrings[2];
                        }else {
                            //Console.WriteLine("->{0}\n",szLineParserBuffer.ToString() );
                        }
                    }else
                        if ( -1 != szLineParserBuffer.IndexOf( "WEBSG_RESPONSE" )){
                        szStrings = r.Split(szLineParserBuffer);
                        if ( true == szStrings[1].Equals("uiReturnedPayloadSize") ) {
                            ptc.Response_uiPayloadSize = Convert.ToUInt32(szStrings[2],10);
                        } else {
                            //Console.WriteLine("->{0}\n",szLineParserBuffer.ToString() );
                        }
                    }else
                        if ( -1 != szLineParserBuffer.IndexOf( "WEBSGENGINE_CONTROL" )){
                        szStrings = r.Split(szLineParserBuffer);
                        if ( true == szStrings[1].Equals("szWhichRequestType") ) {
                            ptc.szWhichRequestType = szStrings[2];
                        } else {
                            //Console.WriteLine("->{0}\n",szLineParserBuffer.ToString() );
                        }
                    }
                }
                b = true;
            }
            catch (Exception e) { 
                Console.Write("Exception:{0}\n",e.Message.ToString());
                //b = false;
                //ptc = 0;
                //goto c0;
            }
            // Catch if its find nothing
            if (b == false){
                Console.WriteLine("Could not find Entry in Driver file\n");
                srReadConfig.Close();
            }
            c0:
            srReadConfig.Close();
            return ptc;
        }
    }
}



/*
        public void ParseAutoupdate( string szLineParserBuffer, ref StreamReader srReadConfig, ref CTestCase ptc ){
            Regex r = new Regex(" +"); 
            string[] szStrings;
   
            if ( -1 != szLineParserBuffer.IndexOf( TESTCASE_HTTP_REQUEST  )){
                szStrings = r.Split(szLineParserBuffer);
                if ( true == szStrings[1].Equals("qwMachineId") ) {
                    string szSQLuser;
                    if (0x2 == CheckUserDefault( szLineParserBuffer, out szSQLuser )) {
                        StringBuilder sqlCommand = new StringBuilder();
                        sqlCommand. Append("SELECT bi_machine_puid ");
                        sqlCommand.Append("FROM t_users ");
                        sqlCommand.Append("WHERE (vc_nickname LIKE \'");
                        sqlCommand.Append( szSQLuser );
                        sqlCommand.Append("\') ");
                        CSQLOdbc odbc = new CSQLOdbc();
                        odbc.SQLQueryUsableMachinePUID( sqlCommand.ToString(), out ptc.r.ufr.qwMachineId);
                        //Console.WriteLine("Default MACHINE PUID is {0} {1}\n", ptc.r.ufr.qwMachineId, szSQLuser);
                    } else {
                        //Console.WriteLine("->{0}\n",szLineParserBuffer.ToString() );
                        // Convert Hex to Integer.
                        try{
                            if (-1 == szStrings[2].IndexOf("0x")){
                                ptc.r.ufr.qwMachineId = Convert.ToUInt64(szStrings[2],10);
                            }else{
                                ptc.r.ufr.qwMachineId = Convert.ToUInt64(szStrings[2],16);
                            }
                        }catch {
                            Console.WriteLine("ToInt64 (AtoHex) failed in qwMachineId!\n");
                        }
                    }
                }
                if ( true == szStrings[1].Equals("dwBaseVersion") ) {
                    try{
                        if (-1 == szStrings[2].IndexOf("0x")){
                            ptc.r.ufr.dwBaseVersion = Convert.ToUInt32(szStrings[2],10);
                        }else{
                            ptc.r.ufr.dwBaseVersion = Convert.ToUInt32(szStrings[2],16);
                        }
                    }catch {
                        Console.WriteLine("ToUInt32 (AtoHex) failed in dwBaseVersion!\n");
                    }
                }
                if ( true == szStrings[1].Equals("dwTitleId") ) {
 
                    try{
                        if (-1 == szStrings[2].IndexOf("0x")){
                            ptc.r.ufr.dwTitleId = Convert.ToUInt32(szStrings[2],10);
                        }else{
                            ptc.r.ufr.dwTitleId = Convert.ToUInt32(szStrings[2],16);
                        }
                    }catch {
                        Console.WriteLine("ToUInt32 (AtoHex) failed in dwTitleId!\n");
                    }
                }
            }
            if ( -1 != szLineParserBuffer.IndexOf( TESTCASE_HTTP_ERROR  )){
                szStrings = r.Split(szLineParserBuffer);
                ptc.xtd.bAU_dwHTTPResponseError = true;
                try{
                    if (-1 == szStrings[1].IndexOf("0x")){
                        ptc.m_dwHTTPResponseErrorClient = Convert.ToUInt32(szStrings[1],10);
                    }else{
                        ptc.m_dwHTTPResponseErrorClient = Convert.ToUInt32(szStrings[1],16);
                    }
                }catch {
                    Console.WriteLine("ToUInt32 (AtoHex) failed in m_dwHTTPResponseErrorClient!\n");
                }
            }
            if ( -1 != szLineParserBuffer.IndexOf( TESTCASE_HTTP_X_ERROR  )){
                szStrings = r.Split(szLineParserBuffer);
                ptc.xtd.bAU_dwHTTPXError = true;
                try{
                    if (-1 == szStrings[1].IndexOf("0x")){
                        ptc.m_dwHTTP_XErrorClientSide = Convert.ToUInt32(szStrings[1],10);
                    }else{
                        ptc.m_dwHTTP_XErrorClientSide = Convert.ToUInt32(szStrings[1],16);
                    }
                }catch {
                    Console.WriteLine("ToUInt32 (AtoHex) failed in m_dwHTTP_XErrorClientSide!\n");
                }
            }
            if ( -1 != szLineParserBuffer.IndexOf( "ContentLength" )){
                szStrings = r.Split(szLineParserBuffer);
                ptc.xtd.bAU_ContentLength = true;
                try{
                    if (-1 == szStrings[1].IndexOf("0x")){
                        ptc.m_dwHTTP_ContentLength = Convert.ToUInt32(szStrings[1],10);
                    }else{
                        ptc.m_dwHTTP_ContentLength = Convert.ToUInt32(szStrings[1],16);
                    }
                }catch {
                    Console.WriteLine("ToUInt32 (AtoHex) failed in m_dwHTTP_ContentLength!\n");
                }
            }
            // RESPONSE---------------------------------------------------------------------
            if ( -1 != szLineParserBuffer.IndexOf( TESTCASE_HTTP_RESPONSE  )){
                szStrings = r.Split(szLineParserBuffer);
                if ( true == szStrings[1].Equals("fFlags") ) {
                    // Set  it to test this.
                    ptc.xtd.bAU_fFlags = true;
                    try{
                        ptc.ufrResponse.fFlags = Convert.ToUInt16(szStrings[2],10);
                    }catch {
                        Console.WriteLine("ToUInt32 (AtoHex) failed in fFlags!\n");
                    }
                }
                if ( true == szStrings[1].Equals("cLocations") ) {
                    // Set  it to test this.
                    ptc.xtd.bAU_cLocations = true;
                    try{
                        ptc.ufrResponse.cLocations = Convert.ToUInt16(szStrings[2],10);
                    }catch {
                        Console.WriteLine("ToUInt16 (AtoHex) failed in cLocations!\n");
                    }
                }
                if ( true == szStrings[1].Equals("dwPackageSize") ) {
                    // Set  it to test this.
                    ptc.xtd.bAU_dwPackageSize = true;
                    try{
                        ptc.ufrResponse.dwPackageSize = Convert.ToUInt32(szStrings[2],10);
                    }catch {
                        Console.WriteLine("ToUInt32 (AtoHex) failed in dwPackageSize!\n");
                    }
                }
                if ( true == szStrings[1].Equals("dwInstallSize") ) {
                    // Set  it to test this.
                    ptc.xtd.bAU_dwInstallSize = true;
                    try{
                        ptc.ufrResponse.dwInstallSize = Convert.ToUInt32(szStrings[2],10);
                    }catch {
                        Console.WriteLine("ToUInt32 (AtoHex) failed in dwInstallSize!\n");
                    }
                }
                // dwBitFlags is mapped to dwTitleVersion for autoupdate.
                if ( true == szStrings[1].Equals("dwTitleVersion") ) {
                    // Set  it to test this.
                    ptc.xtd.bAU_dwTitleVersion = true;
                    try{
                        ptc.ufrResponse.dwInstallSize = Convert.ToUInt32(szStrings[2],10);
                    }catch {
                        Console.WriteLine("ToUInt32 (AtoHex) failed in dwTitleVersion!\n");
                    }
                }
                if ( true == szStrings[1].Equals("rgbSymKey") ) {
                    // Set  it to test this.
                    ptc.xtd.bAU_byteSymKey = true;
                    try{
                        ptc.ufrResponse.byteSymKey = Convert.ToByte(szStrings[2],16);
                    }catch {
                        Console.WriteLine("ToByte (AHextoBytes) failed in rgbSymKey!\n");
                    }
                }
                if ( true == szStrings[1].Equals("rgbPubKey") ) {
                    // Set  it to test this.
                    ptc.xtd.bAU_bytePubKey = true;
                    // We special case pubkeys are they are longer that my linebuffer.
                    // we put them on the next line and get them.
                    szLineParserBuffer = srReadConfig.ReadLine();
                    szStrings = r.Split(szLineParserBuffer);
                    try{
                        ptc.ufrResponse.bytePubKey = Convert.ToByte(szStrings[1],16);
                    }catch {
                        Console.WriteLine("ToByte (AHextoBytes) failed in rgbSymKey!\n");
                    }
                }
                for (int p = 0; p < 20; p++) {
                    string szBuffer;
                    szBuffer = "Rank[" + p +"]"; 
                    // Set it to test this.
                    ptc.xtd.bCR_Locations[p] = true;
                    if ( true == szStrings[1].Equals( szBuffer ) ) {
                        try{
                            ptc.ufrResponseXrl[p].Rank = Convert.ToUInt16(szStrings[2],10);
                        }catch {
                            Console.WriteLine("ToByte (AHextoBytes) failed in Rank!\n");
                        }
                    }
                    szBuffer = "cbXrl[" + p +"]"; 
                    if ( true == szStrings[1].Equals( szBuffer ) ) {
                        try{
                            ptc.ufrResponseXrl[p].cbXrl = Convert.ToUInt16(szStrings[2],10);
                        }catch {
                            Console.WriteLine("ToUint16 (Atoi) failed in cbXrl!\n");
                        }
                    }
                    szBuffer = "szXrl[" + p +"]"; 
                    if ( true == szStrings[1].Equals( szBuffer ) ) {
                        try{
                            ptc.ufrResponseXrl[p].szXrl = szStrings[2].ToString();
                        }catch {
                            Console.WriteLine("ToUint16 (Atoi) failed in szXrl!\n");
                        }
                    }
                }
                // Console.WriteLine("E--Dude {0}\n"), ptc.ufrResponse.cLocations);
            }
        }*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WebSGTest\FuncValid.cs ===
using System;
using System.Web;
using System.Security;
using System.Net;
using System.IO;
using System.Text;
using System.Security.Cryptography.X509Certificates;
using System.Net.Sockets;
using System.Threading;
using System.Globalization;
using System.Web.Services.Protocols;

using ServerTestFramework;
using WebSgEngine;


namespace WebSGTest {

    class FunctionalGroup : TestNode {
      
		class asyncCallbackObject
		{
			#region Member Variables
			public static DateTime dtBase = new DateTime(1980, 1, 1, 0, 0, 0, 0);
			public ManualResetEvent sync = null;
			public object res = null;
			public uint ValidSeconds = 0;
			public Exception e = null;
			public DateTime dtCompleted = new DateTime(1980, 1, 1, 0, 0, 0, 0);
			#endregion

			public asyncCallbackObject() {sync = new ManualResetEvent(false);}
			public void Set()
			{
				dtCompleted = DateTime.Now;
				sync.Set();
			}
		};

        static  string szCertificate = ".\\Suites\\Test.xbltest.rdo.001.cer";
        [TestCase, Description("WEBSG_WEBLINKING_Link_470_BYTES")]
            class WEBSG_WEBLINKING_Link_470_BYTES : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_WEBLINKING_Link_470_BYTES";
                ptc.Request_uiPacketSize = 470;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 480;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }

		[TestCase, Description("WEBSG_LSP_EMPTY_REFLECTOR")]
		class WEBSG_LSP_EMPTY_REFLECTOR : TestBase 
		{
			override protected void Execute() 
			{
				try
				{
					for(uint i = 0; i < 4096; i++)
					{
                        // this should point at TestFD
						HttpWebRequest wr = (HttpWebRequest)WebRequest.Create("https://192.168.86.51/testfd/Reflect.ashx");
						X509Certificate x509 = X509Certificate.CreateFromCertFile( szCertificate );
						wr.ClientCertificates.Add(x509);
						wr.ContentType = "xon/0";
						wr.ContentLength = 0;
						wr.Method = "POST";			
						WebResponse resp = wr.GetResponse();
						Stream stuff = resp.GetResponseStream();
						BinaryReader br = new BinaryReader(stuff);
						byte[] finalResult = br.ReadBytes((int)resp.ContentLength);
					}
					ResultCode=TEST_RESULTS.PASSED;
				}
				catch
				{
					ResultCode=TEST_RESULTS.FAILED;
				}
			}
		}

		[TestCase, Description("WEBSG_LSP_0_LOOKUP_PUID")]
		class WEBSG_LSP_0_LOOKUP_PUID : TestBase 
		{
			override protected void Execute() 
			{
				try
				{
					HttpWebRequest wr = (HttpWebRequest)WebRequest.Create("https://192.168.86.51/livepxy/lookuppuid.asmx");
					X509Certificate x509 = X509Certificate.CreateFromCertFile( szCertificate );
					wr.ClientCertificates.Add(x509);
					wr.ContentType = "xon/0";
					wr.ContentLength = 0;
					wr.Method = "POST";
					WebResponse resp = wr.GetResponse();
					Stream stuff = resp.GetResponseStream();
					BinaryReader br = new BinaryReader(stuff);
					byte[] finalResult = br.ReadBytes((int)resp.ContentLength);
					ResultCode=TEST_RESULTS.PASSED;
				}
				catch(Exception e)
				{
					Console.WriteLine(e.ToString());
					ResultCode = TEST_RESULTS.FAILED;
				}
			}
		}

        [TestCase, Description("WEBSG_WEBLINKING_LinkedGamerTag_509_BYTES")]
            class WEBSG_WEBLINKING_LinkedGamerTag_509_BYTES : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_WEBLINKING_LinkedGamerTag_509_BYTES";
                ptc.Request_uiPacketSize = 509;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 509;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("WEBSG_STRESS_GENERALINFO_GetTitleList_1123_BYTES")]
            class WEBSG_STRESS_GENERALINFO_GetTitleList_1123_BYTES : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_STRESS_GENERALINFO_GetTitleList_1123_BYTES";
                ptc.Request_uiPacketSize = 1123;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 1123;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }
        [TestCase, Description("WEBSG_STRESS_PRESENCE_GetFriendPresence_3311_BYTES")]
            class WEBSG_STRESS_PRESENCE_GetFriendPresence_3311_BYTES : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_STRESS_PRESENCE_GetFriendPresence_3311_BYTES";
                ptc.Request_uiPacketSize = 3311;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 3311;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }
        [TestCase, Description("WEBSG_STRESS_STATS_GetLBList_1390_BYTES")]
            class WEBSG_STRESS_STATS_GetLBList_1390_BYTES : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_STRESS_STATS_GetLBList_1390_BYTES";
                ptc.Request_uiPacketSize = 1390;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 1390;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }
        [TestCase, Description("WEBSG_STRESS_STATS_EnumerateLB_8296_BYTES")]
            class WEBSG_STRESS_STATS_EnumerateLB_8296_BYTES : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_STRESS_STATS_EnumerateLB_8296_BYTES";
                ptc.Request_uiPacketSize = 8296;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 8296;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("WEBSG_STRESS_STATS_EnumerateLBNearGamerTag_5244_BYTES")]
            class WEBSG_STRESS_STATS_EnumerateLBNearGamerTag_5244_BYTES : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_STRESS_STATS_EnumerateLBNearGamerTag_5244_BYTES";
                ptc.Request_uiPacketSize = 5244;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 5244;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }
        [TestCase, Description("WEBSG_STRESS_STATS_EnumerateLBForGamerTag_5244_BYTES")]
            class WEBSG_STRESS_STATS_EnumerateLBForGamerTag_5244_BYTES : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_STRESS_STATS_EnumerateLBForGamerTag_5244_BYTES";
                ptc.Request_uiPacketSize = 5244;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 5244;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }
        [TestCase, Description("WEBSG_STRESS_STATS_EnumerateLBRaw_32448_BYTES")]
            class WEBSG_STRESS_STATS_EnumerateLBRaw_32448_BYTES : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_STRESS_STATS_EnumerateLBRaw_32448_BYTES";
                ptc.Request_uiPacketSize = 32448;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 32448;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }
        [TestCase, Description("WEBSG_STATS_GetLBList_1390_BYTES")]
            class WEBSG_STATS_GetLBList_1390_BYTES : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_STATS_GetLBList_1390_BYTES";
                ptc.Request_uiPacketSize = 1390;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 1390;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }
        [TestCase, Description("WEBSG_STATS_EnumerateLB_8296_BYTES")]
            class WEBSG_STATS_EnumerateLB_8296_BYTES : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_STATS_EnumerateLB_8296_BYTES";
                ptc.Request_uiPacketSize = 8296;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 8296;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }
        [TestCase, Description("WEBSG_REFLECTOR_TIMEOUT_50_SECS")]
            class WEBSG_REFLECTOR_TIMEOUT_50_SECS : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_REFLECTOR_TIMEOUT_50_SECS";
                ptc.Request_uiPacketSize = 1400;
                ptc.Request_iTimeOutMilliseconds = 50000;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytesTimeout";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 1400;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("WEBSG_15_MIN_THREE_SEC_TIMEOUT")]
            class WEBSG_15_MIN_THREE_SEC_TIMEOUT : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_15_MIN_THREE_SEC_TIMEOUT";
                ptc.Request_uiPacketSize = 1400;
                ptc.Request_iTimeOutMilliseconds = 904000;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytesTimeout";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 1400;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("WEBSG_GENERALINFO")]
            class WEBSG_GENERALINFO : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_GENERALINFO";
                ptc.Request_uiPacketSize = 0;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "";
                ptc.Request_szURL = "https://192.168.86.51/generalinfo/generalinfo.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 0;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("WEBSG_REFLECTOR_HEADERS")]
            class WEBSG_REFLECTOR_HEADERS : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_REFLECTOR_HEADERS";
                ptc.Request_szAPItoCall = "WallysWCReflectorString";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx";
                ptc.Request_szCertificate = szCertificate;
                ptc.Request_SubjectName  = "Subject-Name";
                ptc.Request_SOAPAction   = "SOAPAction";
                ptc.Request_ClientIPPort = "Client-IP-Port";
                ptc.Request_RequestId    = "RequestId";
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }
        [TestCase, Description("WEBSG_REFLECTOR_CERT_ISSUER_NOT_IN_INI")]
            class WEBSG_REFLECTOR_CERT_ISSUER_NOT_IN_INI : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_REFLECTOR_CERT_ISSUER_NOT_IN_INI";
                ptc.Request_szAPItoCall = "WallysWCReflectorCertificateIssuer";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx";
                ptc.Request_szCertificate = ".\\NOTinWEBSG_INI.cer";
                ptc.Request_SubjectName  = "Subject-Name";
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }


        [TestCase, Description("WEBSG_RANGE_0_TO_80000_STEP_100_BYTES")]
            class WEBSG_RANGE_0_TO_80000_STEP_100_BYTES : TestBase {
            override protected void Execute() {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = false;
                ptc.szTestName = "WEBSG_RANGE_0_TO_80000_STEP_100_BYTES";
                ptc.Request_uiStartPacketSizeRange = 0;
                ptc.Request_uiSkipSizeRange = 100;
                ptc.Request_uiEndPacketSizeRange = 80000;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytesRANGE";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 0;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }
        }
    }
}




/*
 *namespace MyWebService
 {
 	using System ;
using System.Web.Services ;

public class MyStringReverse: WebService
{
        		[WebMethod(Description="Reverse String")]
        		public  String ReverseString ( String InString )
        		{
                		// Check null String
                		if ( InString == null )  return null ;
                        
                		Int32 intSize = InString.Length ;
                	char[] arrayInString = InString.ToCharArray() ;
            	    	char[] arrayOutString = new char[intSize] ;
                
                        for (Int32 i = 0 ; i < intSize ; ++i) 
                        		arrayOutString[i] = arrayInString[intSize-i-1] ;
                        
                	return new String(arrayOutString) ;        
        		}
 	}
}
*/

                /*
                if ("PUT" == ptc.HTTP_Method) { //we want to put a file
                    if (txtFileName.Text.Length < 1) {
                        MessageBox.Show("Please enter a file to put");
                        return false;
                    }
                    //open the file to put
                    FileStream readIn = new FileStream(txtFileName.Text, FileMode.Open, FileAccess.Read);
                    readIn.Seek(0, SeekOrigin.Begin); // move to the start of the file
                    byte[] fileData = new byte[readIn.Length];
                    readIn.Read(fileData,0, (int)readIn.Length); // read the file data
                    HttpWRequest.ContentLength = readIn.Length;
                    Stream tempStream = HttpWRequest.GetRequestStream();
                    // place the file data in the Request Stream to send to the server
                    // for ease of use we just read the whole file into on large byte array to send.
                    tempStream.Write(fileData,0,(int)readIn.Length);
                    tempStream.Close();
                    readIn.Close();
                }
                */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WebSGTest\Stresstionals.cs ===
using System;
using ServerTestFramework;
using WebSgEngine;

namespace WebSGTest
{
    [StressInstantiate]
    class PacketSize1 : TestBase {
        static  string szCertificate = ".\\Suites\\test.xbltest.rdo.001.cer";
        override protected void Execute() {
            ResultCode=TEST_RESULTS.PASSED;
            try {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = true;
                ptc.szTestName = "WEBSG_1_BYTES";
                ptc.Request_uiPacketSize = 1;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 1;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }else
                    ResultCode=TEST_RESULTS.FAILED;
            }
            catch {
                ResultCode=TEST_RESULTS.FAILED;
            }
        }
    }

    [StressInstantiate]
    class PacketSize100 : TestBase {
        static  string szCertificate = ".\\Suites\\test.xbltest.rdo.001.cer";
        override protected void Execute() {
            ResultCode=TEST_RESULTS.PASSED;
            try {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = true;
                ptc.szTestName = "WEBSG_100_BYTES";
                ptc.Request_uiPacketSize = 100;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 100;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }else
                    ResultCode=TEST_RESULTS.FAILED;
            }
            catch {
                ResultCode=TEST_RESULTS.FAILED;
            }
        }
    }

    [StressInstantiate]
    class PacketSize1400 : TestBase
    {
        static  string szCertificate = ".\\Suites\\test.xbltest.rdo.001.cer";
        override protected void Execute() {
            ResultCode=TEST_RESULTS.PASSED;
            try {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = true;
                ptc.szTestName = "WEBSG_1400_BYTES";
                ptc.Request_uiPacketSize = 1400;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 1400;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }else
                    ResultCode=TEST_RESULTS.FAILED;
            }
            catch {
                ResultCode=TEST_RESULTS.FAILED;
            }
        }
    }

    [StressInstantiate]
    class PacketSize3000 : TestBase {
        static  string szCertificate = ".\\Suites\\test.xbltest.rdo.001.cer";
        override protected void Execute() {
            ResultCode=TEST_RESULTS.PASSED;
            try {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = true;
                ptc.szTestName = "WEBSG_3000_BYTES";
                ptc.Request_uiPacketSize = 3000;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 3000;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }else
                    ResultCode=TEST_RESULTS.FAILED;
            }
            catch {
                ResultCode=TEST_RESULTS.FAILED;
            }
        }
    }

    [StressInstantiate]
    class PacketSize65000 : TestBase {
        static  string szCertificate = ".\\Suites\\test.xbltest.rdo.001.cer";
        override protected void Execute() {
            ResultCode=TEST_RESULTS.PASSED;
            try {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = true;
                ptc.szTestName = "WEBSG_65000_BYTES";
                ptc.Request_uiPacketSize = 65000;
                ptc.Request_iTimeOutMilliseconds = 0;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytes";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 65000;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }else
                    ResultCode=TEST_RESULTS.FAILED;
            }
            catch {
                ResultCode=TEST_RESULTS.FAILED;
            }
        }
    }

    [StressInstantiate]
    class Timeouts3SecPacketSize1400 : TestBase {
        static  string szCertificate = ".\\Suites\\test.xbltest.rdo.001.cer";
        override protected void Execute() {
            ResultCode=TEST_RESULTS.PASSED;
            try {
                TESTCASE ptc = new TESTCASE();
                ptc.bStress = true;
                ptc.szTestName = "WEBSG_3secTimeout1400_BYTES";
                ptc.Request_uiPacketSize = 1400;
                ptc.Request_iTimeOutMilliseconds = 3000;
                ptc.Request_szAPItoCall = "WallysWCReflectorBytesTimeout";
                ptc.Request_szURL = "https://192.168.86.51/websg/WebCacheReflector.asmx" ;
                ptc.Request_szCertificate = szCertificate;
                ptc.Response_uiPayloadSize = 1400;
                if ( true == WebSgFunctionals.MakeRequest( ptc )){
                    ResultCode=TEST_RESULTS.PASSED;
                }else
                    ResultCode=TEST_RESULTS.FAILED;
            }
            catch {
                ResultCode=TEST_RESULTS.FAILED;
            }
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WebSGTest\GeneralInfo.cs ===
﻿//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.0.3705.288.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="GeneralInfoSoap", Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
public class GeneralInfo : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    /// <remarks/>
    public GeneralInfo(String url) {
        if (url != null)
        {
            this.Url = url;
        }
        else
        {
            this.Url = "https://192.168.86.51/generalinfo/generalinfo.asmx";
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/GeneralInfo/GetTitleList", RequestNamespace="http://websvc.xboxlive.com/GeneralInfo/", ResponseNamespace="http://websvc.xboxlive.com/GeneralInfo/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
    public TitlePrivilegeInfo[] GetTitleList(out System.UInt32 ValidSeconds) {
        object[] results = this.Invoke("GetTitleList", new object[0]);
        ValidSeconds = ((System.UInt32)(results[1]));
        return ((TitlePrivilegeInfo[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetTitleList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetTitleList", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public TitlePrivilegeInfo[] EndGetTitleList(System.IAsyncResult asyncResult, out System.UInt32 ValidSeconds) {
        object[] results = this.EndInvoke(asyncResult);
        ValidSeconds = ((System.UInt32)(results[1]));
        return ((TitlePrivilegeInfo[])(results[0]));
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
public class TitlePrivilegeInfo {
    
    /// <remarks/>
    public System.UInt32 TitleID;
    
    /// <remarks/>
    public TitlePrivilege Privileges;
    
    /// <remarks/>
    public ESRBRating Rating;
    
    /// <remarks/>
    public string DefaultLocale;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
    public LocalizedDisplayName[] LocalizedName;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
public enum TitlePrivilege {
    
    /// <remarks/>
    None,
    
    /// <remarks/>
    ReadOnly,
    
    /// <remarks/>
    ReadWrite,
    
    /// <remarks/>
    FullControl,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
public enum ESRBRating {
    
    /// <remarks/>
    ALL,
    
    /// <remarks/>
    ADULT,
    
    /// <remarks/>
    MATURE,
    
    /// <remarks/>
    TEEN,
    
    /// <remarks/>
    EVERYONE,
    
    /// <remarks/>
    KIDS_TO_ADULTS,
    
    /// <remarks/>
    EARLY_CHILDHOOD,
    
    /// <remarks/>
    UNSPECIFIED,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/GeneralInfo/")]
public class LocalizedDisplayName {
    
    /// <remarks/>
    public string Locale;
    
    /// <remarks/>
    public string DisplayName;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WebSGTest\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WebSGTest\Functionals.cs ===
using System;
using System.Web;
using System.Security;
using System.Net;
using System.IO;
using System.Text;
using System.Security.Cryptography.X509Certificates;
using System.Net.Sockets;
using System.Threading;
using System.Globalization;
using System.Web.Services.Protocols;
using System.Text.RegularExpressions;
using WebSGTest;

namespace WebSgEngine
{
    class WebSgFunctionals : CDatafile {

        public  bool Functionals(){
             return Functionals( null);
        }
        public  bool Functionals( string szDriverFilename){
            bool b = true;
            TESTCASE [] testCases;
            string szDefaultDriverFilename = "webSGEngineDriver.txt";
          
            if (null == szDriverFilename) 
                szDriverFilename = szDefaultDriverFilename;
            testCases = LoadTestCasesToRun( szDriverFilename );
            foreach (TESTCASE testcase in testCases){
                
                switch (testcase.szWhichRequestType){
                    case "RawWebRequest":
                        MakeRawWebRequest( testcase );
                        break;
                    default:
                        MakeRequest( testcase );
                        break;
                }
            }
            return b;
        }
        
        public static bool MakeRequest ( TESTCASE ptc ){

            bool b = true;
            byte [] bReturn;
            if (false == ptc.bStress)
                Console.Write("\n[STARTING] {0}.\n",ptc.szTestName); 
            try {
                if (-1 != ptc.Request_szURL.IndexOf("generalinfo")){
                    GeneralInfo gi = new GeneralInfo(ptc.Request_szURL);
                    X509Certificate x509 = X509Certificate.CreateFromCertFile( ptc.Request_szCertificate );
                    gi.ClientCertificates.Add(x509);
                    // At this point you just make queries to thse functions on the back end.
                    uint uiValidSeconds = 1;
                    TitlePrivilegeInfo [] p =  gi.GetTitleList( out uiValidSeconds ); 
                    foreach( TitlePrivilegeInfo x in p) {
                        if (false == ptc.bStress){
                            Console.Write("Name {0} Rating {1} \n",x.LocalizedName, x.Rating);
                            Console.Write("Seconds {0} TitleID {1}\n",uiValidSeconds, x.TitleID );
                        }
                    }
                }else
                    if (-1 != ptc.Request_szURL.IndexOf("stats")){
                
                    Stats stats = new Stats();
                    stats.Url = ptc.Request_szURL;
                    X509Certificate x509 = X509Certificate.CreateFromCertFile( ptc.Request_szCertificate );
                    stats.ClientCertificates.Add(x509);
                    // At this point you just make queries to thse functions on the back end.
                    Console.Write("STATS::This is a stat test.\n" );

                    Console.Write("Calling GetLBList(275).\n" );
                    LBInfo [] x = stats.GetLBList(275);
                    foreach( LBInfo y in x) {
                        Console.Write("==> {0}.\n", y.LBID );
                        foreach( LocalizedName w in y.LocalizedLBName) {
                            Console.Write("Name==> {0}.\n", w.Name );
                        }
                    }             
                }else{
                    WebCacheReflector wcr = new WebCacheReflector();
                    wcr.Url = ptc.Request_szURL;
                    if (0 != ptc.Request_iClientTimeOutMilliseconds){
                        wcr.Timeout = ptc.Request_iClientTimeOutMilliseconds;
                        Console.WriteLine("Request_iClientTimeOutMilliseconds {0}.", wcr.Timeout );
                    }
                    X509Certificate x509 = X509Certificate.CreateFromCertFile( ptc.Request_szCertificate );
                    wcr.ClientCertificates.Add(x509);
                    // At this point you just make queries to these functions on the back end.
                    switch (ptc.Request_szAPItoCall){
                        case "WallysWCReflectorString":
                            bool bSubject = false;
                            bool bSoapAction = false;
                            bool bClientIPPort = false;
                            bool bRequestId  = false;
                            Regex r = new Regex("\n+"); 
                            string[] szStrings;
                            string szReturn = wcr.WallysWCReflectorString();
                            szStrings = r.Split(szReturn);
                            for ( int x = 0; x < szStrings.Length; x++ ){
                                //Console.WriteLine( "szStrings{0}:  {1}", x, szStrings[x]);
                                if ( -1 != szStrings[x].IndexOf("SERVER")){
                                    Console.Write( "{0}\n", szStrings[x]);
                                }else if ( -1 != szStrings[x].IndexOf("SOAPAction:")){
                                    
                                    Console.Write( "{0}\n", szStrings[x] );
                                    if( -1 != szStrings[x].IndexOf(ptc.Request_SOAPAction)) 
                                        bSoapAction = true;
                                }else if ( -1 != szStrings[x].IndexOf("Subject-Name:")){
                                    Console.Write( "{0}\n", szStrings[x] );
                                    if( -1 != szStrings[x].IndexOf(ptc.Request_SubjectName) )
                                        bSubject = true;
                                }else
                                    if ( -1 != szStrings[x].IndexOf("Client-IP-Port:")){
                                    Console.Write( "{0}\n", szStrings[x]);
                                    if( -1 != szStrings[x].IndexOf(ptc.Request_ClientIPPort))
                                        bClientIPPort = true;
                                }else
                                    if ( -1 != szStrings[x].IndexOf("RequestId:")){
                                    Console.Write( "{0}\n", szStrings[x] );
                                    if( -1 != szStrings[x].IndexOf(ptc.Request_RequestId))
                                        bRequestId = true;
                                }
                                //string s = Encoding.ASCII.GetString(p,0,p.Length);
                            }
                            // Check 
                            Console.Write("{0}: Subject-Name sent to cache.\n", bSubject? "PASSED": "FAILED" ); 
                            Console.Write("{0}: SOAPAction sent to cache.\n", bSoapAction? "PASSED": "FAILED" ); 
                            Console.Write("{0}: Client-IP-Port sent to cache.\n", bClientIPPort? "PASSED": "FAILED" ); 
                            Console.Write("{0}: RequestId sent to cache.\n", bRequestId? "PASSED": "FAILED" ); 
                            break;
                        case "WallysWCReflectorBytes":
                            //bTestPassed = true;
                            bReturn =  wcr.WallysWCReflectorBytes(ptc.Request_uiPacketSize);
                            if (bReturn.Length != ptc.Request_uiPacketSize ){
                                Console.Write( "FAILED: uiPacketSize, Expect: {0} Retrieved: {0}.\n", 
                                    ptc.Request_uiPacketSize,
                                    bReturn.Length );
                                //bTestPassed = false;
                            }else{
                                if (false == ptc.bStress)
                                    Console.Write("PASSED: returned {0} bytes.\n",bReturn.Length); 
                            }
                            break;
                        case "WallysWCReflectorBytesRANGE":
                            for (uint uiPayload = ptc.Request_uiStartPacketSizeRange; 
                                uiPayload < ptc.Request_uiEndPacketSizeRange; 
                                uiPayload+= ptc.Request_uiSkipSizeRange ){
                                bReturn =  wcr.WallysWCReflectorBytes(uiPayload);
                                Console.Write("Returned {0} bytes \r",bReturn.Length); 
                                if (bReturn.Length != uiPayload ){
                                    Console.Write( "FAILED: uiPayload, Expect: {0} Retrieved: {0}.\n\n", 
                                        uiPayload, bReturn.Length );
                                }else{
                                    Console.Write("PASSED: returned {0} bytes.\r",bReturn.Length); 
                                }
                            }
                            Console.Write("\n" ); 
                            break;
                        case "WallysWCReflectorBytesTimeout":
                            //bTestPassed = true;
                            if (false == ptc.bStress)
                                Console.Write("Request_iTimeOutMilliseconds {0}.\n",ptc.Request_iTimeOutMilliseconds ); 
                            bReturn =  wcr.WallysWCReflectorBytesTimeout(ptc.Request_uiPacketSize,ptc.Request_iTimeOutMilliseconds );
                            if (bReturn.Length != ptc.Request_uiPacketSize ){
                                Console.WriteLine( "FAILED: uiPacketSize, Expect: {0} Retrieved: {0}.", 
                                    ptc.Request_uiPacketSize,
                                    bReturn.Length
                                    );
                            }else{
                                if (false == ptc.bStress)
                                    Console.WriteLine("PASSED: returned {0} bytes.",bReturn.Length); 
                            }
                            break;
                        default:
                            break;
                    }
                }
            }catch (WebException WebExcp) {
                Console.WriteLine("WebException:{0}",WebExcp.Message.ToString());
                Console.WriteLine("WebException:{0}",WebExcp.Response.GetResponseStream());
                //WebExcp.Response.Headers.GetValues(
                b =  false;
            }
            catch (Exception e) { 
                Console.Write("{0}\n",e.Message.ToString());
                b = false;
            }
            // Add a space between the printed items.
            if (false == ptc.bStress)
                Console.Write("[ENDING  ] {0}.\n\n",ptc.szTestName); 
            return b;
        }
 
     
        bool MakeRawWebRequest(TESTCASE ptc ) {
            bool b = false;
            ptc.HTTP_Method = "POST";
            try {
                //Create a new request
                HttpWebRequest HttpWRequest = (HttpWebRequest)WebRequest.Create(ptc.Request_szURL);
                X509Certificate x509 = X509Certificate.CreateFromCertFile( ptc.Request_szCertificate );
                HttpWRequest.ClientCertificates.Add(x509);
                // set the name of the user agent. This is the client name that is passed to IIS
                HttpWRequest.UserAgent = 
                "Mozilla/4.0 (compatible;MSIE 6.0;MS Web Services Client Protocol 1.1.4322.573)";
                
                //HttpWRequest. KeepAlive = true; //this is the default
                // set the connection keep-alive
                HttpWRequest.KeepAlive = true; //this is the default
                //we don't want caching to take place so we need
                // to set the pragma header to say we don't want caching
                HttpWRequest.Headers.Set("Pragma", "no-cache");
                //set the request timeout to 5 min.
                HttpWRequest.Timeout = 300000;
                // set the request method
                HttpWRequest.Method = ptc.HTTP_Method;
                // See what the Method is a POST 
                HttpWRequest.ContentType = "text/xml;charset=utf-8";


                string PostText2 = 
                    //"HTTP/1.1" +
                    "SOAPAction:\r\n\"http://tempuri.org/WallysWCReflectorString\"\r\n" +
                    "\r\n\r\n\r\n<?xml\r\nversion=\"1.0\"\r\nencoding=\"utf-8\"?>" +
                    "<soap:Envelope.xmlns:soap=http://schemas.xmlsoap.org/soap/envelope/" +
                    "\r\nxmlns:xsi=http://www.w3.org/2001/XMLSchemainstance" +
                    "\r\nxmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">" +
                    "<soap:Body>" +
                    "<WallysWCReflectorString.xmlns=\"http://tempuri.org/\">" +
                    "</WallysWCReflectorString> " +
                    "</soap:Body>" +
                    "</soap:Envelope>";

                HttpWRequest.ContentLength = PostText2.Length;
                
                if ("POST" == ptc.HTTP_Method) {
                    
                    HttpWRequest.Headers.Add("Subject-Name:test.xbltest.rdo.001");
                    HttpWRequest.Headers.Add("Client-IP-Port","157.56.13.196:8888");
                    HttpWRequest.Headers.Add("RequestId","690f1170b8352911");
                   
                    // add the content type so we can handle form data
                    //HttpWRequest.ContentType = "application/x-www-form-urlencoded";

                    // we need to store the data into a byte array
                    //byte[] PostData = System.Text.Encoding.ASCII.GetBytes(PostText.ToString());
                    byte[] PostData = System.Text.Encoding.ASCII.GetBytes(PostText2.ToString());
                    HttpWRequest.ContentLength = PostData.Length;
                    Stream UploadStream = HttpWRequest.GetRequestStream();
                    //Write the data to be posted to the Request Stream
                    UploadStream.Write(PostData,0,PostData.Length);
                    UploadStream.Close();
                }
                HttpWebResponse HttpWResponse = null;
                //check to see if we have previously created a response object
                if(null != HttpWResponse) {
                    HttpWResponse.Close(); // close any previous connection
                    HttpWResponse = null; // clear the object. 
                }
             
                //HttpWRequest.
                    WebResponse x = null;
                
                //get the response. This is where we make the connection to the server
                x = HttpWRequest.GetResponse();
                HttpWResponse = (HttpWebResponse)x; 
                // Fill out the data on the Response Header Tab
                // check for headers. We don't have the CRLF vs non CRLF headers
                // we get a headers collection. However the following code
            
                // place the file data in the Request Stream to send to the server
                // for ease of use we just read the whole file into on large byte array to send.
                Stream ResponseStream = x.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                
                StreamReader sr = new StreamReader( ResponseStream, encode );
                byte [] fileData = new byte[9000];
                char [] szFileData = new char[9000];
                int iReadCount = sr.Read( szFileData,0, (int)HttpWResponse.ContentLength);
                sr.Close();

                Console.Write("szFileData DATA DUMP:\n" );
                foreach (char ss in szFileData){
                    Console.Write("{0}",ss);
                }
                Console.Write("szFileData Size {0} \n",szFileData.Length );
                Console.Write("Headers {0} \n",x.Headers );
                Console.Write("Server {0} \n",HttpWResponse.Server.ToString());
                
                //Console.Write("Server {0} \n",HttpWResponse.GetResponseStream());
                /*
                Console.Write("Headers {0} \n",HttpWResponse.Headers.ToString());
                //Get the content Type 
                Console.Write("ContentType {0} \n", HttpWResponse.ContentType.ToString());
                //Get the Content Length 
                Console.Write("ContentType {0} \n", HttpWResponse.ContentLength.ToString());
                //Get the Request Method
                Console.Write("ContentType {0} \n",HttpWResponse.Method.ToString());
                // Get the Status code
                //Console.Write("StatusCode {0} \n",(int)HttpWResponse.StatusCode.ToString());
                // Get last modified
                Console.Write("LastModified {0} \n",HttpWResponse.LastModified.ToLongDateString());
                // Get HTTP version
                Console.Write("ProtocolVersion {0} \n",HttpWResponse.ProtocolVersion.ToString());
                // Get the status text
                Console.Write("StatusCode {0} \n",HttpWResponse.StatusCode.ToString());
                // Get what the server is
                Console.Write("Server {0} \n",HttpWResponse.Server.ToString());
                // Get the Content Encoding if any
                Console.Write("ContentEncoding {0} \n", HttpWResponse.ContentEncoding.ToString());
                // write the request info to the controls on the
                // Request Header tab
                // Get the request headers
                Console.Write("Headers {0} \n", HttpWRequest.Headers.ToString());
                // Get the request method
                Console.Write("Method {0} \n", HttpWRequest.Method.ToString());
                // Get the user agent name
                Console.Write("UserAgent {0} \n",HttpWRequest.UserAgent.ToString());
                */
                return true;
            }
            catch (WebException WebExcp) {
                Console.Write("WebException:{0}\n",WebExcp.Message.ToString());
                Console.Write("GetResponseStream:\n{0}\n",WebExcp.Response.GetResponseStream());
                b =  false;
            }
            catch (Exception e) { 
                Console.Write("Exception: {0}\n",e.Message.ToString());
                b = false;
            }
            return b;
        }
    }

/*
    string PostText = 
    "./websg/webcachereflector.asmx" + 
    ".HTTP/1.1." + 
    ".Host:.192.168.86.51." +
    ".User-Agent:" +
    ".Mozilla/4.0.(compatible;" +
    ".MSIE.6.0;" +
    ".MS.Web.Services.Client.Protocol.1.1.4322.573)." +
    ".Content-Length:.350." +
    ".Content-Type:.text/xml;.charset=utf-8." +
    ".SOAPAction:.\"http://tempuri.org/WallysWCReflectorBytes\"." +
    ".Expect:.100-continue." +
    //".Subject-Name:.test.xbltest.rdo.001." +
    //".Client-IP-Port:.157.56.12.229:4226." +
    //".RequestId:.58B6400495402E62." +
    ".Connection:.Keep-Alive..." +
    ".<?xml.version=\"1.0\".encoding=\"utf-8\"?>" +
    "<soap:Envelope.xmlns:soap=http://schemas.xmlsoap.org/soap/envelope/" +
    ".xmlns:xsi=http://www.w3.org/2001/XMLSchemainstance" +
    ".xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">" +
    "<soap:Body>" +
    "<WallysWCReflectorBytes.xmlns=\"http://tempuri.org/\">" +
    "</WallysWCReflectorBytes> " +
    "</soap:Body>" +
    "</soap:Envelope>";
    */


}

/*
 *namespace MyWebService
 {
 	using System ;
using System.Web.Services ;

public class MyStringReverse: WebService
{
        		[WebMethod(Description="Reverse String")]
        		public  String ReverseString ( String InString )
        		{
                		// Check null String
                		if ( InString == null )  return null ;
                        
                		Int32 intSize = InString.Length ;
                	char[] arrayInString = InString.ToCharArray() ;
            	    	char[] arrayOutString = new char[intSize] ;
                
                        for (Int32 i = 0 ; i < intSize ; ++i) 
                        		arrayOutString[i] = arrayInString[intSize-i-1] ;
                        
                	return new String(arrayOutString) ;        
        		}
 	}
}
*/

                /*
                if ("PUT" == ptc.HTTP_Method) { //we want to put a file
                    if (txtFileName.Text.Length < 1) {
                        MessageBox.Show("Please enter a file to put");
                        return false;
                    }
                    //open the file to put
                    FileStream readIn = new FileStream(txtFileName.Text, FileMode.Open, FileAccess.Read);
                    readIn.Seek(0, SeekOrigin.Begin); // move to the start of the file
                    byte[] fileData = new byte[readIn.Length];
                    readIn.Read(fileData,0, (int)readIn.Length); // read the file data
                    HttpWRequest.ContentLength = readIn.Length;
                    Stream tempStream = HttpWRequest.GetRequestStream();
                    // place the file data in the Request Stream to send to the server
                    // for ease of use we just read the whole file into on large byte array to send.
                    tempStream.Write(fileData,0,(int)readIn.Length);
                    tempStream.Close();
                    readIn.Close();
                }
                */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WebSGTest\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_websgtest_none_12.4.56.0_none_bbcace660bb6670b
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=websgtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d.manifest
XP_MANIFEST_PATH=manifests\msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d.cat
XP_CATALOG_PATH=manifests\msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d.cat
XP_PAYLOAD_PATH=msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=websgtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WebSGTest\WebSgTest.cs ===
using System.Runtime.InteropServices;
using ServerTestFramework;
using System.Security.Cryptography.X509Certificates;

[assembly: RootNode(typeof(WebSGTest.WebSGTest))]

namespace WebSGTest
{
    [Owner("johnmcp"), TestFrequency("Regression"), TestCasePriority(2)]
    public class WebSGTest : TestNode
    {
        public WebSGTest()
        {
            //functional tests
            AddChild( new FunctionalGroup());

            //stress tests
            foreach (System.Type t in GetStressTests())
            {
                TestNode n=TestNode.ConstructFromType(t);
                AddChild(n, false, true);
            }
        }

        public System.Collections.Generic.List<System.Type> GetStressTests()
        {
            System.Collections.Generic.List<System.Type> tests = new System.Collections.Generic.List<System.Type>();
            tests.Add( typeof(PacketSize1));
            tests.Add( typeof(PacketSize100));
            tests.Add( typeof(PacketSize1400));
            tests.Add( typeof(PacketSize3000));
            tests.Add( typeof(PacketSize65000));
            tests.Add( typeof(Timeouts3SecPacketSize1400));
            return tests;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WebSGTest\WebCacheReflector.cs ===
﻿//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.0.3705.288.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="WebCacheReflectorSoap", Namespace="http://tempuri.org/")]
public class WebCacheReflector : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    /// <remarks/>
    public WebCacheReflector() {
        this.Url = "http://192.168.86.81/websg/webcachereflector.asmx";
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WallysWCReflector", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public System.Byte[] WallysWCReflector(int iPayLoad) {
        object[] results = this.Invoke("WallysWCReflector", new object[] {
                    iPayLoad});
        return ((System.Byte[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWallysWCReflector(int iPayLoad, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WallysWCReflector", new object[] {
                    iPayLoad}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Byte[] EndWallysWCReflector(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Byte[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WallysWCReflectorBytes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public System.Byte[] WallysWCReflectorBytes(System.UInt32 uiPayLoad) {
        object[] results = this.Invoke("WallysWCReflectorBytes", new object[] {
                    uiPayLoad});
        return ((System.Byte[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWallysWCReflectorBytes(System.UInt32 uiPayLoad, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WallysWCReflectorBytes", new object[] {
                    uiPayLoad}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Byte[] EndWallysWCReflectorBytes(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Byte[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WallysWCReflectorBytesTimeout", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public System.Byte[] WallysWCReflectorBytesTimeout(System.UInt32 uiPayLoad, int iTimeout) {
        object[] results = this.Invoke("WallysWCReflectorBytesTimeout", new object[] {
                    uiPayLoad,
                    iTimeout});
        return ((System.Byte[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWallysWCReflectorBytesTimeout(System.UInt32 uiPayLoad, int iTimeout, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WallysWCReflectorBytesTimeout", new object[] {
                    uiPayLoad,
                    iTimeout}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Byte[] EndWallysWCReflectorBytesTimeout(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Byte[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WallysWCReflectorString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string WallysWCReflectorString() {
        object[] results = this.Invoke("WallysWCReflectorString", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWallysWCReflectorString(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WallysWCReflectorString", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndWallysWCReflectorString(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WebSGTest\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WebSGTest\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_websgtest_none_12.4.56.0_none_bbcace660bb6670b
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=websgtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d.manifest
XP_MANIFEST_PATH=manifests\msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d.cat
XP_CATALOG_PATH=manifests\msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d.cat
XP_PAYLOAD_PATH=msil_websgtest_no-public-key_12.4.56.0_x-ww_a233f33d
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=websgtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WireDataTest\WireDataTest.cs ===
using System;
using ServerTestFramework;

namespace WireDataTest
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WebSGTest\Stats.cs ===
﻿//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.0.3705.288.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="StatsSoap", Namespace="http://websvc.xboxlive.com/Stats/")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RawLBEntry[]))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RawLBAttribute[]))]
public class Stats : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    /// <remarks/>
    public Stats() {
        this.Url = "http://10.11.2.116/stats/stats.asmx";
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/GetLBList", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
    public LBInfo[] GetLBList(System.UInt32 TitleID) {
        object[] results = this.Invoke("GetLBList", new object[] {
                    TitleID});
        return ((LBInfo[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetLBList(System.UInt32 TitleID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLBList", new object[] {
                    TitleID}, callback, asyncState);
    }
    
    /// <remarks/>
    public LBInfo[] EndGetLBList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((LBInfo[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/EnumerateLB", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public DetailedLBResults EnumerateLB(System.UInt32 TitleID, System.UInt32 LBID, System.UInt32 StartIndex, System.UInt32 MaxEntries, out System.UInt32 ValidSeconds) {
        object[] results = this.Invoke("EnumerateLB", new object[] {
                    TitleID,
                    LBID,
                    StartIndex,
                    MaxEntries});
        ValidSeconds = ((System.UInt32)(results[1]));
        return ((DetailedLBResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginEnumerateLB(System.UInt32 TitleID, System.UInt32 LBID, System.UInt32 StartIndex, System.UInt32 MaxEntries, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("EnumerateLB", new object[] {
                    TitleID,
                    LBID,
                    StartIndex,
                    MaxEntries}, callback, asyncState);
    }
    
    /// <remarks/>
    public DetailedLBResults EndEnumerateLB(System.IAsyncResult asyncResult, out System.UInt32 ValidSeconds) {
        object[] results = this.EndInvoke(asyncResult);
        ValidSeconds = ((System.UInt32)(results[1]));
        return ((DetailedLBResults)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/GetLBNearGamerTag", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public DetailedLBResults GetLBNearGamerTag(System.UInt32 TitleID, System.UInt32 LBID, string GamerTag, System.UInt32 NumAbove, System.UInt32 NumBelow, out System.UInt32 ValidSeconds) {
        object[] results = this.Invoke("GetLBNearGamerTag", new object[] {
                    TitleID,
                    LBID,
                    GamerTag,
                    NumAbove,
                    NumBelow});
        ValidSeconds = ((System.UInt32)(results[1]));
        return ((DetailedLBResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetLBNearGamerTag(System.UInt32 TitleID, System.UInt32 LBID, string GamerTag, System.UInt32 NumAbove, System.UInt32 NumBelow, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLBNearGamerTag", new object[] {
                    TitleID,
                    LBID,
                    GamerTag,
                    NumAbove,
                    NumBelow}, callback, asyncState);
    }
    
    /// <remarks/>
    public DetailedLBResults EndGetLBNearGamerTag(System.IAsyncResult asyncResult, out System.UInt32 ValidSeconds) {
        object[] results = this.EndInvoke(asyncResult);
        ValidSeconds = ((System.UInt32)(results[1]));
        return ((DetailedLBResults)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/GetLBForGamerTags", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public LBResults GetLBForGamerTags(System.UInt32 TitleID, System.UInt32 LBID, string[] GamerTagList, out System.UInt32 ValidSeconds) {
        object[] results = this.Invoke("GetLBForGamerTags", new object[] {
                    TitleID,
                    LBID,
                    GamerTagList});
        ValidSeconds = ((System.UInt32)(results[1]));
        return ((LBResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetLBForGamerTags(System.UInt32 TitleID, System.UInt32 LBID, string[] GamerTagList, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLBForGamerTags", new object[] {
                    TitleID,
                    LBID,
                    GamerTagList}, callback, asyncState);
    }
    
    /// <remarks/>
    public LBResults EndGetLBForGamerTags(System.IAsyncResult asyncResult, out System.UInt32 ValidSeconds) {
        object[] results = this.EndInvoke(asyncResult);
        ValidSeconds = ((System.UInt32)(results[1]));
        return ((LBResults)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/GetLBDetailsForGamerTags", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public DetailedLBResults GetLBDetailsForGamerTags(System.UInt32 TitleID, System.UInt32 LBID, string[] GamerTagList, out System.UInt32 ValidSeconds) {
        object[] results = this.Invoke("GetLBDetailsForGamerTags", new object[] {
                    TitleID,
                    LBID,
                    GamerTagList});
        ValidSeconds = ((System.UInt32)(results[1]));
        return ((DetailedLBResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetLBDetailsForGamerTags(System.UInt32 TitleID, System.UInt32 LBID, string[] GamerTagList, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLBDetailsForGamerTags", new object[] {
                    TitleID,
                    LBID,
                    GamerTagList}, callback, asyncState);
    }
    
    /// <remarks/>
    public DetailedLBResults EndGetLBDetailsForGamerTags(System.IAsyncResult asyncResult, out System.UInt32 ValidSeconds) {
        object[] results = this.EndInvoke(asyncResult);
        ValidSeconds = ((System.UInt32)(results[1]));
        return ((DetailedLBResults)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Stats/EnumerateLBRaw", RequestNamespace="http://websvc.xboxlive.com/Stats/", ResponseNamespace="http://websvc.xboxlive.com/Stats/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public RawLBResults EnumerateLBRaw(System.UInt32 TitleID, System.UInt32 LBID, System.UInt32 StartIndex, System.UInt32 MaxEntries, out System.UInt32 ValidSeconds) {
        object[] results = this.Invoke("EnumerateLBRaw", new object[] {
                    TitleID,
                    LBID,
                    StartIndex,
                    MaxEntries});
        ValidSeconds = ((System.UInt32)(results[1]));
        return ((RawLBResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginEnumerateLBRaw(System.UInt32 TitleID, System.UInt32 LBID, System.UInt32 StartIndex, System.UInt32 MaxEntries, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("EnumerateLBRaw", new object[] {
                    TitleID,
                    LBID,
                    StartIndex,
                    MaxEntries}, callback, asyncState);
    }
    
    /// <remarks/>
    public RawLBResults EndEnumerateLBRaw(System.IAsyncResult asyncResult, out System.UInt32 ValidSeconds) {
        object[] results = this.EndInvoke(asyncResult);
        ValidSeconds = ((System.UInt32)(results[1]));
        return ((RawLBResults)(results[0]));
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
public class LBInfo {
    
    /// <remarks/>
    public System.UInt32 LBID;
    
    /// <remarks/>
    public int ResetType;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
    public LocalizedName[] LocalizedLBName;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
    public LBAttributeInfo[] AttributeInfo;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
public class LocalizedName {
    
    /// <remarks/>
    public string Locale;
    
    /// <remarks/>
    public string Name;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
public class RawLBAttribute {
    
    /// <remarks/>
    public System.UInt32 ID;
    
    /// <remarks/>
    public object V;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
public class RawLBEntry {
    
    /// <remarks/>
    public string G;
    
    /// <remarks/>
    public System.UInt32 R;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
    public RawLBAttribute[] A;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
public class RawLBResults {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
    public RawLBEntry[] Entries;
    
    /// <remarks/>
    public System.DateTime LBLastResetDate;
    
    /// <remarks/>
    public System.UInt32 TotalLBEntries;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
public class LBEntry {
    
    /// <remarks/>
    public string G;
    
    /// <remarks/>
    public System.UInt32 R;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
public class LBResults {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
    public LBEntry[] Entries;
    
    /// <remarks/>
    public System.DateTime LBLastResetDate;
    
    /// <remarks/>
    public System.UInt32 TotalLBEntries;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
public class LBEntryAttribute {
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public string V;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
public class DetailedLBEntry {
    
    /// <remarks/>
    public string G;
    
    /// <remarks/>
    public System.UInt32 R;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
    public LBEntryAttribute[] F;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
public class DetailedLBResults {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
    public DetailedLBEntry[] Entries;
    
    /// <remarks/>
    public System.DateTime LBLastResetDate;
    
    /// <remarks/>
    public System.UInt32 TotalLBEntries;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
public class LBAttributeInfo {
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public AttributeUnit Unit;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
    public LocalizedName[] LocalizedAttrName;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Stats/")]
public enum AttributeUnit {
    
    /// <remarks/>
    Integer,
    
    /// <remarks/>
    Float,
    
    /// <remarks/>
    Percent,
    
    /// <remarks/>
    GamerTag,
    
    /// <remarks/>
    TimeStamp,
    
    /// <remarks/>
    MilliSeconds,
    
    /// <remarks/>
    TenMilliSeconds,
    
    /// <remarks/>
    HundredMilliSeconds,
    
    /// <remarks/>
    Seconds,
    
    /// <remarks/>
    Minutes,
    
    /// <remarks/>
    Hours,
    
    /// <remarks/>
    Days,
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WireDataTest\StressSimple.cs ===
using System;
using ServerTestFramework;
using System.IO;

namespace WireDataTest
{
	#region Complex WD class tests
	public class StressWD1 : WireData
	{
		public byte a = 0;							// 1
		public ulong b;								// 8
		[WireInfo(ArraySize=10)] public string c;	// 10
		public int d;								// 4
		[WireInfo(SizeParam="a")] public int[] e;	// 20
		[WireInfo(ArraySize=2)] public byte[] f;	// 2
		[WireInfo(ArraySize=3)] public string g;	// 3
		public DateTime h;							// 8
		public uint iLen = 0;						// 4
		public string i;							// 3
		public int jLen = 0;						// 4
		public string j = null;						// 0
													// = 67

		public static StressWD1 GenerateExample()
		{
			StressWD1 wd = new StressWD1();
			
			wd.b = 0xFAFAFFFFFAFA1234;
			wd.c = "hello";
			wd.d = 0x4ADA1234;
			wd.e = new int[5] {5, 6, 7, 8, 9};
			wd.f = new byte[2] {10, 11};
			wd.h = new DateTime(2002, 9, 20);
			wd.i = "bye";

			return wd;
		}
	}
	#endregion

	#region Direct XSig serialization class (XSigFast)
	public class XSigFast : XSignature
	{
		public override WireData ReadStream(Stream stream)
		{
			BinaryReader br = new BinaryReader(stream);

			signatureVersion = br.ReadInt16();
			keyVersion = br.ReadInt16();
			serviceID = br.ReadUInt32();
			timeStamp = br.ReadInt64();
			titleID = br.ReadUInt32();
			titleVersion = br.ReadUInt32();
			machinePuid = br.ReadUInt64();
			
			userPuids = new ulong[4];
			for (int i = 0; i < 4; i++)
				userPuids[i] = br.ReadUInt64();
			
			reserved = new byte[16];
			for (int i = 0; i < 4; i++)
				userPuids[i] = br.ReadByte();

			signature = new byte[20];
			for (int i = 0; i < 4; i++)
				signature[i] = br.ReadByte();

			return this;
		}

		public override void WriteStream(Stream stream)
		{
			// Create the writer, uses UTF8 encoding by default
			BinaryWriter bw = new BinaryWriter(stream);

			bw.Write(signatureVersion);
			bw.Write(keyVersion);
			bw.Write(serviceID);
			bw.Write(timeStamp);
			bw.Write(titleID);
			bw.Write(titleVersion);
			bw.Write(machinePuid);
			for (int i = 0; i < 4; i++)
				bw.Write(userPuids[i]);
			for (int i = 0; i < 16; i++)
				bw.Write(reserved[i]);
			for (int i = 0; i < 20; i++)
				bw.Write(signature[i]);
		}
	}
	#endregion

    [StressInstantiate]
	[StressTest(Priority=1)]
	public class StressSerialize : TestBase
	{
		static private WireData wd;
		static private int size;

		static StressSerialize()
		{
			wd = new XSignature();
			size = wd.Size();
		}

		protected virtual XSignature GetXSignature() {return new XSignature();}

		protected override void Execute()
		{
			byte[] b = (byte[])GetXSignature();
			Check(b.Length == size);

			ResultCode=TEST_RESULTS.PASSED;
		}
	}

    [StressInstantiate]
	[StressTest(Priority=1)]
	public class StressDeserialize : TestBase
	{
		static private byte[] data;
		static private int size;

		static StressDeserialize()
		{
			XSignature wd = new XSignature();
			wd.titleID = 0xffc0fe01;
			data = (byte[])wd;
			size = wd.Size();
		}

		protected virtual XSignature GetXSignature() {return new XSignature();}

		protected override void Execute()
		{
			XSignature wd = GetXSignature();
			wd.ReadBytes(data);
			Check(wd.titleID == 0xffc0fe01 && wd.machinePuid == 0xFF09000000000000);

			ResultCode=TEST_RESULTS.PASSED;
		}
	}

	[StressTest(Priority=0)]
	public class StressSerializeFast : StressSerialize
	{
		protected override XSignature GetXSignature() {return new XSigFast();}
	}

	[StressTest(Priority=0)]
	public class StressDeserializeFast : StressDeserialize
	{
		protected override XSignature GetXSignature() {return new XSigFast();}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\NTServiceCases.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using ServerTestFramework;
using xonline.common.config;
using WSMCommon.Control;
using WSMCommon.Control.Command;

namespace WSMonitorTest
{
    /// <summary>
    /// Test Cases to test the NTService of the WSMonitor Tool
    /// </summary>
    [TestGroup, Owner("TrevorM"), Description("Test Cases to test the NTService of the WSMonitor Tool"), TestFrequency("Regression"), EnvRequirement("Manual")]
    class NTServiceCases : TestNode
    {
        /// <summary>
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Start and Cancel a single script"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class CancelSingleScript : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptId = -1;
                long RunId;
                DateTime Start = DateTime.UtcNow;
                CommandStatus commandStatus;
                BeginCase("CancelSingleScript");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestScriptReportedCancel.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    ScriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId);

                    RunId = RunScript(ScriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", RunId);

                    _report.Debug("Waiting for Running");
                    commandStatus = WaitForRunning(RunId);
                    CancelScript(commandStatus.Command);

                    _report.Debug("Waiting for Command");
                    commandStatus = WaitForCommand(RunId);
                    PrintCommandStateString(commandStatus.Status);
                    if (commandStatus.Status == CommandState.Cancelled)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptId > 0)
                    {
                        string delResult = DeleteScript(ScriptId);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("CancelSingleScript");
            }
        }

        /// <summary>
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Pause and Resume a single script"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class PauseResumeSingleScript : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int scriptId = -1;
                long runId;
                DateTime Start = DateTime.UtcNow;
                CommandStatus commandStatus;
                BeginCase("PauseResumeSingleScript");
                ResultCode = TEST_RESULTS.FAILED;
                bool PauseSucceeded = false;

                string scriptFilename = "PauseResumeSingleScript.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", scriptId);

                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", runId);

                    _report.Debug("Waiting for Running");
                    commandStatus = WaitForRunning(runId);

                    _report.Debug("Pausing Script");
                    PauseScript(commandStatus.Command);
                    _report.Debug("Waiting for Pause");
                    commandStatus = WaitForState(runId, CommandState.Paused);
                    if (commandStatus.Status == CommandState.Paused)
                    {
                        PauseSucceeded = true;
                    }

                    _report.Debug("Resuming Script");
                    ResumeScript(commandStatus.Command);

                    _report.Debug("Waiting for Command");
                    commandStatus = WaitForCommand(runId, DefaultTimeout * 2);
                    if ((IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                        && ( PauseSucceeded == true))
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        string delResult = DeleteScript(scriptId);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("PauseResumeSingleScript");
            }
        }

        /// <summary>
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Tests the Cancel all Running scripts feature"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class CancelAllScripts : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int scriptId1 = -1;
                int scriptId2 = -1;
                long runId1, runId2;
                ScriptInstance scriptInstance1;
                DateTime Start = DateTime.UtcNow;
                CommandStatus commandStatus;
                bool scriptCancelled = false;
                BeginCase("CancelAllScripts");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestScriptReportedCancel.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    scriptId1 = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", scriptId1);
                    scriptId2 = AddScriptFile(TestNoOpScript, testEnvironments);
                    _report.Debug("AddScript Result2 = {0}", scriptId2);

                    runId1 = RunScript(scriptId1, testEnvironments);
                    _report.Debug("RunScript Result = {0}", runId1);
                    runId2 = RunScriptWithoutRebuild(scriptId2, testEnvironments);
                    _report.Debug("RunScript Result = {0}", runId2);

                    _report.Debug("Waiting for Running");
                    commandStatus = WaitForRunning(runId1);
                    // Cancel all scripts once the first starts running
                    // There is a slight delay from when the script starts running to when the script instance is created
                    System.Threading.Thread.Sleep(1000);
                    scriptInstance1 = GetScriptInstance(commandStatus.Command);
                    _report.Debug("EnvironmentInstance = {0}", scriptInstance1.EnvironmentInstance);

                    _report.Debug("Cancelling all Scripts");
                    CancelEnvironmentScripts(scriptInstance1.EnvironmentInstance);

                    _report.Debug("Waiting for Command1");
                    commandStatus = WaitForCommand(runId1);
                    PrintCommandStateString(commandStatus.Status);
                    if (commandStatus.Status == CommandState.Cancelled)
                    {
                        scriptCancelled = true;
                    }
                    _report.Debug("Waiting for Command2");
                    commandStatus = WaitForCommand(runId2);
                    PrintCommandStateString(commandStatus.Status);
                    if ((commandStatus.Status == CommandState.Cancelled)
                        && (scriptCancelled == true))
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId1 > 0)
                    {
                        string delResult = DeleteScript(scriptId1);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                    //Cleanup - Delete the Script
                    if (scriptId2 > 0)
                    {
                        string delResult = DeleteScript(scriptId2);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("CancelAllScripts");
            }
        }

        /// <summary>
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Tests the Pause/Resume all scripts feature"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class PauseResumeAllScripts : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int scriptId1 = -1;
                int scriptId2 = -1;
                long runId1, runId2;
                ScriptInstance scriptInstance1;
                DateTime Start = DateTime.UtcNow;
                CommandStatus commandStatus1, commandStatus2;
                BeginCase("PauseResumeAllScripts");
                ResultCode = TEST_RESULTS.FAILED;
                bool PauseSucceeded = false;

                string scriptFilename = "PauseResumeSingleScript.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    scriptId1 = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", scriptId1);
                    scriptId2 = AddScriptFile(TestNoOpScript, testEnvironments);
                    _report.Debug("AddScript Result2 = {0}", scriptId2);

                    runId1 = RunScript(scriptId1, testEnvironments);
                    _report.Debug("RunScript Result = {0}", runId1);
                    runId2 = RunScriptWithoutRebuild(scriptId2, testEnvironments);
                    _report.Debug("RunScript Result2 = {0}", runId2);

                    _report.Debug("Waiting for Running");
                    commandStatus1 = WaitForRunning(runId1);
                    // There is a slight delay from when the script starts running to when the script instance is created
                    System.Threading.Thread.Sleep(1000);
                    scriptInstance1 = GetScriptInstance(commandStatus1.Command);
                    _report.Debug("EnvironmentInstance = {0}", scriptInstance1.EnvironmentInstance);

                    _report.Debug("Pausing All Scripts");
                    PauseEnvironmentScripts(scriptInstance1.EnvironmentInstance);
                    _report.Debug("Waiting for Script1 Pause");
                    commandStatus1 = WaitForState(runId1, CommandState.Paused);
                    _report.Debug("Waiting for Script2 Pause");
                    commandStatus2 = WaitForState(runId2, CommandState.Paused);
                    if ((commandStatus1.Status == CommandState.Paused)
                        && (commandStatus2.Status == CommandState.Paused))
                    {
                        _report.Info("Both Scripts Paused");
                        PauseSucceeded = true;
                    }

                    _report.Debug("Resuming Script");
                    ResumeEnvironmentScripts(scriptInstance1.EnvironmentInstance);

                    _report.Debug("Waiting for Command1");
                    commandStatus1 = WaitForCommand(runId1, DefaultTimeout * 2);
                    PrintCommandStateString(commandStatus1.Status);
                    _report.Debug("Waiting for Command2");
                    commandStatus2 = WaitForCommand(runId2);
                    PrintCommandStateString(commandStatus2.Status);
                    if ((IsPassingCompleteState(commandStatus1.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                        && (IsPassingCompleteState(commandStatus2.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                        && (PauseSucceeded == true))
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId1 > 0)
                    {
                        string delResult = DeleteScript(scriptId1);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("PauseResumeAllScripts");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies that modifying environment strings hold
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies that modifying environment strings hold"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ModifyEnvironment_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int environmentId = -1;
                EnvironmentInformation environmentInfo;
                string environmentName = "ModifyEnvironment";
                string environmentDescription = "Modify Environment Description";
                string environmentVersion = "1.0.0.1";
                string environmentHost = "localhost";
                BeginCase("ModifyEnvironment_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                try
                {
                    //Add new environement
                    environmentId = AddEnvironment(environmentName, environmentVersion, environmentHost, environmentDescription, _testAspectGroup1, _generalAspectGroup1);
                    _report.Debug("environmentId = {0}", environmentId);

                    //Verify Initial Values
                    ResultCode = TEST_RESULTS.PASSED;
                    environmentInfo = GetEnvironment(environmentId);
                    if (environmentInfo.Name != environmentName)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Initial Environment Name doesn't match");
                    }
                    if (environmentInfo.Description != environmentDescription)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Initial Environment Description doesn't match");
                    }
                    if (environmentInfo.Version != environmentVersion)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Initial Environment Version doesn't match");
                    }
                    if (environmentInfo.Host != environmentHost)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Initial Environment Host doesn't match");
                    }

                    //Modify Environment
                    environmentName = "ModifiedEnvironment";
                    environmentDescription = "Modified Environment Description";
                    environmentVersion = "2.0.0.2";
                    environmentHost = "127.0.0.1";
                    int resultCode = UpdateEnvironment(environmentId, environmentName, environmentVersion, environmentHost, environmentDescription, -1, -1);

                    //Verify Modified Values
                    environmentInfo = GetEnvironment(environmentId);
                    if (environmentInfo.Name != environmentName)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Environment Name doesn't match");
                    }
                    if (environmentInfo.Description != environmentDescription)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Environment Description doesn't match");
                    }
                    if (environmentInfo.Version != environmentVersion)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Environment Version doesn't match");
                    }
                    if (environmentInfo.Host != environmentHost)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Environment Host doesn't match");
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (environmentId > 0)
                    {
                        DeleteEnvironment(environmentId);
                    }
                }

                EndCase("ModifyEnvironment_Pos");
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\ScriptingCases.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using ServerTestFramework;
using xonline.common.config;
using WSMCommon.Control;
using WSMCommon.Control.Command;

namespace WSMonitorTest
{
    [TestGroup, Owner("TrevorM"), Description("Test Cases to test the General scripting functionality of the WSMonitor Framework"), TestFrequency("Regression"), EnvRequirement("Manual")]
    class ScriptingCases : TestNode
    {
        /// <summary>
        /// DVT Case:
        /// Runs a basic (sleep) script and returns
        /// </summary>
        [TestCase, DVT, Owner("TrevorM"), Description("Runs a basic (sleep) script and returns"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class RunTestScript : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptId = -1;
                long RunId;
                DateTime Start = DateTime.UtcNow;
                CommandState commandState = CommandState.Unknown;
                BeginCase("RunTestScript");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "Demo.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    ScriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId);

                    RunId = RunScript(ScriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", RunId);

                    _report.Debug("Waiting for complete");
                    while (commandState != CommandState.Completed)
                    {
                        TimeSpan Elapsed = DateTime.UtcNow - Start;
                        if (Elapsed.TotalMilliseconds > DefaultTimeout)
                            throw new TimeoutException();
                        System.Threading.Thread.Sleep(1000);

                        commandState = GetCommandStatus(RunId);
                        PrintCommandStateString(commandState);
                        if (IsPassingCompleteState(commandState, WSMonitor.Framework.Scripting.ScriptType.Test))
                            ResultCode = TEST_RESULTS.PASSED;
                        if (FinalStateAttribute.IsFinal(commandState))
                            break;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptId > 0)
                    {
                        string delResult = DeleteScript(ScriptId);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("RunTestScript");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies Global State can be referenced between scripts
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies Global State can be referenced between scripts"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GlobalStateTest : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int TestScriptId = -1;
                int GeneralScriptId = -1;
                long RunId;
                CommandStatus commandStatus;
                BeginCase("GlobalStateTest");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptTestFilename = "GlobalStateTestScript.cs";
                string scriptGenFilename = "GlobalStateGeneralScript.cs";
                // Depricated - string scriptUtilFilename = "GlobalStateUtilityScript.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    TestScriptId = AddScriptFile(scriptTestFilename, testEnvironments);
                    _report.Debug("Test: AddScript Result = {0}", TestScriptId);
                    GeneralScriptId = AddScriptFile(scriptGenFilename, testEnvironments);
                    _report.Debug("General: AddScript Result = {0}", GeneralScriptId);

                    RunId = RunScript(TestScriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", RunId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(RunId);
                    PrintCommandStateString(commandStatus.Status);
                    if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (TestScriptId > 0)
                    {
                        string delResult = DeleteScript(TestScriptId);
                        _report.Debug("Test: DeleteScript Result = {0}", delResult);
                    }
                    if (GeneralScriptId > 0)
                    {
                        string delResult = DeleteScript(GeneralScriptId);
                        _report.Debug("General: DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("GlobalStateTest");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies that a bool return is allowed for a Native.Start Test Script
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies that a bool return is allowed for a Native.Start Test Script"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestNativeStartBoolReturn_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("TestNativeStartBoolReturn_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestNativeStartBoolReturn.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("TestNativeStartBoolReturn_Pos");
            }
        }

        /// <summary>
        /// Negative Case:
        /// Verifies that a non-bool return is not allowed for a Native.Start Test Script
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies that a non-bool return is not allowed for a Native.Start Test Script"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestNativeStartNonBoolReturn_Neg : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("TestNativeStartNonBoolReturn_Neg");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestNativeStartNonBoolReturn.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (commandStatus.Status == CommandState.Exception)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("TestNativeStartNonBoolReturn_Neg");
            }
        }

        /// <summary>
        /// Negative Case:
        /// Verifies that parameters cannot be passed to a Native.Start Test Script
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies that parameters cannot be passed to a Native.Start Test Script"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestNativeStartParameters_Neg : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("TestNativeStartParameters_Neg");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestNativeStartParameters.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (commandStatus.Status == CommandState.Exception)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("TestNativeStartParameters_Neg");
            }
        }

        /// <summary>
        /// Negative Case:
        /// Verifies that invalid script types (such as the depricated Utility) do not run
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies that invalid script types (such as the depricated Utility) do not run"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class InvalidScriptType_Neg : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("InvalidScriptType_Neg");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = UtilityNoOpScript;
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (commandStatus.Status == CommandState.Error)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("InvalidScriptType_Neg");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies that modifying script strings hold
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies that modifying script strings hold"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ModifyScript_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int scriptId = -1;
                ScriptInformation scriptInfo;
                BeginCase("ModifyScript_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = TestNoOpScript;
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;


                try
                {
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId);

                    //Verify initial values
                    ResultCode = TEST_RESULTS.PASSED;
                    scriptInfo = GetScript(_testEnvironment1, scriptId);
                    if (scriptInfo.Alias != GetAliasFromScriptFileName(scriptFilename))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Initial Script Alias doesn't match");
                    }
                    if (scriptInfo.SourceCode != ReadScriptFile(scriptFilename))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Initial Script Code doesn't match");
                    }

                    //Mofify Values
                    string newAlias = "NewScriptAlias";
                    string newScript = "// New Test Code is empty";
                    int resultCode = UpdateScript(scriptId, newAlias, newScript, testEnvironments);

                    //Verify modified values
                    scriptInfo = GetScript(_testEnvironment1, scriptId);
                    if (scriptInfo.Alias != newAlias)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Script Alias doesn't match");
                    }
                    if (scriptInfo.SourceCode != newScript)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Script Code doesn't match");
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        DeleteScript(scriptId);
                    }
                }

                EndCase("ModifyScript_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies that modifying script Period/Flag hold
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies that modifying script Period/Flag hold"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ModifyScriptPeriodFlag_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int scriptId = -1;
                ScriptInformation scriptInfo;
                BeginCase("ModifyScriptPeriodFlag_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = TestNoOpScript;
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;


                try
                {
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId);

                    //Verify Initial
                    ResultCode = TEST_RESULTS.PASSED;
                    scriptInfo = GetScript(_testEnvironment1, scriptId);
                    if ((scriptInfo.Period.HasValue != true) || (scriptInfo.Period.Value != 0))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Initial Period doesn't match expected: {0}", scriptInfo.Period.Value);
                    }
                    if ((scriptInfo.Flag.HasValue != true) || (scriptInfo.Flag.Value != 0))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Initial Flag doesn't match expected: {0}", scriptInfo.Flag.Value);
                    }

                    // Update to new value and verify
                    int newPeriod = 180000;
                    int newFlag = 2;
                    int resultCode = UpdateScriptPeriodFlag(scriptId, testEnvironments, newPeriod, newFlag);
                    _report.Debug("UpdateScriptPeriodFlag returned = {0}", resultCode);

                    scriptInfo = GetScript(_testEnvironment1, scriptId);
                    if ((scriptInfo.Period.HasValue != true) || (scriptInfo.Period.Value != newPeriod))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Period doesn't match expected: {0}", scriptInfo.Period.Value);
                    }
                    if ((scriptInfo.Flag.HasValue != true) || (scriptInfo.Flag.Value != newFlag))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Flag doesn't match expected: {0}", scriptInfo.Flag.Value);
                    }

                    // Restore to 0 and verify
                    newPeriod = 0;
                    newFlag = 0;
                    resultCode = UpdateScriptPeriodFlag(scriptId, testEnvironments, newPeriod, newFlag);
                    _report.Debug("UpdateScriptPeriodFlag returned = {0}", resultCode);

                    scriptInfo = GetScript(_testEnvironment1, scriptId);
                    if ((scriptInfo.Period.HasValue != true) || (scriptInfo.Period.Value != newPeriod))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Period doesn't match expected: {0}", scriptInfo.Period.Value);
                    }
                    if ((scriptInfo.Flag.HasValue != true) || (scriptInfo.Flag.Value != newFlag))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Flag doesn't match expected: {0}", scriptInfo.Flag.Value);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        DeleteScript(scriptId);
                    }
                }

                EndCase("ModifyScriptPeriodFlag_Pos");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\ReportingCases.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using ServerTestFramework;
using xonline.common.config;
using WSMCommon.Control;
using WSMCommon.Control.Command;
using WSMonitor.Framework.Reporting;
using WSMReport = WSMonitor.Framework.Reporting.Report;

namespace WSMonitorTest
{
    /// <summary>
    /// Test Cases to test the Reporting functionality of the WSMonitor Framework
    /// </summary>
    [TestGroup, Owner("TrevorM"), Description("Test Cases to test the Reporting functionality of the WSMonitor Framework"), TestFrequency("Regression"), EnvRequirement("Manual")]
    class ReportingCases : TestNode
    {
        /// <summary>
        /// Positive Case:
        /// Verifies the output of a Test Script is monitored
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies the output of a Test Script is monitored"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestScriptOutputMonitored_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId1 = -1;
                long runId;
                BeginCase("TestScriptOutputMonitored_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = TestNoOpScript;
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId1 = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId1);

                    // Run Script
                    runId = RunScript(scriptId1, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if ((commandStatus.Status == CommandState.Success)
                        || (commandStatus.Status == CommandState.Failed))
                    {
                        // If the main Test report has passed or failed then the output (return bool) was monitored
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId1 > 0)
                    {
                        DeleteScript(scriptId1);
                    }
                }
                EndCase("TestScriptOutputMonitored_Pos");
            }
        }

        /// <summary>
        /// Negative Case:
        /// Verifies the output of a General Script is not monitored
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies the output of a General Script is not monitored"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GeneralScriptOutputMonitored_Neg : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId1 = -1;
                long runId;
                BeginCase("GeneralScriptOutputMonitored_Neg");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = GeneralNoOpScript;
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId1 = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId1);

                    // Run Script
                    runId = RunScript(scriptId1, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if ((commandStatus.Status == CommandState.Success)
                        || (commandStatus.Status == CommandState.Failed))
                    {
                        _report.Error("A General Script should not return success or failure, only complete");
                    }
                    else if (commandStatus.Status == CommandState.Completed)
                    {
                        // If the general Test output has success or failed then the output (return bool) was monitored
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId1 > 0)
                    {
                        DeleteScript(scriptId1);
                    }
                }
                EndCase("GeneralScriptOutputMonitored_Neg");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a Test Script can call Reporting API's
        /// </summary>
        [TestCase, DVT, Owner("TrevorM"), Description("Verifies a Test Script can call Reporting API's"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestScriptReportLoggingSupport_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId1 = -1;
                int scriptId2 = -1;
                long runId;
                BeginCase("TestScriptReportLoggingSupport_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestScriptReportLoggingSupport.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId1 = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId1);
                    scriptId2 = AddScriptFile(TestNoOpScript, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId2);

                    // Run Script
                    runId = RunScript(scriptId1, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        if (testReport.Children.Length > 0)
                        {
                            // If the main Test report has a child then the child (no-op) script was logged
                            ResultCode = TEST_RESULTS.PASSED;
                        }
                        else
                        {
                            _report.Error("testReport.Children.Length = {0}", testReport.Children.Length.ToString());
                        }
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId1 > 0)
                    {
                        DeleteScript(scriptId1);
                    }
                    //Cleanup - Delete the Script
                    if (scriptId2 > 0)
                    {
                        DeleteScript(scriptId2);
                    }
                }
                EndCase("TestScriptReportLoggingSupport_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a General Script can call Reporting API's
        /// </summary>
        [TestCase, DVT, Owner("TrevorM"), Description("Verifies a General Script can call Reporting API's"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GeneralScriptReportLoggingSupport_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId1 = -1;
                int scriptId2 = -1;
                long runId;
                BeginCase("GeneralScriptReportLoggingSupport_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "GeneralScriptReportLoggingSupport.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId1 = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId1);
                    scriptId2 = AddScriptFile(GeneralNoOpScript, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId2);

                    // Run Script
                    runId = RunScript(scriptId1, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.General))
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        if (testReport.Children.Length > 0)
                        {
                            // If the main Test report has a child then the child (no-op) script was logged
                            ResultCode = TEST_RESULTS.PASSED;
                        }
                        else
                        {
                            _report.Error("testReport.Children.Length = {0}", testReport.Children.Length.ToString());
                        }
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId1 > 0)
                    {
                        DeleteScript(scriptId1);
                    }
                    //Cleanup - Delete the Script
                    if (scriptId2 > 0)
                    {
                        DeleteScript(scriptId2);
                    }
                }
                EndCase("GeneralScriptReportLoggingSupport_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Run a Test script with full Reporting of Result: Success
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Run a Test script with full Reporting of Result: Success"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestScriptReportedSuccess_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId = -1;
                long runId;
                BeginCase("TestScriptReportedSuccess_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestScriptReportedSuccess.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId);

                    // Run Script
                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if (commandStatus.Status == CommandState.Success)
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        ResultCode = ValidateExecutionReport(testProxy, WSMonitor.Framework.Reporting.ResultCode.Success);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        DeleteScript(scriptId);
                    }
                }
                EndCase("TestScriptReportedSuccess_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Run a Test script with full Reporting of Result: Failure
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Run a Test script with full Reporting of Result: Failure"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestScriptReportedFailure_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId = -1;
                long runId;
                BeginCase("TestScriptReportedFailure_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestScriptReportedFailure.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId);

                    // Run Script
                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if (commandStatus.Status == CommandState.Failed)
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        ResultCode = ValidateExecutionReport(testProxy, WSMonitor.Framework.Reporting.ResultCode.Failed);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        DeleteScript(scriptId);
                    }
                }
                EndCase("TestScriptReportedFailure_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Run a Test script with full Reporting of Result: Exception
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Run a Test script with full Reporting of Result: Exception"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestScriptReportedException_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId = -1;
                long runId;
                BeginCase("TestScriptReportedException_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestScriptReportedException.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId);

                    // Run Script
                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if (commandStatus.Status == CommandState.Exception)
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        ResultCode = ValidateExecutionReport(testProxy, WSMonitor.Framework.Reporting.ResultCode.Exception);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        DeleteScript(scriptId);
                    }
                }
                EndCase("TestScriptReportedException_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Run a Test script with full Reporting of Result: Cancelled
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Run a Test script with full Reporting of Result: Cancelled"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestScriptReportedCancel_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId = -1;
                long runId;
                BeginCase("TestScriptReportedCancel_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestScriptReportedCancel.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId);

                    // Run Script
                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForRunning(runId);

                    // Cancel command
                    CancelScript(commandStatus.Command);
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if (commandStatus.Status == CommandState.Cancelled)
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        ResultCode = ValidateExecutionReport(testProxy, WSMonitor.Framework.Reporting.ResultCode.Cancel);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        DeleteScript(scriptId);
                    }
                }
                EndCase("TestScriptReportedCancel_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Run a Test script with full Reporting of Result: Finished
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Run a Test script with full Reporting of Result: Finished"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestScriptReportedFinished_Neg : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId = -1;
                long runId;
                BeginCase("TestScriptReportedFinished_Neg");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestScriptReportedFinished.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId);

                    // Run Script
                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        // Finished is not a valid return for a test script.
                        if ((testProxy.ExecutionResult != WSMonitor.Framework.Reporting.ResultCode.Finished)
                            && (testProxy.ExecutionStart > DateTime.MinValue)
                            && (testProxy.ExecutionDuration > 0)
                            && (String.IsNullOrEmpty(testProxy.Name) == false))
                        {
                            ResultCode = TEST_RESULTS.PASSED;
                        }
                        else
                        {
                            _report.Error("testProxy.ExecutionResult = {0}", testProxy.ExecutionResult.ToString());
                            _report.Error("testProxy.ExecutionStart = {0}", testProxy.ExecutionStart.ToString());
                            _report.Error("testProxy.ExecutionDuration = {0}", testProxy.ExecutionDuration.ToString());
                            _report.Error("testProxy.Name = {0}", testProxy.Name);
                        }
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        DeleteScript(scriptId);
                    }
                }
                EndCase("TestScriptReportedFinished_Neg");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Run a General script with full Reporting of Result: Success
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Run a General script with full Reporting of Result: Success"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GeneralScriptReportedSuccess_Neg : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId = -1;
                long runId;
                BeginCase("GeneralScriptReportedSuccess_Neg");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "GeneralScriptReportedSuccess.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId);

                    // Run Script
                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.General))
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        // Success is not a valid return for a general script.
                        if ((testProxy.ExecutionResult != WSMonitor.Framework.Reporting.ResultCode.Success)
                            && (testProxy.ExecutionStart > DateTime.MinValue)
                            && (testProxy.ExecutionDuration > 0)
                            && (String.IsNullOrEmpty(testProxy.Name) == false))
                        {
                            ResultCode = TEST_RESULTS.PASSED;
                        }
                        else
                        {
                            _report.Error("testProxy.ExecutionResult = {0}", testProxy.ExecutionResult.ToString());
                            _report.Error("testProxy.ExecutionStart = {0}", testProxy.ExecutionStart.ToString());
                            _report.Error("testProxy.ExecutionDuration = {0}", testProxy.ExecutionDuration.ToString());
                            _report.Error("testProxy.Name = {0}", testProxy.Name);
                        }
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        DeleteScript(scriptId);
                    }
                }
                EndCase("GeneralScriptReportedSuccess_Neg");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Run a General script with full Reporting of Result: Failure
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Run a General script with full Reporting of Result: Failure"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GeneralScriptReportedFailure_Neg : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId = -1;
                long runId;
                BeginCase("GeneralScriptReportedFailure_Neg");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "GeneralScriptReportedFailure.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId);

                    // Run Script
                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.General))
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        // Failure is not a valid return for a general script.
                        if ((testProxy.ExecutionResult != WSMonitor.Framework.Reporting.ResultCode.Failed)
                            && (testProxy.ExecutionStart > DateTime.MinValue)
                            && (testProxy.ExecutionDuration > 0)
                            && (String.IsNullOrEmpty(testProxy.Name) == false))
                        {
                            ResultCode = TEST_RESULTS.PASSED;
                        }
                        else
                        {
                            _report.Error("testProxy.ExecutionResult = {0}", testProxy.ExecutionResult.ToString());
                            _report.Error("testProxy.ExecutionStart = {0}", testProxy.ExecutionStart.ToString());
                            _report.Error("testProxy.ExecutionDuration = {0}", testProxy.ExecutionDuration.ToString());
                            _report.Error("testProxy.Name = {0}", testProxy.Name);
                        }
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        DeleteScript(scriptId);
                    }
                }
                EndCase("GeneralScriptReportedFailure_Neg");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Run a General script with full Reporting of Result: Exception
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Run a General script with full Reporting of Result: Exception"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GeneralScriptReportedException_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId = -1;
                long runId;
                BeginCase("GeneralScriptReportedException_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "GeneralScriptReportedException.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId);

                    // Run Script
                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if (commandStatus.Status == CommandState.Exception)
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        ResultCode = ValidateExecutionReport(testProxy, WSMonitor.Framework.Reporting.ResultCode.Exception);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        DeleteScript(scriptId);
                    }
                }
                EndCase("GeneralScriptReportedException_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Run a General script with full Reporting of Result: Cancelled
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Run a General script with full Reporting of Result: Cancelled"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GeneralScriptReportedCancelled_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId = -1;
                long runId;
                BeginCase("GeneralScriptReportedCancelled_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "GeneralScriptReportedCancel.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId);

                    // Run Script
                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForRunning(runId);

                    // Cancel command
                    CancelScript(commandStatus.Command);
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if (commandStatus.Status == CommandState.Cancelled)
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        ResultCode = ValidateExecutionReport(testProxy, WSMonitor.Framework.Reporting.ResultCode.Cancel);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        DeleteScript(scriptId);
                    }
                }
                EndCase("GeneralScriptReportedCancelled_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Run a General script with full Reporting of Result: Finished
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Run a General script with full Reporting of Result: Finished"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GeneralScriptReportedFinished_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                int scriptId = -1;
                long runId;
                BeginCase("GeneralScriptReportedFinished_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "GeneralScriptReportedFinished.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Add Script
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId);

                    // Run Script
                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("CommandId = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);

                    if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.General))
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        ResultCode = ValidateExecutionReport(testProxy, WSMonitor.Framework.Reporting.ResultCode.Finished);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        DeleteScript(scriptId);
                    }
                }
                EndCase("GeneralScriptReportedFinished_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Run a Service API with full Reporting of Result: Exception
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Run a Service API with full Reporting of Result: Exception"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ServiceAPIReportedException_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int scriptId = -1;
                long runId;
                CommandStatus commandStatus;
                BeginCase("ServiceAPIReportedException_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "ServiceAPIReportedException.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Services take a long time to build so we'll do it in the constructor
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", scriptId);

                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);
                    // A service is like a general script so a utility script should not be able to call it.
                    if (commandStatus.Status == CommandState.Exception)
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        ResultCode = ValidateExecutionReport(testProxy, WSMonitor.Framework.Reporting.ResultCode.Exception);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        string delResult = DeleteScript(scriptId);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("ServiceAPIReportedException_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Run a Service API with full Reporting of Result: Cancelled
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Run a Service API with full Reporting of Result: Cancelled"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ServiceAPIReportedCancelled_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int scriptId = -1;
                long runId;
                CommandStatus commandStatus;
                BeginCase("ServiceAPIReportedCancelled_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "ServiceAPIReportedCancelled.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Services take a long time to build so we'll do it in the constructor
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", scriptId);

                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForRunning(runId);
                    CancelScript(commandStatus.Command);
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);
                    // A service is like a general script so a utility script should not be able to call it.
                    if (commandStatus.Status == CommandState.Cancelled)
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        ResultCode = ValidateExecutionReport(testProxy, WSMonitor.Framework.Reporting.ResultCode.Cancel);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        string delResult = DeleteScript(scriptId);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("ServiceAPIReportedCancelled_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Run a Service API with full Reporting of Result: Finished
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Run a Service API with full Reporting of Result: Finished"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ServiceAPIReportedFinished_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int scriptId = -1;
                long runId;
                CommandStatus commandStatus;
                BeginCase("ServiceAPIReportedFinished_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "ServiceAPIReportedFinished.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Services take a long time to build so we'll do it in the constructor
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", scriptId);

                    runId = RunScript(scriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", runId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(runId);
                    PrintCommandStateString(commandStatus.Status);
                    // A service is like a general script so a utility script should not be able to call it.
                    if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.General))
                    {
                        WSMReport testReport = GetReport(runId);
                        ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
                        ResultCode = ValidateExecutionReport(testProxy, WSMonitor.Framework.Reporting.ResultCode.Finished);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        string delResult = DeleteScript(scriptId);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("ServiceAPIReportedFinished_Pos");
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\ScriptInteropCases.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using ServerTestFramework;
using xonline.common.config;
using WSMCommon.Control;
using WSMCommon.Control.Command;

namespace WSMonitorTest
{
    /// <summary>
    /// Test cases for the interopability between different script Types (Test, General, Utility)
    /// </summary>
    [TestGroup, Owner("TrevorM"), Description("Test cases for the interopability between different script Types (Test, General, Utility)"), TestFrequency("Regression"), EnvRequirement("Manual")]
    class ScriptInteropCases : TestNode
    {
        /// <summary>
        /// Positive Case:
        /// Verifies a Test Script can call another Test Script
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a Test Script can call another Test Script"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestCallingTest_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("TestCallingTest_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestCallingTest.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunTwoScriptWrapper(scriptFilename, TestNoOpScript, testEnvironments);
                if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("Interop");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a Test Script can call a General Script
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a Test Script can call a General Script"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestCallingGeneral_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("TestCallingGeneral_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestCallingGeneral.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunTwoScriptWrapper(scriptFilename, GeneralNoOpScript, testEnvironments);
                if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("TestCallingGeneral_Pos");
            }
        }

        /// <summary>
        /// Negative Case:
        /// Verifies a General script can not call a Test Script
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a General script can not call a Test Script"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GeneralCallingTest_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("GeneralCallingGeneralCallingTest_PosTest_Neg");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "GeneralCallingTest.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunTwoScriptWrapper(scriptFilename, TestNoOpScript, testEnvironments);
                if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.General))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("GeneralCallingTest_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a General Script can call another General script
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a General Script can call another General script"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GeneralCallingGeneral_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("GeneralCallingGeneral_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "GeneralCallingGeneral.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunTwoScriptWrapper(scriptFilename, GeneralNoOpScript, testEnvironments);
                if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.General))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("GeneralCallingGeneral_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a Test Script can call a Service API
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a Test Script can call a Service API"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestCallingService_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptId = -1;
                long RunId;
                CommandStatus commandStatus;
                BeginCase("TestCallingService_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestCallingService.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Services take a long time to build so we'll do it in the constructor
                    ScriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId);

                    RunId = RunScript(ScriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", RunId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(RunId);
                    PrintCommandStateString(commandStatus.Status);
                    if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptId > 0)
                    {
                        string delResult = DeleteScript(ScriptId);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("TestCallingService_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a General script can call a service API
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a General script can call a service API"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GeneralCallingService_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptId = -1;
                long RunId;
                CommandStatus commandStatus;
                BeginCase("GeneralCallingService_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "GeneralCallingService.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Services take a long time to build so we'll do it in the constructor
                    ScriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId);

                    RunId = RunScript(ScriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", RunId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(RunId);
                    PrintCommandStateString(commandStatus.Status);
                    if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.General))
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptId > 0)
                    {
                        string delResult = DeleteScript(ScriptId);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("GeneralCallingService_Pos");
            }
        }

#region CommonCodeExtensions
        /*
        /// <summary>
        /// Positive Case:
        /// Verifies a Test Script can access Common Code
        /// 
        /// Depricated - JoJohn removed support to call the common code base, only custom extensions can be loaded and called
        /// </summary>
        [TestCase, Owner("TrevorM"), Description(""), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestCallingCommonCode_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("TestCallingCommonCode_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestCallingCommonCode.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (commandStatus.Status == CommandState.Completed)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("TestCallingCommonCode_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a General Script can access Common Code
        /// 
        /// Depricated - JoJohn removed support to call the common code base, only custom extensions can be loaded and called
        /// </summary>
        [TestCase, Owner("TrevorM"), Description(""), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GeneralCallingCommonCode_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("GeneralCallingCommonCode_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "GeneralCallingCommonCode.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (commandStatus.Status == CommandState.Completed)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("GeneralCallingCommonCode_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a Utility Script can access Common Code
        /// 
        /// Depricated - JoJohn removed support to call the common code base, only custom extensions can be loaded and called
        /// </summary>
        [TestCase, Owner("TrevorM"), Description(""), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class UtilityCallingCommonCode_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("UtilityCallingCommonCode_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "UtilityCallingCommonCode.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (commandStatus.Status == CommandState.Completed)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("UtilityCallingCommonCode_Pos");
            }
        }
        */
#endregion CommonCodeExtensions

        /// <summary>
        /// Positive Case:
        /// Verifies a Test Script can access Compiled Test Code
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a Test Script can access Compiled Test Code"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestCallingTestCode_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("TestCallingTestCode_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestCallingTestCode.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;
                // TODO: Add code for loading custom test code for the script to use

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("TestCallingTestCode_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a General Script can access Compiled Test Code
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a General Script can access Compiled Test Code"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GeneralCallingTestCode_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("GeneralCallingTestCode_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "GeneralCallingTestCode.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;
                // TODO: Add code for loading custom test code for the script to use

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.General))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("GeneralCallingTestCode_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a Test Script can throw custom exceptions
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a Test Script can throw custom exceptions"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestCallingExceptions_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("TestCallingExceptions_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestCallingExceptions.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("TestCallingExceptions_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a General Script can throw custom exceptions
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a General Script can throw custom exceptions"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class GeneralCallingExceptions_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("GeneralCallingExceptions_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "GeneralCallingExceptions.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.General))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("GeneralCallingExceptions_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a Test Script can access the Http Compiled Extension Code
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a Test Script can access the Http Compiled Extension Code"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestCallingHttpExt_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("TestCallingHttpExt_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "HttpExtTest.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("TestCallingHttpExt_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a Test Script can access the Idcrl Compiled Extension Code
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a Test Script can access the Idcrl Compiled Extension Code"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestCallingIdcrlExt_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("TestCallingIdcrlExt_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "IdcrlExtTest.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("TestCallingIdcrlExt_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a Test Script can access the xml Compiled Extension Code
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a Test Script can access the xml Compiled Extension Code"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestCallingXmlExt_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("TestCallingXmlExt_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "XmlExtTest.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("TestCallingXmlExt_Pos");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies a Test Script can access the Catalog Compiled Extension Code
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies a Test Script can access the Catalog Compiled Extension Code"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class TestCallingCatalogExt_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                CommandStatus commandStatus;
                BeginCase("TestCallingCatalogExt_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "CatalogExtTest.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                commandStatus = AddRunScriptWrapper(scriptFilename, testEnvironments);
                if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                EndCase("TestCallingCatalogExt_Pos");
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\WSMonitorTest.cs ===
using System;
using ServerTestFramework;

namespace WSMonitorTest
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\ScriptGroupCases.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using ServerTestFramework;
using xonline.common.config;
using WSMCommon.Control;
using WSMCommon.Control.Command;

namespace WSMonitorTest
{
    /// <summary>
    /// Cases:
    /// DVT
    /// Create Empty
    /// Create Single
    /// Add, Remove
    /// Invalid
    /// </summary>
    [TestGroup, Owner("TrevorM"), Description("Test Cases to test the ScriptGroup functionality of the WSMonitor Framework"), TestFrequency("Regression"), EnvRequirement("Manual")]
    class ScriptGroupCases : TestNode
    {
        /// <summary>
        /// Test Case:
        /// Creates a ScriptGroup and runs it
        /// </summary>
        [TestCase, DVT, Owner("TrevorM"), Description("Creates a ScriptGroup and runs it"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ScriptGroupDVT : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptId1 = -1;
                int ScriptId2 = -1;
                int ScriptId3 = -1;
                int ScriptGroupId = -1;
                long RunId;
                CommandStatus[] commandStatusList;
                BeginCase("ScriptGroupDVT");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename1 = "Demo.cs";
                string scriptFilename2 = "TestNoOp.cs";
                string scriptFilename3 = "GeneralNoOp.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    ScriptId1 = AddScriptFile(scriptFilename1, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId1);
                    ScriptId2 = AddScriptFile(scriptFilename2, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId2);
                    ScriptId3 = AddScriptFile(scriptFilename3, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId3);
                    int[] ScriptIds = new int[3] { ScriptId1, ScriptId2, ScriptId3 };
                    ScriptGroupId = AddScriptGroup("DVTScriptGroup", "DVT Script Group", ScriptIds, testEnvironments);
                    _report.Debug("AddScriptGroup Result = {0}", ScriptGroupId);

                    RunId = RunScriptGroup(ScriptGroupId, testEnvironments[0]);
                    _report.Debug("RunScriptGroup Result = {0}", RunId);

                    _report.Debug("Waiting for complete");
                    commandStatusList = WaitForScriptGroup(RunId);
                    ResultCode = TEST_RESULTS.PASSED;
                    foreach (CommandStatus commandStatus in commandStatusList)
                    {
                        //PrintCommandStateString(commandStatus.Status);
                        if (!IsPassingCompleteState(commandStatus.Status))
                        {
                            ResultCode = TEST_RESULTS.FAILED;
                        }
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptGroupId > 0)
                    {
                        string delResult = DeleteScriptGroup(ScriptGroupId);
                        _report.Debug("DeleteScriptGroup Result = {0}", delResult);
                    }
                    if (ScriptId1 > 0)
                    {
                        string delResult = DeleteScript(ScriptId1);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                    if (ScriptId2 > 0)
                    {
                        string delResult = DeleteScript(ScriptId2);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                    if (ScriptId3 > 0)
                    {
                        string delResult = DeleteScript(ScriptId3);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("ScriptGroupDVT");
            }
        }

        /// <summary>
        /// Test Case:
        /// Creates and runs a script group with 0 scripts
        /// </summary>
        [TestCase, DVT, Owner("TrevorM"), Description("Creates and runs a script group with 0 scripts"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class CreateEmptyPos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptGroupId = -1;
                long RunId;
                CommandStatus[] commandStatusList;
                BeginCase("CreateEmpty");
                ResultCode = TEST_RESULTS.FAILED;

                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    int[] ScriptIds = new int[0];
                    ScriptGroupId = AddScriptGroup("EmptyScriptGroup", "Empty Script Group", ScriptIds, testEnvironments);
                    _report.Debug("AddScriptGroup Result = {0}", ScriptGroupId);

                    RunId = RunScriptGroup(ScriptGroupId, testEnvironments[0]);
                    _report.Debug("RunScriptGroup Result = {0}", RunId);

                    _report.Debug("Waiting for complete");
                    commandStatusList = WaitForScriptGroup(RunId);
                    if (commandStatusList == null)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptGroupId > 0)
                    {
                        string delResult = DeleteScriptGroup(ScriptGroupId);
                        _report.Debug("DeleteScriptGroup Result = {0}", delResult);
                    }
                }
                EndCase("CreateEmpty");
            }
        }

        /// <summary>
        /// Test Case:
        /// Creates and runs a script group with 1 script
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Creates and runs a script group with 1 script"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class CreateSinglePos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptId1 = -1;
                int ScriptGroupId = -1;
                long RunId;
                CommandStatus[] commandStatusList;
                BeginCase("CreateSingle");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename1 = "Demo.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    ScriptId1 = AddScriptFile(scriptFilename1, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId1);
                    int[] ScriptIds = new int[1] { ScriptId1 };
                    ScriptGroupId = AddScriptGroup("SingleScriptGroup", "Single Script Group", ScriptIds, testEnvironments);
                    _report.Debug("AddScriptGroup Result = {0}", ScriptGroupId);

                    RunId = RunScriptGroup(ScriptGroupId, testEnvironments[0]);
                    _report.Debug("RunScriptGroup Result = {0}", RunId);

                    _report.Debug("Waiting for complete");
                    commandStatusList = WaitForScriptGroup(RunId);
                    ResultCode = TEST_RESULTS.PASSED;
                    foreach (CommandStatus commandStatus in commandStatusList)
                    {
                        //PrintCommandStateString(commandStatus.Status);
                        if (!IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                        {
                            ResultCode = TEST_RESULTS.FAILED;
                        }
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptGroupId > 0)
                    {
                        string delResult = DeleteScriptGroup(ScriptGroupId);
                        _report.Debug("DeleteScriptGroup Result = {0}", delResult);
                    }
                    if (ScriptId1 > 0)
                    {
                        string delResult = DeleteScript(ScriptId1);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("CreateSingle");
            }
        }

        /// <summary>
        /// Test Case:
        /// Creates a script group and adds/removes scripts from it
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Creates a script group and adds/removes scripts from it"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class AddRemoveScripts : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptId1 = -1;
                int ScriptId2 = -1;
                int ScriptId3 = -1;
                int ScriptGroupId = -1;
                BeginCase("AddRemoveScripts");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename1 = "Demo.cs";
                string scriptFilename2 = "TestNoOp.cs";
                string scriptFilename3 = "GeneralNoOp.cs";
                int[] testEnvironments = new int[1] { _testEnvironment1 };

                try
                {
                    ScriptId1 = AddScriptFile(scriptFilename1, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId1);
                    ScriptId2 = AddScriptFile(scriptFilename2, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId2);
                    ScriptId3 = AddScriptFile(scriptFilename3, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId3);

                    // Add just 2 scripts
                    int[] ScriptIds = new int[2] { ScriptId1, ScriptId2 };
                    ScriptGroupId = AddScriptGroup("AddRemoveScriptGroup", "Add/Remove Script Group", ScriptIds, testEnvironments);
                    _report.Debug("AddScriptGroup Result = {0}", ScriptGroupId);

                    // Verify only 2 scripts in the group
                    ResultCode = TEST_RESULTS.PASSED;
                    ScriptGroupInformation scriptGroupInfo = GetScriptGroup(testEnvironments[0], ScriptGroupId);
                    if (scriptGroupInfo.Scripts.Length != 2)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Scripts Length actual ({0}) did not match expected ({1})", scriptGroupInfo.Scripts.Length, 2);
                    }
                    else if ((scriptGroupInfo.Scripts[0] != ScriptId1)
                        || (scriptGroupInfo.Scripts[1] != ScriptId2))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("ScriptIds actual ({0},{1}) did not match expected ({2},{3})",
                            scriptGroupInfo.Scripts[0], scriptGroupInfo.Scripts[1],
                            ScriptId1, ScriptId2);
                    }

                    // Update the scripts and verify
                    ScriptIds[1] = ScriptId3;
                    int updateResult = UpdateScriptGroup(ScriptGroupId, null, null, ScriptIds, testEnvironments);
                    _report.Debug("UpdateScriptGroup Result = {0}", updateResult);
                    scriptGroupInfo = GetScriptGroup(testEnvironments[0], ScriptGroupId);
                    if (scriptGroupInfo.Scripts.Length != 2)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Scripts Length actual ({0}) did not match expected ({1})", scriptGroupInfo.Scripts.Length, 2);
                    }
                    else if ((scriptGroupInfo.Scripts[0] != ScriptId1)
                        || (scriptGroupInfo.Scripts[1] != ScriptId3))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("ScriptIds actual ({0},{1}) did not match expected ({2},{3})",
                            scriptGroupInfo.Scripts[0], scriptGroupInfo.Scripts[1],
                            ScriptId1, ScriptId3);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptGroupId > 0)
                    {
                        string delResult = DeleteScriptGroup(ScriptGroupId);
                        _report.Debug("DeleteScriptGroup Result = {0}", delResult);
                    }
                    if (ScriptId1 > 0)
                    {
                        string delResult = DeleteScript(ScriptId1);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                    if (ScriptId2 > 0)
                    {
                        string delResult = DeleteScript(ScriptId2);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                    if (ScriptId3 > 0)
                    {
                        string delResult = DeleteScript(ScriptId3);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("AddRemoveScripts");
            }
        }

        /// <summary>
        /// Test Case:
        /// Creates a script group and adds/removes scripts from it
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Creates a script group and adds/removes scripts from it"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class AddInvalidScripts : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptId1 = -1;
                int ScriptGroupId = -1;
                BeginCase("AddInvalidScripts");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename1 = "Demo.cs";
                int[] testEnvironments = new int[1] { _testEnvironment1 };

                try
                {
                    // Adding a script so we can get the high number and use numbers higher than it as invalid
                    ScriptId1 = AddScriptFile(scriptFilename1, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId1);

                    // Add just 2 scripts
                    int[] ScriptIds = new int[3] { ScriptId1, ScriptId1 + 1, -1 };
                    ScriptGroupId = AddScriptGroup("AddRemoveScriptGroup", "Add/Remove Script Group", ScriptIds, testEnvironments);
                    _report.Debug("AddScriptGroup Result = {0}", ScriptGroupId);

                    // Verify only 1 scripts in the group
                    ResultCode = TEST_RESULTS.PASSED;
                    ScriptGroupInformation scriptGroupInfo = GetScriptGroup(testEnvironments[0], ScriptGroupId);
                    if (scriptGroupInfo.Scripts.Length != 1)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Scripts Length actual ({0}) did not match expected ({1})", scriptGroupInfo.Scripts.Length, 2);
                    }
                    else if (scriptGroupInfo.Scripts[0] != ScriptId1)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("ScriptIds actual ({0}) did not match expected ({1})",
                            scriptGroupInfo.Scripts[0],
                            ScriptId1);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptGroupId > 0)
                    {
                        string delResult = DeleteScriptGroup(ScriptGroupId);
                        _report.Debug("DeleteScriptGroup Result = {0}", delResult);
                    }
                    if (ScriptId1 > 0)
                    {
                        string delResult = DeleteScript(ScriptId1);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("AddInvalidScripts");
            }
        }

        /// <summary>
        /// Positive Case:
        /// Verifies that modifying script group strings hold
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies that modifying script group strings hold"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ModifyScriptGroup_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int scriptId = -1;
                int scriptGroupId = -1;
                ScriptGroupInformation scriptGroupInfo;
                string scriptGroupName = "ModifyScriptGroupTest";
                string scriptGroupDescription = "Modify ScriptGroup Description";
                BeginCase("ModifyScriptGroup_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = TestNoOpScript;
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;


                try
                {
                    scriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("ScriptId = {0}", scriptId);

                    // Add scripts
                    int[] scriptIds = new int[1] { scriptId };
                    scriptGroupId = AddScriptGroup(scriptGroupName, scriptGroupDescription, scriptIds, testEnvironments);
                    _report.Debug("AddScriptGroup Result = {0}", scriptGroupId);

                    //Verify Initial Values
                    ResultCode = TEST_RESULTS.PASSED;
                    scriptGroupInfo = GetScriptGroup(_testEnvironment1, scriptGroupId);
                    if (scriptGroupInfo.Name != scriptGroupName)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Initial ScriptGroup Name doesn't match");
                    }
                    if (scriptGroupInfo.Description != scriptGroupDescription)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Initial ScriptGroup Description doesn't match");
                    }

                    //Modify Values
                    scriptGroupName = "ModifiedScriptGroupTest";
                    scriptGroupDescription = "Modified ScriptGroup Description";
                    int resultCode = UpdateScriptGroup(scriptGroupId, scriptGroupName, scriptGroupDescription, null, testEnvironments);

                    //Verify modified values
                    scriptGroupInfo = GetScriptGroup(_testEnvironment1, scriptGroupId);
                    if (scriptGroupInfo.Name != scriptGroupName)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New ScriptGroup Name doesn't match");
                    }
                    if (scriptGroupInfo.Description != scriptGroupDescription)
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New ScriptGroup Description doesn't match");
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptGroupId > 0)
                    {
                        DeleteScriptGroup(scriptGroupId);
                    }
                    //Cleanup - Delete the Script
                    if (scriptId > 0)
                    {
                        DeleteScript(scriptId);
                    }
                }

                EndCase("ModifyScriptGroup_Pos");
            }
        }

        /// <summary>
        /// Test Case:
        /// Verifies that modifying script group Period/Flag hold
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Verifies that modifying script group Period/Flag hold"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ModifyScriptGroupPeriodFlag_Pos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int scriptId1 = -1;
                int scriptId2 = -1;
                int scriptId3 = -1;
                int scriptGroupId = -1;
                ScriptGroupInformation scriptGroupInfo;
                BeginCase("ModifyScriptGroupPeriodFlag_Pos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename1 = "Demo.cs";
                string scriptFilename2 = "TestNoOp.cs";
                string scriptFilename3 = "GeneralNoOp.cs";
                int[] testEnvironments = new int[1] { _testEnvironment1 };

                try
                {
                    scriptId1 = AddScriptFile(scriptFilename1, testEnvironments);
                    _report.Debug("AddScript Result = {0}", scriptId1);
                    scriptId2 = AddScriptFile(scriptFilename2, testEnvironments);
                    _report.Debug("AddScript Result = {0}", scriptId2);
                    scriptId3 = AddScriptFile(scriptFilename3, testEnvironments);
                    _report.Debug("AddScript Result = {0}", scriptId3);

                    // Add scripts
                    int[] scriptIds = new int[3] { scriptId1, scriptId2, scriptId3 };
                    scriptGroupId = AddScriptGroup("ModifyPeriodFlagScriptGroup", "Modify Period/Flag Script Group", scriptIds, testEnvironments);
                    _report.Debug("AddScriptGroup Result = {0}", scriptGroupId);

                    //Verify Initial
                    ResultCode = TEST_RESULTS.PASSED;
                    scriptGroupInfo = GetScriptGroup(_testEnvironment1, scriptGroupId);
                    if ((scriptGroupInfo.Period.HasValue != true) || (scriptGroupInfo.Period.Value != 0))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Initial Period doesn't match expected: {0}", scriptGroupInfo.Period.Value);
                    }
                    if ((scriptGroupInfo.Flag.HasValue != true) || (scriptGroupInfo.Flag.Value != 0))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("Initial Flag doesn't match expected: {0}", scriptGroupInfo.Flag.Value);
                    }

                    // Update to new value and verify
                    int newPeriod = 180000;
                    int newFlag = 2;
                    int resultCode = UpdateScriptGroupPeriodFlag(scriptGroupId, testEnvironments, newPeriod, newFlag);
                    _report.Debug("UpdateScriptGroupPeriodFlag returned = {0}", resultCode);

                    scriptGroupInfo = GetScriptGroup(_testEnvironment1, scriptGroupId);
                    if ((scriptGroupInfo.Period.HasValue != true) || (scriptGroupInfo.Period.Value != newPeriod))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Period doesn't match expected: {0}", scriptGroupInfo.Period.Value);
                    }
                    if ((scriptGroupInfo.Flag.HasValue != true) || (scriptGroupInfo.Flag.Value != newFlag))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Flag doesn't match expected: {0}", scriptGroupInfo.Flag.Value);
                    }

                    // Restore to 0 and verify
                    newPeriod = 0;
                    newFlag = 0;
                    resultCode = UpdateScriptGroupPeriodFlag(scriptGroupId, testEnvironments, newPeriod, newFlag);
                    _report.Debug("UpdateScriptGroupPeriodFlag returned = {0}", resultCode);

                    scriptGroupInfo = GetScriptGroup(_testEnvironment1, scriptGroupId);
                    if ((scriptGroupInfo.Period.HasValue != true) || (scriptGroupInfo.Period.Value != newPeriod))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Period doesn't match expected: {0}", scriptGroupInfo.Period.Value);
                    }
                    if ((scriptGroupInfo.Flag.HasValue != true) || (scriptGroupInfo.Flag.Value != newFlag))
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        _report.Error("New Flag doesn't match expected: {0}", scriptGroupInfo.Flag.Value);
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (scriptGroupId > 0)
                    {
                        string delResult = DeleteScriptGroup(scriptGroupId);
                        _report.Debug("DeleteScriptGroup Result = {0}", delResult);
                    }
                    if (scriptId1 > 0)
                    {
                        string delResult = DeleteScript(scriptId1);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                    if (scriptId2 > 0)
                    {
                        string delResult = DeleteScript(scriptId2);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                    if (scriptId3 > 0)
                    {
                        string delResult = DeleteScript(scriptId3);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("ModifyScriptGroupPeriodFlag_Pos");
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\ServiceCases.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using ServerTestFramework;
using xonline.common.config;
using WSMCommon.Control;
using WSMCommon.Control.Command;

namespace WSMonitorTest
{
    [TestGroup, Owner("TrevorM"), Description("Web Service Test Cases"), TestFrequency("Regression"), EnvRequirement("Manual")]
    class ServiceCases : TestNode
    {
        /// <summary>
        /// Test Case:
        /// Runs a Service using a relative URL
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Runs a Service using a relative URL"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ServiceHostRelativePos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptId = -1;
                long RunId;
                CommandStatus commandStatus;
                BeginCase("ServiceHostRelativePos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestCallingService.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Service should already be relative by default with the correct flag
                    ScriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId);

                    RunId = RunScript(ScriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", RunId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(RunId);
                    PrintCommandStateString(commandStatus.Status);
                    if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptId > 0)
                    {
                        string delResult = DeleteScript(ScriptId);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                }
                EndCase("ServiceHostRelativePos");
            }
        }

        /// <summary>
        /// Test Case:
        /// Runs a Service using a relative URL and the incorrect flag
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Runs a Service using a relative URL and the incorrect flag"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ServiceHostRelativeNeg : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptId = -1;
                long RunId;
                CommandStatus commandStatus;
                BeginCase("ServiceHostRelativeNeg");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestCallingService.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Service should already be relative by default with the correct flag
                    UpdateService(_testServiceId1, -1, testEnvironments, null, null, null, 1);
                    ScriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId);

                    RunId = RunScript(ScriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", RunId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(RunId);
                    PrintCommandStateString(commandStatus.Status);
                    if (commandStatus.Status == CommandState.Exception)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptId > 0)
                    {
                        string delResult = DeleteScript(ScriptId);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                    UpdateService(_testServiceId1, _testAspectGroup1, testEnvironments, _service1Protocol, _service1Alias, _service1Host, 0);
                }
                EndCase("ServiceHostRelativeNeg");
            }
        }

        /// <summary>
        /// Test Case:
        /// Runs a Service using a absolute URL and the correct flag
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Runs a Service using a absolute URL and the correct flag"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ServiceHostAbsolutePos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptId = -1;
                long RunId;
                CommandStatus commandStatus;
                BeginCase("ServiceHostAbsolutePos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestCallingService.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Service should already be relative by default with the correct flag
                    string fullURL = string.Format("http://{0}/{1}", _environmentHost1, _service1Host);
                    _report.Debug("Full URL: {0}", fullURL);
                    UpdateService(_testServiceId1, -1, testEnvironments, null, null, fullURL, 1);
                    ScriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId);

                    RunId = RunScript(ScriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", RunId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(RunId);
                    PrintCommandStateString(commandStatus.Status);
                    if (IsPassingCompleteState(commandStatus.Status, WSMonitor.Framework.Scripting.ScriptType.Test))
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptId > 0)
                    {
                        string delResult = DeleteScript(ScriptId);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                    UpdateService(_testServiceId1, _testAspectGroup1, testEnvironments, _service1Protocol, _service1Alias, _service1Host, 0);
                }
                EndCase("ServiceHostAbsolutePos");
            }
        }

        /// <summary>
        /// Test Case:
        /// Runs a Service using a absolute URL and the incorrect flag
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Runs a Service using a absolute URL and the incorrect flag"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ServiceHostAbsoluteNeg : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptId = -1;
                long RunId;
                CommandStatus commandStatus;
                BeginCase("ServiceHostAbsoluteNeg");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestCallingService.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Service should already be relative by default with the correct flag
                    string fullURL = string.Format("http://{0}/{1}", _environmentHost1, _service1Host);
                    _report.Debug("Full URL: {0}", fullURL);
                    UpdateService(_testServiceId1, -1, testEnvironments, null, null, fullURL, 0);
                    ScriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId);

                    RunId = RunScript(ScriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", RunId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(RunId);
                    PrintCommandStateString(commandStatus.Status);
                    if (commandStatus.Status == CommandState.Error)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptId > 0)
                    {
                        string delResult = DeleteScript(ScriptId);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                    UpdateService(_testServiceId1, _testAspectGroup1, testEnvironments, _service1Protocol, _service1Alias, _service1Host, 0);
                }
                EndCase("ServiceHostAbsoluteNeg");
            }
        }

        /// <summary>
        /// Test Case:
        /// Runs a Service using a absolute URL and the incorrect flag
        /// </summary>
        [TestCase, Owner("TrevorM"), Description("Runs a Service using a absolute URL and the incorrect flag"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class ServiceHostSercureFlagPos : WSMonitorTestBase
        {
            protected override void Execute()
            {
                int ScriptId = -1;
                long RunId;
                CommandStatus commandStatus;
                BeginCase("ServiceHostSercureFlagPos");
                ResultCode = TEST_RESULTS.FAILED;

                string scriptFilename = "TestCallingService.cs";
                int[] testEnvironments = new int[1];
                testEnvironments[0] = _testEnvironment1;

                try
                {
                    // Service should already be relative by default with the correct flag
                    UpdateService(_testServiceId1, -1, testEnvironments, null, null, null, 2);
                    ScriptId = AddScriptFile(scriptFilename, testEnvironments);
                    _report.Debug("AddScript Result = {0}", ScriptId);

                    RunId = RunScript(ScriptId, testEnvironments);
                    _report.Debug("RunScript Result = {0}", RunId);

                    _report.Debug("Waiting for complete");
                    commandStatus = WaitForCommand(RunId);
                    PrintCommandStateString(commandStatus.Status);
                    if (commandStatus.Status == CommandState.Exception)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
                finally
                {
                    //Cleanup - Delete the Script
                    if (ScriptId > 0)
                    {
                        string delResult = DeleteScript(ScriptId);
                        _report.Debug("DeleteScript Result = {0}", delResult);
                    }
                    UpdateService(_testServiceId1, _testAspectGroup1, testEnvironments, _service1Protocol, _service1Alias, _service1Host, 0);
                }
                EndCase("ServiceHostSercureFlagPos");
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_wsmonitortest_none_12.4.56.0_none_cb38a7f89dd0575d
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=wsmonitortest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3.manifest
XP_MANIFEST_PATH=manifests\msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3.cat
XP_CATALOG_PATH=manifests\msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3.cat
XP_PAYLOAD_PATH=msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=wsmonitortest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\CatalogExtTest.cs ===
using System;
using System.Text;
using System.Xml;
using System.Collections.Specialized;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;

using xonline.tools.lsmonitor.extensions.xonline.catalog;
using Pair = xonline.tools.lsmonitor.extensions.xonline.catalog.CatalogAPI.Pair;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test0CB966EC0FFD4b3eB684E0B952961157 : Script
    {
        [Native.Start]
        public bool Run()
        {

            // If we can't access this test code, the script will throw and will fail.
            NameValueCollection result = CatalogAPI.GetNamespaceTable();
            if (result == null)
                throw new Framework.Exceptions.LogicalScriptFailureException("GetNamespaceTable returned null");
            Report.Message("First Namespace: {0} - {1}", result.GetKey(0), result[0]);

            /*string catalogUrl = string.Format("http://{0}/Catalog/CatalogFTS.asmx", HostEnvironment);
            Report.Message("catalogUrl: {0}", catalogUrl);
            XmlDocument podcastResult = CatalogAPI.SendGenericQuery(
               catalogUrl,
               "FindPodcastsFTS",
               new Pair("Query", "podcast"),
               new Pair("RankingType", 0),
               new Pair("Locale", "en-us"),
               new Pair("LegalLocale", "en-us"),
               new Pair("PageSize", 50),
               new Pair("PageNum", 1),
               new Pair("DetailView", 5),
               new Pair("PodcastType", 4),
               new Pair("OrderBy", 1),
               new Pair("OrderDirection", 1)
            );
            if (podcastResult == null)
                throw new Framework.Exceptions.LogicalScriptFailureException("SendGenericQuery returned null");
            Report.Message("SendGenericQuery Result: {0}", podcastResult.DocumentElement.OuterXml);*/

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_wsmonitortest_none_12.4.56.0_none_cb38a7f89dd0575d
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=wsmonitortest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3.manifest
XP_MANIFEST_PATH=manifests\msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3.cat
XP_CATALOG_PATH=manifests\msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3.cat
XP_PAYLOAD_PATH=msil_wsmonitortest_no-public-key_12.4.56.0_x-ww_6f6aa6d3
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=wsmonitortest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GeneralCallingTestCode.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;
using xonline.tools.lsmonitor.bvt.extension;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class General34D8F3EB50DA4b4b9AA15EE5531A31F2 : Script
    {
        [Native.Start]
        public bool Run()
        {
            // If we can't access this test code, the script will throw and will fail.
            BVTExtension bvtExt = new BVTExtension();
            int intRet = bvtExt.GetInt(5);
            if (intRet != 5)
                throw new Framework.Exceptions.LogicalScriptFailureException("The result from the loaded test code did not match expected");

            string strRet = bvtExt.GetString("Hello World");
            if (string.Compare(strRet, "Hello World", true) != 0)
                throw new Framework.Exceptions.LogicalScriptFailureException("The result from the loaded test code did not match expected");

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GeneralCallingService.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;
using LiveServiceMonitor.Framework;
using LiveServiceMonitor.Framework.Services;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class GeneralAEFA20CD6D2242baA50307AD2382269F : Script
    {
        [Native.Start]
        public bool Run()
        {
            int svcReturn = (int)Service.BVTService.ReturnInteger(5);
            if (svcReturn != 5)
            {
                string errorMsg = string.Format("ReturnInteger returned: {0}, Expected: {1}", svcReturn, 5);
                throw new Framework.Exceptions.LogicalServiceFailureException(errorMsg);
            }
            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GeneralCallingExceptions.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class General8C0E1AB8E1B141ba9606630BD66018D4 : Script
    {
        [Native.Start]
        public bool Run()
        {
            // If we can't access this common code, the script will throw and will fail.
            try
            {
                throw new Framework.Exceptions.ScriptException("Testing Framework Exceptions");
            }
            catch (Framework.Exceptions.ScriptException excep)
            {
            }

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GeneralCallingGeneral.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class General44105A70255140969A60E4528F0B892E : Script
    {
        [Native.Start]
        public bool Run()
        {
            return (bool)Execute("GeneralNoOp");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\Demo.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Script44F57818B1A540958E2DC9BC645A7705 : Script
    {
        [Native.Start]
        public bool Run()
        {
            Random R = new Random();
            System.Threading.Thread.Sleep(5000);
            return R.Next() % 2 == 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GeneralCallingTest.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class General46FDFB60761F46d9B4CDAEB9875B270F : Script
    {
        [Native.Start]
        public bool Run()
        {
            return (bool)Execute("TestNoOp");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GeneralScriptReportedException.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class General0DD07D5899FC4ef0A788D59579D7E818 : Script
    {
        [Native.Start]
        public bool Run()
        {
            Random R = new Random();
            int rInt = R.Next();
            Report testReport;
            ExecutionReportProxy testProxy;

            System.Threading.Thread.Sleep(5000);
            testReport = Report.Create(ReportCategory.GeneralScript, typeof(Report));
            //testReport.Guid = new Guid("0DD07D5899FC4ef0A788D59579D7E818");
            testProxy = new ExecutionReportProxy(testReport);
            testProxy.Name = "GeneralScriptReportedException";
            testProxy.ExecutionStart = new DateTime(2001, 1, 1);
            testProxy.ExecutionDuration = 3;
            testProxy.ExecutionResult = ResultCode.Exception;
            //testProxy.SetValue("Text", "Logged Text Information");
            testReport.Close();

            throw new WSMonitor.Framework.Exceptions.ScriptException();

            return rInt % 2 == 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GeneralScriptReportedCancel.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class General7E65A2AB0A854743B0D3150C2840765A : Script
    {
        [Native.Start]
        public bool Run()
        {
            Random R = new Random();
            int rInt = R.Next();
            Report testReport;
            ExecutionReportProxy testProxy;

            testReport = Report.Create(ReportCategory.GeneralScript, typeof(Report));
            //testReport.Guid = new Guid("7E65A2AB0A854743B0D3150C2840765A");
            testProxy = new ExecutionReportProxy(testReport);
            testProxy.Name = "GeneralScriptReportedCancel";
            testProxy.ExecutionStart = new DateTime(2001, 1, 1);
            testProxy.ExecutionDuration = 3;
            testProxy.ExecutionResult = ResultCode.Cancel;
            //testProxy.SetValue("Text", "Logged Text Information");
            testReport.Close();
            System.Threading.Thread.Sleep(30000);

            return rInt % 2 == 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GeneralNoOp.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class General0970BD9884404475B4DF33A944728DED : Script
    {
        [Native.Start]
        public bool Run()
        {
            Random R = new Random();
            System.Threading.Thread.Sleep(5000);
            return R.Next() % 2 == 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GeneralScriptReportedFailure.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class GeneralD30A145C6D8F480eBB59411E3908FF14 : Script
    {
        [Native.Start]
        public bool Run()
        {
            Report testReport;
            ExecutionReportProxy testProxy;

            System.Threading.Thread.Sleep(5000);
            testReport = Report.Create(ReportCategory.GeneralScript, typeof(Report));
            //testReport.Guid = new Guid("D30A145C6D8F480eBB59411E3908FF14");
            testProxy = new ExecutionReportProxy(testReport);
            testProxy.Name = "GeneralScriptReportedFailure";
            testProxy.ExecutionStart = new DateTime(2001, 1, 1);
            testProxy.ExecutionDuration = 3;
            testProxy.ExecutionResult = ResultCode.Failed;
            //testProxy.SetValue("Text", "Logged Text Information");
            testReport.Close();

            return false;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\HttpExtTest.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;
using xonline.tools.lsmonitor.extensions.http;
using xonline.tools.lsmonitor.extensions.xml;
using LiveServiceMonitor.Framework.Services;
using System.Collections.Specialized;
using System.Net;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class TestA50031D9E5354b32BD1567658A585896 : Script
    {
        [Native.Start]
        public bool Run()
        {
            // If we can't access this test code, the script will throw and will fail.
            // POST
            // http://jojohn-xblob-0/BVTService/Service.asmx?op=ReturnInteger
            string postURL = String.Format("{0}", Service.BVTService.Url);
            string xmlCode =
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
                "<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">" +
                   "<soap:Body>" +
                      "<ReturnInteger xmlns=\"http://tempuri.org/\">" +
                         "<value>45</value>" +
                      "</ReturnInteger>" +
                   "</soap:Body>" +
                "</soap:Envelope>";
            string contentType = "text/xml;charset=\"utf-8\"";
            System.Xml.XmlDocument xmlDoc = XmlHelper.CreateDocument(xmlCode);

            Report.Message("BVT Service URL: {0}", postURL);
            Report.Message("content: {0}", xmlDoc.DocumentElement.OuterXml);
            Report.Message("contentType: {0}", contentType);

            HttpWebResponse httpResponse;
            httpResponse = HttpHelper.SendHttpPostRequest(
                postURL,
                contentType,
                xmlDoc.DocumentElement.OuterXml,
                null,
                null);
            if (httpResponse == null)
                throw new Framework.Exceptions.LogicalScriptFailureException("The result from the loaded test code did not match expected");

            System.Xml.XmlDocument xmlReturn = HttpHelper.ConsumeResponseAsXml(httpResponse);
            if (xmlReturn == null)
                throw new Framework.Exceptions.LogicalScriptFailureException("ConsumeResponseAsXml Failed to return a valid xml doc");
            Report.Message("POST Response: {0}", xmlReturn.DocumentElement.OuterXml);

            // GET string
            // GET /BVTService/Service.asmx/ReturnInteger?value=string
            string getURL = String.Format("{0}/ReturnInteger?value={1}", Service.BVTService.Url, "5");
            contentType = "text/xml;charset=\"utf-8\"";

            Report.Message("BVT Service URL: {0}", getURL);

            httpResponse = HttpHelper.SendHttpGetRequest(
                getURL,
                contentType,
                null,
                null,
                null);
            if (httpResponse == null)
                throw new Framework.Exceptions.LogicalScriptFailureException("The result from the loaded test code did not match expected");

            string stringReturn = HttpHelper.ConsumeResponseAsString(httpResponse);
            if ((stringReturn == null) || (stringReturn.Length == 0))
                throw new Framework.Exceptions.LogicalScriptFailureException("The result from the loaded test code did not match expected");
            Report.Message("GET Integer Response: {0}", stringReturn);

            // GET Binary
            getURL = String.Format("{0}/ReturnString?value={1}", Service.BVTService.Url, "\"TestString\"");
            Report.Message("BVT Service URL: {0}", getURL);
            httpResponse = HttpHelper.SendHttpGetRequest(
                getURL,
                contentType,
                null,
                null,
                null);
            if (httpResponse == null)
                throw new Framework.Exceptions.LogicalScriptFailureException("The result from the loaded test code did not match expected");

            byte[] byteReturn = HttpHelper.ConsumeResponseAsBinary(httpResponse);
            if ((byteReturn == null) || (byteReturn.Length == 0))
                throw new Framework.Exceptions.LogicalScriptFailureException("ConsumeResponseAsBinary returned a null or empty array");
            Report.Message("GET String Response is a non-null byte array of length {0}", byteReturn.Length);
            string byteArray = "";
            string charArray = "";
            ASCIIEncoding AE = new ASCIIEncoding();
            char[] charReturn = AE.GetChars(byteReturn);
            for (int i = 0; i < byteReturn.Length; i++)
                byteArray += byteReturn[i].ToString("X2") + " ";
            for (int i = 0; i < charReturn.Length; i++)
                charArray += charReturn[i].ToString();
            Report.Message("byte[] = {0}", byteArray);
            Report.Message("char[] = {0}", charArray);

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GeneralScriptReportedFinished.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class GeneralBAB7D0C8A5DF45ab9B0898E6DC2DA9DF : Script
    {
        [Native.Start]
        public bool Run()
        {
            Random R = new Random();
            int rInt = R.Next();
            Report testReport;
            ExecutionReportProxy testProxy;

            System.Threading.Thread.Sleep(5000);
            testReport = Report.Create(ReportCategory.GeneralScript, typeof(Report));
            //testReport.Guid = new Guid("BAB7D0C8A5DF45ab9B0898E6DC2DA9DF");
            testProxy = new ExecutionReportProxy(testReport);
            testProxy.Name = "GeneralScriptReportedFinshed";
            testProxy.ExecutionStart = new DateTime(2001, 1, 1);
            testProxy.ExecutionDuration = 3;
            testProxy.ExecutionResult = ResultCode.Finished;
            //testProxy.SetValue("Text", "Logged Text Information");
            testReport.Close();

            return rInt % 2 == 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\WSMonitorTestBase.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using ServerTestFramework;
using WSMCommon.Control;
using WSMCommon.Control.Command;
using WSMonitor.Framework.Reporting;
using WSMReport = WSMonitor.Framework.Reporting.Report;

namespace WSMonitorTest
{
    public class WSMonitorTestBase : TestBase
    {
        protected ServerTestFramework.Report _report = new ServerTestFramework.Report("WSMonitorTest");
        protected static CommandLink _commandLink;
        protected string _inputFilesPath;
        protected string _tempPath;
        protected static int _generalAspectGroup1 = 0;
        protected static int _testAspectGroup1 = 0;
        protected static int _testAspectGroup2 = 0;
        protected static int _testEnvironment1 = 0;
        protected static int _testEnvironment2 = 0;
        protected static int _testServiceId1 = 0;
        protected static int _testNoOpScriptId = 0;
        protected static int _generalNoOpScriptId = 0;
        protected static int _utilityNoOpScriptId = 0;
        protected string _environmentHost1 = "localhost:12000";
        protected string _environmentHost2 = "localhost:12000";
        protected string _service1Protocol = "SOAP";
        protected string _service1Host = "BVTService/Service.asmx";
        protected string _service1Alias = "BVTService";

        protected const string TestUsername = "WSMonitorTest";
        protected const string AspectGroupGeneralName1 = "AspectGroupGeneralName1";
        protected const string AspectGroupGeneralDescription1 = "AspectGroupGeneralDescription1";
        protected const string AspectGroupTestName1 = "AspectGroupTestName1";
        protected const string AspectGroupTestDescription1 = "AspectGroupTestDescription1";
        protected const string AspectGroupTestName2 = "AspectGroupTestName2";
        protected const string AspectGroupTestDescription2 = "AspectGroupTestDescription2";
        protected const string EnvironmentTestName1 = "EnvironmentTestName1";
        protected const string EnvironmentVersion1 = "EnvironmentVersion1";
        protected const string EnvironmentTestDescription1 = "AspectGroupTestDescription1";
        protected const string EnvironmentTestName2 = "EnvironmentTestName2";
        protected const string EnvironmentVersion2 = "EnvironmentVersion2";
        protected const string EnvironmentTestDescription2 = "AspectGroupTestDescription2";
        protected const string TestNoOpScript = "TestNoOp.cs";
        protected const string GeneralNoOpScript = "GeneralNoOp.cs";
        protected const string UtilityNoOpScript = "UtilityNoOp.cs";
        protected const int DefaultTimeout = 60000;
        //protected const int RebuildScriptsTimeout = 30000;

        public WSMonitorTestBase()
        {
            string wsMonitorServer = "";

            // Query the Global object to get our test-specific data
            XmlNode liveTitleConfig = Global.Config.SelectSingleNode("descendant::WSMonitorTest");
            if (liveTitleConfig != null)
            {
                foreach (XmlNode setting in liveTitleConfig.ChildNodes)
                {
                    if (String.Compare(setting.Name, "WSMonitorServer", true) == 0)
                    {
                        wsMonitorServer = setting.InnerText;
                    }
                    else if (String.Compare(setting.Name, "TestEnvironment1Host", true) == 0)
                    {
                        _environmentHost1 = setting.InnerText;
                    }
                    else if (String.Compare(setting.Name, "TestEnvironment2Host", true) == 0)
                    {
                        _environmentHost2 = setting.InnerText;
                    }
                    else if (String.Compare(setting.Name, "Service1Host", true) == 0)
                    {
                        _service1Host = setting.InnerText;
                    }
                    else if (String.Compare(setting.Name, "Service1Alias", true) == 0)
                    {
                        _service1Alias = setting.InnerText;
                    }
                    else if (String.Compare(setting.Name, "Service1Protocol", true) == 0)
                    {
                        _service1Protocol = setting.InnerText;
                    }
                    else if (String.Compare(setting.Name, "InputFilePath", true) == 0)
                    {
                        _inputFilesPath = Path.GetFullPath(setting.InnerText);
                    }
                    else if (String.Compare(setting.Name, "TempDirectoryPath", true) == 0)
                    {
                        _tempPath = Path.GetFullPath(setting.InnerText);
                        if (!Directory.Exists(_tempPath))
                        {
                            Directory.CreateDirectory(_tempPath);
                        }
                    }
                }
            }
            else
            {
                throw new StfException("Unable to read the WSMonitorTest configuration settings.");
            }

            // Connect to database
            if (_commandLink == null)
            {
                _report.Debug("Connecting to Server: {0}", wsMonitorServer);
                _commandLink = new CommandLink(null, wsMonitorServer);
            }

            // Create Aspects to use for testing
            if ((_generalAspectGroup1 == 0) || (_testAspectGroup1 == 0) || (_testAspectGroup2 == 0) 
                || (_testEnvironment1 == 0) || (_testEnvironment2 == 0) || (_testServiceId1 == 0))
            {
                AspectGroupInformation[] aspectGroups = GetAllAspectGroups();
                foreach (AspectGroupInformation aspectGroup in aspectGroups)
                {
                    switch (aspectGroup.Name)
                    {
                        case AspectGroupGeneralName1:
                            if (_generalAspectGroup1 == 0)
                                _generalAspectGroup1 = aspectGroup.Identifier;
                            break;
                        case AspectGroupTestName1:
                            if (_testAspectGroup1 == 0)
                                _testAspectGroup1 = aspectGroup.Identifier;
                            break;
                        case AspectGroupTestName2:
                            if (_testAspectGroup2 == 0)
                                _testAspectGroup2 = aspectGroup.Identifier;
                            break;
                    }
                }
                if (_generalAspectGroup1 == 0)
                    _generalAspectGroup1 = AddAspectGroup(AspectGroupGeneralName1, AspectGroupGeneralDescription1);
                if (_testAspectGroup1 == 0)
                    _testAspectGroup1 = AddAspectGroup(AspectGroupTestName1, AspectGroupTestDescription1);
                if (_testAspectGroup2 == 0)
                    _testAspectGroup2 = AddAspectGroup(AspectGroupTestName2, AspectGroupTestDescription2);

                EnvironmentInformation[] environmentInfos = GetAllEnvironments();
                foreach (EnvironmentInformation environmentInfo in environmentInfos)
                {
                    switch (environmentInfo.Name)
                    {
                        case EnvironmentTestName1:
                            if (_testEnvironment1 == 0)
                                _testEnvironment1 = environmentInfo.Identifier;
                            break;
                        case EnvironmentTestName2:
                            if (_testEnvironment2 == 0)
                                _testEnvironment2 = environmentInfo.Identifier;
                            break;
                    }
                }
                // Create Environments to use for testing
                if (_testEnvironment1 == 0)
                    _testEnvironment1 = AddEnvironment(EnvironmentTestName1, EnvironmentVersion1, _environmentHost1, EnvironmentTestDescription1, _testAspectGroup1, _generalAspectGroup1);
                if (_testEnvironment2 == 0)
                    _testEnvironment2 = AddEnvironment(EnvironmentTestName2, EnvironmentVersion2, _environmentHost2, EnvironmentTestDescription2, _testAspectGroup2, _generalAspectGroup1);
                CleanupScriptsDB();

                // Add Services used for testing
                if (_testServiceId1 == 0)
                {
                    int[] testEnvironments = new int[] { _testEnvironment1, _testEnvironment2 };
                    _testServiceId1 = AddService(_testAspectGroup1, testEnvironments, _service1Protocol, _service1Alias, _service1Host);
                    _report.Debug("AddService Result - {0}://{1}/{2} = {3}", _service1Protocol, _environmentHost1, _service1Host, _testServiceId1);
                }
            }
        }

        ~WSMonitorTestBase()
        {
            // Since the aspect groups are linked foreign keys to the environments, the environments must be deleted first.
            // Same with scripts/services linked to environments
            try
            {
                if (_testServiceId1 != 0)
                {
                    DeleteService(_testServiceId1);
                    _testServiceId1 = 0;
                }
            }
            catch { }
            try
            {
                if (_testEnvironment1 != 0)
                {
                    DeleteEnvironment(_testEnvironment1);
                    _testEnvironment1 = 0;
                }
            }
            catch { }
            try
            {
                if (_testEnvironment2 != 0)
                {
                    DeleteEnvironment(_testEnvironment2);
                    _testEnvironment2 = 0;
                }
            }
            catch { }
            try
            {
                if (_generalAspectGroup1 != 0)
                {
                    DeleteAspectGroup(_generalAspectGroup1);
                    _generalAspectGroup1 = 0;
                }
            }
            catch { }
            try
            {
                if (_testAspectGroup1 != 0)
                {
                    DeleteAspectGroup(_testAspectGroup1);
                    _testAspectGroup1 = 0;
                }
            }
            catch { }
            try
            {
                if (_testAspectGroup2 != 0)
                {
                    DeleteAspectGroup(_testAspectGroup2);
                    _testAspectGroup2 = 0;
                }
            }
            catch { }
            try
            {
                if ((_testEnvironment1 == 0)
                    && (_testEnvironment2 == 0)
                    && (_generalAspectGroup1 == 0)
                    && (_testAspectGroup1 == 0)
                    && (_testAspectGroup2 == 0))
                {
                    _commandLink = null;
                }
            }
            catch { }
        }

        protected override void Execute()
        {
            throw new StfException("Hey you! You forgot to override the Execute method!");
        }

        protected void BeginCase(string caseName)
        {
            _report.Info("Begin Case: " + caseName);
            CleanupScriptsDB();
        }

        protected void EndCase(string caseName)
        {
            _report.Info("End Case: " + caseName);
        }

        #region UtilityFunctions
        protected string GetStringFromSprocReturn(string xmlRet)
        {
            string strReturn = "";
            TextReader stringReader = new StringReader(xmlRet.ToString());
            XmlReader xmlReader = XmlReader.Create(stringReader);

            // Parse the file and display each of the nodes.
            while (xmlReader.Read())
            {
                if (xmlReader.Name == "string")
                {
                    xmlReader.Read();
                    //_report.Debug("xmlReader.Value = {0}", xmlReader.Value);
                    strReturn = xmlReader.Value;
                    break;
                }
            }

            return strReturn;
        }

        protected int GetIntFromSprocReturn(string xmlRet)
        {
            int iReturn = 0;
            TextReader stringReader = new StringReader(xmlRet.ToString());
            XmlReader xmlReader = XmlReader.Create(stringReader);

            // Parse the file and display each of the nodes.
            while (xmlReader.Read())
            {
                if (xmlReader.Name == "int")
                {
                    xmlReader.Read();
                    //_report.Debug("xmlReader.Value = {0}", xmlReader.Value);
                    iReturn = Int32.Parse(xmlReader.Value);
                    break;
                }
            }

            return iReturn;
        }

        protected long GetLongFromSprocReturn(string xmlRet)
        {
            long lReturn = 0;
            TextReader stringReader = new StringReader(xmlRet.ToString());
            XmlReader xmlReader = XmlReader.Create(stringReader);

            // Parse the file and display each of the nodes.
            while (xmlReader.Read())
            {
                if (xmlReader.Name == "long")
                {
                    xmlReader.Read();
                    //_report.Debug("xmlReader.Value = {0}", xmlReader.Value);
                    lReturn = Int64.Parse(xmlReader.Value);
                    break;
                }
            }

            return lReturn;
        }

        protected long GetScriptInstanceFromSprocReturn(string xmlRet)
        {
            long lReturn = 0;
            TextReader stringReader = new StringReader(xmlRet.ToString());
            XmlReader xmlReader = XmlReader.Create(stringReader);

            // Parse the file and display each of the nodes.
            while (xmlReader.Read())
            {
                if (xmlReader.Name == "long")
                {
                    xmlReader.Read();
                    //_report.Debug("xmlReader.Value = {0}", xmlReader.Value);
                    lReturn = Int64.Parse(xmlReader.Value);
                    break;
                }
            }

            return lReturn;
        }

        /// <summary>
        /// Depricated
        /// </summary>
        /// <param name="ScriptString"></param>
        /// <returns></returns>
        protected string GetAliasFromScriptString(string ScriptString)
        {
            string scriptAlias = "";
            string searchString = "ScriptMetadata(\"";

            int aliasStartLoc = ScriptString.IndexOf(searchString, StringComparison.CurrentCultureIgnoreCase) + searchString.Length;
            if (aliasStartLoc < 0)
                throw new ArgumentOutOfRangeException("ScriptString", "No ScriptMetadata tag found in the script string");
            int aliasEndLoc = ScriptString.IndexOf("\", ", aliasStartLoc, StringComparison.CurrentCultureIgnoreCase);
            if (aliasEndLoc < 0)
                throw new ArgumentOutOfRangeException("ScriptString", "Could not find the end of the Script Alias");

            scriptAlias = ScriptString.Substring(aliasStartLoc, aliasEndLoc - aliasStartLoc);

            return scriptAlias;
        }

        protected string GetAliasFromScriptFileName(string ScriptFileName)
        {
            string scriptAlias = "";
            string searchString = ".";

            int aliasEndLoc = ScriptFileName.IndexOf(searchString);
            if (aliasEndLoc < 1)
                throw new ArgumentOutOfRangeException("ScriptFileName", "No file extension found to remove to create alias");

            scriptAlias = ScriptFileName.Substring(0, aliasEndLoc);

            return scriptAlias;
        }

        protected CommandStatus AddRunScriptWrapper(string TestScriptFile, int[] TestEnvironments)
        {
            int scriptId = -1;
            long runId;
            CommandStatus commandStatus = new CommandStatus();

            try
            {
                scriptId = AddScriptFile(TestScriptFile, TestEnvironments);
                _report.Debug("ScriptId = {0}", scriptId);

                runId = RunScript(scriptId, TestEnvironments);
                _report.Debug("CommandId = {0}", runId);

                _report.Debug("Waiting for complete");
                commandStatus = WaitForCommand(runId);
                PrintCommandStateString(commandStatus.Status);
            }
            finally
            {
                //Cleanup - Delete the Script
                if (scriptId > 0)
                {
                    DeleteScript(scriptId);
                }
            }

            return commandStatus;
        }

        protected CommandStatus AddRunTwoScriptWrapper(string TestScriptFile, string SupportScriptFile, int[] TestEnvironments)
        {
            int testScriptId = -1;
            int supportScriptId = -1;
            long runId;
            CommandStatus commandStatus = new CommandStatus();

            try
            {
                supportScriptId = AddScriptFile(SupportScriptFile, TestEnvironments);
                _report.Debug("Support ScriptId = {0}", supportScriptId);
                testScriptId = AddScriptFile(TestScriptFile, TestEnvironments);
                _report.Debug("Test ScriptId = {0}", testScriptId);

                runId = RunScript(testScriptId, TestEnvironments);
                _report.Debug("CommandId = {0}", runId);

                _report.Debug("Waiting for complete");
                commandStatus = WaitForCommand(runId);
                PrintCommandStateString(commandStatus.Status);
            }
            finally
            {
                //Cleanup - Delete the Script
                if (testScriptId > 0)
                {
                    DeleteScript(testScriptId);
                }
                if (supportScriptId > 0)
                {
                    DeleteScript(supportScriptId);
                }
            }

            return commandStatus;
        }

        protected void CleanupScriptsDB()
        {
            System.Threading.Thread.Sleep(1000);
            ScriptInformation[] scriptList = GetAllScripts(_testEnvironment1);
            foreach (ScriptInformation scriptInfo in scriptList)
            {
                DeleteScript(scriptInfo.Identifier);
            }
            scriptList = GetAllScripts(_testEnvironment2);
            foreach (ScriptInformation scriptInfo in scriptList)
            {
                DeleteScript(scriptInfo.Identifier);
            }
        }
        #endregion

        #region Commands
        protected CommandStatus WaitForCommand(long commandId, int timeout)
        {
            CommandStatus commandStatus;
            commandStatus = _commandLink.WaitForCommand(commandId, timeout);
            if(commandStatus.Status == CommandState.Completed)
            {
                ScriptInstance scriptInstance = _commandLink.WaitForScriptInstance(commandId, timeout, true);
                CommandState commandState = CommandLink.GetStatusFromInt(scriptInstance.Status);
                commandStatus = new CommandStatus(scriptInstance.Instance, commandState, scriptInstance.Report);
            }
            PrintCommandStateString(commandStatus.Status);
            return commandStatus;
        }

        protected CommandStatus WaitForCommand(long commandId)
        {
            return WaitForCommand(commandId, DefaultTimeout);
        }

        protected CommandStatus WaitForState(long commandId, int timeout, CommandState[] commandStates)
        {
            CommandStatus commandStatus;
            commandStatus = _commandLink.WaitForCommand(commandId, timeout);
            if(commandStatus.Status == CommandState.Completed)
            {
                ScriptInstance scriptInstance = _commandLink.WaitForScriptInstance(commandId, timeout, commandStates);
                CommandState commandState = CommandLink.GetStatusFromInt(scriptInstance.Status);
                commandStatus = new CommandStatus(scriptInstance.Instance, commandState, scriptInstance.Report);
            }
            PrintCommandStateString(commandStatus.Status);
            return commandStatus;
        }

        protected CommandStatus WaitForState(long commandId, CommandState[] commandStates)
        {
            return WaitForState(commandId, DefaultTimeout, commandStates);
        }

        protected CommandStatus WaitForState(long commandId, CommandState expectedCommandState)
        {
            CommandState[] commandStates = new CommandState[]
                { expectedCommandState, CommandState.Completed, CommandState.Cancelled, CommandState.Failed, CommandState.Error, CommandState.Success, CommandState.Exception };
            return WaitForState(commandId, DefaultTimeout, commandStates);
        }

        protected CommandStatus WaitForRunning(long commandId)
        {
            return WaitForState(commandId, CommandState.Running);
        }

        protected CommandStatus WaitForPaused(long commandId)
        {
            return WaitForState(commandId, CommandState.Paused);
        }

        protected ScriptInstance WaitForScriptInstance(long scriptInstanceId, long timeout, Predicate<ScriptInstance> predicate)
        {
            DateTime Timeout = DateTime.UtcNow + new TimeSpan(timeout * TimeSpan.TicksPerMillisecond);

            while (true)
            {
                ScriptInstance? ScriptInstance;

                if (timeout > 0)
                {
                    //check for timeout
                    if (DateTime.UtcNow > Timeout)
                        break;
                }

                ScriptInstance = _commandLink.FetchScriptInstance(scriptInstanceId);
                if (ScriptInstance.HasValue)
                {
                    if (predicate(ScriptInstance.Value))
                        return ScriptInstance.Value;
                }
                System.Threading.Thread.Sleep(0);
            }
            throw new TimeoutException();
        }

        protected ScriptInstance WaitForScriptInstance(long scriptInstanceId, bool isFinal)
        {
            return WaitForScriptInstance(
                scriptInstanceId,
                DefaultTimeout,
                delegate(ScriptInstance si) { return !isFinal || FinalStateAttribute.IsFinal(CommandLink.GetStatusFromInt(si.Status)); });
        }

        protected ScriptInstance WaitForScriptInstance(long scriptInstanceId)
        {
            return WaitForScriptInstance(scriptInstanceId, true);
        }

        protected CommandStatus[] WaitForScriptGroup(long commandId)
        {
            return WaitForScriptGroup(commandId, DefaultTimeout);
        }

        protected CommandStatus[] WaitForScriptGroup(long commandId, int timeout)
        {
            CommandStatus scriptGroupStatus = null;
            CommandStatus[] scriptInstancesStatus = null;

            // Wait for Script Group to complete
            scriptGroupStatus = _commandLink.WaitForCommand(commandId, timeout);

            // Parse result for the list of ScriptInstance Id's
            int[] scriptCommandIds = GetScriptInstancesFromResult(scriptGroupStatus);

            // Wait for each script to complete
            if (scriptCommandIds.Length > 0)
            {
                scriptInstancesStatus = new CommandStatus[scriptCommandIds.Length];
                for (int scriptLoop = 0; scriptLoop < scriptCommandIds.Length; scriptLoop++)
                {
                    _report.Debug("Waiting for ScriptInstance: {0}", scriptCommandIds[scriptLoop]);
                    ScriptInstance scriptInstance = WaitForScriptInstance(scriptCommandIds[scriptLoop]);
                    CommandState commandState = CommandLink.GetStatusFromInt(scriptInstance.Status);
                    scriptInstancesStatus[scriptLoop] = new CommandStatus(scriptInstance.Instance, commandState, scriptInstance.Report);
                    PrintCommandStateString(commandState);
                }
            }

            // Return the array of results
            return scriptInstancesStatus;
        }

        protected int[] GetScriptInstancesFromResult(CommandStatus commandStatus)
        {
            StringReader stringReader = new StringReader(commandStatus.XmlResult);
            XmlReader xmlReader = XmlReader.Create(stringReader);
            System.Data.SqlTypes.SqlXml sqlXml = new System.Data.SqlTypes.SqlXml(xmlReader);
            WSMCommon.Control.Result.XmlParser xmlParser = new WSMCommon.Control.Result.XmlParser(sqlXml);
            int[] scriptInstancesList = xmlParser.ReadAll<int>("/result/details/result/details/script-instance");

            return scriptInstancesList;
        }

        protected CommandState GetCommandStatus(long commandId)
        {
            CommandState commandState = CommandState.Undefined;
            commandState = _commandLink.QueryCommandStatus(commandId);
            //Once the command is "complete" then a script instance exists to track its running state
            if (commandState == CommandState.Completed)
            {
                ScriptInstance scriptInstance = _commandLink.WaitForScriptInstance(commandId, DefaultTimeout);
                commandState = CommandLink.GetStatusFromInt(scriptInstance.Status);
            }
            return commandState;
        }

        protected string PrintCommandStateString(CommandState commandState)
        {
            string commandStateStr = "Command State " + commandState.ToString();
            _report.Info(commandStateStr);
            return commandStateStr;
        }

        protected bool IsPassingCompleteState(CommandState commandState, WSMonitor.Framework.Scripting.ScriptType scriptType)
        {
            bool retVal = false;
            if (scriptType == WSMonitor.Framework.Scripting.ScriptType.General)
            {
                if (commandState == CommandState.Completed)
                    retVal = true;
            }
            else if (scriptType == WSMonitor.Framework.Scripting.ScriptType.Test)
            {
                if ((commandState == CommandState.Success)
                    || (commandState == CommandState.Failed))
                    retVal = true;
            }
            return retVal;
        }

        protected bool IsPassingCompleteState(CommandState commandState)
        {
            bool retVal = false;
            if ((commandState == CommandState.Success)
                || (commandState == CommandState.Failed)
                || (commandState == CommandState.Completed))
                retVal = true;
            return retVal;
        }
        #endregion

        #region Scripts
        protected string ReadScriptFile(string ScriptFilename)
        {
            string testScript = "";

            if (!File.Exists(Path.Combine(_inputFilesPath, ScriptFilename)))
            {
                throw new FileNotFoundException("ReadScriptFile() could not find the test file", ScriptFilename);
            }

            testScript = File.ReadAllText(Path.Combine(_inputFilesPath, ScriptFilename));

            return testScript;
        }

        protected int AddScriptFile(string ScriptFilename, int[] TestEnvironments)
        {
            string testScriptAlias = GetAliasFromScriptFileName(ScriptFilename);
            _report.Debug("Adding Script Alias: --{0}--", testScriptAlias);

            return AddScript(testScriptAlias, ReadScriptFile(ScriptFilename), TestEnvironments);
        }

        protected string DeleteScript(int ScriptId)
        {
            ScriptRemoveParameters removeParam = new ScriptRemoveParameters();
            removeParam.Identifier = ScriptId;

            CommandResponse comResponse = _commandLink.SendCommand(removeParam);

            _report.Debug("ScriptRemoveParameters returned {0}", comResponse.XmlResult);
            return comResponse.XmlResult;
        }

        protected int AddScript(string TestScriptAlias, string TestScriptString, int[] TestEnvironments)
        {
            ScriptInformation scriptInfo = new ScriptInformation(TestScriptAlias, TestScriptString);

            ScriptAddParameters addParam = new ScriptAddParameters();
            addParam.Environments = TestEnvironments;
            addParam.Script = scriptInfo;
            addParam.Script.Flag = 0;
            addParam.Script.Period = 0;

            CommandResponse comResponse = _commandLink.SendCommand(addParam);

            _report.Debug("ScriptAddParameters returned {0}", comResponse.XmlResult);
            return GetIntFromSprocReturn(comResponse.XmlResult);
        }

        protected int UpdateScript(int ScriptId, string TestScriptAlias, string TestScriptString, int[] TestEnvironments)
        {
            ScriptInformation scriptInfo;
            if ((TestEnvironments != null) && (TestEnvironments.Length == 1))
                scriptInfo = GetScript(TestEnvironments[0], ScriptId);
            else
                scriptInfo = GetScript(ScriptId);

            if (TestScriptAlias != null)
                scriptInfo.Alias = TestScriptAlias;
            if (TestScriptString != null)
                scriptInfo.SourceCode = TestScriptString;

            ScriptUpdateParameters updateParam = new ScriptUpdateParameters();
            updateParam.Environments = TestEnvironments;
            updateParam.Script = scriptInfo;

            CommandResponse comResponse = _commandLink.SendCommand(updateParam);

            _report.Debug("ScriptUpdateParameters returned {0}", comResponse.XmlResult);
            return GetIntFromSprocReturn(comResponse.XmlResult);
        }

        protected int UpdateScriptPeriodFlag(int ScriptId, int[] TestEnvironments, int Period, int Flag)
        {
            ScriptInformation scriptInfo;
            if ((TestEnvironments != null) && (TestEnvironments.Length == 1))
                scriptInfo = GetScript(TestEnvironments[0], ScriptId);
            else
                scriptInfo = GetScript(ScriptId);

            if (Period >= 0)
                scriptInfo.Period = Period;
            if (Flag >= 0)
                scriptInfo.Flag = Flag;

            ScriptUpdateParameters updateParam = new ScriptUpdateParameters();
            updateParam.Environments = TestEnvironments;
            updateParam.Script = scriptInfo;

            CommandResponse comResponse = _commandLink.SendCommand(updateParam);

            _report.Debug("ScriptUpdateParameters returned {0}", comResponse.XmlResult);
            return GetIntFromSprocReturn(comResponse.XmlResult);
        }

        protected long RunScript(int TestScriptId, int[] TestEnvironments)
        {
            foreach (int testEnvironment in TestEnvironments)
            {
                _report.Debug("Rebuilding scritps in environment {0}", testEnvironment);
                RebuildEnvironmentScripts(testEnvironment);
                //System.Threading.Thread.Sleep(RebuildScriptsTimeout);
            }
            _report.Debug("Scripts Rebuilt");
            ScriptStartParameters startParam = new ScriptStartParameters();
            startParam.Environments = TestEnvironments;
            startParam.Identifier = TestScriptId;
            startParam.User = TestUsername;

            CommandResponse comResponse = _commandLink.SendCommand(startParam);

            _report.Debug("ScriptStartParameters returned {0}", comResponse.XmlResult);
            return GetLongFromSprocReturn(comResponse.XmlResult);
        }

        protected long RunScriptWithoutRebuild(int TestScriptId, int[] TestEnvironments)
        {
            ScriptStartParameters startParam = new ScriptStartParameters();
            startParam.Environments = TestEnvironments;
            startParam.Identifier = TestScriptId;
            startParam.User = TestUsername;

            CommandResponse comResponse = _commandLink.SendCommand(startParam);

            _report.Debug("ScriptStartParameters returned {0}", comResponse.XmlResult);
            return GetLongFromSprocReturn(comResponse.XmlResult);
        }

        protected string CancelScript(long CommandId)
        {
            ScriptCancelParameters cancelParam = new ScriptCancelParameters();
            cancelParam.Instance = CommandId;
            cancelParam.User = TestUsername;

            _report.Debug("Cancelling ScriptInstance: {0}", CommandId);
            CommandResponse comResponse = _commandLink.SendCommand(cancelParam);

            _report.Debug("ScriptCancelParameters returned {0}", comResponse.XmlResult);
            return comResponse.XmlResult;
        }

        protected string PauseScript(long CommandId)
        {
            ScriptPauseParameters pauseParam = new ScriptPauseParameters();
            pauseParam.Instance = CommandId;
            pauseParam.User = TestUsername;

            _report.Debug("Pausing ScriptInstance: {0}", CommandId);
            CommandResponse comResponse = _commandLink.SendCommand(pauseParam);

            _report.Debug("ScriptPauseParameters returned {0}", comResponse.XmlResult);
            return comResponse.XmlResult;
        }

        protected string ResumeScript(long CommandId)
        {
            ScriptResumeParameters resumeParam = new ScriptResumeParameters();
            resumeParam.Instance = CommandId;
            resumeParam.User = TestUsername;

            _report.Debug("Resuming ScriptInstance: {0}", CommandId);
            CommandResponse comResponse = _commandLink.SendCommand(resumeParam);

            _report.Debug("ScriptResumeParameters returned {0}", comResponse.XmlResult);
            return comResponse.XmlResult;
        }

        protected ScriptInformation GetScript(int EnvironmentId, int ScriptId)
        {
            ScriptInformation scriptInfo;
            Nullable<ScriptInformation> nscriptInfo = _commandLink.FetchScript(EnvironmentId, ScriptId);

            if (nscriptInfo.HasValue)
            {
                scriptInfo = (ScriptInformation)nscriptInfo.Value;
                _report.Debug("ScriptInformation: {0} - {1}", scriptInfo.Identifier, scriptInfo.Alias);
            }
            else
            {
                throw new ArgumentNullException("nscriptInfo.Value", "No Script Found");
            }

            return scriptInfo;
        }

        protected ScriptInformation GetScript(int ScriptId)
        {
            ScriptInformation scriptInfo;
            Nullable<ScriptInformation> nscriptInfo = _commandLink.FetchScript(ScriptId);

            if (nscriptInfo.HasValue)
            {
                scriptInfo = (ScriptInformation)nscriptInfo.Value;
                _report.Debug("ScriptInformation: {0} - {1}", scriptInfo.Identifier, scriptInfo.Alias);
            }
            else
            {
                throw new ArgumentNullException("nscriptInfo.Value", "No Script Found");
            }

            return scriptInfo;
        }

        protected ScriptInformation[] GetAllScripts()
        {
            return _commandLink.EnumerateScripts();
        }

        protected ScriptInformation[] GetAllScripts(int EnvironmentId)
        {
            return _commandLink.EnumerateScripts(EnvironmentId);
        }

        protected ScriptInstance GetScriptInstance(long CommandId)
        {
            ScriptInstance scriptInstance;
            Nullable<ScriptInstance> nscriptInstance = _commandLink.FetchScriptInstance(CommandId);

            if (nscriptInstance.HasValue == false)
                throw new ArgumentNullException("nscriptInstance.Value", "No Script Instance Found");

            scriptInstance = (ScriptInstance)nscriptInstance.Value;
            _report.Debug("ScriptInstance: {0} - {1}", scriptInstance.Script, scriptInstance.Name);

            return scriptInstance;
        }
        #endregion

        #region Environments
        protected string DeleteEnvironment(int EnvironmentId)
        {
            EnvironmentRemoveParameters removeParam = new EnvironmentRemoveParameters();
            removeParam.Identifier = EnvironmentId;

            CommandResponse comResponse = _commandLink.SendCommand(removeParam);

            _report.Debug("EnvironmentRemoveParameters returned {0}", comResponse.XmlResult);
            return comResponse.XmlResult;
        }

        protected int AddEnvironment(string EnvName, string EnvVersion, string EnvHost, string EnvDescription,
            int EnvTestAspectGroup, int EnvGeneralAspectGroup)
        {
            string envCert = null;
            EnvironmentInformation envInfo = new EnvironmentInformation
                        (EnvName, EnvVersion, EnvHost, EnvDescription, envCert, EnvTestAspectGroup, EnvGeneralAspectGroup);

            EnvironmentAddParameters addParam = new EnvironmentAddParameters();
            addParam.Environment = envInfo;

            CommandResponse comResponse = _commandLink.SendCommand(addParam);

            _report.Debug("EnvironmentAddParameters returned {0}", comResponse.XmlResult);
            return GetIntFromSprocReturn(comResponse.XmlResult);
        }

        protected int UpdateEnvironment(int EnvironmentId, string EnvName, string EnvVersion, string EnvHost,
            string EnvDescription, int EnvTestAspectGroup, int EnvGeneralAspectGroup)
        {
            EnvironmentInformation envInfo = GetEnvironment(EnvironmentId);
            if (EnvName != null)
                envInfo.Name = EnvName;
            if (EnvVersion != null)
                envInfo.Version = EnvVersion;
            if (EnvHost != null)
                envInfo.Host = EnvHost;
            if (EnvDescription != null)
                envInfo.Description = EnvDescription;
            if (EnvTestAspectGroup >= 0)
                envInfo.TestAspectGroup = EnvTestAspectGroup;
            if (EnvGeneralAspectGroup >= 0)
                envInfo.GeneralAspectGroup = EnvGeneralAspectGroup;

            EnvironmentUpdateParameters updateParam = new EnvironmentUpdateParameters();
            updateParam.Environment = envInfo;
            updateParam.Identifier = EnvironmentId;

            CommandResponse comResponse = _commandLink.SendCommand(updateParam);

            _report.Debug("EnvironmentUpdateParameters returned {0}", comResponse.XmlResult);
            return GetIntFromSprocReturn(comResponse.XmlResult);
        }

        protected int UpdateEnvironmentCert(int EnvironmentId, string CertPath)
        {
            EnvironmentInformation envInfo = GetEnvironment(EnvironmentId);

            // Passing in null will set the cert to null which is valid for no cert required
            envInfo.Certificate = CertPath;

            EnvironmentUpdateParameters updateParam = new EnvironmentUpdateParameters();
            updateParam.Environment = envInfo;
            updateParam.Identifier = EnvironmentId;

            CommandResponse comResponse = _commandLink.SendCommand(updateParam);

            _report.Debug("EnvironmentUpdateParameters returned {0}", comResponse.XmlResult);
            return GetIntFromSprocReturn(comResponse.XmlResult);
        }

        protected string CancelEnvironmentScripts(long EnvironmentId)
        {
            EnvironmentCancelAllScriptsParameters cancelParam = new EnvironmentCancelAllScriptsParameters();
            cancelParam.Instance = EnvironmentId;
            cancelParam.User = TestUsername;

            CommandResponse comResponse = _commandLink.SendCommand(cancelParam);

            _report.Debug("EnvironmentCancelAllScriptsParameters returned {0}", comResponse.XmlResult);
            return comResponse.XmlResult;
        }

        protected string PauseEnvironmentScripts(long EnvironmentId)
        {
            EnvironmentPauseAllScriptsParameters pauseParam = new EnvironmentPauseAllScriptsParameters();
            pauseParam.Instance = EnvironmentId;
            pauseParam.User = TestUsername;

            CommandResponse comResponse = _commandLink.SendCommand(pauseParam);

            _report.Debug("EnvironmentPauseAllScriptsParameters returned {0}", comResponse.XmlResult);
            return comResponse.XmlResult;
        }

        protected string ResumeEnvironmentScripts(long EnvironmentId)
        {
            EnvironmentResumeAllScriptsParameters resumeParam = new EnvironmentResumeAllScriptsParameters();
            resumeParam.Instance = EnvironmentId;
            resumeParam.User = TestUsername;

            CommandResponse comResponse = _commandLink.SendCommand(resumeParam);

            _report.Debug("EnvironmentResumeAllScriptsParameters returned {0}", comResponse.XmlResult);
            return comResponse.XmlResult;
        }

        protected EnvironmentInformation GetEnvironment(int EnvironmentId)
        {
            EnvironmentInformation envInfo;
            Nullable<EnvironmentInformation> nenvInfo = _commandLink.FetchEnvironment(EnvironmentId);

            if (nenvInfo.HasValue)
            {
                envInfo = (EnvironmentInformation)nenvInfo.Value;
                _report.Debug("EnvironmentInformation: {0} - {1}", envInfo.Identifier, envInfo.Name);
            }
            else
            {
                throw new ArgumentNullException("nenvInfo.Value", "No Environment Found");
            }

            return envInfo;
        }

        protected EnvironmentInformation[] GetAllEnvironments()
        {
            return _commandLink.EnumerateEnvironments();
        }

        protected string RebuildEnvironmentScripts(int Environment)
        {
            EnvironmentDeprecateParameters rebuildParam = new EnvironmentDeprecateParameters();
            rebuildParam.Environment = Environment;
            rebuildParam.User = TestUsername;

            CommandResponse comResponse = _commandLink.SendCommand(rebuildParam);
            _report.Debug("EnvironmentDeprecateParameters returned {0}", comResponse.XmlResult);

            return comResponse.XmlResult;
        }
        #endregion

        #region Services
        protected string DeleteService(int ServiceId)
        {
            ServiceRemoveParameters removeParam = new ServiceRemoveParameters();
            removeParam.Identifier = ServiceId;

            CommandResponse comResponse = _commandLink.SendCommand(removeParam);

            _report.Debug("ServiceRemoveParameters returned {0}", comResponse.XmlResult);
            return comResponse.XmlResult;
        }

        protected int AddService(int SvcAspectGroup, int[] Environments, string SvcProtocol, string SvcAlias, string SvcHost)
        {
            ServiceInformation svcInfo = new ServiceInformation(SvcAspectGroup, SvcProtocol, SvcAlias, SvcHost, 0);

            ServiceAddParameters addParam = new ServiceAddParameters();
            addParam.Service = svcInfo;
            addParam.Environments = Environments;

            CommandResponse comResponse = _commandLink.SendCommand(addParam);

            _report.Debug("ServiceAddParameters returned {0}", comResponse.XmlResult);
            return GetIntFromSprocReturn(comResponse.XmlResult);
        }

        protected int UpdateService(int ServiceId, int SvcAspectGroup, int[] Environments, string SvcProtocol,
            string SvcAlias, string SvcHost, long SvcFlag)
        {
            ServiceInformation svcInfo;
            if((Environments != null) && (Environments.Length == 1))
                svcInfo = GetService(Environments[0], ServiceId);
            else
                svcInfo = GetService(ServiceId);

            if (SvcAspectGroup >= 0) // only 0 and higher are valid so we can use -1 to tell it not to update
                svcInfo.AspectGroup = SvcAspectGroup;
            if (SvcProtocol != null)
                svcInfo.Protocol = SvcProtocol;
            if (SvcAlias != null)
                svcInfo.Alias = SvcAlias;
            if (SvcHost != null)
                svcInfo.Host = SvcHost;
            if (SvcFlag >= 0) // only 0 and higher are valid so we can use -1 to tell it not to update
                svcInfo.Flag = SvcFlag;

            ServiceUpdateParameters updateParam = new ServiceUpdateParameters();
            updateParam.Service = svcInfo;
            updateParam.Environments = Environments;

            CommandResponse comResponse = _commandLink.SendCommand(updateParam);

            _report.Debug("ServiceUpdateParameters returned {0}", comResponse.XmlResult);
            return GetIntFromSprocReturn(comResponse.XmlResult);
        }

        protected ServiceInformation GetService(int ServiceId)
        {
            ServiceInformation serviceInfo;
            Nullable<ServiceInformation> nserviceInfo = _commandLink.FetchService(ServiceId);

            if (nserviceInfo.HasValue)
            {
                serviceInfo = (ServiceInformation)nserviceInfo.Value;
                _report.Debug("Service Info: {0} - {1}", serviceInfo.Identifier, serviceInfo.Alias);
            }
            else
            {
                throw new ArgumentNullException("nserviceInfo.Value", "No Service Found");
            }

            return serviceInfo;
        }

        protected ServiceInformation GetService(int EnvironmentId, int ServiceId)
        {
            ServiceInformation serviceInfo;
            Nullable<ServiceInformation> nserviceInfo = _commandLink.FetchService(EnvironmentId, ServiceId);

            if (nserviceInfo.HasValue)
            {
                serviceInfo = (ServiceInformation)nserviceInfo.Value;
                _report.Debug("Service Info: {0} - {1}", serviceInfo.Identifier, serviceInfo.Alias);
            }
            else
            {
                throw new ArgumentNullException("nserviceInfo.Value", "No Service Found");
            }

            return serviceInfo;
        }

        protected ServiceInformation[] GetAllServices()
        {
            return _commandLink.EnumerateServices();
        }

        protected ServiceInformation[] GetAllServices(int EnvironmentId)
        {
            return _commandLink.EnumerateServices(EnvironmentId);
        }
        #endregion

        #region AspectGroup
        protected string DeleteAspectGroup(int AspectGroupId)
        {
            AspectGroupRemoveParameters removeParam = new AspectGroupRemoveParameters();
            removeParam.Identifier = AspectGroupId;

            CommandResponse comResponse = _commandLink.SendCommand(removeParam);

            _report.Debug("AspectGroupRemoveParameters returned {0}", comResponse.XmlResult);
            return comResponse.XmlResult;
        }

        protected int AddAspectGroup(string AspectGroupName, string AspectGroupDescription)
        {
            AspectGroupInformation agInfo = new AspectGroupInformation(AspectGroupName, AspectGroupDescription);

            AspectGroupAddParameters addParam = new AspectGroupAddParameters();
            addParam.AspectGroup = agInfo;

            CommandResponse comResponse = _commandLink.SendCommand(addParam);

            _report.Debug("AspectGroupAddParameters returned {0}", comResponse.XmlResult);
            return GetIntFromSprocReturn(comResponse.XmlResult);
        }

        protected AspectGroupInformation GetAspectGroup(int AspectGroupId)
        {
            AspectGroupInformation agInfo;
            Nullable<AspectGroupInformation> nagInfo = _commandLink.FetchAspectGroup(AspectGroupId);

            if (nagInfo.HasValue)
            {
                agInfo = (AspectGroupInformation)nagInfo.Value;
                _report.Debug("AspectGroup Info: {0} - {1}", agInfo.Identifier, agInfo.Name);
            }
            else
            {
                throw new ArgumentNullException("nagInfo.Value", "No AspectGroup Found");
            }

            return agInfo;
        }

        protected AspectGroupInformation[] GetAllAspectGroups()
        {
            return _commandLink.EnumerateAspectGroups();
        }
        #endregion

        #region Reporting
        protected WSMReport GetReport(long commandId)
        {
            ScriptInstance scriptInfo = _commandLink.WaitForScriptInstance(commandId, DefaultTimeout);
            WSMReport wsmReport = WSMReport.ReportFactory.CreateReport(scriptInfo.Report);
            return wsmReport;
        }

        protected TEST_RESULTS ValidateExecutionReport(ExecutionReportProxy ExecutionReport, WSMonitor.Framework.Reporting.ResultCode ExpectedResult)
        {
            TEST_RESULTS resultCode = TEST_RESULTS.FAILED;

            if ((ExecutionReport.ExecutionResult == ExpectedResult)
                && (ExecutionReport.ExecutionStart > DateTime.MinValue)
                && (ExecutionReport.ExecutionDuration > 0)
                && (String.IsNullOrEmpty(ExecutionReport.Name) == false))
            {
                resultCode = TEST_RESULTS.PASSED;
            }
            else
            {
                _report.Error("testProxy.ExecutionResult = {0}", ExecutionReport.ExecutionResult.ToString());
                _report.Error("testProxy.ExecutionStart = {0}", ExecutionReport.ExecutionStart.ToString());
                _report.Error("testProxy.ExecutionDuration = {0}", ExecutionReport.ExecutionDuration.ToString());
                _report.Error("testProxy.Name = {0}", ExecutionReport.Name);
            }

            return resultCode;
        }
        #endregion

        #region ScriptGroups
        protected string DeleteScriptGroup(int ScriptGroupId)
        {
            ScriptGroupRemoveParameters removeParam = new ScriptGroupRemoveParameters();
            removeParam.Identifier = ScriptGroupId;

            CommandResponse comResponse = _commandLink.SendCommand(removeParam);

            _report.Debug("ScriptGroupRemoveParameters returned {0}", comResponse.XmlResult);
            return comResponse.XmlResult;
        }

        protected int AddScriptGroup(string TestScriptGroupName, string TestScriptGroupDesc, int[] TestScriptIds, int[] TestEnvironments)
        {
            ScriptGroupInformation scriptGroupInfo = new ScriptGroupInformation();
            scriptGroupInfo.Name = TestScriptGroupName;
            scriptGroupInfo.Description = TestScriptGroupDesc;
            scriptGroupInfo.Scripts = TestScriptIds;

            ScriptGroupAddParameters addParam = new ScriptGroupAddParameters();
            addParam.Environments = TestEnvironments;
            addParam.ScriptGroup = scriptGroupInfo;
            addParam.ScriptGroup.Flag = 0;
            addParam.ScriptGroup.Period = 0;

            CommandResponse comResponse = _commandLink.SendCommand(addParam);

            _report.Debug("ScriptGroupAddParameters returned {0}", comResponse.XmlResult);
            return GetIntFromSprocReturn(comResponse.XmlResult);
        }

        protected int UpdateScriptGroup(int ScriptGroupId, string TestScriptGroupName, string TestScriptGroupDesc, int[] TestScriptIds, int[] TestEnvironments)
        {
            ScriptGroupInformation scriptGroupInfo;
            if ((TestEnvironments != null) && (TestEnvironments.Length == 1))
                scriptGroupInfo = GetScriptGroup(TestEnvironments[0], ScriptGroupId);
            else
                scriptGroupInfo = GetScriptGroup(ScriptGroupId);

            if (TestScriptGroupName != null)
                scriptGroupInfo.Name = TestScriptGroupName;
            if (TestScriptGroupDesc != null)
                scriptGroupInfo.Description = TestScriptGroupDesc;
            if (TestScriptIds != null)
                scriptGroupInfo.Scripts = TestScriptIds;

            ScriptGroupUpdateParameters updateParam = new ScriptGroupUpdateParameters();
            updateParam.Environments = TestEnvironments;
            updateParam.ScriptGroup = scriptGroupInfo;

            CommandResponse comResponse = _commandLink.SendCommand(updateParam);

            _report.Debug("ScriptGroupUpdateParameters returned {0}", comResponse.XmlResult);
            return GetIntFromSprocReturn(comResponse.XmlResult);
        }

        protected int UpdateScriptGroupPeriodFlag(int ScriptGroupId, int[] TestEnvironments, int Period, int Flag)
        {
            ScriptGroupInformation scriptGroupInfo;
            if ((TestEnvironments != null) && (TestEnvironments.Length == 1))
                scriptGroupInfo = GetScriptGroup(TestEnvironments[0], ScriptGroupId);
            else
                scriptGroupInfo = GetScriptGroup(ScriptGroupId);

            if (Period >= 0)
                scriptGroupInfo.Period = Period;
            if (Flag >= 0)
                scriptGroupInfo.Flag = Flag;

            ScriptGroupUpdateParameters updateParam = new ScriptGroupUpdateParameters();
            updateParam.Environments = TestEnvironments;
            updateParam.ScriptGroup = scriptGroupInfo;

            CommandResponse comResponse = _commandLink.SendCommand(updateParam);

            _report.Debug("ScriptGroupUpdateParameters returned {0}", comResponse.XmlResult);
            return GetIntFromSprocReturn(comResponse.XmlResult);
        }

        protected long RunScriptGroup(int TestScriptGroupId, int TestEnvironment)
        {
            _report.Debug("Rebuilding scritps in environment {0}", TestEnvironment);
            RebuildEnvironmentScripts(TestEnvironment);
            _report.Debug("Scripts Rebuilt");
            ScriptGroupStartParameters startParam = new ScriptGroupStartParameters();
            startParam.Environment = TestEnvironment;
            startParam.Identifier = TestScriptGroupId;
            startParam.User = TestUsername;

            CommandResponse comResponse = _commandLink.SendCommand(startParam);

            _report.Debug("ScriptGroupStartParameters returned {0}", comResponse.XmlResult);
            return GetLongFromSprocReturn(comResponse.XmlResult);
        }

        protected long RunScriptGroupWithoutRebuild(int TestScriptGroupId, int TestEnvironment)
        {
            ScriptGroupStartParameters startParam = new ScriptGroupStartParameters();
            startParam.Environment = TestEnvironment;
            startParam.Identifier = TestScriptGroupId;
            startParam.User = TestUsername;

            CommandResponse comResponse = _commandLink.SendCommand(startParam);

            _report.Debug("ScriptGroupStartParameters returned {0}", comResponse.XmlResult);
            return GetLongFromSprocReturn(comResponse.XmlResult);
        }

        protected ScriptGroupInformation GetScriptGroup(int ScriptGroupId)
        {
            ScriptGroupInformation scriptGroupInfo;
            Nullable<ScriptGroupInformation> nscriptGroupInfo = _commandLink.FetchScriptGroup(ScriptGroupId);

            if (nscriptGroupInfo.HasValue)
            {
                scriptGroupInfo = (ScriptGroupInformation)nscriptGroupInfo.Value;
                _report.Debug("Script Group Info: {0} - {1}", scriptGroupInfo.Identifier, scriptGroupInfo.Name);
            }
            else
            {
                throw new ArgumentNullException("nscriptGroupInfo.Value", "No Script Group Found");
            }

            return scriptGroupInfo;
        }

        protected ScriptGroupInformation GetScriptGroup(int EnvironmentId, int ScriptGroupId)
        {
            ScriptGroupInformation scriptGroupInfo;
            Nullable<ScriptGroupInformation> nscriptGroupInfo = _commandLink.FetchScriptGroup(EnvironmentId, ScriptGroupId);

            if (nscriptGroupInfo.HasValue)
            {
                scriptGroupInfo = (ScriptGroupInformation)nscriptGroupInfo.Value;
                _report.Debug("Script Group Info: {0} - {1}", scriptGroupInfo.Identifier, scriptGroupInfo.Name);
            }
            else
            {
                throw new ArgumentNullException("nscriptGroupInfo.Value", "No Script Group Found");
            }

            return scriptGroupInfo;
        }

        protected ScriptGroupInformation[] GetAllScriptGroups()
        {
            return _commandLink.EnumerateScriptGroups();
        }

        protected ScriptGroupInformation[] GetAllScriptGroups(int EnvironmentId)
        {
            return _commandLink.EnumerateScriptGroups(EnvironmentId);
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GeneralScriptReportedSuccess.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class GeneralC97A306652654c96B1BBAE79A52AE629 : Script
    {
        [Native.Start]
        public bool Run()
        {
            Report testReport;
            ExecutionReportProxy testProxy;

            System.Threading.Thread.Sleep(5000);
            testReport = Report.Create(ReportCategory.GeneralScript, typeof(Report));
            //testReport.Guid = new Guid("C97A306652654c96B1BBAE79A52AE629");
            testProxy = new ExecutionReportProxy(testReport);
            testProxy.Name = "GeneralScriptReportedSuccess";
            testProxy.ExecutionStart = new DateTime(2001, 1, 1);
            testProxy.ExecutionDuration = 3;
            testProxy.ExecutionResult = ResultCode.Success;
            //testProxy.SetValue("Text", "Logged Text Information");
            testReport.Close();

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GlobalStateGeneralScript.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class General8977B406E764434aB8AB0262A8C89E09 : Script
    {
        [Native.Start]
        public bool Run(int param)
        {
            if (param != (int)Script.Globals["GlobalStateVar"])
            {
                throw new Exception(String.Format("General: Param {0} != GlobalVar {1}",
                        param,
                        Script.Globals["GlobalStateVar"]));
            }

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GlobalStateTestScript.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test92564B633CBF4676A6511C06E962CBDD : Script
    {
        [Native.Start]
        public bool Run()
        {
            Script.Globals["GlobalStateVar"] = 5;

            Execute("GlobalStateGeneralScript", 5);

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\GeneralScriptReportLoggingSupport.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class General462C40EEDD904decB52BECF9957AE28C : Script
    {
        [Native.Start]
        public bool Run()
        {
            System.Threading.Thread.Sleep(5000);

            Report report = Report.Create(ReportCategory.GeneralScript);
            Report.Message("TestScriptReportLoggingSupport:{0}", report.Guid);
            Report.WriteProperty("testname", "testvalue");
            report.Close();

            return ExecuteTest("GeneralNoOp");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\PauseResumeSingleScript.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test682431BFEE1E498998D0E44A75F2D511 : Script
    {
        [Native.Start]
        public bool Run()
        {
            System.Threading.Thread.Sleep(15000);

            Random R = new Random();
            int rInt = R.Next();

            System.Threading.Thread.Sleep(15000);

            return rInt % 2 == 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\ServiceAPIReportedCancelled.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;
using LiveServiceMonitor.Framework;
using LiveServiceMonitor.Framework.Services;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class Service52BC54C27125456fA7D6462C8338A781 : Script
    {
        [Native.Start]
        public bool Run()
        {
            int svcReturn = (int)Service.BVTService.ReturnInteger(5);
            if (svcReturn != 5)
            {
                string errorMsg = string.Format("ReturnInteger returned: {0}, Expected: {1}", svcReturn, 5);
                throw new Framework.Exceptions.LogicalServiceFailureException(errorMsg);
            }
            System.Threading.Thread.Sleep(30000);

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestCallingService.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;
using LiveServiceMonitor.Framework;
using LiveServiceMonitor.Framework.Services;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test52917880524B4798B2AC09B99AA545CB : Script
    {
        [Native.Start]
        public bool Run()
        {
            int svcReturn = Service.BVTService.ReturnInteger(5);
            if (svcReturn != 5)
            {
                string errorMsg = string.Format("ReturnInteger returned: {0}, Expected: {1}", svcReturn, 5);
                throw new Framework.Exceptions.LogicalServiceFailureException(errorMsg);
            }
            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\IdcrlExtTest.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;

using xonline.tools.lsmonitor.extensions.idcrl;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class TestCCFF19906A4441148BE0038C0844144B : Script
    {
        private const string rpsSite = "Int-rps.xboxlive.com";
        private const string rpsPolicy = "mbi";
        private const string uacsSite = "https://131.107.28.202/xuacs/useraccount.asmx/SignIn";
        private const string zuneuser = "DecidingSinger4@xboxtest.com";
        private const string zunepassword = "secret";

        [Native.Start]
        public bool Run()
        {
            Guid testGuid = Guid.NewGuid();
            int ppcrlVersion = 0;
            IdcrlHelper defaultIdcrlHelper = new IdcrlHelper();
            IdcrlHelper customIdcrlHelper = new IdcrlHelper(testGuid, ppcrlVersion, IdcrlHelper.DefaultProxyUserInfo);

            string signinXml = UserSignin(zuneuser, zunepassword);
            Report.Message("Default Signin Result: {0}", signinXml);
            Report.Message("Default IdcrlVersion: {0}", defaultIdcrlHelper.PPCRLVersion);
            Report.Message("Default ApplicationGuid: {0}", defaultIdcrlHelper.ApplicationGuid.ToString());

            signinXml = InstancedUserSignin(zuneuser, zunepassword, customIdcrlHelper);
            Report.Message("Custom Signin Result: {0}", signinXml);
            Report.Message("Custom IdcrlVersion: {0}", customIdcrlHelper.PPCRLVersion);
            Report.Message("Custom ApplicationGuid: {0}", customIdcrlHelper.ApplicationGuid.ToString());

            // If we can't access this test code, the script will throw and will fail.

            if (defaultIdcrlHelper.ApplicationGuid != IdcrlHelper.DefaultApplicationGuid)
                throw new Framework.Exceptions.LogicalScriptFailureException("The result from the loaded test code did not match expected");
            if (defaultIdcrlHelper.PPCRLVersion != IdcrlHelper.DefaultPPCRLVersion)
                throw new Framework.Exceptions.LogicalScriptFailureException("The result from the loaded test code did not match expected");
            if (customIdcrlHelper.ApplicationGuid != testGuid)
                throw new Framework.Exceptions.LogicalScriptFailureException("The result from the loaded test code did not match expected");
            if (customIdcrlHelper.PPCRLVersion != ppcrlVersion)
                throw new Framework.Exceptions.LogicalScriptFailureException("The result from the loaded test code did not match expected");

            return true;
        }

        public string UserSignin(string user, string password)
        {
            string signinTicket;

            Report.WriteProperty("User.Name", user);
            Report.WriteProperty("User.Password", password);

            signinTicket = IdcrlHelper.GetRpsTicket(user, password, rpsSite, rpsPolicy, IdcrlHelper.DefaultProxyUserInfo);
            if(signinTicket == null)
                throw new Framework.Exceptions.LogicalScriptFailureException("GetRpsTicket returned a null string");

            return signinTicket;
        }

        public string InstancedUserSignin(string user, string password, IdcrlHelper helper)
        {
            string signinTicket;

            Report.WriteProperty("User.Name", user);
            Report.WriteProperty("User.Password", password);

            signinTicket = helper.GetRpsTicket(user, password, rpsSite, rpsPolicy);
            if (signinTicket == null)
                throw new Framework.Exceptions.LogicalScriptFailureException("GetRpsTicket returned a null string");

            return signinTicket;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\ServiceAPIReportedFinished.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;
using LiveServiceMonitor.Framework;
using LiveServiceMonitor.Framework.Services;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class ServiceA893BCF28361484b94ACFA73871B934F : Script
    {
        [Native.Start]
        public bool Run()
        {
            int svcReturn = (int)Service.BVTService.ReturnInteger(5);
            if (svcReturn != 5)
            {
                string errorMsg = string.Format("ReturnInteger returned: {0}, Expected: {1}", svcReturn, 5);
                throw new Framework.Exceptions.LogicalServiceFailureException(errorMsg);
            }
            /*Report testReport = new Report();
            ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
            testProxy.Name = "ServiceAPIReportedFinished";
            testProxy.ExecutionStart = new DateTime(2001, 1, 1);
            testProxy.ExecutionDuration = 3;
            testProxy.ExecutionResult = ResultCode.Finished;
            testReport.Close();*/

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestCallingExceptions.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test77E2CFEF57D84b4dB39F4DBFFA22BD52 : Script
    {
        [Native.Start]
        public bool Run()
        {
            // If we can't access this common code, the script will throw and will fail.
            try
            {
                throw new Framework.Exceptions.ScriptException("Testing Framework Exceptions");
            }
            catch (Framework.Exceptions.ScriptException excep)
            {
                excep.ToString();
            }

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\SampleSvcTest.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;
using LiveServiceMonitor.Framework;
using LiveServiceMonitor.Framework.Services;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class LiveServiceMonitoringSampleTestScript : Script
    {
        [Native.Start]
        public bool Run()
        {
            bool bTestsSucceeded = true;

            Services.UnknownSvcProxies.SvcReturnType svcReturn = (Services.UnknownSvcProxies.SvcReturnType)Service.XblUnknownSvc.CompGetXQSConfig(/*TitleID*/ 0x54510016);
            if (svcReturn == null)
                bTestsSucceeded == false;
            bTestsSucceeded = bTestsSucceeded && (0 != (uint)Service.XblMessaging.SendTitleUserMessage(/*GamerTag:*/ "xebvtprod:A7049955"));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.SendMessageForDelete(/*GamerTag:*/ "xebvtprod:A7049955"));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.SendMessageForRevoke(/*GamerTag:*/ "xebvtprod:A7049955"));

            // Return types will be in the Services.[Service Name]Proxies namespace where [Service Name] is the actual service name
            // such as Alerts, Stats, Query... all returns are of type "object" and must be cast to the correct return type
            Services.MessagingProxies.EnumMessagesResponse enumMessageReturn = 
                (Services.MessagingProxies.EnumMessagesResponse) Service.XblMessaging.EnumMessages(/*GamerTag:*/ "xebvtprod:A7049955");
            if ((enumMessageReturn != null) && (enumMessageReturn.length > 0))
            {
                bool enumMessagePassed = true;
                foreach (Services.MessagingProxies.EnumMessagesResponse msgResponse in enumMessageReturn)
                {
                    //Loop through each message and check that the time is in the past (could do other checks as well)
                    if (msgResponse.SentTime > DateTime.Now)
                        enumMessagePassed = false;
                }
                // if any of the messages failed fail all
                if (enumMessagePassed == false)
                    bTestsSucceeded = false;
            }
            else
            {
                bTestsSucceeded = false;
            }

            bTestsSucceeded = bTestsSucceeded && (0 != (uint)Service.XblAlerts.ScheduleContentAlert());
            bTestsSucceeded = bTestsSucceeded && (true == (bool)Service.XblAlerts.SubscriberExists(/*webId*/ 0xFFFFFFFFFFFFFFFF));
            bTestsSucceeded = bTestsSucceeded && (0 != (uint)Service.XblMessaging.DeleteUserTitle(/*GamerTag:*/ "xebvtprod:FFFE0000"));
            bTestsSucceeded = bTestsSucceeded && (0 != (uint)Service.XblMessaging.DeleteUserTitle(/*GamerTag:*/ "xebvtprod:45410062"));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUnknownSvc.LSPGetSitePuids());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUserAccount.LinkUser(Owner));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUnknownSvc.LSPLookupGamerTags(xebvtprod));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUnknownSvc.LSPLookupPuids(xebvtprod));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUserAccount.LinkedGamerTags());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblGeneralInfo.LinkedGamerTags());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUnknownSvc.ValidateLinkedGamerTags());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblWeb.GamerProfileTest(cthulhu_test_1));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblWeb.FriendsTest(cthulhu_test_1));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblWeb.AchievementTest(cthulhu_test_1));
            bTestsSucceeded = bTestsSucceeded && (0 != (uint)Service.XblUserAccount.GetUserSettings(/*GamerTag:*/ xebvtprod));
            bTestsSucceeded = bTestsSucceeded && (true == (bool)Service.XblUserAccount.SetInfoSharing(/*GamerTag:*/ xebvtprod));
            bTestsSucceeded = bTestsSucceeded && (null != (Services.UserAccountProxies.GetAccountStatusResult)Service.XblUserAccount.GetAccountStatus(/*GamerTag:*/ xebvtprod));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUnknownSvc.GetFriends(/*GamerTag:*/ xebvtprod));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.EnumUserTitles(/*GamerTag:*/ xebvtprod));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUnknownSvc.ValidateLinkedUser(Owner));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblGeneralInfo.GetTitleList());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUnknownSvc.TitleListValidate());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBList(/*title:*/ 0x54510016));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.LBListValidate(/*title:*/ 0x54510016));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByType(/*TitleID*/ 0x54510016, /*Type:*/ LeaderboardType.Regular));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByType(/*TitleID*/ 0x54510016, /*Type:*/ LeaderboardType.RegularTeam));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByType(/*TitleID*/ 0x54510016, /*Type:*/ LeaderboardType.CompetitionTemplate));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByType(/*TitleID*/ 0x54510016, /*Type:*/ LeaderboardType.CompetitionTemplateTeam));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByTypeValidate(/*TitleID*/ 0x54510016, /*Type:*/ LeaderboardType.Regular));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByTypeValidate(/*TitleID*/ 0x54510016, /*Type:*/ LeaderboardType.RegularTeam));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByTypeValidate(/*TitleID*/ 0x54510016, /*Type:*/ LeaderboardType.CompetitionTemplate));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByTypeValidate(/*TitleID*/ 0x54510016, /*Type:*/ LeaderboardType.CompetitionTemplateTeam));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUnknownSvc.LSPGetSiteInfo(54510016));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBList(/*title:*/ 0xA7049955));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.LBListValidate(/*title:*/ 0xA7049955));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByType(/*TitleID*/ 0xA7049955, /*Type:*/ LeaderboardType.Regular));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByType(/*TitleID*/ 0xA7049955, /*Type:*/ LeaderboardType.RegularTeam));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByType(/*TitleID*/ 0xA7049955, /*Type:*/ LeaderboardType.CompetitionTemplate));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByType(/*TitleID*/ 0xA7049955, /*Type:*/ LeaderboardType.CompetitionTemplateTeam));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByTypeValidate(/*TitleID*/ 0xA7049955, /*Type:*/ LeaderboardType.Regular));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByTypeValidate(/*TitleID*/ 0xA7049955, /*Type:*/ LeaderboardType.RegularTeam));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByTypeValidate(/*TitleID*/ 0xA7049955, /*Type:*/ LeaderboardType.CompetitionTemplate));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByTypeValidate(/*TitleID*/ 0xA7049955, /*Type:*/ LeaderboardType.CompetitionTemplateTeam));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.SendTitleWideMessageForDelete(A7049955));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.EnumTitleWideMessages(A7049955));
            bTestsSucceeded = bTestsSucceeded && (null != (Services.SignatureProxies.CreateSignatureResult)Service.XblSignature.CreateSignature(/*title:*/ 0xA7049955));
            bTestsSucceeded = bTestsSucceeded && (null != (Services.StatsProxies.EnumerateLBResult)Service.XblStats.EnumerateLB(/*title:*/ 0x54510016, /*LBID:*/ 41));
            bTestsSucceeded = bTestsSucceeded && (null != (Services.StatsProxies.EnumerateLBRawResult)Service.XblStats.EnumerateLBRaw(/*title:*/ 0x54510016, /*LBID:*/ 41));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBDetailsForGamerTags(/*title:*/ 0x54510016, /*LBID:*/ 41));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBForGamerTags(/*title:*/ 0x54510016, /*LBID:*/ 41));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBNearGamerTag(/*title:*/ 0x54510016, /*LBID:*/ 41));
            bTestsSucceeded = bTestsSucceeded && (null != (Services.StatsProxies.EnumerateLBResult)Service.XblStats.EnumerateLB(/*title:*/ 0xA7049955, /*LBID:*/ 107));
            bTestsSucceeded = bTestsSucceeded && (null != (Services.StatsProxies.EnumerateLBRawResult)Service.XblStats.EnumerateLBRaw(/*title:*/ 0xA7049955, /*LBID:*/ 107));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBDetailsForGamerTags(/*title:*/ 0xA7049955, /*LBID:*/ 107));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBForGamerTags(/*title:*/ 0xA7049955, /*LBID:*/ 107));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBNearGamerTag(/*title:*/ 0xA7049955, /*LBID:*/ 107));
            bTestsSucceeded = bTestsSucceeded && (null != (Services.StatsProxies.EnumerateLBRawResult)Service.XblStats.EnumerateLBRaw(/*title:*/ 0xA7049955, /*LBID:*/ 106));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.EnumerateTeamLB(/*title:*/ 0xA7049955, /*LBID:*/ 106));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetTeamLBDetailsForTeamNames(/*title:*/ 0xA7049955, /*LBID:*/ 106));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetTeamLBForTeamNames(/*title:*/ 0xA7049955, /*LBID:*/ 106));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetTeamLBNearTeamName(/*title:*/ 0xA7049955, /*LBID:*/ 106));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.GetTitleWideMessageDetails(0xA7049955));
            bTestsSucceeded = bTestsSucceeded && (0 != (uint)Service.XblSignature.VerifySignature());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblSignature.VerifySignatureValidate());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.DeleteTitleWideMessageDelete(0xA7049955));
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.GetXQSConfig());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.DeleteMessage());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.EnumMessages());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.GetMessageDetails());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.RevokeMessage());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.RevokeTitleUserMessage());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.SetMessageFlags());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblAlerts.EnumerateSubscriptions());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblAlerts.ScheduleContentAlert());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblAlerts.Subscribe());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblAlerts.SubscriberExists());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblAlerts.Unsubscribe());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblLiveProxy.MatchHost());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblLiveProxy.MatchHostDelete());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblLiveProxy.QueryAdd());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblLiveProxy.QueryRemove());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.DeleteUserTitle());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.GetMessageString());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.Add());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.CompetitionCancel());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.CompetitionCreate());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.CompetitionCreateSingleElimination());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.CompetitionManageEntrant());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.CompetitionSearch());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.CompetitionTopology());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.CompetitionTopologySingleElimination());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.FindFromIds());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.Remove());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.RemoveId());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.Search());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.Select());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.Update());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblQuery.UpdateId());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetUnitForGamerTags());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetUnitForTeamNames());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetUnitsForGamerTag());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetUnitsForTeamName());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStorage.DeleteTitleFile());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStorage.DeleteUserFile());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStorage.EnumerateTitleFiles());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStorage.GetTitleQuota());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStorage.ReadTitleFile());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStorage.ReadUserFile());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStorage.RevokeTitleFile());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStorage.RevokeUserFile());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStorage.WriteTitleFile());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStorage.WriteUserFile());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblTeams.CreateTeam());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblTeams.DeleteTeam());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblTeams.GetTeamInfo());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblTeams.GetTeamMembers());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblTeams.JoinTeam());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblTeams.ManageTeam());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblTeams.ManageTeamMember());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblTeams.RecruitTeamMember());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblTeams.RemoveTeamMember());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUserAccount.UnlinkGamerTag());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblGeneralInfo.GetTitleList());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblGeneralInfo.LinkedGamerTags());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblLiveProxy.GetSiteInfo());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblLiveProxy.GetSitePuids());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblLiveProxy.LookupGamerTags());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblLiveProxy.LookupPuids());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.DeleteTitleWideMessage());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.EnumTitleWideMessages());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.EnumUserTitles());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.GetTitleWideMessageDetails());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.SendMessage());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.SendTitleUserMessage());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblMessaging.SendTitleWideMessage());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblPresence.GetFriends());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblSignature.CreateSignature());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblSignature.VerifySignature());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.EnumerateLB());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.EnumerateLBRaw());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.EnumerateTeamLB());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBDetailsForGamerTags());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBForGamerTags());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBList());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBListByType());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetLBNearGamerTag());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetTeamLBDetailsForTeamNames());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetTeamLBForTeamNames());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblStats.GetTeamLBNearTeamName());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUserAccount.GetAccountStatus());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUserAccount.GetUserSettings());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUserAccount.LinkedGamerTags());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUserAccount.LinkUser());
            bTestsSucceeded = bTestsSucceeded && (null != (object)Service.XblUserAccount.SetInfoSharing());

            return bTestsSucceeded;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestNativeStartNonBoolReturn.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test837204057E7F42cb90CD4BD95DC78712 : Script
    {
        [Native.Start]
        public int Run()
        {
            // int return should throw only bool is valid for Test scripts
            Random R = new Random();
            System.Threading.Thread.Sleep(5000);
            return R.Next() % 2;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestCallingGeneral.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class TestB4BA00AA965E4150B003C0F02A09E275 : Script
    {
        [Native.Start]
        public bool Run()
        {
            return (bool)Execute("GeneralNoOp");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\ServiceAPIReportedException.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;
using LiveServiceMonitor.Framework;
using LiveServiceMonitor.Framework.Services;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("General")]
    public class ServiceB783A8B221964199AB78A5FB51789438 : Script
    {
        [Native.Start]
        public bool Run()
        {
            Service.BVTService.Exception();
            /*Report testReport = new Report();
            ExecutionReportProxy testProxy = new ExecutionReportProxy(testReport);
            testProxy.Name = "ServiceAPIReportedException";
            testProxy.ExecutionStart = new DateTime(2001, 1, 1);
            testProxy.ExecutionDuration = 3;
            testProxy.ExecutionResult = ResultCode.Exception;
            testReport.Close();*/

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestCallingTestCode.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;
using xonline.tools.lsmonitor.bvt.extension;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test06BA6F127D594584A479F5DBE639C23F : Script
    {
        [Native.Start]
        public bool Run()
        {
            // If we can't access this test code, the script will throw and will fail.
            BVTExtension bvtExt = new BVTExtension();
            int intRet = bvtExt.GetInt(5);
            if (intRet != 5)
                throw new Framework.Exceptions.LogicalScriptFailureException("The result from the loaded test code did not match expected");

            string strRet = bvtExt.GetString("Hello World");
            if (string.Compare(strRet, "Hello World", true) != 0)
                throw new Framework.Exceptions.LogicalScriptFailureException("The result from the loaded test code did not match expected");

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestCallingTest.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test73E804BC14E34c75975E035E14C69FDA : Script
    {
        [Native.Start]
        public bool Run()
        {
            return (bool)Execute("TestNoOp");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestNativeStartBoolReturn.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test7B5D2DB5DAE7480284C9BE6EEC46D759 : Script
    {
        [Native.Start]
        public bool Run()
        {
            Random R = new Random();
            System.Threading.Thread.Sleep(5000);
            return R.Next() % 2 == 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestNativeStartParameters.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test9F30A28466F74351BEB14914872ED8F7 : Script
    {
        [Native.Start]
        public bool Run(int param1, string param2)
        {
            // parameters are not allowed in Native.Start "Test" should throw
            Random R = new Random();
            System.Threading.Thread.Sleep(5000);
            return R.Next() % 2 == 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestNoOp.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test351E5931664B469fBB8E8C7296244A55 : Script
    {
        [Native.Start]
        public bool Run()
        {
            Random R = new Random();
            System.Threading.Thread.Sleep(5000);
            return R.Next() % 2 == 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestScriptReportedCancel.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test7E65A2AB0A854743B0D3150C2840765A : Script
    {
        [Native.Start]
        public bool Run()
        {
            Random R = new Random();
            int rInt = R.Next();
            Report testReport;
            ExecutionReportProxy testProxy;

            testReport = Report.Create(ReportCategory.TestScript, typeof(Report));
            //testReport.Guid = new Guid("7E65A2AB0A854743B0D3150C2840765A");
            testProxy = new ExecutionReportProxy(testReport);
            testProxy.Name = "TestScriptReportedCancel";
            testProxy.ExecutionStart = new DateTime(2001, 1, 1);
            testProxy.ExecutionDuration = 3;
            testProxy.ExecutionResult = ResultCode.Cancel;
            //testProxy.SetValue("Text", "Logged Text Information");
            testReport.Close();
            System.Threading.Thread.Sleep(30000);

            return rInt % 2 == 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestScriptReportedFinished.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class TestBAB7D0C8A5DF45ab9B0898E6DC2DA9DF : Script
    {
        [Native.Start]
        public bool Run()
        {
            Random R = new Random();
            int rInt = R.Next();
            Report testReport;
            ExecutionReportProxy testProxy;

            System.Threading.Thread.Sleep(5000);
            testReport = Report.Create(ReportCategory.TestScript, typeof(Report));
            //testReport.Guid = new Guid("BAB7D0C8A5DF45ab9B0898E6DC2DA9DF");
            testProxy = new ExecutionReportProxy(testReport);
            testProxy.Name = "TestScriptReportedFinshed";
            testProxy.ExecutionStart = new DateTime(2001, 1, 1);
            testProxy.ExecutionDuration = 3;
            testProxy.ExecutionResult = ResultCode.Finished;
            //testProxy.SetValue("Text", "Logged Text Information");
            testReport.Close();

            return rInt % 2 == 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestScriptReportedFailure.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class TestD30A145C6D8F480eBB59411E3908FF14 : Script
    {
        [Native.Start]
        public bool Run()
        {
            Random R = new Random();
            int rInt = R.Next();
            Report testReport;
            ExecutionReportProxy testProxy;

            System.Threading.Thread.Sleep(5000);
            testReport = Report.Create(ReportCategory.TestScript, typeof(Report));
            //testReport.Guid = new Guid("D30A145C6D8F480eBB59411E3908FF14");
            testProxy = new ExecutionReportProxy(testReport);
            testProxy.Name = "TestScriptReportedFailure";
            testProxy.ExecutionStart = new DateTime(2001, 1, 1);
            testProxy.ExecutionDuration = 3;
            testProxy.ExecutionResult = ResultCode.Failed;
            //testProxy.SetValue("Text", "Logged Text Information");
            testReport.Close();

            return false;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestScriptReportedException.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test0DD07D5899FC4ef0A788D59579D7E818 : Script
    {
        [Native.Start]
        public bool Run()
        {
            Random R = new Random();
            int rInt = R.Next();
            Report testReport;
            ExecutionReportProxy testProxy;

            System.Threading.Thread.Sleep(5000);
            testReport = Report.Create(ReportCategory.TestScript, typeof(Report));
            //testReport.Guid = new Guid("0DD07D5899FC4ef0A788D59579D7E818");
            testProxy = new ExecutionReportProxy(testReport);
            testProxy.Name = "TestScriptReportedException";
            testProxy.ExecutionStart = new DateTime(2001, 1, 1);
            testProxy.ExecutionDuration = 3;
            testProxy.ExecutionResult = ResultCode.Exception;
            //testProxy.SetValue("Text", "Logged Text Information");
            testReport.Close();

            throw new WSMonitor.Framework.Exceptions.ScriptException();

            return rInt % 2 == 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\ToolsmgmtBVT.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;
using LiveServiceMonitor.Framework;
using LiveServiceMonitor.Framework.Services;
using LiveServiceMonitor.Framework.Services.ToolsMgmtProxies;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class ToolsmgmtBVT : Script
    {
        [Native.Start]
        public bool Run()
        {
            JobInfo jobInfo;
            ActionInfo actionInfo;
            long jobId = Service.XblToolsMgmt.CreateJob("LSM Toolsmgmt BVT", out jobInfo);
            Framework.Reporting.Report.Message("JobId: {0}", jobId);

            actionInfo = new ActionInfo();
            actionInfo.jobId = jobId;
            actionInfo.toolFileName = "cmd";
            actionInfo.parameters = new Parameter[4];
            actionInfo.parameters[0] = new Parameter();
            actionInfo.parameters[0].name = "/C";
            actionInfo.parameters[1] = new Parameter();
            actionInfo.parameters[1].value = "dir";
            actionInfo.parameters[2] = new Parameter();
            actionInfo.parameters[2].name = "/B";
            actionInfo.parameters[3] = new Parameter();
            actionInfo.parameters[3].value = "C:\\";
            int rank = Service.XblToolsMgmt.AddAction(actionInfo);
            Framework.Reporting.Report.Message("rank: {0}", rank);

            int execResult = Service.XblToolsMgmt.ExecuteJob(jobId);
            Framework.Reporting.Report.Message("ExecuteJob() returned : {0}", execResult);

            JobState js;

            Framework.Reporting.Report.Message("Wait for complete");
            while (true)
            {
                js = Service.XblToolsMgmt.GetJobStatus(jobId);
                if (js == JobState.Canceled)
                    break;
                if (js == JobState.Complete)
                    break;
                if (js == JobState.Failed)
                    break;
                Framework.Reporting.Report.Message("State: {0}", js.ToString());

                System.Threading.Thread.Sleep(1000);
            }

            Framework.Reporting.Report.Message("Completed");
            ActionResult result = Service.XblToolsMgmt.GetActionResult(jobId, 0);
            Framework.Reporting.Report.Message("ReturnCode: {0}", result.returnCode);
            Framework.Reporting.Report.Message("Output:");
            Framework.Reporting.Report.Message(result.consoleOutput);

            Service.XblToolsMgmt.CleanupJob((ulong)jobId);
            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestScriptReportLoggingSupport.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test85755D6EEBC546e6BA8704DA91485EC8 : Script
    {
        [Native.Start]
        public bool Run()
        {
            System.Threading.Thread.Sleep(5000);

            Report report = Report.Create(ReportCategory.TestScript);
            Report.Message("TestScriptReportLoggingSupport:{0}", report.Guid);
            Report.WriteProperty("testname", "testvalue");
            report.Close();

            return (bool)Execute("TestNoOp");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\UtilityNoOp.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Utility")]
    public class Utility8B972C252CD34aaaB6DF7CA0ECE0891F : Script
    {
        [Native.Start]
        public bool Run()
        {
            Random R = new Random();
            System.Threading.Thread.Sleep(5000);
            return R.Next() % 2 == 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\XmlExtTest.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Exceptions;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework;
using xonline.tools.lsmonitor.extensions.xml;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class Test147A22CBEF2D40c780E6005B77C0A1D9 : Script
    {
        [Native.Start]
        public bool Run()
        {
            // If we can't access this test code, the script will throw and will fail.
            string xmlCode = "<result value=\"30\" status=\"Completed\"><details><warning>No environments deprecated</warning></details></result>";
            System.Xml.XmlDocument xmlDoc = XmlHelper.CreateDocument(xmlCode);

            XmlParser xmlParser = XmlParser.CreateInstance(xmlDoc);
            int resultValue = xmlParser.ReadFirstEntry<int>("/result/@value");
            if(resultValue != 30)
                throw new Framework.Exceptions.LogicalScriptFailureException(
                    String.Format("ReadFirstElement returned {0}; Expected 30", resultValue));

            System.Collections.Generic.List<int> entryList = new System.Collections.Generic.List<int>();
            entryList.AddRange(xmlParser.ReadAllEntries<int>("/result/@value"));
            if (entryList.Count != 1)
                throw new Framework.Exceptions.LogicalScriptFailureException(
                    String.Format("ReadAllEntries returned {0} elements; Expected 1", entryList.Count));
            if (entryList[0] != 30)
                throw new Framework.Exceptions.LogicalScriptFailureException(
                    String.Format("ReadAllEntries[0] returned {0}; Expected 30", entryList[0]));

            try
            {
                string entry = xmlParser.ReadFirstElement("/blah");
                throw new Framework.Exceptions.LogicalScriptFailureException("ReadFirstElement should have thrown an EntryMissingException but didn't");
            }
            catch (EntryMissingException)
            {
            }

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSMonitorTest\Scripts\TestScriptReportedSuccess.cs ===
using System;
using System.Text;
using WSMonitor.Framework.Scripting;
using WSMonitor.Framework.Reporting;
using WSMonitor.Framework;

namespace WSMonitor.Scripts
{
    [ScriptMetadata("Test")]
    public class TestC97A306652654c96B1BBAE79A52AE629 : Script
    {
        [Native.Start]
        public bool Run()
        {
            Report testReport;
            ExecutionReportProxy testProxy;

            System.Threading.Thread.Sleep(5000);
            testReport = Report.Create(ReportCategory.TestScript, typeof(Report));
            //testReport.Guid = new Guid("C97A306652654c96B1BBAE79A52AE629");
            testProxy = new ExecutionReportProxy(testReport);
            testProxy.Name = "TestScriptReportedSuccess";
            testProxy.ExecutionStart = new DateTime(2001, 1, 1);
            testProxy.ExecutionDuration = 3;
            testProxy.ExecutionResult = ResultCode.Success;
            //testProxy.SetValue("Text", "Logged Text Information");
            testReport.Close();

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSTRunnerTest\DropTests.cs ===
using System;
using System.IO;
using ServerTestFramework;
using ServerTestFramework.STFTools;
using ServerTestFramework.STFTools.ConfigFiles;
using ServerTestFramework.Database;
using xonline.common.config;

namespace WSTRunnerTest
{
    /// <summary>
    /// Test group for running WSTRunner /drop to deploy databases.
    /// Includes the following test cases:
    ///     BasicDrop
    /// </summary>
    [TestGroup]
    public class WSTRunnerDropGroup : TestNode
    {
        /// <summary>
        /// Basic WSTRunner drop test case.
        /// </summary>
        /// <remarks>
        /// Implemented Cases:
        /// 
        /// Positive Functional: Run the basic drop command
        /// Positive Functional: Basic manifest.xml with all files provided 
        /// Positive Functional: Basic deployment.xml with all files provided 
        /// </remarks>
        [TestCase, DVT]
        public class BasicDrop : WSTRunnerTestBase
        {
            protected override void Execute()
            {
                BeginCase("BasicDrop");
                ResultCode = TEST_RESULTS.FAILED;
                string manifestFile = "manifest.xml";
                string deploymentFile = "deployment.xml";

                try
                {
                    //Run WSTRunner /setup
                    _wstRunnerTool.WSTRunnerSetup(manifestFile, deploymentFile);

                    //Verify Database installed

                    //Run WSTRunner /drop
                    _wstRunnerTool.WSTRunnerDrop(manifestFile, deploymentFile);

                    //Verify Database removed
                    ResultCode = TEST_RESULTS.PASSED;
                }
                catch (Exception)
                {
                    CleanUpDatabase(manifestFile, deploymentFile);
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSTRunnerTest\SetupTests.cs ===
using System;
using System.IO;
using ServerTestFramework;
using ServerTestFramework.STFTools;
using ServerTestFramework.STFTools.ConfigFiles;
using ServerTestFramework.Database;
using xonline.common.config;

namespace WSTRunnerTest
{
    /// <summary>
    /// Test group for running WSTRunner /setup to deploy databases.
    /// Includes the following test cases:
    ///     BasicSetup
    /// </summary>
    [TestGroup]
    public class WSTRunnerSetupGroup : TestNode
    {
        /// <summary>
        /// Basic WSTRunner setup test case.
        /// </summary>
        /// <remarks>
        /// Implemented Cases:
        /// 
        /// Positive Functional: Run the basic setup command
        /// Positive Functional: Basic manifest.xml with all files provided 
        /// Positive Functional: Basic deployment.xml with all files provided 
        /// </remarks>
        [TestCase, DVT]
        public class BasicSetup : WSTRunnerTestBase
        {
            protected override void Execute()
            {
                BeginCase("BasicSetup");
                ResultCode = TEST_RESULTS.FAILED;
                string manifestFile = "manifest.xml";
                string deploymentFile = "deployment.xml";

                try
                {
                    //Run WSTRunner /setup
                    _wstRunnerTool.WSTRunnerSetup(manifestFile, deploymentFile);

                    //Verify Database installed

                    //Verify Database correct
                }
                catch(Exception)
                {
                    CleanUpDatabase(manifestFile, deploymentFile);
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSTRunnerTest\WSTRunnerTests.cs ===
using System;
using ServerTestFramework;

namespace WSTRunnerTest
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\WSTRunnerTest\WSTRunnerTestBase.cs ===
using System;
using System.Collections;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml;
using ServerTestFramework;
using ServerTestFramework.STFTools;
using ServerTestFramework.STFTools.ConfigFiles;
using ServerTestFramework.Database;
using xonline.common.config;
using xonline.common.protocol;

namespace WSTRunnerTest
{
    /// <summary>
    /// Summary description for WSTRunnerTestBase.
    /// </summary>
    public class WSTRunnerTestBase : TestBase
    {
        protected Report _report = new Report("WSTRunnerTest");
        protected WSTRunner _wstRunnerTool;
        protected string _inputFilesPath;
        protected string _tempPath;
        protected string _templateDatabaseServer;
        protected string _testDatabaseServer;

        public WSTRunnerTestBase()
        {
            _wstRunnerTool = new WSTRunner();

            // Query the Global object to get our test-specific data
            XmlNode wstRunnerConfig = Global.Config.SelectSingleNode("descendant::WSTRunnerTest");
            if (wstRunnerConfig != null)
            {
                foreach (XmlNode setting in wstRunnerConfig.ChildNodes)
                {
                    if (String.Compare(setting.Name, "DefaultToolPath", true) == 0)
                    {
                        _wstRunnerTool.WSTRunnerPath = Path.Combine(
                            Path.GetFullPath(setting.InnerText), "WSTRunner.exe");
                    }
                    else if (String.Compare(setting.Name, "InputFilePath", true) == 0)
                    {
                        _inputFilesPath = Path.GetFullPath(setting.InnerText);
                    }
                    else if (String.Compare(setting.Name, "TempDirectoryPath", true) == 0)
                    {
                        _tempPath = Path.GetFullPath(setting.InnerText);
                        if (!Directory.Exists(_tempPath))
                        {
                            Directory.CreateDirectory(_tempPath);
                        }
                        _wstRunnerTool.WorkingDirectory = _tempPath;
                    }
                }

            }
            else
            {
                throw new StfException("Unable to read the WSTRunnerTest configuration settings.");
            }

        }

        protected override void Execute()
        {
            throw new StfException("Hey you! You forgot to override the Execute method!");
        }

        protected void BeginCase(string caseName)
        {
            _report.Info("Begin Case: " + caseName);
        }

        protected void CleanUpDatabase(string manifestFile, string deploymentFile)
        {
            _wstRunnerTool.WSTRunnerDrop(manifestFile, deploymentFile);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\FuncMigration.cs ===
using System;
using System.Diagnostics;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Arbitration;
using xonline.common.config;

using HResult = xonline.common.service.HResult;
using BucketLayout = System.Collections.Generic.List<XArbTest.Bucket>;
using MigrationState = XArbTest.MigrationMgr.MigrationState;

namespace XArbTest
{
    [TestGroup, Owner("kbayer"), TestFrequency("Regression")]
	public class MigrationTestBaseGroup : TestNode
	{
		protected static int DefaultBucketCount = -1;
		protected static bool SetupDetectedExistingMigration = false;
		protected static BucketLayout OriginalBucketLayout;
		protected static int OriginalMigrationWaitWindowMinutes = 5;
		private static bool stressInitialized = false;
		protected static bool DBG_NO_SETUP_OR_TEARDOWN = false;

		public class ConfigChangeHandler
		{
			public static void Initialize()
			{
				Config.InterfaceBucketChange += new InterfaceBucketChangeEventHandler(OnArbBucketChange);
			}

			public static void OnArbBucketChange(object sender, InterfaceBucketChangeEventArgs e)
			{
			}
		}

		public static void InitStress()
		{
			if (!stressInitialized)
			{
				Console.WriteLine("Populating or creating a set of global arbitration test users.");
				XArbSessionManager.InitStress();
				//Set Title Trust Constants
				Console.WriteLine("Updating or creating title constants in UODB and then running ReloadTitleParameters management commands.");
				if (false==UodbWS.SetTitleTrustConstants(XArbGlobal.StressTitleTrustConstants))
					Console.WriteLine("Unable to create/update my title id in UODB");
				//SlowStressTitleTrustConstants
				if (false==UodbWS.SetTitleTrustConstants(XArbGlobal.SlowStressTitleTrustConstants))
					Console.WriteLine("Unable to create/update my title id in UODB");
				stressInitialized = true;
			}
		}

		public void SetMigrationWaitWindowMinutes(int minutes)
		{
			Npdb npdb = new Npdb();
			npdb.ConnectToServer();

			string sql = @"update t_settings set vc_value = " + minutes;
			sql += " where vc_setting = 'xarb_MigrationWaitWindowMinutes'";
			int affected = npdb.IssueCommand(sql);
			npdb.Close();

			Global.XEnv.ExecuteXmgmtCommand(Interface.xarb, "e :xarb configcacherefresh", XArbGlobal.defaultXmgmtRetries);
			Global.XEnv.ExecuteXmgmtCommand(Interface.xarbInh, "e :xarbinh configcacherefresh", XArbGlobal.defaultXmgmtRetries);
		}

		[TestGroupSetup]
		public void Setup()
		{
			ConfigChangeHandler.Initialize();
			if (!DBG_NO_SETUP_OR_TEARDOWN)
			{
				// Snapshot the original bucket layout to restore later
				Global.RO.Info("Taking snapshot of current bucket layout to restore later");
				OriginalBucketLayout = MigrationMgr.GetCurrentBucketLayout();
				if (MigrationMgr.CheckForExistingMigration(OriginalBucketLayout))
				{
					SetupDetectedExistingMigration = true;
					XArbGlobal.slowstatsListener.Stop();
					throw new UnexpectedTestResultException("Pre-existing migration in progress detected. Testing should not proceed.");
				}
				DefaultBucketCount = OriginalBucketLayout.Count;

				InitStress();

				XArbGlobal.slowstatsListener.Go();
				XArbGlobal.slowstatsListener.SetXError(HResult.XONLINE_E_STAT_LEADERBOARD_READONLY);

				Global.RO.Info("Updating xarb_MigrationWaitWindowMinutes");
				OriginalMigrationWaitWindowMinutes = xonline.common.config.Config.GetIntSetting(xonline.common.config.Setting.xarb_MigrationWaitWindowMinutes);
				SetMigrationWaitWindowMinutes(XArbGlobal.defaultMigWaitWindowMins);
			}
		}

		[TestGroupTearDown]
		public void TearDown()
		{
			if (XArbGlobal.slowstatsListener != null && XArbGlobal.slowstatsListener.IsRunning)
			{
				XArbGlobal.slowstatsListener.Stop();
			}

			if (!DBG_NO_SETUP_OR_TEARDOWN)
			{
			Global.RO.Info("TearDown starting...");
				if (!SetupDetectedExistingMigration)
				{
					//MigrationMgr.SetBucketLayout(OriginalBucketLayout);
					Global.RO.Info("Creating bucket layout restoration plan from snapshot");
					//BUGBUG: Compare existing layout to current layout to see if this is actually necessary
					BucketLayout restorationPlan = MigHelper.CreateTransitionLayout(
						MigrationMgr.GetCurrentBucketLayout(),
						OriginalBucketLayout,
						DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
						);
					Global.RO.Info("Executing bucket restoration layout");
					try
					{
						MigrationMgr.Instance.ExecuteMigration(restorationPlan);
						Global.RO.Info("Restoration migration complete");
					}
					catch (Exception e)
					{
						// Graceful restoration failed, time to try the hammerfist approach
						Global.RO.Warn("Restoration migration failed: " + e.Message);
						Global.RO.Warn("Attempting brute force approach.");
						MigrationMgr.SetBucketLayout(OriginalBucketLayout);
						Global.XEnv.ExecuteXmgmtCommand(Interface.xarb, "e :xarb configcacherefresh", XArbGlobal.defaultXmgmtRetries);
						Global.XEnv.ExecuteXmgmtCommand(Interface.xarbInh, "e :xarbinh configcacherefresh", XArbGlobal.defaultXmgmtRetries);
						foreach (Bucket bucket in OriginalBucketLayout)
						{
							Global.XEnv.ExecuteXmgmtCommand(Interface.xarbInh, "e :xarbinh resetmigrationstateforonebucket " + bucket.i_bucket, XArbGlobal.defaultXmgmtRetries);
						}
					}
					finally
					{
						Global.RO.Info("Updating xarb_MigrationWaitWindowMinutes");
						SetMigrationWaitWindowMinutes(OriginalMigrationWaitWindowMinutes);

						XArbGlobal.slowstatsListener.Stop();
					}
				}
			}
		}
	}

	/// <summary>
	/// Functional Tests for Arbitration Server Stateful Migration
	/// </summary>
	/// <remarks>
	/// <Description>
	/// 	<p>
	///		CAUTION:  These test cases are incomplete and should not be run as regular automated test cases.
	///
	/// 	The migration suite tests Arbitration's stateful migration functionality.  As currently implemented,
	///		these test cases must be run under a debugger as they lack the ability to update NPDB to cause migration to begin
	///		and the verification logic is extremely rudamentary, requiring human verification of the results.
	///		
	///		All migration functionality tests verify every call to Arb succeeded by performing the following standard verifications (unless otherwise noted):
	/// 		 Verify using Arb response information the machine PUIDs and the number of Xboxes registered match what was sent
	/// 		 Verify using Arb response information the PUID and flags for each user on each Xbox match what was sent
	/// 		 Verify using Debug Response the registration's title ID, session ID, session nonce, max session seconds, machine PUID, and flags match what was sent
	/// 		 Verify using Debug Response the actual team tickets count match what was sent
	/// 		 Verify using Debug Response the total number of Xboxes registered match what was sent
	/// 		 Verify using Debug Response the user's PUID, flags, and trust rating factor
	/// 	</p>
	/// </Description>
	/// </remarks>
	public class FuncMigration : MigrationTestBaseGroup
	{
		[TestCase]
		class _DbgMigrateRestoreLayout : XArbTestBase
		{
			override protected void Execute()
			{
				DBG_NO_SETUP_OR_TEARDOWN = true;
				BucketLayout buckets = MigrationMgr.GetCurrentBucketLayout();

				// Permutate data
                DateTime startTime = DateTime.UtcNow.Add(new TimeSpan(0, XArbGlobal.defaultMigWaitWindowMins, 0));
				foreach (Bucket bucket in buckets)
				{
					//if (bucket.i_bucket <= 209 && bucket.vc_server != "XEPOOLINH006")
					//{
						bucket.vc_next_server = "XEPOOLINH006";
						bucket.dt_migration_start = startTime;
					//}
					//if (bucket.i_bucket >= 210 && bucket.vc_server != "XEPOOLINH007")
					//{
					//	bucket.vc_next_server = "XEPOOLINH007";
					//	bucket.dt_migration_start = startTime;
					//}
				}

				MigrationMgr.Instance.ExecuteMigration(buckets);
				Global.RO.Info("Fixing up OriginalBucketLayout snapshot");
				OriginalBucketLayout = MigrationMgr.GetCurrentBucketLayout();
			}
		}

		[TestCase]
		class _DbgForceRestoreLayout : XArbTestBase
		{
			override protected void Execute()
			{
				DBG_NO_SETUP_OR_TEARDOWN = true;
				BucketLayout buckets = MigrationMgr.GetCurrentBucketLayout();

				// Permutate data
				string[] serverNames = new string[] { "XEPOOLINH006" }; //, "XEPOOLINH007" };
				BucketLayout newLayout = MigHelper.CreateStepPatternLayout(serverNames, buckets.Count);

				MigrationMgr.ForceSetBucketLayout(newLayout);
				//BUGBUG:  Bounce Arb INH services here
				MigrationMgr.ConfigCacheRefresh();
				Global.RO.Info("Fixing up OriginalBucketLayout snapshot");
				OriginalBucketLayout = MigrationMgr.GetCurrentBucketLayout();
			}
		}

		[TestCase]
		class _DbgConfigCacheReset : XArbTestBase
		{
			override protected void Execute()
			{
				DBG_NO_SETUP_OR_TEARDOWN = true;
				MigrationMgr.ConfigCacheRefresh();
			}
		}

        [TestCase]
        class _DbgNoiseMachineOnly : XArbTestBase
        {
            override protected void Execute()
            {
                DBG_NO_SETUP_OR_TEARDOWN = true;

                NoiseMachine noise = new NoiseMachine();
                noise.Go();
                int sleepMs = 30 * 1000;
                System.Threading.Thread.Sleep(sleepMs);
                noise.Stop();
            }
        }

        abstract class MigrationTestBase : XArbTestBase
        {
            public abstract void PrepareEnvironment();
            public abstract BucketLayout CreateMigrationPlanLayout();

            protected override void Execute()
            {
                // If a migration is already in progress (from a previous test failing?),
                // do not proceed
                if (SetupDetectedExistingMigration)
                {
                    ResultCode = TEST_RESULTS.NOT_EXECUTED;
                    return;
                }

                // Let the derived class prepare the environment
                Global.RO.Info("Preparing environment...");
                PrepareEnvironment();
                // Ask the derived class for a migration plan layout
                BucketLayout migPlanLayout = CreateMigrationPlanLayout();

                // Verify the new migration plan doesn't already match the current layout in the DB
                if (!MigrationMgr.IsMigrationNeeded(migPlanLayout))
                {
                    ResultCode = TEST_RESULTS.NOT_EXECUTED;
                    return;
                }
                // Run the migration
                Global.RO.Info("Running test...");
                MigrationMgr.Instance.ExecuteMigration(migPlanLayout);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Map a single bucket from one server to a new server")]
        class P_One_To_OneNew_SingleBucket : MigrationTestBase
        {
            private string[] serverNames = MigHelper.GetServerNames(2);

            public override void PrepareEnvironment()
            {
                string startingServer = serverNames[0];

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServer, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                BucketLayout migPlanLayout = MigrationMgr.GetCurrentBucketLayout();
                migPlanLayout[0].vc_next_server = serverNames[1];
                migPlanLayout[0].dt_migration_start = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                return migPlanLayout;
            }
        }

        [TestCase, Description("Map a single bucket from one server to another server")]
        class P_One_To_One_SingleBucket : MigrationTestBase
        {
            private string[] serverNames = MigHelper.GetServerNames(2);

            public override void PrepareEnvironment()
            {
                string[] startingServers = serverNames;

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServers, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                BucketLayout migPlanLayout = MigrationMgr.GetCurrentBucketLayout();
                if (migPlanLayout[0].vc_server.ToLower() == serverNames[0].ToLower())
                {
                    migPlanLayout[0].vc_next_server = serverNames[1];
                }
                else
                {
                    migPlanLayout[0].vc_next_server = serverNames[0];
                }
                migPlanLayout[0].dt_migration_start = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                return migPlanLayout;
            }
        }

        [TestCase, Description("Replace one server with a new one")]
        class P_One_To_OneNew_AllBuckets : MigrationTestBase
        {
            private string[] serverNames = MigHelper.GetServerNames(2);

            public override void PrepareEnvironment()
            {
                string startingServer = serverNames[0];

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServer, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                string fromServer = serverNames[0];
                string toServer = serverNames[1];

                BucketLayout startingLayout = MigrationMgr.GetCurrentBucketLayout();
                BucketLayout desiredLayout = MigHelper.CreateStepPatternLayout(toServer, DefaultBucketCount);
                DateTime migStartTime = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                BucketLayout migPlanLayout = MigHelper.CreateServerMigrationLayout(startingLayout, migStartTime,
                                                                                   fromServer, toServer);
                return migPlanLayout;
            }
        }

        [TestCase, Description("Add one new server in with an existing one")]
        class P_Mainline_One_To_OneNew_PartialBuckets : MigrationTestBase
        {
            private string[] serverNames = MigHelper.GetServerNames(2);

            public override void PrepareEnvironment()
            {
                string startingServer = serverNames[0];

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServer, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                string fromServer = serverNames[0];
                string[] toServers = serverNames;

                BucketLayout startingLayout = MigrationMgr.GetCurrentBucketLayout();
                BucketLayout desiredLayout = MigHelper.CreateStepPatternLayout(toServers, DefaultBucketCount);
                DateTime migStartTime = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                BucketLayout migPlanLayout = MigHelper.CreateServerMigrationLayout(startingLayout, migStartTime,
                                                                                   fromServer, toServers);
                return migPlanLayout;
            }
        }

        [TestCase, Description("Add two new servers in with an existing one")]
        class P_One_To_TwoNew_PartialBuckets : MigrationTestBase
        {
            private string[] serverNames = MigHelper.GetServerNames(3);

            public override void PrepareEnvironment()
            {
                string startingServer = serverNames[0];

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServer, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                string fromServer = serverNames[0];
                string[] toServers = serverNames;

                BucketLayout startingLayout = MigrationMgr.GetCurrentBucketLayout();
                BucketLayout desiredLayout = MigHelper.CreateStepPatternLayout(toServers, DefaultBucketCount);
                DateTime migStartTime = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                BucketLayout migPlanLayout = MigHelper.CreateServerMigrationLayout(startingLayout, migStartTime,
                                                                                   fromServer, toServers);
                return migPlanLayout;
            }
        }

        [TestCase, Description("Replace a single server with two new servers")]
        class P_One_To_TwoNew_AllBuckets : MigrationTestBase
        {
            private string[] serverNames = MigHelper.GetServerNames(3);

            public override void PrepareEnvironment()
            {
                string startingServer = serverNames[0];

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServer, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                // Create migration plan
                string fromServer = serverNames[0];
                string[] toServers = new string[2] { serverNames[1], serverNames[2] };

                BucketLayout startingLayout = MigrationMgr.GetCurrentBucketLayout();
                DateTime migStartTime = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                BucketLayout migPlanLayout = MigHelper.CreateServerMigrationLayout(startingLayout, migStartTime,
                                                                                   fromServer, toServers);
                return migPlanLayout;
            }
        }

        [TestCase, Description("Remove a single server from a pool of two servers")]
        class P_Mainline_One_To_Two_AllBuckets : MigrationTestBase
        {
            private string[] serverNames = MigHelper.GetServerNames(2);

            public override void PrepareEnvironment()
            {
                string[] startingServers = serverNames;

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServers, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                string fromServer = serverNames[0];
                string toServer = serverNames[1];

                BucketLayout startingLayout = MigrationMgr.GetCurrentBucketLayout();
                DateTime migStartTime = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                BucketLayout migPlanLayout = MigHelper.CreateServerMigrationLayout(startingLayout, migStartTime,
                                                                                   fromServer, toServer);
                return migPlanLayout;
            }
        }

        [TestCase, Description("Remove a single server from a pool of three servers")]
        class P_One_To_Three_AllBuckets : MigrationTestBase
		{
            private string[] serverNames = MigHelper.GetServerNames(3);

			public override void PrepareEnvironment()
            {
                string[] startingServers = serverNames;

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServers, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
			}

            public override BucketLayout CreateMigrationPlanLayout()
			{
				string fromServer = serverNames[0];
				string[] toServers = new string[2];
                toServers[0] = serverNames[1];
                toServers[1] = serverNames[2];

				BucketLayout startingLayout = MigrationMgr.GetCurrentBucketLayout();
				DateTime migStartTime = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
				BucketLayout migPlanLayout = MigHelper.CreateServerMigrationLayout(startingLayout, migStartTime,
																				   fromServer, toServers);
                return migPlanLayout;
			}
		}

        [TestCase, Description("Exchange 1/2 of two servers' buckets with each other")]
        class P_One_To_One_Bidirectional_PartialBuckets : MigrationTestBase
        {
            private string[] serverNames = MigHelper.GetServerNames(2);

            public override void PrepareEnvironment()
            {
                string[] startingServers = serverNames;

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServers, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                BucketLayout migPlanLayout = MigrationMgr.GetCurrentBucketLayout();
                for (int i = 0; i < (DefaultBucketCount / 2); i++)
                {
                    if (migPlanLayout[i].vc_server == serverNames[0])
                    {
                        migPlanLayout[i].vc_next_server = serverNames[1];
                    }
                    else
                    {
                        migPlanLayout[i].vc_next_server = serverNames[0];
                    }
                    migPlanLayout[i].dt_migration_start = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                }
                return migPlanLayout;
            }
        }

        [TestCase, Description("Exchange all of two servers' buckets with each other")]
        class P_One_To_One_Bidirectional_AllBuckets : MigrationTestBase
        {
            private string[] serverNames = MigHelper.GetServerNames(2);

            public override void PrepareEnvironment()
            {
                string[] startingServers = serverNames;

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServers, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                BucketLayout migPlanLayout = MigrationMgr.GetCurrentBucketLayout();
                for (int i = 0; i < DefaultBucketCount; i++)
                {
                    if (migPlanLayout[i].vc_server == serverNames[0])
                    {
                        migPlanLayout[i].vc_next_server = serverNames[1];
                    }
                    else
                    {
                        migPlanLayout[i].vc_next_server = serverNames[0];
                    }
                    migPlanLayout[i].dt_migration_start = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                }
                return migPlanLayout;
            }
        }

        [TestCase, Description("Map a single bucket from two servers to a third server")]
        class P_Many_To_One_SingleBucket : MigrationTestBase
        {
            private string[] serverNames = MigHelper.GetServerNames(3);

            public override void PrepareEnvironment()
            {
                string[] startingServers = serverNames;

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServers, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                BucketLayout migPlanLayout = MigrationMgr.GetCurrentBucketLayout();
                Debug.Assert(migPlanLayout[0].vc_next_server != migPlanLayout[2].vc_server);
                migPlanLayout[0].vc_next_server = migPlanLayout[2].vc_server;
                migPlanLayout[0].dt_migration_start = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                Debug.Assert(migPlanLayout[1].vc_next_server != migPlanLayout[2].vc_server);
                migPlanLayout[1].vc_next_server = migPlanLayout[2].vc_server;
                migPlanLayout[1].dt_migration_start = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                return migPlanLayout;
            }
        }

        [TestCase, Description("Map a single bucket from three servers to third servers (round robin)")]
        class P_Many_To_Many_SingleBucket : MigrationTestBase
        {
            private string[] serverNames = MigHelper.GetServerNames(3);

            public override void PrepareEnvironment()
            {
                string[] startingServers = serverNames;

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServers, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                BucketLayout migPlanLayout = MigrationMgr.GetCurrentBucketLayout();
                Debug.Assert(migPlanLayout[0].vc_next_server != migPlanLayout[1].vc_server);
                migPlanLayout[0].vc_next_server = migPlanLayout[1].vc_server;
                migPlanLayout[0].dt_migration_start = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                Debug.Assert(migPlanLayout[1].vc_next_server != migPlanLayout[2].vc_server);
                migPlanLayout[1].vc_next_server = migPlanLayout[2].vc_server;
                migPlanLayout[1].dt_migration_start = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                Debug.Assert(migPlanLayout[2].vc_next_server != migPlanLayout[0].vc_server);
                migPlanLayout[2].vc_next_server = migPlanLayout[0].vc_server;
                migPlanLayout[2].dt_migration_start = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                return migPlanLayout;
            }
        }

        [TestCase, Description("Add an additional ArbINH server to an existing pool of two")]
        class P_Mainline_Many_To_OneNew_PartialBuckets : MigrationTestBase
		{
            private string[] serverNames = MigHelper.GetServerNames(3);

			public override void PrepareEnvironment()
			{
				string[] startingServers = new string[serverNames.Length - 1];
                startingServers[0] = serverNames[0];
                startingServers[1] = serverNames[1];

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServers, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
			}

            public override BucketLayout CreateMigrationPlanLayout()
			{
                string[] toServers = serverNames;

				// Create migration plan
				BucketLayout startingLayout = MigrationMgr.GetCurrentBucketLayout();
                BucketLayout desiredLayout = MigHelper.CreateStepPatternLayout(toServers, DefaultBucketCount);
				DateTime migStartTime = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
				BucketLayout migPlanLayout = MigHelper.CreateTransitionLayout(startingLayout, desiredLayout,
																			  migStartTime);
                return migPlanLayout;
			}
		}

        [TestCase, Description("Replace two servers with one new server")]
        class P_Mainline_Many_To_OneNew_AllBuckets : MigrationTestBase
        {
            private string[] serverNames = MigHelper.GetServerNames(3);

            public override void PrepareEnvironment()
            {
                string[] startingServers = new string[serverNames.Length - 1];
                startingServers[0] = serverNames[0];
                startingServers[1] = serverNames[1];

                BucketLayout startingLayout = MigHelper.CreateStepPatternLayout(startingServers, DefaultBucketCount);
                if (MigrationMgr.IsMigrationNeeded(startingLayout))
                {
                    BucketLayout transLayout = MigHelper.CreateTransitionLayout(
                        MigrationMgr.GetCurrentBucketLayout(),
                        startingLayout,
                        DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta)
                        );
                    MigrationMgr.Instance.ExecuteMigration(transLayout);
                }
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                string toServer = serverNames[2];

                // Create migration plan
                BucketLayout startingLayout = MigrationMgr.GetCurrentBucketLayout();
                BucketLayout desiredLayout = MigHelper.CreateStepPatternLayout(toServer, DefaultBucketCount);
                DateTime migStartTime = DateTime.UtcNow.Add(XArbGlobal.defaultMigStartDelta);
                BucketLayout migPlanLayout = MigHelper.CreateTransitionLayout(startingLayout, desiredLayout,
                                                                              migStartTime);
                return migPlanLayout;
            }
        }

        [Ignore, TestCase, Description("Replace an existing pool of two servers with a new pool of two")]
        class P_Many_To_ManyNew_AllBuckets : MigrationTestBase
        {
            public override void PrepareEnvironment()
            {
                throw new InvalidOperationException("Not enough Arb INH servers in TestNet to test this currently");
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                return null;
            }
        }

        [Ignore, TestCase, Description("Add two new servers to an existing pool of two")]
        class P_Many_To_ManyNew_PartialBuckets : MigrationTestBase
        {
            // Not enough Arb INH servers in TestNet to test this currently

            public override void PrepareEnvironment()
            {
                throw new InvalidOperationException("Not enough Arb INH servers in TestNet to test this currently");
            }

            public override BucketLayout CreateMigrationPlanLayout()
            {
                return null;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\XArb\ConfigSettings.cs ===
using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using xonline.common.config;

namespace XArbTest
{
	/// <summary>
	/// Summary description for ConfigSettings.
	/// </summary>
    [TestGroup, Owner("kbayer"), TestFrequency("Regression"), TestCasePriority(3)]
	public class ConfigSettings :TestNode
	{
		public ConfigSettings()
		{
			ConfigTestBase.component= Component.xarbInh;
			AddChild(new ConfigTestBase(Setting.xarb_MaxStatsBundleSize,"300000"));
			AddChild(new ConfigTestBase(Setting.xarb_MaxTournamentBundleSize,"200000"));
			AddChild(new ConfigTestBase(Setting.xarb_MaxSessionSeconds,"3700"));
			AddChild(new ConfigTestBase(Setting.xarb_SessionTimeoutExtensionSeconds,"120"));
			AddChild(new ConfigTestBase(Setting.xarb_TrailingReportRetriesWaitSeconds,"60"));
			AddChild(new ConfigTestBase(Setting.xarb_VerboseLogging,"false"));

			AddChild(new ConfigTestBase(Setting.xarb_EnableDebugResult,"false"));
			AddChild(new ConfigTestBase(Setting.xarb_AllowAlternateDestination,"false"));
			AddChild(new ConfigTestBase(Setting.xarb_BundleRetryPeriodInSeconds,"60"));
			AddChild(new ConfigTestBase(Setting.xarb_MaxBundleRetrySeconds,"28880"));
			AddChild(new ConfigTestBase(Setting.xarb_MemoryUsageLowWaterMark,"400000000"));
			AddChild(new ConfigTestBase(Setting.xarb_MemoryUsageHighWaterMark,"500000000"));

			AddChild(new ConfigTestBase(Setting.xarb_GarbageCollectionIntervalInSeconds,"10"));
			AddChild(new ConfigTestBase(Setting.xarb_TitleParameterReloadPeriodInSeconds,"60"));
			AddChild(new ConfigTestBase(Setting.xarb_TrustSummationPeriodInSeconds,"60"));
			AddChild(new ConfigTestBase(Setting.xarb_TrustSummationExecutionTimeInSeconds,"60"));
			AddChild(new ConfigTestBase(Setting.xarb_TrustSummationRetryInSeconds,"60"));
			AddChild(new ConfigTestBase(Setting.xarb_TrustIdleSecondsBeforeFlush,"60"));

			AddChild(new ConfigTestBase(Setting.xarb_TrustFlushPeriodInSeconds,"60"));
			AddChild(new ConfigTestBase(Setting.xarb_MaxDelayedTrustUpdates,"60"));
			AddChild(new ConfigTestBase(Setting.xarb_TrustSummationTimeoutSeconds,"60"));
			AddChild(new ConfigTestBase(Setting.xarb_MigrationWaitWindowMinutes,"60"));
			
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\TeamCleaner\teamcleaner.cs ===
using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.Database;
using XcbkTest;

[assembly: RootNode(typeof(TeamCleaner.TeamCleanerSuite))]

namespace TeamCleaner
{
    public class TeamCleanerTeam
    {
        Team    m_Team;
        PNUser  m_Creator;

        public TeamCleanerTeam(PNUser creator, uint maxMembers) 
        {
            m_Team = new Team(maxMembers);
            m_Creator = creator;
        }

        public void Create() 
        {
            m_Team.Create(m_Creator);
        }

        public TeamMember AddMember(PNUser recruitor, PNUser recruitee) 
        {
            return m_Team.AddMember(recruitor, recruitee, 0);
        }

        public TeamMember RecruitMember(PNUser recruitor, PNUser recruitee) 
        {
            TeamMember  recruit = new TeamMember(m_Team, recruitee, 0);

            m_Team.Recruit(recruitor, recruit);
            return recruit;
        }

        public void LoadMembersAndRecruits(PNUser requestor) 
        {
            m_Team.ValidateTeam(requestor);
        }

        public TeamMember[] MemberList() 
        {
            return m_Team.GetMemberList();
        }

        public void ChangeMemberPrivileges(PNUser user, TeamMember member, uint privileges) 
        {
            m_Team.ChangeMemberPrivliges(user, member, privileges);
        }
    }

    public class TeamCleanerInfo
    {
        static private readonly uint[]  m_TitleId = { 0xFFFF0300, 0xFFFF010B };

        private FriendsCommon           m_FriendsCommon = null;
        private ArrayList               m_DeprovisionedList = null;
        private Hashtable               m_UserList = null;
        private Hashtable               m_TeamList = null;

        public void Purge(
            )
        {
            m_FriendsCommon = null;
            m_DeprovisionedList = null;
            m_UserList = null;
            m_TeamList = null;
        }

        public void Check(
            )
        {
            if (null == m_FriendsCommon) 
            {
                m_FriendsCommon = new FriendsCommon();
            }

            if (null == m_DeprovisionedList) 
            {
                m_DeprovisionedList = new ArrayList();
            }

            if (null == m_UserList) 
            {
                m_UserList = new Hashtable();
            }

            if (null == m_TeamList) 
            {
                m_TeamList = new Hashtable();
            }
        }

        public uint GetTitleId(
            uint  index
            )
        {
            return m_TitleId[index];
        }

        public PNUser CreateUser(
            uint  titleid
            )
        {
            PNUser  pnuser = m_FriendsCommon.CreateUser(false);
            m_FriendsCommon.LogonUser(pnuser, titleid);
            return pnuser;
        }

        public void Logon(
            PNUser  pnuser,
            uint    titleid
            )
        {
            m_FriendsCommon.LogonUser(pnuser, titleid);
        }

        public void Logoff(
            PNUser  pnuser
            )
        {
            m_FriendsCommon.LogoffUser(pnuser);
        }

        public void AddDeprovisioned(
            PNUser  pnuser
            )
        {
            m_DeprovisionedList.Add(pnuser);
        }

        public PNUser[] GetDeprovisioned(
            )
        {
            return (PNUser[]) m_DeprovisionedList.ToArray(typeof(PNUser));
        }

        public void AddUser(
            string  description,
            PNUser  pnuser
            )
        {
            m_UserList.Add(description, pnuser);
        }

        public PNUser GetUser(
            string  description
            )
        {
            return (PNUser) m_UserList[description];
        }

        public void AddTeam(
            string           description,
            TeamCleanerTeam  team
            )
        {
            m_TeamList.Add(description, team);
        }

        public TeamCleanerTeam GetTeam(
            string  description
            )
        {
            return (TeamCleanerTeam) m_TeamList[description];
        }
    }

    public class TeamCleanerSuite : TestNode
    {
        public TeamCleanerSuite()
        {
            AddChild(new TeamCleanerInitialize(m_TeamCleanerInfo));
            AddChild(new TeamCleanerSetup(m_TeamCleanerInfo));
            AddChild(new TeamCleanerDeprovisioned(m_TeamCleanerInfo));
            AddChild(new TeamCleanerVerifyReport(m_TeamCleanerInfo));
            AddChild(new TeamCleanerVerifyTitle1(m_TeamCleanerInfo));
            AddChild(new TeamCleanerVerifyTitle2(m_TeamCleanerInfo));
        }

        private static TeamCleanerInfo  m_TeamCleanerInfo = new TeamCleanerInfo();
    }

    public class TeamCleanerInitialize : TestNode
    {
        private static TeamCleanerInfo  m_TeamCleanerInfo = null;

        public TeamCleanerInitialize(
            TeamCleanerInfo  tci
            ) 
        {
            m_TeamCleanerInfo = tci;
        }

        [TestCase, Description("Purge any pre-existing data.")]
            class Purge : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Purge();

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
    }

    public class TeamCleanerSetup : TestNode
    {
        private static TeamCleanerInfo  m_TeamCleanerInfo = null;

        public TeamCleanerSetup(
            TeamCleanerInfo  tci
            ) 
        {
            m_TeamCleanerInfo = tci;
        }

        [TestCase, Description("Single Team: UserA is not on Team1. No change to Team1.")]
            class SingleTeamUserANotTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userC
                team1.AddMember(userB, userC);

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                
                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is member of Team1. Delete UserA from Team1.")]
            class SingleTeamUserAMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                
                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is only member of Team1. Delete Team1.")]
            class SingleTeamUserAOnlyTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                
                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is head of Team1 - UserB is head of Team1. Delete UserA from Team1.")]
            class SingleTeamUserAHeadUserBHeadTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);

                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                
                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is head of Team1 - UserB is member of Team1.  Delete UserA from Team1 - Promote UserB to head of Team1.")]
            class SingleTeamUserAHeadUserBMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                
                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is head of Team1 - UserB and UserC are members of Team1.  Delete UserA from Team1 - Promote UserC to head of Team1.")]
            class SingleTeamUserAHeadUserBMemberUserCMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                
                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTeamUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userC
                team1.AddMember(userB, userC);

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                
                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTeamUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);

                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);

                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTeamUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);

                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);

                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);

                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                memberD = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);

                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                memberD = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);

                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                memberD = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD
                team2.AddMember(userA, userD);

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD
                team2.AddMember(userA, userD);

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                team2.AddMember(userA, userE);
                team2.AddMember(userA, userD);

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTitleUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userC
                team1.AddMember(userB, userC);

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTitleUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);

                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);

                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTitleUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);

                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);

                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);

                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                memberD = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);

                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                memberD = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);

                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                memberD = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD
                team2.AddMember(userA, userD);

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD
                team2.AddMember(userA, userD);

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                team2.AddMember(userA, userE);
                team2.AddMember(userA, userD);

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is not on Team1. No change to Team1.")]
            class SingleTeamRecruitUserANotTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userC
                team1.AddMember(userB, userC);

                // Recruit userF
                team1.RecruitMember(userB, userF);

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is member of Team1. Delete UserA from Team1.")]
            class SingleTeamRecruitUserAMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Recruit userF
                team1.RecruitMember(userB, userF);

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is only member of Team1. Delete Team1.")]
            class SingleTeamRecruitUserAOnlyTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is head of Team1 - UserB is head of Team1. Delete UserA from Team1.")]
            class SingleTeamRecruitUserAHeadUserBHeadTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);

                // Recruit userF
                team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is head of Team1 - UserB is member of Team1.  Delete UserA from Team1 - Promote UserB to head of Team1.")]
            class SingleTeamRecruitUserAHeadUserBMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1.  Delete UserA from Team1 - Promote UserC to head of Team1.")]
            class SingleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTeamRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userC
                team1.AddMember(userB, userC);

                // Recruit userF
                team1.RecruitMember(userB, userF);

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Recruit userF
                team1.RecruitMember(userB, userF);

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Recruit userF
                team1.RecruitMember(userB, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);

                // Recruit userF
                team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);
                
                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                memberD = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);
                
                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                memberD = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);
                
                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                memberD = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD
                team2.AddMember(userA, userD);

                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD
                team2.AddMember(userA, userD);

                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                team2.RecruitMember(userA, userG);

                // Add userD and userE
                team2.AddMember(userA, userE);
                team2.AddMember(userA, userD);

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTitleRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userC
                team1.AddMember(userB, userC);

                // Recruit userF
                team1.RecruitMember(userB, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Recruit userF
                team1.RecruitMember(userB, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Recruit userF
                team1.RecruitMember(userB, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                team2.RecruitMember(userD, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                memberB = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);
                
                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                memberD = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);
                
                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                memberD = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);
                
                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                memberD = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                team1.RecruitMember(userA, userF);
                
                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD
                team2.AddMember(userA, userD);

                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD
                team2.AddMember(userA, userD);

                // Recruit userG
                team2.RecruitMember(userA, userG);
                
                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                team1.RecruitMember(userA, userF);

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                team2.RecruitMember(userA, userG);

                // Add userD and userE
                team2.AddMember(userA, userE);
                team2.AddMember(userA, userD);

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }    

    
    
        [TestCase, Description("Single Team with Head Recruit: UserA is not on Team1. No change to Team1.")]
            class SingleTeamHeadRecruitUserANotTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userC
                team1.AddMember(userB, userC);

                // Recruit userF
                memberF = team1.RecruitMember(userB, userF);

                team1.ChangeMemberPrivileges(userB, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is member of Team1. Delete UserA from Team1.")]
            class SingleTeamHeadRecruitUserAMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Recruit userF
                memberF = team1.RecruitMember(userB, userF);

                team1.ChangeMemberPrivileges(userB, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is only member of Team1. Delete Team1.")]
            class SingleTeamHeadRecruitUserAOnlyTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1. Delete UserA from Team1.")]
            class SingleTeamHeadRecruitUserAHeadUserBHeadTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberB = null;
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1.  Delete UserA from Team1 - Promote UserB to head of Team1.")]
            class SingleTeamHeadRecruitUserAHeadUserBMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1.  Delete UserA from Team1 - Promote UserC to head of Team1.")]
            class SingleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userC
                team1.AddMember(userB, userC);

                // Recruit userF
                memberF = team1.RecruitMember(userB, userF);

                team1.ChangeMemberPrivileges(userB, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);

                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Recruit userF
                memberF = team1.RecruitMember(userB, userF);

                team1.ChangeMemberPrivileges(userB, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);

                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberB = null;
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);

                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Recruit userF
                memberF = team1.RecruitMember(userB, userF);
                
                team1.ChangeMemberPrivileges(userB, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberB = null;
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberB = null;
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberB = null;
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);
                
                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberD = null;
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);
                
                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberD = null;
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);
                
                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberD = null;
                memberG = null;


                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD
                team2.AddMember(userA, userD);

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD
                team2.AddMember(userA, userD);

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);

                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Add userD and userE
                team2.AddMember(userA, userE);
                team2.AddMember(userA, userD);

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userC
                team1.AddMember(userB, userC);

                // Recruit userF
                memberF = team1.RecruitMember(userB, userF);
                
                team1.ChangeMemberPrivileges(userB, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Recruit userF
                memberF = team1.RecruitMember(userB, userF);
                
                team1.ChangeMemberPrivileges(userB, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberB = null;
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userE
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userB, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userA and userC
                team1.AddMember(userB, userA);
                team1.AddMember(userB, userC);

                // Recruit userF
                memberF = team1.RecruitMember(userB, userF);
                
                team1.ChangeMemberPrivileges(userB, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberB = null;
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userD, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userA and userE
                team2.AddMember(userD, userA);
                team2.AddMember(userD, userE);

                // Recruit userG
                memberG = team2.RecruitMember(userD, userG);
                
                team2.ChangeMemberPrivileges(userD, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberB = null;
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB and userC
                memberB = team1.AddMember(userA, userB);
                team1.AddMember(userA, userC);
                
                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberB, 0xFFFFFFFF);
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberB = null;
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);
                
                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberD = null;
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);
                
                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberD = null;
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD and userE
                memberD = team2.AddMember(userA, userD);
                team2.AddMember(userA, userE);
                
                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberD, 0xFFFFFFFF);
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberD = null;
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Add userB
                team1.AddMember(userA, userB);

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);
                
                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD
                team2.AddMember(userA, userD);

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Add userD
                team2.AddMember(userA, userD);

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);
                
                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTitleHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userF = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userC = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                PNUser           userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team1members = null;



                // Create the team
                team1.Create();

                // Recruit userF
                memberF = team1.RecruitMember(userA, userF);

                team1.ChangeMemberPrivileges(userA, memberF, 0xFFFFFFFF);
                memberF = null;

                // Add userB and userC
                team1.AddMember(userA, userC);
                team1.AddMember(userA, userB);

                // Get the members
                team1.LoadMembersAndRecruits(userA);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userB);
                m_TeamCleanerInfo.Logoff(userC);
                m_TeamCleanerInfo.Logoff(userF);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                m_TeamCleanerInfo.Logon(userA, m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userG = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userE = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                PNUser           userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = new TeamCleanerTeam(userA, 10);
                TeamMember[]     team2members = null;



                // Create the team
                team2.Create();

                // Recruit userG
                memberG = team2.RecruitMember(userA, userG);

                team2.ChangeMemberPrivileges(userA, memberG, 0xFFFFFFFF);
                memberG = null;

                // Add userD and userE
                team2.AddMember(userA, userE);
                team2.AddMember(userA, userD);

                // Get the members
                team2.LoadMembersAndRecruits(userA);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userA);
                m_TeamCleanerInfo.Logoff(userD);
                m_TeamCleanerInfo.Logoff(userE);
                m_TeamCleanerInfo.Logoff(userG);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // Get the subscription info
                SubscriptionInfo[]  si = UodbWS.GetUserServiceIDs(userA.UserId);
                SvcProviderWrapper  spw = new SvcProviderWrapper();

                // Deprovision the subscription which will cancel the user account
                spw.DeprovisionService(ref si[0]);

                // Remember team info
                m_TeamCleanerInfo.AddDeprovisioned(userA);

                m_TeamCleanerInfo.AddUser(this.Name + " - userA", userA);
                m_TeamCleanerInfo.AddUser(this.Name + " - userB", userB);
                m_TeamCleanerInfo.AddUser(this.Name + " - userC", userC);
                m_TeamCleanerInfo.AddUser(this.Name + " - userD", userD);
                m_TeamCleanerInfo.AddUser(this.Name + " - userE", userE);
                m_TeamCleanerInfo.AddUser(this.Name + " - userF", userF);
                m_TeamCleanerInfo.AddUser(this.Name + " - userG", userG);

                m_TeamCleanerInfo.AddTeam(this.Name + " - team1", team1);
                m_TeamCleanerInfo.AddTeam(this.Name + " - team2", team2);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }    
    }

    public class TeamCleanerDeprovisioned : TestNode
    {
        private static TeamCleanerInfo  m_TeamCleanerInfo = null;

        public TeamCleanerDeprovisioned(
            TeamCleanerInfo  tci
            ) 
        {
            m_TeamCleanerInfo = tci;
        }

        [TestCase, Description("Display deprovisioned users.")]
            class Display : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                PNUser[]  pnusers = m_TeamCleanerInfo.GetDeprovisioned();

                Console.WriteLine();
                Console.WriteLine();
                foreach (PNUser pnuser in pnusers) 
                {
                    Console.WriteLine(pnuser.UserId);
                }
                Console.WriteLine();

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
    }

    public class TeamCleanerVerifyReport : TestNode
    {
        private static TeamCleanerInfo  m_TeamCleanerInfo = null;

        public TeamCleanerVerifyReport(
            TeamCleanerInfo  tci
            ) 
        {
            m_TeamCleanerInfo = tci;
        }

        [TestCase, Description("Single Team: UserA is not on Team1. No change to Team1.")]
            class SingleTeamUserANotTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is member of Team1. Delete UserA from Team1.")]
            class SingleTeamUserAMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is only member of Team1. Delete Team1.")]
            class SingleTeamUserAOnlyTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is head of Team1 - UserB is head of Team1. Delete UserA from Team1.")]
            class SingleTeamUserAHeadUserBHeadTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is head of Team1 - UserB is member of Team1.  Delete UserA from Team1 - Promote UserB to head of Team1.")]
            class SingleTeamUserAHeadUserBMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team: UserA is head of Team1 - UserB and UserC are members of Team1.  Delete UserA from Team1 - Promote UserC to head of Team1.")]
            class SingleTeamUserAHeadUserBMemberUserCMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTeamUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTeamUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTeamUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTeamUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTitleUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTitleUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTitleUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");

                TeamMember       memberAteam1 = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (1 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                }

                if (null == memberAteam1) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam1.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam1.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                TeamMember       memberAteam2 = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (1 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                }

                if (null == memberAteam2) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (0xFFFFFFFF != memberAteam2.Privliges) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (true != memberAteam2.Joined) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTitleUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is not on Team1. No change to Team1.")]
            class SingleTeamRecruitUserANotTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is member of Team1. Delete UserA from Team1.")]
            class SingleTeamRecruitUserAMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is only member of Team1. Delete Team1.")]
            class SingleTeamRecruitUserAOnlyTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is head of Team1 - UserB is head of Team1. Delete UserA from Team1.")]
            class SingleTeamRecruitUserAHeadUserBHeadTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is head of Team1 - UserB is member of Team1.  Delete UserA from Team1 - Promote UserB to head of Team1.")]
            class SingleTeamRecruitUserAHeadUserBMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1.  Delete UserA from Team1 - Promote UserC to head of Team1.")]
            class SingleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTeamRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTeamRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTitleRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is only member of Team2. Delete UserA from Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is only member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                PNUser  userD = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (2 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is head of Team2 - UserD is head of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBHeadTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is head of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDHeadTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2 - Promote UserD to head of Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Title with Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is head of Team2 - UserD and UserE are members of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; DeleteUserA from Team2 - Promote UserE to head of Team2.")]
            class MultipleTitleRecruitUserAHeadUserBMemberUserCMemberTeam1UserAHeadUserDMemberUserEMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0x00000000 != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(1));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam2.Privliges) || (0x00000000 != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0x00000000 != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }    

    
    
        [TestCase, Description("Single Team with Head Recruit: UserA is not on Team1. No change to Team1.")]
            class SingleTeamHeadRecruitUserANotTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is member of Team1. Delete UserA from Team1.")]
            class SingleTeamHeadRecruitUserAMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is only member of Team1. Delete Team1.")]
            class SingleTeamHeadRecruitUserAOnlyTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1. Delete UserA from Team1.")]
            class SingleTeamHeadRecruitUserAHeadUserBHeadTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1.  Delete UserA from Team1 - Promote UserB to head of Team1.")]
            class SingleTeamHeadRecruitUserAHeadUserBMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Single Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1.  Delete UserA from Team1 - Promote UserC to head of Team1.")]
            class SingleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is not on Team1; UserA is not on Team2. No change to Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserANotTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is member of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitTeamUserAMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is only member of Team1; UserA is not on Team2. Delete Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAOnlyTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is not on Team2. Delete UserA from Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is not on Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; No change to Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserANotTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (3 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is member of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is only member of Team1; UserA is member of Team2. Delete Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAOnlyTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is head of Team1; UserA is member of Team2. Delete UserA from Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBHeadTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB is member of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserB to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (3 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is head of Team1 - UserB and UserC are members of Team1; UserA is member of Team2.  Delete UserA from Team1 - Promote UserC to head of Team1; Delete UserA from Team2.")]
            class MultipleTeamHeadRecruitUserAHeadUserBMemberUserCMemberTeam1UserAMemberTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userB = m_TeamCleanerInfo.GetUser(this.Name + " - userB");
                PNUser           userC = m_TeamCleanerInfo.GetUser(this.Name + " - userC");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberB = null;
                TeamMember       memberC = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userB, m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (4 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userB.UserId == teammember.UserId) 
                    {
                        memberB = teammember;
                    }
                    else if (userC.UserId == teammember.UserId) 
                    {
                        memberC = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberB) || (null == memberC) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0x00000000 != memberB.Privliges) || (0x00000000 != memberC.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam1.Joined) || (true != memberB.Joined) || (true != memberC.Joined) || (false != memberF.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                // User Info
                PNUser           userD = m_TeamCleanerInfo.GetUser(this.Name + " - userD");
                PNUser           userE = m_TeamCleanerInfo.GetUser(this.Name + " - userE");
                PNUser           userG = m_TeamCleanerInfo.GetUser(this.Name + " - userG");

                TeamMember       memberAteam2 = null;
                TeamMember       memberD = null;
                TeamMember       memberE = null;
                TeamMember       memberG = null;

                // Team Info
                TeamCleanerTeam  team2 = m_TeamCleanerInfo.GetTeam(this.Name + " - team2");
                TeamMember[]     team2members = null;



                // Get the members
                m_TeamCleanerInfo.Logon(userD, m_TeamCleanerInfo.GetTitleId(0));
                team2.LoadMembersAndRecruits(userD);
                team2members = team2.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userD);

                // Check members
                if (4 != team2members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team2members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam2 = teammember;
                    }
                    else if (userD.UserId == teammember.UserId) 
                    {
                        memberD = teammember;
                    }
                    else if (userE.UserId == teammember.UserId) 
                    {
                        memberE = teammember;
                    }
                    else if (userG.UserId == teammember.UserId) 
                    {
                        memberG = teammember;
                    }
                }

                if ((null == memberAteam2) || (null == memberD) || (null == memberE) || (null == memberG)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0x00000000 != memberAteam2.Privliges) || (0xFFFFFFFF != memberD.Privliges) || (0x00000000 != memberE.Privliges) || (0xFFFFFFFF != memberG.Privliges)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((true != memberAteam2.Joined) || (true != memberD.Joined) || (true != memberE.Joined) || (false != memberG.Joined)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Multiple Team with Head Recruit: UserA is only member of Team1; UserA is only member of Team2. Delete Team1; Delete Team2.")]
            class MultipleTeamHeadRecruitUserAOnlyTeam1UserAOnlyTeam2 : TestBase
        {
            override protected void Execute()
            {
                m_TeamCleanerInfo.Check();

                // User Info
                PNUser           userA = m_TeamCleanerInfo.GetUser(this.Name + " - userA");
                PNUser           userF = m_TeamCleanerInfo.GetUser(this.Name + " - userF");

                TeamMember       memberAteam1 = null;
                TeamMember       memberF = null;

                // Team Info
                TeamCleanerTeam  team1 = m_TeamCleanerInfo.GetTeam(this.Name + " - team1");
                TeamMember[]     team1members = null;



                // Get the members
                PNUser  userB = m_TeamCleanerInfo.CreateUser(m_TeamCleanerInfo.GetTitleId(0));
                team1.LoadMembersAndRecruits(userB);
                team1members = team1.MemberList();

                // Logoff users
                m_TeamCleanerInfo.Logoff(userB);

                // Check members
                if (2 != team1members.Length) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                foreach (TeamMember teammember in team1members) 
                {
                    if (userA.UserId == teammember.UserId) 
                    {
                        memberAteam1 = teammember;
                    }
                    else if (userF.UserId == teammember.UserId) 
                    {
                        memberF = teammember;
                    }
                }

                if ((null == memberAteam1) || (null == memberF)) 
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if ((0xFFFFFFFF != memberAteam1.Privliges) || (0xFFFFFFFF != memberF.Privliges)) 
                {
              