0f, 0.4f, 0.2143f), cD3DVECTOR(0.0f,0.0f,0.0f), 0.0f,0.0f);
			D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR( 0.8000f, 0.8f, 0.1000f), cD3DVECTOR(0.0f,0.0f,0.0f), 0.0f,0.0f);
			// Black strip
			MaterialColor = RGBA_MAKE(0,0,0,255);
			D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR( 0.8f,-0.8000f, 0.1000f), cD3DVECTOR(-0.4650f, 0.3487f, -0.8137f), 0.0f,0.0f);
			D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR( 0.4f,-0.8000f, 0.2143f), cD3DVECTOR(-0.4650f, 0.3487f, -0.8137f), 0.0f,0.0f);
			D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR( 0.4f,-0.2666f, 0.3286f), cD3DVECTOR(-0.4650f, 0.3487f, -0.8137f), 0.0f,0.0f);
			D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR( 0.0f,-0.2666f, 0.4429f), cD3DVECTOR(-0.4650f, 0.3487f, -0.8137f), 0.0f,0.0f);
			D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR( 0.0f, 0.2666f, 0.5571f), cD3DVECTOR(-0.4650f, 0.3487f, -0.8137f), 0.0f,0.0f);
			D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR(-0.4f, 0.2666f, 0.6714f), cD3DVECTOR(-0.4650f, 0.3487f, -0.8137f), 0.0f,0.0f);
			D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR(-0.4f, 0.8000f, 0.7857f), cD3DVECTOR(-0.4650f, 0.3487f, -0.8137f), 0.0f,0.0f);
			D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR(-0.8f, 0.8000f, 0.8000f), cD3DVECTOR(-0.4650f, 0.3487f, -0.8137f), 0.0f,0.0f);
			break;
		//
		// Triangle fan Square, D3DPT_TRIANGLEFAN
		//
		case (15):	
		case (16):	
		case (17):	
		case (18):	
			{
				int i;

				D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR(-0.6f, 0.6f, 0.5f), cD3DVECTOR(0.0f,0.0f,-1.0f), 0.0f,0.0f);

				for (i = -8; i < 9; i++)
				{
					D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR((float)i / 10.0f, 0.8f, 0.5f), cD3DVECTOR(0.0f,0.0f,-1.0f), 0.0f,0.0f);
				}
				for (i = 8; i > -9; i--)
				{
					D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR(0.8f, (float)i / 10.0f, 0.5f), cD3DVECTOR(0.0f,0.0f,-1.0f), 0.0f,0.0f);
				}
				for (i = 8; i > -9; i--)
				{
					D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR((float)i / 10.0f,-0.8f, 0.5f), cD3DVECTOR(0.0f,0.0f,-1.0f), 0.0f,0.0f);
				}
				for (i = -8; i < 9; i++)
				{
					D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR(-0.8f, (float)i / 10.0f, 0.5f), cD3DVECTOR(0.0f,0.0f,-1.0f), 0.0f,0.0f);
				}

				switch (nTest)
				{
					case (15):	// Red fan
						sprintf(msgString, "%sSquare Triangle Fan: Red", msgString);
						MaterialColor = RGBA_MAKE(255,0,0,255);
						break;
					case (16):	// Green fan
						sprintf(msgString, "%sSquare Triangle Fan: Green", msgString);
						MaterialColor = RGBA_MAKE(0,255,0,255);
						break;
					case (17):	// Blue fan
						sprintf(msgString, "%sSquare Triangle Fan: Blue", msgString);
						MaterialColor = RGBA_MAKE(0,0,255,255);
						break;
					case (18):	// White fan
						sprintf(msgString, "%sSquare Triangle Fan: White", msgString);
						MaterialColor = RGBA_MAKE(255,255,255,255);
						break;
				}
			}
			break;
		//
		// Jagged Triangle fan Square, D3DPT_TRIANGLEFAN
		//
		case (19):	
		case (20):	
		case (21):	
		case (22):	
			{
				int i;
				bool bEven;

				D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR(-0.6f, 0.6f, 0.5f), cD3DVECTOR(0.0f,0.0f,-1.0f), 0.0f,0.0f);

				bEven = true;
				for (i = -8; i < 9; i++)
				{
					bEven = (bEven ? false : true);
					D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR((float)i / 10.0f, (bEven ? 0.7f : 0.8f), (bEven ? 0.6f : 0.4f)), cD3DVECTOR(0.0f,0.0f,-1.0f), 0.0f,0.0f);
				}
				for (i = 8; i > -9; i--)
				{
					bEven = (bEven ? false : true);
					D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR((bEven ? 0.3f : 0.8f), (float)i / 10.0f, (bEven ? 0.6f : 0.4f)), cD3DVECTOR(0.0f,0.0f,-1.0f), 0.0f,0.0f);
				}
				for (i = 8; i > -9; i--)
				{
					bEven = (bEven ? false : true);
					D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR((float)i / 10.0f, (bEven ? -0.3f : -0.8f), (bEven ? 0.6f : 0.4f)), cD3DVECTOR(0.0f,0.0f,-1.0f), 0.0f,0.0f);
				}
				for (i = -8; i < 9; i++)
				{
					bEven = (bEven ? false : true);
					D3DVertexList[dwVertexCount++] = cD3DVERTEX(cD3DVECTOR((bEven ? -0.7f : -0.8f), (float)i / 10.0f, (bEven ? 0.6f : 0.4f)), cD3DVECTOR(0.0f,0.0f,-1.0f), 0.0f,0.0f);
				}

				switch (nTest)
				{
					case (19):	// Red fan
						sprintf(msgString, "%sJagged Triangle Fan: Red", msgString);
						MaterialColor = RGBA_MAKE(255,0,0,255);
						break;
					case (20):	// Green fan
						sprintf(msgString, "%sJagged Triangle Fan: Green", msgString);
						MaterialColor = RGBA_MAKE(0,255,0,255);
						break;
					case (21):	// Blue fan
						sprintf(msgString, "%sJagged Triangle Fan: Blue", msgString);
						MaterialColor = RGBA_MAKE(0,0,255,255);
						break;
					case (22):	// White fan
						sprintf(msgString, "%sJagged Triangle Fan: White", msgString);
						MaterialColor = RGBA_MAKE(255,255,255,255);
						break;
				}
			}
			break;
	}

	return MaterialColor;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\basicrst\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\basicrst\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\basicrst\shading.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "BasicRst.h"

//************************************************************************
// Shading Test functions

CShadingTest::CShadingTest()
{
	m_szTestName = TEXT("BasicRst Shading");
	m_szCommandKey = TEXT("Shading");
}

CShadingTest::~CShadingTest()
{
}

UINT CShadingTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

	// Setup the Test range
	SetTestRange(1,SHADING_TESTS);

	// Check the caps we are interested in
	DWORD dwShadeCaps = m_d3dcaps.ShadeCaps;

	// Check the appropriate Shade caps
//	if ((m_dwVersion <= 0x0700) && !(dwShadeCaps & D3DPSHADECAPS_COLORFLATRGB))
//	{
//		WriteToLog("Device capability not supported: Shade Flat.\n");
//		return D3DTESTINIT_ABORT;
//	}

	if (!(dwShadeCaps & D3DPSHADECAPS_COLORGOURAUDRGB))
	{
		WriteToLog("Device capability not supported: Shade Gouraud.\n");
		return D3DTESTINIT_ABORT;
	}

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	return D3DTESTINIT_RUN;
}

bool CShadingTest::ExecuteTest(UINT uTestNum)
{
	// Initialize some variables
 	dwVertexCount = 0;
	msgString[0] = '\0';

	// Set the appropriate renderstate
	if (uTestNum <= 7)
	{
		sprintf(msgString, "%sFlat, ", msgString);
		SetRenderState(D3DRENDERSTATE_SHADEMODE, (DWORD)D3DSHADE_FLAT);

		// Let's build some triangles.
		switch (uTestNum)
		{
			case (1):
				DrawShadeListTests(0);
				sprintf(msgString, "%sEight triangles (Yellow)", msgString);
				break;
			case (2):
				DrawShadeListTests(1);
				sprintf(msgString, "%sEight triangles (Red)", msgString);
				break;
			case (3):
				DrawShadeListTests(2);
				sprintf(msgString, "%sEight triangles (Blue)", msgString);
				break;
			case (4):
				DrawShadeListTests(3);
				sprintf(msgString, "%sEight triangles (Green)", msgString);
				break;
			case (5):
				DrawShadeListTests(4);
				sprintf(msgString, "%sEight triangles (Blue)", msgString);
				break;
			case (6):
				DrawShadeStripTests();
				sprintf(msgString, "%sMulticolor Triangle Strip", msgString);
				break;
			case (7):
				DrawShadeFanTests();
				sprintf(msgString, "%sMulticolor Triangle Fan", msgString);
				break;
		}
	}
	else
	{
		sprintf(msgString, "%sGouraud, ", msgString);
		SetRenderState(D3DRENDERSTATE_SHADEMODE, (DWORD)D3DSHADE_GOURAUD);

		// Let's build some triangles.
		switch (uTestNum-7)
		{
			case (1):
				DrawShadeListTests(0);
				sprintf(msgString, "%sEight triangles (Yellow)", msgString);
				break;
			case (2):
				DrawShadeListTests(1);
				sprintf(msgString, "%sEight triangles (Red, Green, & Blue)", msgString);
				break;
			case (3):
				DrawShadeListTests(2);
				sprintf(msgString, "%sEight triangles (Red & Blue)", msgString);
				break;
			case (4):
				DrawShadeListTests(3);
				sprintf(msgString, "%sEight triangles (Green & Red)", msgString);
				break;
			case (5):
				DrawShadeListTests(4);
				sprintf(msgString, "%sEight triangles (Blue & Green)", msgString);
				break;
			case (6):
				DrawShadeStripTests();
				sprintf(msgString, "%sMulticolor Triangle Strip", msgString);
				break;
			case (7):
				DrawShadeFanTests();
				sprintf(msgString, "%sMulticolor Triangle Fan", msgString);
				break;
		}
	}

	// Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}

void CShadingTest::SceneRefresh(void)
{
	if (BeginScene())
	{
		// Render the data.
		if (PrimType == D3DPT_TRIANGLELIST)
		{
			RenderPrimitive(PrimType,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);
		}
		else
		{
			RenderPrimitive(PrimType,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);
			RenderPrimitive(PrimType,D3DFVF_TLVERTEX,Single1List,3,NULL,0,0);
			RenderPrimitive(PrimType,D3DFVF_TLVERTEX,Single2List,3,NULL,0,0);
			RenderPrimitive(PrimType,D3DFVF_TLVERTEX,Single3List,3,NULL,0,0);
		}

		EndScene();
	}	
}

//************************************************************************
// Internal API:    DrawShadeTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CShadingTest::DrawShadeListTests(int nTest)
{
	// Color of triangles
	D3DCOLOR Color1[] = { RGBA_MAKE(255,255,0,255),	// Yellow
						  RGBA_MAKE(255,0,0,255),	// Red
						  RGBA_MAKE(0,0,255,255),	// Blue
						  RGBA_MAKE(0,255,0,255),	// Green
						  RGBA_MAKE(0,0,255,255) };	// Blue

	D3DCOLOR Color2[] = { RGBA_MAKE(255,255,0,255),	// Yellow
						  RGBA_MAKE(0,255,0,255),	// Green
						  RGBA_MAKE(255,0,0,255),	// Red
						  RGBA_MAKE(255,0,0,255),	// Red
						  RGBA_MAKE(0,0,255,255) };	// Blue

	D3DCOLOR Color3[] = { RGBA_MAKE(255,255,0,255),	// Yellow
						  RGBA_MAKE(0,0,255,255),	// Blue
						  RGBA_MAKE(255,0,0,255),	// Red
						  RGBA_MAKE(0,255,0,255),	// Green
						  RGBA_MAKE(0,255,0,255) };	// Green

	// Set the Triangle Primitive Type to List
	PrimType = D3DPT_TRIANGLELIST;

	// Right Angled with Left and Top
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 10.0f,10.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color1[nTest], 0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 90.0f,10.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color2[nTest], 0, 1.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 10.0f,90.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color3[nTest], 0, 0.0f,1.0f);
				
	// Right Angled with Left and Bottom
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 100.0f,10.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color1[nTest], 0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 180.0f,90.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color2[nTest], 0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 100.0f,90.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color3[nTest], 0, 0.0f,1.0f);
				
	// Equaladiral with edge on Left
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 190.0f,10.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color1[nTest], 0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 270.0f,50.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color2[nTest], 0, 1.0f,0.5f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 190.0f,90.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color3[nTest], 0, 0.0f,1.0f);
				
	// Right Angled with Right and Top
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 10.0f,100.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color1[nTest], 0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 90.0f,100.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color2[nTest], 0, 1.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 90.0f,180.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color3[nTest], 0, 1.0f,1.0f);
				
	// Right Angled with Right and Bottom
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 180.0f,180.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color1[nTest], 0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 100.0f,180.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color2[nTest], 0, 0.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 180.0f,100.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color3[nTest], 0, 1.0f,0.0f);
				
	// Equaladiral with edge on Right
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 270.0f,180.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color1[nTest], 0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 190.0f,140.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color2[nTest], 0, 0.0f,0.5f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 270.0f,100.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color3[nTest], 0, 1.0f,0.0f);
				
	// Equaladiral with edge on Top
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 50.0f,270.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color1[nTest], 0, 0.5f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 10.0f,190.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color2[nTest], 0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 90.0f,190.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color3[nTest], 0, 1.0f,0.0f);
				
	// Equaladiral with edge on Bottom
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 180.0f,270.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color1[nTest], 0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 100.0f,270.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color2[nTest], 0, 0.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 140.0f,190.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), Color3[nTest], 0, 0.5f,0.0f);
}

void CShadingTest::DrawShadeStripTests(void)
{
	// Set the Triangle Primitive Type to Strip
	PrimType = D3DPT_TRIANGLESTRIP;

	// Multicolor Mesh
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  32.0f,170.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(255,0,0,255),  0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  32.0f, 30.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(255,128,0,255),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  83.2f,170.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(128,128,0,255),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 134.4f, 30.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(128,255,0,255),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 185.6f,170.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,255,128,255),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 236.8f, 30.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,128,128,255),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 288.0f,170.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,128,255,255),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 288.0f, 30.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,0,255,255),  0, 0.0f,0.0f);

	// Single TriStrip
	Single1List[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  67.0f,200.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
	Single1List[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 102.0f,270.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
	Single1List[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  32.0f,270.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);

	// Single TriStrip
	Single2List[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 195.0f,270.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
	Single2List[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 125.0f,270.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
	Single2List[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 160.0f,200.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);

	// Single TriStrip
	Single3List[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 218.0f,270.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
	Single3List[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 253.0f,200.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
	Single3List[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 288.0f,270.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
}

void CShadingTest::DrawShadeFanTests(void)
{
	// Set the Triangle Primitive Type to Fan
	PrimType = D3DPT_TRIANGLEFAN;

	// Multicolor Mesh
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,140.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(255,0,0,255),  0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 10.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(255,128,0,255),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 62.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(128,255,0,255),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f,114.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,255,0,255),  0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f,166.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,255,128,255),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f,218.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,128,255,255),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f,270.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,0,255,255),  0, 0.0f,0.0f);

	// Single TriFan
	Single1List[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.0f, 10.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
	Single1List[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 280.0f, 90.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
	Single1List[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 200.0f, 90.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);

	// Single TriFan
	Single2List[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 280.0f,180.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
	Single2List[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 200.0f,180.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
	Single2List[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.0f,100.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);

	// Single TriFan
	Single3List[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 200.0f,270.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
	Single3List[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.0f,190.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
	Single3List[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 280.0f,270.0f + (float)m_vpTest.Y, 0.5f), (1.0f / 0.5f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\basicrst\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_basrst
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    basicrst.cpp \
    colorwrite.cpp \
    culling.cpp \
    dither.cpp \
    fill.cpp \
    meshd3d.cpp \
    meshl.cpp \
    meshtl.cpp \
    nodiffuse.cpp \
    shading.cpp \
    zwrite.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\basicrst\exe\sources.inc ===
TARGETNAME=basicrst
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_basrst.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\basicrst\zwrite.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "BasicRst.h"

//************************************************************************
// ZWrite Test functions

CZWriteTest::CZWriteTest()
{
	m_szTestName = TEXT("BasicRst ZWrite");
	m_szCommandKey = TEXT("ZWrite");
}

CZWriteTest::~CZWriteTest()
{
}

UINT CZWriteTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

	// Setup the Test range
	SetTestRange(1,ZWRITE_TESTS);

	// Only need to check cap for Hardware devices
//	if (m_pAdapter->Devices[n].fHardware)
//	{
		// Check the caps we are interested in
		DWORD dwMiscCaps = m_d3dcaps.PrimitiveMiscCaps;

		// Check the Z mask cap
		if (!(dwMiscCaps & D3DPMISCCAPS_MASKZ))
		{
			WriteToLog("Device capability not supported: Misc MaskZ.\n");
			return D3DTESTINIT_ABORT;
		}
//	}

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	return D3DTESTINIT_RUN;
}

bool CZWriteTest::ExecuteTest(UINT uTestNum)
{
	// Initialize some variables
 	dwVertexCount = 0;
	msgString[0] = 0;
	sprintf(msgString, "");

	// Let's build some triangles.
	DrawZWriteTests();

	// Set the appropriate renderstate
	switch (uTestNum)
	{
		case (1):
			sprintf(msgString, "%sZEnable: True, ZWriteEnable: True, Visible: Green on Blue", msgString);
			SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_TRUE);
			SetRenderState(D3DRENDERSTATE_ZWRITEENABLE, (DWORD)TRUE);
			break;
		case (2):
			sprintf(msgString, "%sZEnable: True, ZWriteEnable: False, Visible: Blue on Green", msgString);
			SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_TRUE);
			SetRenderState(D3DRENDERSTATE_ZWRITEENABLE, (DWORD)FALSE);
			break;
		case (3):
			sprintf(msgString, "%sZEnable: False, ZWriteEnable: True, Visible: Blue on Green", msgString);
			SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_FALSE);
			SetRenderState(D3DRENDERSTATE_ZWRITEENABLE, (DWORD)TRUE);
			break;
		case (4):
			sprintf(msgString, "%sZEnable: False, ZWriteEnable: False, Visible: Blue on Green", msgString);
			SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_FALSE);
			SetRenderState(D3DRENDERSTATE_ZWRITEENABLE, (DWORD)FALSE);
			break;
	}

	// Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}

//************************************************************************
// Internal API:    DrawZWriteTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CZWriteTest::DrawZWriteTests(void)
{
	// Green Triangle
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR(115.0f + (float)m_vpTest.X, 40.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(0,255,0,255), 0, 0.5f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR(205.0f + (float)m_vpTest.X,225.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(0,255,0,255), 0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR( 25.0f + (float)m_vpTest.X,225.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(0,255,0,255), 0, 0.0f,1.0f);

	// Blue Triangle
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR(130.0f + (float)m_vpTest.X, 40.0f + (float)m_vpTest.Y,0.7f),(1.0f / 0.7f), RGBA_MAKE(0,0,255,255), 0, 0.5f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR(225.0f + (float)m_vpTest.X,240.0f + (float)m_vpTest.Y,0.7f),(1.0f / 0.7f), RGBA_MAKE(0,0,255,255), 0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR( 40.0f + (float)m_vpTest.X,240.0f + (float)m_vpTest.Y,0.7f),(1.0f / 0.7f), RGBA_MAKE(0,0,255,255), 0, 0.0f,1.0f);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\basicrst\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=basicrst
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_basrst.lib

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_basrst.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\blend\add.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Blend.h"

//************************************************************************
// Add Test functions

CAddTest::CAddTest()
{
	m_szTestName = TEXT("Texture Blend Add");
	m_szCommandKey = TEXT("Add");

	// Tell parent class what cap to look for
	dwBlendCap = D3DPTBLENDCAPS_ADD;
    dwTextureOpCap = D3DTEXOPCAPS_SELECTARG2;
    dwTextureOpCap2 = D3DTEXOPCAPS_ADD;

  	// Give parent a printable name for the caps
    szTextureOp = "SelectArg2";
    szTextureOp2 = "Add";

	// Tell parent what state we are
	dwBlendState = D3DTBLEND_ADD;
}
 
CAddTest::~CAddTest()
{
}

bool CAddTest::SetDefaultRenderStates(void)
{
	// Turn on Add blending
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)FALSE);

//	if (m_dwVersion <= 0x0600)
//		SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD)D3DTBLEND_ADD);

	return true;
}

void CAddTest::DrawBasicGrid(int nTest, int nTexFormats)
{
	int		nScale, nMapping;
	float	fScale;

	// Initialize the interesting variables
	nMapping = (nTest-1) / (4*nTexFormats);

	nScale = ((nTest-1) / nTexFormats) + 1;
	nScale = nScale % 4;

	if (nScale == 0)
		nScale = 4;

	fScale = 1.0f * nScale;
  
	switch (nMapping)
	{
		case (1): // Use standard ((0,0)(1,0)(0,1)(1,1)) mapping, Black Mesh
			sprintf(msgString, "%sBlack, Map:(0,0)(%d,0)(0,%d)(%d,%d), ",msgString,nScale,nScale,nScale,nScale);
			sprintf(szStatus, "%sBlack Mesh, %dx%d Tiling",szStatus,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,0,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,0,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,0,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,0,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,0,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,0,255),0, fScale,fScale);
			break;
		case (2): // Use ((0,1)(0,0)(1,1)(1,0)) mapping, Red Mesh
			sprintf(msgString, "%sRed, Map:(0,%d)(0,0)(%d,%d)(%d,0), ",msgString,nScale,nScale,nScale,nScale);
			sprintf(szStatus, "%sRed Mesh, %dx%d Tiling",szStatus,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, fScale,  0.0f);
			break;
		case (3): // Use ((1,1)(0,1)(1,0)(0,0)) mapping, Green Mesh
			sprintf(msgString, "%sGreen, Map:(%d,%d)(0,%d)(%d,0)(0,0), ",msgString,nScale,nScale,nScale,nScale);
			sprintf(szStatus, "%sGreen Mesh, %dx%d Tiling",szStatus,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, 0.0f,    0.0f);
			break;
		case (4): // Use ((1,0)(1,1)(0,0)(0,1)) mapping, Blue Mesh
			sprintf(msgString, "%sBlue, Map:(%d,0)(%d,%d)(0,0)(0,%d), ",msgString,nScale,nScale,nScale,nScale);
			sprintf(szStatus, "%sBlue Mesh, %dx%d Tiling",szStatus,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 0.0f,  fScale);
			break;
	}
}

void CAddTest::DrawBlendingGrid(int nAlpha)
{
	// Use standard ((0,0)(1,0)(0,1)(1,1)) mapping, Black Mesh
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,0,nAlpha),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,0,255)   ,0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,0,nAlpha),0, 0.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,0,nAlpha),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,0,255)   ,0, 1.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,0,255)   ,0, 1.0f,1.0f);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\blend\blend.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	Blend.h
 *
 ***************************************************************************/

#ifndef __BLEND_H__
#define __BLEND_H__

//USETESTFRAME

// Defines
#define MAX_TESTS		20

// Class definition
class CBlendTest: public CD3DTest
{
    // Data
	public:
    D3DTLVERTEX     VertexList[6];
    DWORD           dwVertexCount;
	CTexture8*		pTexture;
//	CImageData *	pImage;
//	CImageData *	pAlphaImage;
	DWORD			dwBlendCap;
	DWORD			dwBlendState;
	DWORD			dwSrcAlphaCap;
	DWORD			dwInvSrcAlphaCap;
	DWORD			dwAlphaGouraudCap;
    DWORD           dwTextureOpCap;
    DWORD           dwTextureOpCap2;
	LPCSTR			szTextureOp;
	LPCSTR			szTextureOp2;
    char			msgString[80];
	char			szStatus[80];

	D3DCOLOR		Stripes[8];
	D3DCOLOR		AlphaStripes[8];

    BOOL            m_bExit;

	public:
	CBlendTest();
	~CBlendTest();

	// Framework functions
	virtual UINT TestInitialize(void);
	virtual bool ClearFrame(void);
	virtual bool ExecuteTest(UINT);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);
	virtual bool TestTerminate(void);

	// Helper functions
	virtual void DrawBasicGrid(int nTest, int nTexFormats);
	virtual void DrawBlendingGrid(int nAlpha);

    virtual BOOL    AbortedExit(void);

protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

// Default Class definitions
class CDefaultTest: public CBlendTest
{
	public:
	CDefaultTest();
	~CDefaultTest();

	bool SetDefaultRenderStates(void);
};

// Decal Class definitions
class CDecalTest: public CBlendTest
{
	public:
	CDecalTest();
	~CDecalTest();

	bool SetDefaultRenderStates(void);
};

// Modulate Class definitions
class CModulateTest: public CBlendTest
{
	public:
	CModulateTest();
	~CModulateTest();

	bool SetDefaultRenderStates(void);
};

// Decal Alpha Class definitions
class CDecalAlphaTest: public CBlendTest
{
	public:
	CDecalAlphaTest();
	~CDecalAlphaTest();

	bool SetDefaultRenderStates(void);
};

// Modulate Alpha Class definitions
class CModulateAlphaTest: public CBlendTest
{
	public:
	CModulateAlphaTest();
	~CModulateAlphaTest();

	bool SetDefaultRenderStates(void);
};

// Copy Class definitions
class CCopyTest: public CBlendTest
{
	public:
	CCopyTest();
	~CCopyTest();

	bool SetDefaultRenderStates(void);
};

// Add Class definitions
class CAddTest: public CBlendTest
{
	public:
	CAddTest();
	~CAddTest();

	bool SetDefaultRenderStates(void);
	void DrawBasicGrid(int nTest, int nTexFormats);
	void DrawBlendingGrid(int nAlpha);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\blend\blend.cpp ===
#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Blend.h"

// Global Test and App instance
//CD3DWindowFramework	App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CBlendTest*     pBlendTest;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 7 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pBlendTest = new CDefaultTest();
                break;
            case 1:
                pBlendTest = new CDecalTest();
                break;
            case 2:
                pBlendTest = new CModulateTest();
                break;
            case 3:
                pBlendTest = new CDecalAlphaTest();
                break;
            case 4:
                pBlendTest = new CModulateAlphaTest();
                break;
            case 5:
                pBlendTest = new CCopyTest();
                break;
            case 6:
                pBlendTest = new CAddTest();
                break;
        }

        if (!pBlendTest) {
            return FALSE;
        }

        // Initialize the scene
        if (!pBlendTest->Create(pDisplay)) {
            pBlendTest->Release();
            return FALSE;
        }

        bRet = pBlendTest->Exhibit(pnExitCode);

        bQuit = pBlendTest->AbortedExit();

        // Clean up the scene
        pBlendTest->Release();
    }

    return bRet;
}

CBlendTest::CBlendTest()
{
	szTextureOp = "";
	szTextureOp2 = "";

    pTexture = NULL;
    m_bExit = FALSE;
}

CBlendTest::~CBlendTest()
{
    ReleaseTexture(pTexture);
    pTexture = NULL;
}

UINT CBlendTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

	// Request all texture formats except bumpmap
//	if (!RequestTextureFormats(PF_RGB | PF_FOURCC | PF_LUMINANCE | PF_ALPHA))
//	{
//		WriteToLog("No texture formats found.\n");
//		return D3DTESTINIT_ABORT;
//	}

	// Setup the Test range
	SetTestRange(1, MAX_TESTS * m_uCommonTextureFormats);

    // Check the caps we are interested in
	DWORD dwSrcBlendCaps = m_d3dcaps.SrcBlendCaps;
	DWORD dwDestBlendCaps = m_d3dcaps.DestBlendCaps;
	DWORD dwShadeCaps = m_d3dcaps.ShadeCaps;

    if (m_dwVersion >= 0x0800)
    {
    	DWORD dwTextureOpCaps = m_d3dcaps.TextureOpCaps;

        // Copy == Decal for Dx8, no need to run
        if (dwBlendCap == D3DPTBLENDCAPS_COPY)
        {
		    WriteToLog("This test is not valid on Dx8.\n");
		    return D3DTESTINIT_SKIPALL;
        }

        // Check the appropriate Texture Op caps
	    if (!(dwTextureOpCaps & dwTextureOpCap))
	    {
		    WriteToLog("Device capability not supported: TextureOp %s.\n",szTextureOp);
		    return D3DTESTINIT_SKIPALL;
	    }

        // If needed, check other Texture Op caps
        if (dwTextureOpCap2 && !(dwTextureOpCaps & dwTextureOpCap2))
	    {
		    WriteToLog("Device capability not supported: TextureOp %s.\n",szTextureOp2);
		    return D3DTESTINIT_SKIPALL;
	    }
    }
/*
    else // dwVersion <= 0x0700
    {
	    DWORD dwTextureBlendCaps = m_pAdapter->Devices[n].Desc.dpcTriCaps.dwTextureBlendCaps;

        // Check the appropriate Blend caps
	    if (!(dwTextureBlendCaps & dwBlendCap))
	    {
		    WriteToLog("Device capability not supported: %s.\n",m_szTestName);
		    return D3DTESTINIT_SKIPALL;
	    }
    }
*/
	// Also check the Alpha Blending mode being used
	dwSrcAlphaCap		= (dwSrcBlendCaps & D3DPBLENDCAPS_SRCALPHA);
	dwInvSrcAlphaCap	= (dwDestBlendCaps & D3DPBLENDCAPS_INVSRCALPHA);
	dwAlphaGouraudCap	= (dwShadeCaps & D3DPSHADECAPS_ALPHAGOURAUDBLEND);

	// Setup the colors for the Stripes array

	Stripes[0] = RGBA_MAKE(255,255,255,255);// White
	Stripes[1] = RGBA_MAKE(255,0,0,255);	// Red
	Stripes[2] = RGBA_MAKE(0,255,0,255);	// Green
	Stripes[3] = RGBA_MAKE(0,0,255,255);	// Blue
	Stripes[4] = RGBA_MAKE(255,255,0,255);	// Yellow
	Stripes[5] = RGBA_MAKE(255,0,255,255);	// Magenta
	Stripes[6] = RGBA_MAKE(0,255,255,255);	// Cyan
	Stripes[7] = RGBA_MAKE(128,128,128,255);// Grey

	// Create the stripe image data
//    CImageLoader    Image;

//    pImage = Image.LoadStripes(64,64,8,Stripes,false); 

	// Setup the colors for the AlphaStripes array

	AlphaStripes[0] = RGBA_MAKE(255,255,255,0);		// White
	AlphaStripes[1] = RGBA_MAKE(255,0,0,32);		// Red
	AlphaStripes[2] = RGBA_MAKE(0,255,0,64);		// Green
	AlphaStripes[3] = RGBA_MAKE(0,0,255,127);		// Blue
	AlphaStripes[4] = RGBA_MAKE(255,255,0,128);		// Yellow
	AlphaStripes[5] = RGBA_MAKE(255,0,255,192);		// Magenta
	AlphaStripes[6] = RGBA_MAKE(0,255,255,224);		// Cyan
	AlphaStripes[7] = RGBA_MAKE(128,128,128,255);	// Grey

	// Create the AlphaStripe image data
//    CImageLoader    AlphaImage;

//    pAlphaImage = AlphaImage.LoadStripes(64,64,8,AlphaStripes,false); 

	return D3DTESTINIT_RUN;
}

bool CBlendTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,100,255));
}

bool CBlendTest::ExecuteTest(UINT uTestNum)
{
	// Setup the tests to execute.
	bool bAlphaTexture = false;
	int nTest;
    UINT uTextureFormat;
    ARGBPIXELDESC pixd;

	// Initialize some variables
	nTest = ((uTestNum-1) / m_uCommonTextureFormats) + 1;
 	dwVertexCount = 0;
	msgString[0] = '\0';
	szStatus[0] = '\0';

	// Cleanup previous texture
	SetTexture(0, NULL);
    ReleaseTexture(pTexture);
    pTexture = NULL;

	// Cycle the texture formats
	uTextureFormat = (uTestNum-1) % m_uCommonTextureFormats;

	// Check the texture for an alpha channel
    // TODO: need to handle DX8 formats (m_pCommonTextureFormats[m_pMode->nTextureFormat].d3dfFormat)
//	if ((m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat.dwFlags & PF_ALPHAPIXELS) ||
//        (m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat.dwFlags & PF_ALPHA))
    GetARGBPixelDesc(m_fmtCommon[uTextureFormat], &pixd);
    if (pixd.dwAMask)
		bAlphaTexture = true;

	// Set the default alpha blending renderstates
	SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE);
	SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_ONE);
	SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_ZERO);

	// Let's build some triangles.
	switch (nTest)
	{
		case (1): // Use no Alpha Blending
			sprintf(msgString, "%sAlpha (Tex): Default, ",msgString);
			sprintf(szStatus, "%sAlpha (Tex): Default",szStatus);
			DrawBlendingGrid(255);

			// Create the texture
//		    pTexture = CreateTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),CDDS_TEXTURE_VIDEO,pAlphaImage);
            pTexture = CreateStripedTexture(m_pDevice, 64, 64, 8, AlphaStripes, false, false, m_fmtCommon[uTextureFormat]);
			break;
		case (2): // Use texture Alpha Blending
			sprintf(msgString, "%sAlpha (Tex): SrcAlpha/InvSrcAlpha, ",msgString);
			sprintf(szStatus, "%sAlpha (Tex): SrcAlpha/InvSrcAlpha",szStatus);
			DrawBlendingGrid(255);

			// Make sure device supports the proper alpha blending modes
			if (!dwSrcAlphaCap || !dwInvSrcAlphaCap)
			{
				if (!dwSrcAlphaCap)
					WriteToLog("Device capability not supported: SrcBlend - SrcAlpha.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
//		    pTexture = CreateTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),CDDS_TEXTURE_VIDEO,pAlphaImage);
            pTexture = CreateStripedTexture(m_pDevice, 64, 64, 8, AlphaStripes, false, false, m_fmtCommon[uTextureFormat]);
			break;
		case (3): // Use mesh Alpha Blending
			sprintf(msgString, "%sAlpha (Mesh): SrcAlpha/InvSrcAlpha, ",msgString);
			sprintf(szStatus, "%sAlpha (Mesh): SrcAlpha/InvSrcAlpha",szStatus);
			DrawBlendingGrid(0);

			// Make sure device supports the proper alpha blending modes
			if (!dwSrcAlphaCap || !dwInvSrcAlphaCap)
			{
				if (!dwSrcAlphaCap)
					WriteToLog("Device capability not supported: SrcBlend - SrcAlpha.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Make sure device can do interpolated mesh alpha
			if (!dwAlphaGouraudCap)
			{
				bool bAlphaSkip = false;

				if (m_dwVersion >= 0x0700)
				{
					if ((dwBlendCap == D3DPTBLENDCAPS_DECALALPHA)   || 
						(dwBlendCap == D3DPTBLENDCAPS_MODULATEALPHA)||
						(dwBlendCap == D3DPTBLENDCAPS_ADD))
					{
						bAlphaSkip = true;
					}
				}
				else
				{
					if (!((dwBlendCap == D3DPTBLENDCAPS_DECAL) ||
						  (dwBlendCap == D3DPTBLENDCAPS_COPY)  ||
						  ((dwBlendCap == D3DPTBLENDCAPS_MODULATE) && bAlphaTexture) ||
						  ((dwBlendCap == 0xffffffff) && bAlphaTexture)))
					{
						bAlphaSkip = true;
					}
				}

				if (bAlphaSkip)
				{
					WriteToLog("Device capability not supported: Shade - AlphaGouraudBlend.\n");

					if ((dwBlendCap == D3DPTBLENDCAPS_MODULATE) || (dwBlendCap == 0xffffffff))
						SkipTests(1);
					else
						SkipTests(m_uCommonTextureFormats);

					return false;
				}
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
//		    pTexture = CreateTexture(pImage->GetWidth(),pImage->GetHeight(),CDDS_TEXTURE_VIDEO,pImage);
            pTexture = CreateStripedTexture(m_pDevice, 64, 64, 8, Stripes, false, false, m_fmtCommon[uTextureFormat]);
			break;
		case (4): // Use mesh and texture Alpha Blending
			sprintf(msgString, "%sAlpha (Both): SrcAlpha/InvSrcAlpha, ",msgString);
			sprintf(szStatus, "%sAlpha (Both): SrcAlpha/InvSrcAlpha",szStatus);
			DrawBlendingGrid(0);

			// Make sure device supports the proper alpha blending modes
			if (!dwSrcAlphaCap || !dwInvSrcAlphaCap)
			{
				if (!dwSrcAlphaCap)
					WriteToLog("Device capability not supported: SrcBlend - SrcAlpha.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Make sure device can do interpolated mesh alpha
			if (!dwAlphaGouraudCap)
			{
				bool bAlphaSkip = false;

				if (m_dwVersion >= 0x0700)
				{
					if ((dwBlendCap == D3DPTBLENDCAPS_DECALALPHA)   || 
						(dwBlendCap == D3DPTBLENDCAPS_MODULATEALPHA)||
						(dwBlendCap == D3DPTBLENDCAPS_ADD))
					{
						bAlphaSkip = true;
					}
				}
				else
				{
					if (!((dwBlendCap == D3DPTBLENDCAPS_DECAL) ||
						  (dwBlendCap == D3DPTBLENDCAPS_COPY)  ||
						  ((dwBlendCap == D3DPTBLENDCAPS_MODULATE) && bAlphaTexture) ||
						  ((dwBlendCap == 0xffffffff) && bAlphaTexture)))
					{
						bAlphaSkip = true;
					}
				}

				if (bAlphaSkip)
				{
					WriteToLog("Device capability not supported: Shade - AlphaGouraudBlend.\n");

					if ((dwBlendCap == D3DPTBLENDCAPS_MODULATE) || (dwBlendCap == 0xffffffff))
						SkipTests(1);
					else
						SkipTests(m_uCommonTextureFormats);

					return false;
				}
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
//		    pTexture = CreateTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),CDDS_TEXTURE_VIDEO,pAlphaImage);
            pTexture = CreateStripedTexture(m_pDevice, 64, 64, 8, AlphaStripes, false, false, m_fmtCommon[uTextureFormat]);
			break;
		default:
			DrawBasicGrid(uTestNum,m_uCommonTextureFormats);

			// Create the texture
//		    pTexture = CreateTexture(pImage->GetWidth(),pImage->GetHeight(),CDDS_TEXTURE_VIDEO,pImage);
            pTexture = CreateStripedTexture(m_pDevice, 64, 64, 8, Stripes, false, false, m_fmtCommon[uTextureFormat]);
			break;
	}

	// Tell the framework what texture to use
    if (NULL != pTexture)
	{
        SetTexture(0,pTexture);

//        if (m_dwVersion <= 0x0700)
//        {
//    		sprintf(msgString, "%sTex:",msgString);
//        	GetTexFmtDesc(&m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat,msgString+strlen(msgString),80-strlen(msgString));
//        }
//        else
    		sprintf(msgString, "%sTex:%d",msgString,m_fmtCommon[uTextureFormat]);//D3DFmtToString(m_pCommonTextureFormats[m_pMode->nTextureFormat].d3dfFormat));
	}
	else
	{
/*
		if (m_dwVersion == 0x0600)
		{
            // TODO: need to handle DX8 formats (m_pCommonTextureFormats[m_pMode->nTextureFormat].d3dfFormat)
			DWORD dwFourCC = m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat.dwFourCC;

			if ((dwFourCC == MAKEFOURCC('U','Y','V','Y')) ||
				(dwFourCC == MAKEFOURCC('Y','U','Y','2')))
			{
				char	szFourCC[5];

				szFourCC[0] = (char)(dwFourCC & 0xff);
				szFourCC[1] = (char)((dwFourCC >> 8) & 0xff);
				szFourCC[2] = (char)((dwFourCC >> 16) & 0xff);
				szFourCC[3] = (char)((dwFourCC >> 24) & 0xff);
				szFourCC[4] = '\0';

				WriteToLog("Can not create a FourCC (%s) texture on Dx6.\n",szFourCC);
				SkipTests(1);
				return false;
			}
		}
*/
		WriteToLog("CreateTexture() failed with HResult = %X.\n",GetLastError());
//		TestFinish(D3DTESTFINISH_ABORT);
		return false;
	}

	if ((m_dwVersion >= 0x0700) && (dwBlendCap != 0xffffffff))
	{
        DWORD dwBState = dwBlendState;
        if (dwBState == D3DTBLEND_MODULATE && bAlphaTexture) {
            dwBState = D3DTBLEND_MODULATE_ALPHATEXTURE;
        }
		if (!SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD)dwBState))
		{
			WriteToLog("ValidateDevice Failed: %s\n",msgString);
			SkipTests(1);
			return false;
		}
	}

	// Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}

void CBlendTest::SceneRefresh()
{
	if (BeginScene())
	{
		// Render the data.
	    RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}

bool CBlendTest::ProcessFrame(void)
{
	char	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;
    bool	bResult;

     // Use the standard 15%
    bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how the compare went
    if (bResult)
    {
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
	}

	WriteStatus("$gTest Options$y",szStatus);
	WriteStatus("$gOverall Results",szBuffer);

    return bResult;
}

bool CBlendTest::TestTerminate()
{
	// Cleanup texture & image data
	SetTexture(0, NULL);
    ReleaseTexture(pTexture);
    pTexture = NULL;
//    RELEASE(pImage);
//	RELEASE(pAlphaImage);

	return true;
}

//******************************************************************************
BOOL CBlendTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CBlendTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CBlendTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\blend\default.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Blend.h"

//************************************************************************
// Default Test functions

CDefaultTest::CDefaultTest()
{
	m_szTestName = TEXT("Texture Blend Default");
	m_szCommandKey = TEXT("Default");

	// Tell parent class what cap to look for
	dwBlendCap = 0xffffffff;
	dwTextureOpCap = 0xffffffff;
    dwTextureOpCap2 = 0;
}

CDefaultTest::~CDefaultTest()
{
}
  
bool CDefaultTest::SetDefaultRenderStates(void)
{
	// Turn off texture perspection
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)FALSE);
	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\blend\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\blend\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\blend\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_blend
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
	blend.cpp \
	add.cpp \
	decal.cpp \
	default.cpp \
	draw.cpp \
	modulate.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\blend\exe\sources.inc ===
TARGETNAME=blend
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_blend.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\blend\draw.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Blend.h"

//************************************************************************
// Internal API:    DrawBasicGrid
//
// Purpose:         
//
// Return:          ERROR_SUCCESS if the vertices were setup properly
//************************************************************************
 
void CBlendTest::DrawBasicGrid(int nTest, int nTexFormats)
{
	int		nScale, nMapping;
	float	fScale;

	// Initialize the interesting variables
	nMapping = (nTest-1) / (4*nTexFormats);

	nScale = ((nTest-1) / nTexFormats) + 1;
	nScale = nScale % 4;

	if (nScale == 0)
		nScale = 4;

	fScale = 1.0f * nScale;
  
	switch (nMapping)
	{
		case (1): // Use standard ((0,0)(1,0)(0,1)(1,1)) mapping, White Mesh
			sprintf(msgString, "%sWhite, Map:(0,0)(%d,0)(0,%d)(%d,%d), ",msgString,nScale,nScale,nScale,nScale);
			sprintf(szStatus, "%sWhite Mesh, %dx%d Tiling",szStatus,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,fScale);
			break;
		case (2): // Use ((0,1)(0,0)(1,1)(1,0)) mapping, Red Mesh
			sprintf(msgString, "%sRed, Map:(0,%d)(0,0)(%d,%d)(%d,0), ",msgString,nScale,nScale,nScale,nScale);
			sprintf(szStatus, "%sRed Mesh, %dx%d Tiling",szStatus,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, fScale,  0.0f);
			break;
		case (3): // Use ((1,1)(0,1)(1,0)(0,0)) mapping, Green Mesh
			sprintf(msgString, "%sGreen, Map:(%d,%d)(0,%d)(%d,0)(0,0), ",msgString,nScale,nScale,nScale,nScale);
			sprintf(szStatus, "%sGreen Mesh, %dx%d Tiling",szStatus,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, 0.0f,    0.0f);
			break;
		case (4): // Use ((1,0)(1,1)(0,0)(0,1)) mapping, Blue Mesh
			sprintf(msgString, "%sBlue, Map:(%d,0)(%d,%d)(0,0)(0,%d), ",msgString,nScale,nScale,nScale,nScale);
			sprintf(szStatus, "%sBlue Mesh, %dx%d Tiling",szStatus,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 0.0f,  fScale);
			break;
	}
}
 
//************************************************************************
// Internal API:    DrawBlendingGrid
//
// Purpose:         
//
// Return:          ERROR_SUCCESS if the vertices were setup properly
//************************************************************************

void CBlendTest::DrawBlendingGrid(int nAlpha)
{
	// Use standard ((0,0)(1,0)(0,1)(1,1)) mapping, White Mesh
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,nAlpha),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255)   ,0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,nAlpha),0, 0.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,nAlpha),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255)   ,0, 1.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255)   ,0, 1.0f,1.0f);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\blend\modulex.h ===
#define PREPEND_MODULE(Suffix) blend##Suffix
#define MODULE_STRING "blend"
#pragma comment(linker, "/include:_blend_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\blend\modulate.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Blend.h"

//************************************************************************
// Modulate Test functions

CModulateTest::CModulateTest()
{
	m_szTestName = TEXT("Texture Blend Modulate");
	m_szCommandKey = TEXT("Modulate");

	// Tell parent class what cap to look for
	dwBlendCap = D3DPTBLENDCAPS_MODULATE;
    dwTextureOpCap = D3DTEXOPCAPS_SELECTARG1;
    dwTextureOpCap2 = D3DTEXOPCAPS_MODULATE;

  	// Give parent a printable name for the caps
    szTextureOp = "SelectArg1";
    szTextureOp2 = "Modulate";

	// Tell parent what state we are
	dwBlendState = D3DTBLEND_MODULATE;
}

CModulateTest::~CModulateTest()
{
}
  
bool CModulateTest::SetDefaultRenderStates(void)
{
	// Turn on Modulate blending
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)FALSE);

//	if (m_dwVersion <= 0x0600)
//		SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD)D3DTBLEND_MODULATE);

	return true;
}
  
//************************************************************************
// ModulateAlpha Test functions

CModulateAlphaTest::CModulateAlphaTest()
{
	m_szTestName = TEXT("Texture Blend ModulateAlpha");
	m_szCommandKey = TEXT("ModulateAlpha");

	// Tell parent class what cap to look for
	dwBlendCap = D3DPTBLENDCAPS_MODULATEALPHA;
    dwTextureOpCap = D3DTEXOPCAPS_MODULATE;
    dwTextureOpCap2 = 0;

  	// Give parent a printable name for the caps
    szTextureOp = "Modulate";

	// Tell parent what state we are
	dwBlendState = D3DTBLEND_MODULATEALPHA;
}

CModulateAlphaTest::~CModulateAlphaTest()
{
}

bool CModulateAlphaTest::SetDefaultRenderStates(void)
{
	// Turn on ModulateAlpha blending
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)FALSE);

//	if (m_dwVersion <= 0x0600)
//		SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD)D3DTBLEND_MODULATEALPHA);

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\address.cpp ===
// FILE:        address.cpp
// DESC:        texture address mode tests
// AUTHOR:      Todd M. Frost

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "cshapesfvf.h"
#include "bump.h"

// NAME:        CBumpAddress()
// DESC:        bump address class constructor
// INPUT:       none
// OUTPUT:      none

CBumpAddress::CBumpAddress()
{
    m_szTestName = TEXT("BUMPENV address");
    m_szCommandKey = TEXT("Address");
}

// NAME:        ~CBumpAddress()
// DESC:        bump address class destructor
// INPUT:       none
// OUTPUT:      none

CBumpAddress::~CBumpAddress()
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CBumpAddress::CommandLineHelp(void)
{
    CBump::CommandLineHelp();
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      CBump::TestInitialize()

UINT CBumpAddress::TestInitialize(VOID)
{
    UINT uResult = CBump::TestInitialize();

    if (D3DTESTINIT_RUN != uResult)
        return uResult;

    SetTestRange((UINT) 1, (UINT) (m_uCommonTextureFormats*NMODES*NMODES));
    return D3DTESTINIT_RUN;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest........test number
// OUTPUT:      CBump::ExecuteTests()....if test executed
//              false....................otherwise

bool CBumpAddress::ExecuteTest(UINT uTest)
{
    DWORD dwFormat, dwWidth = (DWORD) 256, dwHeight = (DWORD) 256;
    UINT i, j, uTemp;

    for (uTemp = 1, dwFormat = 0; dwFormat < m_uCommonTextureFormats; dwFormat++)
        for (i = 0; i < NMODES; i++)
            for (j = 0; j < NMODES; j++, uTemp++)
                if (uTemp == uTest)
                {
                    if (((i == j) || m_Flags.bCheck(INDEPENDENT)) &&
                        (m_dwTexAddressCaps & m_dwModeCapsVals[j][0]) &&
                        (m_dwTexAddressCaps & m_dwModeCapsVals[i][0]) &&
                        bSetBump(dwFormat, dwWidth, dwHeight))
                    {
                        m_dwModes[0] = (D3DTEXTUREADDRESS) m_dwModeCapsVals[i][1];
                        m_dwModes[1] = (D3DTEXTUREADDRESS) m_dwModeCapsVals[j][1];
                        return CBump::ExecuteTest(uTest);
                    }
                    else
                    {
                        SkipTests((UINT) 1);
                        return false;
                    }
                }

    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\blend\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=blend
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_blend.lib

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_blend.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\blend\decal.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Blend.h"

//************************************************************************
// Decal Test functions

CDecalTest::CDecalTest()
{
	m_szTestName = TEXT("Texture Blend Decal");
	m_szCommandKey = TEXT("Decal");

	// Tell parent class what cap to look for
	dwBlendCap = D3DPTBLENDCAPS_DECAL;
    dwTextureOpCap = D3DTEXOPCAPS_SELECTARG1;
    dwTextureOpCap2 = 0;

  	// Give parent a printable name for the caps
    szTextureOp = "SelectArg1";

	// Tell parent what state we are
	dwBlendState = D3DTBLEND_DECAL;
}

CDecalTest::~CDecalTest()
{
}
   
bool CDecalTest::SetDefaultRenderStates(void)
{
	// Turn on Decal blending
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)FALSE);

//	if (m_dwVersion <= 0x0600)
//		SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD)D3DTBLEND_DECAL);

	return true;
}

//************************************************************************
// DecalAlpha Test functions

CDecalAlphaTest::CDecalAlphaTest()
{
	m_szTestName = TEXT("Texture Blend DecalAlpha");
	m_szCommandKey = TEXT("DecalAlpha");

	// Tell parent class what cap to look for
	dwBlendCap = D3DPTBLENDCAPS_DECALALPHA;
    dwTextureOpCap = D3DTEXOPCAPS_SELECTARG2;
    dwTextureOpCap2 = D3DTEXOPCAPS_BLENDTEXTUREALPHA;

  	// Give parent a printable name for the caps
    szTextureOp = "SelectArg2";
    szTextureOp2 = "BlendTextureAlpha";

	// Tell parent what state we are
	dwBlendState = D3DTBLEND_DECALALPHA;
}

CDecalAlphaTest::~CDecalAlphaTest()
{
}

bool CDecalAlphaTest::SetDefaultRenderStates(void)
{
	// Turn on DecalAlpha blending
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)FALSE);

//	if (m_dwVersion <= 0x0600)
//		SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD)D3DTBLEND_DECALALPHA);

	return true;
}

//************************************************************************
// Copy Test functions

CCopyTest::CCopyTest()
{
	m_szTestName = TEXT("Texture Blend Copy");
	m_szCommandKey = TEXT("Copy");

	// Tell parent class what cap to look for
	dwBlendCap = D3DPTBLENDCAPS_COPY;
    dwTextureOpCap = D3DTEXOPCAPS_SELECTARG1;
    dwTextureOpCap2 = 0;

  	// Give parent a printable name for the caps
    szTextureOp = "SelectArg1";

	// Tell parent what state we are
	dwBlendState = D3DTBLEND_COPY;
}

CCopyTest::~CCopyTest()
{
}

bool CCopyTest::SetDefaultRenderStates(void)
{
	// Turn on Copy blending
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)FALSE);

//	if (m_dwVersion <= 0x0600)
//		SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD)D3DTBLEND_COPY);

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\blend.cpp ===
// FILE:        blend.cpp
// DESC:        bump luminance blend tests
// AUTHOR:      Todd M. Frost

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "cshapesfvf.h"
#include "bump.h"

DWORD gpdwBlend[NBLENDS][2] = {
    { D3DTEXOPCAPS_MODULATE,   MODULATE   },
    { D3DTEXOPCAPS_MODULATE2X, MODULATE2X },
    { D3DTEXOPCAPS_MODULATE4X, MODULATE4X },
};


// NAME:        CBumpBlend()
// DESC:        bump blend class constructor
// INPUT:       none
// OUTPUT:      none

CBumpBlend::CBumpBlend()
{
    m_szTestName = TEXT("BUMPENV blend");
    m_szCommandKey = TEXT("Blend");
}

// NAME:        ~CBumpBlend()
// DESC:        bump blend class destructor
// INPUT:       none
// OUTPUT:      none

CBumpBlend::~CBumpBlend()
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CBumpBlend::CommandLineHelp(void)
{
    CBump::CommandLineHelp();
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      CBump::TestInitialize()

UINT CBumpBlend::TestInitialize(VOID)
{
    UINT uResult = CBump::TestInitialize();

    if (D3DTESTINIT_RUN != uResult)
        return uResult;

    SetTestRange((UINT) 1, (UINT) (NBLENDS*m_uCommonTextureFormats));
    return D3DTESTINIT_RUN;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest........test number
// OUTPUT:      CBump::ExecuteTests()....if test executed
//              false.....otherwise
// COMMENTS:    D3DTADDRESS_MIRROR most visually pleasing, substitute for wrap if supported

bool CBumpBlend::ExecuteTest(UINT uTest)
{
    DWORD dwFormat, dwWidth = (DWORD) 256, dwHeight = (DWORD) 256;
    UINT i, uTemp;

    if (m_dwTexAddressCaps & D3DPTADDRESSCAPS_MIRROR)
        m_dwModes[1] = m_dwModes[0] = D3DTADDRESS_MIRROR;

    for (uTemp = 1, dwFormat = 0; dwFormat < m_uCommonTextureFormats; dwFormat++)
        for (i = 1; i <= NBLENDS; i++, uTemp++)
            if (uTemp == uTest)
            {
                if ((m_dwTexOpCaps & gpdwBlend[i-1][0]) &&
                    bSetBump(dwFormat, dwWidth, dwHeight))
                {
                    m_Flags.vClear(BLEND);
                    m_Flags.vSet(gpdwBlend[i-1][1]);
                    return CBump::ExecuteTest(uTest);
                }
                else
                {
                    SkipTests((UINT) 1);
                    return false;
                }
            }

    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\flags.cpp ===
// FILE:        flags.cpp
// DESC:        flags class methods
// AUTHOR:      Todd M. Frost

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "cshapesfvf.h"
#include "flags.h"

#ifdef CLASSNAME
#undef CLASSNAME
#endif
#define CLASSNAME TEXT("CFlags")

// NAME:        CFlags()
// DESC:        constructor for flags class
// INPUT:       none
// OUTPUT:      none

CFlags::CFlags(VOID)
{
    m_dwCurrent = (DWORD) 0;
    m_dwSaved = (DWORD) 0;
}

// NAME:        ~CFlags()
// DESC:        destructor for flags class
// INPUT:       none
// OUTPUT:      none

CFlags::~CFlags(VOID)
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\flags.h ===
// FILE:        flags.h
// DESC:        flags class header
// AUTHOR:      Todd M. Frost

#ifndef _CFLAGS
#define _CFLAGS

class CFlags {
    private:
        DWORD m_dwCurrent; // current flags
        DWORD m_dwSaved;   // saved flags

    public:
        inline bool bCheck(DWORD dwFlags)
        {
            if (m_dwCurrent & dwFlags)
                return true;
            else
                return false;
        };
        inline VOID vClear(DWORD dwFlags)
        {
            m_dwCurrent &= ~dwFlags;
        };
        inline VOID vSet(DWORD dwFlags)
        {
            m_dwCurrent |= dwFlags;
        };
        inline DWORD dwGet(VOID)
        {
            return m_dwCurrent;
        };
        inline VOID vSave(VOID)
        {
            m_dwSaved = m_dwCurrent;
        };
        inline VOID vRestore(VOID)
        {
            m_dwCurrent = m_dwSaved;
        };
        inline VOID vReplace(DWORD dwFlags)
        {
            m_dwCurrent = dwFlags;
        };
        CFlags(VOID);
        ~CFlags(VOID); 
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\bump.cpp ===
// FILE:        bump.cpp
// DESC:        bump class methods for
//                  D3DTOP_BUMPENVMAP
//                  D3DTOP_BUMPENVMAPLUMINANCE
//              conformance tests
// AUTHOR:      Todd M. Frost

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "cshapesfvf.h"
#include "bump.h"

//CD3DWindowFramework App;

const UINT DEFAULT_BUMPS = 6;  // default number of bumps
const UINT MIN_BUMPS     = 1;  // min number of bumps
const UINT MAX_BUMPS     = 64; // max number of bumps

const UINT DEFAULT_VARIATIONS = 8;    // default number of variations
const UINT MIN_VARIATIONS     = 2;    // min number of variations
const UINT MAX_VARIATIONS     = 1024; // max number of variations

UINT guBumps = (UINT) DEFAULT_BUMPS;

CTexture8* CreateBumpChannelDataTexture(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, PCHANNELDATA pData, D3DFORMAT fmt);

// NAME:        fBumpDu()
// DESC:        bumpenvmap du
// INPUT:       u....u texture coord
//              v....v texture coord
// OUTPUT:      fx = df/dx = cos(x)*sin(y)
// COMMENTS:    (u,v) scaled from [0,0]x[1,1] to [-guBumps*pi/2,guBumps*pi/2]
//              [-1,1] maps to [-127,127] in LoadChannelData()

FLOAT fBumpDu(FLOAT u, FLOAT v)
{
    FLOAT fTemp, x, y;

    fTemp = (FLOAT) (guBumps*pi); 
    x = fTemp*(u - 0.5f);
    y = fTemp*(v - 0.5f);
    return (FLOAT) (cos(x)*sin(y));
}

// NAME:        fBumpDv()
// DESC:        bumpenvmap dv
// INPUT:       u....u texture coord
//              v....v texture coord
// OUTPUT:      fy = df/dy = sin(x)*cos(y)
// COMMENTS:    (u,v) scaled from [0,0]x[1,1] to [-guBumps*pi/2,guBumps*pi/2]
//              [-1,1] maps to [-127,127] in LoadChannelData()

FLOAT fBumpDv(FLOAT u, FLOAT v)
{
    FLOAT fTemp, x, y;

    fTemp = (FLOAT) (guBumps*pi); 
    x = fTemp*(u - 0.5f);
    y = fTemp*(v - 0.5f);
    return (FLOAT) (sin(x)*cos(y));
}

// NAME:        fBumpLuminance()
// DESC:        bumpenvmap luminance
// INPUT:       u....u texture coord
//              v....v texture coord
// OUTPUT:      f= 0.2*sin(x)*sin(y)
// COMMENTS:    (u,v) scaled from [0,0]x[1,1] to [-guBumps*pi/2,guBumps*pi/2]
//              [-1,1] maps to [-127,127] in LoadChannelData()

FLOAT fBumpLuminance(FLOAT u, FLOAT v)
{
    FLOAT fTemp, x, y;

    fTemp = (FLOAT) (guBumps*pi);
    x = fTemp*(u - 0.5f);
    y = fTemp*(v - 0.5f);
    return (FLOAT) (sin(x)*sin(y));
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CBump*  pBump;
    BOOL    bQuit = FALSE, bRet = TRUE;
    UINT    i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 5 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pBump = new CBumpAddress();
                break;
            case 1:
                pBump = new CBumpBlend();
                break;
            case 2:
                pBump = new CBumpMatrix();
                break;
            case 3:
                pBump = new CBumpOffset();
                break;
            case 4:
                pBump = new CBumpScale();
                break;
        }

        if (!pBump) {
            return FALSE;
        }

        // Initialize the scene
        if (!pBump->Create(pDisplay)) {
            pBump->Release();
            return FALSE;
        }

        bRet = pBump->Exhibit(pnExitCode);

        bQuit = pBump->AbortedExit();

        // Clean up the scene
        pBump->Release();
    }

    return bRet;
}

// NAME:        CBump()
// DESC:        constructor for bump class
// INPUT:       none
// OUTPUT:      none

CBump::CBump(VOID)
{
    D3DFORMAT fmt[] = {
        D3DFMT_X8L8V8U8,
        D3DFMT_L6V5U5,
        D3DFMT_V8U8,
        D3DFMT_Q8W8V8U8,
        D3DFMT_V16U16,
#ifndef DEMO_HACK
        D3DFMT_W11V11U10,
#endif
    };

    m_dwModes[0] = DEFAULT_MODE;
    m_dwModes[1] = DEFAULT_MODE;

    m_dwFormat = NOFORMAT;

    m_dwFVF = (DWORD) 0;

//    m_dwInclusion = (DWORD) PF_BUMPDUDV;

    m_dwModeCapsVals[0][0] = D3DPTADDRESSCAPS_BORDER;
    m_dwModeCapsVals[0][1] = D3DTADDRESS_BORDER;
    m_dwModeCapsVals[1][0] = D3DPTADDRESSCAPS_CLAMP;
    m_dwModeCapsVals[1][1] = D3DTADDRESS_CLAMP;
    m_dwModeCapsVals[2][0] = D3DPTADDRESSCAPS_MIRROR;
    m_dwModeCapsVals[2][1] = D3DTADDRESS_MIRROR;
    m_dwModeCapsVals[3][0] = D3DPTADDRESSCAPS_WRAP;
    m_dwModeCapsVals[3][1] = D3DTADDRESS_WRAP;

    m_fOffset.f = DEFAULT_OFFSET;
    m_fScale.f = DEFAULT_SCALE;

    vSetMatrix((DWORD) MATRIX_SCALE_DUDV, DEFAULT_MAG, DEFAULT_MAG);

    m_pVertices = NULL;

//    m_pBaseImage = NULL;
//    m_pBumpImage = NULL;

    m_pBaseTexture = NULL;
    m_pBumpTexture = NULL;

//    m_pMaterial = NULL;

    m_uCommonTextureFormats = countof(fmt);
    memcpy(m_fmtCommon, fmt, m_uCommonTextureFormats * sizeof(D3DFORMAT));

    m_bExit = FALSE;
}

// NAME:        ~CBump()
// DESC:        destructor for bump class
// INPUT:       none
// OUTPUT:      none

CBump::~CBump(VOID)
{
    if (m_pVertices)
        free (m_pVertices);

//    RELEASE(m_pMaterial);

    ReleaseTexture(m_pBumpTexture);
    m_pBumpTexture = NULL;
//    RELEASE(m_pBumpImage);

    ReleaseTexture(m_pBaseTexture);
    m_pBaseTexture = NULL;
//    RELEASE(m_pBaseImage);
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CBump::CommandLineHelp(void)
{
//    WriteCommandLineHelp("$ybumps: $wbumps per texture $c(default=6)");
//    WriteCommandLineHelp("$yvalidate: $wvalidate $c(On/$wOff$c)");
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      appropriate D3DTESTINIT code
// COMMENTS:    material released before returning D3DTESTINIT_SKIPALL or D3DTESTINIT_ABORT
//              RELEASE(m_pMaterial) causes access violations in TestTerminate otherwise

UINT CBump::TestInitialize(VOID)
{
    bool bFound;
//    CImageLoader Loader;
    DWORD dwCount, dwFlags, dwFormat;
    DWORD dwWidth = (DWORD) 256, dwHeight = (DWORD) 256;
    D3DCOLOR pdwColors[] = {
        RGBA_MAKE(255, 255, 255, 255),
        RGBA_MAKE(255,   0,   0, 255),
        RGBA_MAKE(  0, 255,   0, 255),
        RGBA_MAKE(  0,   0, 255, 255)
    };
//    INT nDevice = m_pMode->nSrcDevice;
    UINT i, j, k;

    if (m_pDisplay->GetConnectionStatus() == SERVER_CONNECTED) {
        m_uCommonTextureFormats--;
    }

    // set defaults

    m_dwModes[0] = DEFAULT_MODE;
    m_dwModes[1] = DEFAULT_MODE;

    m_dwFormat = NOFORMAT;

    m_fOffset.f = DEFAULT_OFFSET;
    m_fScale.f = DEFAULT_SCALE;

    vSetMatrix((DWORD) MATRIX_SCALE_DUDV, DEFAULT_MAG, DEFAULT_MAG);
    vProcessArgs();

    // scan for base texture (non-palettized rgb texture with largest number of green bits)

    bFound = true;
/* 
    if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_ALPHAPIXELS))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED1))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED2))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED4))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED8))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXEDTO8))
        bFound = false;

    if (!bFound || (0 == m_uCommonTextureFormats))
    {
        WriteToLog(_T("No non-palettized RGB texture formats enumerated."));
        RELEASE(m_pMaterial);
        return D3DTESTINIT_ABORT;
    }

//    m_pMode->nTextureFormat = (int) 0;
    dwCount = (DWORD) 0;

    // TODO: need to handle DX8 formats (m_pCommonTextureFormats[m_pMode->nTextureFormat].d3dfFormat)
    for (dwFormat = 0; dwFormat < m_uCommonTextureFormats; dwFormat++)
        if (dwCount < dwGetCountFromMask(m_pCommonTextureFormats[dwFormat].ddpfPixelFormat.dwGBitMask))
        {
            dwCount = dwGetCountFromMask(m_pCommonTextureFormats[dwFormat].ddpfPixelFormat.dwGBitMask);
            m_pMode->nTextureFormat = (int) dwFormat;
        }

    dwCount = sizeof(pdwColors)/sizeof(D3DCOLOR);

    if (!(m_pBaseImage = Loader.LoadStripes(dwWidth, dwHeight, dwCount, pdwColors, true, true)))
    {
        WriteToLog(_T("Unable to load base image."));
        RELEASE(m_pMaterial);
        return D3DTESTINIT_ABORT;
    }

    if (!(m_pBaseTexture = CreateTexture(dwWidth, dwHeight, CDDS_TEXTURE_VIDEO, m_pBaseImage)))
*/
    m_pBaseTexture = CreateStripedTexture(m_pDevice, dwWidth, dwHeight, 
                            sizeof(pdwColors)/sizeof(D3DCOLOR), pdwColors,
                            true, true, D3DFMT_X8R8G8B8);
    if (!m_pBaseTexture)
    {
        WriteToLog(_T("Unable to create base texture."));
//        RELEASE(m_pMaterial);
        return D3DTESTINIT_ABORT;
    }

    // scan for bump textures

//    ResetTextureFormats();
/*
    if (!RequestTextureFormats(m_dwInclusion))
    {
        WriteToLog(_T("No BUMPDUDV texture formats enumerated."));
        RELEASE(m_pMaterial);
        SetTestRange((UINT) 1, (UINT) 1);
        return D3DTESTINIT_SKIPALL;
    }
*/
    // check caps and log cap/texture enumeration mismatches

    m_dwTexAddressCaps = m_d3dcaps.TextureAddressCaps;
    m_dwTexOpCaps = m_d3dcaps.TextureOpCaps;
    m_dwSrcBlendCaps = m_d3dcaps.SrcBlendCaps;
    m_dwDestBlendCaps = m_d3dcaps.DestBlendCaps;

    if (!(m_dwTexOpCaps & D3DTEXOPCAPS_BUMPENVMAP))
        WriteToLog(_T("BUMPDUDV textures enumerated, D3DTOP_BUMPENVMAP not supported."));

    // TODO: need to handle DX8 formats (m_pCommonTextureFormats[m_pMode->nTextureFormat].d3dfFormat)
    if (!(m_dwTexOpCaps & D3DTEXOPCAPS_BUMPENVMAPLUMINANCE))
//        for (i = 0; i < m_uCommonTextureFormats; i++)
//            if (m_pCommonTextureFormats[i].ddpfPixelFormat.dwFlags & PF_BUMPLUMINANCE)
                WriteToLog(_T("BUMPLUMINANCE textures enumerated, D3DTOP_BUMPENVMAPLUMINANCE not supported."));

    if (m_d3dcaps.MaxTextureBlendStages < 2)
    {
        WriteToLog(_T("Device does NOT support sufficient number of texture stages (2)."));
//        RELEASE(m_pMaterial);
        return D3DTESTINIT_ABORT;
    }

    // initialize triangle mesh and texture image data

    if (m_dwTexAddressCaps & D3DPTADDRESSCAPS_INDEPENDENTUV)
        m_Flags.vSet(INDEPENDENT);

    if (!m_Shape.NewShape(CS_MESH))
    {
        WriteToLog(_T("Unable to create mesh."));
//        RELEASE(m_pMaterial);
        return D3DTESTINIT_ABORT;
    }

    m_dwFVF = D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX2;
    m_Shape.ConvertToFVF(m_dwFVF);
    m_Shape.ScaleCoords((DWORD) 0, (D3DVALUE) 3.0, (D3DVALUE) 3.0);
    m_Shape.OffsetCoords((DWORD) 0, (D3DVALUE) -1.0, (D3DVALUE) -1.0);
    m_Shape.ScaleCoords((DWORD) 1, (D3DVALUE) 3.0, (D3DVALUE) 3.0);
    m_Shape.OffsetCoords((DWORD) 1, (D3DVALUE) -1.0, (D3DVALUE) -1.0);

    m_pVertices = (PFLEXVERT) malloc(sizeof(FLEXVERT)*m_Shape.m_nVertices);
   
    if (!m_pVertices)
    {
        WriteToLog(_T("Unable to create non strided data."));
//        RELEASE(m_pMaterial);
        return D3DTESTINIT_ABORT;
    }
 
    for (i = 0; i < (UINT)m_Shape.m_nVertices; i++)
    {
        m_pVertices[i].fPx = m_Shape.m_pVertices[i].x;
        m_pVertices[i].fPy = m_Shape.m_pVertices[i].y;
        m_pVertices[i].fPz = m_Shape.m_pVertices[i].z;

        m_pVertices[i].fNx = m_Shape.m_pVertices[i].nx;
        m_pVertices[i].fNy = m_Shape.m_pVertices[i].ny;
        m_pVertices[i].fNz = m_Shape.m_pVertices[i].nz;

        m_pVertices[i].fSu = m_Shape.m_TexCoords[i].Pair[0].tu;
        m_pVertices[i].fSv = m_Shape.m_TexCoords[i].Pair[0].tv;

        m_pVertices[i].fTu = m_Shape.m_TexCoords[i].Pair[1].tu;
        m_pVertices[i].fTv = m_Shape.m_TexCoords[i].Pair[1].tv;
    }

    m_Data.dwAlpha = (DWORD) CIL_UNSIGNED;
    m_Data.dwRed   = (DWORD) 0;
    m_Data.dwGreen = (DWORD) 0;
    m_Data.dwBlue  = (DWORD) CIL_UNSIGNED;
    m_Data.fAlpha = NULL;
    m_Data.fRed   = fBumpDu;
    m_Data.fGreen = fBumpDv;
    m_Data.fBlue  = fBumpLuminance;

    return D3DTESTINIT_RUN;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test is executed successfully
//              false....otherwise

bool CBump::ExecuteTest(UINT uTest)
{
    bool bResult = true, bValid = true;
    int iStage = (int) 0;
//    CHAR szFormat[MAXBUFFER];
    CHAR szBlend[NBLENDS+1][11] = {
        "MODULATE",
        "MODULATE2X",
        "MODULATE4X",
        "SELECTARG1"
    };
    CHAR szMatrixFormat[NMATRICES][14] = {
        "scale Du",
        "scale Dv",
        "scale DuDv",
        "skew Du",
        "skew Dv",
        "skew DuDv"
    };
    CHAR szMode[NMODES][7] = {
        "wrap",
        "mirror",
        "clamp",
        "border"
    };
    LPCSTR szFormat[] = {
        "D3DFMT_V8U8",
        "D3DFMT_L6V5U5",
        "D3DFMT_X8L8V8U8",
        "D3DFMT_Q8W8V8U8",
        "D3DFMT_V16U16",
        "D3DFMT_W11V11U10",
    };
    D3DCOLOR dwColor;
    D3DTEXTUREOP dwOp;
    UINT uBlend;

    // TODO: need to handle DX8 formats (m_pCommonTextureFormats[m_pMode->nTextureFormat].d3dfFormat)
//    if (m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat.dwFlags & PF_BUMPLUMINANCE)
    if (m_dwFormat > 3)
        dwOp = D3DTOP_BUMPENVMAPLUMINANCE;
    else
        dwOp = D3DTOP_BUMPENVMAP;

    dwColor = RGBA_MAKE(128, 128, 128, 255);    // (Du,Dv,Lu) = (0.0,0.0,0.5)
    SetTextureStageState(iStage, D3DTSS_BORDERCOLOR, dwColor);

    if (m_Flags.bCheck(INDEPENDENT))
    {
        SetTextureStageState(iStage, D3DTSS_ADDRESSU, (DWORD) m_dwModes[0]);
        SetTextureStageState(iStage, D3DTSS_ADDRESSV, (DWORD) m_dwModes[1]);
    }
    else
    {
        SetTextureStageState(iStage, D3DTSS_ADDRESSU, (DWORD) m_dwModes[0]);
        SetTextureStageState(iStage, D3DTSS_ADDRESSV, (DWORD) m_dwModes[0]);
    }

    SetTextureStageState(iStage, D3DTSS_MAGFILTER, (DWORD) TEXF_LINEAR);
    SetTextureStageState(iStage, D3DTSS_MINFILTER, (DWORD) TEXF_LINEAR);
    SetTextureStageState(iStage, D3DTSS_MIPFILTER, (DWORD) TEXF_NONE);
    SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) dwOp);
    SetTextureStageState(iStage, D3DTSS_COLORARG1, (DWORD) D3DTA_TEXTURE);
    SetTextureStageState(iStage, D3DTSS_COLORARG2, (DWORD) D3DTA_DIFFUSE);
    SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_SELECTARG1);
    SetTextureStageState(iStage, D3DTSS_ALPHAARG1, (DWORD) D3DTA_TEXTURE);
    SetTextureStageState(iStage, D3DTSS_ALPHAARG2, (DWORD) D3DTA_DIFFUSE);
    SetTextureStageState(iStage, D3DTSS_BUMPENVMAT00, m_fMatrix[0][0].dw);
    SetTextureStageState(iStage, D3DTSS_BUMPENVMAT01, m_fMatrix[0][1].dw);
    SetTextureStageState(iStage, D3DTSS_BUMPENVMAT10, m_fMatrix[1][0].dw);
    SetTextureStageState(iStage, D3DTSS_BUMPENVMAT11, m_fMatrix[1][1].dw);
    SetTextureStageState(iStage, D3DTSS_BUMPENVLOFFSET, m_fOffset.dw);
    SetTextureStageState(iStage, D3DTSS_BUMPENVLSCALE, m_fScale.dw);
    SetTextureStageState(iStage, D3DTSS_TEXCOORDINDEX, (DWORD) 1);
    SetTexture(iStage, m_pBumpTexture);
    iStage++;

    if (m_Flags.bCheck(MODULATE))
    {
        dwOp = D3DTOP_MODULATE;
        uBlend = (UINT) 0;
    }
    else if (m_Flags.bCheck(MODULATE2X))
    {
        dwOp = D3DTOP_MODULATE2X;
        uBlend = (UINT) 1;
    }
    else if (m_Flags.bCheck(MODULATE4X))
    {
        dwOp = D3DTOP_MODULATE4X;
        uBlend = (UINT) 2;
    }
    else
    {
        dwOp = D3DTOP_SELECTARG1;
        uBlend = (UINT) 3;
    }

    dwColor = RGBA_MAKE(0, 0, 255, 255);
    SetTextureStageState(iStage, D3DTSS_BORDERCOLOR, dwColor);

    if (m_Flags.bCheck(INDEPENDENT))
    {
        SetTextureStageState(iStage, D3DTSS_ADDRESSU, (DWORD) m_dwModes[0]);
        SetTextureStageState(iStage, D3DTSS_ADDRESSV, (DWORD) m_dwModes[1]);
    }
    else
    {
        SetTextureStageState(iStage, D3DTSS_ADDRESSU, (DWORD) m_dwModes[0]);
        SetTextureStageState(iStage, D3DTSS_ADDRESSV, (DWORD) m_dwModes[0]);
    }

    SetTextureStageState(iStage, D3DTSS_MAGFILTER, (DWORD) TEXF_LINEAR);
    SetTextureStageState(iStage, D3DTSS_MINFILTER, (DWORD) TEXF_LINEAR);
    SetTextureStageState(iStage, D3DTSS_MIPFILTER, (DWORD) TEXF_NONE);
    SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) dwOp);
    SetTextureStageState(iStage, D3DTSS_COLORARG1, (DWORD) D3DTA_TEXTURE);
    SetTextureStageState(iStage, D3DTSS_COLORARG2, (DWORD) D3DTA_CURRENT);
    SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_SELECTARG1);
    SetTextureStageState(iStage, D3DTSS_ALPHAARG1, (DWORD) D3DTA_TEXTURE);
    SetTextureStageState(iStage, D3DTSS_ALPHAARG2, (DWORD) D3DTA_CURRENT);
    SetTextureStageState(iStage, D3DTSS_TEXCOORDINDEX, (DWORD) 0);

    SetTextureStageState(iStage, D3DTSS_BUMPENVMAT00, m_fMatrix[0][0].dw);
    SetTextureStageState(iStage, D3DTSS_BUMPENVMAT01, m_fMatrix[0][1].dw);
    SetTextureStageState(iStage, D3DTSS_BUMPENVMAT10, m_fMatrix[1][0].dw);
    SetTextureStageState(iStage, D3DTSS_BUMPENVMAT11, m_fMatrix[1][1].dw);
    SetTextureStageState(iStage, D3DTSS_BUMPENVLOFFSET, m_fOffset.dw);
    SetTextureStageState(iStage, D3DTSS_BUMPENVLSCALE, m_fScale.dw);

    SetTexture(iStage, m_pBaseTexture);
    iStage++;

    SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_DISABLE);
    SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_DISABLE);

#ifndef UNDER_XBOX
    if (m_Flags.bCheck(VALIDATE))
    {
        DWORD dwSrc, dwRef;
        HRESULT hSrc, hRef;

        if (!ValidateDevice(&hSrc, &dwSrc, &hRef, &dwRef))
        {
            if (D3D_OK != hSrc)
            {
                WriteToLog(_T("Src requires %d passes:  %X."), dwSrc, hSrc);
                bValid = false;
            }

            if (D3D_OK != hRef)
            {
                WriteToLog(_T("Ref requires %d passes:  %X."), dwRef, hRef);
                bValid = false;
            }
        }
    }

    if (!bValid)
    {
        SkipTests((UINT) 1);
        return true;
    }
#endif
   
    // TODO: need to handle DX8 formats (m_pCommonTextureFormats[m_pMode->nTextureFormat].d3dfFormat)
//    sprintf(szFormat, "Du%d:Dv%d:Lu%d", 
//            dwGetCountFromMask(m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat.dwBumpDuBitMask),
//            dwGetCountFromMask(m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat.dwBumpDvBitMask),
//            dwGetCountFromMask(m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat.dwBumpLuminanceBitMask));
    sprintf(m_szBuffer, "%s, %s (%s,%s)",
            szFormat[m_dwFormat],
            szBlend[uBlend],
            szMode[m_dwModes[0] - 1], szMode[m_dwModes[1] - 1]);
    BeginTestCase(m_szBuffer);

    SwitchAPI((UINT)m_fFrame);

    m_pDevice->SetViewport(&m_vpFull);
    m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(74, 150, 202), 1.0f, 0);

    m_pDevice->SetViewport(&m_vpTest);

    ClearFrame();

    if (BeginScene())
    {
        if (!RenderPrimitive(D3DPT_TRIANGLELIST, m_dwFVF,
                             m_pVertices, m_Shape.m_nVertices,
                             m_Shape.m_pIndices, m_Shape.m_nIndices, (DWORD) 0))
        {
            WriteToLog(_T("RenderPrimitive() failed."));
            bResult = false;
        }

        // Display the adapter mode
        ShowDisplayMode();

        // Display the frame rate
        ShowFrameRate();

        // Display the console
        m_pDisplay->ShowConsole();

        if (!EndScene())
        {
            WriteToLog(_T("EndScene() failed."));
            bResult = false;
        }
    }
    else
    {
        WriteToLog(_T("BeginScene() failed."));
        bResult = false;
    }

    sprintf(m_szBuffer, "$y%s", szFormat);
    WriteStatus("$gFormat", m_szBuffer);
    sprintf(m_szBuffer, "$y%s", szMatrixFormat[m_dwMatrixFormat]);
    WriteStatus("$gMatrix", m_szBuffer);
    sprintf(m_szBuffer, "$y%f", m_fOffset.f);
    WriteStatus("$gOffset", m_szBuffer);
    sprintf(m_szBuffer, "$y%f", m_fScale.f);
    WriteStatus("$gScale", m_szBuffer);
    sprintf(m_szBuffer, "$y%s", szBlend[uBlend]);
    WriteStatus("$gBlend", m_szBuffer);
    sprintf(m_szBuffer, "$y%s", szMode[m_dwModes[0] - 1]);
    WriteStatus("$gU Mode", m_szBuffer);
    sprintf(m_szBuffer, "$y%s", szMode[m_dwModes[1] - 1]);
    WriteStatus("$gV Mode", m_szBuffer);

    ProcessFrame();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

//    return bResult;
    return false;
}

// NAME:        ProcessFrame()
// DESC:        process frame
// INPUT:       none
// OUTPUT:      bResult..result of src:ref image comparison

bool CBump::ProcessFrame(VOID)
{
    bool bResult;
    static int nPass = 0;
    static int nFail = 0;

    bResult = GetCompareResult(0.15f, 0.78f, (int) 0);

    if (bResult)
    {
        (m_fIncrementForward) ? nPass++ : nPass--;
        sprintf(m_szBuffer, "$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
    else
    {
        (m_fIncrementForward) ? nFail++ : nFail--;
        sprintf(m_szBuffer, "$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
    }

    WriteStatus("$gSummary", m_szBuffer);
    return bResult;
}

// NAME:        TestTerminate()
// DESC:        terminate test
// INPUT:       none
// OUTPUT:      true

bool CBump::TestTerminate(VOID)
{
//    RELEASE(m_pMaterial);

    ReleaseTexture(m_pBaseTexture);
    m_pBaseTexture = NULL;
//    RELEASE(m_pBaseImage);

    ReleaseTexture(m_pBumpTexture);
    m_pBumpTexture = NULL;
//    RELEASE(m_pBumpImage);
    return true;
}

// NAME:        SetDefaultLightStates()
// DESC:        set default light states
// INPUT:       none
// OUTPUT:      true.....if SetLightState() succeeds
//              false....otherwise

bool CBump::SetDefaultLightStates(VOID)
{
//    return SetLightState(D3DLIGHTSTATE_AMBIENT, RGBA_MAKE(164, 164, 164, 255));
    return SetRenderState(D3DRENDERSTATE_AMBIENT, RGBA_MAKE(164, 164, 164, 255));
}

// NAME:        SetDefaultLights()
// DESC:        set default lights
// INPUT:       none
// OUTPUT:      true.....if default lights set successfully
//              false....otherwise

bool CBump::SetDefaultLights(VOID)
{
//    bool bSet;
//    CLight *pLight = CreateLight();
    D3DLIGHT8 Data;
    HRESULT     hr;

    memset(&Data, 0, sizeof(Data));
//    Data.dwSize = sizeof(D3DLIGHT2);
    Data.Type = D3DLIGHT_POINT;
    Data.Diffuse.r = 0.4f;
    Data.Diffuse.g = 0.4f;
    Data.Diffuse.b = 0.4f;
    Data.Diffuse.a = 1.0f;
    Data.Position.x = 0.0f;
    Data.Position.y = 0.0f;
    Data.Position.z = -500.0f;
    Data.Range = D3DLIGHT_RANGE_MAX;
    Data.Attenuation0 = 1.0f;
    Data.Attenuation1 = 0.0f;
    Data.Attenuation2 = 0.0f;
//    Data.dwFlags = D3DLIGHT_ACTIVE;

//    pLight->SetLight(&Data);
//    bSet = SetLight((UINT) 0, pLight);
//    RELEASE(pLight);
//    return bSet;

    hr = m_pDevice->SetLight(0, &Data);
    if (FAILED(hr)) {
        return false;
    }

    hr = m_pDevice->LightEnable(0, TRUE);
	
	return (hr == D3D_OK);
}

// NAME:        SetDefaultMaterials()
// DESC:        set default materials
// INPUT:       none
// OUTPUT:      true.....if default materials set successfully
//              false....otherwise

bool CBump::SetDefaultMaterials(VOID)
{
//    bool bSet;
    D3DMATERIAL8 Data;
    HRESULT      hr;

//    RELEASE(m_pMaterial);
//    m_pMaterial = CreateMaterial();

    memset(&Data, 0 , sizeof(Data));
//    Data.dwSize = sizeof(Data);
    Data.Diffuse.r = 0.8f;
    Data.Diffuse.g = 0.8f;
    Data.Diffuse.b = 0.8f;
    Data.Diffuse.a = 0.5f;
    Data.Ambient.r = 0.4f;
    Data.Ambient.g = 0.4f;
    Data.Ambient.b = 0.4f;
    Data.Ambient.a = 0.0f;
    Data.Specular.r = 0.2f;
    Data.Specular.g = 0.2f;
    Data.Specular.b = 0.2f;
    Data.Specular.a = 0.0f;
    Data.Power = 20.0f;
//    Data.dwRampSize = (DWORD) 32;

//    m_pMaterial->SetMaterial(&Data);
//    bSet = SetMaterial(m_pMaterial);
//    return bSet;
    hr = m_pDevice->SetMaterial(&Data);
    return (hr == D3D_OK);
}

// NAME:        SetDefaultMatrices()
// DESC:        setup default matrices
// INPUT:       none
// OUTPUT:      none

bool CBump::SetDefaultMatrices(VOID)
{
    D3DMATRIX Matrix;
    D3DVALUE dvNear = 1.0f, dvFar = 8.0f, dvAngle = 30.0f*pi/180.0f;
    D3DVECTOR At, From, Up;

    Matrix = ProjectionMatrix(dvNear, dvFar, dvAngle);
    
    Matrix = MatrixMult(Matrix, (float) (1.0/Matrix._34) );

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION, &Matrix))
        return false;

    At.x = 0.0f;
    At.y = 0.0f;
    At.z = 0.0f;

    From.x = 0.0f;
    From.y = 0.0f;
    From.z = -2.0f;

    Up.x = 0.0f;
    Up.y = 1.0f;
    Up.z = 0.0f;

    Matrix = ViewMatrix(From, At, Up);

    if (!SetTransform(D3DTRANSFORMSTATE_VIEW, &Matrix))
        return false;

    return true;
}

// NAME:        bSetBump()
// DESC:        set bump map texture
// INPUT:       dwFormat.....texture format
//              dwWidth......texture width
//              dwHeight.....texture height
// OUTPUT:      true.....if requested format is set successfully
//              false....otherwise

bool CBump::bSetBump(DWORD dwFormat, DWORD dwWidth, DWORD dwHeight)
{
    DWORD dwFlags;

    if (m_dwFormat == dwFormat)
        return true;

    if (dwFormat >= m_uCommonTextureFormats)
        return false;

    ReleaseTexture(m_pBumpTexture);
    m_pBumpTexture = NULL;
//    dwFlags = CDDS_TEXTURE_VIDEO;
//    m_pMode->nTextureFormat = dwFormat;
//    m_pBumpTexture = CreateTexture(dwWidth, dwHeight, dwFlags, m_pBumpImage);
    m_pBumpTexture = CreateBumpChannelDataTexture(m_pDevice, dwWidth, dwHeight, &m_Data, m_fmtCommon[dwFormat]);
    if (!m_pBumpTexture)
    {
        WriteToLog(_T("Unable to create bump texture."));
        return false;
    }

    m_dwFormat = dwFormat;
    return true;
}

// NAME:        vSetMatrix()
// DESC:        set bump matrix
// INPUT:       dwType...matrix type
//              fDu......du
//              fDv......dv
// OUTPUT:      none

VOID CBump::vSetMatrix(DWORD dwType, FLOAT fDu, FLOAT fDv)
{
    switch (dwType)
    {
        case MATRIX_SCALE_DU:
            m_fMatrix[0][0].f = fDu;
            m_fMatrix[0][1].f = 0.0f;
            m_fMatrix[1][0].f = 0.0f;
            m_fMatrix[1][1].f = 0.0f;
            m_dwMatrixFormat = MATRIX_SCALE_DU;
        break;

        case MATRIX_SCALE_DV:
            m_fMatrix[0][0].f = 0.0f;
            m_fMatrix[0][1].f = 0.0f;
            m_fMatrix[1][0].f = 0.0f;
            m_fMatrix[1][1].f = fDv;
            m_dwMatrixFormat = MATRIX_SCALE_DV;
        break;

        case MATRIX_SCALE_DUDV:
        default:
            m_fMatrix[0][0].f = fDu;
            m_fMatrix[0][1].f = 0.0f;
            m_fMatrix[1][0].f = 0.0f;
            m_fMatrix[1][1].f = fDv;
            m_dwMatrixFormat = MATRIX_SCALE_DUDV;
        break;

        case MATRIX_SKEW_DU:
            m_fMatrix[0][0].f = 0.0f;
            m_fMatrix[0][1].f = fDu;
            m_fMatrix[1][0].f = 0.0f;
            m_fMatrix[1][1].f = 0.0f;
            m_dwMatrixFormat = MATRIX_SKEW_DU;
        break;

        case MATRIX_SKEW_DV:
            m_fMatrix[0][0].f = 0.0f;
            m_fMatrix[0][1].f = 0.0f;
            m_fMatrix[1][0].f = fDv;
            m_fMatrix[1][1].f = 0.0f;
            m_dwMatrixFormat = MATRIX_SKEW_DV;
        break;

        case MATRIX_SKEW_DUDV:
            m_fMatrix[0][0].f = 0.0f;
            m_fMatrix[0][1].f = fDu;
            m_fMatrix[1][0].f = fDv;
            m_fMatrix[1][1].f = 0.0f;
            m_dwMatrixFormat = MATRIX_SKEW_DUDV;
        break;
    }
}

// NAME:        dwGetCountFromMask()
// DESC:        get count from mask 
// INPUT:       dwMask...bit mask
// OUTPUT:      dwCount...bit count

DWORD CBump::dwGetCountFromMask(DWORD dwMask)
{
    DWORD dwCount, dwTemp;

    for (dwCount = (DWORD) 0, dwTemp = dwMask; dwTemp; dwTemp >>= 1) if (dwTemp & 1) dwCount++;
    return dwCount;
}

// NAME:        fNormalize()
// DESC:        normalize distance of dwCurrent along [dwMin, dwMax]
// INPUT:       dwCurrent....current interval location
//              dwMin........min interval endpoint
//              dwMax........max interval endpoint
// OUTPUT:      fRatio.......normalized distance of dwCurrent along [dwMin, dwMax]

FLOAT CBump::fNormalize(DWORD dwCurrent, DWORD dwMin, DWORD dwMax)
{
    DWORD dwClamped;
    FLOAT fTemp = 0.0f;

    if (dwMin == dwMax)
        return fTemp;

    if (dwCurrent > dwMax)
        dwClamped = dwMax;
    else if (dwCurrent < dwMin)
        dwClamped = dwMin;
    else
        dwClamped = dwCurrent;

    fTemp = ((FLOAT) (dwClamped - dwMin)) / ((FLOAT) (dwMax - dwMin));
    return fTemp;
}

// NAME:        vProcessArgs()
// DESC:        process args
// INPUT:       none
// OUTPUT:      none

VOID CBump::vProcessArgs(VOID)
{
    int iDefault, iResult;

    if (KeySet("WHQL"))
    {
        m_Flags.vSet(VALIDATE);
        guBumps = (UINT) DEFAULT_BUMPS;
        m_uVariations = (UINT) DEFAULT_VARIATIONS;
        return;
    }

    // bumps
    // default:  DEFAULT_BUMPS

    iDefault = (int) DEFAULT_BUMPS;
    ReadInteger("bumps", iDefault, &iResult);

    if (iResult < MIN_BUMPS)
        guBumps = (UINT) MIN_BUMPS;
    else if (iResult > MAX_BUMPS)
        guBumps = (UINT) MAX_BUMPS;
    else
        guBumps = (UINT) iResult;

    // variations
    // default:  DEFAULT_VARIATIONS

    iDefault = (int) DEFAULT_VARIATIONS;
    ReadInteger("variations", iDefault, &iResult);

    if (iResult < MIN_VARIATIONS)
        m_uVariations = (UINT) MIN_VARIATIONS;
    else if (iResult > MAX_VARIATIONS)
        m_uVariations = (UINT) MAX_VARIATIONS;
    else
        m_uVariations = (UINT) iResult;

    // validate
    // default:  true

    if (!KeySet("!validate"))
        m_Flags.vSet(VALIDATE);
}

//******************************************************************************
BOOL CBump::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CBump::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CBump::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}

//******************************************************************************
CTexture8* CreateBumpChannelDataTexture(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, PCHANNELDATA pData, D3DFORMAT fmt)
{
    CTexture8*      pd3dt;
    D3DLOCKED_RECT  d3dlr;
    LPBYTE          pPixel;
    UINT            uStride, uOffset;
    FLOAT           u, v;
    FLOAT           fDelta[2];
    FLOAT           fChannel[4];
    UINT            i, j;
    BYTE            a, r, g, b;
    HRESULT         hr;
#ifdef UNDER_XBOX
    Swizzler        swz(dwWidth, dwHeight, 1);
#endif

    if (!pData)
    {
        return NULL;
    }

    pd3dt = (CTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, fmt);

    if (!pd3dt) {
        return NULL;
    }

#ifdef UNDER_XBOX
    swz.SetU(0);
    swz.SetV(0);
#endif

    hr = pd3dt->LockRect(0, &d3dlr, NULL, 0);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"))) {
        pd3dt->Release();
        return NULL;
    }

    pPixel = (LPBYTE)d3dlr.pBits;

    switch (fmt) {
        case D3DFMT_L6V5U5:
        case D3DFMT_V8U8:
            uStride = 2;
            break;
        case D3DFMT_X8L8V8U8:
        case D3DFMT_Q8W8V8U8:
        case D3DFMT_V16U16:
        case D3DFMT_W11V11U10:
            uStride = 4;
            break;
    }

    fDelta[0] = (FLOAT) 1.0 / (FLOAT) (dwWidth - 1);
    fDelta[1] = (FLOAT) 1.0 / (FLOAT) (dwHeight - 1); 

    for (v = 1.0f, j = 0; j < dwHeight; j++, v -= fDelta[1])
    {
        for (u = 0.0f, i = 0; i < dwWidth; i++, u += fDelta[0])
        {
            fChannel[ALPHA_CHANNEL] = (pData->fAlpha) ? pData->fAlpha(u, v) : 0.0f;       
            fChannel[  RED_CHANNEL] = (pData->fRed)   ? pData->fRed(u, v) : 0.0f;       
            fChannel[GREEN_CHANNEL] = (pData->fGreen) ? pData->fGreen(u, v) : 0.0f;       
            fChannel[ BLUE_CHANNEL] = (pData->fBlue)  ? pData->fBlue(u, v) : 0.0f;       

            if (pData->dwAlpha & CIL_UNSIGNED)
                a = (BYTE)(UINT8) ((fChannel[ALPHA_CHANNEL] + 1.0)*127.5);
            else
                a = (BYTE)(INT8) (fChannel[ALPHA_CHANNEL]*127.0);

            if (pData->dwRed & CIL_UNSIGNED)
                r = (BYTE)(UINT8) ((fChannel[RED_CHANNEL] + 1.0)*127.5);
            else
                r = (BYTE)(INT8) (fChannel[RED_CHANNEL]*127.0);

            if (pData->dwGreen & CIL_UNSIGNED)
                g = (BYTE)(UINT8) ((fChannel[GREEN_CHANNEL] + 1.0)*127.5);
            else
                g = (BYTE)(INT8) (fChannel[GREEN_CHANNEL]*127.0);

            if (pData->dwBlue & CIL_UNSIGNED)
                b = (BYTE)(UINT8) ((fChannel[BLUE_CHANNEL] + 1.0)*127.5);
            else
                b = (BYTE)(INT8) (fChannel[BLUE_CHANNEL]*127.0);

#ifndef UNDER_XBOX
            uOffset = i;
#else
            uOffset = swz.Get2D();
            swz.IncU();
#endif // UNDER_XBOX

            switch (fmt) {
                case D3DFMT_X8L8V8U8:
                    *((LPDWORD)pPixel + uOffset) = b << 16 | g << 8 | r;
                    break;
                case D3DFMT_L6V5U5:
                    *((LPWORD)pPixel + uOffset) = (b & 0xFC) << 8 | (g & 0xF8) << 2 | r >> 3;
                    break;
                case D3DFMT_V8U8:
                    *((LPWORD)pPixel + uOffset) = g << 8 | r;
                    break;
                case D3DFMT_Q8W8V8U8:
                    *((LPDWORD)pPixel + uOffset) = a << 24 | b << 16 | g << 8 | r;
                    break;
                case D3DFMT_V16U16:
                    *((LPDWORD)pPixel + uOffset) = g << 24 | r << 8;
                    break;
                case D3DFMT_W11V11U10:
                    *((LPDWORD)pPixel + uOffset) = b << 24 | g << 13 | r << 2;
                    break;
            }

        }
#ifndef UNDER_XBOX
        pPixel += d3dlr.Pitch;
#else
        swz.IncV();
#endif // UNDER_XBOX
    }

    hr = pd3dt->UnlockRect(0);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::UnlockRect"))) {
        pd3dt->Release();
        return NULL;
    }

    return pd3dt;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\matrix.cpp ===
// FILE:        matrix.cpp
// DESC:        bump matrix tests
// AUTHOR:      Todd M. Frost

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "cshapesfvf.h"
#include "bump.h"

const FLOAT MAGNITUDE = 0.1f; // matrix magnitude

// NAME:        CBumpMatrix()
// DESC:        bump matrix class constructor
// INPUT:       none
// OUTPUT:      none

CBumpMatrix::CBumpMatrix()
{
    m_szTestName = TEXT("BUMPENV matrix");
    m_szCommandKey = TEXT("Matrix");
}

// NAME:        ~CBumpMatrix()
// DESC:        bump matrix class destructor
// INPUT:       none
// OUTPUT:      none

CBumpMatrix::~CBumpMatrix()
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CBumpMatrix::CommandLineHelp(void)
{
    CBump::CommandLineHelp();
//    WriteCommandLineHelp("$yvariations: $wvariations per test $c(default=8)");
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      CBump::TestInitialize()

UINT CBumpMatrix::TestInitialize(VOID)
{
    UINT uResult = CBump::TestInitialize();

    if (D3DTESTINIT_RUN != uResult)
        return uResult;

    SetTestRange((UINT) 1, (UINT) (m_uCommonTextureFormats*NMATRICES*m_uVariations));
    return D3DTESTINIT_RUN;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest........test number
// OUTPUT:      CBump::ExecuteTests()....if test executed
//              false....................otherwise
// COMMENTS:    D3DTADDRESS_MIRROR most visually pleasing, substitute for wrap if supported

bool CBumpMatrix::ExecuteTest(UINT uTest)
{
    DWORD dwFormat, dwWidth = (DWORD) 256, dwHeight = (DWORD) 256;
    FLOAT fDu, fDv, fTemp;
    UINT i, j, uTemp;

    if (m_dwTexAddressCaps & D3DPTADDRESSCAPS_MIRROR)
        m_dwModes[1] = m_dwModes[0] = D3DTADDRESS_MIRROR;

    for (uTemp = 1, dwFormat = 0; dwFormat < m_uCommonTextureFormats; dwFormat++)
        for (i = 0; i < NMATRICES; i++)
            for (j = 1; j <= m_uVariations; j++, uTemp++)
                if (uTemp == uTest)
                {
                    if (bSetBump(dwFormat, dwWidth, dwHeight))
                    {
                        fTemp = 1.0f - 2.0f*fNormalize(j, 1, m_uVariations);
                        fDu = fDv = 2.0f*MAGNITUDE*fTemp;
                        vSetMatrix(i, fDu, fDv);
                        return CBump::ExecuteTest(uTest);
                    }
                    else
                    {
                        SkipTests((UINT) 1);
                        return false;
                    }
                }

    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\modulex.h ===
#define PREPEND_MODULE(Suffix) bump##Suffix
#define MODULE_STRING "bump"
#pragma comment(linker, "/include:_bump_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\offset.cpp ===
// FILE:        offset.cpp
// DESC:        bump luminance offset tests
// AUTHOR:      Todd M. Frost

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "cshapesfvf.h"
#include "bump.h"

// NAME:        CBumpOffset()
// DESC:        bump offset class constructor
// INPUT:       none
// OUTPUT:      none

CBumpOffset::CBumpOffset()
{
    m_szTestName = TEXT("BUMPENV luminance offset");
    m_szCommandKey = TEXT("Offset");
}

// NAME:        ~CBumpOffset()
// DESC:        bump offset class destructor
// INPUT:       none
// OUTPUT:      none

CBumpOffset::~CBumpOffset()
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CBumpOffset::CommandLineHelp(void)
{
    CBump::CommandLineHelp();
//    WriteCommandLineHelp("$yvariations: $wvariations per test $c(default=8)");
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      CBump::TestInitialize()

UINT CBumpOffset::TestInitialize(VOID)
{
//    m_dwInclusion = (DWORD) PF_BUMPLUMINANCE;
    m_uCommonTextureFormats = 2;
    UINT uResult = CBump::TestInitialize();

    if (D3DTESTINIT_RUN != uResult)
        return uResult;

    SetTestRange((UINT) 1, (UINT) (m_uCommonTextureFormats*m_uVariations));
    return D3DTESTINIT_RUN;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest........test number
// OUTPUT:      CBump::ExecuteTests()....if test executed
//              false....................otherwise
// COMMENTS:    D3DTADDRESS_MIRROR most visually pleasing, substitute for wrap if supported

bool CBumpOffset::ExecuteTest(UINT uTest)
{
    DWORD dwFormat, dwWidth = (DWORD) 256, dwHeight = (DWORD) 256;
    UINT i, uTemp;

    if (m_dwTexAddressCaps & D3DPTADDRESSCAPS_MIRROR)
        m_dwModes[1] = m_dwModes[0] = D3DTADDRESS_MIRROR;

    for (uTemp = 1, dwFormat = 0; dwFormat < m_uCommonTextureFormats; dwFormat++)
        for (i = 1; i <= m_uVariations; i++, uTemp++)
            if (uTemp == uTest)
            {
                if (bSetBump(dwFormat, dwWidth, dwHeight))
                {
                    m_fOffset.f = fNormalize(i, 1, m_uVariations);
                    return CBump::ExecuteTest(uTest);
                }
                else
                {
                    SkipTests((UINT) 1);
                    return false;
                }
            }

    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\bump.h ===
// FILE:        bump.h
// DESC:        bump class header for
//                  D3DTOP_BUMPENVMAP
//                  D3DTOP_BUMPENVMAPLUMINANCE
//              conformance tests
// AUTHOR:      Todd M. Frost
// COMMENTS:    du:dv:lu usage:
//                  v += du*M[0][0] + dv*M[0][1]
//                  u += du*M[1][0] + dv*M[1][1]
//                  l = lu*scale + offset
//                  lu defaults to 1 for Du8:Dv8 textures

#include "flags.h"

//USETESTFRAME

const UINT MAXBUFFER = 128;

const DWORD NOFORMAT = 0xFFFFFFFF; // no format index

const DWORD INDEPENDENT = 0x00000001; // independent uv texture address mode
const DWORD VALIDATE    = 0x00000002; // validate src/ref devices
const DWORD MODULATE    = 0x00000010; // blend:  modulate texture/current
const DWORD MODULATE2X  = 0x00000020; // blend:  modulate texture/current 2x
const DWORD MODULATE4X  = 0x00000040; // blend:  modulate texture/current 4x
const DWORD BLEND       = 0x00000070; // blend mask

const UINT NBLENDS = 3; // number of blend modes (mod, mod2x, mod4x)

const UINT MATRIX_SCALE_DU   = 0;
const UINT MATRIX_SCALE_DV   = 1;
const UINT MATRIX_SCALE_DUDV = 2;
const UINT MATRIX_SKEW_DU    = 3;
const UINT MATRIX_SKEW_DV    = 4;
const UINT MATRIX_SKEW_DUDV  = 5;
const UINT NMATRICES         = 6;

const UINT MODE_BORDER = 0;
const UINT MODE_CLAMP  = 1;
const UINT MODE_MIRROR = 2;
const UINT MODE_WRAP   = 3;
const UINT NMODES      = 4;

const D3DTEXTUREADDRESS DEFAULT_MODE = D3DTADDRESS_WRAP;

const FLOAT DEFAULT_MAG = 0.04f; // default bumpenvmap matrix magnitude

const FLOAT DEFAULT_OFFSET = 0.0f; // default bumpenvmap luminance offset

const FLOAT DEFAULT_SCALE = 0.7f; // default bumpenvmap luminance scale

typedef union _FLOATUINT32 {
    FLOAT f;
    DWORD dw;
    UINT32 u;
} FLOATUINT32;

typedef struct _FlexVert {
    D3DVALUE fPx;
    D3DVALUE fPy;
    D3DVALUE fPz;
    D3DVALUE fNx;
    D3DVALUE fNy;
    D3DVALUE fNz; 
    D3DVALUE fSu;
    D3DVALUE fSv;   
    D3DVALUE fTu;
    D3DVALUE fTv;
} FLEXVERT, *PFLEXVERT;

class CBump: public CD3DTest
{
    public:
        CHAR m_szBuffer[MAXBUFFER];        // text buffer
        D3DTEXTUREADDRESS m_dwModes[2];    // uv texture address modes
        DWORD m_dwDestBlendCaps;           // dest blend caps
        DWORD m_dwFormat;                  // current bump texture format index
        DWORD m_dwFVF;                     // flexible vertex format
        DWORD m_dwInclusion;               // inclusion flags
        DWORD m_dwMatrixFormat;            // bump map matrix format index
        DWORD m_dwSrcBlendCaps;            // src blend caps
        DWORD m_dwTexAddressCaps;          // texture address caps
        DWORD m_dwTexOpCaps;               // texture op caps
        DWORD m_dwModeCapsVals[NMODES][2]; // texture address mode caps/vals
        FLOATUINT32 m_fOffset;             // bump map luminance offset
        FLOATUINT32 m_fScale;              // bump map luminance scale
        FLOATUINT32 m_fMatrix[2][2];       // bump map transformation matrix
        PFLEXVERT m_pVertices;             // non strided vertex data
        UINT m_uVariations;                // number of variations
        CFlags m_Flags;                    // flags class
//        CImageData *m_pBaseImage;          // image data class (base)
//        CImageData *m_pBumpImage;          // image data class (bump)
        CTexture8 *m_pBaseTexture;          // texture class (base)
        CTexture8 *m_pBumpTexture;          // texture class (bump)
        CHANNELDATA m_Data;
//        CMaterial *m_pMaterial;            // material class
        CShapesFVF m_Shape;                // shapes FVF class

        BOOL m_bExit;
        
    public:
        CBump();
        ~CBump();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
        virtual bool ProcessFrame(VOID);
        virtual bool TestTerminate(VOID);
        bool SetDefaultLightStates(VOID);
        bool SetDefaultLights(VOID);
        bool SetDefaultMaterials(VOID);
        bool SetDefaultMatrices(VOID);
        bool bSetBump(DWORD dwFormat, DWORD dwWidth, DWORD dwHeight);
        VOID vSetMatrix(DWORD dwType, FLOAT fDu, FLOAT fDv);
        DWORD dwGetCountFromMask(DWORD dwMask);
        FLOAT fNormalize(DWORD dwCurrent, DWORD dwMin, DWORD dwMax);
        VOID vProcessArgs(VOID);

        virtual BOOL    AbortedExit(void);

    protected:

        virtual void    ProcessInput();
        virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                            WPARAM wParam, LPARAM lParam);
};

class CBumpAddress : public CBump
{
    public:
        CBumpAddress();
        ~CBumpAddress();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};

class CBumpBlend : public CBump
{
    public:
        CBumpBlend();
        ~CBumpBlend();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};

class CBumpMatrix : public CBump
{
    public:
        CBumpMatrix();
        ~CBumpMatrix();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};

class CBumpOffset : public CBump
{
    public:
        CBumpOffset();
        ~CBumpOffset();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};

class CBumpScale : public CBump
{
    public:
        CBumpScale();
        ~CBumpScale();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_bump
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    bump.cpp \
    flags.cpp \
    address.cpp \
    blend.cpp \
    matrix.cpp \
    offset.cpp \
    scale.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\scale.cpp ===
// FILE:        scale.cpp
// DESC:        bump luminance scale tests
// AUTHOR:      Todd M. Frost

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "cshapesfvf.h"
#include "bump.h"

// NAME:        CBumpScale()
// DESC:        bump scale class constructor
// INPUT:       none
// OUTPUT:      none

CBumpScale::CBumpScale()
{
    m_szTestName = TEXT("BUMPENV luminance scale");
    m_szCommandKey = TEXT("Scale");
}

// NAME:        ~CBumpScale()
// DESC:        bump scale class destructor
// INPUT:       none
// OUTPUT:      none

CBumpScale::~CBumpScale()
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CBumpScale::CommandLineHelp(void)
{
    CBump::CommandLineHelp();
//    WriteCommandLineHelp("$yvariations: $wvariations per test $c(default=8)");
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      CBump::TestInitialize()

UINT CBumpScale::TestInitialize(VOID)
{
//    m_dwInclusion = (DWORD) PF_BUMPLUMINANCE;
    m_uCommonTextureFormats = 2;
    UINT uResult = CBump::TestInitialize();

    if (D3DTESTINIT_RUN != uResult)
        return uResult;

    SetTestRange((UINT) 1, (UINT) (m_uCommonTextureFormats*m_uVariations));
    return D3DTESTINIT_RUN;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest........test number
// OUTPUT:      CBump::ExecuteTests()....if test executed
//              false.....otherwise
// COMMENTS:    D3DTADDRESS_MIRROR most visually pleasing, substitute for wrap if supported

bool CBumpScale::ExecuteTest(UINT uTest)
{
    DWORD dwFormat, dwWidth = (DWORD) 256, dwHeight = (DWORD) 256;
    UINT i, uTemp;

    if (m_dwTexAddressCaps & D3DPTADDRESSCAPS_MIRROR)
        m_dwModes[1] = m_dwModes[0] = D3DTADDRESS_MIRROR;

    for (uTemp = 1, dwFormat = 0; dwFormat < m_uCommonTextureFormats; dwFormat++)
        for (i = 1; i <= m_uVariations; i++, uTemp++)
            if (uTemp == uTest)
            {
                if (bSetBump(dwFormat, dwWidth, dwHeight))
                {
                    m_fScale.f = fNormalize(i, 1, m_uVariations);
                    return CBump::ExecuteTest(uTest);
                }
                else
                {
                    SkipTests((UINT) 1);
                    return false;
                }
            }

    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=bump
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_bump.lib

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\CShapes.lib \
    $(TEST_LIB_PATH)\l_bump.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\bump\exe\sources.inc ===
TARGETNAME=bump
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\CShapes.lib \
    $(TEST_LIB_PATH)\l_bump.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\clear_test\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\clear_test\clear_test.cpp ===
//////////////////////////////////////////////////////////////////////
// Copyright (C) Microsoft Corporation, 2000.
//
// clear_test.cpp
//
// CClearTest class - Tests many possible IDirect3DDeviceX::Clear() parameter combinations
//
// History: 8/19/2000 Bobby Paulose     - Created
//
//////////////////////////////////////////////////////////////////////


#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "clear_test.h"

/*
// from d3d8types.h
typedef enum _D3DFORMAT
{
    D3DFMT_UNKNOWN              =  0,

    D3DFMT_R8G8B8               = 20,
    D3DFMT_A8R8G8B8             = 21,
    D3DFMT_X8R8G8B8             = 22,
    D3DFMT_R5G6B5               = 23,
    D3DFMT_X1R5G5B5             = 24,
    D3DFMT_A1R5G5B5             = 25,
    D3DFMT_A4R4G4B4             = 26,
    D3DFMT_R3G3B2               = 27,
    D3DFMT_A8                   = 28,
    D3DFMT_A8R3G3B2             = 29,
    D3DFMT_X4R4G4B4             = 30,

    D3DFMT_A8P8                 = 40,
    D3DFMT_P8                   = 41,

    D3DFMT_L8                   = 50,
    D3DFMT_A8L8                 = 51,
    D3DFMT_A4L4                 = 52,

    D3DFMT_V8U8                 = 60,
    D3DFMT_L6V5U5               = 61,
    D3DFMT_X8L8V8U8             = 62,
    D3DFMT_Q8W8V8U8             = 63,
    D3DFMT_V16U16               = 64,
    D3DFMT_W11V11U10            = 65,

    D3DFMT_UYVY                 = MAKEFOURCC('U', 'Y', 'V', 'Y'),
    D3DFMT_YUY2                 = MAKEFOURCC('Y', 'U', 'Y', '2'),
    D3DFMT_DXT1                 = MAKEFOURCC('D', 'X', 'T', '1'),
    D3DFMT_DXT2                 = MAKEFOURCC('D', 'X', 'T', '2'),
    D3DFMT_DXT3                 = MAKEFOURCC('D', 'X', 'T', '3'),
    D3DFMT_DXT4                 = MAKEFOURCC('D', 'X', 'T', '4'),
    D3DFMT_DXT5                 = MAKEFOURCC('D', 'X', 'T', '5'),

    D3DFMT_D16_LOCKABLE         = 70,
    D3DFMT_D32                  = 71,
    D3DFMT_D15S1                = 73,
    D3DFMT_D24S8                = 75,
    D3DFMT_D16                  = 80,
    D3DFMT_D24X8                = 77,
    D3DFMT_D24X4S4              = 79,


    D3DFMT_VERTEXDATA           =100,
    D3DFMT_INDEX16              =101,
    D3DFMT_INDEX32              =102,

    D3DFMT_FORCE_DWORD          =0x7fffffff
} D3DFORMAT;
*/




// Global Test and App instance
//CD3DWindowFramework	App;

const DWORD CClearTest::VertexFVF = ( D3DFVF_XYZRHW | D3DFVF_DIFFUSE );

const DWORD CClearTest::TexVertexFVF = ( D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_TEX1 );

const DWORD CClearTest::dwVertexCount = NUM_VERTICES;

const CClearTest::Vertex CClearTest::VertexList[]=
{
	{ 0.0f,  0.0f, 0.5f, 2.0f,
	 ARGB_MAKE( 0xff, 0x00, 0xff, 0x00 ),
	 },
	{ (float)IMGWIDTH,  (float)IMGHEIGHT, 0.5f, 2.0f,
	 ARGB_MAKE( 0xff, 0x00, 0xff, 0x00 ),
	 },
	{ 0.0f,  (float)IMGHEIGHT, 0.5f, 2.0f,
	 ARGB_MAKE( 0xff, 0x00, 0xff, 0x00 ),
	 },


	{ 0.0f,  0.0f, 0.5f, 2.0f,
	 ARGB_MAKE( 0xff, 0x00, 0xff, 0x00 ),
	 },
	{ (float)IMGWIDTH,  0.0f, 0.5f, 2.0f,
	 ARGB_MAKE( 0xff, 0x00, 0xff, 0x00 ),
	 },
	{ (float)IMGWIDTH,  (float)IMGHEIGHT, 0.5f, 2.0f,
	 ARGB_MAKE( 0xff, 0x00, 0xff, 0x00 ),
	 },
};

//This is the grid on which we apply the texture.
const CClearTest::TexVertex CClearTest::Grid[]=
{
	{ -0.5f,  -0.5f, 0.5f, 2.0f,
	 ARGB_MAKE( 0xff, 0xff, 0xff, 0xff ),
	 0.0, 0.0
	 },
	{ (float)IMGWIDTH - 0.5f,  (float)IMGHEIGHT - 0.5f, 0.5f, 2.0f,
	 ARGB_MAKE( 0xff, 0xff, 0xff, 0xff ),
	 1.0, 1.0
	 },
	{ -0.5f,  (float)IMGHEIGHT - 0.5f, 0.5f, 2.0f,
	 ARGB_MAKE( 0xff, 0xff, 0xff, 0xff ),
	 0.0, 1.0
	 },


	{ -0.5f,  -0.5f, 0.5f, 2.0f,
	 ARGB_MAKE( 0xff, 0xff, 0xff, 0xff ),
	 0.0, 0.0
	 },
	{ (float)IMGWIDTH - 0.5f,  -0.5f, 0.5f, 2.0f,
	 ARGB_MAKE( 0xff, 0xff, 0xff, 0xff ),
	 1.0, 0.0
	 },
	{ (float)IMGWIDTH - 0.5f,  (float)IMGHEIGHT - 0.5f, 0.5f, 2.0f,
	 ARGB_MAKE( 0xff, 0xff, 0xff, 0xff ),
	 1.0, 1.0
	 },
};

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CClearTest*     pClearTest;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 2 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pClearTest = new CTextureClearTest();
                break;
            case 1:
                pClearTest = new COffscreenClearTest();
                break;
        }

        if (!pClearTest) {
            return FALSE;
        }

        // Initialize the scene
        if (!pClearTest->Create(pDisplay)) {
            pClearTest->Release();
            return FALSE;
        }

        bRet = pClearTest->Exhibit(pnExitCode);

        bQuit = pClearTest->AbortedExit();

        // Clean up the scene
        pClearTest->Release();
    }

    return bRet;
}

CClearTest::CClearTest()
{
#ifndef UNDER_XBOX
    D3DFORMAT fmt[] = {
        D3DFMT_A8R8G8B8,
        D3DFMT_X8R8G8B8,
        D3DFMT_R5G6B5,
//        D3DFMT_A1R5G5B5,
        D3DFMT_X1R5G5B5,
    };
#else
    D3DFORMAT fmt[] = {
        D3DFMT_LIN_A8R8G8B8,
        D3DFMT_LIN_X8R8G8B8,
        D3DFMT_LIN_R5G6B5,
//        D3DFMT_LIN_A1R5G5B5,
        D3DFMT_LIN_X1R5G5B5,
    };
#endif // UNDER_XBOX

    m_bOffscreen = false;
    m_pOriginalSrcRT = NULL;
    m_pOriginalSrcZ = NULL;
    m_pSrcZ = NULL;
    m_pTextureRT = NULL;
    m_pOffSrcSurf = NULL;
    m_pOffRefSurf = NULL;
    m_bExit = FALSE;

    m_uCommonTextureFormats = 4;
    memcpy(m_fmtCommon, fmt, m_uCommonTextureFormats * sizeof(D3DFORMAT));
}

CClearTest::~CClearTest()
{
	RELEASE(m_pSrcZ);
	RELEASE(m_pOffSrcSurf);
    m_pDevice->SetTexture(0, NULL);
	ReleaseTexture(m_pTextureRT);
    m_pTextureRT = NULL;
    if (m_pOriginalSrcRT) {
        m_pOriginalSrcRT->Release();
        m_pOriginalSrcRT = NULL;
    }
    if (m_pOriginalSrcZ) {
        m_pOriginalSrcZ->Release();
        m_pOriginalSrcZ = NULL;
    }
}

/*
bool CClearTest::AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize)
{
    if (IsConformance())
    {
		pMode->D3DMode.dwWidth = IMGWIDTH;
		pMode->D3DMode.dwHeight = IMGHEIGHT;
	}

	CD3DTest::AddModeList(pMode,pData,dwDataSize);

	return true;
}
*/


UINT CClearTest::TestInitialize(void)
{
    UINT i;

	// Request only RGB texture formats
//	if (!RequestTextureFormats(PF_RGB))
//    {
//		WriteToLog("No texture formats found.\n");
//		return D3DTESTINIT_ABORT;
//	}

    if (m_pDisplay->IsDepthBuffered())
        SetTestRange(1, m_uCommonTextureFormats * m_uCommonZBufferFormats * TEST_CASES);
    else
        SetTestRange(1, m_uCommonTextureFormats * TEST_CASES);


//    m_pOriginalSrcRT = m_pSrcTarget;
//    m_pOriginalRefRT = m_pRefTarget;

//    m_pOriginalSrcRT->AddRef();
//    m_pOriginalRefRT->AddRef();

    m_pDevice->GetRenderTarget(&m_pOriginalSrcRT);

//    m_pOriginalSrcZ = m_pSrcZBuffer;
//    m_pOriginalRefZ = m_pRefZBuffer;

//    if (m_ModeOptions.fZBuffer)
//    {
//        m_pOriginalSrcZ->AddRef();
//        m_pOriginalRefZ->AddRef();
//    }

    if (m_pDisplay->IsDepthBuffered()) {
        m_pDevice->GetDepthStencilSurface(&m_pOriginalSrcZ);
    }

//    m_nOriginalZFormat = m_pMode->nZBufferFormat;
    
    memcpy(VPGrid, Grid, NUM_VERTICES * sizeof(TexVertex));
    for (i = 0; i < NUM_VERTICES; i++) {
        VPGrid[i].x += m_vpTest.X;
        VPGrid[i].y += m_vpTest.Y;
    }

#ifdef UNDER_XBOX
    m_pDevice->SetTextureStageState(0, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP);
    m_pDevice->SetTextureStageState(0, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP);
#endif

    return D3DTESTINIT_RUN;
}




bool CClearTest::ClearFrame(void)
{
    bool bResult;

//    m_pMode->nZBufferFormat = m_nOriginalZFormat;

	bResult =  Clear(RGB_MAKE(0,0,0));

//    if (m_ModeOptions.fZBuffer)
//        m_pMode->nZBufferFormat = m_nZFormat;

    return bResult;
}




bool CClearTest::ExecuteTest(UINT uiTest)
{
	D3DRECT rectList[2] = {{IMGWIDTH/4,IMGHEIGHT/4,IMGWIDTH/2,IMGHEIGHT/2},{IMGWIDTH/2,IMGHEIGHT/2,IMGWIDTH*3/4,IMGHEIGHT*3/4}};
    CSurface8 *pRendTgtSrc = NULL, *pRendTgtRef = NULL;

    if (m_pDisplay->IsDepthBuffered())
    {
        m_nTexFormat = (uiTest -1) / (m_uCommonZBufferFormats * TEST_CASES);
        m_nZFormat = ( (uiTest -1) % (m_uCommonZBufferFormats * TEST_CASES) ) / TEST_CASES;
		m_nTestCase = ( (uiTest -1) % (m_uCommonZBufferFormats * TEST_CASES) ) % TEST_CASES;
    }
    else
    {
        m_nTexFormat = (uiTest-1) / TEST_CASES;
        m_nZFormat = 0;
		m_nTestCase = (uiTest-1) % TEST_CASES;
    }


//	m_pMode->nTextureFormat = m_nTexFormat;
//	m_pMode->nZBufferFormat = m_nZFormat;

	// do we need to change render-target or ZStencil formats now?
	if (m_nTestCase == 0)
	{
		//must change ZStencil format now.

		// Cleanup previous ZStencil
		RELEASE(m_pSrcZ);
//		RELEASE(m_pRefZ);

		if (m_nZFormat == 0)
		{
			//must change render-target format now.

			// Cleanup previous render-target
			SetTexture(0, NULL);
			ReleaseTexture(m_pTextureRT);
            m_pTextureRT = NULL;
			RELEASE(m_pOffSrcSurf);
//			RELEASE(m_pOffRefSurf);

			//create render target with the new format.
			if (m_bOffscreen)
			{
				if (!CreateOffScrRendTrgts(m_nTexFormat))
				{
					WriteToLog("(INFO) CreateOffScrRendTrgts failed.\n");
					SkipTests(m_pDisplay->IsDepthBuffered() ? (m_uCommonZBufferFormats * TEST_CASES) : TEST_CASES);
					return false;
				}

//				m_pTextureRT = CreateTexture(IMGWIDTH, IMGHEIGHT, CDDS_TEXTURE_VIDEO, NULL);
                m_pTextureRT = (CTexture8*)CreateTexture(m_pDevice, IMGWIDTH, IMGHEIGHT, m_fmtCommon[m_nTexFormat]);

			}
			else
			{
//				m_pTextureRT = CreateTextureAsRenderTarget(IMGWIDTH, IMGHEIGHT, CDDS_TEXTURE_VIDEO, FALSE, nullpZStencil, nullpZStencil);
                m_pTextureRT = (CTexture8*)CreateTexture(m_pDevice, IMGWIDTH, IMGHEIGHT, m_fmtCommon[m_nTexFormat], TTYPE_TARGET);
			}
 
			if (NULL == m_pTextureRT)
			{
				WriteToLog("(INFO) CreateTexture failed. (%X)\n", GetLastError());
				SkipTests(m_pDisplay->IsDepthBuffered() ? (m_uCommonZBufferFormats * TEST_CASES) : TEST_CASES);
				return false;
			}

			// update m_bAlphaPresent
			if (m_dwVersion <= 0x0700)
			{
//				m_bAlphaPresent = (m_pCommonTextureFormats[m_nTexFormat].ddpfPixelFormat.dwRGBAlphaBitMask != 0);
			}
			else
			{
//				switch (m_pCommonTextureFormats[m_nTexFormat].d3dfFormat)
                switch (m_fmtCommon[m_nTexFormat])
				{
					case D3DFMT_A8R8G8B8:
					case D3DFMT_A1R5G5B5:
					case D3DFMT_A4R4G4B4:
					case D3DFMT_A8R3G3B2:
					case D3DFMT_A8P8:
					case D3DFMT_A8L8:
					case D3DFMT_A4L4:
						m_bAlphaPresent = TRUE;
						break;
					default:
						m_bAlphaPresent = FALSE;
						break;
				}
			}

		}




		//create ZStencil with the new format.
/*
		if (m_bOffscreen)
		{
			pRendTgtSrc = m_pOffSrcSurf;
			pRendTgtRef = m_pOffRefSurf;
		}
		else
		{
//			pRendTgtSrc = m_pTextureRT->m_pSrcSurface;
            m_pTextureRT->GetSurfaceLevel(0, &pRendTgtSrc);
            pRendTgtSrc->Release();
//			pRendTgtRef = m_pTextureRT->m_pRefSurface;
		}
*/
		if (m_pDisplay->IsDepthBuffered())
		{
			if (!CreateZStencil(m_nZFormat))
			{
				WriteToLog("(INFO) CreateZStencil failed.\n");
    			SkipTests(TEST_CASES);
				return false;
			}
/*
			// Attach ZStencil to render-target.
			if (m_dwVersion <= 0x0700)
			{

				// Attach current ZBuffer to src surface
				if (!pRendTgtSrc->AttachSurface(m_pSrcZ))
				{
					WriteToLog("(Info) Failed Src AttachSurface(). (%X)\n", GetLastError());
    				SkipTests(TEST_CASES);
					return false;
				}

				// Attach current ZBuffer to ref surface
				if (!pRendTgtRef->AttachSurface(m_pRefZ))
				{
					WriteToLog("(Info) Failed Ref AttachSurface(). (%X)\n", GetLastError());
    				SkipTests(TEST_CASES);
					return false;
				}

			}

			// update m_bStencilPresent
			if (m_dwVersion <= 0x0700)
			{
				m_bStencilPresent = (m_pCommonZBufferFormats[m_nZFormat].ddpfPixelFormat.dwStencilBitDepth > 0);
			}
			else
			{
*/
//				switch (m_pCommonZBufferFormats[m_nZFormat].d3dfFormat)
                switch (m_fmtdCommon[m_nZFormat])
				{
					case D3DFMT_D15S1:
					case D3DFMT_D24S8:
						m_bStencilPresent = TRUE;
						break;
					default:
						m_bStencilPresent = FALSE;
						break;
				}
//			}
		}
		else
		{
			m_pSrcZ = NULL;
			m_pRefZ = NULL;
		}
	}


	//Change RenderTarget to texture/offscreen

	if (m_bOffscreen)
	{
		pRendTgtSrc = m_pOffSrcSurf;
		pRendTgtRef = m_pOffRefSurf;
	}
	else
	{
//		pRendTgtSrc = m_pTextureRT->m_pSrcSurface;
        if (FAILED(m_pTextureRT->GetSurfaceLevel(0, &pRendTgtSrc))) {
		    SkipTests(TEST_CASES);
		    return false;
        }
//		pRendTgtRef = m_pTextureRT->m_pRefSurface;
	}

	// Set the texture/offscreen src surface as the src render target
//	if (!SetRenderTarget(pRendTgtSrc, false, m_pSrcZ))
    if (FAILED(m_pDevice->SetRenderTarget(pRendTgtSrc, m_pSrcZ)))
	{
		WriteToLog("(Info) Failed Src SetRenderTarget(). (%X)\n", GetLastError());
		SkipTests(TEST_CASES);
        pRendTgtSrc->Release();
		return false;
	}

    if (!m_bOffscreen) {
        pRendTgtSrc->Release();
    }
/*
	// Set the texture/offscreen ref surface as the ref render target
	if (!SetRenderTarget(pRendTgtRef, true, m_pRefZ))
	{
		WriteToLog("(Info) Failed Ref SetRenderTarget(). (%X)\n", GetLastError());
		SkipTests(TEST_CASES);
		return false;
	}
*/

//	SetupViewport();
    SetViewport(0,0,IMGWIDTH,IMGHEIGHT);
	SetTexture(0, NULL);


	// clear the texture with black.
	if (BeginScene())
	{
		Clear((CLEAR_COLOR_0), 1.0, 1, D3DCLEAR_TARGET, 0, NULL);
		EndScene();
	}


	//Now we run the different clear() test cases and the results
	// go into the texture.
	switch(m_nTestCase)
	{

	// Clear Full Screen tests.
	//--------------------------
	case 0: // clear RGB full screen test.
		//Buffer must contain CLEAR_COLOR_FULL(red) after rendering grid. 
		if (BeginScene())
		{
			Clear((CLEAR_COLOR_FULL), 1.0, 1, D3DCLEAR_TARGET, 0, NULL);
			EndScene();
		}
		break;
	case 1: // clear Alpha full screen test
		//Buffer must contain CLEAR_COLOR_FULL_ALPHA1(red) after rendering grid.
		if (m_bAlphaPresent)
		{
			if (BeginScene())
			{
				Clear((CLEAR_COLOR_FULL_ALPHA1), 1.0, 1, D3DCLEAR_TARGET, 0, NULL);
				EndScene();
			}
		}
		break;
	case 2: // clear Alpha full screen test
		//Buffer must contain black(0 color) after rendering grid.
		if (m_bAlphaPresent)
		{
			if (BeginScene())
			{
				Clear((CLEAR_COLOR_FULL_ALPHA0), 1.0, 1, D3DCLEAR_TARGET, 0, NULL);
				EndScene();
			}
		}
		break;
	case 3: // clear Z full screen test
		// Triangles must NOT be rendered. So buffer must contain CLEAR_COLOR_FULL(red) after rendering grid.
		if (m_pDisplay->IsDepthBuffered())
		{
			if (BeginScene())
			{
				Clear((CLEAR_COLOR_FULL), LOWER_Z, 1, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER, 0, NULL);

				SetRenderState( D3DRENDERSTATE_CULLMODE, (DWORD)D3DCULL_NONE );
#ifndef UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_CLIPPING, (DWORD)FALSE );
#endif // !UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_LIGHTING, (DWORD)FALSE );
				SetRenderState( D3DRENDERSTATE_SHADEMODE, (DWORD)D3DSHADE_FLAT );
				SetRenderState( D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE );

				SetRenderState( D3DRENDERSTATE_ZENABLE, (DWORD)TRUE );
				SetRenderState( D3DRENDERSTATE_STENCILENABLE, (DWORD)FALSE );

				// Render the triangles.
				if (!RenderPrimitive(D3DPT_TRIANGLELIST, VertexFVF, (void *)VertexList, dwVertexCount))
					WriteToLog("(ERROR): RenderPrimitive failed. (%X)\n", GetLastError());

				if (!EndScene())
					WriteToLog("(ERROR): EndScene failed. (%X)\n", GetLastError());
			}
		}
		break;
	case 4: // clear Z full screen test
		// Triangles must be rendered. So buffer must contain RENDERING_COLOR(green) after rendering grid.
		if (m_pDisplay->IsDepthBuffered())
		{
			if (BeginScene())
			{
				Clear((CLEAR_COLOR_FULL), HIGHER_Z, 1, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER, 0, NULL);

				SetRenderState( D3DRENDERSTATE_CULLMODE, (DWORD)D3DCULL_NONE );
#ifndef UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_CLIPPING, (DWORD)FALSE );
#endif // !UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_LIGHTING, (DWORD)FALSE );
				SetRenderState( D3DRENDERSTATE_SHADEMODE, (DWORD)D3DSHADE_FLAT );
				SetRenderState( D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE );

				SetRenderState( D3DRENDERSTATE_ZENABLE, (DWORD)TRUE );
				SetRenderState( D3DRENDERSTATE_STENCILENABLE, (DWORD)FALSE );

				// Render the triangles.
				if (!RenderPrimitive(D3DPT_TRIANGLELIST, VertexFVF, (void *)VertexList, dwVertexCount))
					WriteToLog("(ERROR): RenderPrimitive failed. (%X)\n", GetLastError());

				if (!EndScene())
					WriteToLog("(ERROR): EndScene failed. (%X)\n", GetLastError());
			}
		}
		break;
	case 5: // clear Stencil full screen test.
		// Triangles must NOT be rendered. So buffer must contain CLEAR_COLOR_FULL(red) after rendering grid.
		if ( (m_pDisplay->IsDepthBuffered()) && (m_bStencilPresent) )
		{
			if (BeginScene())
			{
				Clear((CLEAR_COLOR_FULL), 1.0f, STENCIL_0, D3DCLEAR_TARGET|D3DCLEAR_STENCIL, 0, NULL);

				SetRenderState( D3DRENDERSTATE_CULLMODE, (DWORD)D3DCULL_NONE );
#ifndef UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_CLIPPING, (DWORD)FALSE );
#endif // !UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_LIGHTING, (DWORD)FALSE );
				SetRenderState( D3DRENDERSTATE_SHADEMODE, (DWORD)D3DSHADE_FLAT );
				SetRenderState( D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE );

				SetRenderState( D3DRENDERSTATE_ZENABLE, (DWORD)FALSE );
				SetRenderState( D3DRENDERSTATE_STENCILENABLE, (DWORD)TRUE );
				SetRenderState( D3DRENDERSTATE_STENCILREF, (DWORD)STENCIL_1 );
				SetRenderState( D3DRENDERSTATE_STENCILFUNC, (DWORD)D3DCMP_EQUAL );

				// Render the triangles.
				if (!RenderPrimitive(D3DPT_TRIANGLELIST, VertexFVF, (void *)VertexList, dwVertexCount))
					WriteToLog("(ERROR): RenderPrimitive failed. (%X)\n", GetLastError());

				if (!EndScene())
					WriteToLog("(ERROR): EndScene failed. (%X)\n", GetLastError());
			}
		}
		break;
	case 6: // clear Stencil full screen test.
		// Triangles must be rendered. So buffer must contain RENDERING_COLOR(green) after rendering grid.
		if ( (m_pDisplay->IsDepthBuffered()) && (m_bStencilPresent) )
		{
			if (BeginScene())
			{
				Clear((CLEAR_COLOR_FULL), 1.0f, STENCIL_1, D3DCLEAR_TARGET|D3DCLEAR_STENCIL, 0, NULL);

				SetRenderState( D3DRENDERSTATE_CULLMODE, (DWORD)D3DCULL_NONE );
#ifndef UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_CLIPPING, (DWORD)FALSE );
#endif // !UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_LIGHTING, (DWORD)FALSE );
				SetRenderState( D3DRENDERSTATE_SHADEMODE, (DWORD)D3DSHADE_FLAT );
				SetRenderState( D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE );

				SetRenderState( D3DRENDERSTATE_ZENABLE, (DWORD)FALSE );
				SetRenderState( D3DRENDERSTATE_STENCILENABLE, (DWORD)TRUE );
				SetRenderState( D3DRENDERSTATE_STENCILREF, (DWORD)STENCIL_1 );
				SetRenderState( D3DRENDERSTATE_STENCILFUNC, (DWORD)D3DCMP_EQUAL );

				// Render the triangles.
				if (!RenderPrimitive(D3DPT_TRIANGLELIST, VertexFVF, (void *)VertexList, dwVertexCount))
					WriteToLog("(ERROR): RenderPrimitive failed. (%X)\n", GetLastError());

				if (!EndScene())
					WriteToLog("(ERROR): EndScene failed. (%X)\n", GetLastError());
			}
		}
		break;
	case 7: // test to ensure ClearZ and ClearStencil does not affect each other.
		// Testing if clear Z affect stencil.
		// Triangles must be rendered. So buffer must contain RENDERING_COLOR(green) after rendering grid.
		if ( (m_pDisplay->IsDepthBuffered()) && (m_bStencilPresent) )
		{
			if (BeginScene())
			{
				Clear((CLEAR_COLOR_FULL), 0.0f, STENCIL_1, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER|D3DCLEAR_STENCIL, 0, NULL);
				Clear((CLEAR_COLOR_FULL), 0.0f, STENCIL_0, D3DCLEAR_ZBUFFER, 0, NULL);
				Clear((CLEAR_COLOR_FULL), 1.0f, STENCIL_0, D3DCLEAR_ZBUFFER, 0, NULL);

				SetRenderState( D3DRENDERSTATE_CULLMODE, (DWORD)D3DCULL_NONE );
#ifndef UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_CLIPPING, (DWORD)FALSE );
#endif // !UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_LIGHTING, (DWORD)FALSE );
				SetRenderState( D3DRENDERSTATE_SHADEMODE, (DWORD)D3DSHADE_FLAT );
				SetRenderState( D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE );

				SetRenderState( D3DRENDERSTATE_ZENABLE, (DWORD)TRUE );
				SetRenderState( D3DRENDERSTATE_STENCILENABLE, (DWORD)TRUE );
				SetRenderState( D3DRENDERSTATE_STENCILREF, (DWORD)STENCIL_1 );
				SetRenderState( D3DRENDERSTATE_STENCILFUNC, (DWORD)D3DCMP_EQUAL );

				// Render the triangles.
				if (!RenderPrimitive(D3DPT_TRIANGLELIST, VertexFVF, (void *)VertexList, dwVertexCount))
					WriteToLog("(ERROR): RenderPrimitive failed. (%X)\n", GetLastError());

				if (!EndScene())
					WriteToLog("(ERROR): EndScene failed. (%X)\n", GetLastError());
			}
		}
		break;
	case 8: // test to ensure ClearZ and ClearStencil does not affect each other.
		// Testing if clear stencil affect Z.
		// Triangles must be rendered. So buffer must contain RENDERING_COLOR(green) after rendering grid.
		if ( (m_pDisplay->IsDepthBuffered()) && (m_bStencilPresent) )
		{
			if (BeginScene())
			{
				Clear((CLEAR_COLOR_FULL), 1.0f, STENCIL_0, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER|D3DCLEAR_STENCIL, 0, NULL);
				Clear((CLEAR_COLOR_FULL), 0.0f, STENCIL_0, D3DCLEAR_STENCIL, 0, NULL);
				Clear((CLEAR_COLOR_FULL), 0.0f, STENCIL_1, D3DCLEAR_STENCIL, 0, NULL);

				SetRenderState( D3DRENDERSTATE_CULLMODE, (DWORD)D3DCULL_NONE );
#ifndef UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_CLIPPING, (DWORD)FALSE );
#endif // !UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_LIGHTING, (DWORD)FALSE );
				SetRenderState( D3DRENDERSTATE_SHADEMODE, (DWORD)D3DSHADE_FLAT );
				SetRenderState( D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE );

				SetRenderState( D3DRENDERSTATE_ZENABLE, (DWORD)TRUE );
				SetRenderState( D3DRENDERSTATE_STENCILENABLE, (DWORD)TRUE );
				SetRenderState( D3DRENDERSTATE_STENCILREF, (DWORD)STENCIL_1 );
				SetRenderState( D3DRENDERSTATE_STENCILFUNC, (DWORD)D3DCMP_EQUAL );

				// Render the triangles.
				if (!RenderPrimitive(D3DPT_TRIANGLELIST, VertexFVF, (void *)VertexList, dwVertexCount))
					WriteToLog("(ERROR): RenderPrimitive failed. (%X)\n", GetLastError());

				if (!EndScene())
					WriteToLog("(ERROR): EndScene failed. (%X)\n", GetLastError());
			}
		}
		break;
	case 9: //test to ensure Clear render-target alone does not affect Z or stencil.
		// Triangles must be rendered. So buffer must contain RENDERING_COLOR(green) after rendering grid.
		if ( (m_pDisplay->IsDepthBuffered()) && (m_bStencilPresent) )
		{
			if (BeginScene())
			{
				Clear((CLEAR_COLOR_FULL), 1.0f, STENCIL_1, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER|D3DCLEAR_STENCIL, 0, NULL);
				Clear((CLEAR_COLOR_0), 0.0f, STENCIL_0, D3DCLEAR_TARGET, 0, NULL);

				SetRenderState( D3DRENDERSTATE_CULLMODE, (DWORD)D3DCULL_NONE );
#ifndef UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_CLIPPING, (DWORD)FALSE );
#endif // !UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_LIGHTING, (DWORD)FALSE );
				SetRenderState( D3DRENDERSTATE_SHADEMODE, (DWORD)D3DSHADE_FLAT );
				SetRenderState( D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE );

				SetRenderState( D3DRENDERSTATE_ZENABLE, (DWORD)TRUE );
				SetRenderState( D3DRENDERSTATE_STENCILENABLE, (DWORD)TRUE );
				SetRenderState( D3DRENDERSTATE_STENCILREF, (DWORD)STENCIL_1 );
				SetRenderState( D3DRENDERSTATE_STENCILFUNC, (DWORD)D3DCMP_EQUAL );

				// Render the triangles.
				if (!RenderPrimitive(D3DPT_TRIANGLELIST, VertexFVF, (void *)VertexList, dwVertexCount))
					WriteToLog("(ERROR): RenderPrimitive failed. (%X)\n", GetLastError());

				if (!EndScene())
					WriteToLog("(ERROR): EndScene failed. (%X)\n", GetLastError());
			}
		}
		break;


	// Clear List of Rects.
	//--------------------------

	case 10: // clear RGB - list of rects.
		//rects will be CLEAR_COLOR_FULL_2(blue), rest CLEAR_COLOR_FULL(red) after rendering grid. 
		if (BeginScene())
		{
			Clear((CLEAR_COLOR_FULL), 1.0, 1, D3DCLEAR_TARGET, 0, NULL);
			Clear((CLEAR_COLOR_FULL_2), 1.0, 1, D3DCLEAR_TARGET, 2, rectList);
			EndScene();
		}
		break;
	case 11: // clear alpha test - list of rects.
		//rects will be CLEAR_COLOR_FULL_ALPHA1(red), rest black after rendering grid. 
		if (m_bAlphaPresent)
		{
			if (BeginScene())
			{
				Clear((CLEAR_COLOR_FULL_ALPHA0), 1.0, 1, D3DCLEAR_TARGET, 0, NULL);
				Clear((CLEAR_COLOR_FULL_ALPHA1), 1.0, 1, D3DCLEAR_TARGET, 2, rectList);
				EndScene();
			}
		}
		break;
	case 12: // clear Z test - list of rects.
		//rects will be RENDERING_COLOR(green), rest CLEAR_COLOR_FULL(red) after rendering grid. 
		if (m_pDisplay->IsDepthBuffered())
		{
			if (BeginScene())
			{
				Clear((CLEAR_COLOR_FULL), LOWER_Z, 1, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER, 0, NULL);
				Clear((CLEAR_COLOR_FULL), HIGHER_Z, 1, D3DCLEAR_ZBUFFER, 2, rectList);

				SetRenderState( D3DRENDERSTATE_CULLMODE, (DWORD)D3DCULL_NONE );
#ifndef UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_CLIPPING, (DWORD)FALSE );
#endif // !UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_LIGHTING, (DWORD)FALSE );
				SetRenderState( D3DRENDERSTATE_SHADEMODE, (DWORD)D3DSHADE_FLAT );
				SetRenderState( D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE );

				SetRenderState( D3DRENDERSTATE_ZENABLE, (DWORD)TRUE );
				SetRenderState( D3DRENDERSTATE_STENCILENABLE, (DWORD)FALSE );

				// Render the triangles.
				if (!RenderPrimitive(D3DPT_TRIANGLELIST, VertexFVF, (void *)VertexList, dwVertexCount))
					WriteToLog("(ERROR): RenderPrimitive failed. (%X)\n", GetLastError());

				if (!EndScene())
					WriteToLog("(ERROR): EndScene failed. (%X)\n", GetLastError());
			}
		}
		break;
	case 13: // clear Stencil test - list of rects.
		//rects will be RENDERING_COLOR(green), rest CLEAR_COLOR_FULL(red) after rendering grid. 
		if ( (m_pDisplay->IsDepthBuffered()) && (m_bStencilPresent) )
		{
			if (BeginScene())
			{
				Clear((CLEAR_COLOR_FULL), 1.0f, STENCIL_0, D3DCLEAR_TARGET|D3DCLEAR_STENCIL, 0, NULL);
				Clear((CLEAR_COLOR_FULL), 1.0f, STENCIL_1, D3DCLEAR_STENCIL, 2, rectList);

				SetRenderState( D3DRENDERSTATE_CULLMODE, (DWORD)D3DCULL_NONE );
#ifndef UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_CLIPPING, (DWORD)FALSE );
#endif // !UNDER_XBOX
				SetRenderState( D3DRENDERSTATE_LIGHTING, (DWORD)FALSE );
				SetRenderState( D3DRENDERSTATE_SHADEMODE, (DWORD)D3DSHADE_FLAT );
				SetRenderState( D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE );

				SetRenderState( D3DRENDERSTATE_ZENABLE, (DWORD)FALSE );
				SetRenderState( D3DRENDERSTATE_STENCILENABLE, (DWORD)TRUE );
				SetRenderState( D3DRENDERSTATE_STENCILREF, (DWORD)STENCIL_1 );
				SetRenderState( D3DRENDERSTATE_STENCILFUNC, (DWORD)D3DCMP_EQUAL );

				// Render the triangles.
				if (!RenderPrimitive(D3DPT_TRIANGLELIST, VertexFVF, (void *)VertexList, dwVertexCount))
					WriteToLog("(ERROR): RenderPrimitive failed. (%X)\n", GetLastError());

				if (!EndScene())
					WriteToLog("(ERROR): EndScene failed. (%X)\n", GetLastError());
			}
		}
		break;
	default:
		break;
	}

	//if m_bOffscreen, copy offscreen rendered image to texture.
    if (m_bOffscreen)
    {
        if (!CopyToTexture())
            WriteToLog("(ERROR): CopyToTexture failed.\n");
    }

    // Reset to the original render target
//    if (!SetRenderTarget(m_pOriginalSrcRT, false, m_pOriginalSrcZ))
    if (FAILED(m_pDevice->SetRenderTarget(m_pOriginalSrcRT, m_pOriginalSrcZ)))
        WriteToLog("(ERROR): Couldn't reset Src RenderTarget. (%X)\n", GetLastError());

//    if (!SetRenderTarget(m_pOriginalRefRT, true, m_pOriginalRefZ))
//        WriteToLog("(ERROR): Couldn't reset Ref RenderTarget. (%X)\n", GetLastError());

//    SetupViewport();
    m_pDevice->SetViewport(&m_vpTest);

    SetTextureStageState(0, D3DTSS_COLOROP, (DWORD)D3DTOP_SELECTARG1);
    SetTextureStageState(0, D3DTSS_COLORARG1, (DWORD)D3DTA_TEXTURE);
    SetTextureStageState(0, D3DTSS_ALPHAOP, (DWORD)D3DTOP_SELECTARG1);
    SetTextureStageState(0, D3DTSS_ALPHAARG1, (DWORD)D3DTA_TEXTURE);


	switch(m_nTestCase)
	{
	case 1:
	case 2:
	case 11:
		// for test cases testing alpha clear.
		SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
		SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
		SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_ZERO);
		break;
	default:
		SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE);
		break;
	}


    SetTexture(0, m_pTextureRT);



	return true;
}



void CClearTest::SceneRefresh(void)
{
	if (BeginScene())
	{
		SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)FALSE);
		SetRenderState( D3DRENDERSTATE_STENCILENABLE, (DWORD)FALSE );

        if (!RenderPrimitive(D3DPT_TRIANGLELIST, TexVertexFVF, (void *)VPGrid, dwVertexCount))
            WriteToLog("(ERROR): RenderPrimitive failed. (%X)\n", GetLastError());

        if (!EndScene())
            WriteToLog("(ERROR): EndScene failed. (%X)\n", GetLastError());
	}

	return;
}


void CClearTest::DisplaySetup(void)
{
//	g_pD3DFramework->SetClientSize(IMGWIDTH * 2, IMGHEIGHT);
	return;
}


bool CClearTest::ProcessFrame()
{
    char    szBuffer[80];
    char    szTestcase[150];
    char	szFormat[256];
    static  int nPass = 0;
    static  int nFail = 0;
    bool    bResult = true;

	// Get Render-target format and ZStencil-buffer description.
	DescribeFormat(szFormat, m_nTexFormat, m_nZFormat);
	// Get test case description.
	DescribeTestcase(szTestcase, m_nTestCase);

	//Show test information in the status window.
    WriteStatus("$gCurrent Format",szFormat);
    WriteStatus("$gCurrent Testcase",szTestcase);

    // Use the standard 15% for non Invalid cases
    bResult = GetCompareResult(0.15f, 0.78f, 0);

    // Tell the logfile how the compare went
    if (bResult)
    {
        (m_fIncrementForward) ? nPass++ : nPass--;
        sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
    else
    {
        (m_fIncrementForward) ? nFail++ : nFail--;
        sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();

		//log the failure result.
		WriteToLog("TEST FAILED!");
		WriteToLog(szFormat);
		WriteToLog(szTestcase);
    }

    WriteStatus("$gOverall Results",szBuffer);

    return bResult;
}



bool CClearTest::TestTerminate(void)
{
	RELEASE(m_pSrcZ);
	RELEASE(m_pOffSrcSurf);
    m_pDevice->SetTexture(0, NULL);
	ReleaseTexture(m_pTextureRT);
    m_pTextureRT = NULL;

    if (m_pOriginalSrcRT) {
        m_pOriginalSrcRT->Release();
        m_pOriginalSrcRT = NULL;
    }
    if (m_pOriginalSrcZ) {
        m_pOriginalSrcZ->Release();
        m_pOriginalSrcZ = NULL;
    }

	return true;
}

/*
bool CClearTest::IsStencilPresent(void) {

    CSurface8*      pd3ds;
    D3DSURFACE_DESC d3dsd;
    HRESULT         hr;

    hr = m_pDevice->GetDepthStencilSurface(&pd3ds);
    if (FAILED(hr)) {
        return false;
    }

    hr = pd3ds->GetDesc(&d3dsd);
    pd3ds->Release();
    if (FAILED(hr)) {
        return false;
    }

    switch (d3dsd.Format) {
        case D3DFMT_D15S1:
        case D3DFMT_D24S8:
        case D3DFMT_D24X4S4:
            return true;
        case D3DFMT_D16:
        case D3DFMT_D16_LOCKABLE:
        case D3DFMT_D32:
        case D3DFMT_D24X8:
        default:
            return false;
    }

    return false;
}
*/

//******************************************************************************
BOOL CClearTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CClearTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CClearTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\clear_test\clear_test.h ===
//////////////////////////////////////////////////////////////////////
// Copyright (C) Microsoft Corporation, 2000.
//
// clear_test.h
//
// CClearTest class - Tests many possible IDirect3DDeviceX::Clear() parameter combinations
//
// History: 8/21/2000 Bobby Paulose     - Created
//
//////////////////////////////////////////////////////////////////////


#ifndef __CLEAR_TEST_H__
#define __CLEAR_TEST_H__


//USETESTFRAME

//BEGINTESTFRAME

// Get access to the framework
//extern CD3DWindowFramework   *g_pD3DFramework;

//ENDTESTFRAME // end TESTFRAME



#define CLEAR_COLOR_FULL	D3DRGBA(1.0, 0.0, 0.0, 1.0) //red 
#define CLEAR_COLOR_FULL_2	D3DRGBA(0.0, 0.0, 1.0, 1.0) //blue 
#define CLEAR_COLOR_FULL_ALPHA0	D3DRGBA(1.0, 0.0, 0.0, 0.0) 
#define CLEAR_COLOR_FULL_ALPHA1	D3DRGBA(1.0, 0.0, 0.0, 1.0) // Alpha 1.0 is ok for even formats with A just 1 bit.

#define CLEAR_COLOR_0	D3DRGBA(0.0, 0.0, 0.0, 1.0) 

#define CLEAR_COLOR__RECTS	D3DRGBA(0.0, 0.0, 1.0, 0.0) //blue

#define RENDERING_COLOR		D3DRGBA(0.0, 1.0, 0.0, 1.0) // Green used to render triangles.



#define LOWER_Z 0.49f
#define HIGHER_Z 0.51f
#define STENCIL_0 0
#define STENCIL_1 1



#ifndef UNDER_XBOX
#define TEST_CASES 14
#else
#define TEST_CASES 10
#endif
#define NUM_VERTICES 6
#define IMGHEIGHT	256
#define IMGWIDTH	256
#define ARGB_MAKE(a, r, g, b) RGBA_MAKE(r, g, b, a) 


// Class definition
class CClearTest: public CD3DTest
{
    // Private Data

    CTexture8 *  m_pTextureRT;
    CSurface8 * m_pOffSrcSurf, * m_pOffRefSurf;
    CSurface8 * m_pSrcZ, * m_pRefZ;
    
    CSurface8 * m_pOriginalSrcRT, * m_pOriginalRefRT; 
    CSurface8 * m_pOriginalSrcZ, * m_pOriginalRefZ; 

    int m_nOriginalZFormat, m_nTexFormat, m_nZFormat, m_nTestCase;

	bool m_bAlphaPresent, m_bStencilPresent;

	static const DWORD VertexFVF;

	typedef struct { float x,y,z,rhw; D3DCOLOR d; } Vertex;

	static const DWORD TexVertexFVF;

	typedef struct { float x,y,z,rhw; D3DCOLOR d; float u, v;} TexVertex;

	static const DWORD dwVertexCount;

	static const Vertex VertexList[NUM_VERTICES];

	static const TexVertex Grid[NUM_VERTICES];
    TexVertex VPGrid[NUM_VERTICES];

	BOOL boolResults[TEST_CASES];

	protected:
    bool m_bOffscreen;

    BOOL            m_bExit;

    // Public fns
	public:
	CClearTest();
	~CClearTest();

	// Framework functions
//	virtual bool AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize);
	virtual UINT TestInitialize(void);
	virtual bool ClearFrame(void);
	virtual bool ExecuteTest(UINT);
	virtual void SceneRefresh(void);
	virtual void DisplaySetup(void);
	virtual bool ProcessFrame();
	virtual bool TestTerminate(void);


	//helper fns
	bool CreateOffScrRendTrgts(int nTexFormat);
	bool CreateZStencil(int nZFormat);
	bool CopyToTexture(void);
	void DescribeFormat(char * pBuf, int nTexFormat, int nZFormat);
	void DescribeTestcase(char * pBuf, int nTestcase);

    virtual BOOL    AbortedExit(void);

protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};




// Clear Texture as render target.
class CTextureClearTest: public CClearTest
{
	public:
	CTextureClearTest();
	~CTextureClearTest();
};


// Clear Offscreen as render target.
class COffscreenClearTest: public CClearTest
{
	public:
	COffscreenClearTest();
	~COffscreenClearTest();
};



#endif  //__CLEAR_TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\clear_test\DerivedClasses.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "clear_test.h"

/******* Clear Texture as render target. *******/

CTextureClearTest::CTextureClearTest()
{
	m_szTestName = TEXT("Clear_Test Texture");
	m_szCommandKey = TEXT("Texture");
}

CTextureClearTest::~CTextureClearTest()
{
}

/******* Clear Offscreen as render target. *******/

COffscreenClearTest::COffscreenClearTest()
{
	m_szTestName = TEXT("Clear_Test Offscreen");
	m_szCommandKey = TEXT("Offscreen");

    m_bOffscreen = true;
}

COffscreenClearTest::~COffscreenClearTest()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\clear_test\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\clear_test\modulex.h ===
#define PREPEND_MODULE(Suffix) clear_test##Suffix
#define MODULE_STRING "clear_test"
#pragma comment(linker, "/include:_clear_test_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\clear_test\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_clear
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
	clear_test.cpp \
    DerivedClasses.cpp \
    describe.cpp \
    helper_fns.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\clear_test\describe.cpp ===
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "clear_test.h"

void CClearTest::DescribeFormat(char * pBuf, int nTexFormat, int nZFormat)
{
    char tbuf[256],zbuf[256];

    if (m_dwVersion >= 0x0800)
    {
        D3DFORMAT TexFmt = m_fmtCommon[nTexFormat];
        D3DFORMAT ZFmt = m_fmtdCommon[nZFormat];

        //
        // Texture format
        //

        switch (TexFmt)
        {
            case D3DFMT_R8G8B8:     sprintf(tbuf, "D3DFMT_R8G8B8");       break;
            case D3DFMT_A8R8G8B8:   sprintf(tbuf, "D3DFMT_A8R8G8B8");     break;
            case D3DFMT_X8R8G8B8:   sprintf(tbuf, "D3DFMT_X8R8G8B8");     break;
            case D3DFMT_R5G6B5:     sprintf(tbuf, "D3DFMT_R5G6B5");       break;
            case D3DFMT_X1R5G5B5:   sprintf(tbuf, "D3DFMT_X1R5G5B5");     break;
            case D3DFMT_A1R5G5B5:   sprintf(tbuf, "D3DFMT_A1R5G5B5");     break;
            case D3DFMT_A4R4G4B4:   sprintf(tbuf, "D3DFMT_A4R4G4B4");     break;
            case D3DFMT_R3G3B2:     sprintf(tbuf, "D3DFMT_R3G3B2");       break;
            case D3DFMT_A8:         sprintf(tbuf, "D3DFMT_A8");           break;
            case D3DFMT_A8R3G3B2:   sprintf(tbuf, "D3DFMT_A8R3G3B2");     break;
            case D3DFMT_X4R4G4B4:   sprintf(tbuf, "D3DFMT_X4R4G4B4");     break;
            case D3DFMT_A8P8:       sprintf(tbuf, "D3DFMT_A8P8");         break;
            case D3DFMT_P8:         sprintf(tbuf, "D3DFMT_P8");           break;
            case D3DFMT_L8:         sprintf(tbuf, "D3DFMT_L8");           break;
            case D3DFMT_A8L8:       sprintf(tbuf, "D3DFMT_A8L8");         break;
            case D3DFMT_A4L4:       sprintf(tbuf, "D3DFMT_A4L4");         break;
            case D3DFMT_V8U8:       sprintf(tbuf, "D3DFMT_V8U8");         break;
            case D3DFMT_L6V5U5:     sprintf(tbuf, "D3DFMT_L6V5U5");       break;
#ifndef UNDER_XBOX
            case D3DFMT_X8L8V8U8:   sprintf(tbuf, "D3DFMT_X8L8V8U8");     break;
#endif // !UNDER_XBOX
            case D3DFMT_Q8W8V8U8:   sprintf(tbuf, "D3DFMT_Q8W8V8U8");     break;
            case D3DFMT_V16U16:     sprintf(tbuf, "D3DFMT_V16U16");       break;
            case D3DFMT_W11V11U10:  sprintf(tbuf, "D3DFMT_W11V11U10");    break;
            case D3DFMT_UYVY:       sprintf(tbuf, "D3DFMT_UYVY");         break;
            case D3DFMT_YUY2:       sprintf(tbuf, "D3DFMT_YUY2");         break;
            case D3DFMT_DXT1:       sprintf(tbuf, "D3DFMT_DXT1");         break;
            case D3DFMT_DXT2:       sprintf(tbuf, "D3DFMT_DXT2");         break;
#ifndef UNDER_XBOX
            case D3DFMT_DXT3:       sprintf(tbuf, "D3DFMT_DXT3");         break;
#endif // !UNDER_XBOX
            case D3DFMT_DXT4:       sprintf(tbuf, "D3DFMT_DXT4");         break;
#ifndef UNDER_XBOX
            case D3DFMT_DXT5:       sprintf(tbuf, "D3DFMT_DXT5");         break;
#endif // !UNDER_XBOX
            default:                sprintf(tbuf, "Unknown");             break;
        };
                
                
        //
        // Depth buffer
        //

        if (m_ModeOptions.fZBuffer)
        {
            switch (ZFmt)
            {
#ifndef UNDER_XBOX
                case D3DFMT_D16_LOCKABLE:   sprintf(zbuf, "D3DFMT_D16_LOCKABLE"); break;
#endif // !UNDER_XBOX
                case D3DFMT_D32:            sprintf(zbuf, "D3DFMT_D32");          break;
                case D3DFMT_D15S1:          sprintf(zbuf, "D3DFMT_D15S1");        break;
                case D3DFMT_D24S8:          sprintf(zbuf, "D3DFMT_D24S8");        break;
                case D3DFMT_D16:            sprintf(zbuf, "D3DFMT_D16");          break;
#ifndef UNDER_XBOX
                case D3DFMT_D24X8:          sprintf(zbuf, "D3DFMT_D24X8");        break;
#endif // !UNDER_XBOX
                case D3DFMT_D24X4S4:        sprintf(zbuf, "D3DFMT_D24X4S4");      break;
                default:                    sprintf(zbuf, "Unknown");             break;
            };
        }
        else
            sprintf(zbuf, "Disabled"); 
    }
/*
    // m_dwVerion <= 0x0700
    else
    {
        PIXELFORMAT *pTexFmt = &(m_pCommonTextureFormats[nTexFormat].ddpfPixelFormat);
        PIXELFORMAT *pZFmt = &(m_pCommonZBufferFormats[nZFormat].ddpfPixelFormat);

        //
        // Texture format
        //

        if (pTexFmt->dwFlags & (PF_PALETTEINDEXED8 | PF_PALETTEINDEXED4 | PF_PALETTEINDEXED2 | PF_PALETTEINDEXED1 | PF_PALETTEINDEXEDTO8))
        {
            _stprintf(tbuf, "%d-bit Palettized", pTexFmt->dwRGBBitCount);
        } 

        if (pTexFmt->dwFlags & PF_RGB) 
        {
            _stprintf(tbuf, "%d-bit A:%08X R:%08X G:%08X B:%08X", 
                                pTexFmt->dwRGBBitCount, 
                                (pTexFmt->dwFlags & PF_ALPHAPIXELS) ? pTexFmt->dwRGBAlphaBitMask : 0,
                                pTexFmt->dwRBitMask, 
                                pTexFmt->dwGBitMask, 
                                pTexFmt->dwBBitMask);
        }
    
        if (pTexFmt->dwFlags & PF_BUMPDUDV)
        {
            _stprintf(tbuf, "%d-bit dU:%08X dV:%08X L:%08X",
                                pTexFmt->dwBumpBitCount,
                                pTexFmt->dwBumpDuBitMask,
                                pTexFmt->dwBumpDvBitMask,
                                (pTexFmt->dwFlags & PF_BUMPLUMINANCE) ? pTexFmt->dwBumpLuminanceBitMask : 0);
        }

        if (pTexFmt->dwFlags & (PF_LUMINANCE | PF_ALPHA))
        {
            _stprintf(tbuf, "%d-bit L:%08X A:%08X",
                                pTexFmt->dwLuminanceBitCount,
                                (pTexFmt->dwFlags & PF_LUMINANCE) ? pTexFmt->dwLuminanceBitMask : 0,
                                (pTexFmt->dwFlags & PF_ALPHA) ? pTexFmt->dwLuminanceAlphaBitMask : 0);
                    
        }

        if (pTexFmt->dwFlags & PF_FOURCC)
        {
            _stprintf(tbuf, "FourCC: %C%C%C%C", 
                            (pTexFmt->dwFourCC) & 0xFF,
                            ((pTexFmt->dwFourCC) & (0xFF<<8)) >> 8,
                            ((pTexFmt->dwFourCC) & (0xFF<<16)) >> 16,
                            ((pTexFmt->dwFourCC) & (0xFF<<24)) >> 24);
        }

        //
        // Depth buffer
        //

        if (m_ModeOptions.fZBuffer)
        {
            _stprintf(zbuf, "%d-bit, z%ds%d", 
                                pZFmt->dwZBufferBitDepth, 
                                pZFmt->dwZBufferBitDepth - pZFmt->dwStencilBitDepth,
                                pZFmt->dwStencilBitDepth);
        }
        else
            _stprintf(zbuf, "Disabled"); 
    }
*/
    sprintf(pBuf, "Tex(%d): %s Z(%d): %s", nTexFormat, tbuf, nZFormat, zbuf);
}



void CClearTest::DescribeTestcase(char * pBuf, int nTestcase)
{
	switch(nTestcase)
	{
		case 0:
			sprintf(pBuf, "Clear RGB full screen test.");
			break;
		case 1:
		case 2:
			sprintf(pBuf, "Clear Alpha full screen test.");
			break;
		case 3:
		case 4:
			sprintf(pBuf, "Clear Z full screen test.");
			break;
		case 5:
		case 6:
			sprintf(pBuf, "Clear Stencil full screen test.");
			break;
		case 7:
			sprintf(pBuf, "Clear Z affect stencil.");
			break;
		case 8:
			sprintf(pBuf, "Clear stencil affect Z.");
			break;
		case 9:
			sprintf(pBuf, "Clear render-target alone affect Z or stencil.");
			break;
		case 10:
			sprintf(pBuf, "Clear RGB test - list of rects.");
			break;
		case 11:
			sprintf(pBuf, "Clear alpha test - list of rects.");
			break;
		case 12:
			sprintf(pBuf, "Clear Z test - list of rects.");
			break;
		case 13:
			sprintf(pBuf, "Clear Stencil test - list of rects.");
			break;
		default:
			sprintf(pBuf, "DCT test error!");
			break;
	}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\clear_test\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=clear
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_clear.lib

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_clear.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\clear_test\helper_fns.cpp ===
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "clear_test.h"

bool CClearTest::CreateOffScrRendTrgts(int nTexFormat)
{
    HRESULT hr;
    D3DSURFACE_DESC Desc;

/*
    // Create a src surface for rendering
    m_pOffSrcSurf = new CDirectDrawSurface(this);

    if (m_dwVersion <= 0x0700)
    {
    	DWORD dwSurfaceCrFlags;

        if (m_pAdapter->Devices[m_pMode->nSrcDevice].fHardware)
		    dwSurfaceCrFlags = CDDS_SURFACE_VIDEO | CDDS_SURFACE_OFFSCREEN;
	    else
		    dwSurfaceCrFlags = CDDS_SURFACE_SYSTEM | CDDS_SURFACE_OFFSCREEN;

	    if (!m_pOffSrcSurf->CreateSurface(IMGWIDTH, IMGHEIGHT, (LPDDPIXELFORMAT)&m_pCommonTextureFormats[nTexFormat].ddpfPixelFormat, dwSurfaceCrFlags))
	    {
		    WriteToLog("Src CreateSurface failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
		    RELEASE(m_pOffSrcSurf);
		    return false;
	    }
    }
    else // m_dwVersion >= 0x0800
    {
*/
        hr = m_pSrcDevice8->CreateRenderTarget(IMGWIDTH, 
                                               IMGHEIGHT,
                                               m_fmtCommon[nTexFormat],
                                               D3DMULTISAMPLE_NONE,
                                               TRUE,
                                               &m_pOffSrcSurf);
        if (FAILED(hr))
        {
	        WriteToLog("Src CreateRenderTarget() failed with HResult = %X.\n",hr);
//		    RELEASE(m_pOffSrcSurf);
		    return false;
	    }
/*
        // Get and process surface description 
        if (m_pOffSrcSurf->GetSurfaceDescription(&Desc))
            m_pOffSrcSurf->ProcessSurfaceDescription(&Desc);
        else
        {
	        WriteToLog("Failed to get src surface description.\n");
		    RELEASE(m_pOffSrcSurf);
		    return false;
        }
    }

    if (m_pRefTarget != NULL)
    {
        // Create a ref surface for rendering
        m_pOffRefSurf = new CDirectDrawSurface(this);

        if (m_dwVersion <= 0x0700)
        {
    	    DWORD dwSurfaceCrFlags;

	        if (m_pAdapter->Devices[m_pMode->nRefDevice].fHardware)
		        dwSurfaceCrFlags = CDDS_SURFACE_VIDEO | CDDS_SURFACE_OFFSCREEN;
	        else
		        dwSurfaceCrFlags = CDDS_SURFACE_SYSTEM | CDDS_SURFACE_OFFSCREEN;

	        if (!m_pOffRefSurf->CreateSurface(IMGWIDTH, IMGHEIGHT, (LPDDPIXELFORMAT)&m_pCommonTextureFormats[nTexFormat].ddpfPixelFormat, dwSurfaceCrFlags))
	        {
		        WriteToLog("Ref CreateSurface failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
		        RELEASE(m_pOffRefSurf);
		        return false;
	        }
        }
        else // m_dwVersion >= 0x0800
        {
            hr = m_pRefDevice8->CreateRenderTarget(IMGWIDTH, 
												   IMGHEIGHT,
                                                   m_pCommonTextureFormats[nTexFormat].d3dfFormat,
                                                   D3DMULTISAMPLE_NONE,
                                                   true,
                                                   &m_pOffRefSurf->m_pSurface8); 
            if (FAILED(hr))
            {
	            WriteToLog("Ref CreateRenderTarget() failed with HResult = %s.\n",GetHResultString(hr).c_str());
		        RELEASE(m_pOffSrcSurf);
		        RELEASE(m_pOffRefSurf);
		        return false;
	        }

            // Get and process surface description 
            if (m_pOffRefSurf->GetSurfaceDescription(&Desc))
                m_pOffRefSurf->ProcessSurfaceDescription(&Desc);
            else
            {
	            WriteToLog("Failed to get ref surface description.\n");
		        RELEASE(m_pOffRefSurf);
		        return false;
            }
        }
    }
*/

	return true;
}










bool CClearTest::CreateZStencil(int nZFormat)
{
	HRESULT hr;

//	CDirectDrawSurface * pZSurface = new CDirectDrawSurface(this);
/*
	if (m_dwVersion <= 0x0700)
	{
		DWORD dwSurfaceCrFlags; 

		if (m_pAdapter->Devices[m_pMode->nSrcDevice].fHardware)
			dwSurfaceCrFlags = CDDS_SURFACE_VIDEO;
		else
			dwSurfaceCrFlags = CDDS_SURFACE_SYSTEM;

		if (!pZSurface->CreateZBuffer(IMGWIDTH, IMGHEIGHT, (LPDDPIXELFORMAT)&m_pCommonZBufferFormats[nZFormat].ddpfPixelFormat, dwSurfaceCrFlags))
		{
			WriteToLog("Src CreateZBuffer failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
			RELEASE(pZSurface);
			return false;            
		}
	} 
	else // m_dwVersion >= 0x0800
	{
*/
		hr = m_pSrcDevice8->CreateDepthStencilSurface(IMGWIDTH, 
													  IMGHEIGHT, 
													  m_fmtdCommon[nZFormat], 
													  D3DMULTISAMPLE_NONE, 
													  &m_pSrcZ);
		if (FAILED(hr))
		{
    		WriteToLog("Src CreateDepthStencilSurface() failed with HResult = %X.\n",hr);
//			RELEASE(pZSurface);
			return false;
		}
/*
	}

	m_pSrcZ = pZSurface;

	if (m_pRefTarget != NULL)
	{
		pZSurface = new CDirectDrawSurface(this);
    
		if (m_dwVersion <= 0x0700)
		{
			DWORD dwSurfaceCrFlags; 

			if (m_pAdapter->Devices[m_pMode->nRefDevice].fHardware)
				dwSurfaceCrFlags = CDDS_SURFACE_VIDEO;
			else
				dwSurfaceCrFlags = CDDS_SURFACE_SYSTEM;

			if (!pZSurface->CreateZBuffer(IMGWIDTH, IMGHEIGHT, (LPDDPIXELFORMAT)&m_pCommonZBufferFormats[nZFormat].ddpfPixelFormat, dwSurfaceCrFlags))
			{
				WriteToLog("Ref CreateZBuffer failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
				RELEASE(pZSurface);
				return false;            
			}
		} 
		else // m_dwVersion >= 0x0800
		{
			hr = m_pRefDevice8->CreateDepthStencilSurface(IMGWIDTH, 
														  IMGHEIGHT, 
														  m_pCommonZBufferFormats[nZFormat].d3dfFormat, 
														  D3DMULTISAMPLE_NONE, 
														  &pZSurface->m_pSurface8);
			if (FAILED(hr))
			{
    			WriteToLog("Ref CreateDepthStencilSurface() failed with HResult = %s.\n",GetHResultString(hr).c_str());
				RELEASE(m_pSrcZ);
				RELEASE(pZSurface);
				return false;
			}
		}

		m_pRefZ = pZSurface;
	}
*/
	return true;
}



bool CClearTest::CopyToTexture(void)
{
    HRESULT hr;
/*
    if (m_dwVersion <= 0x0700)
    {
       POINT Pt = {0,0};

        if (!m_pTextureRT->m_pSrcSurface->Blt(m_pOffSrcSurf,Pt))
	    {
		    WriteToLog("Src Blt() failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
		    return false;
	    }

	    if (NULL != m_pRefTarget)
	    {
		    if (!m_pTextureRT->m_pRefSurface->Blt(m_pOffRefSurf,Pt))
		    {
			    WriteToLog("Ref Blt() failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
			    return false;
		    }
	    }
    }
    else // m_dwVersion >= 0x0800
    {
*/
        CSurface8* pd3ds;
        RECT Rect;

        Rect.left = 0;
	    Rect.top  = 0;
	    Rect.right  = IMGWIDTH;
	    Rect.bottom = IMGHEIGHT;

        hr = m_pTextureRT->GetSurfaceLevel(0, &pd3ds);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
            return false;
        }

#ifndef UNDER_XBOX
        hr = m_pSrcDevice8->CopyRects(m_pOffSrcSurf, &Rect, 1, pd3ds, NULL);
#else
        hr = m_pSrcDevice8->CopyRects(m_pOffSrcSurf, NULL, 0, pd3ds, NULL);
#endif

        pd3ds->Release();

        if (FAILED(hr))
        {
            WriteToLog("Src CopyRects() failed with HResult = %X.\n",hr);
            return false;
        }
/*
        if (m_pRefTarget)
        {
            hr = m_pRefDevice8->CopyRects(m_pOffRefSurf->m_pSurface8, &Rect, 1, m_pTextureRT->m_pRefSurface->m_pSurface8, NULL);

            if (FAILED(hr))
            {
                WriteToLog("Ref CopyRects() failed with HResult = %s.\n",GetHResultString(hr).c_str());
                return false;
            }
        }
    }
*/
    return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\clear_test\exe\sources.inc ===
TARGETNAME=clear
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_clear.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\compress\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\compress\compress.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	compress.h
 *
 ***************************************************************************/

#ifndef __COMPRESS_H__
#define __COMPRESS_H__

//USETESTFRAME

// Defines
#define MAX_TESTS		18

// Class definition
class CCompressTest: public CD3DTest
{
    // Data
	public:
    D3DTLVERTEX     VertexList[6];
    DWORD           dwVertexCount;
	CTexture8 *		pTexture;
	CTexture8 *		pDXTnTexture;
	CTexture8 *		pSysDXTnTexture;
//	CImageData *	pImage;
//	CImageData *	pAlphaImage;
//	CImageData *	pTinyImage;
	DWORD			dwFourCC;
    D3DFORMAT       fmtCompressed;
	DWORD			dwPerspectiveCap;
	DWORD			dwSrcAlphaCap;
	DWORD			dwOneCap;
	DWORD			dwInvSrcAlphaCap;
	char			msgString[80];
	char			szStatus[80];

	D3DCOLOR		Stripes[8];
	D3DCOLOR		AlphaStripes[8];
	D3DCOLOR		White[4];

    BOOL            m_bExit;

	public:
	CCompressTest();
	~CCompressTest();

	// Framework functions
	virtual bool SetDefaultRenderStates(void);
	virtual UINT TestInitialize(void);
	virtual bool ClearFrame(void);
	virtual bool ExecuteTest(UINT);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);
	virtual bool TestTerminate(void);

	// Helper functions
	bool CheckDXTnFormat(D3DFORMAT fmtDXTn);
	void DrawBasicGrid(int nTest, int nTexFormats);
	void DrawBlendingGrid(int nAlpha);
    bool DXTnLoad8(void);

    virtual BOOL    AbortedExit(void);

protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

// DXT1 Class definitions
class CDXT1Test: public CCompressTest
{
	public:
	CDXT1Test();
	~CDXT1Test();
};

// DXT2 Class definitions
class CDXT2Test: public CCompressTest
{
	public:
	CDXT2Test();
	~CDXT2Test();
};

// DXT3 Class definitions
class CDXT3Test: public CCompressTest
{
	public:
	CDXT3Test();
	~CDXT3Test();
};

// DXT4 Class definitions
class CDXT4Test: public CCompressTest
{
	public:
	CDXT4Test();
	~CDXT4Test();
};

// DXT5 Class definitions
class CDXT5Test: public CCompressTest
{
	public:
	CDXT5Test();
	~CDXT5Test();
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\compress\dxtn.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Compress.h"

//************************************************************************
// DXT1 Test functions

CDXT1Test::CDXT1Test()
{
	m_szTestName = TEXT("DXT1 Compressed Texture");
	m_szCommandKey = TEXT("DXT1");

	// Tell parent our FourCC code
//	dwFourCC = FOURCC_DXT1;
    fmtCompressed = D3DFMT_DXT1;
}

CDXT1Test::~CDXT1Test()
{
}
   
//************************************************************************
// DXT2 Test functions

CDXT2Test::CDXT2Test()
{
	m_szTestName = TEXT("DXT2 Compressed Texture");
	m_szCommandKey = TEXT("DXT2");

	// Tell parent our FourCC code
//	dwFourCC = FOURCC_DXT2;
    fmtCompressed = D3DFMT_DXT2;
}

CDXT2Test::~CDXT2Test()
{
}
   
//************************************************************************
// DXT3 Test functions

CDXT3Test::CDXT3Test()
{
	m_szTestName = TEXT("DXT3 Compressed Texture");
	m_szCommandKey = TEXT("DXT3");

	// Tell parent our FourCC code
//	dwFourCC = FOURCC_DXT3;
    fmtCompressed = D3DFMT_DXT3;
}

CDXT3Test::~CDXT3Test()
{
}
   
//************************************************************************
// DXT4 Test functions

CDXT4Test::CDXT4Test()
{
	m_szTestName = TEXT("DXT4 Compressed Texture");
	m_szCommandKey = TEXT("DXT4");

	// Tell parent our FourCC code
//	dwFourCC = FOURCC_DXT4;
    fmtCompressed = D3DFMT_DXT4;
}

CDXT4Test::~CDXT4Test()
{
}
   
//************************************************************************
// DXT5 Test functions

CDXT5Test::CDXT5Test()
{
	m_szTestName = TEXT("DXT5 Compressed Texture");
	m_szCommandKey = TEXT("DXT5");

	// Tell parent our FourCC code
//	dwFourCC = FOURCC_DXT5;
    fmtCompressed = D3DFMT_DXT5;
}

CDXT5Test::~CDXT5Test()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\compress\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\compress\modulex.h ===
#define PREPEND_MODULE(Suffix) compress##Suffix
#define MODULE_STRING "compress"
#pragma comment(linker, "/include:_compress_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\compress\drawgrid.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Compress.h"

//************************************************************************
// Internal API:    DrawBasicGrid
//
// Purpose:         
//
// Return:          ERROR_SUCCESS if the vertices were setup properly
//************************************************************************

void CCompressTest::DrawBasicGrid(int nTest, int nTexFormats)
{
	char	szBuffer[80];
	int nScale, nMapping;
	float fZstart, fZend, fScale;
	bool bLogMap;

	// Initialize the interesting variables
	nMapping = nScale = 1;
	fScale = 1.0f * nScale;
	fZstart = fZend = 0.9f;
	bLogMap = false;

	switch (nTest)
	{
		case (1):	// Texture Mapping cases
		case (2):
		case (3):
		case (4):
			{
				nMapping = nTest;
				bLogMap = true;
			}
			break;
		case (5):	// Texture 2x2 Tiling case
			{
				nScale = 2;
				fScale = 1.0f * nScale;
			}
			break;
		case (6):	// Texture 4x4 Tiling case
			{
				nScale = 4;
				fScale = 1.0f * nScale;
			}
			break;
		default:	// Texture Perspective cases
			{
				fZstart = 1.0f - ((nTest-6) * 0.25f);

				if (!fZstart)
					fZstart = 0.1f;
			}
			break;
	}

	switch (nMapping)
	{
		case (1): // Use standard ((0,0)(1,0)(0,1)(1,1)) mapping, White Mesh
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZstart),(!fZstart ? 1.0f / 0.00001f : 1.0f / fZstart), RGBA_MAKE(255,255,255,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZend),  (1.0f / fZend), RGBA_MAKE(255,255,255,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, fZend),  (1.0f / fZend), RGBA_MAKE(255,255,255,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZstart),(!fZstart ? 1.0f / 0.00001f : 1.0f / fZstart), RGBA_MAKE(255,255,255,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, fZstart),(!fZstart ? 1.0f / 0.00001f : 1.0f / fZstart), RGBA_MAKE(255,255,255,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZend),  (1.0f / fZend), RGBA_MAKE(255,255,255,255),0, fScale,fScale);

			szBuffer[0] = 0;
			sprintf(szBuffer,"White Mesh, %dx%d Tiling, %.2ff Z top - %.2ff Z bottom",nScale,nScale,fZstart,fZend);
			sprintf(szStatus, "%s%s",szStatus, szBuffer);

			sprintf(msgString, "%sMesh: %dx%d White, Z: %.2ff - %.2ff",msgString,nScale,nScale,fZstart,fZend);
			break;
		case (2): // Use ((0,1)(0,0)(1,1)(1,0)) mapping, Red Mesh
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, fScale,  0.0f);

			szBuffer[0] = 0;
			sprintf(szBuffer,"Red Mesh, %dx%d Tiling, %.2ff Z top - %.2ff Z bottom",nScale,nScale,fZstart,fZend);
			sprintf(szStatus, "%s%s",szStatus, szBuffer);

			sprintf(msgString, "%sMesh: %dx%d Red, Z: %.2ff - %.2ff",msgString,nScale,nScale,fZstart,fZend);
			break;
		case (3): // Use ((1,1)(0,1)(1,0)(0,0)) mapping, Green Mesh
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, 0.0f,    0.0f);

			szBuffer[0] = 0;
			sprintf(szBuffer,"Green Mesh, %dx%d Tiling, %.2ff Z top - %.2ff Z bottom",nScale,nScale,fZstart,fZend);
			sprintf(szStatus, "%s%s",szStatus, szBuffer);

			sprintf(msgString, "%sMesh: %dx%d Green, Z: %.2ff - %.2ff",msgString,nScale,nScale,fZstart,fZend);
			break;
		case (4): // Use ((1,0)(1,1)(0,0)(0,1)) mapping, Blue Mesh
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 0.0f,  fScale);

			szBuffer[0] = 0;
			sprintf(szBuffer,"Blue Mesh, %dx%d Tiling, %.2ff Z top - %.2ff Z bottom",nScale,nScale,fZstart,fZend);
			sprintf(szStatus, "%s%s",szStatus, szBuffer);

			sprintf(msgString, "%sMesh: %dx%d Blue, Z: %.2ff - %.2ff",msgString,nScale,nScale,fZstart,fZend);
			break;
	}
}

//************************************************************************
// Internal API:    DrawBlendingGrid
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CCompressTest::DrawBlendingGrid(int nAlpha)
{
	// Use standard ((0,0)(1,0)(0,1)(1,1)) mapping, White Mesh
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,nAlpha),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255)   ,0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,nAlpha),0, 0.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,nAlpha),0, 0.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255)   ,0, 1.0f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255)   ,0, 1.0f,1.0f);

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\compress\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_comprs
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
	compress.cpp \
	drawgrid.cpp \
	load8.cpp    \
	dxtn.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\compress\load8.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Compress.h"

bool CCompressTest::DXTnLoad8(void)
{
    HRESULT hr;
    PALETTECOLOR    *pPal = NULL;
    D3DSURFACE_DESC d3dsd;
    PALETTECOLOR    Palette[256];

    hr = pSysDXTnTexture->GetLevelDesc(0, &d3dsd);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
        return false;
    }

    if (d3dsd.Format == D3DFMT_P8)
    {
		ZeroMemory(Palette, sizeof(PALETTECOLOR) * 256);

#ifndef UNDER_XBOX
        hr = m_pSrcDevice8->GetPaletteEntries(0, Palette);

        if (FAILED(hr))
        {
            WriteToLog("Source GetPaletteEntries() failed with HResult = %X.\n",hr);
		    return false;
        }
#else
        CPalette8* pd3dp = NULL;
        D3DCOLOR* pc;
        hr = m_pDevice->GetPalette(0, &pd3dp);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetPalette"))) {
            return false;
        }
        pd3dp->Lock(&pc, 0);
        memcpy(Palette, pc, 256 * sizeof(PALETTECOLOR));
        pd3dp->Unlock();
        pd3dp->Release();
#endif

        pPal = Palette;
    }

/*
    hr = D3DXLoadSurfaceFromSurface(
		     pSysDXTnTexture,
		     pPal, 
             NULL,					    
			 pTexture, 
			 pPal,					    
			 NULL,					   
			 D3DX_FILTER_POINT, 	  
             0);
*/
    hr = CopyTexture(pSysDXTnTexture, pPal, pTexture, pPal, D3DX_FILTER_POINT);

    if (FAILED(hr))
    {
        WriteToLog("Source D3DXLoadSurfaceFromSurface() failed with HResult = %X.\n",hr);
		return false;
    }

#ifndef UNDER_XBOX

    hr = CopyTexture(pDXTnTexture, pPal, pSysDXTnTexture, pPal, D3DX_FILTER_POINT);

    if (FAILED(hr))
    {
		WriteToLog("Source CopyTexture() failed with HResult = %X.\n",hr);
		return false;
    }

#else

    m_pDisplay->EnableRMC(FALSE);

    // Update the Source texture
    hr = m_pSrcDevice8->UpdateTexture(pSysDXTnTexture, pDXTnTexture);

    m_pDisplay->EnableRMC(TRUE);

    if (FAILED(hr))
    {
		WriteToLog("Source UpdateTexture() failed with HResult = %X.\n",hr);
		return false;
    }

    if (!SyncTexture(pDXTnTexture)) {
        return false;
    }

#endif // UNDER_XBOX

/*
    if (NULL != m_pRefTarget)
    {
        if (m_pCommonTextureFormats[m_pMode->nTextureFormat].d3dfFormat == D3DFMT_P8)
        {
            PALETTEENTRY	Palette[256];
		    ZeroMemory(Palette, sizeof(PALETTEENTRY) * 256);

            hr = m_pRefDevice8->GetPaletteEntries(0, Palette);

            if (FAILED(hr))
            {
                WriteToLog("Reference GetPaletteEntries() failed with HResult = %s.\n",GetHResultString(hr).c_str());
		        return false;
            }

            pPal = Palette;
        }

        hr = D3DXLoadSurfaceFromSurface(
		         pSysDXTnTexture->m_pRefSurface->m_pSurface8,
		         pPal, 
                 NULL,					    
			     pTexture->m_pRefSurface->m_pSurface8, 
			     pPal,					    
			     NULL,					   
    			 D3DX_FILTER_POINT, 	  
                 0);

        if (FAILED(hr))
        {
            WriteToLog("Reference D3DXLoadSurfaceFromSurface() failed with HResult = %s.\n",GetHResultString(hr).c_str());
		    return false;
        }

        // Update the Reference texture
        hr = m_pRefDevice8->UpdateTexture(pSysDXTnTexture->m_pRefTexture8, pDXTnTexture->m_pRefTexture8);

        if (FAILED(hr))
        {
		    WriteToLog("Reference UpdateTexture() failed with HResult = %s.\n",GetHResultString(hr).c_str());
		    return false;
        }
    }
*/
    return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\compress\compress.cpp ===
#define STRICT
#define BURN_IN_HELL
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Compress.h"

// Global Test and App instance
//CD3DWindowFramework	App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CCompressTest*  pDXT;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 5 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pDXT = new CDXT1Test();
                break;
            case 1:
                pDXT = new CDXT2Test();
                break;
            case 2:
                pDXT = new CDXT3Test();
                break;
            case 3:
                pDXT = new CDXT4Test();
                break;
            case 4:
                pDXT = new CDXT5Test();
                break;
        }

        if (!pDXT) {
            return FALSE;
        }

        // Initialize the scene
        if (!pDXT->Create(pDisplay)) {
            pDXT->Release();
            return FALSE;
        }

        bRet = pDXT->Exhibit(pnExitCode);

        bQuit = pDXT->AbortedExit();

        // Clean up the scene
        pDXT->Release();
    }

    return bRet;
}
 
CCompressTest::CCompressTest()
{
    D3DFORMAT fmt[] = {
#ifndef UNDER_XBOX
        D3DFMT_A8R8G8B8,
        D3DFMT_X8R8G8B8,
        D3DFMT_R5G6B5,
        D3DFMT_A1R5G5B5,
        D3DFMT_X1R5G5B5,
        D3DFMT_A4R4G4B4,
#else
        D3DFMT_LIN_A8R8G8B8,
        D3DFMT_LIN_X8R8G8B8,
        D3DFMT_LIN_R5G6B5,
        D3DFMT_LIN_A1R5G5B5,
        D3DFMT_LIN_X1R5G5B5,
        D3DFMT_LIN_A4R4G4B4,
#if 0
        D3DFMT_LIN_R6G5B5,
        D3DFMT_LIN_A8B8G8R8,
        D3DFMT_LIN_B8G8R8A8,
        D3DFMT_LIN_R4G4B4A4,
        D3DFMT_LIN_R5G5B5A1,
        D3DFMT_LIN_R8G8B8A8,
#endif
#endif
    };

    m_uCommonTextureFormats = countof(fmt);
    memcpy(m_fmtCommon, fmt, m_uCommonTextureFormats * sizeof(D3DFORMAT));

    pTexture = NULL;
	pDXTnTexture = NULL;
	pSysDXTnTexture = NULL;
    m_bExit = FALSE;
}

CCompressTest::~CCompressTest()
{
}

bool CCompressTest::SetDefaultRenderStates(void)
{
	// Turn off texture perspection
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)FALSE);
	return true;
}

UINT CCompressTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

	// Check for the appropriate compressed texture format
	bool bValidFormat = CheckDXTnFormat(fmtCompressed);

	// Request only the RGB texture formats
//	if (!RequestTextureFormats(PF_RGB))
//	{
//		WriteToLog("No common RGB texture formats found.\n");
//		return D3DTESTINIT_ABORT;
//	}

	// Setup the Test range
	SetTestRange(1, MAX_TESTS * m_uCommonTextureFormats);

	if (!bValidFormat)
	{
		WriteToLog("%s compressed texture format not supported.\n",m_szCommandKey);
		return D3DTESTINIT_SKIPALL;
	}

	// Check the caps we are interested in
	dwPerspectiveCap	= (m_d3dcaps.TextureCaps & D3DPTEXTURECAPS_PERSPECTIVE);
	dwSrcAlphaCap		= (m_d3dcaps.SrcBlendCaps & D3DPBLENDCAPS_SRCALPHA);
	dwOneCap			= (m_d3dcaps.SrcBlendCaps & D3DPBLENDCAPS_ONE);
	dwInvSrcAlphaCap	= (m_d3dcaps.DestBlendCaps & D3DPBLENDCAPS_INVSRCALPHA);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	// Setup the colors for the Stripes array
//	D3DCOLOR		Stripes[8];

	Stripes[0] = RGBA_MAKE(255,255,255,255);// White
	Stripes[1] = RGBA_MAKE(255,0,0,255);	// Red
	Stripes[2] = RGBA_MAKE(0,255,0,255);	// Green
	Stripes[3] = RGBA_MAKE(0,0,255,255);	// Blue
	Stripes[4] = RGBA_MAKE(255,255,0,255);	// Yellow
	Stripes[5] = RGBA_MAKE(255,0,255,255);	// Magenta
	Stripes[6] = RGBA_MAKE(0,255,255,255);	// Cyan
	Stripes[7] = RGBA_MAKE(128,128,128,255);// Grey

	// Create the stripe image data
//    CImageLoader    Image;

//    pImage = Image.LoadStripes(256,256,8,Stripes,false); 

	// Setup the colors for the AlphaStripes array
//	D3DCOLOR		AlphaStripes[8];

	AlphaStripes[0] = RGBA_MAKE(255,255,255,0);		// White
	AlphaStripes[1] = RGBA_MAKE(255,0,0,32);		// Red
	AlphaStripes[2] = RGBA_MAKE(0,255,0,64);		// Green
	AlphaStripes[3] = RGBA_MAKE(0,0,255,127);		// Blue
	AlphaStripes[4] = RGBA_MAKE(255,255,0,128);		// Yellow
	AlphaStripes[5] = RGBA_MAKE(255,0,255,192);		// Magenta
	AlphaStripes[6] = RGBA_MAKE(0,255,255,224);		// Cyan
	AlphaStripes[7] = RGBA_MAKE(128,128,128,255);	// Grey

	// Create the AlphaStripe image data
//    CImageLoader    AlphaImage;

//    pAlphaImage = AlphaImage.LoadStripes(256,256,8,AlphaStripes,false); 

	// Setup the colors for the AlphaStripes array
//	D3DCOLOR		White[4];

	White[0] = RGBA_MAKE(255,255,255,0);	// Full Alpha
	White[1] = RGBA_MAKE(255,255,255,64);	// 25% Alpha
	White[2] = RGBA_MAKE(255,255,255,192);	// 75% Alpha
	White[3] = RGBA_MAKE(255,255,255,255);	// No Alpha

	// Create the White image data
//    CImageLoader    TinyImage;

//    pTinyImage = TinyImage.LoadStripes(4,4,4,White,false); 

#ifdef UNDER_XBOX
    if (m_pDisplay->GetConnectionStatus() == SERVER_CONNECTED) {
        m_pDisplay->EnableRMC(FALSE);
        m_pDevice->SetRenderState(D3DRS_DXT1NOISEENABLE, FALSE);
        m_pDisplay->EnableRMC(TRUE);
    }
#endif

	return D3DTESTINIT_RUN;
}

bool CCompressTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255));
}

#if 1

bool CCompressTest::ExecuteTest(UINT uTestNum)
{
	// Initialize some variables
	UINT uTextureFormat = (uTestNum-1) % m_uCommonTextureFormats;
	int nTest = ((uTestNum-1) / m_uCommonTextureFormats) + 1;
    D3DSURFACE_DESC d3dsdSrc, d3dsdDst;
    D3DLOCKED_RECT d3dlrSrc, d3dlrDst;
    HRESULT hr;
    POINT Pt = {0,0};
 	dwVertexCount = 0;
	msgString[0] = '\0';
	szStatus[0] = '\0';

	// Cleanup previous textures
	SetTexture(0, NULL);
    ReleaseTexture(pTexture);
    pTexture = NULL;
	ReleaseTexture(pDXTnTexture);
    pDXTnTexture = NULL;

	// Let's build some triangles.
	switch (nTest)
	{
		case (1): // Use no Alpha Blending
			sprintf(msgString, "%sAlpha (Tex): Default",msgString);
			sprintf(szStatus, "%sAlpha (Tex): Default",szStatus);
			DrawBlendingGrid(255);

			// Create the texture
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, m_fmtCommon[uTextureFormat]);
            pDXTnTexture = (CTexture8*)CreateTexture(m_pDevice, 256, 256, fmtCompressed);
			break;
		case (2): // Use texture Alpha Blending
			sprintf(msgString, "%sAlpha (Tex): SrcAlpha/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Tex): SrcAlpha/InvSrcAlpha",szStatus);
			DrawBlendingGrid(255);

			// Make sure device supports the proper alpha blending modes
			if (!dwSrcAlphaCap || !dwInvSrcAlphaCap)
			{
				if (!dwSrcAlphaCap)
					WriteToLog("Device capability not supported: SrcBlend - SrcAlpha.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, m_fmtCommon[uTextureFormat]);
            pDXTnTexture = (CTexture8*)CreateTexture(m_pDevice, 256, 256, fmtCompressed);
			break;
		case (3): // Use mesh Alpha Blending
			sprintf(msgString, "%sAlpha (Mesh): SrcAlpha/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Mesh): SrcAlpha/InvSrcAlpha",szStatus);
			DrawBlendingGrid(0);

			// Make sure device supports the proper alpha blending modes
			if (!dwSrcAlphaCap || !dwInvSrcAlphaCap)
			{
				if (!dwSrcAlphaCap)
					WriteToLog("Device capability not supported: SrcBlend - SrcAlpha.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, Stripes, false, false, m_fmtCommon[uTextureFormat]);
            pDXTnTexture = (CTexture8*)CreateTexture(m_pDevice, 256, 256, fmtCompressed);
			break;
		case (4): // Use mesh and texture Alpha Blending
			sprintf(msgString, "%sAlpha (Both): SrcAlpha/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Both): SrcAlpha/InvSrcAlpha",szStatus);
			DrawBlendingGrid(0);

			// Make sure device supports the proper alpha blending modes
			if (!dwSrcAlphaCap || !dwInvSrcAlphaCap)
			{
				if (!dwSrcAlphaCap)
					WriteToLog("Device capability not supported: SrcBlend - SrcAlpha.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, m_fmtCommon[uTextureFormat]);
            pDXTnTexture = (CTexture8*)CreateTexture(m_pDevice, 256, 256, fmtCompressed);
			break;
		case (5): // Use texture Alpha Blending
			sprintf(msgString, "%sAlpha (Tex 4x4): SrcAlpha/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Tex 4x4): SrcAlpha/InvSrcAlpha",szStatus);
			DrawBlendingGrid(255);

			// Make sure device supports the proper alpha blending modes
			if (!dwSrcAlphaCap || !dwInvSrcAlphaCap)
			{
				if (!dwSrcAlphaCap)
					WriteToLog("Device capability not supported: SrcBlend - SrcAlpha.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
            pTexture = CreateStripedTexture(m_pDevice, 4, 4, 4, White, false, false, m_fmtCommon[uTextureFormat]);
            pDXTnTexture = (CTexture8*)CreateTexture(m_pDevice, 4, 4, fmtCompressed);
			break;
		case (6): // Use texture Alpha Blending
			sprintf(msgString, "%sAlpha (Tex): One/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Tex): One/InvSrcAlpha",szStatus);
			DrawBlendingGrid(255);

			// Make sure device supports the proper alpha blending modes
			if (!dwOneCap || !dwInvSrcAlphaCap)
			{
				if (!dwOneCap)
					WriteToLog("Device capability not supported: SrcBlend - One.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_ONE);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, m_fmtCommon[uTextureFormat]);
            pDXTnTexture = (CTexture8*)CreateTexture(m_pDevice, 256, 256, fmtCompressed);
			break;
		case (7): // Use mesh Alpha Blending
			sprintf(msgString, "%sAlpha (Mesh): One/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Mesh): One/InvSrcAlpha",szStatus);
			DrawBlendingGrid(0);

			// Make sure device supports the proper alpha blending modes
			if (!dwOneCap || !dwInvSrcAlphaCap)
			{
				if (!dwOneCap)
					WriteToLog("Device capability not supported: SrcBlend - One.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_ONE);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, Stripes, false, false, m_fmtCommon[uTextureFormat]);
            pDXTnTexture = (CTexture8*)CreateTexture(m_pDevice, 256, 256, fmtCompressed);
			break;
		case (8): // Use mesh and texture Alpha Blending
			sprintf(msgString, "%sAlpha (Both): One/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Both): One/InvSrcAlpha",szStatus);
			DrawBlendingGrid(0);

			// Make sure device supports the proper alpha blending modes
			if (!dwOneCap || !dwInvSrcAlphaCap)
			{
				if (!dwSrcAlphaCap)
					WriteToLog("Device capability not supported: SrcBlend - One.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_ONE);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, m_fmtCommon[uTextureFormat]);
            pDXTnTexture = (CTexture8*)CreateTexture(m_pDevice, 256, 256, fmtCompressed);
			break;
		default:
			DrawBasicGrid(nTest-8,m_uCommonTextureFormats);

			// Set the default alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_ONE);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_ZERO);

			// Set the texture perspective renderstate
			if (nTest >= 15)
			{
				// Make sure device supports texture perspection
				if (!dwPerspectiveCap)
				{
					WriteToLog("Device capability not supported: Texture Perspective.\n");
					SkipTests(m_uCommonTextureFormats);
					return false;
				}

//				SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)TRUE);
			}

			// Create the texture
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, Stripes, false, false, m_fmtCommon[uTextureFormat]);
            pDXTnTexture = (CTexture8*)CreateTexture(m_pDevice, 256, 256, fmtCompressed);
			break;
	}

	// Make sure we got valid texture pointers
	if (NULL == pTexture)
	{
		WriteToLog("CreateTexture() failed with HResult = %X.\n",GetLastError());
//		TestFinish(D3DTESTFINISH_ABORT);
	    ReleaseTexture(pDXTnTexture);
        pDXTnTexture = NULL;
		return false;
	}

	if (NULL == pDXTnTexture)
	{
		WriteToLog("CreateCompressedTexture(Video) failed with HResult = %X.\n",GetLastError());
//		TestFinish(D3DTESTFINISH_ABORT);
        ReleaseTexture(pTexture);
        pTexture = NULL;
		return false;
	}

#ifndef UNDER_XBOX
    hr = CopyTexture(pDXTnTexture, NULL, pTexture, NULL, D3DX_FILTER_POINT);
    if (FAILED(hr)) {
        Log(LOG_FAIL, TEXT("CopyTexture failed [0x%X]"), hr);
        ReleaseTexture(pTexture);
        pTexture = NULL;
        ReleaseTexture(pDXTnTexture);
        pDXTnTexture = NULL;
        return false;
    }
#else
    pTexture->GetLevelDesc(0, &d3dsdSrc);
    pDXTnTexture->GetLevelDesc(0, &d3dsdDst);

    pTexture->LockRect(0, &d3dlrSrc, NULL, 0);
    pDXTnTexture->LockRect(0, &d3dlrDst, NULL, 0);

    hr = XGCompressRect(d3dlrDst.pBits, d3dsdDst.Format, d3dlrDst.Pitch, d3dsdDst.Width, d3dsdDst.Height, 
                        d3dlrSrc.pBits, d3dsdSrc.Format, d3dlrSrc.Pitch, 0.5f, 
                        (d3dsdDst.Format == D3DFMT_DXT2 || d3dsdDst.Format == D3DFMT_DXT4) ? XGCOMPRESS_PREMULTIPLY : 0);

    pTexture->UnlockRect(0);
    pDXTnTexture->UnlockRect(0);

    if (FAILED(hr)) {
        Log(LOG_FAIL, TEXT("XGCompressRect failed [0x%X]"), hr);
        ReleaseTexture(pTexture);
        pTexture = NULL;
        ReleaseTexture(pDXTnTexture);
        pDXTnTexture = NULL;
        return false;
    }

    if (!SyncTexture(pDXTnTexture)) {
        ReleaseTexture(pTexture);
        pTexture = NULL;
        ReleaseTexture(pDXTnTexture);
        pDXTnTexture = NULL;
        return false;
    }
#endif

	// Tell the framework what texture to use
    SetTexture(0,pDXTnTexture);

    if (m_dwVersion <= 0x0700)
    {
    	sprintf(msgString, "%sTex:",msgString);
//        GetTexFmtDesc(&m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat,msgString+strlen(msgString),80-strlen(msgString));
    }
    else
#ifndef UNICODE
    	sprintf(msgString, "%sTex:%s",msgString,D3DFmtToString(m_fmtCommon[uTextureFormat]));
#else
    	sprintf(msgString, "%sTex:%S",msgString,D3DFmtToString(m_fmtCommon[uTextureFormat]));
#endif // UNICODE

	// Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}

#else

bool CCompressTest::ExecuteTest(UINT uTestNum)
{
	// Initialize some variables
	UINT uTextureFormat = (uTestNum-1) % m_uCommonTextureFormats;
	int nTest = ((uTestNum-1) / m_uCommonTextureFormats) + 1;
    POINT Pt = {0,0};
 	dwVertexCount = 0;
	msgString[0] = '\0';
	szStatus[0] = '\0';

	// Cleanup previous textures
	SetTexture(0, NULL);
    ReleaseTexture(pTexture);
    pTexture = NULL;
	ReleaseTexture(pDXTnTexture);
    pDXTnTexture = NULL;
	ReleaseTexture(pSysDXTnTexture);
    pSysDXTnTexture = NULL;

	// Cycle the texture formats
//	m_pMode->nTextureFormat = (uTestNum-1) % m_uCommonTextureFormats;

	// Let's build some triangles.
	switch (nTest)
	{
		case (1): // Use no Alpha Blending
			sprintf(msgString, "%sAlpha (Tex): Default",msgString);
			sprintf(szStatus, "%sAlpha (Tex): Default",szStatus);
			DrawBlendingGrid(255);

			// Create the texture
//		    pTexture = CreateTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),CDDS_TEXTURE_SYSTEM,pAlphaImage);
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, m_fmtCommon[uTextureFormat]);
//		    pDXTnTexture = CreateCompressedTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_VIDEO,NULL);
            pDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, fmtCompressed);

            if (0x0800 <= m_dwVersion)
//    		    pSysDXTnTexture = CreateCompressedTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_SYSTEM,NULL);
                pSysDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, fmtCompressed);
                
			break;
		case (2): // Use texture Alpha Blending
			sprintf(msgString, "%sAlpha (Tex): SrcAlpha/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Tex): SrcAlpha/InvSrcAlpha",szStatus);
			DrawBlendingGrid(255);

			// Make sure device supports the proper alpha blending modes
			if (!dwSrcAlphaCap || !dwInvSrcAlphaCap)
			{
				if (!dwSrcAlphaCap)
					WriteToLog("Device capability not supported: SrcBlend - SrcAlpha.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
//		    pTexture = CreateTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),CDDS_TEXTURE_SYSTEM,pAlphaImage);
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, m_fmtCommon[uTextureFormat]);
//		    pDXTnTexture = CreateCompressedTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_VIDEO,NULL);
            pDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, fmtCompressed);

            if (0x0800 <= m_dwVersion)
//    		    pSysDXTnTexture = CreateCompressedTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_SYSTEM,NULL);
                pSysDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, fmtCompressed);
                
			break;
		case (3): // Use mesh Alpha Blending
			sprintf(msgString, "%sAlpha (Mesh): SrcAlpha/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Mesh): SrcAlpha/InvSrcAlpha",szStatus);
			DrawBlendingGrid(0);

			// Make sure device supports the proper alpha blending modes
			if (!dwSrcAlphaCap || !dwInvSrcAlphaCap)
			{
				if (!dwSrcAlphaCap)
					WriteToLog("Device capability not supported: SrcBlend - SrcAlpha.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
//		    pTexture = CreateTexture(pImage->GetWidth(),pImage->GetHeight(),CDDS_TEXTURE_SYSTEM,pImage);
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, Stripes, false, false, m_fmtCommon[uTextureFormat]);
//		    pDXTnTexture = CreateCompressedTexture(pImage->GetWidth(),pImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_VIDEO,NULL);
            pDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, Stripes, false, false, fmtCompressed);

            if (0x0800 <= m_dwVersion)
//    		    pSysDXTnTexture = CreateCompressedTexture(pImage->GetWidth(),pImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_SYSTEM,NULL);
                pSysDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, Stripes, false, false, fmtCompressed);
                
			break;
		case (4): // Use mesh and texture Alpha Blending
			sprintf(msgString, "%sAlpha (Both): SrcAlpha/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Both): SrcAlpha/InvSrcAlpha",szStatus);
			DrawBlendingGrid(0);

			// Make sure device supports the proper alpha blending modes
			if (!dwSrcAlphaCap || !dwInvSrcAlphaCap)
			{
				if (!dwSrcAlphaCap)
					WriteToLog("Device capability not supported: SrcBlend - SrcAlpha.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
//		    pTexture = CreateTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),CDDS_TEXTURE_SYSTEM,pAlphaImage);
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, m_fmtCommon[uTextureFormat]);
//		    pDXTnTexture = CreateCompressedTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_VIDEO,NULL);
            pDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, fmtCompressed);

            if (0x0800 <= m_dwVersion)
//    		    pSysDXTnTexture = CreateCompressedTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_SYSTEM,NULL);
                pSysDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, fmtCompressed);
                
			break;
		case (5): // Use texture Alpha Blending
			sprintf(msgString, "%sAlpha (Tex 4x4): SrcAlpha/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Tex 4x4): SrcAlpha/InvSrcAlpha",szStatus);
			DrawBlendingGrid(255);

			// Make sure device supports the proper alpha blending modes
			if (!dwSrcAlphaCap || !dwInvSrcAlphaCap)
			{
				if (!dwSrcAlphaCap)
					WriteToLog("Device capability not supported: SrcBlend - SrcAlpha.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
//		    pTexture = CreateTexture(pTinyImage->GetWidth(),pTinyImage->GetHeight(),CDDS_TEXTURE_SYSTEM,pTinyImage);
            pTexture = CreateStripedTexture(m_pDevice, 4, 4, 4, White, false, false, m_fmtCommon[uTextureFormat]);
//		    pDXTnTexture = CreateCompressedTexture(pTinyImage->GetWidth(),pTinyImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_VIDEO,NULL);
            pDXTnTexture = CreateStripedTexture(m_pDevice, 4, 4, 4, White, false, false, fmtCompressed);

            if (0x0800 <= m_dwVersion)
//    		    pSysDXTnTexture = CreateCompressedTexture(pTinyImage->GetWidth(),pTinyImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_SYSTEM,NULL);
                pSysDXTnTexture = CreateStripedTexture(m_pDevice, 4, 4, 4, White, false, false, fmtCompressed);
                
			break;
		case (6): // Use texture Alpha Blending
			sprintf(msgString, "%sAlpha (Tex): One/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Tex): One/InvSrcAlpha",szStatus);
			DrawBlendingGrid(255);

			// Make sure device supports the proper alpha blending modes
			if (!dwOneCap || !dwInvSrcAlphaCap)
			{
				if (!dwOneCap)
					WriteToLog("Device capability not supported: SrcBlend - One.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_ONE);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
//		    pTexture = CreateTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),CDDS_TEXTURE_SYSTEM,pAlphaImage);
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, m_fmtCommon[uTextureFormat]);
//		    pDXTnTexture = CreateCompressedTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_VIDEO,NULL);
            pDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, fmtCompressed);

            if (0x0800 <= m_dwVersion)
//    		    pSysDXTnTexture = CreateCompressedTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_SYSTEM,NULL);
                pSysDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, fmtCompressed);
                
			break;
		case (7): // Use mesh Alpha Blending
			sprintf(msgString, "%sAlpha (Mesh): One/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Mesh): One/InvSrcAlpha",szStatus);
			DrawBlendingGrid(0);

			// Make sure device supports the proper alpha blending modes
			if (!dwOneCap || !dwInvSrcAlphaCap)
			{
				if (!dwOneCap)
					WriteToLog("Device capability not supported: SrcBlend - One.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_ONE);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
//		    pTexture = CreateTexture(pImage->GetWidth(),pImage->GetHeight(),CDDS_TEXTURE_SYSTEM,pImage);
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, Stripes, false, false, m_fmtCommon[uTextureFormat]);
//		    pDXTnTexture = CreateCompressedTexture(pImage->GetWidth(),pImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_VIDEO,NULL);
            pDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, Stripes, false, false, fmtCompressed);

            if (0x0800 <= m_dwVersion)
//    		    pSysDXTnTexture = CreateCompressedTexture(pImage->GetWidth(),pImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_SYSTEM,NULL);
                pSysDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, Stripes, false, false, fmtCompressed);
                
			break;
		case (8): // Use mesh and texture Alpha Blending
			sprintf(msgString, "%sAlpha (Both): One/InvSrcAlpha",msgString);
			sprintf(szStatus, "%sAlpha (Both): One/InvSrcAlpha",szStatus);
			DrawBlendingGrid(0);

			// Make sure device supports the proper alpha blending modes
			if (!dwOneCap || !dwInvSrcAlphaCap)
			{
				if (!dwSrcAlphaCap)
					WriteToLog("Device capability not supported: SrcBlend - One.\n");

				if (!dwInvSrcAlphaCap)
					WriteToLog("Device capability not supported: DestBlend - InvSrcAlpha.\n");

				SkipTests(m_uCommonTextureFormats);
				return false;
			}

			// Set the appropriate alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_ONE);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

			// Create the texture
//		    pTexture = CreateTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),CDDS_TEXTURE_SYSTEM,pAlphaImage);
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, m_fmtCommon[uTextureFormat]);
//		    pDXTnTexture = CreateCompressedTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_VIDEO,NULL);
            pDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, fmtCompressed);

            if (0x0800 <= m_dwVersion)
//    		    pSysDXTnTexture = CreateCompressedTexture(pAlphaImage->GetWidth(),pAlphaImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_SYSTEM,NULL);
                pSysDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, AlphaStripes, false, false, fmtCompressed);
                
			break;
		default:
			DrawBasicGrid(nTest-8,m_uCommonTextureFormats);

			// Set the default alpha blending renderstates
			SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE);
			SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_ONE);
			SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_ZERO);

			// Set the texture perspective renderstate
			if (nTest >= 15)
			{
				// Make sure device supports texture perspection
				if (!dwPerspectiveCap)
				{
					WriteToLog("Device capability not supported: Texture Perspective.\n");
					SkipTests(m_uCommonTextureFormats);
					return false;
				}

//				SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)TRUE);
			}

			// Create the texture
//		    pTexture = CreateTexture(pImage->GetWidth(),pImage->GetHeight(),CDDS_TEXTURE_SYSTEM,pImage);
            pTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, Stripes, false, false, m_fmtCommon[uTextureFormat]);
//		    pDXTnTexture = CreateCompressedTexture(pImage->GetWidth(),pImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_VIDEO,NULL);
            pDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, Stripes, false, false, fmtCompressed);

            if (0x0800 <= m_dwVersion)
//    		    pSysDXTnTexture = CreateCompressedTexture(pImage->GetWidth(),pImage->GetHeight(),dwFourCC,1,CDDS_TEXTURE_SYSTEM,NULL);
                pSysDXTnTexture = CreateStripedTexture(m_pDevice, 256, 256, 8, Stripes, false, false, fmtCompressed);
                
			break;
	}

	// Make sure we got valid texture pointers
	if (NULL == pTexture)
	{
		WriteToLog("CreateTexture() failed with HResult = %X.\n",GetLastError());
//		TestFinish(D3DTESTFINISH_ABORT);
	    ReleaseTexture(pDXTnTexture);
        pDXTnTexture = NULL;
	    ReleaseTexture(pSysDXTnTexture);
        pSysDXTnTexture = NULL;
		return false;
	}

	if (NULL == pDXTnTexture)
	{
		WriteToLog("CreateCompressedTexture(Video) failed with HResult = %X.\n",GetLastError());
//		TestFinish(D3DTESTFINISH_ABORT);
        ReleaseTexture(pTexture);
        pTexture = NULL;
	    ReleaseTexture(pSysDXTnTexture);
        pSysDXTnTexture = NULL;
		return false;
	}

    if ((0x0800 <= m_dwVersion) && (NULL == pSysDXTnTexture))
	{
		WriteToLog("CreateCompressedTexture(System) failed with HResult = %X.\n",GetLastError());
//		TestFinish(D3DTESTFINISH_ABORT);
        ReleaseTexture(pTexture);
        pTexture = NULL;
	    ReleaseTexture(pDXTnTexture);
        pDXTnTexture = NULL;
		return false;
	}
/*
    if (m_dwVersion <= 0x0700)
    {
	    // Blt from RGB source surface to DXTn source surface
	    if (!pDXTnTexture->m_pSrcSurface->Blt(pTexture->m_pSrcSurface,Pt))
	    {
		    WriteToLog("Source Blt() failed with HResult = %s.",GetHResultString(GetLastError()).c_str());
		    SkipTests(1);
		    return false;
	    }

	    if (NULL != m_pRefTarget)
	    {
    	    // Blt from RGB ref surface to DXTn ref surface
		    if (!pDXTnTexture->m_pRefSurface->Blt(pTexture->m_pRefSurface,Pt))
		    {
			    WriteToLog("Reference Blt() failed with HResult = %s.",GetHResultString(GetLastError()).c_str());
			    SkipTests(1);
			    return false;
		    }
	    }
    }
    else
    {
*/
	    // Load from RGB surface to DXTn surface
        if (!DXTnLoad8())
        {
//    		TestFinish(D3DTESTFINISH_ABORT);
            ReleaseTexture(pTexture);
            pTexture = NULL;
	        ReleaseTexture(pDXTnTexture);
            pDXTnTexture = NULL;
	        ReleaseTexture(pSysDXTnTexture);
            pSysDXTnTexture = NULL;
		    return false;
        }
//    }

	// Tell the framework what texture to use
    SetTexture(0,pDXTnTexture);

    if (m_dwVersion <= 0x0700)
    {
    	sprintf(msgString, "%sTex:",msgString);
//        GetTexFmtDesc(&m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat,msgString+strlen(msgString),80-strlen(msgString));
    }
    else
#ifndef UNICODE
    	sprintf(msgString, "%sTex:%s",msgString,D3DFmtToString(m_fmtCommon[uTextureFormat]));
#else
    	sprintf(msgString, "%sTex:%S",msgString,D3DFmtToString(m_fmtCommon[uTextureFormat]));
#endif // UNICODE

	// Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}

#endif

void CCompressTest::SceneRefresh()
{
	if (BeginScene())
	{
		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}

bool CCompressTest::ProcessFrame(void)
{
	char	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;
    bool	bResult;

     // Use the standard 15%
    bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how the compare went
    if (bResult)
    {
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
	}

	WriteStatus("$gTest Options$y",szStatus);
	WriteStatus("$gOverall Results",szBuffer);

    return bResult;
}

bool CCompressTest::TestTerminate()
{
	// Cleanup texture & image data
	SetTexture(0, NULL);
    ReleaseTexture(pTexture);
    pTexture = NULL;
	ReleaseTexture(pDXTnTexture);
    pDXTnTexture = NULL;
	ReleaseTexture(pSysDXTnTexture);
    pSysDXTnTexture = NULL;
//    RELEASE(pImage);
//	RELEASE(pAlphaImage);
//	RELEASE(pTinyImage);

	return true;
}

bool CCompressTest::CheckDXTnFormat(D3DFORMAT fmtDXTn)
{
/*
	bool	bFoundDXTn = false;

	// Request only the FourCC texture formats
	if (!RequestTextureFormats(PF_FOURCC))
		return false;

	for (int i=0; !bFoundDXTn && i < m_uCommonTextureFormats; i++)
	{
        // TODO: need to handle DX8 formats (m_pCommonTextureFormats[m_pMode->nTextureFormat].d3dfFormat)
		if (m_pCommonTextureFormats[i].ddpfPixelFormat.dwFourCC == dwDXTn)
			bFoundDXTn = true;
	}

	// Reset the texture format common list
	ResetTextureFormats();

	return bFoundDXTn;
*/
    return SUCCEEDED(CheckCurrentDeviceFormat(m_pDevice, 0, D3DRTYPE_TEXTURE, fmtDXTn));
}

//******************************************************************************
BOOL CCompressTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CCompressTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CCompressTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\compress\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=compress
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_comprs.lib

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_comprs.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\compress\exe\sources.inc ===
TARGETNAME=compress
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_comprs.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\CubeMap.h ===
//////////////////////////////////////////////////////////////////////
// Cubemap.h: interface for the CCubemap class.
//////////////////////////////////////////////////////////////////////

#ifndef __CUBEMAP_H__
#define __CUBEMAP_H__

//USETESTFRAME

struct TVertex {									// Cubemap vertex with 3D texture coords
	D3DVECTOR v;
	D3DVECTOR n;
	D3DVECTOR t;
};

struct TGVertex {									// Cubemap vertex without 3D texture coords
	D3DVECTOR v;
	D3DVECTOR n;
};

class CCubemap: public TESTFRAME(CD3DTest)
{
protected:
	UINT m_uTotalTests;
//	CMaterial *m_paMaterial;
	CCubeTexture8 *m_paTexture;
	CCubeTexture8 *m_paSysTexture;

	float m_flZDepthMin,							// Minimum Z depth for all tests
		m_flZDepthMax;								// Maximum Z depth for Mipmap test
	int m_dTextureWidthMax,							// Maximum texture width (top mipmap level)
		m_dTextureHeightMax;						// Maximum texture height (top mipmap level)

	TVertex *m_paVertex;							// Sphere vertices with texture vectors
	TGVertex *m_paTGVertex;							// Sphere vertices without texture vectors
	int m_cVertexMax;
    bool bTexGen;
    bool bVideo;
    bool bD3DManage;
    bool bManage;
    bool bLock;
    bool bBlt;
    bool bUpdate;
    bool bCopy;

    int nCubeFormat;

    UINT            m_uCommonCubeFormats;
    D3DFORMAT       m_fmtCommonCube[17];

    BOOL            m_bExit;

public:
	CCubemap();
	~CCubemap();

	virtual bool SetDefaultMatrices(void);
	virtual bool SetDefaultMaterials(void);
	virtual bool SetDefaultRenderStates(void);
	virtual UINT TestInitialize(void);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);
	virtual bool TestTerminate(void);

	bool LoadSphere();
    bool BltCubicTexture(void);
    bool LoadCubicTexture8(void);
    bool CheckMipCubeCap8(void);
    bool CheckCubeFilterCaps8(DWORD, DWORD, DWORD);

    virtual BOOL    AbortedExit(void);

protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

class CYawRotation: public CCubemap
// Turns 360 degrees around Y axis
{
protected:
	float m_flDegInc;								// Degree increase per test
//	CImageData *pImage[6];

	DWORD dwGradient[6][4];

public:
	CYawRotation();

//    virtual bool AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize);
	virtual void CommandLineHelp(void);
	virtual UINT TestInitialize(void);
	virtual bool ExecuteTest(UINT);
	virtual bool TestTerminate(void);
};

class CPitchRotation: public CCubemap
// Turns 360 degrees around X axis
{
protected:
	float m_flDegInc;								// Degree increase per test
//	CImageData *pImage[6];

	DWORD dwGradient[6][4];

public:
	CPitchRotation();

//    virtual bool AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize);
	virtual void CommandLineHelp(void);
	virtual UINT TestInitialize(void);
	virtual bool ExecuteTest(UINT);
	virtual bool TestTerminate(void);
};

class CMipmaps: public CCubemap
// Turns 360 degrees around X axis for each mipmap level
{
protected:
	float m_flDegInc;								// Degree increase per test
	int m_cLevelMax,								// Max levels to test
		m_cTestMax;									// Total tests
//	CImageData *pImage[5];

	D3DCOLOR		RedStripes[7];
	D3DCOLOR		GreenStripes[7];
	D3DCOLOR		BlueStripes[7];
	D3DCOLOR		YellowStripes[7];
	D3DCOLOR		MagentaStripes[7];

public:
	CMipmaps();

//    virtual bool AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize);
	virtual void CommandLineHelp(void);
	virtual UINT TestInitialize(void);
	virtual bool ExecuteTest(UINT);
	virtual bool TestTerminate(void);
};

class CTexGen: public CCubemap
// Texture generation cases
{
protected:
	float m_flDegInc;								// Degree increase per test
//	CImageData *pImage[6];

	DWORD dwGradient[6][4];

public:
	CTexGen();

	virtual void CommandLineHelp(void);
	virtual bool SetDefaultMatrices(void);
	virtual UINT TestInitialize(void);
	virtual bool ExecuteTest(UINT);
	virtual bool TestTerminate(void);
};

class CCubeFilter: public CCubemap
// Cubic Filtering cases
{
protected:
	float m_flDegInc;			// Degree increase per test
//    CImageData *pMinImage;
//	CImageData *pMagImage;
//	CImageData *pMipImage[3];
	char szStr[100];

	D3DCOLOR		RedStripes[8];
	D3DCOLOR		GreenStripes[8];
	D3DCOLOR		BlueStripes[8];
	D3DCOLOR		YellowStripes[8];
	D3DCOLOR		MagentaStripes[8];

public:
	CCubeFilter();

	virtual void CommandLineHelp(void);
	virtual UINT TestInitialize(void);
	virtual bool ExecuteTest(UINT);
	virtual bool TestTerminate(void);

    bool SetupFilterMode(int);
};

class CCubeBlend: public CCubemap
// Cubic Blending cases
{
protected:
//	CImageData *pImage;
//	CImageData *pAlphaImage;
	char szStr[100];

	D3DCOLOR		Stripes[8];
	D3DCOLOR		AlphaStripes[8];

public:
	CCubeBlend();

	virtual bool SetDefaultRenderStates(void);
	virtual UINT TestInitialize(void);
	virtual bool ExecuteTest(UINT);
	virtual bool TestTerminate(void);

    bool ApplyMaterial(int, bool);
    bool SetupBlendMode(int);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\Matrix.h ===
//////////////////////////////////////////////////////////////////////
// Matrix.h: interface for the CMatrix class.
//////////////////////////////////////////////////////////////////////

#define PI ((float)3.14159265358979)

class CMatrix  
{
public:
	CMatrix();
	virtual ~CMatrix();

	void Clear();
	void Identity();
	void RotatePitch(float Deg);
	void RotateYaw(float Deg);
	void RotateRoll(float Deg);
	void Translate(D3DVECTOR Position);

	D3DMATRIX m_Matrix;
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\Filter.cpp ===
//////////////////////////////////////////////////////////////////////
// Filter.cpp: implementation of the CCubeFilter class.
//////////////////////////////////////////////////////////////////////

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Cubemap.h"
#include "Matrix.h"

#define LEVELS      3										// Mipmap levels to create
#define NUM_TESTS   8

CCubeFilter::CCubeFilter()
{
	m_szTestName=TEXT("Cubic Filter");
	m_szCommandKey=TEXT("Filter");

	m_flDegInc=45.0f;									// Set degree increase per test
}

void CCubeFilter::CommandLineHelp()
{
//    WriteCommandLineHelp("$y-FILTERDEGINC #\t$wSets the pitch degree increment (default=45.0)");
}

UINT CCubeFilter::TestInitialize(void)
{
//	CImageLoader Image;
	UINT Result;
	char szBuffer[256];
    bool bFormats = true;

//	if (ReadString("FILTERDEGINC",szBuffer,false))
//		m_flDegInc=atof(szBuffer);

    // Setup the Test range
	SetTestRange(1, (int)((360.0f / m_flDegInc) * LEVELS * NUM_TESTS));

    // Check if cubemaps are available	
	Result = CCubemap::TestInitialize();					

	if (Result != D3DTESTINIT_RUN)			
		return Result;
 
    // Check if any cube formats were available
//	if (!bFormats) 
//    {
//		WriteToLog("No cubemap formats found.\n");
//		return D3DTESTINIT_SKIPALL;
//    }

    // Setup the colors for the RedStripes array
//	D3DCOLOR		RedStripes[8];

	RedStripes[0] = RGBA_MAKE(255,255,255,255);	// White
	RedStripes[1] = RGBA_MAKE(255,0,0,255);		// Red
	RedStripes[2] = RGBA_MAKE(255,255,255,255);	// White
	RedStripes[3] = RGBA_MAKE(255,0,0,255);		// Red
	RedStripes[4] = RGBA_MAKE(255,255,255,255);	// White
	RedStripes[5] = RGBA_MAKE(255,0,0,255);		// Red
	RedStripes[6] = RGBA_MAKE(255,255,255,255);	// White
	RedStripes[7] = RGBA_MAKE(255,0,0,255);		// Red

	// Setup the colors for the GreenStripes array
//	D3DCOLOR		GreenStripes[8];

	GreenStripes[0] = RGBA_MAKE(255,255,255,255);	// White
	GreenStripes[1] = RGBA_MAKE(0,255,0,255);		// Green
	GreenStripes[2] = RGBA_MAKE(255,255,255,255);	// White
	GreenStripes[3] = RGBA_MAKE(0,255,0,255);		// Green
	GreenStripes[4] = RGBA_MAKE(255,255,255,255);	// White
	GreenStripes[5] = RGBA_MAKE(0,255,0,255);		// Green
	GreenStripes[6] = RGBA_MAKE(255,255,255,255);	// White
	GreenStripes[7] = RGBA_MAKE(0,255,0,255);		// Green

	// Setup the colors for the BlueStripes array
//	D3DCOLOR		BlueStripes[8];

	BlueStripes[0] = RGBA_MAKE(255,255,255,255);// White
	BlueStripes[1] = RGBA_MAKE(0,0,255,255);	// Blue
	BlueStripes[2] = RGBA_MAKE(255,255,255,255);// White
	BlueStripes[3] = RGBA_MAKE(0,0,255,255);	// Blue
	BlueStripes[4] = RGBA_MAKE(255,255,255,255);// White
	BlueStripes[5] = RGBA_MAKE(0,0,255,255);	// Blue
	BlueStripes[6] = RGBA_MAKE(255,255,255,255);// White
	BlueStripes[7] = RGBA_MAKE(0,0,255,255);	// Blue

	// Setup the colors for the YellowStripes array
//	D3DCOLOR		YellowStripes[8];

	YellowStripes[0] = RGBA_MAKE(255,255,255,255);// White
	YellowStripes[1] = RGBA_MAKE(255,255,0,255);  // Yellow
	YellowStripes[2] = RGBA_MAKE(255,255,255,255);// White
	YellowStripes[3] = RGBA_MAKE(255,255,0,255);  // Yellow
	YellowStripes[4] = RGBA_MAKE(255,255,255,255);// White
	YellowStripes[5] = RGBA_MAKE(255,255,0,255);  // Yellow
	YellowStripes[6] = RGBA_MAKE(255,255,255,255);// White
	YellowStripes[7] = RGBA_MAKE(255,255,0,255);  // Yellow

	// Setup the colors for the MagentaStripes array
//	D3DCOLOR		MagentaStripes[8];

	MagentaStripes[0] = RGBA_MAKE(255,255,255,255);// White
	MagentaStripes[1] = RGBA_MAKE(255,0,255,255);  // Magenta
	MagentaStripes[2] = RGBA_MAKE(255,255,255,255);// White
	MagentaStripes[3] = RGBA_MAKE(255,0,255,255);  // Magenta
	MagentaStripes[4] = RGBA_MAKE(255,255,255,255);// White
	MagentaStripes[5] = RGBA_MAKE(255,0,255,255);  // Magenta
	MagentaStripes[6] = RGBA_MAKE(255,255,255,255);// White
	MagentaStripes[7] = RGBA_MAKE(255,0,255,255);  // Magenta

//    pMinImage = Image.LoadStripes(16,16,8,RedStripes,false);
//	pMagImage = Image.LoadStripes(m_dTextureWidthMax,m_dTextureHeightMax,8,GreenStripes,false);
//	pMipImage[0] = Image.LoadStripes(m_dTextureWidthMax/2,m_dTextureHeightMax/2,8,BlueStripes,false);
//	pMipImage[1] = Image.LoadStripes(m_dTextureWidthMax/4,m_dTextureHeightMax/4,8,YellowStripes,false);
//	pMipImage[2] = Image.LoadStripes(m_dTextureWidthMax/8,m_dTextureHeightMax/8,8,MagentaStripes,false);

	return Result;
}

bool CCubeFilter::ExecuteTest(UINT uTestNum)
{
	CMatrix Matrix;
	int iLevel;
	float flAngle,flZDist;
	int nTest = (uTestNum - 1) % (LEVELS * NUM_TESTS);
	int nGroup = (uTestNum - 1) / (LEVELS * NUM_TESTS);
    CTexture8* pd3dtTemp;
	szStr[0] = '\0';

	// Get the Level
	iLevel = (int)((float)nTest / (360.0f / m_flDegInc));

	// Get the Z distance of the current level
	flZDist = ((float)iLevel * LEVELS) + m_flZDepthMin;

	// Get the angle of the current test
	flAngle=m_flDegInc*(float)nTest;
	while (flAngle>=360.0f) { flAngle-=360.0f; }

	nCubeFormat = (uTestNum-1) % m_uCommonCubeFormats;

    // Cleanup previous texture
	SetTexture(0, NULL);
	ReleaseTexture(m_paTexture);
 	ReleaseTexture(m_paSysTexture);

    // If Dx8, check MipCube cap for mipmap cases
    if ((nGroup >= 4) && (m_dwVersion >= 0x800))
    {
        if (!CheckMipCubeCap8())
        {
            TestFinish(D3DTESTFINISH_SKIPREMAINDER);
	    	return false;
        }
    }

    // Setup the filter mode
    if (!SetupFilterMode(nGroup))
    {
        SkipTests((UINT)(360.0f / m_flDegInc) * LEVELS);
	    return false;
    }

	// Create the cubic environment mapping texture
    if (nGroup <= 3)
    {
        DWORD dwWidth, dwHeight;

        // Using Min image data
        if (nGroup <= 1)
        {
            dwWidth = 16;//pMinImage->GetWidth();
            dwHeight = 16;//pMinImage->GetHeight();
        }
        else    // Using Mag image data
        {
            dwWidth = m_dTextureWidthMax;//pMagImage->GetWidth();
            dwHeight = m_dTextureWidthMax;//pMagImage->GetHeight();
        }

/*
        if (bVideo)
    	    m_paTexture=CreateCubicTexture(dwWidth,dwHeight,1,CDDS_TEXTURE_VIDEO|CDDS_TEXTURE_ALLFACES);

        if (bManage)
    	    m_paTexture=CreateCubicTexture(dwWidth,dwHeight,1,CDDS_TEXTURE_MANAGE|CDDS_TEXTURE_ALLFACES);

        if (bD3DManage)
    	    m_paTexture=CreateCubicTexture(dwWidth,dwHeight,1,CDDS_TEXTURE_D3DMANAGE|CDDS_TEXTURE_ALLFACES);
*/

        m_paTexture = (CCubeTexture8*)CreateTexture(m_pDevice, dwWidth, dwHeight, m_fmtCommonCube[nCubeFormat], TTYPE_CUBEMAP);

    	sprintf(szStr,"%sTexSize: %dx%d, ",szStr,dwWidth,dwHeight);
    }
    else
    {
        // Using Mip image data
/*
        if (bVideo)
    	    m_paTexture=CreateCubicTexture(pMipImage[0]->GetWidth(),pMipImage[0]->GetHeight(),LEVELS,CDDS_TEXTURE_VIDEO|CDDS_TEXTURE_ALLFACES|CDDS_TEXTURE_MIPMAP);

        if (bManage)
    	    m_paTexture=CreateCubicTexture(pMipImage[0]->GetWidth(),pMipImage[0]->GetHeight(),LEVELS,CDDS_TEXTURE_MANAGE|CDDS_TEXTURE_ALLFACES|CDDS_TEXTURE_MIPMAP);

        if (bD3DManage)
    	    m_paTexture=CreateCubicTexture(pMipImage[0]->GetWidth(),pMipImage[0]->GetHeight(),LEVELS,CDDS_TEXTURE_D3DMANAGE|CDDS_TEXTURE_ALLFACES|CDDS_TEXTURE_MIPMAP);
*/
        m_paTexture = (CCubeTexture8*)CreateTexture(m_pDevice, m_dTextureWidthMax/2, m_dTextureHeightMax/2, m_fmtCommonCube[nCubeFormat], TTYPE_CUBEMAP | TTYPE_MIPLEVELS(LEVELS));

        sprintf(szStr,"%sMipTexSize: %dx%d, ",szStr,(m_dTextureWidthMax/2)>>iLevel,(m_dTextureHeightMax/2)>>iLevel);
    }

    if (m_paTexture==NULL) 
	{
		WriteToLog("CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
  		TestFinish(D3DTESTFINISH_ABORT);
        return false;
	}

/*
    if (m_dwVersion <= 0x0700)
    {
        if (bLock)
        {
            // Lock/Paint directly to vidmem method
	        for (int i=0;i<6;i++) 
            {
		        for (int j=0;j<m_paTexture->m_pSrcSurface->GetNumAttachedSurfaces();j++) 
                {
                    CDirectDrawSurface * pSurface = m_paTexture->m_pSrcSurface->GetCubicSurface(i)->GetAttachedSurface(j);

                    if (nGroup <= 1)
    			        pSurface->SetImageData(pMinImage);
                    else if (nGroup <= 3)
			            pSurface->SetImageData(pMagImage);
                    else
			            pSurface->SetImageData(pMipImage[j]);

                    RELEASE(pSurface);

           	        if (NULL != m_pRefTarget)
                    {
	    		        CDirectDrawSurface * pSurface = m_paTexture->m_pRefSurface->GetCubicSurface(i)->GetAttachedSurface(j);

                        if (nGroup <= 1)
    			            pSurface->SetImageData(pMinImage);
                        else if (nGroup <= 3)
			                pSurface->SetImageData(pMagImage);
                        else
			                pSurface->SetImageData(pMipImage[j]);

                        RELEASE(pSurface);
                    }
		        }
	        }
        }

        if (bBlt)
        {
            // Need a system copy of the texture in order to lock
            if (nGroup <= 1)
            {
                // Using Min image data
    	        m_paSysTexture=CreateCubicTexture(pMinImage->GetWidth(),pMinImage->GetHeight(),1,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);
            }
            else if (nGroup <= 3)
            {
                // Using Mag image data
    	        m_paSysTexture=CreateCubicTexture(pMagImage->GetWidth(),pMagImage->GetHeight(),1,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);
            }
            else
            {
                // Using Mip image data
	            m_paSysTexture=CreateCubicTexture(pMipImage[0]->GetWidth(),pMipImage[0]->GetHeight(),LEVELS,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES|CDDS_TEXTURE_MIPMAP);
            }

	        if (m_paSysTexture==NULL)
	        {
		        WriteToLog("Sys CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
    		    TestFinish(D3DTESTFINISH_ABORT);
                return false;
	        }

            // Load the image data onto the system copy of the cubemap
	        for (int i=0;i<6;i++) 
            {
		        for (int j=0;j<m_paSysTexture->m_pSrcSurface->GetNumAttachedSurfaces();j++) 
                {
                    CDirectDrawSurface * pSurface = m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->GetAttachedSurface(j);

                    if (nGroup <= 1)
    			        pSurface->SetImageData(pMinImage);
                    else if (nGroup <= 3)
			            pSurface->SetImageData(pMagImage);
                    else
			            pSurface->SetImageData(pMipImage[j]);

                    RELEASE(pSurface);

           	        if (NULL != m_pRefTarget)
                    {
	    		        CDirectDrawSurface * pSurface = m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->GetAttachedSurface(j);

                        if (nGroup <= 1)
    			            pSurface->SetImageData(pMinImage);
                        else if (nGroup <= 3)
			                pSurface->SetImageData(pMagImage);
                        else
			                pSurface->SetImageData(pMipImage[j]);

                        RELEASE(pSurface);
                    }
		        }
	        }

            // Blt cubemap from system surface to original surface
            if (!BltCubicTexture())
            {
    		    TestFinish(D3DTESTFINISH_ABORT);
                return false;
            }
        }
    }
    else // m_dwVersion >= 0x0800
    {
        // Need a system copy of the texture in order to lock
        if (nGroup <= 1)
        {
            // Using Min image data
    	    m_paSysTexture=CreateCubicTexture(pMinImage->GetWidth(),pMinImage->GetHeight(),1,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);
        }
        else if (nGroup <= 3)
        {
            // Using Mag image data
    	    m_paSysTexture=CreateCubicTexture(pMagImage->GetWidth(),pMagImage->GetHeight(),1,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);
        }
        else
        {
            // Using Mip image data
	        m_paSysTexture=CreateCubicTexture(pMipImage[0]->GetWidth(),pMipImage[0]->GetHeight(),LEVELS,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);
        }

	    if (m_paSysTexture==NULL)
	    {
		    WriteToLog("Sys CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
    		TestFinish(D3DTESTFINISH_ABORT);
            return false;
	    }

        // Load the image data onto the system copy of the cubemap
	    for (int i=0;i<6;i++) 
        {
		    for (int j=0;j<m_paSysTexture->m_pSrcSurface->GetNumAttachedSurfaces();j++) 
            {
                CDirectDrawSurface * pSurface = m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->GetAttachedSurface(j);

                if (nGroup <= 1)
    			    pSurface->SetImageData(pMinImage);
                else if (nGroup <= 3)
			        pSurface->SetImageData(pMagImage);
                else
			        pSurface->SetImageData(pMipImage[j]);

                RELEASE(pSurface);

           	    if (NULL != m_pRefTarget)
                {
	    		    CDirectDrawSurface * pSurface = m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->GetAttachedSurface(j);

                    if (nGroup <= 1)
    			        pSurface->SetImageData(pMinImage);
                    else if (nGroup <= 3)
			            pSurface->SetImageData(pMagImage);
                    else
			            pSurface->SetImageData(pMipImage[j]);

                    RELEASE(pSurface);
                }
		    }
	    }

        // Load cubemap from system surface to original surface
        if (!LoadCubicTexture8())
        {
    		TestFinish(D3DTESTFINISH_ABORT);
            return false;
        }
    }	
*/

    if (nGroup <= 3) {
        if (nGroup <= 1) {
            pd3dtTemp = CreateStripedTexture(m_pDevice, 16, 16, 8, RedStripes, false, false, m_fmtCommonCube[nCubeFormat]);
        }
        else {
            pd3dtTemp = CreateStripedTexture(m_pDevice, m_dTextureWidthMax, m_dTextureHeightMax, 8, GreenStripes, false, false, m_fmtCommonCube[nCubeFormat]);
        }
        if (!pd3dtTemp) {
            return false;
        }
        if (FAILED(CopyTexture(m_paTexture, NULL, pd3dtTemp, NULL, D3DX_FILTER_POINT))) {
            ReleaseTexture(pd3dtTemp);
            return false;
        }
        ReleaseTexture(pd3dtTemp);
    }
    else {

        CSurface8* pd3dsSrc, *pd3dsDst;
        UINT i, j;
        HRESULT hr;

        for (i = 0; i < 3; i++) {
            switch (i) {
                case 0:
                    pd3dtTemp = CreateStripedTexture(m_pDevice, m_dTextureWidthMax/2,m_dTextureHeightMax/2, 8, BlueStripes, false, false, m_fmtCommonCube[nCubeFormat]);
                    break;
                case 1:
                    pd3dtTemp = CreateStripedTexture(m_pDevice, m_dTextureWidthMax/4,m_dTextureHeightMax/4, 8, YellowStripes, false, false, m_fmtCommonCube[nCubeFormat]);
                    break;
                case 2:
                    pd3dtTemp = CreateStripedTexture(m_pDevice, m_dTextureWidthMax/8,m_dTextureHeightMax/8, 8, MagentaStripes, false, false, m_fmtCommonCube[nCubeFormat]);
                    break;
            }
            
            if (!pd3dtTemp) {
                return false;
            }

            hr = pd3dtTemp->GetSurfaceLevel(0, &pd3dsSrc);
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                ReleaseTexture(pd3dtTemp);
                return false;
            }

            for (j = 0; j < 6; j++) {

                hr = m_paTexture->GetCubeMapSurface((D3DCUBEMAP_FACES)j, i, &pd3dsDst);
                if (ResultFailed(hr, TEXT("IDirect3DCubeTexture8::GetCubeMapSurface"))) {
                    pd3dsSrc->Release();
                    ReleaseTexture(pd3dtTemp);
                    return false;
                }

                hr = D3DXLoadSurfaceFromSurface(pd3dsDst->GetIDirect3DSurface8(), NULL, NULL, pd3dsSrc->GetIDirect3DSurface8(), NULL, NULL, D3DX_FILTER_POINT, 0);

                pd3dsDst->Release();

                if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                    pd3dsSrc->Release();
                    ReleaseTexture(pd3dtTemp);
                    return false;
                }
            }

            pd3dsSrc->Release();
            ReleaseTexture(pd3dtTemp);

            if (!SyncTexture(m_paTexture)) {
                return false;
            }
        }
    }

	SetTexture(0,m_paTexture);

    Matrix.Identity();											// Load Identity matrix
	Matrix.Translate(cD3DVECTOR(0.0f,0.0f,flZDist));				// Translate sphere to min depth
	Matrix.RotatePitch(flAngle);								// Rotate
	if (!SetTransform(D3DTRANSFORMSTATE_WORLD,&Matrix.m_Matrix))// Set world matrix
	{
		WriteToLog("SetTransform(WorldMatrix) failed with HResult = %X.\n",GetLastError());
		TestFinish(D3DTESTFINISH_ABORT);
        return false;
	}

	// Tell the log that we are starting
	sprintf(szStr,"%sLevel %d, Pitch %.2f degrees",szStr,iLevel,flAngle);

	BeginTestCase(szStr);

	return true;
}

bool CCubeFilter::TestTerminate()
{
    CCubemap::TestTerminate();

    // Cleanup image data
//    RELEASE(pMinImage);
//    RELEASE(pMagImage);

//    for (int i=0;i<LEVELS;i++)
//        RELEASE(pMipImage[i]);

	return true;
}

bool CCubeFilter::SetupFilterMode(int nMode)
{
    switch (nMode)
    {
        case 0:
        case 2:
            if (!CheckCubeFilterCaps8(D3DPTFILTERCAPS_MINFLINEAR, 0, 0))       
            {
                WriteToLog("\nDevice capability not supported: %sTexture Filter MinFLinear.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            if (!CheckCubeFilterCaps8(0, D3DPTFILTERCAPS_MAGFPOINT, 0))       
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MagFPoint.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_LINEAR);
            SetTextureStageState(0,D3DTSS_MAGFILTER,(DWORD)TEXF_POINT);
            SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_NONE);
       	    sprintf(szStr,"%sFilter: LPN, ",szStr);
            break;
        case 1:
        case 3:
            if (!CheckCubeFilterCaps8(D3DPTFILTERCAPS_MINFPOINT, 0, 0))       
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MinFPoint.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            if (!CheckCubeFilterCaps8(0, D3DPTFILTERCAPS_MAGFLINEAR, 0))       
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MagFLinear.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_POINT);
            SetTextureStageState(0,D3DTSS_MAGFILTER,(DWORD)TEXF_LINEAR);
            SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_NONE);
        	sprintf(szStr,"%sFilter: PLN, ",szStr);
            break;
        case 4:
            if (!CheckCubeFilterCaps8(D3DPTFILTERCAPS_MINFPOINT, 0, 0)) 
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MinFPoint.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            if (!CheckCubeFilterCaps8(0, D3DPTFILTERCAPS_MAGFPOINT, 0))       
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MagFPoint.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            if (!CheckCubeFilterCaps8(0, 0, D3DPTFILTERCAPS_MIPFPOINT))       
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MipFPoint.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_POINT);
            SetTextureStageState(0,D3DTSS_MAGFILTER,(DWORD)TEXF_POINT);
            SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_POINT);
        	sprintf(szStr,"%sFilter: PPP, ",szStr);
            break;
        case 5:
            if (!CheckCubeFilterCaps8(D3DPTFILTERCAPS_MINFLINEAR, 0, 0)) 
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MinFLinear.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            if (!CheckCubeFilterCaps8(0, D3DPTFILTERCAPS_MAGFLINEAR, 0))       
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MagFLinear.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            if (!CheckCubeFilterCaps8(0, 0, D3DPTFILTERCAPS_MIPFPOINT))       
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MipFPoint.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_LINEAR);
            SetTextureStageState(0,D3DTSS_MAGFILTER,(DWORD)TEXF_LINEAR);
            SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_POINT);
        	sprintf(szStr,"%sFilter: LLP, ",szStr);
            break;
        case 6:
            if (!CheckCubeFilterCaps8(D3DPTFILTERCAPS_MINFPOINT, 0, 0)) 
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MinFPoint.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            if (!CheckCubeFilterCaps8(0, D3DPTFILTERCAPS_MAGFPOINT, 0))       
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MagFPoint.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            if (!CheckCubeFilterCaps8(0, 0, D3DPTFILTERCAPS_MIPFLINEAR))       
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MipFLinear.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_POINT);
            SetTextureStageState(0,D3DTSS_MAGFILTER,(DWORD)TEXF_POINT);
            SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_LINEAR);
        	sprintf(szStr,"%sFilter: PPL, ",szStr);
            break;
        case 7:
            if (!CheckCubeFilterCaps8(D3DPTFILTERCAPS_MINFLINEAR, 0, 0)) 
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MinFLinear.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            if (!CheckCubeFilterCaps8(0, D3DPTFILTERCAPS_MAGFLINEAR, 0))       
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MagFLinear.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            if (!CheckCubeFilterCaps8(0, 0, D3DPTFILTERCAPS_MIPFLINEAR))       
            {
	            WriteToLog("\nDevice capability not supported: %sTexture Filter MipFLinear.",(m_dwVersion >= 0x0800) ? "Cube " : "");
                return false;
            }

            SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_LINEAR);
            SetTextureStageState(0,D3DTSS_MAGFILTER,(DWORD)TEXF_LINEAR);
            SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_LINEAR);
        	sprintf(szStr,"%sFilter: LLL, ",szStr);
            break;
    }

    return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\CubeMap.cpp ===
////////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 1999.
//
// CCubemap.cpp
//
// CCubemap class - Conformance test for cubemap textures
//
// History: 12/20/98   Jeff Vezina   - Created
//
////////////////////////////////////////////////////////////////////////////////////////////
//
// Test Description:
//    Test consists of 3 parts.  First part rotates yaw by 10 degrees increments (default)
//    for each test.  Next part rotates pitch by 10 degrees increments (default) for each
//    test.  Final part creates a mipmapped cubemap and rotates pitch by 45 degrees
//    increments for 3 distances within each of the 3 mipmap levels.
//
////////////////////////////////////////////////////////////////////////////////////////////

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Cubemap.h"

// Sphere information
#define SPH_NUM 20
#define PI ((float)3.14159265358979)
#define D2R ((float)0.0174532925199433)
#define R2D ((float)57.2957795130823)
#define SPH_TRIS (2*(SPH_NUM*2)+(SPH_NUM-2)*(SPH_NUM*4))
#define SPH_VTXS (SPH_TRIS*3)
#define SPH_RADIUS (2.0f)

//CD3DWindowFramework TheApp;

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CCubemap*   pCubeTest;
    BOOL        bQuit = FALSE, bRet = TRUE;
    UINT        i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 6 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pCubeTest = new CYawRotation();
                break;
            case 1:
                pCubeTest = new CPitchRotation();
                break;
            case 2:
                pCubeTest = new CMipmaps();
                break;
            case 3:
                pCubeTest = new CTexGen();
                break;
            case 4:
                pCubeTest = new CCubeFilter();
                break;
            case 5:
                pCubeTest = new CCubeBlend();
                break;
        }

        if (!pCubeTest) {
            return FALSE;
        }

        // Initialize the scene
        if (!pCubeTest->Create(pDisplay)) {
            pCubeTest->Release();
            return FALSE;
        }

        bRet = pCubeTest->Exhibit(pnExitCode);

        bQuit = pCubeTest->AbortedExit();

        // Clean up the scene
        pCubeTest->Release();
    }

    return bRet;
}

CCubemap::CCubemap()
{
    D3DFORMAT fmt[] = {
        D3DFMT_A8R8G8B8,
        D3DFMT_X8R8G8B8,
        D3DFMT_R5G6B5,
        D3DFMT_A1R5G5B5,
        D3DFMT_X1R5G5B5,
        D3DFMT_A4R4G4B4,
//        D3DFMT_DXT1,
//        D3DFMT_DXT2,
//        D3DFMT_DXT3,
//        D3DFMT_DXT4,
//        D3DFMT_DXT5,
    };

//	m_paMaterial=NULL;
	m_paVertex=NULL;
	m_paTGVertex=NULL;
	m_paTexture=NULL;
	m_paSysTexture=NULL;
	m_cVertexMax=0;

	m_flZDepthMin=3.0f;				// Min distance for yaw/pitch rotation and first mipmap level
	m_flZDepthMax=15.0f;			// Max distance for last mipmap level

	m_dTextureWidthMax=256;			// Maximum texture width (top mipmap level)
	m_dTextureHeightMax=256;		// Maximum texture height (top mipmap level)

    bTexGen = false;

    bD3DManage = false;
    bManage = false;
    bBlt = false;
    bCopy = false;

    bVideo = true;
    bLock = true;
    bUpdate = true;

    // Disable textures
    m_ModeOptions.fTextures = false;

    // Enable cubemaps
    m_ModeOptions.fCubemaps = true;

    m_uCommonCubeFormats = countof(fmt);
    memcpy(m_fmtCommonCube, fmt, m_uCommonCubeFormats * sizeof(D3DFORMAT));

    m_bExit = FALSE;
}

CCubemap::~CCubemap()
{
}

bool CCubemap::SetDefaultMaterials(void)
{
	D3DMATERIAL8 Material;
    HRESULT      hr;

//	m_paMaterial=CreateMaterial();
//	if (m_paMaterial==NULL)
//	{
//		WriteToLog("CreateMaterial() failed with HResult = %X.\n",GetLastError());
//        return false;
//	}

	ZeroMemory(&Material,sizeof(D3DMATERIAL8));
//	Material.dwSize=sizeof(D3DMATERIAL);

    // No alpha
	Material.Diffuse.a=1.0f;

    // White 
    Material.Ambient.r=1.0f;
	Material.Ambient.g=1.0f;
	Material.Ambient.b=1.0f;

//	if (!m_paMaterial->SetMaterial(&Material))
//	{
//		WriteToLog("SetMaterial() failed with HResult = %X.\n",GetLastError());
//        return false;
//	}

    // Now that the material data has been set,
    // re-set the material so the changes get picked up.
//	if (!SetMaterial(m_paMaterial))
//	{
//		WriteToLog("SetMaterial() failed with HResult = %X.\n",GetLastError());
//        return false;
//	}

//	return true;

    hr = m_pDevice->SetMaterial(&Material);
    return (hr == D3D_OK);
}

bool CCubemap::SetDefaultRenderStates(void)
{
	SetRenderState(D3DRENDERSTATE_AMBIENT,(DWORD)0xFFFFFFFF);

    if (bTexGen)
        SetRenderState(D3DRENDERSTATE_NORMALIZENORMALS,(DWORD)TRUE);

	return true;
}

bool CCubemap::SetDefaultMatrices(void)
{
	D3DMATRIX Matrix;

#ifndef UNDER_XBOX
	Matrix=ProjectionMatrix(pi/2.0f,320.0f/280.0f,1.0f,50.0f);
#else
	Matrix=ProjectionMatrix(pi/2.0f,320.0f/280.0f,0.999f,50.0f);
#endif // UNDER_XBOX
	if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

	Matrix=IdentityMatrix();
	if (!SetTransform(D3DTRANSFORMSTATE_WORLD,&Matrix))
	{
		WriteToLog("SetTransform(WorldMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

	Matrix=IdentityMatrix();
	if (!SetTransform(D3DTRANSFORMSTATE_VIEW,&Matrix))
	{
		WriteToLog("SetTransform(ViewMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    if (bTexGen)
    {
	    Matrix=IdentityMatrix();
	    if (!SetTransform(D3DTRANSFORMSTATE_TEXTURE0,&Matrix))
	    {
		    WriteToLog("SetTransform(Texture0) failed with HResult = %X.\n",GetLastError());
            return false;
	    }
    }

	return true;
}

UINT CCubemap::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;
	UINT Result = D3DTESTINIT_RUN;

	// Make sure we are on at lease DX7
	if (m_dwVersion <= 0x0600)
	{
		WriteToLog("This test requires at least Dx7.\n");
		return D3DTESTINIT_SKIPALL;
	}

	// Check the caps we are interested in
	DWORD dwTextureCaps = m_d3dcaps.TextureCaps;
	DWORD dwMaxTextureWidth  = m_d3dcaps.MaxTextureWidth;
	DWORD dwMaxTextureHeight = m_d3dcaps.MaxTextureHeight;

	if (!(dwTextureCaps & D3DPTEXTURECAPS_CUBEMAP))
	{
		WriteToLog("Device capability not supported: Texture Cubemap.\n");
		return D3DTESTINIT_SKIPALL;
	}

	// Check max texture width & height caps
	if (dwMaxTextureWidth < (UINT)m_dTextureWidthMax)
	{
		WriteToLog("Texture width (%d) > MaxTextureWidth (%d)\n",m_dTextureWidthMax, dwMaxTextureWidth);
		Result = D3DTESTINIT_SKIPALL;
	}

	if (dwMaxTextureHeight < (UINT)m_dTextureHeightMax) 
	{
		WriteToLog("Texture height (%d) > MaxTextureHeight (%d)\n",m_dTextureHeightMax, dwMaxTextureHeight);
		Result = D3DTESTINIT_SKIPALL;
	}

    // Load sphere vertices
	if (!LoadSphere()) {
        return D3DTESTINIT_SKIPALL;
    }

    // Setup the "special" Pool variables
    if (KeySet("Manage"))
    {
        bD3DManage = false;
        bVideo = false;
        bManage = true;
    }

    if (KeySet("Video"))
    {
        bD3DManage = false;
        bVideo = true;
        bManage = false;
    }

    if (KeySet("D3DManage"))
    {
        bD3DManage = true;
        bManage = false;
        bVideo = false;
    }

    // Tell the log what we are going to do
#ifndef UNDER_XBOX
    if (bVideo)
        WriteToLog("Creation: Video\n");

    if (bManage)
        WriteToLog("Creation: Manage\n");

    if (bD3DManage)
        WriteToLog("Creation: D3DManage\n");
#else
        WriteToLog("Creation: UMA\n");
#endif // UNDER_XBOX

    // Setup the "special" loading variables
    if (m_dwVersion <= 0x0700)
    {
/*
        if (KeySet("Blt") || (m_pMode->dwTexLoad == TEXLOAD_COPY_RECTS))
        {
            bBlt = true;
            bLock = false;
        }

        if (KeySet("Lock") || (m_pMode->dwTexLoad == TEXLOAD_UPDATE_TEXTURE))
        {
            bBlt = false;
            bLock = true;
        }

        // Tell the log what we are going to use
        if (bBlt)
            WriteToLog("Loading: Blt\n");

        if (bLock)
            WriteToLog("Loading: Lock & Copy\n");
*/
    }
    else // m_dwVersion >= 0x0800
    {
/*
        if (KeySet("Copy") || (m_pMode->dwTexLoad == TEXLOAD_COPY_RECTS))
        {
            bUpdate = false;
            bCopy = true;
        }

        if (KeySet("Update") || (m_pMode->dwTexLoad == TEXLOAD_UPDATE_TEXTURE))
        {
            bUpdate = true;
            bCopy = false;
        }
*/
        if (rand() % 2) {
            bUpdate = false;
            bCopy = true;
        }
        else {
            bUpdate = true;
            bCopy = false;
        }

        // Tell the log what we are going to use
        if (bCopy)
            WriteToLog("Loading: CopyRects\n");

        if (bUpdate)
            WriteToLog("Loading: UpdateTexure\n");
    }

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	return Result;
}

void CCubemap::SceneRefresh()
{
	if (BeginScene()) 
    {
        if (bTexGen)
            RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_XYZ|D3DFVF_NORMAL,m_paTGVertex,m_cVertexMax,NULL,0,NULL);
        else     
            RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_XYZ|D3DFVF_NORMAL|D3DFVF_TEX1|D3DFVF_TEXCOORDSIZE3(0),m_paVertex,m_cVertexMax,NULL,0,NULL);

		EndScene();
	}
}

bool CCubemap::ProcessFrame(void)
{
	char	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;
    bool	bResult;

     // Use the standard 15%
    bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how the compare went
    if (bResult)
    {
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
	}

	WriteStatus("$gOverall Results",szBuffer);

    return bResult;
}

bool CCubemap::TestTerminate()
{
    // Cleanup vertex data
	if (m_paVertex!=NULL) 
		delete []m_paVertex;

    if (m_paTGVertex!=NULL)
		delete []m_paTGVertex;

    // Cleanup material
//	RELEASE(m_paMaterial);

	// Cleanup textures
	SetTexture(0, NULL);
    ReleaseTexture(m_paTexture);
	ReleaseTexture(m_paSysTexture);

    return true;
}

bool CCubemap::LoadSphere()
{
    int iSph = 0;
    FLOAT fDAngY = ((180.0F/(FLOAT)SPH_NUM)*D2R);
    FLOAT fDAngX = ((360.0F/(FLOAT)(SPH_NUM*2))*D2R);
    FLOAT fDAngY0 = fDAngY;
    FLOAT fDAngY1 = fDAngY0 + fDAngY;

	m_cVertexMax=SPH_VTXS;
    m_paVertex=new(TVertex[m_cVertexMax]);
    if (!m_paVertex) {
        return false;
    }

    if (bTexGen) {
	    m_paTGVertex=new(TGVertex[m_cVertexMax]);
        if (!m_paTGVertex) {
            delete [] m_paVertex;
            m_paVertex = NULL;
            return false;
        }
    }

    // make middle
    int x, y;
    for(y = 0; y < (SPH_NUM-2); y++) {
        FLOAT y0 = (FLOAT)cos(fDAngY0);
        FLOAT y1 = (FLOAT)cos(fDAngY1);
        FLOAT Rad0 = (FLOAT)sin(fDAngY0);
        FLOAT Rad1 = (FLOAT)sin(fDAngY1);

        for(x = 0; x < (SPH_NUM*2); x++) {
            FLOAT fDAngX0 = (FLOAT)x*fDAngX;
            FLOAT fDAngX1;
            if (x == (SPH_NUM*2-1))
                fDAngX1 = 0.0;
            else
                fDAngX1 = (FLOAT)(x+1)*fDAngX;

            FLOAT x00 = Rad0*(FLOAT)sin(fDAngX0);
            FLOAT x01 = Rad0*(FLOAT)sin(fDAngX1);
            FLOAT x10 = Rad1*(FLOAT)sin(fDAngX0);
            FLOAT x11 = Rad1*(FLOAT)sin(fDAngX1);

            FLOAT z00 = Rad0*(FLOAT)cos(fDAngX0);
            FLOAT z01 = Rad0*(FLOAT)cos(fDAngX1);
            FLOAT z10 = Rad1*(FLOAT)cos(fDAngX0);
            FLOAT z11 = Rad1*(FLOAT)cos(fDAngX1);

            m_paVertex[iSph].v.x = SPH_RADIUS*x00;  m_paVertex[iSph].v.y = SPH_RADIUS*y0;  m_paVertex[iSph].v.z = SPH_RADIUS*z00;
            m_paVertex[iSph].n.x = x00; m_paVertex[iSph].n.y = y0; m_paVertex[iSph].n.z = z00;
            iSph++;

            m_paVertex[iSph].v.x = SPH_RADIUS*x10;  m_paVertex[iSph].v.y = SPH_RADIUS*y1;  m_paVertex[iSph].v.z = SPH_RADIUS*z10;
            m_paVertex[iSph].n.x = x10; m_paVertex[iSph].n.y = y1; m_paVertex[iSph].n.z = z10;
            iSph++;

            m_paVertex[iSph].v.x = SPH_RADIUS*x11;  m_paVertex[iSph].v.y = SPH_RADIUS*y1;  m_paVertex[iSph].v.z = SPH_RADIUS*z11;
            m_paVertex[iSph].n.x = x11; m_paVertex[iSph].n.y = y1; m_paVertex[iSph].n.z = z11;
            iSph++;


            m_paVertex[iSph].v.x = SPH_RADIUS*x00;  m_paVertex[iSph].v.y = SPH_RADIUS*y0;  m_paVertex[iSph].v.z = SPH_RADIUS*z00;
            m_paVertex[iSph].n.x = x00; m_paVertex[iSph].n.y = y0; m_paVertex[iSph].n.z = z00;
            iSph++;

            m_paVertex[iSph].v.x = SPH_RADIUS*x11;  m_paVertex[iSph].v.y = SPH_RADIUS*y1;  m_paVertex[iSph].v.z = SPH_RADIUS*z11;
            m_paVertex[iSph].n.x = x11; m_paVertex[iSph].n.y = y1; m_paVertex[iSph].n.z = z11;
            iSph++;

            m_paVertex[iSph].v.x = SPH_RADIUS*x01;  m_paVertex[iSph].v.y = SPH_RADIUS*y0;  m_paVertex[iSph].v.z = SPH_RADIUS*z01;
            m_paVertex[iSph].n.x = x01; m_paVertex[iSph].n.y = y0; m_paVertex[iSph].n.z = z01;
            iSph++;

        }
        fDAngY0 = fDAngY1;
        fDAngY1 += fDAngY;
    }

    // make top
    fDAngY1 = fDAngY;
    FLOAT y1 = (FLOAT)cos(fDAngY1);
    FLOAT Rad1 = (FLOAT)sin(fDAngY1);
    for(x = 0; x < (SPH_NUM*2); x++) {
        FLOAT fDAngX0 = (FLOAT)x*fDAngX;
        FLOAT fDAngX1;
        if (x == (SPH_NUM*2-1))
            fDAngX1 = 0.0F;
        else
            fDAngX1 = (FLOAT)(x+1)*fDAngX;

        FLOAT x10 = Rad1*(FLOAT)sin(fDAngX0);
        FLOAT x11 = Rad1*(FLOAT)sin(fDAngX1);

        FLOAT z10 = Rad1*(FLOAT)cos(fDAngX0);
        FLOAT z11 = Rad1*(FLOAT)cos(fDAngX1);

        m_paVertex[iSph].v.x = 0.0;  m_paVertex[iSph].v.y = SPH_RADIUS;  m_paVertex[iSph].v.z = 0.0;
        m_paVertex[iSph].n.x = 0.0; m_paVertex[iSph].n.y = 1.0; m_paVertex[iSph].n.z = 0.0;
        iSph++;

        m_paVertex[iSph].v.x = SPH_RADIUS*x10;  m_paVertex[iSph].v.y = SPH_RADIUS*y1;  m_paVertex[iSph].v.z = SPH_RADIUS*z10;
        m_paVertex[iSph].n.x = x10; m_paVertex[iSph].n.y = y1; m_paVertex[iSph].n.z = z10;
        iSph++;

        m_paVertex[iSph].v.x = SPH_RADIUS*x11;  m_paVertex[iSph].v.y = SPH_RADIUS*y1;  m_paVertex[iSph].v.z = SPH_RADIUS*z11;
        m_paVertex[iSph].n.x = x11; m_paVertex[iSph].n.y = y1; m_paVertex[iSph].n.z = z11;
        iSph++;
    }

    // make bottom
    fDAngY1 = fDAngY0;          // remember last value used, so there are no cracks
    y1 = (FLOAT)cos(fDAngY1);
    Rad1 = (FLOAT)sin(fDAngY1);
    for(x = 0; x < (SPH_NUM*2); x++) {
        FLOAT fDAngX0 = (FLOAT)x*fDAngX;
        FLOAT fDAngX1;
        if (x == (SPH_NUM*2-1))
            fDAngX1 = 0.0F;
        else
            fDAngX1 = (FLOAT)(x+1)*fDAngX;

        // to keep the same orientation
        FLOAT x11 = Rad1*(FLOAT)sin(fDAngX0);
        FLOAT x10 = Rad1*(FLOAT)sin(fDAngX1);

        FLOAT z11 = Rad1*(FLOAT)cos(fDAngX0);
        FLOAT z10 = Rad1*(FLOAT)cos(fDAngX1);

        m_paVertex[iSph].v.x = 0.0;  m_paVertex[iSph].v.y = -SPH_RADIUS;  m_paVertex[iSph].v.z = 0.0;
        m_paVertex[iSph].n.x = 0.0; m_paVertex[iSph].n.y = -1.0; m_paVertex[iSph].n.z = 0.0;
        iSph++;

        m_paVertex[iSph].v.x = SPH_RADIUS*x10;  m_paVertex[iSph].v.y = SPH_RADIUS*y1;  m_paVertex[iSph].v.z = SPH_RADIUS*z10;
        m_paVertex[iSph].n.x = x10; m_paVertex[iSph].n.y = y1; m_paVertex[iSph].n.z = z10;
        iSph++;

        m_paVertex[iSph].v.x = SPH_RADIUS*x11;  m_paVertex[iSph].v.y = SPH_RADIUS*y1;  m_paVertex[iSph].v.z = SPH_RADIUS*z11;
        m_paVertex[iSph].n.x = x11; m_paVertex[iSph].n.y = y1; m_paVertex[iSph].n.z = z11;
        iSph++;
    }

    if (bTexGen)
    {
    	for (int i=0;i<m_cVertexMax;i++)
        {
	    	m_paTGVertex[i].v = m_paVertex[i].v;
	    	m_paTGVertex[i].n = m_paVertex[i].n;
        }
    }
    else
    {
    	for (int i=0;i<m_cVertexMax;i++)
	    	m_paVertex[i].t = m_paVertex[i].n;
    }

    return true;
}

//******************************************************************************
BOOL CCubemap::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CCubemap::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CCubemap::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\Blend.cpp ===
//////////////////////////////////////////////////////////////////////
// Blend.cpp: implementation of the CCubeBlend class.
//////////////////////////////////////////////////////////////////////

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Cubemap.h"
#include "Matrix.h"

#define MAX_ANGLES      6
#define MAX_MATERIALS   3
#define BLEND_MODES     5
    
CCubeBlend::CCubeBlend()
{
	m_szTestName=TEXT("Cubic Blend");
	m_szCommandKey=TEXT("Blend");
}

bool CCubeBlend::SetDefaultRenderStates(void)
{
	SetRenderState(D3DRENDERSTATE_AMBIENT,(DWORD)0xFFFFFFFF);

	// Set the appropriate alpha blending renderstates
	SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
	SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
	SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

    return true;
}

UINT CCubeBlend::TestInitialize(void)
{
//	CImageLoader Image, AlphaImage;
	UINT Result;
    bool bFormats = true;

	// Request all cube formats except bumpmap
//	if (!RequestCubeFormats(PF_RGB | PF_FOURCC | PF_LUMINANCE))
//		bFormats = false;

    // Setup the Test range
	SetTestRange(1, MAX_ANGLES * m_uCommonCubeFormats * MAX_MATERIALS * BLEND_MODES);

    // Check if cubemaps are available	
	Result = CCubemap::TestInitialize();					

	if (Result != D3DTESTINIT_RUN)			
		return Result;
 
    // Check if any cube formats were available
	if (!bFormats) 
    {
		WriteToLog("No cubemap formats found.\n");
		return D3DTESTINIT_SKIPALL;
    }

	// Setup the colors for the Stripes array
//	D3DCOLOR		Stripes[8];

	Stripes[0] = RGBA_MAKE(255,255,255,255);	// White
	Stripes[1] = RGBA_MAKE(255,0,0,255);		// Red
	Stripes[2] = RGBA_MAKE(0,255,0,255);		// Green
	Stripes[3] = RGBA_MAKE(0,0,255,255);		// Blue
	Stripes[4] = RGBA_MAKE(255,255,0,255);		// Yellow
	Stripes[5] = RGBA_MAKE(255,0,255,255);		// Magenta
	Stripes[6] = RGBA_MAKE(0,255,255,255);		// Cyan
	Stripes[7] = RGBA_MAKE(128,128,128,255);	// Grey

	// Create the Stripe image data
//    pImage = Image.LoadStripes(64,64,8,Stripes,false); 

    // Setup the colors for the AlphaStripes array
//	D3DCOLOR		AlphaStripes[8];

	AlphaStripes[0] = RGBA_MAKE(255,255,255,0);		// White
	AlphaStripes[1] = RGBA_MAKE(255,0,0,32);		// Red
	AlphaStripes[2] = RGBA_MAKE(0,255,0,64);		// Green
	AlphaStripes[3] = RGBA_MAKE(0,0,255,127);		// Blue
	AlphaStripes[4] = RGBA_MAKE(255,255,0,128);		// Yellow
	AlphaStripes[5] = RGBA_MAKE(255,0,255,192);		// Magenta
	AlphaStripes[6] = RGBA_MAKE(0,255,255,224);		// Cyan
	AlphaStripes[7] = RGBA_MAKE(128,128,128,255);	// Grey

	// Create the AlphaStripe image data
//    pAlphaImage = AlphaImage.LoadStripes(64,64,8,AlphaStripes,false); 

    return Result;
}

bool CCubeBlend::ExecuteTest(UINT uTestNum)
{
 	// Initialize some variables
	CMatrix Matrix;
//	CImageData *pTempImage;
	int nTest = (uTestNum-1) / m_uCommonCubeFormats;
    int nAngle = nTest % MAX_ANGLES;
	int nMaterial = nTest / MAX_ANGLES;
	int nBlendMode = nMaterial / MAX_MATERIALS;
    D3DCOLOR* pcStripes;
    CTexture8* pd3dtTemp;
	float flAngle = 135.0f * (float)nAngle;				// Get angle for current test
	while (flAngle>=360.0f) { flAngle-=360.0f; }
	szStr[0] = '\0';

	// Cleanup previous texture
	SetTexture(0, NULL);
	ReleaseTexture(m_paTexture);
    m_paTexture = NULL;
 	ReleaseTexture(m_paSysTexture);

	// Cycle the common cube formats
	nCubeFormat = (uTestNum-1) % m_uCommonCubeFormats;

    // Determine which image data to use
    if ((nMaterial % MAX_MATERIALS) == 0)
//        pTempImage = pAlphaImage;
        pcStripes = AlphaStripes;
    else
//        pTempImage = pImage;
        pcStripes = Stripes;

	// Create the cubic environment mapping texture
/*
    if (bVideo)
    	m_paTexture=CreateCubicTexture(pTempImage->GetWidth(),pTempImage->GetHeight(),1,CDDS_TEXTURE_VIDEO|CDDS_TEXTURE_ALLFACES);

    if (bManage)
    	m_paTexture=CreateCubicTexture(pTempImage->GetWidth(),pTempImage->GetHeight(),1,CDDS_TEXTURE_MANAGE|CDDS_TEXTURE_ALLFACES);

    if (bD3DManage)
    	m_paTexture=CreateCubicTexture(pTempImage->GetWidth(),pTempImage->GetHeight(),1,CDDS_TEXTURE_D3DMANAGE|CDDS_TEXTURE_ALLFACES);
*/
    pd3dtTemp = CreateStripedTexture(m_pDevice, 64, 64, 8, pcStripes, false, false, m_fmtCommonCube[nCubeFormat]);
    if (!pd3dtTemp) {
        return false;
    }

    m_paTexture = (CCubeTexture8*)CreateTexture(m_pDevice, 64, 64, m_fmtCommonCube[nCubeFormat], TTYPE_CUBEMAP);

	if (m_paTexture==NULL)
	{
		WriteToLog("CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
  		TestFinish(D3DTESTFINISH_ABORT);
        ReleaseTexture(pd3dtTemp);
        return false;
	}

    // Load the image data onto the texture
    if (FAILED(CopyTexture(m_paTexture, NULL, pd3dtTemp, NULL, D3DX_FILTER_POINT))) {
        ReleaseTexture(m_paTexture);
        m_paTexture = NULL;
        ReleaseTexture(pd3dtTemp);
        return false;
    }

    ReleaseTexture(pd3dtTemp);
/*
    if (m_dwVersion <= 0x0700)
    {
        if (bLock)
        {
            // Lock/Paint directly to vidmem method
	        for (int i=0;i<6;i++) 
            {
		        m_paTexture->m_pSrcSurface->GetCubicSurface(i)->SetImageData(pTempImage);

       	        if (NULL != m_pRefTarget)
	    	        m_paTexture->m_pRefSurface->GetCubicSurface(i)->SetImageData(pTempImage);
	        }
        }

        if (bBlt)
        {
    	    m_paSysTexture=CreateCubicTexture(pTempImage->GetWidth(),pTempImage->GetHeight(),1,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);

	        if (m_paSysTexture==NULL)
	        {
		        WriteToLog("Sys CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
    		    TestFinish(D3DTESTFINISH_ABORT);
                return false;
	        }

	        for (int i=0;i<6;i++) 
            {
		        m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->SetImageData(pTempImage);

       	        if (NULL != m_pRefTarget)
	    	        m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->SetImageData(pTempImage);
	        }

            // Blt cubemap from system surface to original surface
            if (!BltCubicTexture())
            {
    		    TestFinish(D3DTESTFINISH_ABORT);
                return false;
            }
        }
    }
    else // m_dwVersion >= 0x0800
    {
        // Need a system copy of the texture in order to lock
    	m_paSysTexture=CreateCubicTexture(pTempImage->GetWidth(),pTempImage->GetHeight(),1,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);

	    if (m_paSysTexture==NULL)
	    {
		    WriteToLog("Sys CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
    		TestFinish(D3DTESTFINISH_ABORT);
            return false;
	    }

	    for (int i=0;i<6;i++) 
        {
		    m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->SetImageData(pTempImage);

       	    if (NULL != m_pRefTarget)
	    	    m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->SetImageData(pTempImage);
	    }

        // Load cubemap from system surface to original surface
        if (!LoadCubicTexture8())
        {
    		TestFinish(D3DTESTFINISH_ABORT);
            return false;
        }
    }	
*/
	SetTexture(0,m_paTexture);

    if (!SetupBlendMode(nBlendMode))
    {
		SkipTests(MAX_ANGLES * m_uCommonCubeFormats * MAX_MATERIALS);
        return false;
    }

    if (!ApplyMaterial((nMaterial % MAX_MATERIALS), (nBlendMode == 4)))
    {
  		TestFinish(D3DTESTFINISH_ABORT);
        return false;
    }

    Matrix.Identity();											// Load Identity matrix
	Matrix.Translate(cD3DVECTOR(0.0f,0.0f,m_flZDepthMin));		// Translate sphere to min depth
	Matrix.RotatePitch(flAngle);									// Rotate
	if (!SetTransform(D3DTRANSFORMSTATE_WORLD,&Matrix.m_Matrix))// Set world matrix
	{
		WriteToLog("SetTransform(World) failed with HResult = %X.\n",GetLastError());
		TestFinish(D3DTESTFINISH_ABORT);
        return false;
	}

    // Tell the log that we are starting
    if (m_dwVersion <= 0x0700)
    {
	    sprintf(szStr,"%s%.2f degrees, Tex: ",szStr,flAngle);
//	    GetTexFmtDesc(&m_pCommonCubeFormats[m_pMode->nCubeFormat].ddpfPixelFormat,szStr+strlen(szStr),80-strlen(szStr));
    }
    else
#ifndef UNICODE
	    sprintf(szStr,"%s%.2f degrees, Tex: %s",szStr,flAngle,D3DFmtToString(m_fmtCommonCube[nCubeFormat]));
#else
	    sprintf(szStr,"%s%.2f degrees, Tex: %S",szStr,flAngle,D3DFmtToString(m_fmtCommonCube[nCubeFormat]));
#endif // UNICODE

	BeginTestCase(szStr);

	return true;
}

bool CCubeBlend::TestTerminate()
{
    CCubemap::TestTerminate();

	// Cleanup image data
//    RELEASE(pImage);
//    RELEASE(pAlphaImage);

	return true;
}

bool CCubeBlend::ApplyMaterial(int nMaterial, bool bBlack)
{
	D3DMATERIAL8 Material;
    HRESULT hr;

    // Release previous material
//	RELEASE(m_paMaterial);

//	m_paMaterial=CreateMaterial();
//	if (m_paMaterial==NULL)
//	{
//		WriteToLog("CreateMaterial() failed with HResult = %X.\n",GetLastError());
//        return false;
//	}

	ZeroMemory(&Material,sizeof(D3DMATERIAL8));
//	Material.dwSize=sizeof(D3DMATERIAL);

    switch (nMaterial)
    {
        case 0:
            {   // Black with alpha
                if (bBlack)
                {
                    Material.Diffuse.a=0.5f;
	                Material.Ambient.r=0.0f;
	                Material.Ambient.g=0.0f;
	                Material.Ambient.b=0.0f;
            	    sprintf(szStr,"%sBlack (alpha=0.5), ",szStr);
                }
                else // White with alpha
                {
                    Material.Diffuse.a=0.5f;
	                Material.Ambient.r=1.0f;
	                Material.Ambient.g=1.0f;
	                Material.Ambient.b=1.0f;
            	    sprintf(szStr,"%sWhite (alpha=0.5), ",szStr);
                }
            }
            break;
        case 1:
            {   // Black with no alpha
                if (bBlack)
                {
                    Material.Diffuse.a=1.0f;
	                Material.Ambient.r=0.0f;
	                Material.Ambient.g=0.0f;
	                Material.Ambient.b=0.0f;
            	    sprintf(szStr,"%sBlack (alpha=1.0), ",szStr);
                }
                else // White with no alpha
                {
                    Material.Diffuse.a=1.0f;
	                Material.Ambient.r=1.0f;
	                Material.Ambient.g=1.0f;
	                Material.Ambient.b=1.0f;
            	    sprintf(szStr,"%sWhite (alpha=1.0), ",szStr);
                }
            }
            break;
        case 2:
            {   // Red with no alpha
                Material.Diffuse.a=1.0f;
	            Material.Ambient.r=1.0f;
	            Material.Ambient.g=0.0f;
	            Material.Ambient.b=0.0f;
            	sprintf(szStr,"%sRed (alpha=1.0), ",szStr);
            }
            break;
    }

/*
	if (!m_paMaterial->SetMaterial(&Material))
	{
		WriteToLog("SetMaterial() failed with HResult = %X.\n",GetLastError());
        return false;
	}

	if (!SetMaterial(m_paMaterial))
	{
		WriteToLog("SetMaterial() failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
*/
    hr = m_pDevice->SetMaterial(&Material);
    return (hr == D3D_OK);
}

bool CCubeBlend::SetupBlendMode(int nMode)
{
    bool bResult = true;
    ARGBPIXELDESC pixd;

    GetARGBPixelDesc(m_fmtCommonCube[nCubeFormat], &pixd);

    switch (nMode)
    {
        case 0:
           	sprintf(szStr,"%sDecal, ",szStr);
            bResult = SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD)D3DTBLEND_DECAL);

            if (!bResult)
    		    WriteToLog("\nValidateDevice() failed: TextureOp SelectArg1.");

            break;
        case 1:
           	sprintf(szStr,"%sModulate, ",szStr);
            if (pixd.dwAMask) {
                bResult = SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD)D3DTBLEND_MODULATE_ALPHATEXTURE);
            }
            else {
                bResult = SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD)D3DTBLEND_MODULATE);
            }

            if (!bResult)
    		    WriteToLog("\nValidateDevice() failed: TextureOp Modulate.");

            break;
        case 2:
           	sprintf(szStr,"%sDecalAlpha, ",szStr);
            bResult = SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD)D3DTBLEND_DECALALPHA);

            if (!bResult)
    		    WriteToLog("\nValidateDevice() failed: TextureOp BlendTextureAlpha.");

            break;
        case 3:
           	sprintf(szStr,"%sModulateAlpha, ",szStr);
            bResult = SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD)D3DTBLEND_MODULATEALPHA);

            if (!bResult)
    		    WriteToLog("\nValidateDevice() failed: TextureOp Modulate.");

            break;
        case 4:
           	sprintf(szStr,"%sAdd, ",szStr);
            bResult = SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD)D3DTBLEND_ADD);

            if (!bResult)
    		    WriteToLog("\nValidateDevice() failed: TextureOp Add.");

            break;
    }

    return bResult;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\Matrix.cpp ===
//////////////////////////////////////////////////////////////////////
// Matrix.cpp: implementation of the CMatrix class.
//////////////////////////////////////////////////////////////////////

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Matrix.h"

CMatrix::CMatrix()
{
	Clear();
}

CMatrix::~CMatrix()
{
}

void CMatrix::Clear()
{
	ZeroMemory(&m_Matrix,sizeof(m_Matrix));
}

void CMatrix::Identity()
{
	Clear();
	m_Matrix._11=m_Matrix._22=m_Matrix._33=m_Matrix._44=1.0f;
}

void CMatrix::RotatePitch(float Deg)
{
	CMatrix RotateMatrix;

	RotateMatrix.Identity();
	RotateMatrix.m_Matrix._22=(float)cos((double)Deg*PI/180);
	RotateMatrix.m_Matrix._23=(float)sin((double)Deg*PI/180);
	RotateMatrix.m_Matrix._32=(float)-sin((double)Deg*PI/180);
	RotateMatrix.m_Matrix._33=(float)cos((double)Deg*PI/180);

	m_Matrix=(D3DMATRIX)((D3DXMATRIX)(RotateMatrix.m_Matrix)*(D3DXMATRIX)m_Matrix);
}

void CMatrix::RotateYaw(float Deg)
{
	CMatrix RotateMatrix;

	RotateMatrix.Identity();
	RotateMatrix.m_Matrix._11=(float)cos((double)Deg*PI/180);
	RotateMatrix.m_Matrix._13=(float)-sin((double)Deg*PI/180);
	RotateMatrix.m_Matrix._31=(float)sin((double)Deg*PI/180);
	RotateMatrix.m_Matrix._33=(float)cos((double)Deg*PI/180);

	m_Matrix=(D3DMATRIX)((D3DXMATRIX)(RotateMatrix.m_Matrix)*(D3DXMATRIX)m_Matrix);
}

void CMatrix::RotateRoll(float Deg)
{
	CMatrix RotateMatrix;

	RotateMatrix.Identity();
	RotateMatrix.m_Matrix._11=(float)cos((double)Deg*PI/180);
	RotateMatrix.m_Matrix._12=(float)sin((double)Deg*PI/180);
	RotateMatrix.m_Matrix._21=(float)-sin((double)Deg*PI/180);
	RotateMatrix.m_Matrix._22=(float)cos((double)Deg*PI/180);

	m_Matrix=(D3DMATRIX)((D3DXMATRIX)(RotateMatrix.m_Matrix)*(D3DXMATRIX)m_Matrix);
}

void CMatrix::Translate(D3DVECTOR Position)
{
	CMatrix TranslateMatrix;

	TranslateMatrix.Identity();
	TranslateMatrix.m_Matrix._41=Position.x;
	TranslateMatrix.m_Matrix._42=Position.y;
	TranslateMatrix.m_Matrix._43=Position.z;

	m_Matrix=(D3DMATRIX)((D3DXMATRIX)(TranslateMatrix.m_Matrix)*(D3DXMATRIX)m_Matrix);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\Mipmaps.cpp ===
//////////////////////////////////////////////////////////////////////
// Mipmaps.cpp: implementation of the CMipmaps class.
//////////////////////////////////////////////////////////////////////

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Cubemap.h"
#include "Matrix.h"
#define MIPMAP_LEVELS 5										// Mipmap levels to create

CMipmaps::CMipmaps()
{
	m_szTestName=TEXT("Cubic Mipmaps");
	m_szCommandKey=TEXT("Mipmaps");

	m_cTestMax=0;
	m_cLevelMax=0;
	m_flDegInc=45.0f;									// Set degree increase per test
}

/*
bool CMipmaps::AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize)
{
	// Test both texture loading methods
    if (IsConformance())
    {
        // Use CopyRects
        pMode->D3DMode.dwTexLoad = TEXLOAD_COPY_RECTS;
		CD3DTest::AddModeList(pMode,pData,dwDataSize);

        // Use UpdateTexture
        pMode->D3DMode.dwTexLoad = TEXLOAD_UPDATE_TEXTURE;
		CD3DTest::AddModeList(pMode,pData,dwDataSize);
    }
    else
    {
		// Let the framework handle stress mode
		CD3DTest::AddModeList(pMode,pData,dwDataSize);
	}

    return true;
}
*/

void CMipmaps::CommandLineHelp()
{
//    WriteCommandLineHelp("$y-MIPMAPDEGINC #\t$wSets the pitch degree increment (default=45.0)");
//    WriteCommandLineHelp("$y-MIPMAPLEVELS #\t$wSets the # of distances to test per mipmap level (default=1)");
}

UINT CMipmaps::TestInitialize(void)
{
//	CImageLoader Image;
	UINT Result;
	char szBuffer[256];
	int nLevels;
    bool bFormats = true;

//	if (ReadString("MIPMAPDEGINC",szBuffer,false))
//		m_flDegInc=atof(szBuffer);

	ReadInteger("MIPMAPLEVELS",1,&nLevels);
	if (nLevels<1)
		nLevels=1;

	// Request all cube formats except bumpmap
//	if (!RequestCubeFormats(PF_RGB | PF_FOURCC | PF_LUMINANCE))
//		bFormats = false;

    // Setup the Test range
	m_cLevelMax=nLevels * MIPMAP_LEVELS + 1;			// Total mipmap levels to test
	m_cTestMax=(int)(360.0f/m_flDegInc)*m_cLevelMax;	// Total tests
	SetTestRange(1, m_cTestMax * m_uCommonCubeFormats);

    // Check if cubemaps are available	
	Result = CCubemap::TestInitialize();					

	if (Result != D3DTESTINIT_RUN)			
		return Result;
 
    // On Dx8, check for MipCubeMap cap
    if (m_dwVersion >= 0x800)
    {
        if (!CheckMipCubeCap8())
    		return D3DTESTINIT_SKIPALL;
    }
    
    // Check if any cube formats were available
	if (!bFormats) 
    {
		WriteToLog("No cubemap formats found.\n");
		return D3DTESTINIT_SKIPALL;
    }

	// Setup the colors for the RedStripes array
//	D3DCOLOR		RedStripes[7];

	RedStripes[0] = RGBA_MAKE(255,0,0,255);		// Red
	RedStripes[1] = RGBA_MAKE(255,255,255,255);	// White
	RedStripes[2] = RGBA_MAKE(255,0,0,255);		// Red
	RedStripes[3] = RGBA_MAKE(255,0,0,255);		// Red
	RedStripes[4] = RGBA_MAKE(255,0,0,255);		// Red
	RedStripes[5] = RGBA_MAKE(255,255,255,255);	// White
	RedStripes[6] = RGBA_MAKE(255,0,0,255);		// Red

	// Setup the colors for the GreenStripes array
//	D3DCOLOR		GreenStripes[7];

	GreenStripes[0] = RGBA_MAKE(0,255,0,255);		// Green
	GreenStripes[1] = RGBA_MAKE(255,255,255,255);	// White
	GreenStripes[2] = RGBA_MAKE(0,255,0,255);		// Green
	GreenStripes[3] = RGBA_MAKE(0,255,0,255);		// Green
	GreenStripes[4] = RGBA_MAKE(0,255,0,255);		// Green
	GreenStripes[5] = RGBA_MAKE(255,255,255,255);	// White
	GreenStripes[6] = RGBA_MAKE(0,255,0,255);		// Green

	// Setup the colors for the BlueStripes array
//	D3DCOLOR		BlueStripes[7];

	BlueStripes[0] = RGBA_MAKE(0,0,255,255);	// Blue
	BlueStripes[1] = RGBA_MAKE(255,255,255,255);// White
	BlueStripes[2] = RGBA_MAKE(0,0,255,255);	// Blue
	BlueStripes[3] = RGBA_MAKE(0,0,255,255);	// Blue
	BlueStripes[4] = RGBA_MAKE(0,0,255,255);	// Blue
	BlueStripes[5] = RGBA_MAKE(255,255,255,255);// White
	BlueStripes[6] = RGBA_MAKE(0,0,255,255);	// Blue

	// Setup the colors for the YellowStripes array
//	D3DCOLOR		YellowStripes[7];

	YellowStripes[0] = RGBA_MAKE(255,255,0,255);  // Yellow
	YellowStripes[1] = RGBA_MAKE(255,255,255,255);// White
	YellowStripes[2] = RGBA_MAKE(255,255,0,255);  // Yellow
	YellowStripes[3] = RGBA_MAKE(255,255,0,255);  // Yellow
	YellowStripes[4] = RGBA_MAKE(255,255,0,255);  // Yellow
	YellowStripes[5] = RGBA_MAKE(255,255,255,255);// White
	YellowStripes[6] = RGBA_MAKE(255,255,0,255);  // Yellow

	// Setup the colors for the MagentaStripes array
//	D3DCOLOR		MagentaStripes[7];

	MagentaStripes[0] = RGBA_MAKE(255,0,255,255);  // Magenta
	MagentaStripes[1] = RGBA_MAKE(255,255,255,255);// White
	MagentaStripes[2] = RGBA_MAKE(255,0,255,255);  // Magenta
	MagentaStripes[3] = RGBA_MAKE(255,0,255,255);  // Magenta
	MagentaStripes[4] = RGBA_MAKE(255,0,255,255);  // Magenta
	MagentaStripes[5] = RGBA_MAKE(255,255,255,255);// White
	MagentaStripes[6] = RGBA_MAKE(255,0,255,255);  // Magenta

//    pImage[0]=Image.LoadStripes(m_dTextureWidthMax,m_dTextureHeightMax,7,RedStripes,false);
//	pImage[1]=Image.LoadStripes(m_dTextureWidthMax/2,m_dTextureHeightMax/2,7,GreenStripes,false);
//	pImage[2]=Image.LoadStripes(m_dTextureWidthMax/4,m_dTextureHeightMax/4,7,BlueStripes,false);
//	pImage[3]=Image.LoadStripes(m_dTextureWidthMax/8,m_dTextureHeightMax/8,7,YellowStripes,false);
//	pImage[4]=Image.LoadStripes(m_dTextureWidthMax/16,m_dTextureHeightMax/16,7,MagentaStripes,false);

	return Result;
}

bool CMipmaps::ExecuteTest(UINT uTestNum)
{
	char szStr[100];
	CMatrix Matrix;
	int iLevel;
	float flAngle,flZDist;
	int nTest = (uTestNum-1) / m_uCommonCubeFormats;
    int nCubeFormat;
    CTexture8* pd3dtTemp;
    CSurface8* pd3dsSrc, *pd3dsDst;
    UINT i, j;
    HRESULT hr;
	szStr[0] = '\0';

	// Get the Level
	iLevel=(int)((float)nTest/(float)m_cTestMax*(float)m_cLevelMax);

	// Get the Z distance of the current level
	flZDist=((float)iLevel*(m_flZDepthMax-m_flZDepthMin)/(float)(m_cLevelMax-1))+m_flZDepthMin;

	// Get the angle of the current test
	flAngle=m_flDegInc*(float)nTest;
	while (flAngle>=360.0f) { flAngle-=360.0f; }

    // Cleanup previous texture
	SetTexture(0, NULL);
	ReleaseTexture(m_paTexture);
 	ReleaseTexture(m_paSysTexture);

	// Cycle the common cube formats
	nCubeFormat = (uTestNum-1) % m_uCommonCubeFormats;

	// Create the cubic environment mapping texture
/*
    if (bVideo)
    	m_paTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,MIPMAP_LEVELS,CDDS_TEXTURE_VIDEO|CDDS_TEXTURE_ALLFACES|CDDS_TEXTURE_MIPMAP);
    
    if (bManage)
    	m_paTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,MIPMAP_LEVELS,CDDS_TEXTURE_MANAGE|CDDS_TEXTURE_ALLFACES|CDDS_TEXTURE_MIPMAP);
    
    if (bD3DManage)
    	m_paTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,MIPMAP_LEVELS,CDDS_TEXTURE_D3DMANAGE|CDDS_TEXTURE_ALLFACES|CDDS_TEXTURE_MIPMAP);
*/

    m_paTexture = (CCubeTexture8*)CreateTexture(m_pDevice, m_dTextureWidthMax,m_dTextureHeightMax, m_fmtCommonCube[nCubeFormat], TTYPE_CUBEMAP | TTYPE_MIPLEVELS(MIPMAP_LEVELS));

    if (m_paTexture==NULL) 
	{
		WriteToLog("CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
  		TestFinish(D3DTESTFINISH_ABORT);
        return false;
	}
/*
    if (m_dwVersion <= 0x0700)
    {
        if (bLock)
        {
            // Lock/Paint directly to vidmem method
	        for (int i=0;i<6;i++) 
            {
		        for (int j=0;j<m_paTexture->m_pSrcSurface->GetNumAttachedSurfaces();j++) 
                {
                    CDirectDrawSurface * pSurface = m_paTexture->m_pSrcSurface->GetCubicSurface(i)->GetAttachedSurface(j);
			        pSurface->SetImageData(pImage[j]);
                    RELEASE(pSurface);

           	        if (NULL != m_pRefTarget)
                    {
	    		        CDirectDrawSurface * pSurface = m_paTexture->m_pRefSurface->GetCubicSurface(i)->GetAttachedSurface(j);
                        pSurface->SetImageData(pImage[j]);
                        RELEASE(pSurface);
                    }
		        }
	        }
        }

        if (bBlt)
        {
    	    m_paSysTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,MIPMAP_LEVELS,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES|CDDS_TEXTURE_MIPMAP);

	        if (m_paSysTexture==NULL)
	        {
		        WriteToLog("Sys CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
    		    TestFinish(D3DTESTFINISH_ABORT);
                return false;
	        }

	        for (int i=0;i<6;i++) 
            {
		        for (int j=0;j<m_paSysTexture->m_pSrcSurface->GetNumAttachedSurfaces();j++) 
                {
                    CDirectDrawSurface * pSurface = m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->GetAttachedSurface(j);
			        pSurface->SetImageData(pImage[j]);
                    RELEASE(pSurface);

           	        if (NULL != m_pRefTarget)
                    {
	    		        CDirectDrawSurface * pSurface = m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->GetAttachedSurface(j);
                        pSurface->SetImageData(pImage[j]);
                        RELEASE(pSurface);
                    }
		        }
	        }

            // Blt cubemap from system surface to original surface
            if (!BltCubicTexture())
            {
    		    TestFinish(D3DTESTFINISH_ABORT);
                return false;
            }
        }
    }
    else // m_dwVersion >= 0x0800
    {
        // Need a system copy of the texture in order to lock
    	m_paSysTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,MIPMAP_LEVELS,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);

	    if (m_paSysTexture==NULL)
	    {
		    WriteToLog("Sys CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
    		TestFinish(D3DTESTFINISH_ABORT);
            return false;
	    }

        // Load the image data onto the system copy of the cubemap
	    for (int i=0;i<6;i++) 
        {
		    for (int j=0;j<m_paSysTexture->m_pSrcSurface->GetNumAttachedSurfaces();j++) 
            {
                CDirectDrawSurface * pSurface = m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->GetAttachedSurface(j);
			    pSurface->SetImageData(pImage[j]);
                RELEASE(pSurface);

           	    if (NULL != m_pRefTarget)
                {
	    		    CDirectDrawSurface * pSurface = m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->GetAttachedSurface(j);
                    pSurface->SetImageData(pImage[j]);
                    RELEASE(pSurface);
                }
		    }
	    }

        // Load cubemap from system surface to original surface
        if (!LoadCubicTexture8())
        {
    		TestFinish(D3DTESTFINISH_ABORT);
            return false;
        }
    }	
*/

    for (i = 0; i < MIPMAP_LEVELS; i++) {

        switch (i) {
            case 0:
                pd3dtTemp = CreateStripedTexture(m_pDevice, m_dTextureWidthMax,m_dTextureHeightMax, 7, RedStripes, false, false, m_fmtCommonCube[nCubeFormat]);
                break;
            case 1:
                pd3dtTemp = CreateStripedTexture(m_pDevice, m_dTextureWidthMax/2,m_dTextureHeightMax/2,7,GreenStripes, false, false, m_fmtCommonCube[nCubeFormat]);
                break;
            case 2:
                pd3dtTemp = CreateStripedTexture(m_pDevice, m_dTextureWidthMax/4,m_dTextureHeightMax/4,7,BlueStripes, false, false, m_fmtCommonCube[nCubeFormat]);
                break;
            case 3:
                pd3dtTemp = CreateStripedTexture(m_pDevice, m_dTextureWidthMax/8,m_dTextureHeightMax/8,7,YellowStripes, false, false, m_fmtCommonCube[nCubeFormat]);
                break;
            case 4:
                pd3dtTemp = CreateStripedTexture(m_pDevice, m_dTextureWidthMax/16,m_dTextureHeightMax/16,7,MagentaStripes, false, false, m_fmtCommonCube[nCubeFormat]);
                break;
        }
        
        if (!pd3dtTemp) {
            return false;
        }

        hr = pd3dtTemp->GetSurfaceLevel(0, &pd3dsSrc);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
            ReleaseTexture(pd3dtTemp);
            return false;
        }

        for (j = 0; j < 6; j++) {

            hr = m_paTexture->GetCubeMapSurface((D3DCUBEMAP_FACES)j, i, &pd3dsDst);
            if (ResultFailed(hr, TEXT("IDirect3DCubeTexture8::GetCubeMapSurface"))) {
                pd3dsSrc->Release();
                ReleaseTexture(pd3dtTemp);
                return false;
            }

            hr = D3DXLoadSurfaceFromSurface(pd3dsDst->GetIDirect3DSurface8(), NULL, NULL, pd3dsSrc->GetIDirect3DSurface8(), NULL, NULL, D3DX_FILTER_POINT, 0);

            pd3dsDst->Release();

            if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                pd3dsSrc->Release();
                ReleaseTexture(pd3dtTemp);
                return false;
            }
        }

        pd3dsSrc->Release();
        ReleaseTexture(pd3dtTemp);

        if (!SyncTexture(m_paTexture)) {
            return false;
        }
    }

	SetTexture(0,m_paTexture);
    SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_LINEAR);

    Matrix.Identity();											// Load Identity matrix
	Matrix.Translate(cD3DVECTOR(0.0f,0.0f,flZDist));				// Translate sphere to min depth
	Matrix.RotatePitch(flAngle);								// Rotate
	if (!SetTransform(D3DTRANSFORMSTATE_WORLD,&Matrix.m_Matrix))// Set world matrix
	{
		WriteToLog("SetTransform(WorldMatrix) failed with HResult = %X.\n",GetLastError());
		TestFinish(D3DTESTFINISH_ABORT);
        return false;
	}

	// Tell the log that we are starting
    if (m_dwVersion <= 0x0700)
    {
    	sprintf(szStr,"%sLevel %d, Pitch %.2f degrees, Tex: ",szStr,iLevel,flAngle);
//	    GetTexFmtDesc(&m_pCommonCubeFormats[m_pMode->nCubeFormat].ddpfPixelFormat,szStr+strlen(szStr),80-strlen(szStr));
    }
    else
#ifndef UNICODE
	    sprintf(szStr,"%sLevel %d, Pitch %.2f degrees, Tex: %s",szStr,iLevel,flAngle,D3DFmtToString(m_fmtCommonCube[nCubeFormat]));
#else
	    sprintf(szStr,"%sLevel %d, Pitch %.2f degrees, Tex: %S",szStr,iLevel,flAngle,D3DFmtToString(m_fmtCommonCube[nCubeFormat]));
#endif // UNICODE

	BeginTestCase(szStr);

	return true;
}

bool CMipmaps::TestTerminate()
{
    CCubemap::TestTerminate();

    // Cleanup image data
//    for (int i=0;i<MIPMAP_LEVELS;i++)
//        RELEASE(pImage[i]);

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\modulex.h ===
#define PREPEND_MODULE(Suffix) cubemap##Suffix
#define MODULE_STRING "cubemap"
#pragma comment(linker, "/include:_cubemap_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\Utility.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Cubemap.h"

bool CCubemap::BltCubicTexture(void)
{
/*
	// Blt from source sysmem to vidmem method
    POINT Pt = {0,0};

	for (int i=0;i<6;i++) 
    {
    	for (int j=0;j<m_paSysTexture->m_pSrcSurface->GetNumAttachedSurfaces();j++) 
        {
            CDirectDrawSurface * pSurface = m_paTexture->m_pSrcSurface->GetCubicSurface(i)->GetAttachedSurface(j);
            CDirectDrawSurface * pSysSurface = m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->GetAttachedSurface(j);

            // Blt from source sysmem to source target method
            if (!pSurface->Blt(pSysSurface,Pt))
	        {
		        WriteToLog("Source Blt(%d) failed with HResult = %s.",i,GetHResultString(GetLastError()).c_str());
                RELEASE(pSurface);
                RELEASE(pSysSurface);
		        return false;
	        }

            RELEASE(pSurface);
            RELEASE(pSysSurface);

	        if (NULL != m_pRefTarget)
	        {
                CDirectDrawSurface * pSurface = m_paTexture->m_pRefSurface->GetCubicSurface(i)->GetAttachedSurface(j);
                CDirectDrawSurface * pSysSurface = m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->GetAttachedSurface(j);

	            // Blt from ref sysmem to ref target method
		        if (!pSurface->Blt(pSysSurface,Pt))
		        {
			        WriteToLog("Reference Blt(%d) failed with HResult = %s.",i,GetHResultString(GetLastError()).c_str());
                    RELEASE(pSurface);
                    RELEASE(pSysSurface);
			        return false;
		        }

                RELEASE(pSurface);
                RELEASE(pSysSurface);
	        }
        }
    }
*/
    return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\TexGen.cpp ===
//////////////////////////////////////////////////////////////////////
// TexGen.cpp: implementation of the CTexGen class.
//////////////////////////////////////////////////////////////////////

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Cubemap.h"
#include "Matrix.h"

CTexGen::CTexGen()
{
	m_szTestName=TEXT("Cubic Texture Generation");
	m_szCommandKey=TEXT("TexGen");

	m_flDegInc=30.0f;									// Set degree increase per test
    bTexGen = true;
}

void CTexGen::CommandLineHelp()
{
//    WriteCommandLineHelp("$y-YAWDEGINC #\t$wSets the yaw degree increment (default=30.0)");
}

bool CTexGen::SetDefaultMatrices(void)
{
    CMatrix Matrix;

    if (!CCubemap::SetDefaultMatrices())
        return false;

    // Translate sphere to min depth
    Matrix.Identity();
	Matrix.Translate(cD3DVECTOR(0.0f,0.0f,m_flZDepthMin));		
	if (!SetTransform(D3DTRANSFORMSTATE_WORLD,&Matrix.m_Matrix))
	{
		WriteToLog("SetTransform(WorldMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CTexGen::TestInitialize(void)
{
//	CImageLoader Image;
	DWORD dwColors[4];
	UINT Result;
	char szBuffer[256];
    bool bFormats = true;

//	if (ReadString("YAWDEGINC",szBuffer,false))
//		m_flDegInc=atof(szBuffer);

    // Setup the Test range
	SetTestRange(1, (int)(360.0f/m_flDegInc) * 3);

    // Check if cubemaps are available	
	Result = CCubemap::TestInitialize();					

	if (Result != D3DTESTINIT_RUN)			
		return Result;
 
	// Check for the TexGen cap
	DWORD dwVertexProcessingCaps = m_d3dcaps.VertexProcessingCaps;

    if (!(dwVertexProcessingCaps & D3DVTXPCAPS_TEXGEN))
    {
		WriteToLog("Device capability not supported: VertexProcessing TexGen.\n");
		return D3DTESTINIT_SKIPALL;
    }

    // Check if any cube formats were available
	if (!bFormats) 
    {
		WriteToLog("No cubemap formats found.\n");
		return D3DTESTINIT_SKIPALL;
    }

    dwColors[0]=0xFF0000FF;
	dwColors[1]=0xFF00FF00;
	dwColors[2]=0xFF00FFFF;
	dwColors[3]=0xFFFF0000;
//	pImage[0]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[0][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFFFF00FF;
	dwColors[1]=0xFFFFFF00;
	dwColors[2]=0xFFFFFFFF;
	dwColors[3]=0xFF0000FF;
//	pImage[1]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[1][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFF00FF00;
	dwColors[1]=0xFF00FFFF;
	dwColors[2]=0xFFFF0000;
	dwColors[3]=0xFFFF00FF;
//	pImage[2]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[2][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFFFFFF00;
	dwColors[1]=0xFFFFFFFF;
	dwColors[2]=0xFF0000FF;
	dwColors[3]=0xFF00FF00;
//	pImage[3]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[3][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFF00FFFF;
	dwColors[1]=0xFFFF0000;
	dwColors[2]=0xFFFF00FF;
	dwColors[3]=0xFFFFFF00;
//	pImage[4]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[4][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFFFFFFFF;
	dwColors[1]=0xFF0000FF;
	dwColors[2]=0xFF00FF00;
	dwColors[3]=0xFF00FFFF;
//	pImage[5]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[5][0], &dwColors[0], 4 * sizeof(DWORD));

    return Result;
}

bool CTexGen::ExecuteTest(UINT uTestNum)
{
 	// Initialize some variables
	char szStr[100];
	CMatrix Matrix;
	int nTest = (uTestNum-1) % (int)(360.0f/m_flDegInc);
    int nCubeFormat;
	float flAngle = m_flDegInc * (float)nTest;				// Get angle for current test
	while (flAngle>=360.0f) { flAngle-=360.0f; }
    CTexture8* pd3dtTemp;
    CSurface8* pd3dsSrc, *pd3dsDst;
    UINT i;
    HRESULT hr;
	szStr[0] = '\0';

	// Cleanup previous texture
	SetTexture(0, NULL);
	ReleaseTexture(m_paTexture);
 	ReleaseTexture(m_paSysTexture);

	nCubeFormat = (uTestNum-1) % m_uCommonCubeFormats;

	// Create the cubic environment mapping texture
/*
    if (bVideo)
    	m_paTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_VIDEO|CDDS_TEXTURE_ALLFACES);

    if (bManage)
    	m_paTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_MANAGE|CDDS_TEXTURE_ALLFACES);

    if (bD3DManage)
    	m_paTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_D3DMANAGE|CDDS_TEXTURE_ALLFACES);
*/
    m_paTexture = (CCubeTexture8*)CreateTexture(m_pDevice, m_dTextureWidthMax,m_dTextureHeightMax, m_fmtCommonCube[nCubeFormat], TTYPE_CUBEMAP);

	if (m_paTexture==NULL)
	{
		WriteToLog("CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
  		TestFinish(D3DTESTFINISH_ABORT);
        return false;
	}

/*
    // Load the image data onto the texture
    if (m_dwVersion <= 0x0700)
    {
        if (bLock)
        {
            // Lock/Paint directly to vidmem method
	        for (int i=0;i<6;i++) 
            {
		        m_paTexture->m_pSrcSurface->GetCubicSurface(i)->SetImageData(pImage[i]);

       	        if (NULL != m_pRefTarget)
	    	        m_paTexture->m_pRefSurface->GetCubicSurface(i)->SetImageData(pImage[i]);
	        }
        }

        if (bBlt)
        {
    	    m_paSysTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);

	        if (m_paSysTexture==NULL)
	        {
		        WriteToLog("Sys CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
    		    TestFinish(D3DTESTFINISH_ABORT);
                return false;
	        }

	        for (int i=0;i<6;i++) 
            {
		        m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->SetImageData(pImage[i]);

       	        if (NULL != m_pRefTarget)
	    	        m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->SetImageData(pImage[i]);
	        }

            // Blt cubemap from system surface to original surface
            if (!BltCubicTexture())
            {
    		    TestFinish(D3DTESTFINISH_ABORT);
                return false;
            }
        }
    }
    else // m_dwVersion >= 0x0800
    {
        // Need a system copy of the texture in order to lock
    	m_paSysTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);

	    if (m_paSysTexture==NULL)
	    {
		    WriteToLog("Sys CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
    		TestFinish(D3DTESTFINISH_ABORT);
            return false;
	    }

	    for (int i=0;i<6;i++) 
        {
		    m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->SetImageData(pImage[i]);

       	    if (NULL != m_pRefTarget)
	    	    m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->SetImageData(pImage[i]);
	    }

        // Load cubemap from system surface to original surface
        if (!LoadCubicTexture8())
        {
    		TestFinish(D3DTESTFINISH_ABORT);
            return false;
        }
    }	
*/

    for (i = 0; i < 6; i++) {

        pd3dtTemp = CreateGradientTexture(m_pDevice, m_dTextureWidthMax, m_dTextureHeightMax, dwGradient[i], m_fmtCommonCube[nCubeFormat]);
        if (!pd3dtTemp) {
            return false;
        }

        hr = pd3dtTemp->GetSurfaceLevel(0, &pd3dsSrc);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
            ReleaseTexture(pd3dtTemp);
            return false;
        }

        hr = m_paTexture->GetCubeMapSurface((D3DCUBEMAP_FACES)i, 0, &pd3dsDst);
        if (ResultFailed(hr, TEXT("IDirect3DCubeTexture8::GetCubeMapSurface"))) {
            pd3dsSrc->Release();
            ReleaseTexture(pd3dtTemp);
            return false;
        }

        hr = D3DXLoadSurfaceFromSurface(pd3dsDst->GetIDirect3DSurface8(), NULL, NULL, pd3dsSrc->GetIDirect3DSurface8(), NULL, NULL, D3DX_FILTER_POINT, 0);

        pd3dsDst->Release();
        pd3dsSrc->Release();
        ReleaseTexture(pd3dtTemp);

        if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
            return false;
        }
    }

    if (!SyncTexture(m_paTexture)) {
        return false;
    }

	SetTexture(0,m_paTexture);

    switch ((uTestNum-1) / (int)(360.0f/m_flDegInc))
    {
        case 0: SetTextureStageState(0,D3DTSS_TEXCOORDINDEX,(DWORD)D3DTSS_TCI_CAMERASPACENORMAL);
            	sprintf(szStr,"%sCameraSpaceNormal, ",szStr);
                break;
        case 1: SetTextureStageState(0,D3DTSS_TEXCOORDINDEX,(DWORD)D3DTSS_TCI_CAMERASPACEPOSITION);
            	sprintf(szStr,"%sCameraSpacePosition, ",szStr);
                break;
        case 2: SetTextureStageState(0,D3DTSS_TEXCOORDINDEX,(DWORD)D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR);
            	sprintf(szStr,"%sCameraSpaceReflectionVector, ",szStr);
                break;
    }

    SetTextureStageState(0,D3DTSS_TEXTURETRANSFORMFLAGS,(DWORD)D3DTTFF_COUNT3);

    Matrix.Identity();											    // Load Identity matrix
	Matrix.RotateYaw(flAngle);									    // Rotate
	if (!SetTransform(D3DTRANSFORMSTATE_TEXTURE0,&Matrix.m_Matrix)) // Set texture matrix
	{
		WriteToLog("SetTransform(Texture0) failed with HResult = %X.\n",GetLastError());
		TestFinish(D3DTESTFINISH_ABORT);
        return false;
	}

    // Tell the log that we are starting
	sprintf(szStr,"%sYaw %.2f degrees",szStr,flAngle);

	BeginTestCase(szStr);

	return true;
}

bool CTexGen::TestTerminate()
{
    CCubemap::TestTerminate();

	// Cleanup image data
//    for (int i=0;i<6;i++)
//        RELEASE(pImage[i]);

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_cubemp
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    Blend.cpp \
    CubeMap.cpp \
    Filter.cpp \
    Matrix.cpp \
    Mipmaps.cpp \
    PitchRotation.cpp \
    TexGen.cpp \
    Utility.cpp \
    Utility8.cpp \
    YawRotation.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\PitchRotation.cpp ===
//////////////////////////////////////////////////////////////////////
// PitchRotation.cpp: implementation of the CPitchRotation class.
//////////////////////////////////////////////////////////////////////

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Cubemap.h"
#include "Matrix.h"

CPitchRotation::CPitchRotation()
{
	m_szTestName=TEXT("Pitch Rotation");
	m_szCommandKey=TEXT("Pitch");

	m_flDegInc=15.0f;									// Set degree increase per test
}

/*
bool CPitchRotation::AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize)
{
	// Test both texture loading methods
    if (IsConformance())
    {
        // Use CopyRects
        pMode->D3DMode.dwTexLoad = TEXLOAD_COPY_RECTS;
		CD3DTest::AddModeList(pMode,pData,dwDataSize);

        // Use UpdateTexture
        pMode->D3DMode.dwTexLoad = TEXLOAD_UPDATE_TEXTURE;
		CD3DTest::AddModeList(pMode,pData,dwDataSize);
    }
    else
    {
		// Let the framework handle stress mode
		CD3DTest::AddModeList(pMode,pData,dwDataSize);
	}

    return true;
}
*/

void CPitchRotation::CommandLineHelp()
{
//    WriteCommandLineHelp("$y-PITCHDEGINC #\t$wSets the pitch degree increment (default=15.0)");
}

UINT CPitchRotation::TestInitialize(void)
{
//	CImageLoader Image;
	DWORD dwColors[4];
	UINT Result;
	char szBuffer[256];
    bool bFormats = true;

//	if (ReadString("PITCHDEGINC",szBuffer,false))
//		m_flDegInc=atof(szBuffer);

	// Request all cube formats except bumpmap
//	if (!RequestCubeFormats(PF_RGB | PF_FOURCC | PF_LUMINANCE))
//		bFormats = false;

    // Setup the Test range
	SetTestRange(1, (int)(360.0f/m_flDegInc) * m_uCommonCubeFormats);

    // Check if cubemaps are available	
	Result = CCubemap::TestInitialize();					

	if (Result != D3DTESTINIT_RUN)			
		return Result;
 
    // Check if any cube formats were available
	if (!bFormats) 
    {
		WriteToLog("No cubemap formats found.\n");
		return D3DTESTINIT_SKIPALL;
    }

	dwColors[0]=0xFF0000FF;
	dwColors[1]=0xFF00FF00;
	dwColors[2]=0xFF00FFFF;
	dwColors[3]=0xFFFF0000;
//	pImage[0]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[0][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFFFF00FF;
	dwColors[1]=0xFFFFFF00;
	dwColors[2]=0xFFFFFFFF;
	dwColors[3]=0xFF0000FF;
//	pImage[1]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[1][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFF00FF00;
	dwColors[1]=0xFF00FFFF;
	dwColors[2]=0xFFFF0000;
	dwColors[3]=0xFFFF00FF;
//	pImage[2]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[2][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFFFFFF00;
	dwColors[1]=0xFFFFFFFF;
	dwColors[2]=0xFF0000FF;
	dwColors[3]=0xFF00FF00;
//	pImage[3]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[3][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFF00FFFF;
	dwColors[1]=0xFFFF0000;
	dwColors[2]=0xFFFF00FF;
	dwColors[3]=0xFFFFFF00;
//	pImage[4]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[4][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFFFFFFFF;
	dwColors[1]=0xFF0000FF;
	dwColors[2]=0xFF00FF00;
	dwColors[3]=0xFF00FFFF;
//	pImage[5]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[5][0], &dwColors[0], 4 * sizeof(DWORD));

    return Result;
}

bool CPitchRotation::ExecuteTest(UINT uTestNum)
{
	char szStr[100];
	CMatrix Matrix;
	int nTest = (uTestNum-1) / m_uCommonCubeFormats;
	float flAngle = m_flDegInc * (float)nTest;				// Get angle for current test
    int nCubeFormat;
    CTexture8* pd3dtTemp;
    CSurface8* pd3dsSrc, *pd3dsDst;
    UINT i;
    HRESULT hr;
	szStr[0] = '\0';

	// Cleanup previous texture
	SetTexture(0, NULL);
	ReleaseTexture(m_paTexture);
 	ReleaseTexture(m_paSysTexture);

	// Cycle the common cube formats
	nCubeFormat = (uTestNum-1) % m_uCommonCubeFormats;

	// Create the cubic environment mapping texture
/*    
    if (bVideo)
    	m_paTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_VIDEO|CDDS_TEXTURE_ALLFACES);
    
    if (bManage)
    	m_paTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_MANAGE|CDDS_TEXTURE_ALLFACES);
    
    if (bD3DManage)
    	m_paTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_D3DMANAGE|CDDS_TEXTURE_ALLFACES);
*/
    m_paTexture = (CCubeTexture8*)CreateTexture(m_pDevice, m_dTextureWidthMax,m_dTextureHeightMax, m_fmtCommonCube[nCubeFormat], TTYPE_CUBEMAP);

	if (m_paTexture==NULL)
	{
		WriteToLog("CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
  		TestFinish(D3DTESTFINISH_ABORT);
        return false;
	}
/*
    // Load the image data onto the texture
    if (m_dwVersion <= 0x0700)
    {
        if (bLock)
        {
            // Lock/Paint directly to vidmem method
	        for (int i=0;i<6;i++) 
            {
		        m_paTexture->m_pSrcSurface->GetCubicSurface(i)->SetImageData(pImage[i]);

       	        if (NULL != m_pRefTarget)
	    	        m_paTexture->m_pRefSurface->GetCubicSurface(i)->SetImageData(pImage[i]);
	        }
        }

        if (bBlt)
        {
    	    m_paSysTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);

	        if (m_paSysTexture==NULL)
	        {
		        WriteToLog("Sys CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
    		    TestFinish(D3DTESTFINISH_ABORT);
                return false;
	        }

	        for (int i=0;i<6;i++) 
            {
		        m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->SetImageData(pImage[i]);

       	        if (NULL != m_pRefTarget)
	    	        m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->SetImageData(pImage[i]);
	        }

            // Blt cubemap from system surface to original surface
            if (!BltCubicTexture())
            {
    		    TestFinish(D3DTESTFINISH_ABORT);
                return false;
            }
        }
    }
    else // m_dwVersion >= 0x0800
    {
        // Need a system copy of the texture in order to lock
    	m_paSysTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);

	    if (m_paSysTexture==NULL)
	    {
		    WriteToLog("Sys CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
    		TestFinish(D3DTESTFINISH_ABORT);
            return false;
	    }

	    for (int i=0;i<6;i++) 
        {
		    m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->SetImageData(pImage[i]);

       	    if (NULL != m_pRefTarget)
	    	    m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->SetImageData(pImage[i]);
	    }

        // Load cubemap from system surface to original surface
        if (!LoadCubicTexture8())
        {
    		TestFinish(D3DTESTFINISH_ABORT);
            return false;
        }
    }	
*/

    for (i = 0; i < 6; i++) {

        pd3dtTemp = CreateGradientTexture(m_pDevice, m_dTextureWidthMax, m_dTextureHeightMax, dwGradient[i], m_fmtCommonCube[nCubeFormat]);
        if (!pd3dtTemp) {
            return false;
        }

        hr = pd3dtTemp->GetSurfaceLevel(0, &pd3dsSrc);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
            ReleaseTexture(pd3dtTemp);
            return false;
        }

        hr = m_paTexture->GetCubeMapSurface((D3DCUBEMAP_FACES)i, 0, &pd3dsDst);
        if (ResultFailed(hr, TEXT("IDirect3DCubeTexture8::GetCubeMapSurface"))) {
            pd3dsSrc->Release();
            ReleaseTexture(pd3dtTemp);
            return false;
        }

        hr = D3DXLoadSurfaceFromSurface(pd3dsDst->GetIDirect3DSurface8(), NULL, NULL, pd3dsSrc->GetIDirect3DSurface8(), NULL, NULL, D3DX_FILTER_POINT, 0);

        pd3dsDst->Release();
        pd3dsSrc->Release();
        ReleaseTexture(pd3dtTemp);

        if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
            return false;
        }
    }

    if (!SyncTexture(m_paTexture)) {
        return false;
    }

	SetTexture(0,m_paTexture);

	Matrix.Identity();											// Load Identity matrix
	Matrix.Translate(cD3DVECTOR(0.0f,0.0f,m_flZDepthMin));		// Translate sphere to min depth
	Matrix.RotatePitch(flAngle);								// Rotate
	if (!SetTransform(D3DTRANSFORMSTATE_WORLD,&Matrix.m_Matrix))// Set world matrix
	{
		WriteToLog("SetTransform(WorldMatrix) failed with HResult = %X.\n",GetLastError());
		TestFinish(D3DTESTFINISH_ABORT);
        return false;
	}

	// Tell the log that we are starting
    if (m_dwVersion <= 0x0700)
    {
	    sprintf(szStr,"%s%.2f degrees, Tex: ",szStr,flAngle);
//	    GetTexFmtDesc(&m_pCommonCubeFormats[m_pMode->nCubeFormat].ddpfPixelFormat,szStr+strlen(szStr),80-strlen(szStr));
    }
    else
#ifndef UNICODE
	    sprintf(szStr,"%s%.2f degrees, Tex: %s",szStr,flAngle,D3DFmtToString(m_fmtCommonCube[nCubeFormat]));
#else
	    sprintf(szStr,"%s%.2f degrees, Tex: %S",szStr,flAngle,D3DFmtToString(m_fmtCommonCube[nCubeFormat]));
#endif

	BeginTestCase(szStr);

	return true;
}

bool CPitchRotation::TestTerminate()
{
    CCubemap::TestTerminate();

    // Cleanup image data
//    for (int i=0;i<6;i++)
//        RELEASE(pImage[i]);

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\emboss\flags.h ===
// FILE:        flags.h
// DESC:        flags class header
// AUTHOR:      Todd M. Frost

#ifndef _CFLAGS
#define _CFLAGS

class CFlags {
    private:
        DWORD m_dwCurrent; // current flags
        DWORD m_dwSaved;   // saved flags

    public:
        inline bool bCheck(DWORD dwFlags)
        {
            if (m_dwCurrent & dwFlags)
                return true;
            else
                return false;
        };
        inline VOID vClear(DWORD dwFlags)
        {
            m_dwCurrent &= ~dwFlags;
        };
        inline VOID vSet(DWORD dwFlags)
        {
            m_dwCurrent |= dwFlags;
        };
        inline DWORD dwGet(VOID)
        {
            return m_dwCurrent;
        };
        inline VOID vSave(VOID)
        {
            m_dwSaved = m_dwCurrent;
        };
        inline VOID vRestore(VOID)
        {
            m_dwCurrent = m_dwSaved;
        };
        inline VOID vReplace(DWORD dwFlags)
        {
            m_dwCurrent = dwFlags;
        };
        CFlags(VOID);
        ~CFlags(VOID); 
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\Utility8.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Cubemap.h"

bool CCubemap::LoadCubicTexture8(void)
{
/*
    HRESULT hr;

    if (bCopy)
    {
        RECT Rect;

	    Rect.left = 0;
	    Rect.top  = 0;

	    for (int i=0;i<6;i++) 
        {
    		for (int j=0;j<m_paSysTexture->m_pSrcSurface->GetNumAttachedSurfaces();j++) 
            {
                CDirectDrawSurface * pSurface = m_paTexture->m_pSrcSurface->GetCubicSurface(i)->GetAttachedSurface(j);
                CDirectDrawSurface * pSysSurface = m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->GetAttachedSurface(j);

	            Rect.right  = pSurface->m_dwWidth;
	            Rect.bottom = pSurface->m_dwHeight;

                // Use copyrect method
                hr = m_pSrcDevice8->CopyRects(pSysSurface->m_pSurface8, &Rect, 1, pSurface->m_pSurface8, NULL);

                if (FAILED(hr))
	            {
		            WriteToLog("Source CopyRects(%d) failed with HResult = %s.",i,GetHResultString(hr).c_str());
                    RELEASE(pSurface);
                    RELEASE(pSysSurface);
		            return false;
	            }

                RELEASE(pSurface);
                RELEASE(pSysSurface);

	            if (NULL != m_pRefTarget)
	            {
                    CDirectDrawSurface * pSurface = m_paTexture->m_pRefSurface->GetCubicSurface(i)->GetAttachedSurface(j);
                    CDirectDrawSurface * pSysSurface = m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->GetAttachedSurface(j);

    	            Rect.right  = pSurface->m_dwWidth;
	                Rect.bottom = pSurface->m_dwHeight;

                    // Use copyrect method
                    hr = m_pRefDevice8->CopyRects(pSysSurface->m_pSurface8, &Rect, 1, pSurface->m_pSurface8, NULL);

                    if (FAILED(hr))
		            {
			            WriteToLog("Reference CopyRects(%d) failed with HResult = %s.",i,GetHResultString(hr).c_str());
                        RELEASE(pSurface);
                        RELEASE(pSysSurface);
			            return false;
		            }

                    RELEASE(pSurface);
                    RELEASE(pSysSurface);
	            }
            }
        }
    }

    if (bUpdate)
    {
        // Update the Source texture
        hr = m_pSrcDevice8->UpdateTexture(m_paSysTexture->m_pSrcCubeTexture8, m_paTexture->m_pSrcCubeTexture8);

        if (FAILED(hr))
        {
		    WriteToLog("Source UpdateTexture() failed with HResult = %s.\n",GetHResultString(hr).c_str());
		    return false;
        }

        if (NULL != m_pRefTarget)
        {
            // Update the Reference texture
            hr = m_pRefDevice8->UpdateTexture(m_paSysTexture->m_pRefCubeTexture8, m_paTexture->m_pRefCubeTexture8);

            if (FAILED(hr))
            {
		        WriteToLog("Reference UpdateTexture() failed with HResult = %s.\n",GetHResultString(hr).c_str());
		        return false;
            }
        }
    }
*/
    return true;
}

bool CCubemap::CheckMipCubeCap8(void)
{
//    UINT n = m_pMode->nSrcDevice;

	// Check the caps we are interested in
	DWORD dwTextureCaps = m_d3dcaps.TextureCaps;

	if (!(dwTextureCaps & D3DPTEXTURECAPS_MIPCUBEMAP))
	{
		WriteToLog("\nDevice capability not supported: Texture MipCubeMap.");
		return false;
    }

    return true;
}

bool CCubemap::CheckCubeFilterCaps8(DWORD dwMin, DWORD dwMag, DWORD dwMip)
{
    DWORD dwCubeTextureFilterCaps;
//    UINT n = m_pMode->nSrcDevice;

	// Check the caps we are interested in
    if (m_dwVersion >= 0x800)
    	dwCubeTextureFilterCaps = m_d3dcaps.CubeTextureFilterCaps;
//    else
//    	dwCubeTextureFilterCaps = m_pAdapter->Devices[n].Desc.dwTextureFilterCaps;

    if (dwMin)
    {
	    if (!(dwCubeTextureFilterCaps & dwMin))
		    return false;
    }

    if (dwMag)
    {
        if (!(dwCubeTextureFilterCaps & dwMag))
		    return false;
    }
	
    if (dwMip)
    {
        if (!(dwCubeTextureFilterCaps & dwMip))
		    return false;
    }

    return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=Cubemap
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_cubemp.lib

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_cubemp.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\emboss\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\YawRotation.cpp ===
//////////////////////////////////////////////////////////////////////
// YawRotation.cpp: implementation of the CYawRotation class.
//////////////////////////////////////////////////////////////////////

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Cubemap.h"
#include "Matrix.h"

CYawRotation::CYawRotation()
{
	m_szTestName=TEXT("Yaw Rotation");
	m_szCommandKey=TEXT("Yaw");

	m_flDegInc=15.0f;									// Set degree increase per test
}

/*
bool CYawRotation::AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize)
{
	// Test both texture loading methods
    if (IsConformance())
    {
        // Use CopyRects
        pMode->D3DMode.dwTexLoad = TEXLOAD_COPY_RECTS;
		CD3DTest::AddModeList(pMode,pData,dwDataSize);

        // Use UpdateTexture
        pMode->D3DMode.dwTexLoad = TEXLOAD_UPDATE_TEXTURE;
		CD3DTest::AddModeList(pMode,pData,dwDataSize);
    }
    else
    {
		// Let the framework handle stress mode
		CD3DTest::AddModeList(pMode,pData,dwDataSize);
	}

    return true;
}
*/

void CYawRotation::CommandLineHelp()
{
//    WriteCommandLineHelp("$y-YAWDEGINC #\t$wSets the yaw degree increment (default=15.0)");
}

UINT CYawRotation::TestInitialize(void)
{
//	CImageLoader Image;
	DWORD dwColors[4];
	UINT Result;
	char szBuffer[256];
    bool bFormats = true;

//	if (ReadString("YAWDEGINC",szBuffer,false))
//		m_flDegInc=atof(szBuffer);

	// Request all cube formats except bumpmap
//	if (!RequestCubeFormats(PF_RGB | PF_FOURCC | PF_LUMINANCE))
//		bFormats = false;

    // Setup the Test range
	SetTestRange(1, (int)(360.0f/m_flDegInc) * m_uCommonCubeFormats);

    // Check if cubemaps are available	
	Result = CCubemap::TestInitialize();					

	if (Result != D3DTESTINIT_RUN)			
		return Result;
 
    // Check if any cube formats were available
	if (!bFormats) 
    {
		WriteToLog("No cubemap formats found.\n");
		return D3DTESTINIT_SKIPALL;
    }

    dwColors[0]=0xFF0000FF;
	dwColors[1]=0xFF00FF00;
	dwColors[2]=0xFF00FFFF;
	dwColors[3]=0xFFFF0000;
//	pImage[0]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[0][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFFFF00FF;
	dwColors[1]=0xFFFFFF00;
	dwColors[2]=0xFFFFFFFF;
	dwColors[3]=0xFF0000FF;
//	pImage[1]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[1][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFF00FF00;
	dwColors[1]=0xFF00FFFF;
	dwColors[2]=0xFFFF0000;
	dwColors[3]=0xFFFF00FF;
//	pImage[2]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[2][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFFFFFF00;
	dwColors[1]=0xFFFFFFFF;
	dwColors[2]=0xFF0000FF;
	dwColors[3]=0xFF00FF00;
//	pImage[3]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[3][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFF00FFFF;
	dwColors[1]=0xFFFF0000;
	dwColors[2]=0xFFFF00FF;
	dwColors[3]=0xFFFFFF00;
//	pImage[4]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[4][0], &dwColors[0], 4 * sizeof(DWORD));
	dwColors[0]=0xFFFFFFFF;
	dwColors[1]=0xFF0000FF;
	dwColors[2]=0xFF00FF00;
	dwColors[3]=0xFF00FFFF;
//	pImage[5]=Image.LoadGradient(m_dTextureWidthMax,m_dTextureHeightMax,dwColors);
    memcpy(&dwGradient[5][0], &dwColors[0], 4 * sizeof(DWORD));

    return Result;
}

bool CYawRotation::ExecuteTest(UINT uTestNum)
{
 	// Initialize some variables
	char szStr[100];
	CMatrix Matrix;
	int nTest = (uTestNum-1) / m_uCommonCubeFormats;
    int nCubeFormat;
	float flAngle = m_flDegInc * (float)nTest;				// Get angle for current test
    CTexture8* pd3dtTemp;
    CSurface8* pd3dsSrc, *pd3dsDst;
    UINT i;
    HRESULT hr;
	szStr[0] = '\0';

	// Cleanup previous texture
	SetTexture(0, NULL);
	ReleaseTexture(m_paTexture);
 	ReleaseTexture(m_paSysTexture);

	// Cycle the common cube formats
	nCubeFormat = (uTestNum-1) % m_uCommonCubeFormats;

	// Create the cubic environment mapping texture
/*
    if (bVideo)
    	m_paTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_VIDEO|CDDS_TEXTURE_ALLFACES);

    if (bManage)
    	m_paTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_MANAGE|CDDS_TEXTURE_ALLFACES);

    if (bD3DManage)
    	m_paTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_D3DMANAGE|CDDS_TEXTURE_ALLFACES);
*/
    m_paTexture = (CCubeTexture8*)CreateTexture(m_pDevice, m_dTextureWidthMax,m_dTextureHeightMax, m_fmtCommonCube[nCubeFormat], TTYPE_CUBEMAP);

	if (m_paTexture==NULL)
	{
		WriteToLog("CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
  		TestFinish(D3DTESTFINISH_ABORT);
        return false;
	}

/*
    // Load the image data onto the texture
    if (m_dwVersion <= 0x0700)
    {
        if (bLock)
        {
            // Lock/Paint directly to vidmem method
	        for (int i=0;i<6;i++) 
            {
		        m_paTexture->m_pSrcSurface->GetCubicSurface(i)->SetImageData(pImage[i]);

       	        if (NULL != m_pRefTarget)
	    	        m_paTexture->m_pRefSurface->GetCubicSurface(i)->SetImageData(pImage[i]);
	        }
        }

        if (bBlt)
        {
    	    m_paSysTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);

	        if (m_paSysTexture==NULL)
	        {
		        WriteToLog("Sys CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
    		    TestFinish(D3DTESTFINISH_ABORT);
                return false;
	        }

	        for (int i=0;i<6;i++) 
            {
		        m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->SetImageData(pImage[i]);

       	        if (NULL != m_pRefTarget)
	    	        m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->SetImageData(pImage[i]);
	        }

            // Blt cubemap from system surface to original surface
            if (!BltCubicTexture())
            {
    		    TestFinish(D3DTESTFINISH_ABORT);
                return false;
            }
        }
    }
    else // m_dwVersion >= 0x0800
    {
        // Need a system copy of the texture in order to lock
    	m_paSysTexture=CreateCubicTexture(m_dTextureWidthMax,m_dTextureHeightMax,1,CDDS_TEXTURE_SYSTEM|CDDS_TEXTURE_ALLFACES);

	    if (m_paSysTexture==NULL)
	    {
		    WriteToLog("Sys CreateCubicTexture() failed with HResult = %X.\n",GetLastError());
    		TestFinish(D3DTESTFINISH_ABORT);
            return false;
	    }

	    for (int i=0;i<6;i++) 
        {
		    m_paSysTexture->m_pSrcSurface->GetCubicSurface(i)->SetImageData(pImage[i]);

       	    if (NULL != m_pRefTarget)
	    	    m_paSysTexture->m_pRefSurface->GetCubicSurface(i)->SetImageData(pImage[i]);
	    }

        // Load cubemap from system surface to original surface
        if (!LoadCubicTexture8())
        {
    		TestFinish(D3DTESTFINISH_ABORT);
            return false;
        }
    }	
*/

    for (i = 0; i < 6; i++) {

        pd3dtTemp = CreateGradientTexture(m_pDevice, m_dTextureWidthMax, m_dTextureHeightMax, dwGradient[i], m_fmtCommonCube[nCubeFormat]);
        if (!pd3dtTemp) {
            return false;
        }

        hr = pd3dtTemp->GetSurfaceLevel(0, &pd3dsSrc);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
            ReleaseTexture(pd3dtTemp);
            return false;
        }

        hr = m_paTexture->GetCubeMapSurface((D3DCUBEMAP_FACES)i, 0, &pd3dsDst);
        if (ResultFailed(hr, TEXT("IDirect3DCubeTexture8::GetCubeMapSurface"))) {
            pd3dsSrc->Release();
            ReleaseTexture(pd3dtTemp);
            return false;
        }

        hr = D3DXLoadSurfaceFromSurface(pd3dsDst->GetIDirect3DSurface8(), NULL, NULL, pd3dsSrc->GetIDirect3DSurface8(), NULL, NULL, D3DX_FILTER_POINT, 0);

        pd3dsDst->Release();
        pd3dsSrc->Release();
        ReleaseTexture(pd3dtTemp);

        if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
            return false;
        }
    }

    if (!SyncTexture(m_paTexture)) {
        return false;
    }

	SetTexture(0,m_paTexture);

    Matrix.Identity();											// Load Identity matrix
	Matrix.Translate(cD3DVECTOR(0.0f,0.0f,m_flZDepthMin));		// Translate sphere to min depth
	Matrix.RotateYaw(flAngle);									// Rotate
	if (!SetTransform(D3DTRANSFORMSTATE_WORLD,&Matrix.m_Matrix))// Set world matrix
	{
		WriteToLog("SetTransform(WorldMatrix) failed with HResult = %X.\n",GetLastError());
		TestFinish(D3DTESTFINISH_ABORT);
        return false;
	}

    // Tell the log that we are starting
    if (m_dwVersion <= 0x0700)
    {
	    sprintf(szStr,"%s%.2f degrees, Tex: ",szStr,flAngle);
//	    GetTexFmtDesc(&m_pCommonCubeFormats[m_pMode->nCubeFormat].ddpfPixelFormat,szStr+strlen(szStr),80-strlen(szStr));
    }
    else
#ifndef UNICODE
	    sprintf(szStr,"%s%.2f degrees, Tex: %s",szStr,flAngle,D3DFmtToString(m_fmtCommonCube[nCubeFormat]));
#else
	    sprintf(szStr,"%s%.2f degrees, Tex: %S",szStr,flAngle,D3DFmtToString(m_fmtCommonCube[nCubeFormat]));
#endif

	BeginTestCase(szStr);

	return true;
}

bool CYawRotation::TestTerminate()
{
    CCubemap::TestTerminate();

	// Cleanup image data
//    for (int i=0;i<6;i++)
//        RELEASE(pImage[i]);

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\Cubemap\exe\sources.inc ===
TARGETNAME=Cubemap
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_cubemp.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\emboss\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\emboss\modulex.h ===
#define PREPEND_MODULE(Suffix) emboss##Suffix
#define MODULE_STRING "emboss"
#pragma comment(linker, "/include:_emboss_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\emboss\flags.cpp ===
// FILE:        flags.cpp
// DESC:        flags class methods
// AUTHOR:      Todd M. Frost

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "flags.h"

#ifdef CLASSNAME
#undef CLASSNAME
#endif
#define CLASSNAME TEXT("CFlags")

// NAME:        CFlags()
// DESC:        constructor for flags class
// INPUT:       none
// OUTPUT:      none

CFlags::CFlags(VOID)
{
    m_dwCurrent = (DWORD) 0;
    m_dwSaved = (DWORD) 0;
}

// NAME:        ~CFlags()
// DESC:        destructor for flags class
// INPUT:       none
// OUTPUT:      none

CFlags::~CFlags(VOID)
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\emboss\emboss.cpp ===
// FILE:        emboss.cpp
// DESC:        emboss class methods for emboss conformance tests
// AUTHOR:      Todd M. Frost

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "CShapesFVF.h"
#include "flags.h"
#include "emboss.h"

const UINT MINF = 1; // min factor for lemniscate formula (r = sin(factor*theta))
const UINT MAXF = 8; // max factor for lemniscate formula (r = sin(factor*theta))

const UINT MINI = 0;   // min intervals for lemniscate traversal
const UINT MAXI = 256; // max intervals for lemniscate traversal

const UINT TEXTURE_WIDTH  = 256; // texture width
const UINT TEXTURE_HEIGHT = 256; // texture height

const FLOAT LEMNISCATE_SCALE = 0.1f; // lemniscate scale

//CD3DWindowFramework App; // global instance of D3D window framework class

FLOAT gfConstant = 1.0f; // global helper variable for fConstant()

// NAME:        fConstant()
// DESC:        constant
// INPUT:       u....u texture coord
//              v....v texture coord
// OUTPUT:      1.0
// COMMENTS:    [-1,1] maps to [0,255] in LoadChannelData() (CIL_UNSIGNED)

FLOAT fConstant(FLOAT u, FLOAT v)
{
    return gfConstant;
}

// NAME:        fHeight()
// DESC:        height
// INPUT:       u....u texture coord
//              v....v texture coord
// OUTPUT:      1.0..if (u,v) lie inside circle (u - 0.5)**2 + (v - 0.5) = 0.04
//             -1.0..otherwise
// COMMENTS:    [-1,1] maps to [0,255] in LoadChannelData() (CIL_UNSIGNED)

FLOAT fHeight(FLOAT u, FLOAT v)
{
    FLOAT fTemp;
    FLOAT fVector[2];

    fVector[0] = u - 0.5f;
    fVector[1] = v - 0.5f;
    fTemp = fVector[0]*fVector[0] + fVector[1]*fVector[1];

    if (fTemp < 0.04f)
        return 1.0f;
    else
        return -1.0f;
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CEmboss*  pEmboss;
    BOOL      bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    pEmboss = new CEmboss();
    if (!pEmboss) {
        return FALSE;
    }

    // Initialize the scene
    if (!pEmboss->Create(pDisplay)) {
        pEmboss->Release();
        return FALSE;
    }

    bRet = pEmboss->Exhibit(pnExitCode);

    // Clean up the scene
    pEmboss->Release();

    return bRet;
}

// NAME:        CEmboss()
// DESC:        constructor for emboss class
// INPUT:       none
// OUTPUT:      none

CEmboss::CEmboss(VOID)
{
    m_szTestName = TEXT("Emboss bump mapping");
    m_szCommandKey = TEXT("Emboss");

    m_fFactor = 0.0;

    m_fOffset[0] = 0.0;
    m_fOffset[1] = 0.0;

    m_dwFormat = NOFORMAT;

    m_dwFVF = (DWORD) 0;

    m_uIntervals = (UINT) 0;

    m_pVertices = NULL;

//    m_pBaseImage = NULL;
//    m_pHeightImage = NULL;

    m_pBaseTexture = NULL;
    m_pHeightTexture = NULL;

//    m_pMaterial = NULL;
}

// NAME:        ~CEmboss()
// DESC:        destructor for emboss class
// INPUT:       none
// OUTPUT:      none

CEmboss::~CEmboss(VOID)
{
    if (m_pVertices)
        free(m_pVertices);

//    RELEASE(m_pMaterial);

    ReleaseTexture(m_pBaseTexture);
//    RELEASE(m_pBaseImage);

    ReleaseTexture(m_pHeightTexture);
//    RELEASE(m_pHeightImage);
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

VOID CEmboss::CommandLineHelp(VOID)
{
//    WriteCommandLineHelp("$yfactor: $wlemniscate factor (r = sin(factor*theta)) $c(default=2)");
//    WriteCommandLineHelp("$yintervals: $wtraversal intervals $c(default=32)");
//    WriteCommandLineHelp("$yvalidate: $wvalidate $c($wOn$c/Off)");
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      appropriate D3DTESTINIT code
// COMMENTS:    material released before returning D3DTESTINIT_SKIPALL or D3DTESTINIT_ABORT
//              RELEASE(m_pMaterial) causes access violations in TestTerminate otherwise

UINT CEmboss::TestInitialize(VOID)
{
    bool bFound;
    int iDefault, iResult;
    CHANNELDATA Data = { 0 };
    CHAR szBuffer[MAXBUFFER];
//    CImageLoader Loader;
    DWORD dwCaps;
    DWORD dwWidth = (DWORD) TEXTURE_WIDTH, dwHeight = (DWORD) TEXTURE_HEIGHT;
//    INT nDevice = m_pMode->nSrcDevice;
    UINT i, j, k;

    m_dwFormat = NOFORMAT;

    vProcessArgs();

    // check supported texture blend stages 

    if (m_d3dcaps.MaxTextureBlendStages < 2)
    {
        WriteToLog(_T("Device does NOT support sufficient number of texture stages (2)."));
//        RELEASE(m_pMaterial);
        SetTestRange((UINT) 1, (UINT) 1);
        return D3DTESTINIT_SKIPALL;
    }

    // check supported simultaneous textures 

    if (m_d3dcaps.MaxSimultaneousTextures < 2)
    {
        WriteToLog(_T("Device does NOT support sufficient number of simultaneous textures (2)."));
//        RELEASE(m_pMaterial);
        SetTestRange((UINT) 1, (UINT) 1);
        return D3DTESTINIT_SKIPALL;
    }

    // check texture op caps

    dwCaps = m_d3dcaps.TextureOpCaps;

    if (!(dwCaps & D3DTEXOPCAPS_ADDSIGNED))
    {
        WriteToLog(_T("D3DTEXOPCAPS_ADDSIGNED required."));
//        RELEASE(m_pMaterial);
        SetTestRange((UINT) 1, (UINT) 1);
        return D3DTESTINIT_SKIPALL;
    }

    if (!(dwCaps & D3DTEXOPCAPS_MODULATE))
    {
        WriteToLog(_T("D3DTEXOPCAPS_MODULATE required."));
//        RELEASE(m_pMaterial);
        SetTestRange((UINT) 1, (UINT) 1);
        return D3DTESTINIT_SKIPALL;
    }

    // check source blend caps

    dwCaps = m_d3dcaps.SrcBlendCaps;

    if (!(dwCaps & D3DPBLENDCAPS_SRCALPHA))
    {
        WriteToLog(_T("D3DPBLENDCAPS_SRCALPHA blend src alpha required."));
//        RELEASE(m_pMaterial);
        SetTestRange((UINT) 1, (UINT) 1);
        return D3DTESTINIT_SKIPALL;
    }

    // check destination blend caps

    dwCaps = m_d3dcaps.DestBlendCaps;

    if (!(dwCaps & D3DPBLENDCAPS_ZERO))
    {
        WriteToLog(_T("D3DPBLENDCAPS_ZERO blend dest zero required."));
//        RELEASE(m_pMaterial);
        SetTestRange((UINT) 1, (UINT) 1);
        return D3DTESTINIT_SKIPALL;
    }

    // scan for ARGB texture formats

    bFound = true;

/*
    if (!RequestTextureFormats((DWORD) PF_RGB))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED1))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED2))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED4))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED8))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXEDTO8))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_ALPHAPIXELS))
        bFound = false;

    if (!bFound || (0 == m_uCommonTextureFormats))
    {
        WriteToLog(_T("No non-palettized ARGB texture formats enumerated."));
        RELEASE(m_pMaterial);
        SetTestRange((UINT) 1, (UINT) 1);
        return D3DTESTINIT_SKIPALL;
    }
*/
    // initialize triangle mesh

    if (!m_Shape.NewShape(CS_MESH))
    {
        WriteToLog(_T("Unable to create mesh."));
//        RELEASE(m_pMaterial);
        return D3DTESTINIT_ABORT;
    }

    m_dwFVF = D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX2;
    m_Shape.ConvertToFVF(m_dwFVF);
    m_Shape.ScaleCoords((DWORD) 0, (D3DVALUE) 3.0, (D3DVALUE) 3.0);
    m_Shape.OffsetCoords((DWORD) 0, (D3DVALUE) -1.0, (D3DVALUE) -1.0);
    m_Shape.ScaleCoords((DWORD) 1, (D3DVALUE) 3.0, (D3DVALUE) 3.0);
    m_Shape.OffsetCoords((DWORD) 1, (D3DVALUE) -1.0, (D3DVALUE) -1.0);

    m_pVertices = (PFLEXVERT) malloc(sizeof(FLEXVERT)*m_Shape.m_nVertices);

    if (!m_pVertices)
    {
        WriteToLog(_T("Unable to create non strided data."));
//        RELEASE(m_pMaterial);
        return D3DTESTINIT_ABORT;
    }

    for (i = 0; i < (UINT)m_Shape.m_nVertices; i++)
    {
        m_pVertices[i].fPx = m_Shape.m_pVertices[i].x;
        m_pVertices[i].fPy = m_Shape.m_pVertices[i].y;
        m_pVertices[i].fPz = m_Shape.m_pVertices[i].z;

        m_pVertices[i].fNx = m_Shape.m_pVertices[i].nx;
        m_pVertices[i].fNy = m_Shape.m_pVertices[i].ny;
        m_pVertices[i].fNz = m_Shape.m_pVertices[i].nz;

        m_pVertices[i].fSu = m_Shape.m_TexCoords[i].Pair[0].tu;
        m_pVertices[i].fSv = m_Shape.m_TexCoords[i].Pair[0].tv;

        m_pVertices[i].fTu = m_Shape.m_TexCoords[i].Pair[1].tu;
        m_pVertices[i].fTv = m_Shape.m_TexCoords[i].Pair[1].tv;
    }

    // initialize texture image data

    Data.dwAlpha = (DWORD) 0;
    Data.dwRed   = (DWORD) CIL_UNSIGNED;
    Data.dwGreen = (DWORD) CIL_UNSIGNED;
    Data.dwBlue =  (DWORD) CIL_UNSIGNED;
    Data.fAlpha = fHeight;
    Data.fRed   = fHeight;
    Data.fGreen = fHeight;
    Data.fBlue  = fHeight;

//    if (!(m_pBaseImage = Loader.LoadChannelData(dwWidth, dwHeight, &Data)))
//    {
//        WriteToLog(_T("Unable to load base image."));
//        RELEASE(m_pMaterial);
//        return D3DTESTINIT_ABORT;
//    }
    memcpy(&m_DataBase, &Data, sizeof(CHANNELDATA));

    Data.dwAlpha = (DWORD) 0;
    Data.dwRed   = (DWORD) CIL_UNSIGNED;
    Data.dwGreen = (DWORD) CIL_UNSIGNED;
    Data.dwBlue  = (DWORD) CIL_UNSIGNED;
    Data.fAlpha = fHeight;
    Data.fRed   = fConstant;
    Data.fGreen = fConstant;
    Data.fBlue  = fConstant;

//    if (!(m_pHeightImage = Loader.LoadChannelData(dwWidth, dwHeight, &Data)))
//    {
//        WriteToLog(_T("Unable to load height image."));
//        RELEASE(m_pMaterial);
//        return D3DTESTINIT_ABORT;
//    }
    memcpy(&m_DataHeight, &Data, sizeof(CHANNELDATA));

    return D3DTESTINIT_RUN;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test executed successfully
//              false....otherwise
// COMMENTS:    embossed bump mapping technique from ATI web page (Rage 128)
//
//              render states:
//                  multiply alpha (monochrome emboss) with source color (lighted texture)
//
//              stages:
//                  0: modulate texture:diffuse
//                  1: texture coords (1) are shifted, invert alpha, perform signed add
//
//              result:
//                  (height - shifted_height)*tex.RGB*diffuse.RGB
//
//              compute texture coord offset from scaled lemniscate:  radius = sin(2*theta)

bool CEmboss::ExecuteTest(UINT uTest)
{
    bool bFound = false, bResult = true, bValid = true;
    int iStage = (int) 0;
    CHAR szBuffer[MAXBUFFER];
    DOUBLE fRadius, fTheta;
    DWORD dwFormat;
    UINT i, j, uTemp = (UINT) 1;

    for (i = 0; (i < m_uCommonTextureFormats) && !bFound; i++)
        for (j = 0; (j <= m_uIntervals) && !bFound; j++, uTemp++)
                if (uTemp == uTest)
                {
                    dwFormat = (INT) i;
                    bFound = true;
                }

    if (!bFound) {
        SetFrameDuration(1.0f);
        return false;
    }

    if (dwFormat != m_dwFormat)
    {
//        DWORD dwFlags = CDDS_TEXTURE_VIDEO;
        DWORD dwWidth = (DWORD) TEXTURE_WIDTH, dwHeight = (DWORD) TEXTURE_HEIGHT;

        m_dwFormat = dwFormat;
//        m_pMode->nTextureFormat = dwFormat;

        if (m_pBaseTexture) {
            ReleaseTexture(m_pBaseTexture);
            m_pBaseTexture = NULL;
        }

        if (m_pHeightTexture) {
            ReleaseTexture(m_pHeightTexture);
            m_pHeightTexture = NULL;
        }

//    RELEASE(m_pBaseImage);

//        if (!(m_pBaseTexture = CreateTexture(dwWidth, dwHeight, dwFlags, m_pBaseImage)))
        if (!(m_pBaseTexture = CreateChannelDataTexture(m_pDevice, dwWidth, dwHeight, &m_DataBase, m_fmtCommon[dwFormat])))
        {
            WriteToLog(_T("Unable to create base texture."));
            return false;
        }

//        if (!(m_pHeightTexture = CreateTexture(dwWidth, dwHeight, dwFlags, m_pHeightImage)))
        if (!(m_pHeightTexture = CreateChannelDataTexture(m_pDevice, dwWidth, dwHeight, &m_DataHeight, m_fmtCommon[dwFormat])))
        {
            WriteToLog(_T("Unable to create height texture."));
            return false;
        }
    }

    m_Shape.OffsetCoords((DWORD) 1, (D3DVALUE) -m_fOffset[0], (D3DVALUE) -m_fOffset[1]);
    fTheta = (2.0f*pi*(uTest - 1))/((DOUBLE) m_uIntervals);
    fTheta = (fTheta > 2.0f*pi) ? (fTheta - 2.0f*pi) : fTheta;
    fRadius = LEMNISCATE_SCALE*sin(m_fFactor*fTheta);
    m_fOffset[0] = -fRadius*cos(fTheta);
    m_fOffset[1] = -fRadius*sin(fTheta);
    m_Shape.OffsetCoords((DWORD) 1, (D3DVALUE) m_fOffset[0], (D3DVALUE) m_fOffset[1]);

    SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD) TRUE);
    SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD) D3DBLEND_SRCALPHA);
    SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD) D3DBLEND_ZERO);

    SetTextureStageState(iStage, D3DTSS_ADDRESSU, (DWORD) D3DTADDRESS_WRAP);
    SetTextureStageState(iStage, D3DTSS_ADDRESSV, (DWORD) D3DTADDRESS_WRAP);
    SetTextureStageState(iStage, D3DTSS_MAGFILTER, (DWORD) TEXF_LINEAR);
    SetTextureStageState(iStage, D3DTSS_MINFILTER, (DWORD) TEXF_LINEAR);
    SetTextureStageState(iStage, D3DTSS_MIPFILTER, (DWORD) TEXF_NONE);
    SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_MODULATE); // D3DTOP_MODULATE2X
    SetTextureStageState(iStage, D3DTSS_COLORARG1, (DWORD) D3DTA_TEXTURE);
    SetTextureStageState(iStage, D3DTSS_COLORARG2, (DWORD) D3DTA_DIFFUSE);
    SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_SELECTARG1);
    SetTextureStageState(iStage, D3DTSS_ALPHAARG1, (DWORD) D3DTA_TEXTURE);
    SetTextureStageState(iStage, D3DTSS_ALPHAARG2, (DWORD) D3DTA_CURRENT);
    SetTextureStageState(iStage, D3DTSS_TEXCOORDINDEX, (DWORD) 0);
    SetTexture(0, m_pBaseTexture);
    iStage++;

    SetTextureStageState(iStage, D3DTSS_ADDRESSU, (DWORD) D3DTADDRESS_WRAP);
    SetTextureStageState(iStage, D3DTSS_ADDRESSV, (DWORD) D3DTADDRESS_WRAP);
    SetTextureStageState(iStage, D3DTSS_MAGFILTER, (DWORD) TEXF_LINEAR);
    SetTextureStageState(iStage, D3DTSS_MINFILTER, (DWORD) TEXF_LINEAR);
    SetTextureStageState(iStage, D3DTSS_MIPFILTER, (DWORD) TEXF_NONE);
    SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_SELECTARG2);
    SetTextureStageState(iStage, D3DTSS_COLORARG1, (DWORD) D3DTA_TEXTURE);
    SetTextureStageState(iStage, D3DTSS_COLORARG2, (DWORD) D3DTA_CURRENT);
    SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_ADDSIGNED); // ADDSIGNED2X
    SetTextureStageState(iStage, D3DTSS_ALPHAARG1, (DWORD) (D3DTA_TEXTURE | D3DTA_COMPLEMENT));
    SetTextureStageState(iStage, D3DTSS_ALPHAARG2, (DWORD) D3DTA_CURRENT);
    SetTextureStageState(iStage, D3DTSS_TEXCOORDINDEX, (DWORD) 1);
    SetTexture(iStage, m_pHeightTexture);
    iStage++;

    SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_DISABLE);
    SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_DISABLE);
    iStage++;

    if (m_Flags.bCheck(VALIDATE))
    {
        DWORD dwSrc, dwRef;
        HRESULT hSrc, hRef;

        if (!ValidateDevice(&hSrc, &dwSrc, &hRef, &dwRef))
        {
            if (D3D_OK != hSrc)
            {
                WriteToLog(_T("Src requires %d passes:  %X."), dwSrc, hSrc);
                bValid = false;
            }

            if (D3D_OK != hRef)
            {
                WriteToLog(_T("Ref requires %d passes:  %X."), dwRef, hRef);
                bValid = false;
            }
        }
    }

    if (!bValid)
    {
        SkipTests((UINT) 1);
        return true;
    }

    sprintf(szBuffer, "Test:  %d", uTest);
    BeginTestCase(szBuffer);

    SwitchAPI((UINT)m_fFrame);

    m_pDevice->SetViewport(&m_vpFull);
    m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(74, 150, 202), 1.0f, 0);

    m_pDevice->SetViewport(&m_vpTest);

    ClearFrame();

    if (BeginScene())
    {
        if (!RenderPrimitive(D3DPT_TRIANGLELIST, m_dwFVF,
                             m_pVertices, m_Shape.m_nVertices,
                             m_Shape.m_pIndices, m_Shape.m_nIndices, (DWORD) 0))
        {
            WriteToLog(_T("RenderPrimitive() failed."));
            bResult = false;
        }

        // Display the adapter mode
        ShowDisplayMode();

        // Display the frame rate
        ShowFrameRate();

        // Display the console
        m_pDisplay->ShowConsole();

        if (!EndScene())
        {
            WriteToLog(_T("EndScene() failed."));
            bResult = false;
        }
    }
    else
    {
        WriteToLog(_T("BeginScene() failed."));
        bResult = false;
    }

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

//    return bResult;
    return false;
}

// NAME:        ProcessFrame()
// DESC:        process frame
// INPUT:       none
// OUTPUT:      bResult..result of src:ref image comparison

bool CEmboss::ProcessFrame(VOID)
{
    bool bResult;
    CHAR szBuffer[MAXBUFFER];
    static int nPass = 0;
    static int nFail = 0;

    bResult = GetCompareResult(0.15f, 0.78f, (int) 0);

    if (bResult)
    {
        (m_fIncrementForward) ? nPass++ : nPass--;
        sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
    else
    {
        (m_fIncrementForward) ? nFail++ : nFail--;
        sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
    }

    WriteStatus("$gSummary", szBuffer);
    return bResult;
}

// NAME:        TestTerminate()
// DESC:        terminate test
// INPUT:       none
// OUTPUT:      true

bool CEmboss::TestTerminate(VOID)
{
//    RELEASE(m_pMaterial);

    ReleaseTexture(m_pBaseTexture);
    m_pBaseTexture = NULL;
//    RELEASE(m_pBaseImage);

    ReleaseTexture(m_pHeightTexture);
    m_pHeightTexture = NULL;
//    RELEASE(m_pHeightImage);
    return true;
}

// NAME:        SetDefaultLightStates()
// DESC:        set default light states
// INPUT:       none
// OUTPUT:      true.....if SetLightState() succeeds
//              false....otherwise

bool CEmboss::SetDefaultLightStates(VOID)
{
    return SetRenderState(D3DRENDERSTATE_AMBIENT, RGBA_MAKE(164, 164, 164, 255));
}

// NAME:        SetDefaultLights()
// DESC:        set default lights
// INPUT:       none
// OUTPUT:      true.....if default lights set successfully
//              false....otherwise

bool CEmboss::SetDefaultLights(VOID)
{
    bool bSet;
//    CLight *pLight = CreateLight();
    D3DLIGHT8 Data;
    HRESULT     hr;

    memset(&Data, 0, sizeof(Data));
//    Data.dwSize = sizeof(D3DLIGHT2);
    Data.Type = D3DLIGHT_POINT;
    Data.Diffuse.r = 0.4f;
    Data.Diffuse.g = 0.4f;
    Data.Diffuse.b = 0.4f;
    Data.Diffuse.a = 1.0f;
    Data.Position.x = 0.0f;
    Data.Position.y = 0.0f;
    Data.Position.z = -500.0f;
    Data.Range = D3DLIGHT_RANGE_MAX;
    Data.Attenuation0 = 1.0f;
    Data.Attenuation1 = 0.0f;
    Data.Attenuation2 = 0.0f;
//    Data.Flags = D3DLIGHT_ACTIVE;

//    pLight->SetLight(&Data);
//    bSet = SetLight((UINT) 0, pLight);
//    delete pLight;
//    return bSet;

    hr = m_pDevice->SetLight(0, &Data);
    if (FAILED(hr)) {
        return false;
    }

    hr = m_pDevice->LightEnable(0, TRUE);
	
	return (hr == D3D_OK);
}

// NAME:        SetDefaultMaterials()
// DESC:        set default materials
// INPUT:       none
// OUTPUT:      true.....if default materials set successfully
//              false....otherwise

bool CEmboss::SetDefaultMaterials(VOID)
{
    bool bSet;
    D3DMATERIAL8 Data;
    HRESULT hr;

//    RELEASE(m_pMaterial);
//    m_pMaterial = CreateMaterial();

    memset(&Data, 0 , sizeof(Data));
//    Data.dwSize = sizeof(Data);
    Data.Diffuse.r = 0.8f;
    Data.Diffuse.g = 0.8f;
    Data.Diffuse.b = 0.8f;
    Data.Diffuse.a = 0.5f;
    Data.Ambient.r = 0.4f;
    Data.Ambient.g = 0.4f;
    Data.Ambient.b = 0.4f;
    Data.Ambient.a = 0.0f;
    Data.Specular.r = 0.2f;
    Data.Specular.g = 0.2f;
    Data.Specular.b = 0.2f;
    Data.Specular.a = 0.0f;
    Data.Power = 20.0f;
//  Data.dwRampSize = (DWORD) 32;

//    m_pMaterial->SetMaterial(&Data);
//    bSet = SetMaterial(m_pMaterial);
//    return bSet;

    hr = m_pDevice->SetMaterial(&Data);
    return (hr == D3D_OK);
}

// NAME:        SetDefaultMatrices()
// DESC:        setup default matrices
// INPUT:       none
// OUTPUT:      none

bool CEmboss::SetDefaultMatrices(VOID)
{
    D3DMATRIX Matrix;
    D3DVALUE dvNear = 1.0f, dvFar = 8.0f, dvAngle = 30.0f*pi/180.0f;
    D3DVECTOR At, From, Up;

    Matrix = ProjectionMatrix(dvNear, dvFar, dvAngle);
    Matrix = MatrixMult(Matrix, (float) (1.0/Matrix._34));

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION, &Matrix))
        return false;

    At.x = 0.0f;
    At.y = 0.0f;
    At.z = 0.0f;

    From.x = 0.0f;
    From.y = 0.0f;
    From.z = -2.0f;

    Up.x = 0.0f;
    Up.y = 1.0f;
    Up.z = 0.0f;

    Matrix = ViewMatrix(From, At, Up);

    if (!SetTransform(D3DTRANSFORMSTATE_VIEW, &Matrix))
        return false;

    return true;
}

// NAME:        vProcessArgs()
// DESC:        process args
// INPUT:       none
// OUTPUT:      none

VOID CEmboss::vProcessArgs(VOID)
{
    int iDefault, iResult;

    if (KeySet("WHQL"))
    {
        m_Flags.vSet(VALIDATE);
        m_fFactor = (DOUBLE) 2.0;
        m_uIntervals = (UINT) 32;
        return;
    }

    // factor
    // default:  2

    iDefault = (int) 2;
    ReadInteger("factor", iDefault, &iResult);
    m_fFactor = (DOUBLE) ((iResult < MINF) ? MINF : ((iResult >= MAXF) ? MAXF: iResult));

    // intervals
    // default:  32

    iDefault = (int) 32;
    ReadInteger("intervals", iDefault, &iResult);
    m_uIntervals = (UINT) ((iResult < MINI) ? MINI : ((iResult >= MAXI) ? MAXI: iResult));

    // validate
    // default: false

    if (KeySet("validate"))
        m_Flags.vSet(VALIDATE);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\emboss\emboss.h ===
// FILE:        emboss.h
// DESC:        emboss class header for emboss conformance tests
// AUTHOR:      Todd M. Frost

//USETESTFRAME

const DWORD NOFORMAT = 0xFFFFFFFF; // no format index

const UINT MAXBUFFER = 128;

const DWORD VALIDATE = 0x00000001; // validate src/ref devices

typedef struct _FlexVert {
    D3DVALUE fPx;
    D3DVALUE fPy;
    D3DVALUE fPz;
    D3DVALUE fNx;
    D3DVALUE fNy;
    D3DVALUE fNz;
    D3DVALUE fSu;
    D3DVALUE fSv;
    D3DVALUE fTu;
    D3DVALUE fTv;
} FLEXVERT, *PFLEXVERT;

class CEmboss: public CD3DTest
{
    public:
        double m_fFactor;           // lemniscate factor (r = sin(factor*theta))
        double m_fOffset[2];        // texture offset
        DWORD m_dwFormat;           // current ARGB texture format index
        DWORD m_dwFVF;              // flexible vertex format
        PFLEXVERT m_pVertices;      // non strided vertex data
        UINT m_uIntervals;          // number of intervals
        CFlags m_Flags;             // flags class
//        CImageData *m_pBaseImage;   // image data class (base)
//        CImageData *m_pHeightImage; // image data class (height)
        CTexture8 *m_pBaseTexture;   // texture class (base)
        CTexture8 *m_pHeightTexture; // texture class (height)
//        CMaterial *m_pMaterial;     // material class
        CShapesFVF m_Shape;         // shapes FVF class

        CHANNELDATA m_DataBase;
        CHANNELDATA m_DataHeight;
        
    public:
        CEmboss();
        ~CEmboss();
        virtual VOID CommandLineHelp(VOID);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
        virtual bool ProcessFrame(VOID);
        virtual bool TestTerminate(VOID);
        bool SetDefaultLightStates(VOID);
        bool SetDefaultLights(VOID);
        bool SetDefaultMaterials(VOID);
        bool SetDefaultMatrices(VOID);
        bool bEmboss(UINT uTest);
        VOID vProcessArgs(VOID);
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\emboss\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=emboss
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_emboss.lib

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\CShapes.lib \
    $(TEST_LIB_PATH)\l_emboss.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\emboss\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_emboss
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
	emboss.cpp \
	flags.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\emboss\exe\sources.inc ===
TARGETNAME=emboss
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\CShapes.lib \
    $(TEST_LIB_PATH)\l_emboss.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\fog\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\fog\modulex.h ===
#define PREPEND_MODULE(Suffix) fog##Suffix
#define MODULE_STRING "fog"
#pragma comment(linker, "/include:_fog_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\fog\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_fog
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    fog.cpp \
    table.cpp \
    vertex.cpp \
    w.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\fog\fog.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	Fog.h
 *
 ***************************************************************************/

#ifndef __FOG_H__
#define __FOG_H__

//USETESTFRAME

// Defines (Fog type)
#define VERTEX			1
#define TABLE_LINEAR	2
#define TABLE_EXP		3
#define TABLE_EXP2		4
#define W_LINEAR		5
#define W_EXP			6
#define W_EXP2			7

// Defines (Number of tests)
#define VERTEX_TESTS		12
#define TABLE_LINEAR_TESTS	22
#define TABLE_EXP_TESTS		11
#define TABLE_EXP2_TESTS	11
#define W_LINEAR_TESTS		40
#define W_EXP_TESTS			11
#define W_EXP2_TESTS		11

#define TEXTURE_VERTEX_TESTS    4   
#define TEXTURE_TABLE_TESTS     3
#define TEXTURE_W_TESTS         3

// Base Class definitions
class CFogTest: public TESTFRAME(CD3DTest)
{
    // Data
	public:
    D3DTLVERTEX     VertexList[24];
    DWORD           dwVertexCount;
	DWORD			dwFog;
	D3DCOLOR		FogColor;
	CTexture8 *		pTexture;
//	CImageData *	pImage;
	char			msgString[80];

	D3DCOLOR		Stripes[8];

    bool            m_bTextures;
    BOOL            m_bExit;

	public:
	CFogTest();
	~CFogTest();

	// Framework functions
	virtual bool ClearFrame(void);
	virtual bool ExecuteTest(UINT uTestNum);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);
	virtual bool TestTerminate(void);

	// Helper functions
	void VertexTests(int nTest);
    void TextureVertexTests(int nTest);
	void TableTests(void);
	void WTests(void);

    virtual BOOL    AbortedExit(void);

protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

// Vertex Class definitions
class CVertexTest: public CFogTest
{
	public:
	CVertexTest();
	~CVertexTest();

	bool SetDefaultRenderStates(void);
	UINT TestInitialize(void);
};

// TableLinear Class definitions
class CTableLinearTest: public CFogTest
{
	public:
	CTableLinearTest();
	~CTableLinearTest();

	bool SetDefaultRenderStates(void);
	bool SetDefaultMatrices(void);
	UINT TestInitialize(void);
};

// TableExp Class definitions
class CTableExpTest: public CFogTest
{
	public:
	CTableExpTest();
	~CTableExpTest();

	bool SetDefaultRenderStates(void);
	bool SetDefaultMatrices(void);
	UINT TestInitialize(void);
};

// TableExp2 Class definitions
class CTableExp2Test: public CFogTest
{
	public:
	CTableExp2Test();
	~CTableExp2Test();

	bool SetDefaultRenderStates(void);
	bool SetDefaultMatrices(void);
	UINT TestInitialize(void);
};

// WLinear Class definitions
class CWLinearTest: public CFogTest
{
	public:
	CWLinearTest();
	~CWLinearTest();

	bool SetDefaultRenderStates(void);
	bool SetDefaultMatrices(void);
	UINT TestInitialize(void);
};

// WExp Class definitions
class CWExpTest: public CFogTest
{
	public:
	CWExpTest();
	~CWExpTest();

	bool SetDefaultRenderStates(void);
	bool SetDefaultMatrices(void);
	UINT TestInitialize(void);
};

// WExp2 Class definitions
class CWExp2Test: public CFogTest
{
	public:
	CWExp2Test();
	~CWExp2Test();

	bool SetDefaultRenderStates(void);
	bool SetDefaultMatrices(void);
	UINT TestInitialize(void);
};

// Texture Vertex Class definitions
class CTextureVertexTest: public CFogTest
{
	public:
	CTextureVertexTest();
	~CTextureVertexTest();

	bool SetDefaultRenderStates(void);
	UINT TestInitialize(void);
};

// Texture TableLinear Class definitions
class CTextureTableLinearTest: public CFogTest
{
	public:
	CTextureTableLinearTest();
	~CTextureTableLinearTest();

	bool SetDefaultRenderStates(void);
	bool SetDefaultMatrices(void);
	UINT TestInitialize(void);
};

// Texture TableExp Class definitions
class CTextureTableExpTest: public CFogTest
{
	public:
	CTextureTableExpTest();
	~CTextureTableExpTest();

	bool SetDefaultRenderStates(void);
	bool SetDefaultMatrices(void);
	UINT TestInitialize(void);
};

// Texture TableExp2 Class definitions
class CTextureTableExp2Test: public CFogTest
{
	public:
	CTextureTableExp2Test();
	~CTextureTableExp2Test();

	bool SetDefaultRenderStates(void);
	bool SetDefaultMatrices(void);
	UINT TestInitialize(void);
};

// Texture WLinear Class definitions
class CTextureWLinearTest: public CFogTest
{
	public:
	CTextureWLinearTest();
	~CTextureWLinearTest();

	bool SetDefaultRenderStates(void);
	bool SetDefaultMatrices(void);
	UINT TestInitialize(void);
};

// Texture WExp Class definitions
class CTextureWExpTest: public CFogTest
{
	public:
	CTextureWExpTest();
	~CTextureWExpTest();

	bool SetDefaultRenderStates(void);
	bool SetDefaultMatrices(void);
	UINT TestInitialize(void);
};

// Texture WExp2 Class definitions
class CTextureWExp2Test: public CFogTest
{
	public:
	CTextureWExp2Test();
	~CTextureWExp2Test();

	bool SetDefaultRenderStates(void);
	bool SetDefaultMatrices(void);
	UINT TestInitialize(void);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\fog\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\fog\fog.cpp ===
#define STRICT
#define BURN_IN_HELL
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Fog.h"

// Global Test and App instance
//CD3DWindowFramework		App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CFogTest*       pFogTest;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 14 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pFogTest = new CVertexTest();
                break;
            case 1:
                pFogTest = new CTableLinearTest();
                break;
            case 2:
                pFogTest = new CTableExpTest();
                break;
            case 3:
                pFogTest = new CTableExp2Test();
                break;
            case 4:
                pFogTest = new CWLinearTest();
                break;
            case 5:
                pFogTest = new CWExpTest();
                break;
            case 6:
                pFogTest = new CWExp2Test();
                break;
            case 7:
                pFogTest = new CTextureVertexTest();
                break;
            case 8:
                pFogTest = new CTextureTableLinearTest();
                break;
            case 9:
                pFogTest = new CTextureTableExpTest();
                break;
            case 10:
                pFogTest = new CTextureTableExp2Test();
                break;
            case 11:
                pFogTest = new CTextureWLinearTest();
                break;
            case 12:
                pFogTest = new CTextureWExpTest();
                break;
            case 13:
                pFogTest = new CTextureWExp2Test();
                break;
        }

        if (!pFogTest) {
            return FALSE;
        }

        // Initialize the scene
        if (pFogTest->Create(pDisplay)) {

            bRet = pFogTest->Exhibit(pnExitCode);

            bQuit = pFogTest->AbortedExit();
        }

        // Clean up the scene
        pFogTest->Release();
    }

    return bRet;
}

CFogTest::CFogTest()
{
    pTexture = NULL;
//    pImage = NULL;

    m_bExit = FALSE;
}
 
CFogTest::~CFogTest()
{
}

bool CFogTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255));
}

bool CFogTest::ExecuteTest(UINT uTestNum)
{
    int nTextureFormat;
    int nTest = uTestNum;
	char	szBuffer[80];

	// Initialize some variables
	dwVertexCount = 0;
	msgString[0] = '\0';
	szBuffer[0] = '\0';

    if (m_bTextures)
    {
        // Reset test number based on texture formats
 	    nTest = ((uTestNum-1) / m_uCommonTextureFormats) + 1;

        // Cleanup previous texture
	    SetTexture(0, NULL);
	    ReleaseTexture(pTexture);
        pTexture = NULL;
    }

    // Let's build some triangles.
	switch (dwFog)
	{
		case VERTEX:
            if (m_bTextures)
			    TextureVertexTests(nTest);
            else
                VertexTests(nTest);
			break;
		case TABLE_LINEAR:
			{
   				float	fStart, fEnd;

                // Build the Table Fog triangles
				TableTests();

                if (m_bTextures)
                {
                    fStart = (float) (1 - (nTest / (TEXTURE_TABLE_TESTS - 1)));
                    fEnd = (float) (1 - (nTest / TEXTURE_TABLE_TESTS));
                }
                else
                {
       				int nDepth = (TABLE_LINEAR_TESTS / 2) - nTest;

				    if (nDepth >= 0)
				    {
					    fStart = 0.0f;
					    fEnd = fStart + (nDepth / 10.0f);
				    }
				    else
				    {
					    fEnd = 1.0f;
					    fStart = fEnd - ((nDepth + 11) / 10.0f);
				    }
                }

				// Update the color and value status buffer
				sprintf(szBuffer,"Fog: Blue, Triangles: White, Strips: Red");
				WriteStatus("$gColor Values$y",szBuffer);

				sprintf(szBuffer,"Start: %.2f, End: %.2f", fStart, fEnd);
				WriteStatus("$gFog Values$y",szBuffer);

				// Update the logfile
				sprintf(msgString, "%sFog: Blue, Start: %.2f, End: %.2f",msgString, fStart, fEnd);

				SetRenderState(D3DRS_FOGSTART, F2DW(fStart));
				SetRenderState(D3DRS_FOGEND, F2DW(fEnd));
//				SetRenderState(D3DRENDERSTATE_FOGTABLESTART, fStart);
//				SetRenderState(D3DRENDERSTATE_FOGTABLEEND, fEnd);
			}
			break;
		case TABLE_EXP:
		case TABLE_EXP2:
			{
                float fDensity;

				if (m_bTextures)
                    fDensity = 1 - (TEXTURE_TABLE_TESTS - nTest) / 2.0f;
                else
                    fDensity = (TABLE_EXP_TESTS - nTest) / 10.0f;

				// Build the Table Fog triangles
				TableTests();

				// Update the color and value status buffer
				sprintf(szBuffer,"Fog: Blue, Triangles: White, Strips: Red");
				WriteStatus("$gColor Values$y",szBuffer);

				sprintf(szBuffer,"Density: %.2f", fDensity);
				WriteStatus("$gFog Values$y",szBuffer);

				// Update the logfile
				sprintf(msgString, "%sFog: Blue, Density: %.2f",msgString, fDensity);

//				SetRenderState(D3DRENDERSTATE_FOGTABLEDENSITY, fDensity);
				SetRenderState(D3DRENDERSTATE_FOGDENSITY, F2DW(fDensity));
			}
			break;
		case W_LINEAR:
			{
				float	fStart, fEnd;

				// Build the W Fog triangles
				WTests();

                if (m_bTextures)
                {
                    if (nTest == 1)
                        fStart = fEnd = 10.0f;
                    else if (nTest == 3)
                        fStart = fEnd = 1.0f;
                    else
                    {
                        fStart = 1.0f;
                        fEnd = 5.0f;
                    }
                }
                else
                {
   				    int	nDepth = (W_LINEAR_TESTS / 2) - nTest;

				    if ((nTest / 20) == 0)
				    {
					    fStart = 1.0f;
					    fEnd = fStart + ((nTest-1) * 0.5f);
				    }
				    else
				    {
					    fEnd = 10.0f;
					    fStart = fEnd - ((nTest-20) * 0.5f);
				    }
                }

				// Update the color and value status buffer
				sprintf(szBuffer,"Fog: Red, Triangles: White, Strips: Red");
				WriteStatus("$gColor Values$y",szBuffer);

				sprintf(szBuffer,"Start: %.2f, End: %.2f", fStart, fEnd);
				WriteStatus("$gFog Values$y",szBuffer);

				// Update the logfile
				sprintf(msgString, "%sFog: Red, Start: %.2f, End: %.2f",msgString, fStart, fEnd);

//				SetRenderState(D3DRENDERSTATE_FOGTABLESTART, fStart);
//				SetRenderState(D3DRENDERSTATE_FOGTABLEEND, fEnd);
				SetRenderState(D3DRENDERSTATE_FOGSTART, F2DW(fStart));
				SetRenderState(D3DRENDERSTATE_FOGEND, F2DW(fEnd));
			}
			break;
		case W_EXP:
		case W_EXP2:
			{
                float fDensity;

				if (m_bTextures)
                    fDensity = 1 - (TEXTURE_W_TESTS - nTest) / 2.0f;
                else
                    fDensity = (W_EXP_TESTS - nTest) / 10.0f;

				// Build the W Fog triangles
				WTests();

				// Update the color and value status buffer
				sprintf(szBuffer,"Fog: Red, Triangles: White, Strips: Red");
				WriteStatus("$gColor Values$y",szBuffer);

				sprintf(szBuffer,"Density: %.2f", fDensity);
				WriteStatus("$gFog Values$y",szBuffer);

				// Update the logfile
				sprintf(msgString, "%sFog: Red, Density: %.2f",msgString, fDensity);

//				SetRenderState(D3DRENDERSTATE_FOGTABLEDENSITY, fDensity);
				SetRenderState(D3DRENDERSTATE_FOGDENSITY, F2DW(fDensity));
			}
			break;
	}

	// Set the fog color
	SetRenderState(D3DRENDERSTATE_FOGCOLOR, FogColor);

    if (m_bTextures)
    {
	    // Cycle the common texture formats
	    nTextureFormat = (uTestNum-1) % m_uCommonTextureFormats;

	    // Create and set the texture
	    pTexture = (CTexture8*)CreateStripedTexture(m_pDevice, 64, 64, 8, Stripes, false);

	    // Tell the framework what texture to use
	    if (NULL != pTexture)
	    {
		    SetTexture(0,pTexture);

            if (m_dwVersion <= 0x0700)
            {
//    		    sprintf(msgString, "%s, Tex: ",msgString);
//        	    GetTexFmtDesc(&m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat,msgString+strlen(msgString),80-strlen(msgString));
            }
            else
#ifndef UNICODE
    		    sprintf(msgString, "%s, Tex: %s",msgString,D3DFmtToString(m_fmtCommon[nTextureFormat]));
#else
    		    sprintf(msgString, "%s, Tex: %S",msgString,D3DFmtToString(m_fmtCommon[nTextureFormat]));
#endif // UNICODE
	    }
	    else
	    {
/*
		    if (m_dwVersion == 0x0600)
		    {
			    DWORD dwFourCC = m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat.dwFourCC;

			    if ((dwFourCC == MAKEFOURCC('U','Y','V','Y')) ||
				    (dwFourCC == MAKEFOURCC('Y','U','Y','2')))
			    {
				    char	szFourCC[5];

				    szFourCC[0] = (char)(dwFourCC & 0xff);
				    szFourCC[1] = (char)((dwFourCC >> 8) & 0xff);
				    szFourCC[2] = (char)((dwFourCC >> 16) & 0xff);
				    szFourCC[3] = (char)((dwFourCC >> 24) & 0xff);
				    szFourCC[4] = '\0';

				    WriteToLog("Can not create a FourCC (%s) texture on Dx6.\n",szFourCC);
				    SkipTests(1);
				    return false;
			    }
		    }
*/
		    WriteToLog("CreateTexture() failed with HResult = %X.\n",GetLastError());

            TestFinish(D3DTESTFINISH_ABORT);
		    return false;
	    }
    }

    // Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}

void CFogTest::SceneRefresh()
{
	if (BeginScene())
	{
		// Render the data.
		if (dwFog == VERTEX)
		{
			RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);
		}
		else
		{
			RenderPrimitive(D3DPT_TRIANGLESTRIP,D3DFVF_TLVERTEX,VertexList,8,NULL,0,0);
			RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList+8,dwVertexCount-8,NULL,0,0);
		}

		EndScene();
	}	
}

bool CFogTest::ProcessFrame(void)
{
	char	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;
    bool	bResult;

     // Use the standard 15%
    bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how the compare went
    if (bResult)
    {
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
	}

	WriteStatus("$gOverall Results",szBuffer);

    return bResult;
}

bool CFogTest::TestTerminate(void)
{
	// Cleanup texture & image data
	SetTexture(0, NULL);
    ReleaseTexture(pTexture);
    pTexture = NULL;
//    RELEASE(pImage);

	return true;
}

//******************************************************************************
BOOL CFogTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CFogTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CFogTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\fog\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=fog
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_fog.lib

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_fog.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\fog\table.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Fog.h"
//#include "cimageloader.h"

//************************************************************************
// TableLinear Test functions

CTableLinearTest::CTableLinearTest()
{
	m_szTestName = TEXT("Linear Table Fog");
	m_szCommandKey = TEXT("TableLinear");

	// Tell parent class which Fog we are
	dwFog = TABLE_LINEAR;

    // Disable textures
    m_bTextures = false;
}

CTableLinearTest::~CTableLinearTest()
{
}

bool CTableLinearTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using Table Fog Linear
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_LINEAR);
	return true;
}

bool CTableLinearTest::SetDefaultMatrices(void)
{
	// Setup the projection matrix for Z-based pixel fog
    D3DMATRIX Matrix = IdentityMatrix();

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CTableLinearTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;
	UINT Result = D3DTESTINIT_RUN;

	// Setup the Test range
	SetTestRange(1, TABLE_LINEAR_TESTS);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGTABLE))
	{
		WriteToLog("Device capability not supported: Fog Table.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	if (m_dwVersion >= 0x0700)
	{
		if (!(dwRasterCaps & D3DPRASTERCAPS_ZFOG))
		{
			WriteToLog("Device capability not supported: Z Fog.\n");
			Result = D3DTESTINIT_SKIPALL;
		}
	}

	// Initialize FogColor variable to Blue
	FogColor = RGB_MAKE(0,0,255);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	return Result;
}

//************************************************************************
// TableExp Test functions

CTableExpTest::CTableExpTest()
{
	m_szTestName = TEXT("Exp Table Fog");
	m_szCommandKey = TEXT("TableExp");

	// Tell parent class which Fog we are
	dwFog = TABLE_EXP;

    // Disable textures
    m_bTextures = false;
}

CTableExpTest::~CTableExpTest()
{
}

bool CTableExpTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using Table Fog Exp
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_EXP);
	return true;
}

bool CTableExpTest::SetDefaultMatrices(void)
{
	// Setup the projection matrix for Z-based pixel fog
    D3DMATRIX Matrix = IdentityMatrix();

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CTableExpTest::TestInitialize(void)
{
//	UINT n = m_pMode->nSrcDevice;
	UINT Result = D3DTESTINIT_RUN;

    // Setup the Test range
	SetTestRange(1, TABLE_EXP_TESTS);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGTABLE))
	{
		WriteToLog("Device capability not supported: Fog Table.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	if (m_dwVersion >= 0x0700)
	{
		if (!(dwRasterCaps & D3DPRASTERCAPS_ZFOG))
		{
			WriteToLog("Device capability not supported: Z Fog.\n");
			Result = D3DTESTINIT_SKIPALL;
		}
	}

	// Initialize FogColor variable to Blue
	FogColor = RGB_MAKE(0,0,255);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	return Result;
}

//************************************************************************
// TableExp2 Test functions

CTableExp2Test::CTableExp2Test()
{
	m_szTestName = TEXT("Exp2 Table Fog");
	m_szCommandKey = TEXT("TableExp2");

	// Tell parent class which Fog we are
	dwFog = TABLE_EXP2;

    // Disable textures
    m_bTextures = false;
}

CTableExp2Test::~CTableExp2Test()
{
}

bool CTableExp2Test::SetDefaultRenderStates(void)
{
	// Make sure that we are using Table Fog Exp2
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_EXP2);
	return true;
}

bool CTableExp2Test::SetDefaultMatrices(void)
{
	// Setup the projection matrix for Z-based pixel fog
    D3DMATRIX Matrix = IdentityMatrix();

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CTableExp2Test::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;
	UINT Result = D3DTESTINIT_RUN;

	// Setup the Test range
	SetTestRange(1, TABLE_EXP2_TESTS);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGTABLE))
	{
		WriteToLog("Device capability not supported: Fog Table.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	if (m_dwVersion >= 0x0700)
	{
		if (!(dwRasterCaps & D3DPRASTERCAPS_ZFOG))
		{
			WriteToLog("Device capability not supported: Z Fog.\n");
			Result = D3DTESTINIT_SKIPALL;
		}
	}

	// Initialize FogColor variable to Blue
	FogColor = RGB_MAKE(0,0,255);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	return Result;
}

//************************************************************************
// Texture TableLinear Test functions

CTextureTableLinearTest::CTextureTableLinearTest()
{
	m_szTestName = TEXT("Textured Linear Table Fog");
	m_szCommandKey = TEXT("TextureTableLinear");

	// Tell parent class which Fog we are
	dwFog = TABLE_LINEAR;

    // Disable textures
    m_bTextures = true;
}

CTextureTableLinearTest::~CTextureTableLinearTest()
{
}

bool CTextureTableLinearTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using Table Fog Linear
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_LINEAR);
	SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD) D3DTBLEND_DECAL);
	return true;
}

bool CTextureTableLinearTest::SetDefaultMatrices(void)
{
	// Setup the projection matrix for Z-based pixel fog
    D3DMATRIX Matrix = IdentityMatrix();

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CTextureTableLinearTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;
	UINT Result = D3DTESTINIT_RUN;

	// Request all texture formats except bumpmap
//	if (!RequestTextureFormats(PF_RGB | PF_FOURCC | PF_LUMINANCE))
//	{
//		WriteToLog("No texture formats found.\n");
//		return D3DTESTINIT_ABORT;
//	}

    // Setup the Test range
	SetTestRange(1, TEXTURE_TABLE_TESTS * m_uCommonTextureFormats);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGTABLE))
	{
		WriteToLog("Device capability not supported: Fog Table.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	if (m_dwVersion >= 0x0700)
	{
		if (!(dwRasterCaps & D3DPRASTERCAPS_ZFOG))
		{
			WriteToLog("Device capability not supported: Z Fog.\n");
			Result = D3DTESTINIT_SKIPALL;
		}
	}

	// Initialize FogColor variable to Blue
	FogColor = RGB_MAKE(0,0,255);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	// Setup the colors for the Stripes array
//	D3DCOLOR		Stripes[8];

	Stripes[0] = RGBA_MAKE(255,255,255,255);// White
	Stripes[1] = RGBA_MAKE(255,0,0,255);	// Red
	Stripes[2] = RGBA_MAKE(0,255,0,255);	// Green
	Stripes[3] = RGBA_MAKE(0,0,255,255);	// Blue
	Stripes[4] = RGBA_MAKE(255,255,0,255);	// Yellow
	Stripes[5] = RGBA_MAKE(255,0,255,255);	// Magenta
	Stripes[6] = RGBA_MAKE(0,255,255,255);	// Cyan
	Stripes[7] = RGBA_MAKE(128,128,128,255);// Grey

	// Create the stripe image data
//    CImageLoader    Image;

//    pImage = Image.LoadStripes(64,64,8,Stripes,false); 

    return Result;
}

//************************************************************************
// Texture TableExp Test functions

CTextureTableExpTest::CTextureTableExpTest()
{
	m_szTestName = TEXT("Textured Exp Table Fog");
	m_szCommandKey = TEXT("TextureTableExp");

	// Tell parent class which Fog we are
	dwFog = TABLE_EXP;

    // Disable textures
    m_bTextures = true;
}

CTextureTableExpTest::~CTextureTableExpTest()
{
}

bool CTextureTableExpTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using Table Fog Exp
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_EXP);
	SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD) D3DTBLEND_DECAL);
	return true;
}

bool CTextureTableExpTest::SetDefaultMatrices(void)
{
	// Setup the projection matrix for Z-based pixel fog
    D3DMATRIX Matrix = IdentityMatrix();

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CTextureTableExpTest::TestInitialize(void)
{
//	UINT n = m_pMode->nSrcDevice;
	UINT Result = D3DTESTINIT_RUN;

	// Request all texture formats except bumpmap
//	if (!RequestTextureFormats(PF_RGB | PF_FOURCC | PF_LUMINANCE))
//	{
//		WriteToLog("No texture formats found.\n");
//		return D3DTESTINIT_ABORT;
//	}

    // Setup the Test range
	SetTestRange(1, TEXTURE_TABLE_TESTS * m_uCommonTextureFormats);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGTABLE))
	{
		WriteToLog("Device capability not supported: Fog Table.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	if (m_dwVersion >= 0x0700)
	{
		if (!(dwRasterCaps & D3DPRASTERCAPS_ZFOG))
		{
			WriteToLog("Device capability not supported: Z Fog.\n");
			Result = D3DTESTINIT_SKIPALL;
		}
	}

	// Initialize FogColor variable to Blue
	FogColor = RGB_MAKE(0,0,255);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	// Setup the colors for the Stripes array
//	D3DCOLOR		Stripes[8];

	Stripes[0] = RGBA_MAKE(255,255,255,255);// White
	Stripes[1] = RGBA_MAKE(255,0,0,255);	// Red
	Stripes[2] = RGBA_MAKE(0,255,0,255);	// Green
	Stripes[3] = RGBA_MAKE(0,0,255,255);	// Blue
	Stripes[4] = RGBA_MAKE(255,255,0,255);	// Yellow
	Stripes[5] = RGBA_MAKE(255,0,255,255);	// Magenta
	Stripes[6] = RGBA_MAKE(0,255,255,255);	// Cyan
	Stripes[7] = RGBA_MAKE(128,128,128,255);// Grey

	// Create the stripe image data
//    CImageLoader    Image;

//    pImage = Image.LoadStripes(64,64,8,Stripes,false); 

    return Result;
}

//************************************************************************
// Texture TableExp2 Test functions

CTextureTableExp2Test::CTextureTableExp2Test()
{
	m_szTestName = TEXT("Textured Exp2 Table Fog");
	m_szCommandKey = TEXT("TextureTableExp2");

	// Tell parent class which Fog we are
	dwFog = TABLE_EXP2;

    // Disable textures
    m_bTextures = true;
}

CTextureTableExp2Test::~CTextureTableExp2Test()
{
}

bool CTextureTableExp2Test::SetDefaultRenderStates(void)
{
	// Make sure that we are using Table Fog Exp2
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_EXP2);
	SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD) D3DTBLEND_DECAL);
	return true;
}

bool CTextureTableExp2Test::SetDefaultMatrices(void)
{
	// Setup the projection matrix for Z-based pixel fog
    D3DMATRIX Matrix = IdentityMatrix();

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CTextureTableExp2Test::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;
	UINT Result = D3DTESTINIT_RUN;

	// Request all texture formats except bumpmap
//	if (!RequestTextureFormats(PF_RGB | PF_FOURCC | PF_LUMINANCE))
//	{
//		WriteToLog("No texture formats found.\n");
//		return D3DTESTINIT_ABORT;
//	}

    // Setup the Test range
	SetTestRange(1, TEXTURE_TABLE_TESTS * m_uCommonTextureFormats);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGTABLE))
	{
		WriteToLog("Device capability not supported: Fog Table.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	if (m_dwVersion >= 0x0700)
	{
		if (!(dwRasterCaps & D3DPRASTERCAPS_ZFOG))
		{
			WriteToLog("Device capability not supported: Z Fog.\n");
			Result = D3DTESTINIT_SKIPALL;
		}
	}

	// Initialize FogColor variable to Blue
	FogColor = RGB_MAKE(0,0,255);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

    // Setup the colors for the Stripes array
//	D3DCOLOR		Stripes[8];

	Stripes[0] = RGBA_MAKE(255,255,255,255);// White
	Stripes[1] = RGBA_MAKE(255,0,0,255);	// Red
	Stripes[2] = RGBA_MAKE(0,255,0,255);	// Green
	Stripes[3] = RGBA_MAKE(0,0,255,255);	// Blue
	Stripes[4] = RGBA_MAKE(255,255,0,255);	// Yellow
	Stripes[5] = RGBA_MAKE(255,0,255,255);	// Magenta
	Stripes[6] = RGBA_MAKE(0,255,255,255);	// Cyan
	Stripes[7] = RGBA_MAKE(128,128,128,255);// Grey

	// Create the stripe image data
//    CImageLoader    Image;

//    pImage = Image.LoadStripes(64,64,8,Stripes,false); 

	return Result;
}

//************************************************************************
// Internal API:    TableTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CFogTest::TableTests(void)
{
	// Thin Triangle Strip on the top
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  16.5f, 56.5f + (float)m_vpTest.Y, 0.0000f), 1.0f, RGBA_MAKE(255,0,0,255),0, 0.0f, 0.125f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  16.5f, 28.5f + (float)m_vpTest.Y, 0.0000f), 1.0f, RGBA_MAKE(255,0,0,255),0, 0.0f, 0.000f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 304.5f, 56.5f + (float)m_vpTest.Y, 0.9999f), 1.0f, RGBA_MAKE(255,0,0,255),0, 1.0f, 0.125f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 304.5f, 28.5f + (float)m_vpTest.Y, 0.9999f), 1.0f, RGBA_MAKE(255,0,0,255),0, 1.0f, 0.000f);

	// Thin Triangle Strip on the bottom
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  16.5f, 252.5f + (float)m_vpTest.Y, 0.9999f), 1.0f, RGBA_MAKE(255,0,0,255),0, 0.0f, 1.000f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  16.5f, 224.5f + (float)m_vpTest.Y, 0.9999f), 1.0f, RGBA_MAKE(255,0,0,255),0, 0.0f, 0.875f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 304.5f, 252.5f + (float)m_vpTest.Y, 0.0000f), 1.0f, RGBA_MAKE(255,0,0,255),0, 1.0f, 1.000f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 304.5f, 224.5f + (float)m_vpTest.Y, 0.0000f), 1.0f, RGBA_MAKE(255,0,0,255),0, 1.0f, 0.875f);

	// Four white Triangles in the middle
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  16.5f, 210.5f + (float)m_vpTest.Y, 0.2f), 1.0f, RGBA_MAKE(255,255,255,255),0, 0.0000f, 0.8125f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  64.5f,  70.5f + (float)m_vpTest.Y, 0.2f), 1.0f, RGBA_MAKE(255,255,255,255),0, 0.1667f, 0.1875f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 112.5f, 210.5f + (float)m_vpTest.Y, 0.2f), 1.0f, RGBA_MAKE(255,255,255,255),0, 0.3333f, 0.8125f);

	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 128.5f, 210.5f + (float)m_vpTest.Y, 0.4f), 1.0f, RGBA_MAKE(255,255,255,255),0, 0.3889f, 0.8125f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  80.5f,  70.5f + (float)m_vpTest.Y, 0.4f), 1.0f, RGBA_MAKE(255,255,255,255),0, 0.2222f, 0.1875f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 176.5f,  70.5f + (float)m_vpTest.Y, 0.4f), 1.0f, RGBA_MAKE(255,255,255,255),0, 0.5556f, 0.1875f);
                                                                                                                                                                                         
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 144.5f, 210.5f + (float)m_vpTest.Y, 0.6f), 1.0f, RGBA_MAKE(255,255,255,255),0, 0.4444f, 0.8125f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 192.5f,  70.5f + (float)m_vpTest.Y, 0.6f), 1.0f, RGBA_MAKE(255,255,255,255),0, 0.6111f, 0.1875f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.5f, 210.5f + (float)m_vpTest.Y, 0.6f), 1.0f, RGBA_MAKE(255,255,255,255),0, 0.7778f, 0.8125f);
                                                                                                                                                                                         
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 256.5f, 210.5f + (float)m_vpTest.Y, 0.8f), 1.0f, RGBA_MAKE(255,255,255,255),0, 0.8333f, 0.8125f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 208.5f,  70.5f + (float)m_vpTest.Y, 0.8f), 1.0f, RGBA_MAKE(255,255,255,255),0, 0.6667f, 0.1875f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 304.5f,  70.5f + (float)m_vpTest.Y, 0.8f), 1.0f, RGBA_MAKE(255,255,255,255),0, 1.0000f, 0.1875f);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\fog\w.cpp ===
#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Fog.h"
//#include "cimageloader.h"

//************************************************************************
// WLinear Test functions

CWLinearTest::CWLinearTest()
{
	m_szTestName = TEXT("Linear W Fog");
	m_szCommandKey = TEXT("WLinear");

	// Tell parent class which Fog we are
	dwFog = W_LINEAR;

    // Disable textures
    m_bTextures = false;
}

CWLinearTest::~CWLinearTest()
{
}

bool CWLinearTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using W Fog Linear
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_LINEAR);
	return true;
}

bool CWLinearTest::SetDefaultMatrices(void)
{
	// Setup the projection matrix for Eye-Relative pixel fog
	D3DMATRIX Matrix = ProjectionMatrix(1.0f, 10.0f, pi/3);

	Matrix = MatrixMult(Matrix, 2.0f);

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CWLinearTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;
	UINT Result = D3DTESTINIT_RUN;

	// Setup the Test range
	SetTestRange(1, W_LINEAR_TESTS);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGTABLE))
	{
		WriteToLog("Device capability not supported: Fog Table.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	if (!(dwRasterCaps & D3DPRASTERCAPS_WFOG))
	{
		WriteToLog("Device capability not supported: W Fog.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	// Initialize FogColor variable to Red
	FogColor = RGB_MAKE(255,0,0);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	return Result;
}

//************************************************************************
// WExp Test functions

CWExpTest::CWExpTest()
{
	m_szTestName = TEXT("Exp W Fog");
	m_szCommandKey = TEXT("WExp");

	// Tell parent class which Fog we are
	dwFog = W_EXP;

    // Disable textures
    m_bTextures = false;
}

CWExpTest::~CWExpTest()
{
}

bool CWExpTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using W Fog Exp
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_EXP);
	return true;
}

bool CWExpTest::SetDefaultMatrices(void)
{
	// Setup the projection matrix for Eye-Relative pixel fog
	D3DMATRIX Matrix = ProjectionMatrix(1.0f, 10.0f, pi/3);

	Matrix = MatrixMult(Matrix, 2.0f);

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CWExpTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;
	UINT Result = D3DTESTINIT_RUN;

	// Setup the Test range
	SetTestRange(1, W_EXP_TESTS);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGTABLE))
	{
		WriteToLog("Device capability not supported: Fog Table.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	if (!(dwRasterCaps & D3DPRASTERCAPS_WFOG))
	{
		WriteToLog("Device capability not supported: W Fog.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	// Initialize FogColor variable to Red
	FogColor = RGB_MAKE(255,0,0);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	return Result;
}

//************************************************************************
// WExp2 Test functions

CWExp2Test::CWExp2Test()
{
	m_szTestName = TEXT("Exp2 W Fog");
	m_szCommandKey = TEXT("WExp2");

	// Tell parent class which Fog we are
	dwFog = W_EXP2;

    // Disable textures
    m_bTextures = false;
}

CWExp2Test::~CWExp2Test()
{
}

bool CWExp2Test::SetDefaultRenderStates(void)
{
	// Make sure that we are using W Fog Exp2
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_EXP2);
	return true;
}

bool CWExp2Test::SetDefaultMatrices(void)
{
	// Setup the projection matrix for Eye-Relative pixel fog
	D3DMATRIX Matrix = ProjectionMatrix(1.0f, 10.0f, pi/3);

	Matrix = MatrixMult(Matrix, 2.0f);

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CWExp2Test::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;
	UINT Result = D3DTESTINIT_RUN;

	// Setup the Test range
	SetTestRange(1, W_EXP2_TESTS);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGTABLE))
	{
		WriteToLog("Device capability not supported: Fog Table.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	if (!(dwRasterCaps & D3DPRASTERCAPS_WFOG))
	{
		WriteToLog("Device capability not supported: W Fog.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	// Initialize FogColor variable to Red
	FogColor = RGB_MAKE(255,0,0);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	return Result;
}

//************************************************************************
// Texture WLinear Test functions

CTextureWLinearTest::CTextureWLinearTest()
{
	m_szTestName = TEXT("Textured Linear W Fog");
	m_szCommandKey = TEXT("TextureWLinear");

	// Tell parent class which Fog we are
	dwFog = W_LINEAR;

    // Disable textures
    m_bTextures = true;
}

CTextureWLinearTest::~CTextureWLinearTest()
{
}

bool CTextureWLinearTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using W Fog Linear
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_LINEAR);
	SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD) D3DTBLEND_DECAL);
	return true;
}

bool CTextureWLinearTest::SetDefaultMatrices(void)
{
	// Setup the projection matrix for Eye-Relative pixel fog
	D3DMATRIX Matrix = ProjectionMatrix(1.0f, 10.0f, pi/3);

	Matrix = MatrixMult(Matrix, 2.0f);

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CTextureWLinearTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;
	UINT Result = D3DTESTINIT_RUN;

	// Request all texture formats except bumpmap
//	if (!RequestTextureFormats(PF_RGB | PF_FOURCC | PF_LUMINANCE))
//	{
//		WriteToLog("No texture formats found.\n");
//		return D3DTESTINIT_ABORT;
//	}

    // Setup the Test range
	SetTestRange(1, TEXTURE_W_TESTS * m_uCommonTextureFormats);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGTABLE))
	{
		WriteToLog("Device capability not supported: Fog Table.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	if (!(dwRasterCaps & D3DPRASTERCAPS_WFOG))
	{
		WriteToLog("Device capability not supported: W Fog.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	// Initialize FogColor variable to Red
	FogColor = RGB_MAKE(255,0,0);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

    // Setup the colors for the Stripes array
//	D3DCOLOR		Stripes[8];

	Stripes[0] = RGBA_MAKE(255,255,255,255);// White
	Stripes[1] = RGBA_MAKE(255,0,0,255);	// Red
	Stripes[2] = RGBA_MAKE(0,255,0,255);	// Green
	Stripes[3] = RGBA_MAKE(0,0,255,255);	// Blue
	Stripes[4] = RGBA_MAKE(255,255,0,255);	// Yellow
	Stripes[5] = RGBA_MAKE(255,0,255,255);	// Magenta
	Stripes[6] = RGBA_MAKE(0,255,255,255);	// Cyan
	Stripes[7] = RGBA_MAKE(128,128,128,255);// Grey

	// Create the stripe image data
//    CImageLoader    Image;

//    pImage = Image.LoadStripes(64,64,8,Stripes,false); 

	return Result;
}

//************************************************************************
// Texture WExp Test functions

CTextureWExpTest::CTextureWExpTest()
{
	m_szTestName = TEXT("Textured Exp W Fog");
	m_szCommandKey = TEXT("TextureWExp");

	// Tell parent class which Fog we are
	dwFog = W_EXP;

    // Disable textures
    m_bTextures = true;
}

CTextureWExpTest::~CTextureWExpTest()
{
}

bool CTextureWExpTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using W Fog Exp
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_EXP);
	SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD) D3DTBLEND_DECAL);
	return true;
}

bool CTextureWExpTest::SetDefaultMatrices(void)
{
	// Setup the projection matrix for Eye-Relative pixel fog
	D3DMATRIX Matrix = ProjectionMatrix(1.0f, 10.0f, pi/3);

	Matrix = MatrixMult(Matrix, 2.0f);

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CTextureWExpTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;
	UINT Result = D3DTESTINIT_RUN;

	// Request all texture formats except bumpmap
//	if (!RequestTextureFormats(PF_RGB | PF_FOURCC | PF_LUMINANCE))
//	{
//		WriteToLog("No texture formats found.\n");
//		return D3DTESTINIT_ABORT;
//	}

    // Setup the Test range
	SetTestRange(1, TEXTURE_W_TESTS * m_uCommonTextureFormats);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGTABLE))
	{
		WriteToLog("Device capability not supported: Fog Table.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	if (!(dwRasterCaps & D3DPRASTERCAPS_WFOG))
	{
		WriteToLog("Device capability not supported: W Fog.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	// Initialize FogColor variable to Red
	FogColor = RGB_MAKE(255,0,0);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

    // Setup the colors for the Stripes array
//	D3DCOLOR		Stripes[8];

	Stripes[0] = RGBA_MAKE(255,255,255,255);// White
	Stripes[1] = RGBA_MAKE(255,0,0,255);	// Red
	Stripes[2] = RGBA_MAKE(0,255,0,255);	// Green
	Stripes[3] = RGBA_MAKE(0,0,255,255);	// Blue
	Stripes[4] = RGBA_MAKE(255,255,0,255);	// Yellow
	Stripes[5] = RGBA_MAKE(255,0,255,255);	// Magenta
	Stripes[6] = RGBA_MAKE(0,255,255,255);	// Cyan
	Stripes[7] = RGBA_MAKE(128,128,128,255);// Grey

	// Create the stripe image data
//    CImageLoader    Image;

//    pImage = Image.LoadStripes(64,64,8,Stripes,false); 

    return Result;
}

//************************************************************************
// Texture WExp2 Test functions

CTextureWExp2Test::CTextureWExp2Test()
{
	m_szTestName = TEXT("Textured Exp2 W Fog");
	m_szCommandKey = TEXT("TextureWExp2");

	// Tell parent class which Fog we are
	dwFog = W_EXP2;

    // Disable textures
    m_bTextures = true;
}

CTextureWExp2Test::~CTextureWExp2Test()
{
}

bool CTextureWExp2Test::SetDefaultRenderStates(void)
{
	// Make sure that we are using W Fog Exp2
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_EXP2);
	SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD) D3DTBLEND_DECAL);
	return true;
}

bool CTextureWExp2Test::SetDefaultMatrices(void)
{
	// Setup the projection matrix for Eye-Relative pixel fog
	D3DMATRIX Matrix = ProjectionMatrix(1.0f, 10.0f, pi/3);

	Matrix = MatrixMult(Matrix, 2.0f);

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CTextureWExp2Test::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;
	UINT Result = D3DTESTINIT_RUN;

	// Request all texture formats except bumpmap
//	if (!RequestTextureFormats(PF_RGB | PF_FOURCC | PF_LUMINANCE))
//	{
//		WriteToLog("No texture formats found.\n");
//		return D3DTESTINIT_ABORT;
//	}

    // Setup the Test range
	SetTestRange(1, TEXTURE_W_TESTS * m_uCommonTextureFormats);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGTABLE))
	{
		WriteToLog("Device capability not supported: Fog Table.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	if (!(dwRasterCaps & D3DPRASTERCAPS_WFOG))
	{
		WriteToLog("Device capability not supported: W Fog.\n");
		Result = D3DTESTINIT_SKIPALL;
	}

	// Initialize FogColor variable to Red
	FogColor = RGB_MAKE(255,0,0);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

    // Setup the colors for the Stripes array
//	D3DCOLOR		Stripes[8];

	Stripes[0] = RGBA_MAKE(255,255,255,255);// White
	Stripes[1] = RGBA_MAKE(255,0,0,255);	// Red
	Stripes[2] = RGBA_MAKE(0,255,0,255);	// Green
	Stripes[3] = RGBA_MAKE(0,0,255,255);	// Blue
	Stripes[4] = RGBA_MAKE(255,255,0,255);	// Yellow
	Stripes[5] = RGBA_MAKE(255,0,255,255);	// Magenta
	Stripes[6] = RGBA_MAKE(0,255,255,255);	// Cyan
	Stripes[7] = RGBA_MAKE(128,128,128,255);// Grey

	// Create the stripe image data
//    CImageLoader    Image;

//    pImage = Image.LoadStripes(64,64,8,Stripes,false); 

	return Result;
}

//************************************************************************
// Internal API:    WTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CFogTest::WTests(void)
{
	// Thin Triangle Strip on the top
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  16.5f, 56.5f + (float)m_vpTest.Y, 0.000f), 0.999f, RGBA_MAKE(0,255,0,255),0, 0.0f, 0.125f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  16.5f, 28.5f + (float)m_vpTest.Y, 0.000f), 0.999f, RGBA_MAKE(0,255,0,255),0, 0.0f, 0.000f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 304.5f, 56.5f + (float)m_vpTest.Y, 0.999f), 0.100f, RGBA_MAKE(0,255,0,255),0, 1.0f, 0.125f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 304.5f, 28.5f + (float)m_vpTest.Y, 0.999f), 0.100f, RGBA_MAKE(0,255,0,255),0, 1.0f, 0.000f);

	// Thin Triangle Strip on the bottom
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  16.5f, 252.5f + (float)m_vpTest.Y, 0.999f), 0.100f, RGBA_MAKE(0,255,0,255),0, 0.0f, 1.000f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  16.5f, 224.5f + (float)m_vpTest.Y, 0.999f), 0.100f, RGBA_MAKE(0,255,0,255),0, 0.0f, 0.875f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 304.5f, 252.5f + (float)m_vpTest.Y, 0.000f), 0.999f, RGBA_MAKE(0,255,0,255),0, 1.0f, 1.000f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 304.5f, 224.5f + (float)m_vpTest.Y, 0.000f), 0.999f, RGBA_MAKE(0,255,0,255),0, 1.0f, 0.875f);

	// Four white Triangles in the middle
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  16.5f, 210.5f + (float)m_vpTest.Y, 0.2f), (1.0f - 0.2f), RGBA_MAKE(255,255,255,255),0, 0.0000f, 0.8125f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  64.5f,  70.5f + (float)m_vpTest.Y, 0.2f), (1.0f - 0.2f), RGBA_MAKE(255,255,255,255),0, 0.1667f, 0.1875f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 112.5f, 210.5f + (float)m_vpTest.Y, 0.2f), (1.0f - 0.2f), RGBA_MAKE(255,255,255,255),0, 0.3333f, 0.8125f);

	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 128.5f, 210.5f + (float)m_vpTest.Y, 0.4f), (1.0f - 0.4f), RGBA_MAKE(255,255,255,255),0, 0.3889f, 0.8125f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  80.5f,  70.5f + (float)m_vpTest.Y, 0.4f), (1.0f - 0.4f), RGBA_MAKE(255,255,255,255),0, 0.2222f, 0.1875f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 176.5f,  70.5f + (float)m_vpTest.Y, 0.4f), (1.0f - 0.4f), RGBA_MAKE(255,255,255,255),0, 0.5556f, 0.1875f);

	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 144.5f, 210.5f + (float)m_vpTest.Y, 0.6f), (1.0f - 0.6f), RGBA_MAKE(255,255,255,255),0, 0.4444f, 0.8125f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 192.5f,  70.5f + (float)m_vpTest.Y, 0.6f), (1.0f - 0.6f), RGBA_MAKE(255,255,255,255),0, 0.6111f, 0.1875f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.5f, 210.5f + (float)m_vpTest.Y, 0.6f), (1.0f - 0.6f), RGBA_MAKE(255,255,255,255),0, 0.7778f, 0.8125f);

	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 256.5f, 210.5f + (float)m_vpTest.Y, 0.8f), (1.0f - 0.8f), RGBA_MAKE(255,255,255,255),0, 0.8333f, 0.8125f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 208.5f,  70.5f + (float)m_vpTest.Y, 0.8f), (1.0f - 0.8f), RGBA_MAKE(255,255,255,255),0, 0.6667f, 0.1875f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 304.5f,  70.5f + (float)m_vpTest.Y, 0.8f), (1.0f - 0.8f), RGBA_MAKE(255,255,255,255),0, 1.0000f, 0.1875f);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\gradient\gradient.cpp ===
#define STRICT
#define BURN_IN_HELL
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Gradient.h"

// Global Test and App instance
//CD3DWindowFramework		App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CGradientTest*  pGradientTest;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 9 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pGradientTest = new CTexture8x8Test();
                break;
            case 1:
                pGradientTest = new CTexture16x16Test();
                break;
            case 2:
                pGradientTest = new CTexture32x32Test();
                break;
            case 3:
                pGradientTest = new CTexture64x64Test();
                break;
            case 4:
                pGradientTest = new CTexture128x128Test();
                break;
            case 5:
                pGradientTest = new CTexture256x256Test();
                break;
            case 6:
                pGradientTest = new CTexture512x512Test();
                break;
            case 7:
                pGradientTest = new CTexture1024x1024Test();
                break;
            case 8:
                pGradientTest = new CTexture2048x2048Test();
                break;
        }

        if (!pGradientTest) {
            return FALSE;
        }

        // Initialize the scene
        if (!pGradientTest->Create(pDisplay)) {
            pGradientTest->Release();
            return FALSE;
        }

        bRet = pGradientTest->Exhibit(pnExitCode);

        bQuit = pGradientTest->AbortedExit();

        // Clean up the scene
        pGradientTest->Release();
    }

    return bRet;
}

CGradientTest::CGradientTest()
{
    pTexture = NULL;
    m_bExit = FALSE;
}

CGradientTest::~CGradientTest()
{
}

UINT CGradientTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice; 
	UINT Result = D3DTESTINIT_RUN;

	// Setup the Test range
	SetTestRange(1, MAX_TESTS);
//	SetTestRange(1, MAX_TESTS * m_uCommonTextureFormats);
 
	// Check the caps we are interested in
	DWORD dwTextureCaps = m_d3dcaps.TextureCaps;
	DWORD dwMinTextureWidth  = 1;
	DWORD dwMinTextureHeight = 1;
	DWORD dwMaxTextureWidth  = m_d3dcaps.MaxTextureWidth;
	DWORD dwMaxTextureHeight = m_d3dcaps.MaxTextureHeight;
	DWORD dwMaxTextureRepeat = m_d3dcaps.MaxTextureRepeat;

	// Special check to make sure the texture size caps are filled out
	if ((dwMinTextureWidth == 0) && (dwMinTextureHeight == 0) &&
		(dwMaxTextureWidth == 0) && (dwMaxTextureHeight == 0))
	{
		// Log an error that we MUST set the texture size caps
		WriteToLog("Must set Min/Max Texture Width/Height caps.\n");
		return D3DTESTINIT_ABORT;
	}

	// See if the MinTextureWidth is supported
	if (nTextureSize < (int)dwMinTextureWidth)
	{
		WriteToLog("Texture width (%d) < MinTextureWidth (%d)\n",nTextureSize,dwMinTextureWidth);
		Result = D3DTESTINIT_SKIPALL;
	}

	// See if the MinTextureHeight is supported
	if (nTextureSize < (int)dwMinTextureHeight)
	{
		WriteToLog("Texture height (%d) < MinTextureHeight (%d)\n",nTextureSize,dwMinTextureHeight);
		Result = D3DTESTINIT_SKIPALL;
	}

	// See if the MaxTextureWidth is supported
	if (nTextureSize > (int)dwMaxTextureWidth)
	{
		WriteToLog("Texture width (%d) > MaxTextureWidth (%d)\n",nTextureSize,dwMaxTextureWidth);
		Result = D3DTESTINIT_SKIPALL;
	}

	// See if the MaxTextureHeight is supported
	if (nTextureSize > (int)dwMaxTextureHeight)
	{
		WriteToLog("Texture height (%d) > MaxTextureHeight (%d)\n",nTextureSize,dwMaxTextureHeight);
		Result = D3DTESTINIT_SKIPALL;
	}

	// Init the Maximum Scale variable
	nMaxScale = 4;

	// See if we need to adjust the maximum scale value
	if (!(dwTextureCaps & D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE))
	{
		if (!dwMaxTextureRepeat)
		{
			// Must set the MaxTextureRepeat cap if TexRepeatNotScaledBySize is not set
			WriteToLog("Must set MaxTextureRepeat cap if TexRepeatNotScaledBySize not set.\n");
//MPL-Hack			return false;
		}

		else  //MPL-Hack
		if ((nTextureSize * 4) > (int)dwMaxTextureRepeat)
		{
			nMaxScale = nTextureSize / (dwMaxTextureRepeat / 4);
		}
	}

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	// Setup the colors for the Gradient array
//	D3DCOLOR	Gradient[4];

	Gradient[0] = RGBA_MAKE(0,0,0,255);		// Black
	Gradient[1] = RGBA_MAKE(255,0,0,255);	// Red
	Gradient[2] = RGBA_MAKE(0,255,0,255);	// Green
	Gradient[3] = RGBA_MAKE(255,255,0,255);	// Yellow

	// Create the gradient image data
//    CImageLoader    Image;

//    pImage = Image.LoadGradient(nTextureSize,nTextureSize,Gradient); 

	return Result;
}

bool CGradientTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255));
}

bool CGradientTest::ExecuteTest(UINT uTestNum)
{
   // Setup the tests to execute.
	int nTest;
    int nFormat;
 
	// Initialize some variables
	nTest = ((uTestNum-1) / 1) + 1;
//	nTest = ((uTestNum-1) / m_uCommonTextureFormats) + 1;
 	dwVertexCount = 0;
	msgString[0] = 0;
	sprintf(msgString, "");

	// Cleanup previous texture
	SetTexture(0, NULL);
    ReleaseTexture(pTexture);
    pTexture = NULL;

	// Let's build some triangles.
	DrawGrid(nTest);
 
	// Cycle the texture formats
//	if (CycleFormats)
//		m_pD3DMode->nTextureFormat = (uTestNum-1) % m_uCommonTextureFormats;
//	else

	// Pick the fist 16-bit texture enumerated
	for (int i=0; i < (int)m_uCommonTextureFormats; i++)
	{
        // TODO: need to handle DX8 formats (m_pCommonTextureFormats[m_pMode->nTextureFormat].d3dfFormat)
//		if (m_pCommonTextureFormats[i].ddpfPixelFormat.dwRGBBitCount == 16)
        if (FormatToBitDepth(m_fmtCommon[i]) == 16)
		{
//			m_pMode->nTextureFormat = i;
            nFormat = i;
			break;
		}
	}

	// Create the texture
	pTexture = (CTexture8*)CreateGradientTexture(m_pDevice, nTextureSize,nTextureSize,Gradient);

	// Tell the framework what texture to use
    if (NULL != pTexture)
	{
        SetTexture(0,pTexture);

        if (m_dwVersion <= 0x0700)
        {
//    		sprintf(msgString, "%sTex:",msgString);
//        	GetTexFmtDesc(&m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat,msgString+strlen(msgString),80-strlen(msgString));
        }
        else
#ifndef UNICODE
    		sprintf(msgString, "%sTex:%s",msgString,D3DFmtToString(m_fmtCommon[nFormat]));
#else
    		sprintf(msgString, "%sTex:%S",msgString,D3DFmtToString(m_fmtCommon[nFormat]));
#endif
	}
	else
	{
		WriteToLog("CreateTexture() failed with HResult = %X.\n",GetLastError());
 
        if (GetLastError() == E_OUTOFMEMORY)
			TestFinish(D3DTESTFINISH_SKIPREMAINDER);
		else
			TestFinish(D3DTESTFINISH_ABORT);

		return false;
	}
 
	// Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}

void CGradientTest::SceneRefresh()
{
	if (BeginScene())
	{
		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}

bool CGradientTest::ProcessFrame(void)
{
	char 	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;
    bool	bResult;

     // Use the standard 15%
    bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how the compare went
    if (bResult)
    {
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
	}

	WriteStatus("$gOverall Results",szBuffer);

    return bResult;
}

bool CGradientTest::TestTerminate()
{
	// Cleanup texture & image data
	SetTexture(0, NULL);
    ReleaseTexture(pTexture);
    pTexture = NULL;
//    RELEASE(pImage);

	return true;
}

//******************************************************************************
BOOL CGradientTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CGradientTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CGradientTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\fog\exe\sources.inc ===
TARGETNAME=fog
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_fog.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\fog\vertex.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Fog.h"
//#include "cimageloader.h"

//************************************************************************
// Vertex Test functions

CVertexTest::CVertexTest()
{
	m_szTestName = TEXT("Vertex Fog");
	m_szCommandKey = TEXT("Vertex");

	// Tell parent class which Fog we are
	dwFog = VERTEX;

    // Disable textures
    m_bTextures = false;
}

CVertexTest::~CVertexTest()
{
}

bool CVertexTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using Vertex Fog
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_NONE);
	return true;
}

UINT CVertexTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

    // Setup the Test range
	SetTestRange(1, VERTEX_TESTS);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGVERTEX))
	{
		WriteToLog("Device capability not supported: Fog Vertex.\n");
		return D3DTESTINIT_SKIPALL;
	}

	// Initialize FogColor variable to Black
	FogColor = RGB_MAKE(0,0,0);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

    return D3DTESTINIT_RUN;
}

//************************************************************************
// Texture Vertex Test functions

CTextureVertexTest::CTextureVertexTest()
{
	m_szTestName = TEXT("Textured Vertex Fog");
	m_szCommandKey = TEXT("TextureVertex");

	// Tell parent class which Fog we are
	dwFog = VERTEX;

    // Enable textures
    m_bTextures = true;
}

CTextureVertexTest::~CTextureVertexTest()
{
}

bool CTextureVertexTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using Vertex Fog
	SetRenderState(D3DRENDERSTATE_FOGENABLE, (DWORD) TRUE);
	SetRenderState(D3DRENDERSTATE_FOGTABLEMODE, (DWORD) D3DFOG_NONE);
	SetRenderState(D3DRENDERSTATE_TEXTUREMAPBLEND, (DWORD) D3DTBLEND_DECAL);
	return true;
}

UINT CTextureVertexTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

	// Request all texture formats except bumpmap
//	if (!RequestTextureFormats(PF_RGB | PF_FOURCC | PF_LUMINANCE))
//	{
//		WriteToLog("No texture formats found.\n");
//		return D3DTESTINIT_ABORT;
//	}

    // Setup the Test range
	SetTestRange(1, TEXTURE_VERTEX_TESTS * m_uCommonTextureFormats);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Fog caps
	if (!(dwRasterCaps & D3DPRASTERCAPS_FOGVERTEX))
	{
		WriteToLog("Device capability not supported: Fog Vertex.\n");
		return D3DTESTINIT_SKIPALL;
	}

	// Initialize FogColor variable to Black
	FogColor = RGB_MAKE(0,0,0);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	// Setup the colors for the Stripes array
//	D3DCOLOR		Stripes[8];

	Stripes[0] = RGBA_MAKE(255,255,255,255);// White
	Stripes[1] = RGBA_MAKE(255,0,0,255);	// Red
	Stripes[2] = RGBA_MAKE(0,255,0,255);	// Green
	Stripes[3] = RGBA_MAKE(0,0,255,255);	// Blue
	Stripes[4] = RGBA_MAKE(255,255,0,255);	// Yellow
	Stripes[5] = RGBA_MAKE(255,0,255,255);	// Magenta
	Stripes[6] = RGBA_MAKE(0,255,255,255);	// Cyan
	Stripes[7] = RGBA_MAKE(128,128,128,255);// Grey

	// Create the stripe image data
//    CImageLoader    Image;

//    pImage = Image.LoadStripes(64,64,8,Stripes,false); 

    return D3DTESTINIT_RUN;
}

//************************************************************************
// Internal API:    VertexTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CFogTest::VertexTests(int nTest)
{
	int			FogValue[] = { 255, 128, 0 };
	int			nFog;
	D3DCOLOR	Color;
	char		szBuffer[80];

	// Init the status buffer
	szBuffer[0] = 0;

	// Calculate the Fog Value
	nFog = nTest % 4;

	if (nTest <= 4)
	{
		// Black Fog
		FogColor = RGB_MAKE(0, 0, 0);

		// White Triangle
		Color = RGBA_MAKE(255,255,255,255);

		// Update the color status buffer
		sprintf(szBuffer,"Fog: Black, Tri: White");
		WriteStatus("$gColor Values$y",szBuffer);

		sprintf(msgString, "%s%s",msgString, szBuffer);
	}
	else if (nTest <= 8)
	{
		// Green Fog
		FogColor = RGB_MAKE(0, 255, 0);

		// White Triangle
		Color = RGBA_MAKE(255,255,255,255);

		// Update the color status buffer
		sprintf(szBuffer,"Fog: Green, Tri: White");
		WriteStatus("$gColor Values$y",szBuffer);

		sprintf(msgString, "%s%s",msgString, szBuffer);
	}
	else
	{
		// White Fog
		FogColor = RGB_MAKE(255, 255, 255);

		// Red Triangle
		if (nTest == 9)
		{
			Color = RGBA_MAKE(255,0,0,255);

			// Update the color status buffer
			sprintf(szBuffer,"Fog: White, Tri: Red");
			WriteStatus("$gColor Values$y",szBuffer);

			sprintf(msgString, "%s%s",msgString, szBuffer);
		}
		// Green Triangle
		else if (nTest == 10)
		{
			Color = RGBA_MAKE(0,255,0,255);

			// Update the color status buffer
			sprintf(szBuffer,"Fog: White, Tri: Green");
			WriteStatus("$gColor Values$y",szBuffer);

			sprintf(msgString, "%s%s",msgString, szBuffer);
		}
		// Blue Triangle
		else if (nTest == 11)
		{
			Color = RGBA_MAKE(0,0,255,255);

			// Update the color status buffer
			sprintf(szBuffer,"Fog: White, Tri: Blue");
			WriteStatus("$gColor Values$y",szBuffer);

			sprintf(msgString, "%s%s",msgString, szBuffer);
		}
	}

	if (nFog)
	{
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.5f,  5.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), Color, RGBA_MAKE(0, 0, 0, FogValue[nFog-1]), 0.0f,0.0f);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.5f,  5.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), Color, RGBA_MAKE(0, 0, 0, FogValue[nFog-1]), 1.0f,0.0f);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.5f,245.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), Color, RGBA_MAKE(0, 0, 0, FogValue[nFog-1]), 1.0f,1.0f);

		// Update the value status buffer
		sprintf(szBuffer,"Left: %d, Right: %d, Bottom: %d", FogValue[nFog-1], FogValue[nFog-1], FogValue[nFog-1]);
		WriteStatus("$gFog Values$y",szBuffer);

		sprintf(msgString, "%s(%d, %d, %d), ",msgString, FogValue[nFog-1], FogValue[nFog-1], FogValue[nFog-1]);
	}
	else
	{
		if (nTest == 12)
		{
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.5f,  5.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(255,0,0,255), RGBA_MAKE(0, 0, 0, FogValue[2]), 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.5f,  5.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,255,0,255), RGBA_MAKE(0, 0, 0, FogValue[1]), 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.5f,245.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,0,255,255), RGBA_MAKE(0, 0, 0, FogValue[0]), 1.0f,1.0f);

			// Update the color and value status buffer
			sprintf(szBuffer,"Fog: White, Triangle: Red,Green,Blue");
			WriteStatus("$gColor Values$y",szBuffer);

			sprintf(szBuffer,"Left: %d, Right: %d, Bottom: %d", FogValue[2], FogValue[1], FogValue[0]);
			WriteStatus("$gFog Values$y",szBuffer);

			sprintf(msgString, "%sFog: White, Tri: RGB(%d, %d, %d), ",msgString, FogValue[2], FogValue[1], FogValue[0]);
		}
		else
		{
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.5f,  5.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), Color, RGBA_MAKE(0, 0, 0, FogValue[2]), 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.5f,  5.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), Color, RGBA_MAKE(0, 0, 0, FogValue[1]), 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.5f,245.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), Color, RGBA_MAKE(0, 0, 0, FogValue[0]), 1.0f,1.0f);

			// Update the value status buffer
			sprintf(szBuffer,"Left: %d, Right: %d, Bottom: %d", FogValue[2], FogValue[1], FogValue[0]);
			WriteStatus("$gFog Values$y",szBuffer);

			sprintf(msgString, "%s(%d, %d, %d), ",msgString, FogValue[2], FogValue[1], FogValue[0]);
		}

	}
}

//************************************************************************
// Internal API:    TextureVertexTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CFogTest::TextureVertexTests(int nTest)
{
	int			FogValue[] = { 255, 128, 0 };
	int			nFog;
	D3DCOLOR	Color;
	char		szBuffer[80];

	// Init the status buffer
	szBuffer[0] = 0;

	// Calculate the Fog Value
	nFog = nTest % 4;

	// Green Fog
	FogColor = RGB_MAKE(0, 255, 0);

	// White Triangle
	Color = RGBA_MAKE(255,255,255,255);

	// Update the color status buffer
	sprintf(szBuffer,"Fog: Green, Tri: White");
	WriteStatus("$gColor Values$y",szBuffer);

	sprintf(msgString, "%s%s",msgString, szBuffer);

	if (nFog)
	{
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.5f,  5.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), Color, RGBA_MAKE(0, 0, 0, FogValue[nFog-1]), 0.0f,0.0f);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.5f,  5.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), Color, RGBA_MAKE(0, 0, 0, FogValue[nFog-1]), 1.0f,0.0f);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.5f,245.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), Color, RGBA_MAKE(0, 0, 0, FogValue[nFog-1]), 1.0f,1.0f);

		// Update the value status buffer
		sprintf(szBuffer,"Left: %d, Right: %d, Bottom: %d", FogValue[nFog-1], FogValue[nFog-1], FogValue[nFog-1]);
		WriteStatus("$gFog Values$y",szBuffer);

		sprintf(msgString, "%s(%d, %d, %d)",msgString, FogValue[nFog-1], FogValue[nFog-1], FogValue[nFog-1]);
	}
	else
	{
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.5f,  5.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), Color, RGBA_MAKE(0, 0, 0, FogValue[2]), 0.0f,0.0f);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.5f,  5.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), Color, RGBA_MAKE(0, 0, 0, FogValue[1]), 1.0f,0.0f);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.5f,245.5f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), Color, RGBA_MAKE(0, 0, 0, FogValue[0]), 1.0f,1.0f);

		// Update the value status buffer
		sprintf(szBuffer,"Left: %d, Right: %d, Bottom: %d", FogValue[2], FogValue[1], FogValue[0]);
		WriteStatus("$gFog Values$y",szBuffer);

		sprintf(msgString, "%s(%d, %d, %d)",msgString, FogValue[2], FogValue[1], FogValue[0]);
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\gradient\gradient.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	Gradient.h
 *
 ***************************************************************************/

#ifndef __GRADIENT_H__
#define __GRADIENT_H__

//USETESTFRAME

// Defines
#define MAX_TESTS	240

// Base Class definitions
class CGradientTest: public TESTFRAME(CD3DTest)
{
    // Data
	public:
    D3DTLVERTEX     VertexList[6];
    DWORD           dwVertexCount;
	CTexture8 *		pTexture;
//	CImageData *	pImage;
	int				nTextureSize;
	int				nMaxScale;
	char 			msgString[80];

	D3DCOLOR	    Gradient[4];

    BOOL            m_bExit;

	public:
	CGradientTest();
	~CGradientTest();

	// Framework functions
	virtual UINT TestInitialize(void);
	virtual bool ClearFrame(void);
	virtual bool ExecuteTest(UINT);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);
	virtual bool TestTerminate(void);

	// Helper functions
	void DrawGrid(int nTest);

    virtual BOOL    AbortedExit(void);

protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

// Texture 8x8 Class definitions
class CTexture8x8Test: public CGradientTest
{
	public:
	CTexture8x8Test();
	~CTexture8x8Test();
};

// Texture 16x16 Class definitions
class CTexture16x16Test: public CGradientTest
{
	public:
	CTexture16x16Test();
	~CTexture16x16Test();
};

// Texture 32x32 Class definitions
class CTexture32x32Test: public CGradientTest
{
	public:
	CTexture32x32Test();
	~CTexture32x32Test();
};

// Texture 64x64 Class definitions
class CTexture64x64Test: public CGradientTest
{
	public:
	CTexture64x64Test();
	~CTexture64x64Test();
};

// Texture 128x128 Class definitions
class CTexture128x128Test: public CGradientTest
{
	public:
	CTexture128x128Test();
	~CTexture128x128Test();
};

// Texture 256x256 Class definitions
class CTexture256x256Test: public CGradientTest
{
	public:
	CTexture256x256Test();
	~CTexture256x256Test();
};

// Texture 512x512 Class definitions
class CTexture512x512Test: public CGradientTest
{
	public:
	CTexture512x512Test();
	~CTexture512x512Test();
};

// Texture 1024x1024 Class definitions
class CTexture1024x1024Test: public CGradientTest
{
	public:
	CTexture1024x1024Test();
	~CTexture1024x1024Test();
};

// Texture 2048x2048 Class definitions
class CTexture2048x2048Test: public CGradientTest
{
	public:
	CTexture2048x2048Test();
	~CTexture2048x2048Test();
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\gradient\drawgrid.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Gradient.h"

//************************************************************************
// Internal API:    DrawGrid
//
// Purpose:         
//
// Return:          None.
//************************************************************************
 
void CGradientTest::DrawGrid(int nTest)
{
	int		nScale, nMapping;
	float	fScale, fMesh;

	// Initialize the interesting variables
	nMapping = ((nTest-1) / 60) + 1;

	nScale = ((nTest-1) / 15) + 1;
	nScale = nScale % nMaxScale;

	if (nScale == 0)
		nScale = nMaxScale;
 
	fScale = 1.0f * nScale;

	fMesh = ((nTest % 15) + 1) * 16.0f;

	if (fMesh == 16.0f)
		fMesh = 256.0f;

	sprintf(msgString, "%sMesh:%dx%d, ",msgString,(int)fMesh,(int)fMesh);

	fMesh += 9.5f;

	switch (nMapping)
	{
		case (1): // Use standard ((0,0)(1,0)(0,1)(1,1)) mapping, White Mesh
			sprintf(msgString, "%sMap:(0,0)(%d,0)(0,%d)(%d,%d), ",msgString,nScale,nScale,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  9.5f,  9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fMesh, fMesh + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  9.5f, fMesh + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  9.5f,  9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fMesh,  9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fMesh, fMesh + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,fScale);
			break;
		case (2): // Use ((0,1)(0,0)(1,1)(1,0)) mapping, White Mesh
			sprintf(msgString, "%sMap:(0,%d)(0,0)(%d,%d)(%d,0), ",msgString,nScale,nScale,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  9.5f,  9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fMesh, fMesh + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  9.5f, fMesh + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  9.5f,  9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fMesh,  9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fMesh, fMesh + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,  0.0f);
			break;
		case (3): // Use ((1,1)(0,1)(1,0)(0,0)) mapping, White Mesh
			sprintf(msgString, "%sMap:(%d,%d)(0,%d)(%d,0)(0,0), ",msgString,nScale,nScale,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  9.5f,  9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fMesh, fMesh + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  9.5f, fMesh + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  9.5f,  9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fMesh,  9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fMesh, fMesh + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,    0.0f);
			break;
		case (4): // Use ((1,0)(1,1)(0,0)(0,1)) mapping, White Mesh
			sprintf(msgString, "%sMap:(%d,0)(%d,%d)(0,0)(0,%d), ",msgString,nScale,nScale,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  9.5f,  9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fMesh, fMesh + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  9.5f, fMesh + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  9.5f,  9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fMesh,  9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fMesh, fMesh + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,  fScale);
			break;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\gradient\modulex.h ===
#define PREPEND_MODULE(Suffix) gradient##Suffix
#define MODULE_STRING "gradient"
#pragma comment(linker, "/include:_gradient_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\gradient\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\gradient\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\gradient\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=gradient
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_gradnt.lib

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_gradnt.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\gradient\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_gradnt
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    drawgrid.cpp \
    gradient.cpp \
    texsize.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\lightmap\flags.h ===
// FILE:        flags.h
// DESC:        flags class header
// AUTHOR:      Todd M. Frost

#ifndef _CFLAGS
#define _CFLAGS

class CFlags {
    private:
        DWORD m_dwCurrent; // current flags
        DWORD m_dwSaved;   // saved flags

    public:
        inline bool bCheck(DWORD dwFlags)
        {
            if (m_dwCurrent & dwFlags)
                return true;
            else
                return false;
        };
        inline VOID vClear(DWORD dwFlags)
        {
            m_dwCurrent &= ~dwFlags;
        };
        inline VOID vSet(DWORD dwFlags)
        {
            m_dwCurrent |= dwFlags;
        };
        inline DWORD dwGet(VOID)
        {
            return m_dwCurrent;
        };
        inline VOID vSave(VOID)
        {
            m_dwSaved = m_dwCurrent;
        };
        inline VOID vRestore(VOID)
        {
            m_dwCurrent = m_dwSaved;
        };
        inline VOID vReplace(DWORD dwFlags)
        {
            m_dwCurrent = dwFlags;
        };
        CFlags(VOID);
        ~CFlags(VOID); 
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\gradient\exe\sources.inc ===
TARGETNAME=gradient
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_gradnt.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\gradient\texsize.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Gradient.h"
//#include "cimageloader.h"

//************************************************************************
// Texture 8x8 Test functions

CTexture8x8Test::CTexture8x8Test()
{
	m_szTestName = TEXT("Gradient Texture 8x8");
	m_szCommandKey = TEXT("Texture8x8");

	// Tell the parent our texture size
	nTextureSize = 8;
}

CTexture8x8Test::~CTexture8x8Test()
{
}
 
//************************************************************************
// Texture 16x16 Test functions

CTexture16x16Test::CTexture16x16Test()
{
	m_szTestName = TEXT("Gradient Texture 16x16");
	m_szCommandKey = TEXT("Texture16x16");

	// Tell the parent our texture size
	nTextureSize = 16;
}

CTexture16x16Test::~CTexture16x16Test()
{
}

//************************************************************************
// Texture 32x32 Test functions

CTexture32x32Test::CTexture32x32Test()
{
	m_szTestName = TEXT("Gradient Texture 32x32");
	m_szCommandKey = TEXT("Texture32x32");

	// Tell the parent our texture size
	nTextureSize = 32;
}

CTexture32x32Test::~CTexture32x32Test()
{
}

//************************************************************************
// Texture 64x64 Test functions

CTexture64x64Test::CTexture64x64Test()
{
	m_szTestName = TEXT("Gradient Texture 64x64");
	m_szCommandKey = TEXT("Texture64x64");

	// Tell the parent our texture size
	nTextureSize = 64;
}

CTexture64x64Test::~CTexture64x64Test()
{
}

//************************************************************************
// Texture 128x128 Test functions

CTexture128x128Test::CTexture128x128Test()
{
	m_szTestName = TEXT("Gradient Texture 128x128");
	m_szCommandKey = TEXT("Texture128x128");

	// Tell the parent our texture size
	nTextureSize = 128;
}

CTexture128x128Test::~CTexture128x128Test()
{
}

//************************************************************************
// Texture 256x256 Test functions

CTexture256x256Test::CTexture256x256Test()
{
	m_szTestName = TEXT("Gradient Texture 256x256");
	m_szCommandKey = TEXT("Texture256x256");

	// Tell the parent our texture size
	nTextureSize = 256;
}

CTexture256x256Test::~CTexture256x256Test()
{
}

//************************************************************************
// Texture 512x512 Test functions

CTexture512x512Test::CTexture512x512Test()
{
	m_szTestName = TEXT("Gradient Texture 512x512");
	m_szCommandKey = TEXT("Texture512x512");

	// Tell the parent our texture size
	nTextureSize = 512;
}

CTexture512x512Test::~CTexture512x512Test()
{
}

//************************************************************************
// Texture 1024x1024 Test functions

CTexture1024x1024Test::CTexture1024x1024Test()
{
	m_szTestName = TEXT("Gradient Texture 1024x1024");
	m_szCommandKey = TEXT("Texture1024x1024");

	// Tell the parent our texture size
	nTextureSize = 1024;
}

CTexture1024x1024Test::~CTexture1024x1024Test()
{
}

//************************************************************************
// Texture 2048x2048 Test functions

CTexture2048x2048Test::CTexture2048x2048Test()
{
	m_szTestName = TEXT("Gradient Texture 2048x2048");
	m_szCommandKey = TEXT("Texture2048x2048");

	// Tell the parent our texture size
	nTextureSize = 2048;
}

CTexture2048x2048Test::~CTexture2048x2048Test()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\lightmap\flags.cpp ===
// FILE:        flags.cpp
// DESC:        flags class methods
// AUTHOR:      Todd M. Frost

#include "d3dlocus.h"
#include "flags.h"

#ifdef CLASSNAME
#undef CLASSNAME
#endif
#define CLASSNAME TEXT("CFlags")

// NAME:        CFlags()
// DESC:        constructor for flags class
// INPUT:       none
// OUTPUT:      none

CFlags::CFlags(VOID)
{
    m_dwCurrent = (DWORD) 0;
    m_dwSaved = (DWORD) 0;
}

// NAME:        ~CFlags()
// DESC:        destructor for flags class
// INPUT:       none
// OUTPUT:      none

CFlags::~CFlags(VOID)
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\lightmap\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\lightmap\global.h ===
// FILE:        global.h
// DESC:        global variable declarations
// AUTHOR:      Todd M. Frost

//CD3DWindowFramework App; // global instance of D3D window framework class
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\lightmap\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\lightmap\modulex.h ===
#define PREPEND_MODULE(Suffix) lightmap##Suffix
#define MODULE_STRING "lightmap"
#pragma comment(linker, "/include:_lightmap_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\lightmap\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_litmap
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    lightmap.cpp \
    flags.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\lightmap\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=lightmap
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_litmap.lib

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_litmap.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\lightmap\lightmap.cpp ===
// FILE:        lightmap.cpp
// DESC:        lightmap class methods for D3DTOP_DOTPRODUCT3 conformance test
// AUTHOR:      Todd M. Frost

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "flags.h"
#include "lightmap.h"
#include "global.h"

typedef enum _COORDINDEX
{
    CIX = 0,
    CIY = 1,
    CIZ = 2
} COORDINDEX;

const DWORD SCALE_TO_WINDOW = 0x00000001; // scale to window
const DWORD VALIDATE        = 0x00000002; // validate src/ref devices

const UINT TEXTURE_WIDTH  = 256;
const UINT TEXTURE_HEIGHT = 256;

const FLOAT LEMNISCATE_SCALE = 0.4f; // lemniscate scale

const FLOAT ZERO = 1.0e-8f; // floating point zero

const FLOAT RADIUS         = 0.5f;  // sphere radius
const FLOAT RADIUS_SQUARED = 0.25f; // sphere radius squared

// factor for lemniscate formula (r = sin(factor*theta))

const UINT DEFAULT_FACTOR = 2; // default factor
const UINT MIN_FACTOR     = 1; // min     factor
const UINT MAX_FACTOR     = 8; // max     factor

// intervals for lemniscate traversal

const UINT DEFAULT_INTERVALS = 8;   // default intervals
const UINT MIN_INTERVALS     = 0;   // min     intervals
const UINT MAX_INTERVALS     = 256; // min     intervals

typedef struct FlexVert {
    D3DVALUE fx;
    D3DVALUE fy;
    D3DVALUE fz;
    D3DVALUE frhw;
    D3DCOLOR dwDiffuse;
    D3DVALUE fu;
    D3DVALUE fv;
    D3DVALUE fu2;
    D3DVALUE fv2;
} FLEXVERT, *PFLEXVERT;

bool gbSouthern = false;

// NAME:        fGetVectorCoord()
// DESC:        get vector coord from hemisphere vector field
// INPUT:       ci...coord index
//              u....u texture coord
//              v....v texture coord
// OUTPUT:      fVector[coord]
// COMMENTS:    vector field based on sphere equation:
//                  x**2 + y**2 + z**2 = r**2
//              where
//                  x = u - r
//                  y = v - r
//                  z = sqrt(r**2 - x**2 - y**2)
//                  z = 0 if x**2 + y**2 > r**2 

FLOAT fGetVectorCoord(COORDINDEX ci, FLOAT u, FLOAT v)
{
    double fTemp;
    double fVector[3];

    fVector[CIX] = u - 0.5;
    fVector[CIY] = v - 0.5;
    fVector[CIZ] = 0.0;

    fTemp = fVector[CIX]*fVector[CIX] + fVector[CIY]*fVector[CIY];

    if (fTemp < ZERO)
    {
        fVector[CIX] = 0.0;
        fVector[CIY] = 0.0;
        fVector[CIZ] = RADIUS;
    }
    else if (fTemp < RADIUS_SQUARED)
        fVector[CIZ] = sqrt(RADIUS_SQUARED - fTemp);
    
    if (gbSouthern)
        fVector[CIZ] = -fVector[CIZ];

    fTemp = sqrt(fTemp + fVector[CIZ]*fVector[CIZ]);

    return (FLOAT) fVector[ci]/(float)fTemp;
}

// NAME:        fVectorX()
// DESC:        vector field x coord 
// INPUT:       u....u texture coord
//              v....v texture coord
// OUTPUT:      fGetVectorCoord(CIX, u, v)
// COMMENTS:    [-1,1] maps to [0,255] in LoadChannelData() (CIL_UNSIGNED)

FLOAT fVectorX(FLOAT u, FLOAT v)
{
    return fGetVectorCoord(CIX, u, v);
}

// NAME:        fVectorY()
// DESC:        vector field y coord
// INPUT:       u....u texture coord
//              v....v texture coord
// OUTPUT:      fGetVectorCoord(CIY, u, v)
// COMMENTS:    [-1,1] maps to [0,255] in LoadChannelData() (CIL_UNSIGNED)

FLOAT fVectorY(FLOAT u, FLOAT v)
{
    return fGetVectorCoord(CIY, u, v);
}

// NAME:        fVectorZ()
// DESC:        vector field z coord
// INPUT:       u....u texture coord
//              v....v texture coord
// OUTPUT:      fGetVectorCoord(CIZ, u, v)
// COMMENTS:    [-1,1] maps to [0,255] in LoadChannelData() (CIL_UNSIGNED)

FLOAT fVectorZ(FLOAT u, FLOAT v)
{
    return fGetVectorCoord(CIZ, u, v);
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CLightmap*      pLightmap;
    BOOL            bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    // Create the scene
    pLightmap = new CLightmap();
    if (!pLightmap) {
        return FALSE;
    }

    // Initialize the scene
    if (!pLightmap->Create(pDisplay)) {
        pLightmap->Release();
        return FALSE;
    }

    bRet = pLightmap->Exhibit(pnExitCode);

    // Clean up the scene
    pLightmap->Release();

    return bRet;
}

// NAME:        CLightmap()
// DESC:        constructor for lightmap class
// INPUT:       none
// OUTPUT:      none

CLightmap::CLightmap(VOID)
{
    m_szTestName=TEXT("DOTPRODUCT3");
    m_szCommandKey=TEXT("Lightmap");

    m_fFactor = 0.0f;

    m_dwFormat = NOFORMAT;

    m_dwIntervals = (DWORD) 0;
    m_dwStages = (DWORD) 1;

//    m_pNorthernImage = NULL;
//    m_pSouthernImage = NULL;

    m_pNorthernTexture = NULL;
    m_pSouthernTexture = NULL;
}

// NAME:        ~CLightmap()
// DESC:        destructor for lightmap class
// INPUT:       none
// OUTPUT:      none

CLightmap::~CLightmap(VOID)
{
    ReleaseTexture(m_pNorthernTexture);
    ReleaseTexture(m_pSouthernTexture);

//    RELEASE(m_pNorthernImage);
//    RELEASE(m_pSouthernImage);
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CLightmap::CommandLineHelp(void)
{
//    WriteCommandLineHelp("$yfactor: $wlemniscate = sin(factor*theta) $c(default=2)");
//    WriteCommandLineHelp("$yintervals: $wintervals per test $c(default=8)");
//    WriteCommandLineHelp("$yscale:  $wscale to window $c($wOn$c/Off)");
//    WriteCommandLineHelp("$yvalidate: $wvalidate $c(On/$wOff$c)");
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      appropriate D3DTESTINIT code

UINT CLightmap::TestInitialize(VOID)
{
    bool bFound;
//    int nDevice = m_pMode->nSrcDevice;
//    CImageLoader Loader;
    DWORD dwWidth = (DWORD) TEXTURE_WIDTH, dwHeight = (DWORD) TEXTURE_HEIGHT;
    WORD wMaxSimultaneousTextures;

    m_dwFormat = NOFORMAT;

    vProcessArgs();

//    CHANNELDATA Data;
    Data.dwAlpha = (DWORD) 0;
    Data.dwRed = (DWORD) CIL_UNSIGNED;
    Data.dwGreen = (DWORD) CIL_UNSIGNED;
    Data.dwBlue = (DWORD) CIL_UNSIGNED;
    Data.fAlpha = NULL;
    Data.fRed = fVectorX;
    Data.fGreen = fVectorY;
    Data.fBlue = fVectorZ;
//    gbSouthern = false;

//    if (!(m_pNorthernImage = Loader.LoadChannelData(dwWidth, dwHeight, &Data)))
//    {
//        WriteToLog(_T("Unable to load northern image."));
//        return D3DTESTINIT_ABORT;
//    }

//    gbSouthern = true;

//    if (!(m_pSouthernImage = Loader.LoadChannelData(dwWidth, dwHeight, &Data)))
//    {
//        WriteToLog(_T("Unable to load southern image."));
//        return D3DTESTINIT_ABORT;
//    }

    bFound = true;

/*
    if (!RequestTextureFormats((DWORD) PF_RGB))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED1))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED2))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED4))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED8))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXEDTO8))
        bFound = false;

    if (!bFound || (0 == m_uCommonTextureFormats))
    {
        WriteToLog(_T("No non-palettized RGB texture formats enumerated."));
        SetTestRange((UINT) 1, (UINT) 1);
        return D3DTESTINIT_SKIPALL;
    }
*/
    m_dwStages = (m_d3dcaps.MaxTextureBlendStages < 2) ? 1 : 2;
    wMaxSimultaneousTextures =  (WORD)m_d3dcaps.MaxSimultaneousTextures;
    m_dwStages = (DWORD) ((wMaxSimultaneousTextures < 2) ? 1 : m_dwStages);
    SetTestRange((UINT) 1, (UINT) (m_dwStages*m_uCommonTextureFormats*(m_dwIntervals + 1)));

    if (!(m_d3dcaps.TextureOpCaps & D3DTEXOPCAPS_DOTPRODUCT3))
    {
        WriteToLog(_T("Device does NOT support D3DTOP_DOTPRODUCT3."));
        return D3DTESTINIT_SKIPALL;
    }

    return D3DTESTINIT_RUN;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test is executed successfully
//              false....otherwise
// COMMENTS:    diffuse color used as normal for D3DTOP_DOTPRODUCT3
//              note:   [  0,127] maps to [-1.0, 0.0]
//                      [128,255] maps to [ 0.0, 1.0]

bool CLightmap::ExecuteTest(UINT uTest)
{
    bool bFound = false, bResult = true, bValid = true;
    int iStage = (DWORD) 0;
    CHAR szStages[NSTAGES][34] = {
        "one stage, blend(diffuse:texture)",
        "two stage, blend(texture:texture)"
    };
    DOUBLE fRadius, fTheta = 0.0;
    DOUBLE pfOffset[2];
    DWORD dwFormat, dwStages;
    UINT i, j, k, uPoint, uTemp = (UINT) 1;

    for (i = 1; (i <= m_dwStages) && !bFound; i++)
        for (j = 0; (j < m_uCommonTextureFormats) && !bFound; j++)
            for (k = 0; (k <= m_dwIntervals) && !bFound; k++, uTemp++)
                if (uTemp == uTest)
                {
                    dwStages = i;
                    dwFormat = j;
                    uPoint = k;
                    bFound = true;
                }

    if (!bFound)
        return false;

    // compute texture coord offset from scaled lemniscate:  radius = sin(2*theta)

    if (m_dwIntervals > 0)
    {
        fTheta = (2.0f*pi*uPoint)/((DOUBLE) m_dwIntervals);
        fTheta = (fTheta > 2.0f*pi) ? (fTheta - 2.0f*pi) : fTheta;
    }

    fRadius = LEMNISCATE_SCALE*sin(m_fFactor*fTheta);
    pfOffset[0] = -fRadius*cos(fTheta);
    pfOffset[1] = -fRadius*sin(fTheta);

    if (dwFormat != m_dwFormat)
    {
//        DWORD dwFlags = CDDS_TEXTURE_VIDEO;
        DWORD dwWidth = (DWORD) TEXTURE_WIDTH, dwHeight = (DWORD) TEXTURE_HEIGHT;

        ReleaseTexture(m_pNorthernTexture);
        m_pNorthernTexture = NULL;
        ReleaseTexture(m_pSouthernTexture);
        m_pSouthernTexture = NULL;

        m_dwFormat = dwFormat; 
//        m_pMode->nTextureFormat = m_dwFormat;

        gbSouthern = false;

//        if (!(m_pNorthernTexture = CreateTexture(dwWidth, dwHeight, dwFlags, m_pNorthernImage)))
        if (!(m_pNorthernTexture = (CTexture8*)CreateChannelDataTexture(m_pDevice, dwWidth, dwHeight, &Data, m_fmtCommon[m_dwFormat])))
        {
            WriteToLog(_T("Unable to create northern texture."));
            return false;
        }

        gbSouthern = true;

//        if (!(m_pSouthernTexture = CreateTexture(dwWidth, dwHeight, dwFlags, m_pSouthernImage)))
        if (!(m_pSouthernTexture = (CTexture8*)CreateChannelDataTexture(m_pDevice, dwWidth, dwHeight, &Data, m_fmtCommon[m_dwFormat])))
        {
            WriteToLog(_T("Unable to create southern texture."));
            return false;
        }
    }

//    SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD) TRUE);

    SetTextureStageState(iStage, D3DTSS_ADDRESSU, (DWORD) D3DTADDRESS_CLAMP);
    SetTextureStageState(iStage, D3DTSS_ADDRESSV, (DWORD) D3DTADDRESS_CLAMP);
    SetTextureStageState(iStage, D3DTSS_MAGFILTER, (DWORD) TEXF_LINEAR);
    SetTextureStageState(iStage, D3DTSS_MINFILTER, (DWORD) TEXF_LINEAR);
    SetTextureStageState(iStage, D3DTSS_MIPFILTER, (DWORD) TEXF_NONE);

    if (dwStages > 1)
        SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_SELECTARG1);
    else
        SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_DOTPRODUCT3);

    SetTextureStageState(iStage, D3DTSS_COLORARG1, (DWORD) D3DTA_TEXTURE);
    SetTextureStageState(iStage, D3DTSS_COLORARG2, (DWORD) D3DTA_DIFFUSE);
    SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_SELECTARG1);
    SetTextureStageState(iStage, D3DTSS_ALPHAARG1, (DWORD) D3DTA_TEXTURE);
    SetTextureStageState(iStage, D3DTSS_ALPHAARG2, (DWORD) D3DTA_DIFFUSE);
    SetTextureStageState(iStage, D3DTSS_TEXCOORDINDEX, (DWORD) 0);
    SetTexture(iStage, m_pNorthernTexture);
    iStage++;

    if (dwStages > 1)
    {
        SetTextureStageState(iStage, D3DTSS_ADDRESSU, (DWORD) D3DTADDRESS_WRAP);
        SetTextureStageState(iStage, D3DTSS_ADDRESSV, (DWORD) D3DTADDRESS_WRAP);
        SetTextureStageState(iStage, D3DTSS_MAGFILTER, (DWORD) TEXF_LINEAR);
        SetTextureStageState(iStage, D3DTSS_MINFILTER, (DWORD) TEXF_LINEAR);
        SetTextureStageState(iStage, D3DTSS_MIPFILTER, (DWORD) TEXF_NONE);
        SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_DOTPRODUCT3);
        SetTextureStageState(iStage, D3DTSS_COLORARG1, (DWORD) D3DTA_TEXTURE);
        SetTextureStageState(iStage, D3DTSS_COLORARG2, (DWORD) D3DTA_CURRENT);
        SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_SELECTARG1);
        SetTextureStageState(iStage, D3DTSS_ALPHAARG1, (DWORD) D3DTA_TEXTURE);
        SetTextureStageState(iStage, D3DTSS_ALPHAARG2, (DWORD) D3DTA_CURRENT);
        SetTextureStageState(iStage, D3DTSS_TEXCOORDINDEX, (DWORD) 1);
        SetTexture(iStage, m_pSouthernTexture);
        iStage++;
    }
    
    SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_DISABLE);
    SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_DISABLE);

#ifndef UNDER_XBOX

    if (m_Flags.bCheck(VALIDATE))
    {
        DWORD dwSrc, dwRef;
        HRESULT hSrc, hRef;

        if (!ValidateDevice(&hSrc, &dwSrc, &hRef, &dwRef))
        {
            if (D3D_OK != hSrc)
            {
                WriteToLog(_T("Src requires %d passes:  %s."), dwSrc, hSrc);
                bValid = false;
            }

            if (D3D_OK != hRef)
            {
                WriteToLog(_T("Ref requires %d passes:  %s."), dwRef, hRef);
                bValid = false;
            }
        }
    }

#endif // !UNDER_XBOX

    if (!bValid)
    {
        SkipTests((UINT) 1);
        return true;
    }

    sprintf(m_szBuffer, "%s", szStages[dwStages - 1]);
    BeginTestCase(m_szBuffer);

    SwitchAPI((UINT)m_fFrame);

    m_pDevice->SetViewport(&m_vpFull);
    m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(74, 150, 202), 1.0f, 0);

    m_pDevice->SetViewport(&m_vpTest);

    ClearFrame();

    if (BeginScene())
    {
        D3DPRIMITIVETYPE dwType = D3DPT_TRIANGLEFAN;
        DWORD dwWidth = (DWORD) TEXTURE_WIDTH, dwHeight = (DWORD) TEXTURE_HEIGHT;
        DWORD dwFormat = D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_TEX2;
        FLEXVERT Vertices[4];

//        if (m_Flags.bCheck(SCALE_TO_WINDOW))
//        {
            dwWidth = m_vpTest.Width;
            dwHeight = m_vpTest.Height;
//        }

        Vertices[0].fx = (float)m_vpTest.X;
        Vertices[0].fy = (float)m_vpTest.Y + (D3DVALUE) dwHeight;
        Vertices[0].fz = (D3DVALUE) 0.5;
        Vertices[0].frhw = 1.0f;
        Vertices[0].dwDiffuse = RGB_MAKE(128, 128, 255);
        Vertices[0].fu = (D3DVALUE) (0.0 + pfOffset[0]);
        Vertices[0].fv = (D3DVALUE) (0.0 + pfOffset[1]);
        Vertices[0].fu2 = 0.0f;
        Vertices[0].fv2 = 0.0f;

        Vertices[1].fx = (float)m_vpTest.X;
        Vertices[1].fy = (float)m_vpTest.Y;
        Vertices[1].fz = (D3DVALUE) 0.5;
        Vertices[1].frhw = 1.0f;
        Vertices[1].dwDiffuse = RGB_MAKE(128, 128, 255);
        Vertices[1].fu = (D3DVALUE) (0.0 + pfOffset[0]);
        Vertices[1].fv = (D3DVALUE) (1.0 + pfOffset[1]);
        Vertices[1].fu2 = 0.0f;
        Vertices[1].fv2 = 1.0f;

        Vertices[2].fx = (float)m_vpTest.X + (D3DVALUE) dwWidth;
        Vertices[2].fy = (float)m_vpTest.Y;
        Vertices[2].fz = (D3DVALUE) 0.5;
        Vertices[2].frhw = 1.0f;
        Vertices[2].dwDiffuse = RGB_MAKE(128, 128, 255);
        Vertices[2].fu = (D3DVALUE) (1.0 + pfOffset[0]);
        Vertices[2].fv = (D3DVALUE) (1.0 + pfOffset[1]);
        Vertices[2].fu2 = 1.0f;
        Vertices[2].fv2 = 1.0f;

        Vertices[3].fx = (float)m_vpTest.X + (D3DVALUE) dwWidth;
        Vertices[3].fy = (float)m_vpTest.Y + (D3DVALUE) dwHeight;
        Vertices[3].fz = (D3DVALUE) 0.5;
        Vertices[3].frhw = 1.0f;
        Vertices[3].dwDiffuse = RGB_MAKE(128, 128, 255);
        Vertices[3].fu = (D3DVALUE) (1.0f + pfOffset[0]);
        Vertices[3].fv = (D3DVALUE) (0.0f + pfOffset[1]);
        Vertices[3].fu2 = 1.0f;
        Vertices[3].fv2 = 0.0f;

        if (!RenderPrimitive(dwType, dwFormat, (LPVOID) Vertices, (DWORD) 4, NULL, 0, (DWORD) 0))
        {
            WriteToLog(_T("RenderPrimitive() failed."));
            bResult = false;
        }

        // Display the adapter mode
        ShowDisplayMode();

        // Display the frame rate
        ShowFrameRate();

        // Display the console
        m_pDisplay->ShowConsole();

        if (!EndScene())
        {
            WriteToLog(_T("EndScene() failed."));
            bResult = false;
        }
    }
    else
    {
        WriteToLog(_T("BeginScene() failed."));
        bResult = false;
    }

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    sprintf(m_szBuffer, "$y%s", szStages[dwStages - 1]);
    WriteStatus("$gMode", m_szBuffer);
//    return bResult;
    return false;
}

// NAME:        ProcessFrame()
// DESC:        process frame
// INPUT:       none
// OUTPUT:      bResult..result of src:ref image comparison

bool CLightmap::ProcessFrame(void)
{
    bool bResult;
    static int nPass = 0;
    static int nFail = 0;

    bResult = GetCompareResult(0.15f, 0.78f, (int) 0);

    if (bResult)
    {
        (m_fIncrementForward) ? nPass++ : nPass--;
        sprintf(m_szBuffer, "$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
    else
    {
        (m_fIncrementForward) ? nFail++ : nFail--;
        sprintf(m_szBuffer, "$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
    }

    WriteStatus("$gSummary", m_szBuffer);
    return bResult;
}

// NAME:        TestTerminate()
// DESC:        terminate test
// INPUT:       none
// OUTPUT:      true

bool CLightmap::TestTerminate(VOID)
{
    return true;
}

// NAME:        vProcessArgs()
// DESC:        process args
// INPUT:       none
// OUTPUT:      none

VOID CLightmap::vProcessArgs(VOID)
{
    int iDefault, iResult;

    if (KeySet("WHQL"))
    {
        m_Flags.vSet(VALIDATE);
        m_fFactor = (DOUBLE) DEFAULT_FACTOR;
        m_dwIntervals = (DWORD) DEFAULT_INTERVALS;
        return;
    }

    // factor
    // default:  DEFAULT_FACTOR

    iDefault = (int) DEFAULT_FACTOR;
    ReadInteger("factor", iDefault, &iResult);
    m_fFactor = (DOUBLE) ((iResult < MIN_FACTOR) ? MIN_FACTOR : ((iResult >= MAX_FACTOR) ? MAX_FACTOR: iResult));

    // intervals
    // default:  DEFAULT_INTERVALS 

    iDefault = (int) DEFAULT_INTERVALS;
    ReadInteger("intervals", iDefault, &iResult);
    m_dwIntervals = (DWORD) ((iResult < MIN_INTERVALS) ? MIN_INTERVALS : ((iResult >= MAX_INTERVALS) ? MAX_INTERVALS: iResult));

    // scale
    // default:  off

    if (KeySet("scale"))
        m_Flags.vSet(SCALE_TO_WINDOW);

    // validate
    // default:  true

    if (!KeySet("!validate"))
        m_Flags.vSet(VALIDATE);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\linetex\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\lightmap\exe\sources.inc ===
TARGETNAME=lightmap
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_litmap.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\linetex\linetex.h ===
#ifndef __LineTex_h__
#define __LineTex_h__

//USETESTFRAME

class LineTex : public CD3DTest
{
public:
    LineTex();
    ~LineTex();

	virtual UINT TestInitialize(void);
	virtual bool ExecuteTest(UINT);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);
    virtual bool TestTerminate(void);

	virtual bool SetDefaultMatrices(void);
	virtual bool SetDefaultMaterials(void);
	virtual bool SetDefaultLightStates(void);
	virtual bool SetDefaultRenderStates(void);
	virtual bool SetDefaultLights(void);

private:
//	CMaterial*		m_pMaterial;
//	CLight*			m_pLight;
	CTexture8*		m_pTextureArray[8];

    D3DVERTEX*      m_pVertices;
    DWORD           m_dwVertices;

    DWORD           m_dwCurrentTestNumber;
    DWORD           m_dwNumFailed;

    bool            GenerateLineList(void);
};

#endif // __LineTex_h__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\linetex\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\lightmap\lightmap.h ===
// FILE:        lightmap.h
// DESC:        lightmap class header for D3DTOP_DOTPRODUCT3 conformance test
// AUTHOR:      Todd M. Frost

//USETESTFRAME

const DWORD NOFORMAT = 0xFFFFFFFF; // no format index

const UINT MAXBUFFER = 128;

const UINT NSTAGES = 2; // number of stages

class CLightmap: public CD3DTest
{
    private:
        CHAR m_szBuffer[MAXBUFFER];   // text buffer
        DOUBLE m_fFactor;             // lemniscate factor (r = sin(factor*theta))
        DWORD m_dwFormat;             // current RGB texture format index
        DWORD m_dwIntervals;          // intervals for lemniscate traversal 
        DWORD m_dwStages;             // max texture stages (clamped to 2)
        CFlags m_Flags;               // flags class
//        CImageData *m_pNorthernImage; // image data class (northern hemisphere/field)
//        CImageData *m_pSouthernImage; // image data class (southern hemisphere/field)
        CTexture8 *m_pNorthernTexture; // texture class
        CTexture8 *m_pSouthernTexture; // texture class
        
        CHANNELDATA Data;

    public:
        CLightmap();
        ~CLightmap();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
        virtual bool ProcessFrame(VOID);
        virtual bool TestTerminate(VOID);
        VOID vProcessArgs(VOID);
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\linetex\linetex.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "LineTex.h"
//#include "cimageloader.h"

//CD3DWindowFramework     theApp;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    LineTex*        TestOne;
    BOOL            bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    // Create the scene
    TestOne = new LineTex();
    if (!TestOne) {
        return FALSE;
    }

    // Initialize the scene
    if (!TestOne->Create(pDisplay)) {
        TestOne->Release();
        return FALSE;
    }

    bRet = TestOne->Exhibit(pnExitCode);

    // Clean up the scene
    TestOne->Release();

    return bRet;
}

LineTex::LineTex()
{
//    m_pMaterial = NULL;
//    m_pLight = NULL;
    for (int i = 0; i < 8; i++)
        m_pTextureArray[i] = NULL;

    m_pVertices = NULL;
    m_dwVertices = 0;

    m_dwCurrentTestNumber = 0;
    m_dwNumFailed = 0;

	m_szTestName = TEXT("LineTex");
	m_szCommandKey = TEXT("linetex");
}

LineTex::~LineTex()
{
//    RELEASE(m_pMaterial);
//    RELEASE(m_pLight);
    for (int i = 0; i < 8; i++)
    {
        ReleaseTexture(m_pTextureArray[i]);
    }

    if (m_pVertices)
    {
        delete [] m_pVertices;
        m_pVertices = NULL;
        m_dwVertices = 0;
    }
}



bool LineTex::GenerateLineList(void) {
	int		iSegments = 500;
	int		iCount;
	float	fX = -0.9f;
	float	fY = 0.f;
	float	fXInc = 1.8f / iSegments;

	m_dwVertices = 2 * iSegments;
	m_pVertices = new D3DVERTEX [ m_dwVertices ];
	if (m_pVertices == NULL)
		return false;

	for (iCount = 0; iCount < iSegments; iCount++) {
		m_pVertices[2*iCount+0] = cD3DVERTEX(cD3DVECTOR(fX, fY+0.9f, 0.f), Normalize(cD3DVECTOR(0.f, 1.f, 1.f)), 0.f, 0.f);
		m_pVertices[2*iCount+1] = cD3DVERTEX(cD3DVECTOR(fX, fY-0.9f, 0.f), Normalize(cD3DVECTOR(1.f, 0.f, 1.f)), 0.f, 0.f);

        m_pVertices[2*iCount+0].tu = (m_pVertices[2*iCount+0].x + 1.f) / 2.f;
        m_pVertices[2*iCount+0].tv = (m_pVertices[2*iCount+0].y + 1.f) / 2.f;

        m_pVertices[2*iCount+1].tu = (m_pVertices[2*iCount+1].x + 1.f) / 2.f;
        m_pVertices[2*iCount+1].tv = (m_pVertices[2*iCount+1].y + 1.f) / 2.f;

		fX += fXInc;
	}
	return true;
}



UINT LineTex::TestInitialize(void)
{
//	CImageLoader    Loader;
//	CImageData*		pImage = NULL;
    
    SetTestRange(1, 10);

    // Get number of supported texture stages with textures
    DWORD   dwTexCount = m_d3dcaps.MaxSimultaneousTextures;

    // Check that the driver supports line texturing
    if (m_dwVersion >= 0x0800)
    {
        if (NULL == (m_d3dcaps.TextureCaps != NULL)) // ##REVIEW: How is line texturing reported in D3DCAPS8?
        {
            WriteToLog("LineTex: driver does not support line texturing\n");
            return D3DTESTINIT_SKIPALL;
        }
    }
    else
    {
//        if (NULL == (m_d3dcaps.TextureBlendCaps & D3DPTBLENDCAPS_MODULATE))
//        {
//            WriteToLog("LineTex: driver does not support line texturing\n");
//            return D3DTESTINIT_SKIPALL;
//        }
    }
    
    // Generate line strip vertices
    if (!GenerateLineList())
    {
        WriteToLog("LineTex: not enough memory to generate line list.\n");
        return D3DTESTINIT_ABORT;
    }

    // Loading textures
    static DWORD tex[8][8] = 
    {
        {0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff},
        {0x00ffffff, 0x000000ff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff},
        {0x00ffffff, 0x00ffffff, 0x0000ff00, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff},
        {0x00ffffff, 0x00ffffff, 0x00ffffff, 0x0000ffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff},
        {0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ff0000, 0x00ffffff, 0x00ffffff, 0x00ffffff},
        {0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ff00ff, 0x00ffffff, 0x00ffffff},
        {0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffff00, 0x00ffffff},
        {0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00f0f0f0}
    };

    for (int i = 0; i < (int)dwTexCount; i++) {
		char fbuf[10];
		sprintf(fbuf, "tex%1d.bmp", i);
//		pImage = Loader.LoadStripes(256, 256, 8, tex[i], true);
//        if (NULL == pImage)
//        {
//            WriteToLog("LineTex: failed to load %s image\n", fbuf);
//            return D3DTESTINIT_ABORT;
//        }
//		m_pTextureArray[i] = CreateTexture(256,256,NULL,pImage);
//		RELEASE(pImage);
        m_pTextureArray[i] = (CTexture8*)CreateStripedTexture(m_pDevice, 256, 256, 8, tex[i], true);
        if (NULL == m_pTextureArray[i]) 
        {
			WriteToLog("LineTex: failed to create texture from %s image\n", fbuf);
            return D3DTESTINIT_ABORT;
        }

		SetTexture(i, m_pTextureArray[i]);
        SetTextureStageState(i, D3DTSS_TEXCOORDINDEX, (DWORD)0);
		SetTextureStageState(i, D3DTSS_COLORARG1, (DWORD)D3DTA_TEXTURE);
		if (i) 
		{
			SetTextureStageState(i, D3DTSS_COLORARG2, (DWORD)D3DTA_CURRENT);
			SetTextureStageState(i, D3DTSS_COLOROP, (DWORD)D3DTOP_MODULATE);
		}
		else
		{
			SetTextureStageState(i, D3DTSS_COLORARG2, (DWORD)D3DTA_DIFFUSE);
			SetTextureStageState(i, D3DTSS_COLOROP, (DWORD)D3DTOP_SELECTARG1);
		}

    }

	return D3DTESTINIT_RUN;
}


bool LineTex::ExecuteTest(UINT iTest)
{
    m_dwCurrentTestNumber = (DWORD)iTest;

    BeginTestCase("");
    return true;
}

void LineTex::SceneRefresh(void) 
{
    if (BeginScene())
    {
        RenderPrimitive(D3DPT_LINELIST, D3DFVF_VERTEX, m_pVertices, m_dwVertices, NULL, 0, 0);
        EndScene();
    }
}

bool LineTex::ProcessFrame(void)
{
	bool    bResult;

    bResult = GetCompareResult(0.15f);

    if (!bResult) {
		WriteToLog("$rLineTex: Test fails on frame %d\n", m_dwCurrentTestNumber);
		Fail();
		m_dwNumFailed++;
    }
	else {
		Pass();
	}
	EndTestCase();

	return true;
}

bool LineTex::TestTerminate(void)
{
//    RELEASE(m_pMaterial);
//    RELEASE(m_pLight);
    for (int i = 0; i < 8; i++)
    {
        ReleaseTexture(m_pTextureArray[i]);
        m_pTextureArray[i] = NULL;
    }

    if (m_pVertices)
    {
        delete [] m_pVertices;
        m_pVertices = NULL;
        m_dwVertices = 0;
    }
	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\luminance\flags.h ===
// FILE:        flags.h
// DESC:        flags class header
// AUTHOR:      Todd M. Frost

#ifndef _CFLAGS
#define _CFLAGS

class CFlags {
    private:
        DWORD m_dwCurrent; // current flags
        DWORD m_dwSaved;   // saved flags

    public:
        inline bool bCheck(DWORD dwFlags)
        {
            if (m_dwCurrent & dwFlags)
                return true;
            else
                return false;
        };
        inline VOID vClear(DWORD dwFlags)
        {
            m_dwCurrent &= ~dwFlags;
        };
        inline VOID vSet(DWORD dwFlags)
        {
            m_dwCurrent |= dwFlags;
        };
        inline DWORD dwGet(VOID)
        {
            return m_dwCurrent;
        };
        inline VOID vSave(VOID)
        {
            m_dwSaved = m_dwCurrent;
        };
        inline VOID vRestore(VOID)
        {
            m_dwCurrent = m_dwSaved;
        };
        inline VOID vReplace(DWORD dwFlags)
        {
            m_dwCurrent = dwFlags;
        };
        CFlags(VOID);
        ~CFlags(VOID); 
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\linetex\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_linetx
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    LineTex.cpp \
    Default.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\linetex\default.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "LineTex.h"

bool LineTex::SetDefaultMatrices(void) {
    D3DMATRIX           Matrix;
    // We need to be far from scane to receive correct specular highlights
	D3DVECTOR           from = cD3DVECTOR(0.0f, 0.0f, 1.0f); 
    D3DVECTOR	        at = cD3DVECTOR(0.0f, 0.0f, 0.0f);
    D3DVECTOR	        up = cD3DVECTOR(0.0f, 1.0f, 0.0f);
    float				fWidth = 100.f;
	float				fHeight = 100.f;
	float               fZn = 0.1f;
	float               fZf = 2.f;

    
	// Projection matrix
	Matrix = OrthoMatrix(2.f, 2.f, fZn, fZf);
//	m_mProjectionMatrix = ProjectionMatrix(pi/4, 1.f, fZn, fZf);
	if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
		return false;

    Matrix = IdentityMatrix();
    if (!SetTransform(D3DTRANSFORMSTATE_WORLD,&Matrix))
        return false;

	Matrix = ViewMatrix(from, at, up);
    if (!SetTransform(D3DTRANSFORMSTATE_VIEW,&Matrix))
        return false;

    return true;
}

bool LineTex::SetDefaultMaterials(void) {
    D3DMATERIAL8         Material;
    HRESULT              hr;

//    m_pMaterial = CreateMaterial();

//    if (NULL == m_pMaterial)
//        return false;

    ZeroMemory(&Material,sizeof(D3DMATERIAL8));
//    Material.dwSize=sizeof(D3DMATERIAL);
    Material.Diffuse.r  = 1.0f;
    Material.Diffuse.g  = 1.0f;
    Material.Diffuse.b  = 1.0f;
    Material.Diffuse.a  = 1.0f;

    Material.Ambient.r  = 1.0f;
    Material.Ambient.g  = 1.0f;
    Material.Ambient.b  = 1.0f;
    Material.Ambient.a  = 1.0f;

    Material.Specular.r = 1.0f;
    Material.Specular.g = 1.0f;
    Material.Specular.b = 1.0f;
    Material.Specular.a = 1.0f;

    Material.Emissive.r = 0.0f;
    Material.Emissive.g = 0.0f;
    Material.Emissive.b = 0.0f;
    Material.Emissive.a = 0.0f;

    Material.Power      = 20.0f;
//    Material.dwRampSize = 32;
//	Material.hTexture	= 0;

//    if (!m_pMaterial->SetMaterial(&Material))
//        return false;

    // Now that the material data has been set,
    // re-set the material so the changes get picked up.

//    if (!SetMaterial(m_pMaterial))
//        return false;

//    return true;

    hr = m_pDevice->SetMaterial(&Material);
    return (hr == D3D_OK);
}


bool LineTex::SetDefaultLights(void) {
    D3DLIGHT8   Light;
	D3DVECTOR	vLightPos = cD3DVECTOR(0.f, 0.f, -500.f);
	D3DVECTOR	vLightDir = cD3DVECTOR(0.f, 0.f, 1.f);
    HRESULT     hr;

	ZeroMemory(&Light,sizeof(D3DLIGHT8));

	Light.Type           = D3DLIGHT_SPOT;
	Light.Diffuse.r		= 1.0f;
	Light.Diffuse.g		= 1.0f;
	Light.Diffuse.b		= 1.0f;
	Light.Diffuse.a		= 1.0f;
	Light.Position		= vLightPos;
	Light.Direction		= vLightDir;
	Light.Range           = D3DLIGHT_RANGE_MAX;
	Light.Attenuation0    = 1.f;
	Light.Attenuation1    = 0.f;
	Light.Attenuation2    = 0.f;
    Light.Theta			= pi/50;
    Light.Phi				= pi/20;
//	m_pLight = CreateLight();
//	if (NULL == m_pLight)
//		return false;

//	m_pLight->SetLight(&Light);
//	if (!SetLight(0,m_pLight))
//		return false;
	
//	return true;

    hr = m_pDevice->SetLight(0, &Light);
    if (FAILED(hr)) {
        return false;
    }

    hr = m_pDevice->LightEnable(0, TRUE);
	
	return (hr == D3D_OK);
}


bool LineTex::SetDefaultLightStates(void) {
    if (m_dwVersion >= 0x0700) 
	{
		SetRenderState(D3DRENDERSTATE_AMBIENT,RGB_MAKE(90,90,90));
		SetRenderState(D3DRENDERSTATE_LOCALVIEWER,(DWORD)TRUE);
#ifndef UNDER_XBOX
		SetRenderState(D3DRENDERSTATE_CLIPPING, (DWORD)TRUE);
#endif // !UNDER_XBOX
	}
	else 
	{
//	    SetLightState(D3DLIGHTSTATE_AMBIENT,RGB_MAKE(50,50,50));
	}
    return true;
}


bool LineTex::SetDefaultRenderStates(void) {
#ifndef UNDER_XBOX
	SetRenderState(D3DRENDERSTATE_LASTPIXEL, (DWORD)TRUE);
#endif // !UNDER_XBOX
	SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE);
	SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
	SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_ZERO);
    if (m_dwVersion >= 0x0700) {
		SetRenderState(D3DRENDERSTATE_LIGHTING, (DWORD)TRUE);
	}
	SetTextureStageState(0, D3DTSS_MINFILTER, (DWORD)TEXF_LINEAR);
	SetTextureStageState(0, D3DTSS_MIPFILTER, (DWORD)TEXF_POINT);
	SetTextureStageState(0, D3DTSS_ADDRESSU, (DWORD)D3DTADDRESS_MIRROR);
	SetTextureStageState(0, D3DTSS_ADDRESSV, (DWORD)D3DTADDRESS_MIRROR);
	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\linetex\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=LineTex
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_linetx.lib

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_linetx.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\linetex\modulex.h ===
#define PREPEND_MODULE(Suffix) linetex##Suffix
#define MODULE_STRING "linetex"
#pragma comment(linker, "/include:_linetex_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\linetex\exe\sources.inc ===
TARGETNAME=LineTex
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_linetx.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\luminance\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\luminance\address.cpp ===
// FILE:        address.cpp
// DESC:        texture address mode tests
// AUTHOR:      Todd M. Frost

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "cshapes.h"
#include "CShapesFVF.h"
#include "flags.h"
#include "luminance.h"

// NAME:        CLuminanceAddress()
// DESC:        luminance address class constructor
// INPUT:       none
// OUTPUT:      none

CLuminanceAddress::CLuminanceAddress()
{
    m_szTestName = TEXT("[Alpha]Luminance address");
    m_szCommandKey = TEXT("Address");
}

// NAME:        ~CLuminanceAddress()
// DESC:        luminance address class destructor
// INPUT:       none
// OUTPUT:      none

CLuminanceAddress::~CLuminanceAddress()
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CLuminanceAddress::CommandLineHelp(void)
{
    CLuminance::CommandLineHelp();
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      D3DTESTINIT_ code

UINT CLuminanceAddress::TestInitialize(VOID)
{
    UINT uResult = CLuminance::TestInitialize();

    if (D3DTESTINIT_RUN != uResult)
        return uResult;

    SetTestRange((UINT) 1, (UINT) (m_uCommonTextureFormats*NSTAGES*NMODES*NMODES));
    return D3DTESTINIT_RUN;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest........test number
// OUTPUT:      CLuminance::ExecuteTests()...if test executed
//              false........................otherwise

bool CLuminanceAddress::ExecuteTest(UINT uTest)
{
    DWORD dwFormat, dwStages, dwWidth = (DWORD) 256, dwHeight = (DWORD) 256;
    UINT i, j, uTemp;

    for (uTemp = 1, dwStages = 1; dwStages <= NSTAGES; dwStages++)
        for (dwFormat = 0; dwFormat < m_uCommonTextureFormats; dwFormat++)
            for (i = 0; i < NMODES; i++)
                for (j = 0; j < NMODES; j++, uTemp++)
                    if (uTemp == uTest)
                    {
                        if (((i == j) || m_Flags.bCheck(INDEPENDENT)) &&
                            (m_dwTexAddressCaps & m_dwModeCapsVals[i][0]) &&
                            (m_dwTexAddressCaps & m_dwModeCapsVals[j][0]) &&
                            (dwStages <= m_dwStagesMax) &&
                            bSetLuminance(dwFormat, dwWidth, dwHeight))
                        {
                            m_dwStages = dwStages;
                            m_dwModes[0] = (D3DTEXTUREADDRESS) m_dwModeCapsVals[i][1];
                            m_dwModes[1] = (D3DTEXTUREADDRESS) m_dwModeCapsVals[j][1];
                            return CLuminance::ExecuteTest(uTest);
                        }
                        else
                        {
                            SkipTests((UINT) 1);
                            return false;
                        }
                    }

    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\luminance\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\luminance\flags.cpp ===
// FILE:        flags.cpp
// DESC:        flags class methods
// AUTHOR:      Todd M. Frost

#include "windows.h"
#include "flags.h"

#ifdef CLASSNAME
#undef CLASSNAME
#endif
#define CLASSNAME TEXT("CFlags")

// NAME:        CFlags()
// DESC:        constructor for flags class
// INPUT:       none
// OUTPUT:      none

CFlags::CFlags(VOID)
{
    m_dwCurrent = (DWORD) 0;
    m_dwSaved = (DWORD) 0;
}

// NAME:        ~CFlags()
// DESC:        destructor for flags class
// INPUT:       none
// OUTPUT:      none

CFlags::~CFlags(VOID)
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\luminance\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_lumin
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
        luminance.cpp \
        flags.cpp \
        address.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\luminance\luminance.cpp ===
// FILE:        luminance.cpp
// DESC:        luminance class methods for [alpha]luminance texture format conformance tests
// AUTHOR:      Todd M. Frost

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "CShapesFVF.h"
#include "flags.h"
#include "luminance.h"

//CD3DWindowFramework App;

UINT g_uBumps = (UINT) DEFAULT_BUMPS; // global helper variable for fAlpha(), fLuminance()

// NAME:        fAlpha()
// DESC:        alpha
// INPUT:       u....u texture coord
//              v....v texture coord
// OUTPUT:      f = sin(u)*sin(v)
// COMMENTS:    (u,v) scaled from [0,0]x[1,1] to [-g_uBumps*pi/2,g_uBumps*pi/2]
//              [-1,1] maps to [0,255] in LoadChannelData() (CIL_UNSIGNED)

FLOAT fAlpha(FLOAT u, FLOAT v)
{
    FLOAT fTemp, x, y;

    fTemp = (FLOAT) (g_uBumps*pi);
    x = fTemp*(u - 0.5f);
    y = fTemp*(v - 0.5f);

    return (FLOAT) (sin(x)*sin(y));
}

#define P0 1.0f
#define P1 -1.0f
#define P2 1.0f
#define P3 -1.0f

// NAME:        fLuminance()
// DESC:        luminance
// INPUT:       u....u texture coord
//              v....v texture coord
// OUTPUT:      bilinear blend:
//
//                  (1 - v)[(1 - u)*P0 + u*P3] + v*[(1 - u)*P1 + u*P2]
//
//                    P1 P2
//                  v P0 P3
//                  + u
//
// COMMENTS:    [-1,1] maps to [0,255] in LoadChannelData() (CIL_UNSIGNED)

FLOAT fLuminance(FLOAT u, FLOAT v)
{
    FLOAT s = 1.0f - u;

    return (1 - v)*(s*P0 + u*P3) + v*(s*P1 + u*P2);
}

#undef P0
#undef P1
#undef P2
#undef P3

//******************************************************************************
CTexture8* CreateLumChannelDataTexture(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, PCHANNELDATA pData, D3DFORMAT fmt) {

    CTexture8*      pd3dt;
    D3DLOCKED_RECT  d3dlr;
    LPDWORD         pdwPixel;
    LPWORD          pwPixel;
    LPBYTE          pPixel;
    UINT            uStride;
    FLOAT           u, v;
    FLOAT           fDelta[2];
    FLOAT           fChannel[4];
    UINT            i, j;
    BYTE            a, r, g, b;
    BOOL            bBump;
    HRESULT         hr;

    if (!pData)
    {
        return NULL;
    }

    pd3dt = (CTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, fmt);
    if (!pd3dt) {
        return NULL;
    }

    hr = pd3dt->LockRect(0, &d3dlr, NULL, 0);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"))) {
        pd3dt->Release();
        return NULL;
    }

    switch (fmt) {
        case D3DFMT_L8 :
            pPixel = (LPBYTE)d3dlr.pBits;
            uStride = d3dlr.Pitch;
            break;
        case D3DFMT_A8L8:
        case D3DFMT_L6V5U5:
            pwPixel = (LPWORD)d3dlr.pBits;
            uStride = d3dlr.Pitch / 2;
            break;
        case D3DFMT_X8L8V8U8:
            pdwPixel = (LPDWORD)d3dlr.pBits;
            uStride = d3dlr.Pitch / 4;
            break;
    }

    fDelta[0] = (FLOAT) 1.0 / (FLOAT) (dwWidth - 1);
    fDelta[1] = (FLOAT) 1.0 / (FLOAT) (dwHeight - 1); 

    for (v = 1.0f, j = 0; j < dwHeight; j++, v -= fDelta[1])
    {
        for (u = 0.0f, i = 0; i < dwWidth; i++, u += fDelta[0])
        {
            fChannel[ALPHA_CHANNEL] = (pData->fAlpha) ? pData->fAlpha(u, v) : 0.0f;       
            fChannel[  RED_CHANNEL] = (pData->fRed)   ? pData->fRed(u, v) : 0.0f;       
            fChannel[GREEN_CHANNEL] = (pData->fGreen) ? pData->fGreen(u, v) : 0.0f;       
            fChannel[ BLUE_CHANNEL] = (pData->fBlue)  ? pData->fBlue(u, v) : 0.0f;       

            if (pData->dwAlpha & CIL_UNSIGNED)
                a = (BYTE)(UINT8) ((fChannel[ALPHA_CHANNEL] + 1.0)*127.5);
            else
                a = (BYTE)(INT8) (fChannel[ALPHA_CHANNEL]*127.0);

            if (pData->dwRed & CIL_UNSIGNED)
                r = (BYTE)(UINT8) ((fChannel[RED_CHANNEL] + 1.0)*127.5);
            else
                r = (BYTE)(INT8) (fChannel[RED_CHANNEL]*127.0);

            if (pData->dwGreen & CIL_UNSIGNED)
                g = (BYTE)(UINT8) ((fChannel[GREEN_CHANNEL] + 1.0)*127.5);
            else
                g = (BYTE)(INT8) (fChannel[GREEN_CHANNEL]*127.0);

            if (pData->dwBlue & CIL_UNSIGNED)
                b = (BYTE)(UINT8) ((fChannel[BLUE_CHANNEL] + 1.0)*127.5);
            else
                b = (BYTE)(INT8) (fChannel[BLUE_CHANNEL]*127.0);

            switch (fmt) {
                case D3DFMT_L8 :
                    pPixel[i] = r;
                    break;
                case D3DFMT_A8L8:
                    pwPixel[i] = a << 8 | r;
                    break;
                case D3DFMT_L6V5U5:
                    pwPixel[i] = (a & 0xFC) << 8;
                    break;
                case D3DFMT_X8L8V8U8:
                    pdwPixel[i] = r << 16;
                    break;
            }
        }

        pPixel += uStride;
        pwPixel += uStride;
        pdwPixel += uStride;
    }

    hr = pd3dt->UnlockRect(0);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::UnlockRect"))) {
        pd3dt->Release();
        return NULL;
    }

    return pd3dt;
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CLuminanceAddress*  LuminanceAddress;
    BOOL                bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    // Create the scene
    LuminanceAddress = new CLuminanceAddress();
    if (!LuminanceAddress) {
        return FALSE;
    }

    // Initialize the scene
    if (!LuminanceAddress->Create(pDisplay)) {
        LuminanceAddress->Release();
        return FALSE;
    }

    bRet = LuminanceAddress->Exhibit(pnExitCode);

    // Clean up the scene
    LuminanceAddress->Release();

    return bRet;
}

// NAME:        CLuminance()
// DESC:        constructor for luminance class
// INPUT:       none
// OUTPUT:      none

CLuminance::CLuminance(VOID)
{
    D3DFORMAT fmt[] = {
        D3DFMT_L8,
        D3DFMT_A8L8,
        D3DFMT_L6V5U5,
        D3DFMT_X8L8V8U8,
//#ifdef UNDER_XBOX
#if 0 // ##TODO: Add these formats when the new driver comes online
        D3DFMT_AL8,
        D3DFMT_L16,
        D3DFMT_LIN_A8L8,
        D3DFMT_LIN_AL8,
        D3DFMT_LIN_L16,
#endif // UNDER_XBOX
    };

    m_dwModes[0] = DEFAULT_MODE;
    m_dwModes[1] = DEFAULT_MODE;

    m_dwFormat = NOFORMAT;

    m_dwFVF = (DWORD) 0;

    m_dwStages = (DWORD) 1;
    m_dwStagesMax = (DWORD) 0;
    m_dwTexAddressCaps = (DWORD) 0;
    m_dwTexOpCaps = (DWORD) 0;

    m_dwModeCapsVals[0][0] = D3DPTADDRESSCAPS_BORDER;
    m_dwModeCapsVals[0][1] = D3DTADDRESS_BORDER;
    m_dwModeCapsVals[1][0] = D3DPTADDRESSCAPS_CLAMP;
    m_dwModeCapsVals[1][1] = D3DTADDRESS_CLAMP;
    m_dwModeCapsVals[2][0] = D3DPTADDRESSCAPS_MIRROR;
    m_dwModeCapsVals[2][1] = D3DTADDRESS_MIRROR;
    m_dwModeCapsVals[3][0] = D3DPTADDRESSCAPS_WRAP;
    m_dwModeCapsVals[3][1] = D3DTADDRESS_WRAP;

    m_pVertices = NULL;
    
//    m_pBaseImage = NULL;
//    m_pLuminanceImage = NULL;

    m_pBaseTexture = NULL;
    m_pLuminanceTexture = NULL;

//    m_pMaterial = NULL;

//#ifndef UNDER_XBOX
#if 1 // ##TODO: Add additional formats when the new driver comes online
    m_uCommonTextureFormats = 4;
#else
    m_uCommonTextureFormats = 9;
#endif // UNDER_XBOX
    memcpy(m_fmtCommon, fmt, m_uCommonTextureFormats * sizeof(D3DFORMAT));
}

// NAME:        ~CLuminance()
// DESC:        destructor for luminance class
// INPUT:       none
// OUTPUT:      none

CLuminance::~CLuminance(VOID)
{
    if (m_pVertices)
        free(m_pVertices);

//    RELEASE(m_pMaterial);

    ReleaseTexture(m_pLuminanceTexture);
//    RELEASE(m_pLuminanceImage);

    ReleaseTexture(m_pBaseTexture);
//    RELEASE(m_pBaseImage);
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CLuminance::CommandLineHelp(void)
{
//    WriteCommandLineHelp("$ybumps: $wbumps per texture $c(default=8)");
//    WriteCommandLineHelp("$yvalidate: $wvalidate $c(On/$wOff$c)");
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      appropriate D3DTESTINIT code
// COMMENTS:    material released before returning D3DTESTINIT_SKIPALL or D3DTESTINIT_ABORT
//              RELEASE(m_pMaterial) causes access violations in TestTerminate otherwise

UINT CLuminance::TestInitialize(VOID)
{
    bool bFound;
//    CImageLoader Loader;
    DWORD dwCount, dwFlags, dwFormat, dwWidth = (DWORD) 256, dwHeight = (DWORD) 256;
    DWORD dwColors[4] = {
        RGBA_MAKE( 255, 255, 255, 255),
        RGBA_MAKE( 255,   0,   0, 255),
        RGBA_MAKE(   0, 255,   0, 255),
        RGBA_MAKE(   0,   0, 255, 255)
    };
//    INT nDevice = m_pMode->nSrcDevice;
    UINT i;
    WORD wMaxSimultaneousTextures;

    m_dwModes[0] = DEFAULT_MODE;
    m_dwModes[1] = DEFAULT_MODE;

    m_dwFormat = NOFORMAT;

    vProcessArgs();

    // scan for base texture (non-palettized rgb texture with largest number of green bits)

    bFound = true;

/*
    if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_ALPHAPIXELS))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED1))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED2))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED4))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXED8))
        bFound = false;
    else if (!RequestTextureFormats((DWORD) PF_RGB, (DWORD) PF_PALETTEINDEXEDTO8))
        bFound = false;

    if (!bFound || (0 == m_uCommonTextureFormats))
    {
        WriteToLog(_T("No non-palettized RGB texture formats enumerated."));
        RELEASE(m_pMaterial);
        return D3DTESTINIT_ABORT;
    }

    m_pMode->nTextureFormat = (int) 0;
    dwCount = (DWORD) 0;

    for (dwFormat = 0; dwFormat < m_uCommonTextureFormats; dwFormat++)
        if (dwCount < dwGetCountFromMask(m_pCommonTextureFormats[dwFormat].ddpfPixelFormat.dwGBitMask))
        {
            dwCount = dwGetCountFromMask(m_pCommonTextureFormats[dwFormat].ddpfPixelFormat.dwGBitMask);
            m_pMode->nTextureFormat = (int) dwFormat;
        }
*/

//    if (!(m_pBaseImage = Loader.LoadGradient(dwWidth, dwHeight, dwColors)))
//    {
//        WriteToLog(_T("Unable to load base image."));
//        RELEASE(m_pMaterial);
//        return D3DTESTINIT_ABORT;
//    }

//    if (!(m_pBaseTexture = CreateTexture(dwWidth, dwHeight, CDDS_TEXTURE_VIDEO, m_pBaseImage)))
    if (!(m_pBaseTexture = CreateGradientTexture(m_pDevice, dwWidth, dwHeight, dwColors, D3DFMT_X8R8G8B8)))
    {
        WriteToLog(_T("Unable to create base texture."));
//        RELEASE(m_pMaterial);
        return D3DTESTINIT_ABORT;
    }

    // scan for [alpha]luminance textures
/*
    ResetTextureFormats();

    if (!RequestTextureFormats((DWORD) PF_LUMINANCE))
    {
        WriteToLog(_T("No LUMINANCE texture formats enumerated."));
        RELEASE(m_pMaterial);
        SetTestRange((UINT) 1, (UINT) 1);
        return D3DTESTINIT_SKIPALL;
    }
*/
    m_dwStagesMax = m_d3dcaps.MaxTextureBlendStages;
    wMaxSimultaneousTextures =  (WORD)m_d3dcaps.MaxSimultaneousTextures;
    m_dwStagesMax = (DWORD) ((wMaxSimultaneousTextures < 2) ? 1 : m_dwStagesMax);

    m_dwTexAddressCaps = m_d3dcaps.TextureAddressCaps;
    m_dwTexOpCaps = m_d3dcaps.TextureOpCaps;

    if (m_dwTexAddressCaps & D3DPTADDRESSCAPS_INDEPENDENTUV)
        m_Flags.vSet(INDEPENDENT);

    if (!m_Shape.NewShape(CS_MESH))
    {
        WriteToLog(_T("Unable to create mesh."));
//        RELEASE(m_pMaterial);
        return D3DTESTINIT_ABORT;
    }

    m_dwFVF = D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX2;
    m_Shape.ConvertToFVF(m_dwFVF);
    m_Shape.ScaleCoords((DWORD) 0, (D3DVALUE) 3.0, (D3DVALUE) 3.0);
    m_Shape.OffsetCoords((DWORD) 0, (D3DVALUE) -1.0, (D3DVALUE) -1.0);

    m_Shape.ScaleCoords((DWORD) 1, (D3DVALUE) 3.0, (D3DVALUE) 3.0);
    m_Shape.OffsetCoords((DWORD) 1, (D3DVALUE) -1.0, (D3DVALUE) -1.0);

    m_pVertices = (PFLEXVERT) malloc(sizeof(FLEXVERT)*m_Shape.m_nVertices);

    if (!m_pVertices)
    {
        WriteToLog(_T("Unable to create non strided data."));
//        RELEASE(m_pMaterial);
        return D3DTESTINIT_ABORT;
    }

    for (i = 0; i < (UINT)m_Shape.m_nVertices; i++)
    {
        m_pVertices[i].fPx = m_Shape.m_pVertices[i].x;
        m_pVertices[i].fPy = m_Shape.m_pVertices[i].y;
        m_pVertices[i].fPz = m_Shape.m_pVertices[i].z;

        m_pVertices[i].fNx = m_Shape.m_pVertices[i].nx;
        m_pVertices[i].fNy = m_Shape.m_pVertices[i].ny;
        m_pVertices[i].fNz = m_Shape.m_pVertices[i].nz;

        m_pVertices[i].fSu = m_Shape.m_TexCoords[i].Pair[0].tu;
        m_pVertices[i].fSv = m_Shape.m_TexCoords[i].Pair[0].tv;

        m_pVertices[i].fTu = m_Shape.m_TexCoords[i].Pair[1].tu;
        m_pVertices[i].fTv = m_Shape.m_TexCoords[i].Pair[1].tv;
    }

//    CHANNELDATA Data;
    Data.dwAlpha = (DWORD) CIL_UNSIGNED;
    Data.dwRed = (DWORD) CIL_UNSIGNED;
    Data.dwGreen = (DWORD) 0;
    Data.dwBlue = (DWORD) 0;
    Data.fAlpha = fAlpha;
    Data.fRed = fLuminance;
    Data.fGreen = NULL;
    Data.fBlue = NULL;
/*
    if (!(m_pLuminanceImage = Loader.LoadChannelData(dwWidth, dwHeight, &Data)))
    {
        WriteToLog(_T("Unable to load luminance image."));
        RELEASE(m_pMaterial);
        return D3DTESTINIT_ABORT;
    }
*/
    return D3DTESTINIT_RUN;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test is executed successfully
//              false....otherwise

bool CLuminance::ExecuteTest(UINT uTest)
{
    bool bResult = true, bValid = true;
    int iStage;
    CHAR szFormat[MAXBUFFER];
    CHAR szMode[NMODES][7] = {
        "wrap",
        "mirror",
        "clamp",
        "border"
    };
    CHAR szStages[NSTAGES][33] = {
        "1 stage, blend(diffuse:texture)",
        "2 stage, blend(gradient:texture)",
        "3 stage, blend(gradient:texture)"
    };
    D3DCOLOR dwColors[NSTAGES] = {
        RGBA_MAKE(  0,   0, 255, 255),
        RGBA_MAKE(  0, 255,   0, 255),
        RGBA_MAKE(  0, 255, 255,   0)
    };
    D3DTEXTUREOP dwOp = D3DTOP_MODULATE;

//    if (m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat.dwFlags & PF_ALPHAPIXELS)
    if (m_fmtCommon[nTextureFormat] == D3DFMT_A8L8
#ifdef UNDER_XBOX
        || m_fmtCommon[nTextureFormat] == D3DFMT_LIN_A8L8
#endif // UNDER_XBOX
    )
        if (m_dwTexOpCaps & D3DTEXOPCAPS_BLENDTEXTUREALPHA)
            dwOp = D3DTOP_BLENDTEXTUREALPHA;

    // variation independent, texture stage state settings

    for (iStage = 0; iStage < 3; iStage++)
    {
        if (m_Flags.bCheck(INDEPENDENT))
        {
            SetTextureStageState(iStage, D3DTSS_ADDRESSU, (DWORD) m_dwModes[0]);
            SetTextureStageState(iStage, D3DTSS_ADDRESSV, (DWORD) m_dwModes[1]);
        }
        else
        {
            SetTextureStageState(iStage, D3DTSS_ADDRESSU, (DWORD) m_dwModes[0]);
            SetTextureStageState(iStage, D3DTSS_ADDRESSV, (DWORD) m_dwModes[0]);
        }

        SetTextureStageState(iStage, D3DTSS_BORDERCOLOR, dwColors[iStage]);
        SetTextureStageState(iStage, D3DTSS_MAGFILTER, (DWORD) TEXF_LINEAR);
        SetTextureStageState(iStage, D3DTSS_MINFILTER, (DWORD) TEXF_LINEAR);
        SetTextureStageState(iStage, D3DTSS_MIPFILTER, (DWORD) TEXF_NONE);
        SetTextureStageState(iStage, D3DTSS_COLORARG1, (DWORD) D3DTA_TEXTURE);
        SetTextureStageState(iStage, D3DTSS_COLORARG2, (DWORD) D3DTA_CURRENT);
        SetTextureStageState(iStage, D3DTSS_ALPHAARG1, (DWORD) D3DTA_TEXTURE);
        SetTextureStageState(iStage, D3DTSS_ALPHAARG2, (DWORD) D3DTA_CURRENT);
        SetTexture(iStage, NULL);
    }
    
    // variation dependent, texture stage state settings

    iStage = 0;

    switch (m_dwStages)
    {
        case 1:
            SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) dwOp);
            SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_SELECTARG1);
            SetTextureStageState(iStage, D3DTSS_TEXCOORDINDEX, (DWORD) 1);
            SetTexture(iStage, m_pLuminanceTexture);
            iStage++;
        break;

        case 2:
            SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_MODULATE);
            SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_SELECTARG1);
            SetTextureStageState(iStage, D3DTSS_TEXCOORDINDEX, (DWORD) 0);
            SetTexture(iStage, m_pBaseTexture);
            iStage++;

            SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) dwOp);
            SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_SELECTARG1);
            SetTextureStageState(iStage, D3DTSS_TEXCOORDINDEX, (DWORD) 1);
            SetTexture(iStage, m_pLuminanceTexture);
            iStage++;
        break;
 
        case 3:
            SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_SELECTARG1);
            SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_SELECTARG1);
            SetTextureStageState(iStage, D3DTSS_TEXCOORDINDEX, (DWORD) 0);
            SetTexture(iStage, m_pBaseTexture);
            iStage++;

            SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) dwOp);
            SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_SELECTARG1);
            SetTextureStageState(iStage, D3DTSS_TEXCOORDINDEX, (DWORD) 1);
            SetTexture(iStage, m_pLuminanceTexture);
            iStage++;

            SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_MODULATE);
            SetTextureStageState(iStage, D3DTSS_COLORARG1, (DWORD) D3DTA_DIFFUSE);
            SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_SELECTARG2);
            iStage++;
        break;
    }

    SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_DISABLE);
    SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_DISABLE);

#ifndef UNDER_XBOX

    if (m_Flags.bCheck(VALIDATE))
    {
        DWORD dwSrc, dwRef;
        HRESULT hSrc, hRef;
        if (!ValidateDevice(&hSrc, &dwSrc, &hRef, &dwRef))
        {
            if (D3D_OK != hSrc)
            {
                WriteToLog(_T("Src requires %d passes:  %X."), dwSrc, hSrc);
                bValid = false;
            }

            if (D3D_OK != hRef)
            {
                WriteToLog(_T("Ref requires %d passes:  %X."), dwRef, hRef);
                bValid = false;
            }
        }
    }

#endif // !UNDER_XBOX

    if (!bValid)
    {
        SkipTests((UINT) 1);
        return true;
    }

//    sprintf(szFormat, "Al%d:Lu%d",
//            dwGetCountFromMask(m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat.dwRGBAlphaBitMask),
//            dwGetCountFromMask(m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat.dwLuminanceBitMask));
    sprintf(szFormat, "%d", m_fmtCommon[nTextureFormat]);
    sprintf(m_szBuffer, "%s, %s (%s,%s)",
             szFormat,
             szStages[m_dwStages - 1],
             szMode[m_dwModes[0] - 1], szMode[m_dwModes[1] - 1]);
    BeginTestCase(m_szBuffer);

    SwitchAPI((UINT)m_fFrame);

    m_pDevice->SetViewport(&m_vpFull);
    m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(74, 150, 202), 1.0f, 0);

    m_pDevice->SetViewport(&m_vpTest);

    ClearFrame();

    if (BeginScene())
    {
        if (!RenderPrimitive(D3DPT_TRIANGLELIST, m_dwFVF,
                             m_pVertices, m_Shape.m_nVertices,
                             m_Shape.m_pIndices, m_Shape.m_nIndices, (DWORD) 0))
        {
            WriteToLog(_T("RenderPrimitive() failed."));
            bResult = false;
        }

        // Display the adapter mode
        ShowDisplayMode();

        // Display the frame rate
        ShowFrameRate();

        // Display the console
        m_pDisplay->ShowConsole();

        if (!EndScene())
        {
            WriteToLog(_T("EndScene() failed."));
            bResult = false;
        }
    }
    else
    {
        WriteToLog(_T("BeginScene() failed."));
        bResult = false;
    }

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    sprintf(m_szBuffer, "$y%s", szStages[m_dwStages - 1]);
    WriteStatus("$gMode", m_szBuffer);
    sprintf(m_szBuffer, "$y%s", szFormat);
    WriteStatus("$gFormat", m_szBuffer);
    sprintf(m_szBuffer, "$y%s", szMode[m_dwModes[0] - 1]);
    WriteStatus("$gU Mode", m_szBuffer);
    sprintf(m_szBuffer, "$y%s", szMode[m_dwModes[1] - 1]);
    WriteStatus("$gV Mode", m_szBuffer);
//    return bResult;
    return false;
}

// NAME:        ProcessFrame()
// DESC:        process frame
// INPUT:       none
// OUTPUT:      bResult..result of src:ref image comparison

bool CLuminance::ProcessFrame(void)
{
    bool bResult;
    static int nPass = 0;
    static int nFail = 0;

    bResult = GetCompareResult(0.15f, 0.78f, (int) 0);

    if (bResult)
    {
        (m_fIncrementForward) ? nPass++ : nPass--;
        sprintf(m_szBuffer, "$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
    else
    {
        (m_fIncrementForward) ? nFail++ : nFail--;
        sprintf(m_szBuffer, "$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
    }

    WriteStatus("$gSummary", m_szBuffer);
    return bResult;
}

// NAME:        TestTerminate()
// DESC:        terminate test
// INPUT:       none
// OUTPUT:      true

bool CLuminance::TestTerminate(VOID)
{
//    RELEASE(m_pMaterial);

    ReleaseTexture(m_pLuminanceTexture);
    m_pLuminanceTexture = NULL;
//    RELEASE(m_pLuminanceImage);

    ReleaseTexture(m_pBaseTexture);
    m_pBaseTexture = NULL;
//    RELEASE(m_pBaseImage);
    return true;
}

// NAME:        SetDefaultLightStates()
// DESC:        set default light states
// INPUT:       none
// OUTPUT:      true.....if SetLightState() succeeds
//              false....otherwise

bool CLuminance::SetDefaultLightStates(VOID)
{
    return SetRenderState(D3DRS_AMBIENT, RGBA_MAKE(164, 164, 164, 255));
}

// NAME:        SetDefaultLights()
// DESC:        set default lights
// INPUT:       none
// OUTPUT:      true.....if default lights set successfully
//              false....otherwise

bool CLuminance::SetDefaultLights(VOID)
{
//    bool bSet;
//    CLight *pLight = CreateLight();
    D3DLIGHT8 Data;
    HRESULT hr;

    memset(&Data, 0, sizeof(Data));
//    Data.dwSize = sizeof(D3DLIGHT2);
    Data.Type = D3DLIGHT_POINT;
    Data.Diffuse.r = 0.4f;
    Data.Diffuse.g = 0.4f;
    Data.Diffuse.b = 0.4f;
    Data.Diffuse.a = 1.0f;
    Data.Position.x = 0.0f;
    Data.Position.y = 0.0f;
    Data.Position.z = -500.0f;
    Data.Range = D3DLIGHT_RANGE_MAX;
    Data.Attenuation0 = 1.0f;
    Data.Attenuation1 = 0.0f;
    Data.Attenuation2 = 0.0f;
//    Data.Flags = D3DLIGHT_ACTIVE;

//    pLight->SetLight(&Data);
//    bSet = SetLight((UINT) 0, pLight);
//    RELEASE(pLight);
//    return bSet;

    hr = m_pDevice->SetLight(0, &Data);
    if (FAILED(hr)) {
        return false;
    }

    hr = m_pDevice->LightEnable(0, TRUE);
	
	return (hr == D3D_OK);
}

// NAME:        SetDefaultMaterials()
// DESC:        set default materials
// INPUT:       none
// OUTPUT:      true.....if default materials set successfully
//              false....otherwise

bool CLuminance::SetDefaultMaterials(VOID)
{
//    bool bSet;
    D3DMATERIAL8 Data;
    HRESULT hr;

//    RELEASE(m_pMaterial);
//    m_pMaterial = CreateMaterial();

    memset(&Data, 0 , sizeof(Data));
//    Data.dwSize = sizeof(Data);
    Data.Diffuse.r = 0.8f;
    Data.Diffuse.g = 0.8f;
    Data.Diffuse.b = 0.8f;
    Data.Diffuse.a = 0.5f;
    Data.Ambient.r = 0.4f;
    Data.Ambient.g = 0.4f;
    Data.Ambient.b = 0.4f;
    Data.Ambient.a = 0.0f;
    Data.Specular.r = 0.2f;
    Data.Specular.g = 0.2f;
    Data.Specular.b = 0.2f;
    Data.Specular.a = 0.0f;
    Data.Power = 20.0f;
//    Data.dwRampSize = (DWORD) 32;

//    m_pMaterial->SetMaterial(&Data);
//    bSet = SetMaterial(m_pMaterial);
//    return bSet;

    hr = m_pDevice->SetMaterial(&Data);
    return (hr == D3D_OK);
}

// NAME:        SetDefaultMatrices()
// DESC:        setup default matrices
// INPUT:       none
// OUTPUT:      none

bool CLuminance::SetDefaultMatrices(VOID)
{
    D3DMATRIX Matrix;
    D3DVALUE dvNear = 1.0f, dvFar = 8.0f, dvAngle = 30.0f*pi/180.0f;
    D3DVECTOR At, From, Up;

    Matrix = ProjectionMatrix(dvNear, dvFar, dvAngle);
    Matrix = MatrixMult(Matrix, (float) (1.0/Matrix._34));

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION, &Matrix))
        return false;

    At.x = 0.0f;
    At.y = 0.0f;
    At.z = 0.0f;

    From.x = 0.0f;
    From.y = 0.0f;
    From.z = -2.0f;

    Up.x = 0.0f;
    Up.y = 1.0f;
    Up.z = 0.0f;

    Matrix = ViewMatrix(From, At, Up);

    if (!SetTransform(D3DTRANSFORMSTATE_VIEW, &Matrix))
        return false;

    return true;
}

// NAME:        bSetLuminance()
// DESC:        set luminance map texture
// INPUT:       dwFormat.....texture format
//              dwWidth......texture width
//              dwHeight.....texture height
// OUTPUT:      true.....if requested format is set successfully
//              false....otherwise

bool CLuminance::bSetLuminance(DWORD dwFormat, DWORD dwWidth, DWORD dwHeight)
{
    DWORD dwFlags;

    if (m_dwFormat == dwFormat)
        return true;

    if (dwFormat >= m_uCommonTextureFormats)
        return false;

    ReleaseTexture(m_pLuminanceTexture);
//    dwFlags = CDDS_TEXTURE_VIDEO;
    nTextureFormat = dwFormat;
//    m_pLuminanceTexture = CreateTexture(dwWidth, dwHeight, dwFlags, m_pLuminanceImage);
//    m_pLuminanceTexture = (CTexture8*)CreateChannelDataTexture(m_pDevice, dwWidth, dwHeight, &Data, m_fmtCommon[nTextureFormat]);
    // Using custom create function due to a bug in D3DX conversion blits on luminance formats
    m_pLuminanceTexture = (CTexture8*)CreateLumChannelDataTexture(m_pDevice, dwWidth, dwHeight, &Data, m_fmtCommon[nTextureFormat]);

    if (!m_pLuminanceTexture)
    {
        WriteToLog(_T("Unable to create [alpha]luminance texture."));
        return false;
    }

    m_dwFormat = dwFormat;
    return true;
}

// NAME:        dwGetCountFromMask()
// DESC:        get count from mask
// INPUT:       dwMask...bit mask
// OUTPUT:      dwCount...bit count

DWORD CLuminance::dwGetCountFromMask(DWORD dwMask)
{
    DWORD dwCount, dwTemp;

    for (dwCount = (DWORD) 0, dwTemp = dwMask; dwTemp; dwTemp >>= 1) if (dwTemp & 1) dwCount++;
    return dwCount;
}

// NAME:        vProcessArgs()
// DESC:        process args
// INPUT:       none
// OUTPUT:      none

VOID CLuminance::vProcessArgs(VOID)
{
    int iDefault, iResult;

    if (KeySet("WHQL"))
    {
        m_Flags.vSet(VALIDATE);
        g_uBumps = (UINT) DEFAULT_BUMPS;
        return;
    }

    // bumps
    // default:  DEFAULT_BUMPS

    iDefault = (int) DEFAULT_BUMPS;
    ReadInteger("bumps", iDefault, &iResult);

    if (iResult < MIN_BUMPS)
        g_uBumps = (UINT) MIN_BUMPS;
    else if (iResult > MAX_BUMPS)
        g_uBumps = (UINT) MAX_BUMPS;
    else
        g_uBumps = (UINT) iResult;

    // validate
    // default:  true

    if (!KeySet("!validate"))
        m_Flags.vSet(VALIDATE);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\luminance\luminance.h ===
// FILE:        luminance.h
// DESC:        luminance class header for AL8LU8 and LU8 texture formats
// AUTHOR:      Todd M. Frost

//USETESTFRAME

const DWORD NOFORMAT = 0xFFFFFFFF; // no format index

const DWORD INDEPENDENT = 0x00000001; // independent uv address modes
const DWORD VALIDATE    = 0x00000002; // validate src/ref devices

const UINT DEFAULT_BUMPS = 8;  // default number of bumps
const UINT MIN_BUMPS     = 1;  // min number of bumps
const UINT MAX_BUMPS     = 64; // max number of bumps

const UINT MAXBUFFER = 128;

const UINT NMODES = 4; // number of address modes

const UINT NSTAGES = 3; // number of stages

const D3DTEXTUREADDRESS DEFAULT_MODE = D3DTADDRESS_WRAP; // default address mode

typedef struct _FlexVert {
    D3DVALUE fPx;
    D3DVALUE fPy;
    D3DVALUE fPz;
    D3DVALUE fNx;
    D3DVALUE fNy;
    D3DVALUE fNz;
    D3DVALUE fSu;
    D3DVALUE fSv;
    D3DVALUE fTu;
    D3DVALUE fTv;
} FLEXVERT, *PFLEXVERT;

class CLuminance: public CD3DTest
{
    public:
        CHAR m_szBuffer[MAXBUFFER];        // text buffer
        D3DTEXTUREADDRESS m_dwModes[2];    // uv texture address modes
        DWORD m_dwFormat;                  // current luminance texture format index
        DWORD m_dwFVF;                     // flexible vertex format
        DWORD m_dwStages;                  // texture stages (used)
        DWORD m_dwStagesMax;               // texture stages (max)
        DWORD m_dwTexAddressCaps;          // texture address caps
        DWORD m_dwTexOpCaps;               // texture op caps
        DWORD m_dwModeCapsVals[NMODES][2]; // texture address mode caps/vals
        PFLEXVERT m_pVertices;             // non strided vertex data
        CFlags m_Flags;                    // flags class
//        CImageData *m_pBaseImage;          // image data class (base)
//        CImageData *m_pLuminanceImage;     // image data class (luminance)
        CTexture8 *m_pBaseTexture;          // texture class (base)
        CTexture8 *m_pLuminanceTexture;     // texture class (luminance)
//        CMaterial *m_pMaterial;            // material class
        CShapesFVF m_Shape;                // shapes FVF class

        CHANNELDATA Data;
        int nTextureFormat;
        
    public:
        CLuminance();
        ~CLuminance();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
        virtual bool ProcessFrame(VOID);
        virtual bool TestTerminate(VOID);
        bool SetDefaultLightStates(VOID);
        bool SetDefaultLights(VOID);
        bool SetDefaultMaterials(VOID);
        bool SetDefaultMatrices(VOID);
//        bool bMatch(DWORD dwFormat, DDPIXELFORMAT ddpfPixelFormat);
        bool bSetLuminance(DWORD dwFormat, DWORD dwWidth, DWORD dwHeight);
        DWORD dwGetCountFromMask(DWORD dwMask);
        VOID vProcessArgs(VOID);
};

class CLuminanceAddress : public CLuminance
{
    public:
        CLuminanceAddress();
        ~CLuminanceAddress();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\luminance\modulex.h ===
#define PREPEND_MODULE(Suffix) luminanc##Suffix
#define MODULE_STRING "luminanc"
#pragma comment(linker, "/include:_luminanc_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\luminance\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=luminanc
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_lumin.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\luminance\exe\sources.inc ===
TARGETNAME=luminanc
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
	$(TEST_LIB_PATH)\cshapes.lib \
    $(TEST_LIB_PATH)\l_lumin.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mapping\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mapping\modulex.h ===
#define PREPEND_MODULE(Suffix) mapping##Suffix
#define MODULE_STRING "mapping"
#pragma comment(linker, "/include:_mapping_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mapping\linear.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Mapping.h"

//************************************************************************
// Bi-Linear Test functions

CMapLinearTest::CMapLinearTest()
{
	m_szTestName = TEXT("Texture Mapping Linear");
	m_szCommandKey = TEXT("Linear");

	// Tell the parent which caps to look for
	dwMinFilterCap = D3DPTFILTERCAPS_MINFLINEAR;//D3DPTFILTERCAPS_LINEAR;
	dwMagFilterCap = D3DPTFILTERCAPS_MAGFLINEAR;//D3DPTFILTERCAPS_LINEAR;
}

CMapLinearTest::~CMapLinearTest()
{
}
 
bool CMapLinearTest::SetDefaultRenderStates(void)
{
	// Make sure that perspection is off and use Bi-Linear filtering
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)false);
//	SetRenderState(D3DRENDERSTATE_TEXTUREMAG, (DWORD)D3DFILTER_LINEAR);
    SetTextureStageState(0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);
//	SetRenderState(D3DRENDERSTATE_TEXTUREMIN, (DWORD)D3DFILTER_LINEAR);
    SetTextureStageState(0, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mapping\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mapping\mapping.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	Mapping.h
 *
 ***************************************************************************/

#ifndef __MAPPING_H__
#define __MAPPING_H__

//USETESTFRAME

// Defines
#define MAX_TESTS	316

// UV structure
typedef struct _UV{
	float u;
	float v;

public:
	_UV() {u=0.0f; v=0.0f;};
	_UV(float u1, float v1) {u=u1; v=v1;};

} UV;

// Base Class definitions
class CMappingTest: public TESTFRAME(CD3DTest)
{
    // Data
	public:
    D3DTLVERTEX     VertexList[6];
    DWORD           dwVertexCount;
	CTexture8 *		pTexture;
//	CImageData *	pImage;
	DWORD			dwMinFilterCap;
	DWORD			dwMagFilterCap;
	UV				TopLeft[4];
	UV				TopRight[4];
	UV				BottomLeft[4];
	UV				BottomRight[4];
	char			msgString[80];

    int             nTextureFormat;
	D3DCOLOR	    Gradient[4];
    BOOL            m_bExit;

	public:
	CMappingTest();
	~CMappingTest();

	// Framework functions
	virtual UINT TestInitialize(void);
	virtual bool ClearFrame(void);
	virtual bool ExecuteTest(UINT);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);
	virtual bool TestTerminate(void);

	// Helper functions
	void DrawGrid(int nTest, int nTexFormats);

    virtual BOOL    AbortedExit(void);

protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

// Point Class definitions
class CMapPointTest: public CMappingTest
{
	public:
	CMapPointTest();
	~CMapPointTest();

	bool SetDefaultRenderStates(void);
};

// Linear Class definitions
class CMapLinearTest: public CMappingTest
{
	public:
	CMapLinearTest();
	~CMapLinearTest();

	bool SetDefaultRenderStates(void);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mapping\drawing.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Mapping.h"

//************************************************************************
// Internal API:    DrawGrid
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CMappingTest::DrawGrid(int nTest, int nTexFormats)
{
	if (nTest <= 256)
	{
		int nTL, nTR, nBL, nBR;

		// Decide which UV coordinates to use
		nTL = (m_uLastTestNum / (64 * nTexFormats)) % 4;
		nTR = (m_uLastTestNum / (16 * nTexFormats)) % 4;
		nBL = (m_uLastTestNum / (4 * nTexFormats)) % 4;
		nBR = (m_uLastTestNum / nTexFormats) % 4;

		sprintf(msgString, "%sMap:(%.0f,%.0f)(%.0f,%.0f)(%.0f,%.0f)(%.0f,%.0f), ",msgString,
					TopLeft[nTL].u, TopLeft[nTL].v,
					TopRight[nTR].u, TopRight[nTR].v,
					BottomLeft[nBL].u, BottomLeft[nBL].v,
					BottomRight[nBR].u, BottomRight[nBR].v);

		// Setup the Mesh
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, TopLeft[nTL].u,     TopLeft[nTL].v);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, TopRight[nTR].u,    TopRight[nTR].v);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, BottomRight[nBR].u, BottomRight[nBR].v);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, TopLeft[nTL].u,     TopLeft[nTL].v);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, BottomRight[nBR].u, BottomRight[nBR].v);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, BottomLeft[nBL].u,  BottomLeft[nBL].v);
	}
	else
	{
		int nRot;
		float fTile;

		// Decide which rotation to use
		nRot = (nTest - 257) / 15;

		// Decide how much tiling to use
		if (nTest <= (nRot * 15 + 264))
			fTile = (nTest - (nRot * 15 + 256.0f)) / 8.0f;
		else
			fTile = nTest - (nRot * 15 + 263.0f);

		sprintf(msgString, "%sMap:",msgString);

		if (((TopLeft[nRot].u == 0) || (fTile*TopLeft[nRot].u > 0.9f)) &&
			((TopLeft[nRot].v == 0) || (fTile*TopLeft[nRot].v > 0.9f)))
		{
			sprintf(msgString,"%s(%.0f,%.0f)",msgString,fTile*TopLeft[nRot].u,fTile*TopLeft[nRot].v);
		}
		else
		{
			sprintf(msgString,"%s(%.1f,%.1f)",msgString,fTile*TopLeft[nRot].u,fTile*TopLeft[nRot].v);
		}

		if (((TopRight[nRot].u == 0) || (fTile*TopRight[nRot].u > 0.9f)) &&
			((TopRight[nRot].v == 0) || (fTile*TopRight[nRot].v > 0.9f)))
		{
			sprintf(msgString,"%s(%.0f,%.0f)",msgString,fTile*TopRight[nRot].u,fTile*TopRight[nRot].v);
		}
		else
		{
			sprintf(msgString,"%s(%.1f,%.1f)",msgString,fTile*TopRight[nRot].u,fTile*TopRight[nRot].v);
		}

		if (((BottomLeft[nRot].u == 0) || (fTile*BottomLeft[nRot].u > 0.9f)) &&
			((BottomLeft[nRot].v == 0) || (fTile*BottomLeft[nRot].v > 0.9f)))
		{
			sprintf(msgString,"%s(%.0f,%.0f)",msgString,fTile*BottomLeft[nRot].u,fTile*BottomLeft[nRot].v);
		}
		else
		{
			sprintf(msgString,"%s(%.1f,%.1f)",msgString,fTile*BottomLeft[nRot].u,fTile*BottomLeft[nRot].v);
		}

		if (((BottomRight[nRot].u == 0) || (fTile*BottomRight[nRot].u > 0.9f)) &&
			((BottomRight[nRot].v == 0) || (fTile*BottomRight[nRot].v > 0.9f)))
		{
			sprintf(msgString,"%s(%.0f,%.0f), ",msgString,fTile*BottomRight[nRot].u,fTile*BottomRight[nRot].v);
		}
		else
		{
			sprintf(msgString,"%s(%.1f,%.1f), ",msgString,fTile*BottomRight[nRot].u,fTile*BottomRight[nRot].v);
		}

		// Setup the Mesh
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fTile*TopLeft[nRot].u,     fTile*TopLeft[nRot].v);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fTile*BottomRight[nRot].u, fTile*BottomRight[nRot].v);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fTile*BottomLeft[nRot].u,  fTile*BottomLeft[nRot].v);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fTile*TopLeft[nRot].u,     fTile*TopLeft[nRot].v);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fTile*TopRight[nRot].u,    fTile*TopRight[nRot].v);
		VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fTile*BottomRight[nRot].u, fTile*BottomRight[nRot].v);
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mapping\point.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Mapping.h"
#include "Mapping.h"

//************************************************************************
// Point Sample Test functions

CMapPointTest::CMapPointTest()
{
	m_szTestName = TEXT("Texture Mapping Nearest");
	m_szCommandKey = TEXT("Nearest");

	// Tell the parent which caps to look for
	dwMinFilterCap = D3DPTFILTERCAPS_MINFPOINT;//D3DPTFILTERCAPS_NEAREST;
	dwMagFilterCap = D3DPTFILTERCAPS_MAGFPOINT;//D3DPTFILTERCAPS_NEAREST;
}  

CMapPointTest::~CMapPointTest()
{
}

bool CMapPointTest::SetDefaultRenderStates(void)
{
	// Make sure that perspection is off and use Point Sample filtering
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)false);
//	SetRenderState(D3DRENDERSTATE_TEXTUREMAG, (DWORD)D3DFILTER_NEAREST);
    SetTextureStageState(0, D3DTSS_MAGFILTER, D3DTEXF_POINT);
//	SetRenderState(D3DRENDERSTATE_TEXTUREMIN, (DWORD)D3DFILTER_NEAREST);
    SetTextureStageState(0, D3DTSS_MINFILTER, D3DTEXF_POINT);

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mapping\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_maping
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
        drawing.cpp \
        linear.cpp \
        mapping.cpp \
        point.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mapping\mapping.cpp ===
#define STRICT
#define BURN_IN_HELL
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Mapping.h"

// Global Test and App instance
//CD3DWindowFramework	App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CMappingTest*   pMapTest;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 2 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pMapTest = new CMapPointTest();
                break;
            case 1:
                pMapTest = new CMapLinearTest();
                break;
        }

        if (!pMapTest) {
            return FALSE;
        }

        // Initialize the scene
        if (!pMapTest->Create(pDisplay)) {
            pMapTest->Release();
            return FALSE;
        }

        bRet = pMapTest->Exhibit(pnExitCode);

        bQuit = pMapTest->AbortedExit();

        // Clean up the scene
        pMapTest->Release();
    }

    return bRet;
}

CMappingTest::CMappingTest()
{
	// Initialize the UV array's values
	float fZero = 0.0f;
	float fOne = 1.0f - 0.001f;

	TopLeft[0] = UV(fZero, fZero);
	TopLeft[1] = UV(fZero, fOne);
	TopLeft[2] = UV(fOne,  fOne);
	TopLeft[3] = UV(fOne,  fZero);

	TopRight[0] = UV(fOne,  fZero);
	TopRight[1] = UV(fZero, fZero);
	TopRight[2] = UV(fZero, fOne);
	TopRight[3] = UV(fOne,  fOne);

	BottomLeft[0] = UV(fZero, fOne);
	BottomLeft[1] = UV(fOne,  fOne);
	BottomLeft[2] = UV(fOne,  fZero);
	BottomLeft[3] = UV(fZero, fZero);

	BottomRight[0] = UV(fOne,  fOne);
	BottomRight[1] = UV(fOne,  fZero);
	BottomRight[2] = UV(fZero, fZero);
	BottomRight[3] = UV(fZero, fOne);

    pTexture = NULL;
    m_bExit = FALSE;
}

CMappingTest::~CMappingTest()
{
}
 
UINT CMappingTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

	// Setup the Test range
	SetTestRange(1, MAX_TESTS);
//	SetTestRange(1, MAX_TESTS * m_uCommonTextureFormats);

	// Check the caps we are interested in
	DWORD dwTextureFilterCaps = m_d3dcaps.TextureFilterCaps;

	// Check the appropriate Min Filter cap
	if (!(dwTextureFilterCaps & dwMinFilterCap))
	{
		WriteToLog("Device capability not supported: (Min) Texture Filter %s.\n",m_szCommandKey);
		return D3DTESTINIT_SKIPALL;
	}

	// Check the appropriate Mag Filter cap
	if (!(dwTextureFilterCaps & dwMagFilterCap))
	{
		WriteToLog("Device capability not supported: (Mag) Texture Filter %s.\n",m_szCommandKey);
		return D3DTESTINIT_SKIPALL;
	}

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	// Setup the colors for the Gradient array
//	D3DCOLOR	Gradient[4];

	Gradient[0] = RGBA_MAKE(0,0,0,255);		// Black
	Gradient[1] = RGBA_MAKE(255,0,0,255);	// Red
	Gradient[2] = RGBA_MAKE(0,255,0,255);	// Green
	Gradient[3] = RGBA_MAKE(255,255,0,255);	// Yellow

	// Create the stripe image data
//    CImageLoader    Image;

//    pImage = Image.LoadGradient(64,64,Gradient); 

	return D3DTESTINIT_RUN;
}

bool CMappingTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255));
}

bool CMappingTest::ExecuteTest(UINT uTestNum)
{
   // Setup the tests to execute.
	int nTest;
    int nTextureFormat;

	// Initialize some variables
	nTest = ((uTestNum-1) / 1) + 1;
//	nTest = ((uTestNum-1) / m_uCommonTextureFormats) + 1;
 	dwVertexCount = 0;
	msgString[0] = 0;
	sprintf(msgString, "");

	// Cleanup previous texture
	SetTexture(0, NULL);
    ReleaseTexture(pTexture);

	// Let's build some triangles.
	DrawGrid(nTest, 1); 
//	DrawGrid(nTest, m_uCommonTextureFormats);

	// Cycle the texture formats
//	m_pD3DMode->nTextureFormat = (uTestNum-1) % m_uCommonTextureFormats;
	nTextureFormat = (uTestNum-1) % m_uCommonTextureFormats;

	// Create and set the texture
//    pTexture = CreateTexture(pImage->GetWidth(),pImage->GetHeight(),CDDS_TEXTURE_VIDEO,pImage);
    pTexture = CreateGradientTexture(m_pDevice, 64, 64, Gradient, m_fmtCommon[nTextureFormat]);

	// Tell the framework what texture to use
    if (NULL != pTexture)
	{
        SetTexture(0,pTexture);

        if (m_dwVersion <= 0x0700)
        {
//    		sprintf(msgString, "%sTex:",msgString);
//        	GetTexFmtDesc(&m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat,msgString+strlen(msgString),80-strlen(msgString));
        }
        else
    		sprintf(msgString, "%sTex:%s",msgString,D3DFmtToString(m_fmtCommon[nTextureFormat]));
	}
	else
	{
		WriteToLog("CreateTexture() failed with HResult = %X.\n",GetLastError());
		TestFinish(D3DTESTFINISH_ABORT);
		return false;
	}

	// Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}

void CMappingTest::SceneRefresh()
{
	if (BeginScene())
	{
		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}

bool CMappingTest::ProcessFrame(void)
{
	char	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;
    bool	bResult;

     // Use the standard 15%
    bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how the compare went
    if (bResult)
    {
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
	}

	WriteStatus("$gOverall Results",szBuffer);

    return bResult;
}

bool CMappingTest::TestTerminate()
{
	// Cleanup texture & image data
	SetTexture(0, NULL);
    ReleaseTexture(pTexture);
//    RELEASE(pImage);

	return true;
}

//******************************************************************************
BOOL CMappingTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CMappingTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CMappingTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mapping\exe\sources.inc ===
TARGETNAME=mapping
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_maping.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mipfilter\drawgrid.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "MipFilter.h"

//************************************************************************
// Internal API:    DrawGrid
//
// Purpose:         
//
// Return:          None.
//************************************************************************
 
void CMipFilterTest::DrawGrid(float fWidth, float fHeight)
{
	// Initialize the interesting variables
	float fScale = 1.0f;

	fWidth += 9.5f;
	fHeight += 9.5f;

	// Use standard ((0,0)(1,0)(0,1)(1,1)) mapping, White Mesh
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, (float)m_vpTest.Y +    9.5f, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0,   0.0f,   0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, (float)m_vpTest.Y + fHeight, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale, fScale);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, (float)m_vpTest.Y + fHeight, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0,   0.0f, fScale);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, (float)m_vpTest.Y +    9.5f, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0,   0.0f,   0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, (float)m_vpTest.Y +    9.5f, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale,   0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, (float)m_vpTest.Y + fHeight, 0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, fScale, fScale);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mipfilter\full.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "MipFilter.h"

//************************************************************************
// Point_FullSquare Test functions

CPoint_FullSquareTest::CPoint_FullSquareTest()
{
	m_szTestName = TEXT("MipFilter Point_FullSquare");
	m_szCommandKey = TEXT("Point_FullSquare");

	// Inidicate that we are a Full test
	bFull = true;
}

CPoint_FullSquareTest::~CPoint_FullSquareTest()
{
}

//************************************************************************
// Point_FullNonSquareW Test functions

CPoint_FullNonSquareWTest::CPoint_FullNonSquareWTest()
{
	m_szTestName = TEXT("MipFilter Point_FullNonSquareWidth");
	m_szCommandKey = TEXT("Point_FullNonSquareWidth");

	// Inidicate that we are a Full & NonSquareW test
	bFull = true;
	bNonSquareW = true;
}

CPoint_FullNonSquareWTest::~CPoint_FullNonSquareWTest()
{
}
 
//************************************************************************
// Point_FullNonSquareH Test functions

CPoint_FullNonSquareHTest::CPoint_FullNonSquareHTest()
{
	m_szTestName = TEXT("MipFilter Point_FullNonSquareHeight");
	m_szCommandKey = TEXT("Point_FullNonSquareHeight");

	// Inidicate that we are a Full & NonSquareH test
	bFull = true;
	bNonSquareH = true;
}

CPoint_FullNonSquareHTest::~CPoint_FullNonSquareHTest()
{
}

//************************************************************************
// Linear_FullSquare Test functions

CLinear_FullSquareTest::CLinear_FullSquareTest()
{
	m_szTestName = TEXT("MipFilter Linear_FullSquare");
	m_szCommandKey = TEXT("Linear_FullSquare");

	// Inidicate that we are a MipLinear & Full test
	bFull = true;
	bMipLinear = true;
}

CLinear_FullSquareTest::~CLinear_FullSquareTest()
{
}

//************************************************************************
// Linear_FullNonSquareW Test functions

CLinear_FullNonSquareWTest::CLinear_FullNonSquareWTest()
{
	m_szTestName = TEXT("MipFilter Linear_FullNonSquareWidth");
	m_szCommandKey = TEXT("Linear_FullNonSquareWidth");

	// Inidicate that we are a MipLinear, Full, & NonSquareW test
	bFull = true;
	bMipLinear = true;
	bNonSquareW = true;
}

CLinear_FullNonSquareWTest::~CLinear_FullNonSquareWTest()
{
}
 
//************************************************************************
// Linear_FullNonSquareH Test functions

CLinear_FullNonSquareHTest::CLinear_FullNonSquareHTest()
{
	m_szTestName = TEXT("MipFilter Linear_FullNonSquareHeight");
	m_szCommandKey = TEXT("Linear_FullNonSquareHeight");

	// Inidicate that we are a MipLinear, Full, & NonSquareH test
	bFull = true;
	bMipLinear = true;
	bNonSquareH = true;
}

CLinear_FullNonSquareHTest::~CLinear_FullNonSquareHTest()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mapping\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=mapping
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_maping.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mipfilter\min.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "MipFilter.h"

//************************************************************************
// Point_MinPoint Test functions

CPoint_MinPointTest::CPoint_MinPointTest()
{
	m_szTestName = TEXT("MipFilter Point_MinPoint");
	m_szCommandKey = TEXT("Point_MinPoint");
}

CPoint_MinPointTest::~CPoint_MinPointTest()
{
}

//************************************************************************
// Point_MinLinear Test functions

CPoint_MinLinearTest::CPoint_MinLinearTest()
{
	m_szTestName = TEXT("MipFilter Point_MinLinear");
	m_szCommandKey = TEXT("Point_MinLinear");

	// Inidicate that we are a MinLinear test
	bMinLinear = true;
}

CPoint_MinLinearTest::~CPoint_MinLinearTest()
{
}

//************************************************************************
// Linear_MinPoint Test functions

CLinear_MinPointTest::CLinear_MinPointTest()
{
	m_szTestName = TEXT("MipFilter Linear_MinPoint");
	m_szCommandKey = TEXT("Linear_MinPoint");

	// Inidicate that we are a MipLinear test
	bMipLinear = true;
}

CLinear_MinPointTest::~CLinear_MinPointTest()
{
}

//************************************************************************
// Linear_MinLinear Test functions

CLinear_MinLinearTest::CLinear_MinLinearTest()
{
	m_szTestName = TEXT("MipFilter Linear_MinLinear");
	m_szCommandKey = TEXT("Linear_MinLinear");

	// Inidicate that we are a MipLinear & MinLinear test
	bMipLinear = true;
	bMinLinear = true;
}

CLinear_MinLinearTest::~CLinear_MinLinearTest()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mipfilter\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mipfilter\mipfilter.cpp ===
#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "MipFilter.h"

// Global Test and App instance
//CD3DWindowFramework		App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CMipFilterTest* pMipTest;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 18 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pMipTest = new CPoint_MinPointTest();
                break;
            case 1:
                pMipTest = new CPoint_MinLinearTest();
                break;
            case 2:
                pMipTest = new CPoint_NonSquareWTest();
                break;
            case 3:
                pMipTest = new CPoint_NonSquareHTest();
                break;
            case 4:
                pMipTest = new CPoint_FullSquareTest();
                break;
            case 5:
                pMipTest = new CPoint_FullNonSquareWTest();
                break;
            case 6:
                pMipTest = new CPoint_FullNonSquareHTest();
                break;
            case 7:
                pMipTest = new CPoint_MaxMipLevelTest();
                break;
            case 8:
                pMipTest = new CPoint_LODBiasTest();
                break;
            case 9:
                pMipTest = new CLinear_MinPointTest();
                break;
            case 10:
                pMipTest = new CLinear_MinLinearTest();
                break;
            case 11:
                pMipTest = new CLinear_NonSquareWTest();
                break;
            case 12:
                pMipTest = new CLinear_NonSquareHTest();
                break;
            case 13:
                pMipTest = new CLinear_FullSquareTest();
                break;
            case 14:
                pMipTest = new CLinear_FullNonSquareWTest();
                break;
            case 15:
                pMipTest = new CLinear_FullNonSquareHTest();
                break;
            case 16:
                pMipTest = new CLinear_MaxMipLevelTest();
                break;
            case 17:
                pMipTest = new CLinear_LODBiasTest();
                break;
        }

        if (!pMipTest) {
            return FALSE;
        }

        // Initialize the scene
        if (!pMipTest->Create(pDisplay)) {
            pMipTest->Release();
            return FALSE;
        }

        bRet = pMipTest->Exhibit(pnExitCode);

        bQuit = pMipTest->AbortedExit();

        // Clean up the scene
        pMipTest->Release();
    }

    return bRet;
}

CMipFilterTest::CMipFilterTest()
{
	// Initialize some variables
	bMax = false;
	bFull = false;
	bBias = false;
	bMipLinear = false;
	bMinLinear = false;
	bNonSquareW = false;
	bNonSquareH = false;

	// Default size array values
	SizeArray[0] = 248.0f;
	SizeArray[1] =  32.0f;
	SizeArray[2] =  48.0f;
	SizeArray[3] =  56.0f;
	SizeArray[4] =  96.0f;
	SizeArray[5] = 104.0f;
	SizeArray[6] = 120.0f;
	SizeArray[7] = 192.0f;
	SizeArray[8] = 216.0f;

    pTexture = NULL;
    memset(pMipLevel, 0, 9 * sizeof(CTexture8*));
    bLoadWithUpdate = FALSE;
    m_bExit = FALSE;
}

CMipFilterTest::~CMipFilterTest()
{
}
/*
bool CMipFilterTest::AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize)
{
	// For Dx8, test both texture loading methods for full cases
    if (IsConformance() && (m_dwVersion >= 0x0800) && bFull)
    {
        // Use CopyRects
        pMode->D3DMode.dwTexLoad = TEXLOAD_COPY_RECTS;
		CD3DTest::AddModeList(pMode,pData,dwDataSize);

        // Use UpdateTexture
        pMode->D3DMode.dwTexLoad = TEXLOAD_UPDATE_TEXTURE;
		CD3DTest::AddModeList(pMode,pData,dwDataSize);
    }
    else
    {
		// Let the framework handle stress mode
		CD3DTest::AddModeList(pMode,pData,dwDataSize);
	}

    return true;
}
*/
bool CMipFilterTest::SetDefaultRenderStates(void)
{
	// Turn off Texture Perspective for all tests
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)FALSE);

	// Setup our default Texture Stage State
	SetTextureStageState(0,D3DTSS_MAGFILTER,(DWORD)TEXF_POINT);

	if (!bMinLinear)
		SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_POINT);
	else
		SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_LINEAR);

	if (!bMipLinear)
		SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_POINT);
	else
		SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_LINEAR);
	
	return true;
}

UINT CMipFilterTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

	// Request all texture formats except bumpmap
//	if (!RequestTextureFormats(PF_RGB | PF_FOURCC | PF_LUMINANCE))
//	{
//		WriteToLog("No texture formats found.\n");
//		return D3DTESTINIT_ABORT;
//	}

	// Setup the Test range
	if (bFull)
		SetTestRange(1, MAX_TESTS * 2 * m_uCommonTextureFormats);
	else if (bBias && !bMipLinear)
		SetTestRange(1, (MAX_TESTS - 2) * m_uCommonTextureFormats);
	else
		SetTestRange(1, MAX_TESTS * m_uCommonTextureFormats);

	// Check the caps we are interested in
	DWORD dwTextureFilterCaps = m_d3dcaps.TextureFilterCaps;
	DWORD dwTextureCaps = m_d3dcaps.TextureCaps;
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;
	DWORD dwMaxTextureAspectRatio = m_d3dcaps.MaxTextureAspectRatio;
    if (dwMaxTextureAspectRatio == 0) {
        Log(LOG_FAIL, TEXT("D3DCAPS.MaxTextureAspectRatio is 0"));
        dwMaxTextureAspectRatio = 1;
    }

	// Check the appropriate Mip Filter cap
	if (!bMipLinear && !(dwTextureFilterCaps & D3DPTFILTERCAPS_MIPFPOINT))
	{
		WriteToLog("Device capability not supported: (Mip) Texture Filter Point.\n");
		return D3DTESTINIT_SKIPALL;
	}
	else if (bMipLinear && !(dwTextureFilterCaps & D3DPTFILTERCAPS_MIPFLINEAR))
	{
		WriteToLog("Device capability not supported: (Mip) Texture Filter Linear.\n");
		return D3DTESTINIT_SKIPALL;
	}

	// Check the appropriate Min Filter cap
	if (!bMinLinear && !(dwTextureFilterCaps & D3DPTFILTERCAPS_MINFPOINT))
	{
		WriteToLog("Device capability not supported: (Min) Texture Filter Point.\n");
		return D3DTESTINIT_SKIPALL;
	}
	else if (bMinLinear && !(dwTextureFilterCaps & D3DPTFILTERCAPS_MINFLINEAR))
	{
		WriteToLog("Device capability not supported: (Min) Texture Filter Linear.\n");
		return D3DTESTINIT_SKIPALL;
	}

	// Check the appropriate Mag Filter cap
	if (!(dwTextureFilterCaps & D3DPTFILTERCAPS_MAGFPOINT))
	{
		WriteToLog("Device capability not supported: (Mag) Texture Filter Point.\n");
		return D3DTESTINIT_SKIPALL;
	}

	// Check for ability to do non-square textures
	if ((bNonSquareW || bNonSquareH) && (dwTextureCaps & D3DPTEXTURECAPS_SQUAREONLY))
	{
		WriteToLog("Device does not supported non-square textures.\n");
		return D3DTESTINIT_SKIPALL;
	}

	// Check for LODBias cap
	if (bBias && !(dwRasterCaps & D3DPRASTERCAPS_MIPMAPLODBIAS))
	{
		WriteToLog("Device capability not supported: Raster MipMapLODBias.\n");
		return D3DTESTINIT_SKIPALL;
	}

/*
	// Since there is no cap for MaxMipLevel, we need to check with ValidateDevice
	if (bMax)
	{
		DWORD	dwPasses, dwMaxMipLevel;
		HRESULT	hResult;

		SetTextureStageState(0,D3DTSS_MAXMIPLEVEL,(DWORD)8);

		GetTextureStageState(0,D3DTSS_MAXMIPLEVEL,&dwMaxMipLevel,NULL,CD3D_SRC);

		if (!ValidateDevice(&hResult,&dwPasses))
		{
			WriteToLog("ValidateDevice(MaxMipLevel=%d) failed with Passes = %d and HResult = %s.\n",dwMaxMipLevel,dwPasses,GetHResultString(hResult).c_str());
			return D3DTESTINIT_SKIPALL;
		}
	}
*/
	// Initialize the size array based on test class
	InitSize();

	// Initialize the MipImage pointer based on test class
	if (!InitMipImage(dwMaxTextureAspectRatio)) {
        return D3DTESTINIT_SKIPALL;
    }

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	return D3DTESTINIT_RUN;
}

bool CMipFilterTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255));
}

bool CMipFilterTest::ExecuteTest(UINT uTestNum)
{
	// Initialize some variables
	int nTest = ((uTestNum-1) / m_uCommonTextureFormats) + 1;
	float fSize = SizeArray[((bFull) ? nTest % 18 : nTest % 9)];
	int nWidth = (int)fSize;
	int nHeight = (int)fSize;
	int nLevels = (bFull || bBias || bMax) ? -1 : 3;
	DWORD dwMipLevels;
    DWORD dwTType;
    int nTextureFormat;
	dwVertexCount = 0;
	msgString[0] = '\0';
 	szStatus[0]  = '\0';

	// Cleanup previous texture
	SetTexture(0, NULL);
    ReleaseTexture(pTexture);
 
	// Let's build some triangles.
	DrawGrid(fSize, fSize);

	sprintf(msgString, "%sMesh:%dx%d, ",msgString,nWidth,nHeight);
	sprintf(szStatus, "%sMesh: %dx%d",szStatus,nWidth,nHeight);

	// Cycle the texture formats
	nTextureFormat = (uTestNum-1) % m_uCommonTextureFormats;
 
	// Skip all YUV texture formats for the cases with small mip levels
	if (bFull || bBias || bMax)
	{
/*
		DWORD dwFourCC = m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat.dwFourCC;

		if ((dwFourCC == MAKEFOURCC('U','Y','V','Y')) ||
			(dwFourCC == MAKEFOURCC('Y','U','Y','2')))
		{
			char	szFourCC[5];

			szFourCC[0] = (char)(dwFourCC & 0xff);
			szFourCC[1] = (char)((dwFourCC >> 8) & 0xff);
			szFourCC[2] = (char)((dwFourCC >> 16) & 0xff);
			szFourCC[3] = (char)((dwFourCC >> 24) & 0xff);
			szFourCC[4] = '\0';

			WriteToLog("Ignoring this case with FourCC (%s) texture.\n",szFourCC);
			SkipTests(1);
			return false;
		}
*/
        switch (m_fmtCommon[nTextureFormat]) {
            case D3DFMT_UYVY:
            case D3DFMT_YUY2:
			    WriteToLog("Ignoring this case with YUV texture %d.\n",m_fmtCommon[nTextureFormat]);
			    SkipTests(1);
			    return false;
        }
	}

    // Get the top level Width & Height
//	nWidth = pMipImage[0]->GetWidth();
//	nHeight = pMipImage[0]->GetHeight();
    nWidth = nMWidth;
    nHeight = nMHeight;

    // Tell log about our Texture
//    if (m_dwVersion <= 0x0700)
//    {
//        sprintf(msgString, "%sTex: ",msgString);
//        GetTexFmtDesc(&m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat,msgString+strlen(msgString),80-strlen(msgString));
//    }
//    else
//    {
        if (!bLoadWithUpdate)
            sprintf(msgString, "%s(CopyRects) Tex: %s",msgString,D3DFmtToString(m_fmtCommon[nTextureFormat]));
        else
            sprintf(msgString, "%s(UpdateTex) Tex: %s",msgString,D3DFmtToString(m_fmtCommon[nTextureFormat]));
//    }

	sprintf(msgString, "%s, %dx%d",msgString,nWidth,nHeight);

    // Create the Mipmap texture
//    pTexture = CreateMipMapTexture(nWidth,nHeight,nLevels,CDDS_TEXTURE_VIDEO|CDDS_TEXTURE_MIPMAP,pMipImage);
    if (nLevels == -1) {
        dwTType = TTYPE_MIPMAP;
    }
    else {
        dwTType = TTYPE_MIPLEVELS(nLevels);
    }
    pTexture = (CTexture8*)CreateTexture(m_pDevice, nWidth, nHeight, m_fmtCommon[nTextureFormat], dwTType);

	// Get the real number of mip levels created
    if (NULL != pTexture)
	{
        CSurface8* pd3dsSrc, *pd3dsDst;
        UINT i;

//		dwMipLevels = pTexture->m_pSrcSurface->GetNumAttachedSurfaces();
        dwMipLevels = pTexture->GetLevelCount();

        for (i = 0; i < dwMipLevels; i++) {
            if (FAILED(pTexture->GetSurfaceLevel(i, &pd3dsDst))) {
                ReleaseTexture(pTexture);
                return false;
            }
            if (FAILED(pMipLevel[i]->GetSurfaceLevel(0, &pd3dsSrc))) {
                ReleaseTexture(pTexture);
                return false;
            }
            D3DXLoadSurfaceFromSurface(pd3dsDst->GetIDirect3DSurface8(), NULL, NULL, pd3dsSrc->GetIDirect3DSurface8(), NULL, NULL, D3DX_FILTER_POINT, 0);
            pd3dsDst->Release();
            pd3dsSrc->Release();
        }
        SyncTexture(pTexture);

		sprintf(msgString, "%s, Lvls:%d",msgString,dwMipLevels);
		sprintf(szStatus, "%s, Lvls: %d",szStatus,dwMipLevels);

	    // Setup the TSS for MipMapLODBias tests
	    if (bBias)
	    {
		    if (bMipLinear)
		    {
			    float fLodBias[] = {1.0f, 0.67f, 0.33f, 0.25f, 0.0f, -0.25f, -0.33f, -0.67f, -1.0f};

			    SetTextureStageState(0,D3DTSS_MIPMAPLODBIAS,F2DW(fLodBias[nTest-1]));
			    sprintf(msgString, "%s, Bias:%.2f",msgString,fLodBias[nTest-1]);
			    sprintf(szStatus, "%s, Bias: %.2f",szStatus,fLodBias[nTest-1]);
		    }
		    else
		    {
			    float fLodBias[] = {3.0f, 2.0f, 1.0f, 0.0f, -1.0f, -2.0f, -3.0f};

			    SetTextureStageState(0,D3DTSS_MIPMAPLODBIAS,F2DW(fLodBias[nTest-1]));
			    sprintf(msgString, "%s, Bias:%.2f",msgString,fLodBias[nTest-1]);
			    sprintf(szStatus, "%s, Bias: %.2f",szStatus,fLodBias[nTest-1]);
		    }		
	    }

        // Setup the TSS for MaxMipLevel tests
	    if (bMax)
	    {
		    SetTextureStageState(0,D3DTSS_MAXMIPLEVEL,(DWORD)(dwMipLevels - nTest));
		    sprintf(msgString, "%s, Max:%d",msgString,dwMipLevels - nTest);
		    sprintf(szStatus, "%s, Max: %d",szStatus,dwMipLevels - nTest);
	    }
    }

	// Tell the log that we are starting
	BeginTestCase(msgString);

    // Tell log about CreateTexture failure
	if (NULL == pTexture)
	{
/*
		if (m_dwVersion == 0x0600)
		{
			DWORD dwFourCC = m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat.dwFourCC;

			if ((dwFourCC == MAKEFOURCC('U','Y','V','Y')) ||
				(dwFourCC == MAKEFOURCC('Y','U','Y','2')))
			{
				char	szFourCC[5];

				szFourCC[0] = (char)(dwFourCC & 0xff);
				szFourCC[1] = (char)((dwFourCC >> 8) & 0xff);
				szFourCC[2] = (char)((dwFourCC >> 16) & 0xff);
				szFourCC[3] = (char)((dwFourCC >> 24) & 0xff);
				szFourCC[4] = '\0';

				WriteToLog("Can not create a FourCC (%s) texture on Dx6.\n",szFourCC);
				SkipTests(1);
				return false;
			}
		}
*/
		WriteToLog("CreateTexture() failed with HResult = %X.\n",GetLastError());

        // Tell the logfile how they did
        UpdateStatus(false);

		return false;
	}

    // Set the valid texture
	SetTexture(0,pTexture);

    return true;
}

void CMipFilterTest::SceneRefresh(void)
{
	if (BeginScene())
	{
		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}

bool CMipFilterTest::ProcessFrame(void)
{
    bool	bResult;

     // Use the standard 15%
    bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how they did
    UpdateStatus(bResult);

    return bResult;
}

bool CMipFilterTest::TestTerminate(void)
{
	// Cleanup texture & image data
	SetTexture(0, NULL);
    ReleaseTexture(pTexture);
    pTexture = NULL;

	for (int i=0; i < 9; i++) {
        ReleaseTexture(pMipLevel[i]);
        pMipLevel[i] = NULL;
//	    RELEASE(pMipImage[i]);
    }

	return true;
}

void CMipFilterTest::UpdateStatus(bool bResult)
{
	char	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;

	// Tell the logfile how they did
	if (bResult)
	{
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
		Pass();
	}
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
		Fail();
	}

	WriteStatus("$gTest Options$y",szStatus);
	WriteStatus("$gOverall Results",szBuffer);
}

void CMipFilterTest::InitSize(void)
{
	if (bFull)
	{
		// Init the Size array for all Full tests
		SizeArray[0] =  248.0f;
		SizeArray[1] =    1.0f;
		SizeArray[2] =    2.0f;
		SizeArray[3] =    3.0f;
		SizeArray[4] =    4.0f;
		SizeArray[5] =    6.0f; //  7.0f;
		SizeArray[6] =    7.0f; //  8.0f;
		SizeArray[7] =   12.0f; // 14.0f;
		SizeArray[8] =   14.0f; // 16.0f;
		SizeArray[9] =   24.0f; // 28.0f;
		SizeArray[10] =  30.0f; // 32.0f;
		SizeArray[11] =  48.0f;
		SizeArray[12] =  56.0f;
		SizeArray[13] =  96.0f;
		SizeArray[14] = 104.0f;
		SizeArray[15] = 120.0f;
		SizeArray[16] = 192.0f;
		SizeArray[17] = 216.0f;
	}
	else if (bMax)
	{
		// Init the Size array for MaxMipLevel tests
		for (int i=0; i < 9; i++)
			SizeArray[i] = 248.0f;
	}
	else if (bBias)
	{
		// Init the Size array for LODBias tests
		for (int i=0; i < 9; i++)
			SizeArray[i] = 30.0f; // 32.0f;
	}

	// else use default values
}

BOOL CMipFilterTest::InitMipImage(DWORD dwAspectRatio)
{
	int	nMinSize, nMipWidth, nMipHeight, i;
//	CImageLoader Image;

	if (bFull || bBias || bMax)
	{
		// Setup the color arrays
		D3DCOLOR White[1]	= {RGBA_MAKE(255,255,255,255)};
		D3DCOLOR Yellow[1]	= {RGBA_MAKE(255,255,0,255)};
		D3DCOLOR Magenta[1] = {RGBA_MAKE(255,0,255,255)};
		D3DCOLOR Red[1]		= {RGBA_MAKE(255,0,0,255)};
		D3DCOLOR Cyan[1]	= {RGBA_MAKE(0,255,255,255)};
		D3DCOLOR Green[1]	= {RGBA_MAKE(0,255,0,255)};
		D3DCOLOR Blue[1]	= {RGBA_MAKE(0,0,255,255)};
		D3DCOLOR Grey[1]	= {RGBA_MAKE(128,128,128,255)};
		D3DCOLOR Brown[1]	= {RGBA_MAKE(128,128,0,255)};

		// Determine Width and Height
		if (dwAspectRatio && ((256 / dwAspectRatio) > 16))
			nMinSize = 256 / dwAspectRatio;
		else
			nMinSize = 16;

		nMipWidth = (bNonSquareW) ? nMinSize : 256;
		nMipHeight = (bNonSquareH) ? nMinSize : 256;

        nMWidth = nMipWidth;
        nMHeight = nMipHeight;
		// Load images for the full level cases
/*
		pMipImage[0] = Image.LoadStripes(nMipWidth,nMipHeight,1,White,false); 
		pMipImage[1] = Image.LoadStripes(nMipWidth/2,nMipHeight/2,1,Yellow,false); 
		pMipImage[2] = Image.LoadStripes(nMipWidth/4,nMipHeight/4,1,Magenta,false); 
		pMipImage[3] = Image.LoadStripes(nMipWidth/8,nMipHeight/8,1,Red,false); 
		pMipImage[4] = Image.LoadStripes(nMipWidth/16,nMipHeight/16,1,Cyan,false); 
		pMipImage[5] = Image.LoadStripes(nMipWidth/32,nMipHeight/32,1,Green,false); 
		pMipImage[6] = Image.LoadStripes(nMipWidth/64,nMipHeight/64,1,Blue,false); 
		pMipImage[7] = Image.LoadStripes(nMipWidth/128,nMipHeight/128,1,Grey,false); 
		pMipImage[8] = Image.LoadStripes(nMipWidth/256,nMipHeight/256,1,Brown,false);
*/
		pMipLevel[0] = (CTexture8*)CreateStripedTexture(m_pDevice, nMipWidth,nMipHeight,1,White,false); 
		pMipLevel[1] = (CTexture8*)CreateStripedTexture(m_pDevice, nMipWidth/2,nMipHeight/2,1,Yellow,false); 
		pMipLevel[2] = (CTexture8*)CreateStripedTexture(m_pDevice, nMipWidth/4,nMipHeight/4,1,Magenta,false); 
		pMipLevel[3] = (CTexture8*)CreateStripedTexture(m_pDevice, nMipWidth/8,nMipHeight/8,1,Red,false); 
		pMipLevel[4] = (CTexture8*)CreateStripedTexture(m_pDevice, nMipWidth/16,nMipHeight/16,1,Cyan,false); 
		pMipLevel[5] = (CTexture8*)CreateStripedTexture(m_pDevice, nMipWidth/32,nMipHeight/32,1,Green,false); 
		pMipLevel[6] = (CTexture8*)CreateStripedTexture(m_pDevice, nMipWidth/64,nMipHeight/64,1,Blue,false); 
		pMipLevel[7] = (CTexture8*)CreateStripedTexture(m_pDevice, nMipWidth/128,nMipHeight/128,1,Grey,false); 
		pMipLevel[8] = (CTexture8*)CreateStripedTexture(m_pDevice, nMipWidth/256,nMipHeight/256,1,Brown,false);
        for (i = 0; i < 9; i++) {
            if (!pMipLevel[i]) {
                for (i = 0; i < 9; i++) {
                    if (pMipLevel[i]) {
                        ReleaseTexture(pMipLevel[i]);
                        pMipLevel[i] = NULL;
                    }
                }
                return FALSE;
            }
        }
	}
	else
	{
		// Setup the colors for the RedStripes array
		D3DCOLOR		RedStripes[8];

		RedStripes[0] = RGBA_MAKE(255,255,255,255);	// White
		RedStripes[1] = RGBA_MAKE(255,0,0,255);		// Red
		RedStripes[2] = RGBA_MAKE(255,255,255,255);	// White
		RedStripes[3] = RGBA_MAKE(255,0,0,255);		// Red
		RedStripes[4] = RGBA_MAKE(255,255,255,255);	// White
		RedStripes[5] = RGBA_MAKE(255,0,0,255);		// Red
		RedStripes[6] = RGBA_MAKE(255,255,255,255);	// White
		RedStripes[7] = RGBA_MAKE(255,0,0,255);		// Red

		// Setup the colors for the GreenStripes array
		D3DCOLOR		GreenStripes[8];

		GreenStripes[0] = RGBA_MAKE(255,255,255,255);	// White
		GreenStripes[1] = RGBA_MAKE(0,255,0,255);		// Green
		GreenStripes[2] = RGBA_MAKE(255,255,255,255);	// White
		GreenStripes[3] = RGBA_MAKE(0,255,0,255);		// Green
		GreenStripes[4] = RGBA_MAKE(255,255,255,255);	// White
		GreenStripes[5] = RGBA_MAKE(0,255,0,255);		// Green
		GreenStripes[6] = RGBA_MAKE(255,255,255,255);	// White
		GreenStripes[7] = RGBA_MAKE(0,255,0,255);		// Green

		// Setup the colors for the BlueStripes array
		D3DCOLOR		BlueStripes[8];

		BlueStripes[0] = RGBA_MAKE(255,255,255,255);// White
		BlueStripes[1] = RGBA_MAKE(0,0,255,255);	// Blue
		BlueStripes[2] = RGBA_MAKE(255,255,255,255);// White
		BlueStripes[3] = RGBA_MAKE(0,0,255,255);	// Blue
		BlueStripes[4] = RGBA_MAKE(255,255,255,255);// White
		BlueStripes[5] = RGBA_MAKE(0,0,255,255);	// Blue
		BlueStripes[6] = RGBA_MAKE(255,255,255,255);// White
		BlueStripes[7] = RGBA_MAKE(0,0,255,255);	// Blue

		// Determine Width and Height
		if (dwAspectRatio && ((256 / dwAspectRatio) > 64))
			nMinSize = 256 / dwAspectRatio;
		else
			nMinSize = 64;

		nMipWidth = (bNonSquareW) ? nMinSize : 256;
		nMipHeight = (bNonSquareH) ? nMinSize : 256;

        nMWidth = nMipWidth;
        nMHeight = nMipHeight;

		// Load images for the three level cases
		pMipLevel[0] = (CTexture8*)CreateStripedTexture(m_pDevice, nMipWidth,nMipHeight,8,RedStripes,false); 
		pMipLevel[1] = (CTexture8*)CreateStripedTexture(m_pDevice, nMipWidth/2,nMipHeight/2,8,GreenStripes,false); 
		pMipLevel[2] = (CTexture8*)CreateStripedTexture(m_pDevice, nMipWidth/4,nMipHeight/4,8,BlueStripes,false); 
        for (i = 0; i < 3; i++) {
            if (!pMipLevel[i]) {
                for (i = 0; i < 3; i++) {
                    if (pMipLevel[i]) {
                        ReleaseTexture(pMipLevel[i]);
                        pMipLevel[i] = NULL;
                    }
                }
                return FALSE;
            }
        }
	}

    return TRUE;
}

//******************************************************************************
BOOL CMipFilterTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CMipFilterTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CMipFilterTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mipfilter\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mipfilter\maxbias.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "MipFilter.h"

//************************************************************************
// Point_MaxMipLevel Test functions

CPoint_MaxMipLevelTest::CPoint_MaxMipLevelTest()
{
	m_szTestName = TEXT("MipFilter Point_MaxMipLevel");
	m_szCommandKey = TEXT("Point_MaxMipLevel");

	// Inidicate that we are a Max test
	bMax = true;
}

CPoint_MaxMipLevelTest::~CPoint_MaxMipLevelTest()
{
}

//************************************************************************
// Linear_MaxMipLevel Test functions

CLinear_MaxMipLevelTest::CLinear_MaxMipLevelTest()
{
	m_szTestName = TEXT("MipFilter Linear_MaxMipLevel");
	m_szCommandKey = TEXT("Linear_MaxMipLevel");

	// Inidicate that we are a MipLinear & Max test
	bMax = true;
	bMipLinear = true;
}

CLinear_MaxMipLevelTest::~CLinear_MaxMipLevelTest()
{
}

//************************************************************************
// Point_LODBias Test functions

CPoint_LODBiasTest::CPoint_LODBiasTest()
{
	m_szTestName = TEXT("MipFilter Point_LODBias");
	m_szCommandKey = TEXT("Point_LODBias");

	// Inidicate that we are a Bias test
	bBias = true;
}

CPoint_LODBiasTest::~CPoint_LODBiasTest()
{
}

//************************************************************************
// Linear_LODBias Test functions

CLinear_LODBiasTest::CLinear_LODBiasTest()
{
	m_szTestName = TEXT("MipFilter Linear_LODBias");
	m_szCommandKey = TEXT("Linear_LODBias");

	// Inidicate that we are a MipLinear & Bias test
	bBias = true;
	bMipLinear = true;
}

CLinear_LODBiasTest::~CLinear_LODBiasTest()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mipfilter\mipfilter.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	MipFilter.h
 *
 ***************************************************************************/

#ifndef __MIPFILTER_H__
#define __MIPFILTER_H__

//#include "TestFrameBase.h"
//#include "CD3DTest.h"

//USETESTFRAME

// Defines
#define MAX_TESTS	9

// Base Class definitions
class CMipFilterTest: public TESTFRAME(CD3DTest)
{
    // Data
	public:
    D3DTLVERTEX     VertexList[6];
    DWORD           dwVertexCount;
	CTexture8 *		pTexture;
//	CImageData *	pMipImage[9];
    CTexture8 *     pMipLevel[9];
	float			SizeArray[18];
	bool			bNonSquareW;
	bool			bNonSquareH;
	bool			bMipLinear;
	bool			bMinLinear;
	bool			bBias;
	bool			bFull;
	bool			bMax;
	char			msgString[80];
	char			szStatus[80];

    BOOL            bLoadWithUpdate;
    int             nMWidth, nMHeight;
    BOOL            m_bExit;

	public:
	CMipFilterTest();
	~CMipFilterTest();

	// Framework functions
//    bool AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize);
	bool SetDefaultRenderStates(void);
	virtual UINT TestInitialize(void);
	virtual bool ClearFrame(void);
	virtual bool ExecuteTest(UINT);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);
	virtual bool TestTerminate(void);

	// Helper functions
	void InitSize(void);
	BOOL InitMipImage(DWORD dwAspectRatio);
	void DrawGrid(float fWidth, float fHeight);
    void UpdateStatus(bool bResult);

    virtual BOOL    AbortedExit(void);

protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

// Point_MinPoint Class definitions
class CPoint_MinPointTest: public CMipFilterTest
{
	public:
	CPoint_MinPointTest();
	~CPoint_MinPointTest();
};

// Point_MinLinear Class definitions
class CPoint_MinLinearTest: public CMipFilterTest
{
	public:
	CPoint_MinLinearTest();
	~CPoint_MinLinearTest();
};

// Point_NonSquareW Class definitions
class CPoint_NonSquareWTest: public CMipFilterTest
{
	public:
	CPoint_NonSquareWTest();
	~CPoint_NonSquareWTest();
};

// Point_NonSquareH Class definitions
class CPoint_NonSquareHTest: public CMipFilterTest
{
	public:
	CPoint_NonSquareHTest();
	~CPoint_NonSquareHTest();
};

// Point_FullSquare Class definitions
class CPoint_FullSquareTest: public CMipFilterTest
{
	public:
	CPoint_FullSquareTest();
	~CPoint_FullSquareTest();
};

// Point_FullNonSquareW Class definitions
class CPoint_FullNonSquareWTest: public CMipFilterTest
{
	public:
	CPoint_FullNonSquareWTest();
	~CPoint_FullNonSquareWTest();
};

// Point_FullNonSquareH Class definitions
class CPoint_FullNonSquareHTest: public CMipFilterTest
{
	public:
	CPoint_FullNonSquareHTest();
	~CPoint_FullNonSquareHTest();
};

// Point_MaxMipLevel Class definitions
class CPoint_MaxMipLevelTest: public CMipFilterTest
{
	public:
	CPoint_MaxMipLevelTest();
	~CPoint_MaxMipLevelTest();
};

// Point_LODBias Class definitions
class CPoint_LODBiasTest: public CMipFilterTest
{
	public:
	CPoint_LODBiasTest();
	~CPoint_LODBiasTest();
};

// Linear_MinPoint Class definitions
class CLinear_MinPointTest: public CMipFilterTest
{
	public:
	CLinear_MinPointTest();
	~CLinear_MinPointTest();
};

// Linear_MinLinear Class definitions
class CLinear_MinLinearTest: public CMipFilterTest
{
	public:
	CLinear_MinLinearTest();
	~CLinear_MinLinearTest();
};

// Linear_NonSquareW Class definitions
class CLinear_NonSquareWTest: public CMipFilterTest
{
	public:
	CLinear_NonSquareWTest();
	~CLinear_NonSquareWTest();
};

// Linear_NonSquareH Class definitions
class CLinear_NonSquareHTest: public CMipFilterTest
{
	public:
	CLinear_NonSquareHTest();
	~CLinear_NonSquareHTest();
};

// Linear_FullSquare Class definitions
class CLinear_FullSquareTest: public CMipFilterTest
{
	public:
	CLinear_FullSquareTest();
	~CLinear_FullSquareTest();
};

// Linear_FullNonSquareW Class definitions
class CLinear_FullNonSquareWTest: public CMipFilterTest
{
	public:
	CLinear_FullNonSquareWTest();
	~CLinear_FullNonSquareWTest();
};

// Linear_FullNonSquareH Class definitions
class CLinear_FullNonSquareHTest: public CMipFilterTest
{
	public:
	CLinear_FullNonSquareHTest();
	~CLinear_FullNonSquareHTest();
};

// Linear_MaxMipLevel Class definitions
class CLinear_MaxMipLevelTest: public CMipFilterTest
{
	public:
	CLinear_MaxMipLevelTest();
	~CLinear_MaxMipLevelTest();
};

// Linear_LODBias Class definitions
class CLinear_LODBiasTest: public CMipFilterTest
{
	public:
	CLinear_LODBiasTest();
	~CLinear_LODBiasTest();
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mipfilter\nonsquare.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "MipFilter.h"

//************************************************************************
// Point_NonSquareW Test functions

CPoint_NonSquareWTest::CPoint_NonSquareWTest()
{
	m_szTestName = TEXT("MipFilter Point_NonSquareWidth");
	m_szCommandKey = TEXT("Point_NonSquareWidth");

	// Inidicate that we are a NonSquareW test
	bNonSquareW = true;
}

CPoint_NonSquareWTest::~CPoint_NonSquareWTest()
{
}
 
//************************************************************************
// Point_NonSquareH Test functions

CPoint_NonSquareHTest::CPoint_NonSquareHTest()
{
	m_szTestName = TEXT("MipFilter Point_NonSquareHeight");
	m_szCommandKey = TEXT("Point_NonSquareHeight");

	// Inidicate that we are a NonSquareH test
	bNonSquareH = true;
}

CPoint_NonSquareHTest::~CPoint_NonSquareHTest()
{
}
 
//************************************************************************
// Linear_NonSquareW Test functions

CLinear_NonSquareWTest::CLinear_NonSquareWTest()
{
	m_szTestName = TEXT("MipFilter Linear_NonSquareWidth");
	m_szCommandKey = TEXT("Linear_NonSquareWidth");

	// Inidicate that we are a MipLinear & NonSquareW test
	bMipLinear = true;
	bNonSquareW = true;
}

CLinear_NonSquareWTest::~CLinear_NonSquareWTest()
{
}
 
//************************************************************************
// Linear_NonSquareH Test functions

CLinear_NonSquareHTest::CLinear_NonSquareHTest()
{
	m_szTestName = TEXT("MipFilter Linear_NonSquareHeight");
	m_szCommandKey = TEXT("Linear_NonSquareHeight");

	// Inidicate that we are a MipLinear & NonSquareH test
	bMipLinear = true;
	bNonSquareH = true;
}

CLinear_NonSquareHTest::~CLinear_NonSquareHTest()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mipfilter\modulex.h ===
#define PREPEND_MODULE(Suffix) mipfilter##Suffix
#define MODULE_STRING "mipfilter"
#pragma comment(linker, "/include:_mipfilter_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mipfilter\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=mipflter
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_mipfil.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mipfilter\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_mipfil
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
        drawgrid.cpp \
        full.cpp \
        maxbias.cpp \
        min.cpp \
        mipfilter.cpp \
        nonsquare.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\mipfilter\exe\sources.inc ===
TARGETNAME=mipflter
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_mipfil.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\overdraw\alpha.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Overdraw.h"

//************************************************************************
// Alpha_Overdraw Test functions

CAlpha_OverdrawTest::CAlpha_OverdrawTest()
{
	m_szTestName = TEXT("Overdraw/Underdraw");
	m_szCommandKey = TEXT("Alpha");

	// Inidicate that we are the alpha test
	bAlpha = true;
}

CAlpha_OverdrawTest::~CAlpha_OverdrawTest()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\overdraw\blt.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Overdraw.h"

//************************************************************************
// Blt_Overdraw Test functions

CBlt_OverdrawTest::CBlt_OverdrawTest()
{
	m_szTestName = TEXT("Overdraw/Underdraw with Blt");
	m_szCommandKey = TEXT("Blt");
}

CBlt_OverdrawTest::~CBlt_OverdrawTest()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\overdraw\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\overdraw\alphagrid.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Overdraw.h"

//************************************************************************
// Internal API:    OverdrawGrid8
//
// Purpose:         Draws a non-textured Grid using D3DTLVERTEX.      
//
// Return:          E_FAIL if malloc fails, ERROR_SUCCESS otherwise.
//************************************************************************

// The grid is composed of nHDiv rectangular regions made of two strips,
// a "Top Strip" and a "Bottom Strip".  

//            Top Strip
//    o-----o-----o-----o-----o
//    |  o  |     | o   |   o |
//    |     |  o  |     |     |
//    o-----o-----o-----o-----o
//          Bottom Strip

// The left edge is included with the top strip, and the right edge is
// part of the bottom strip.

// We'll be drawing each triangle seperately, alternating between red 
// and green triangles, then blitting each one.

bool COverdrawTest::AlphaGrid(int nTest, float fGridXPos, float fGridYPos, int nXDivisions, int nYDivisions)
{
	float          fRowHeight, fColWidth;
	float          fColLeft,   fColRight;   // left and right X positions of the current column.
	float          fRowTop,    fRowBottom;  // top and bottom Y positions of the current row.
	int            nCurMid,    nCurGrid;    // incrementors
	D3DTLVERTEX *  pMidPoints;
	D3DTLVERTEX *  pGridPoints;
	D3DTLVERTEX *  pTriangleVertices;
	float *        pGridXPositions;
	D3DCOLOR       dcTriColor;
	BOOL           bGreenTriangle=0;
	BOOL           bBottom;
	int            nRow;

	// Initialize some temporary variables
	pMidPoints = (D3DTLVERTEX *)malloc(sizeof(D3DTLVERTEX) * nXDivisions);
	pGridPoints = (D3DTLVERTEX *)malloc(sizeof(D3DTLVERTEX) * (nXDivisions+1));
	pGridXPositions = (float *)malloc(sizeof(float) * (nXDivisions+1));
	pTriangleVertices = (D3DTLVERTEX *)malloc(sizeof(D3DTLVERTEX) * 3);
	 
	if ((!pMidPoints) || (!pGridPoints) || (!pGridXPositions) || (!pTriangleVertices))
	{
		WriteToLog("Not enough memory (malloc failed)\n");
		TestFinish(D3DTESTFINISH_ABORT);
		return false;
	}

	memset(pMidPoints, 0, sizeof(D3DTLVERTEX) * nXDivisions);
	memset(pGridPoints, 0, sizeof(D3DTLVERTEX) * (nXDivisions+1));
	memset(pTriangleVertices, 0, sizeof(D3DTLVERTEX) * 3);
	memset(pGridXPositions, 0, sizeof(float) * (nXDivisions+1));

    // Set the random number seed so we can reproduce this case if necessary.
	srand(RAND_SEED * nTest);

	// Get the row height and width
	fRowHeight = 256.0f / (float)nYDivisions;
	fColWidth =  256.0f / (float)nXDivisions;

	// The grid X Positions will be used for every row, so we'll generate them here.
	for (nCurGrid = 0; nCurGrid < (nXDivisions+1); nCurGrid++)
		pGridXPositions[nCurGrid] = fGridXPos + (nCurGrid * fColWidth);

	// Now we're going to step through each row of the grid.
	for (nRow = 0; nRow < nYDivisions; nRow++)
	{
		// Set the row top and bottom positions
		if (nRow == 0)
			fRowTop = fGridYPos;   // If row zero, the top will be the grid Y position.
		else                       //     else
			fRowTop = fRowBottom;  // set the row top equal to the *previous* bottom.

		fRowBottom = fRowTop + fRowHeight;

		// Generate the list of semi-random internal points for this row.
		for (nCurMid = 0; nCurMid < nXDivisions; nCurMid++)
		{
			fColLeft = pGridXPositions[nCurMid];
			fColRight = pGridXPositions[nCurMid+1];

			switch (nTest)
			{
				case 1: case 2:	case 3:
					SetVertex(
						&(pMidPoints[nCurMid]),
						fColLeft + ((fColWidth * nTest) / 4),
						fRowTop + ((fRowHeight * nTest) / 4),
						0.9f);
					break;
				case 4:
					SetVertex(
						&(pMidPoints[nCurMid]),
						fColLeft + (fColWidth / 4),
						fRowTop + ((fRowHeight * 3) / 4),
						0.9f);
					break;
				case 5:
					SetVertex(
						&(pMidPoints[nCurMid]),
						fColLeft + ((fColWidth * 3) / 4),
						fRowTop + (fRowHeight / 4),
						0.9f);
					break;
				default:
					SetVertex(
						&(pMidPoints[nCurMid]),
						fColLeft + (fColWidth * ((float)rand() / (float)RAND_MAX)),
						fRowTop + (fRowHeight * ((float)rand() / (float)RAND_MAX)),
						0.9f);
					break;
			}
		}

		// Repeat this for the top and bottom strips.
		for (bBottom = 0; bBottom < 2; bBottom++)
		{
			int bForward = TRUE;
			D3DTLVERTEX FirstVertex;

			memset(&FirstVertex, 0, sizeof(D3DTLVERTEX));

			// Generate the list of grid points for the row.
			// if bBottom, then we're going to fill the pGridPoints with
			// the values from the pGridXPositions in reverse.
			for (nCurGrid = 0; nCurGrid < (nXDivisions + 1); nCurGrid++)
			{
				SetVertex(
					&(pGridPoints[nCurGrid]),
					pGridXPositions[(bBottom ? (nXDivisions - nCurGrid) : nCurGrid)],
					(bBottom ? fRowBottom : fRowTop),
					0.9f);
			}

			// if bBottom, reverse the midpoint array.
			if (bBottom)
				ReverseVertices(pMidPoints, nXDivisions);

			// set the first point
			SetVertex(
				&FirstVertex,
				pGridPoints[0].sx,
				(bBottom ? fRowTop : fRowBottom),
				0.9f);

			// Reset our counters
			nCurGrid = 0;
			nCurMid = -1; // the first midpoint is actually the opposite gridpoint.

			// Walk across the row, making triangles as we go!
			for (int i = 0; i < (2 * nXDivisions); i++)
			{
				// pick the three triangle vertices
				if (bForward)
				{
					if (nCurMid == -1)
						pTriangleVertices[0] = FirstVertex;
					else
						pTriangleVertices[0] = pMidPoints[nCurMid];
					pTriangleVertices[1] = pGridPoints[nCurGrid];
					pTriangleVertices[2] = pMidPoints[++nCurMid];						
				}
				else
				{
					pTriangleVertices[0] = pMidPoints[nCurMid];
					pTriangleVertices[1] = pGridPoints[nCurGrid];
					pTriangleVertices[2] = pGridPoints[++nCurGrid];
				}

				// Set the Color of the Triangle.  We're alternating red
				// and green here.
				bGreenTriangle = !bGreenTriangle;
				if (bGreenTriangle)
					dcTriColor = RGBA_MAKE( 0, 255, 0, 128 );
				else
					dcTriColor = RGBA_MAKE( 255, 0, 0, 128 );
				pTriangleVertices[0].color = dcTriColor;
				pTriangleVertices[1].color = dcTriColor;
				pTriangleVertices[2].color = dcTriColor;

				bForward = !bForward;

				// now call RenderPrimitive to render the triangle
				BeginScene();

				RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,pTriangleVertices,3,NULL,0,CD3D_SRC);

				EndScene();

				// Blt the surface to the primary (triangle by triangle)
/*
                if (m_dwVersion <= 0x0700)
                {
                    POINT Pt = {0,0};
				    Blt(m_pSrcTarget,Pt);
                }
                else // m_dwVersion >= 0x0800
*/
                {
                    POINT Pt = {0,20};
//                    Present8(Pt);
                }
			}
		}
	}

	// clear the memory we allocated
	if (pGridPoints)
		free(pGridPoints);
	if (pMidPoints)
		free(pMidPoints);
	if (pGridXPositions)
		free(pGridXPositions);
	if (pTriangleVertices)
		free(pTriangleVertices);

    return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\overdraw\bltgrid.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
//#include "types.h"
#include "Overdraw.h"

//************************************************************************
// Internal API:    OverdrawGrid
//
// Purpose:         Draws a non-textured Grid using D3DTLVERTEX.      
//
// Return:          E_FAIL if malloc fails, ERROR_SUCCESS otherwise.
//************************************************************************

// The grid is composed of nHDiv rectangular regions made of two strips,
// a "Top Strip" and a "Bottom Strip".  

//            Top Strip
//    o-----o-----o-----o-----o
//    |  o  |     | o   |   o |
//    |     |  o  |     |     |
//    o-----o-----o-----o-----o
//          Bottom Strip

// The left edge is included with the top strip, and the right edge is
// part of the bottom strip.

// We'll be drawing each triangle seperately, alternating between red 
// and green triangles, then blitting each one.

bool COverdrawTest::BltGrid(int nTest, float fGridXPos, float fGridYPos, int nXDivisions, int nYDivisions)
{
	float          fRowHeight, fColWidth;
	float          fColLeft,   fColRight;   // left and right X positions of the current column.
	float          fRowTop,    fRowBottom;  // top and bottom Y positions of the current row.
	int            nCurMid,    nCurGrid;    // incrementors
	D3DTLVERTEX *  pMidPoints;
	D3DTLVERTEX *  pGridPoints;
	D3DTLVERTEX *  pTriangleVertices;
	float *        pGridXPositions;
	D3DCOLOR       dcTriColor;
	BOOL           bGreenTriangle=0;
	BOOL           bBottom;
	int            nRow;
	CSurface8 *    pTempSurface=NULL;
	CSurface8 *    pPrevSurface=NULL;
    POINT          Pt;
	DWORD		   dwSurface;

    m_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &pPrevSurface);

	// Initialize some temporary variables
	pMidPoints = (D3DTLVERTEX *)malloc(sizeof(D3DTLVERTEX) * nXDivisions);
	pGridPoints = (D3DTLVERTEX *)malloc(sizeof(D3DTLVERTEX) * (nXDivisions+1));
	pGridXPositions = (float *)malloc(sizeof(float) * (nXDivisions+1));
	pTriangleVertices = (D3DTLVERTEX *)malloc(sizeof(D3DTLVERTEX) * 3);
	 
	if ((!pMidPoints) || (!pGridPoints) || (!pGridXPositions) || (!pTriangleVertices))
	{
		WriteToLog("Not enough memory (malloc failed)\n");
		TestFinish(D3DTESTFINISH_ABORT);
		return false;
	}

	memset(pMidPoints, 0, sizeof(D3DTLVERTEX) * nXDivisions);
	memset(pGridPoints, 0, sizeof(D3DTLVERTEX) * (nXDivisions+1));
	memset(pTriangleVertices, 0, sizeof(D3DTLVERTEX) * 3);
	memset(pGridXPositions, 0, sizeof(float) * (nXDivisions+1));

    // Create a temp surface for rendering
/*
    pTempSurface = new CDirectDrawSurface(this);

    if (NULL == pTempSurface)
	{
		WriteToLog("Initialize failed\n");
		RELEASE(pTempSurface);
		TestFinish(D3DTESTFINISH_ABORT);
		return false;
	}

    if (m_dwVersion <= 0x0700)
    {
	    if (m_pAdapter->Devices[m_pMode->nSrcDevice].fHardware)
		    dwSurface = CDDS_SURFACE_VIDEO;
	    else
		    dwSurface = CDDS_SURFACE_SYSTEM;

	    if (!pTempSurface->CreateSurface(m_pSrcTarget->m_dwWidth,m_pSrcTarget->m_dwHeight,dwSurface))
	    {
		    WriteToLog("CreateSurface failed\n");
		    RELEASE(pTempSurface);
		    TestFinish(D3DTESTFINISH_ABORT);
		    return false;
	    }
    }
    else // m_dwVersion >= 0x0800
*/
    {
        HRESULT hr;
        D3DSURFACE_DESC Desc;
        pPrevSurface->GetDesc(&Desc);
//        m_pSrcTarget->GetSurfaceDescription(&Desc);

        hr = m_pSrcDevice8->CreateRenderTarget(Desc.Width, 
                                               Desc.Height,
                                               Desc.Format,
                                               D3DMULTISAMPLE_NONE,
                                               TRUE,
                                               &pTempSurface); 
        if (FAILED(hr))
        {
	        WriteToLog("CreateRenderTarget() failed with HResult = %X.\n",hr);
//		    RELEASE(pTempSurface);
		    TestFinish(D3DTESTFINISH_ABORT);
		    return false;
	    }

//        pTempSurface->ProcessSurfaceDescription(&Desc);
    }

	// Save a pointer to the previous surface
//	pPrevSurface = m_pSrcTarget;
//    pPrevSurface->AddRef();

	// Set the render target to render to our new temporary surface.
	if (FAILED(m_pDevice->SetRenderTarget(pTempSurface, FALSE)))
	{
		WriteToLog("SetRenderTarget() to TempSurface failed\n");
		RELEASE(pTempSurface);
		TestFinish(D3DTESTFINISH_ABORT);
		return false;
	}

//	RELEASE(pTempSurface);

	// Set the random number seed so we can reproduce this case if necessary.
	srand(RAND_SEED * nTest);

	// Get the row height and width
	fRowHeight = 256.0f / (float)nYDivisions;
	fColWidth =  256.0f / (float)nXDivisions;

	// The grid X Positions will be used for every row, so we'll generate them here.
	for (nCurGrid = 0; nCurGrid < (nXDivisions+1); nCurGrid++)
		pGridXPositions[nCurGrid] = fGridXPos + (nCurGrid * fColWidth);

	// Now we're going to step through each row of the grid.
	for (nRow = 0; nRow < nYDivisions; nRow++)
	{
		// Set the row top and bottom positions
		if (nRow == 0)
			fRowTop = fGridYPos;   // If row zero, the top will be the grid Y position.
		else                       //     else
			fRowTop = fRowBottom;  // set the row top equal to the *previous* bottom.

		fRowBottom = fRowTop + fRowHeight;

		// Generate the list of semi-random internal points for this row.
		for (nCurMid = 0; nCurMid < nXDivisions; nCurMid++)
		{
			fColLeft = pGridXPositions[nCurMid];
			fColRight = pGridXPositions[nCurMid+1];

			switch (nTest)
			{
				case 1: case 2:	case 3:
					SetVertex(
						&(pMidPoints[nCurMid]),
						fColLeft + ((fColWidth * nTest) / 4),
						fRowTop + ((fRowHeight * nTest) / 4),
						0.9f);
					break;
				case 4:
					SetVertex(
						&(pMidPoints[nCurMid]),
						fColLeft + (fColWidth / 4),
						fRowTop + ((fRowHeight * 3) / 4),
						0.9f);
					break;
				case 5:
					SetVertex(
						&(pMidPoints[nCurMid]),
						fColLeft + ((fColWidth * 3) / 4),
						fRowTop + (fRowHeight / 4),
						0.9f);
					break;
				default:
					SetVertex(
						&(pMidPoints[nCurMid]),
						fColLeft + (fColWidth * ((float)rand() / (float)RAND_MAX)),
						fRowTop + (fRowHeight * ((float)rand() / (float)RAND_MAX)),
						0.9f);
					break;
			}
		}

		// Repeat this for the top and bottom strips.
		for (bBottom = 0; bBottom < 2; bBottom++)
		{
			int bForward = TRUE;
			D3DTLVERTEX FirstVertex;

			memset(&FirstVertex, 0, sizeof(D3DTLVERTEX));

			// Generate the list of grid points for the row.
			// if bBottom, then we're going to fill the pGridPoints with
			// the values from the pGridXPositions in reverse.
			for (nCurGrid = 0; nCurGrid < (nXDivisions + 1); nCurGrid++)
			{
				SetVertex(
					&(pGridPoints[nCurGrid]),
					pGridXPositions[(bBottom ? (nXDivisions - nCurGrid) : nCurGrid)],
					(bBottom ? fRowBottom : fRowTop),
					0.9f);
			}

			// if bBottom, reverse the midpoint array.
			if (bBottom)
				ReverseVertices(pMidPoints, nXDivisions);

			// set the first point
			SetVertex(
				&FirstVertex,
				pGridPoints[0].dvSX,
				(bBottom ? fRowTop : fRowBottom),
				0.9f);

			// Reset our counters
			nCurGrid = 0;
			nCurMid = -1; // the first midpoint is actually the opposite gridpoint.

			// Walk across the row, making triangles as we go!
			for (int i = 0; i < (2 * nXDivisions); i++)
			{
				// pick the three triangle vertices
				if (bForward)
				{
					if (nCurMid == -1)
						pTriangleVertices[0] = FirstVertex;
					else
						pTriangleVertices[0] = pMidPoints[nCurMid];
					pTriangleVertices[1] = pGridPoints[nCurGrid];
					pTriangleVertices[2] = pMidPoints[++nCurMid];						
				}
				else
				{
					pTriangleVertices[0] = pMidPoints[nCurMid];
					pTriangleVertices[1] = pGridPoints[nCurGrid];
					pTriangleVertices[2] = pGridPoints[++nCurGrid];
				}

				// Set the Color of the Triangle.  We're alternating red
				// and green here.
				bGreenTriangle = !bGreenTriangle;
				if (bGreenTriangle)
					dcTriColor = RGBA_MAKE( 0, 255, 0, 255 );
				else
					dcTriColor = RGBA_MAKE( 255, 0, 0, 255 );
				pTriangleVertices[0].dcColor = dcTriColor;
				pTriangleVertices[1].dcColor = dcTriColor;
				pTriangleVertices[2].dcColor = dcTriColor;

				bForward = !bForward;

				// Clear the previous geometry and then blt to black. 
				Clear(RGB_MAKE(0,0,0), 1.0f, 0, D3DCLEAR_TARGET);

				// now call RenderPrimitive to render the triangle
				BeginScene();

				RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,pTriangleVertices,3,NULL,0,CD3D_SRC);

				EndScene();

				// Blt the image from the temp surface to the main surface.
/*
                if (m_dwVersion <= 0x0700)
				{
					HDC srcDC, dstDC;

					srcDC = m_pSrcTarget->GetDC();
					dstDC = pPrevSurface->GetDC();

					BitBlt( dstDC, 0, 0,
							pPrevSurface->m_dwWidth, pPrevSurface->m_dwHeight,
							srcDC, 0, 0, SRCPAINT);

					m_pSrcTarget->ReleaseDC(srcDC);
					pPrevSurface->ReleaseDC(dstDC);
                
					// Blt the surface to the primary (triangle by triangle)
					Pt.x = Pt.y = 0;
					Blt(pPrevSurface,Pt);
				}
                else // m_dwVersion >= 0x0800
                {
*/
                    OrBlt(pPrevSurface, pTempSurface);

				    // Blt the surface to the primary (triangle by triangle)
                    Pt.x = 0;
                    Pt.y = 20;
//                    Present8(Pt);
//                }
			}
		}
	}

	RELEASE(pTempSurface);

	// clear the memory we allocated
	if (pGridPoints)
		free(pGridPoints);
	if (pMidPoints)
		free(pMidPoints);
	if (pGridXPositions)
		free(pGridXPositions);
	if (pTriangleVertices)
		free(pTriangleVertices);

	// Set the render target to our old surface and release the temporary one.
	if (FAILED(m_pDevice->SetRenderTarget(pPrevSurface, false)))
	{
		WriteToLog("SetRenderTarget() back to PrevSurface failed\n");
		TestFinish(D3DTESTFINISH_ABORT);
		return false;
	}

    RELEASE(pPrevSurface);

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\overdraw\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\overdraw\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_ovrdrw
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    alpha.cpp \
    alphagrid.cpp \
    blt.cpp \
    bltgrid.cpp \
    misc.cpp \
    overdraw.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\overdraw\modulex.h ===
#define PREPEND_MODULE(Suffix) overdraw##Suffix
#define MODULE_STRING "overdraw"
#pragma comment(linker, "/include:_overdraw_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\overdraw\misc.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Overdraw.h"

// ReverseVertices
//
// Takes a pointer to a contiguous block of memory containing vertices
// (as in an array) and reverses the order of the vertices, copying
// all the vertex information in the process.

void COverdrawTest::ReverseVertices(D3DTLVERTEX * pVertices, int nVertices)
{
	int nCurVertex = 0;
	int nLastVertex = (nVertices - 1);
	D3DTLVERTEX tempVertex;
	
	while(nCurVertex < nLastVertex)
	{
		tempVertex = pVertices[nCurVertex];
		pVertices[nCurVertex] = pVertices[nLastVertex];
		pVertices[nLastVertex] = tempVertex;

		nCurVertex++;
		nLastVertex--;
	}
}

void COverdrawTest::OrBlt(CSurface8 * pDest, CSurface8 * pSrc)
{
	int		 i, j;
	RECT	 rSurf;
	char	 *pSrcBuf, *pDestBuf;
    D3DLOCKED_RECT d3dlrSrc, d3dlrDst;
    D3DSURFACE_DESC d3dsd;
    DWORD dwDepth;

    pDest->GetDesc(&d3dsd);
    dwDepth = FormatToBitDepth(d3dsd.Format) / 8;

	// Build the subrect we want
	rSurf.top = 0;
	rSurf.left = 0;
	rSurf.bottom = rSurf.top + d3dsd.Height;
	rSurf.right = rSurf.left + d3dsd.Width;

	// Get the Surface data pointer for our subrect
//    pSrcBuf = (char*)pSrc->Lock(&rSurf);
    pSrc->LockRect(&d3dlrSrc, &rSurf, 0);
    pSrcBuf = (char*)d3dlrSrc.pBits;
//    pDestBuf = (char*)pDest->Lock(&rSurf);
    pDest->LockRect(&d3dlrDst, &rSurf, 0);
    pDestBuf = (char*)d3dlrDst.pBits;

	// OR the surfaces together
	for (j=0; j < (int)d3dsd.Height; j++)		// Height loop
	{
		char *pSrcColor = pSrcBuf + (d3dlrSrc.Pitch * j);
		char *pDestColor = pDestBuf + (d3dlrDst.Pitch * j);

		for (i=0; i < (int)(d3dsd.Width * dwDepth); i++)	// Width loop
		{
            *pDestColor = *pSrcColor++ | *pDestColor++;
        }
	}

	pSrc->UnlockRect();
	pDest->UnlockRect();
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\overdraw\overdraw.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	Overdraw.h
 *
 ***************************************************************************/

#ifndef __OVERDRAW_H__
#define __OVERDRAW_H__

//#include "TestFrameBase.h"
//#include "CD3DTest.h"

//USETESTFRAME

// Defines
#define MAX_TESTS	40
#define RAND_SEED	4321

// Class definition
class COverdrawTest: public TESTFRAME(CD3DTest)
{
    // Data
	public:
	char	msgString[80];
    bool    bAlpha;
	int		nOffset;

    BOOL    m_bExit;

	public:
	COverdrawTest();
	~COverdrawTest();

	// Framework functions
	virtual bool SetDefaultRenderStates(void);
	virtual UINT TestInitialize(void);
	virtual bool ClearFrame(void);
	virtual bool ExecuteTest(UINT);
	virtual bool ProcessFrame(void);

	// Helper functions
	bool AlphaGrid(int nTest, float fGridXPos, float fGridYPos, int nXDivisions, int nYDivisions);
	bool BltGrid(int nTest, float fGridXPos, float fGridYPos, int nXDivisions, int nYDivisions);
    void OrBlt(CSurface8 * pDest, CSurface8 * pSrc);
	void ReverseVertices(D3DTLVERTEX * pVertices, int nVertices);

    virtual BOOL Render();

    virtual bool Present8(POINT &Pt);

    virtual BOOL    AbortedExit(void);

protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

// Alpha Class definitions
class CAlpha_OverdrawTest: public COverdrawTest
{
	public:
	CAlpha_OverdrawTest();
	~CAlpha_OverdrawTest();
};

// Blt Class definitions
class CBlt_OverdrawTest: public COverdrawTest
{
	public:
	CBlt_OverdrawTest();
	~CBlt_OverdrawTest();
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\overdraw\exe\sources.inc ===
TARGETNAME=overdraw
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_ovrdrw.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\overdraw\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=overdraw
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_ovrdrw.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\overdraw\overdraw.cpp ===
#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Overdraw.h"

// Global Test and App instance
//CD3DWindowFramework	App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    COverdrawTest*  pOverdrawTest;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 2 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pOverdrawTest = new CAlpha_OverdrawTest();
                break;
            case 1:
                pOverdrawTest = new CBlt_OverdrawTest();
                break;
        }

        if (!pOverdrawTest) {
            return FALSE;
        }

        // Initialize the scene
        if (!pOverdrawTest->Create(pDisplay)) {
            pOverdrawTest->Release();
            return FALSE;
        }

        bRet = pOverdrawTest->Exhibit(pnExitCode);

        bQuit = pOverdrawTest->AbortedExit();

        // Clean up the scene
        pOverdrawTest->Release();
    }

    return bRet;
}

COverdrawTest::COverdrawTest()
{
    // Init variables
	bAlpha = false;

    // Only initialize the source
    m_ModeOptions.fReference = false;

    // Disable textures
    m_ModeOptions.fTextures = false;

    // Disable ZBuffers
    m_ModeOptions.fZBuffer = false;

    m_bExit = FALSE;
}

COverdrawTest::~COverdrawTest()
{
    m_pDisplay->SetVerificationThreshold(1.0f);
}

bool COverdrawTest::SetDefaultRenderStates(void)
{
    if (bAlpha)
    {
	    // Set the alpha blending renderstates for alpha method
	    SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)TRUE);
	    SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
	    SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    }

	return true;
}

UINT COverdrawTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

	// Setup the Test range
	SetTestRange(1, MAX_TESTS);

/*
    if (m_dwVersion <= 0x0700)
    {
	    // Check the caps we are interested in
	    DWORD dwRasterCaps = m_pAdapter->Devices[n].Desc.dpcTriCaps.dwRasterCaps;

	    // Check the SubPixel caps
	    if (!(dwRasterCaps & D3DPRASTERCAPS_SUBPIXEL) &&
		    !(dwRasterCaps & D3DPRASTERCAPS_SUBPIXELX))
	    {
		    WriteToLog("Device capability not supported: Raster Subpixel.\n");
		    return D3DTESTINIT_ABORT;
	    }
    }
*/

    // Force the Blt option to be given on command line
    if (!bAlpha && !KeySet("Blt"))
		return D3DTESTINIT_SKIPALL;

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	return D3DTESTINIT_RUN;
}

bool COverdrawTest::ClearFrame(void)
{
    return Clear(RGBA_MAKE(0,0,0,255));
}

bool COverdrawTest::ExecuteTest(UINT uTestNum)
{
	// Generate a unique random number for the grid offset
	srand(((MAX_TESTS + 1) - uTestNum) * 9);
	nOffset = rand() % (MAX_TESTS/2);
	float fStart = (float)nOffset;
    int nXDivisions, nYDivisions;

	// Initialize some variables
	bool bResult = true;
	msgString[0] = '\0';

	// Start the test case message
	sprintf(msgString, "%sStarting Pos: ",msgString);

    // Setup the X & Y divisions based on test number
    if (uTestNum <= 10)
	{
        nXDivisions = 1;
        nYDivisions = 1;
	}
	else if (uTestNum <= 15)
	{
        nXDivisions = 5;
        nYDivisions = uTestNum - 10;
	}
	else if (uTestNum <= 20)
	{
        nXDivisions = uTestNum - 15;
        nYDivisions = 5;
	}
	else 
	{
        nXDivisions = uTestNum - 10;
        nYDivisions = uTestNum - 10;
	}

m_pDevice->SetViewport(&m_vpFull);
ClearFrame();

	// Start rendering the primitives.
    if (bAlpha)
    {
		bResult = AlphaGrid(
							uTestNum,		// Test case 
							fStart, fStart,	// Start X, Start Y
							nXDivisions,	// X divisions 
							nYDivisions		// Y divisions
						   );			
    }
    else
    {
		bResult = BltGrid(
						  uTestNum,		// Test case 
						  fStart, fStart,	// Start X, Start Y
						  nXDivisions,	// X divisions 
						  nYDivisions		// Y divisions
						 );			
    }

	sprintf(msgString, "%s(%2d, %2d), ",msgString,nOffset,nOffset);
	sprintf(msgString, "%sWidth Div: %2d, ",msgString,nXDivisions);
	sprintf(msgString, "%sHeight Div: %2d",msgString,nYDivisions);

	// Check the result from OverdrawGrid()
	if (bResult)
	{
		// Tell the log that we are starting
		BeginTestCase(msgString);
	}

    return bResult;
}

bool COverdrawTest::ProcessFrame(void)
{
    CSurface8* pd3ds;
    D3DLOCKED_RECT d3dlr;
    bool	bResult;
	RECT	rSurf;
	DWORD	dwColor;
	void	*pBuf, *pColor;
	char	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;
    HRESULT hr;
    D3DSURFACE_DESC d3dsd;

	// Build the subrect we want
	rSurf.top = nOffset;
	rSurf.left = nOffset;
	rSurf.bottom = rSurf.top + 256;
	rSurf.right = rSurf.left + 256;

    hr = m_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetBackBuffer"))) {
        return false;
    }
    pd3ds->GetDesc(&d3dsd);

	// Get the Surface data pointer for our subrect
//    pBuf = m_pSrcTarget->Lock(&rSurf);
    hr = pd3ds->LockRect(&d3dlr, &rSurf, D3DLOCK_TILED);
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"))) {
        return false;
    }
    pBuf = d3dlr.pBits;

    if (pBuf == NULL)
	{
		WriteToLog("ProcessFrame: Lock failed on back buffer.");
        return false;
	}

	// Initialize variables
	int nRedPixels = 0;
	int nGreenPixels = 0;
	int nBlackPixels = 0;
	int nYellowPixels = 0;

	// Look for any Yellow or Black pixels
	for (int j=0; j < 256; j++)		// Height loop
	{
		pColor = (char*)pBuf + (d3dlr.Pitch * j);

		for (int i=0; i < 256; i++)	// Width loop
		{
			DWORD red, green, blue;

//    		dwColor = m_pSrcTarget->ReadColor(&pColor);
            if (FormatToBitDepth(d3dsd.Format) == 16) {
                ARGBPIXELDESC pixd;
                DWORD i, dwC = 0;
                GetARGBPixelDesc(d3dsd.Format, &pixd);
                for (dwC = (*(LPDWORD)pColor & pixd.dwRMask) >> pixd.dwRShift, i = pixd.dwRMask >> pixd.dwRShift; !(i & 0x80); i <<= 1, dwC <<= 1);
                dwColor = dwC;
                for (dwC = (*(LPDWORD)pColor & pixd.dwGMask) >> pixd.dwGShift, i = pixd.dwGMask >> pixd.dwGShift; !(i & 0x80); i <<= 1, dwC <<= 1);
                dwColor |= dwC;
                for (dwC = (*(LPDWORD)pColor & pixd.dwBMask) >> pixd.dwBShift, i = pixd.dwBMask >> pixd.dwBShift; !(i & 0x80); i <<= 1, dwC <<= 1);
                dwColor |= dwC;
                pColor = ((LPWORD)pColor) + 1;
            }
            else {
                dwColor = *(LPDWORD)pColor;
                pColor = ((LPDWORD)pColor) + 1;
            }

			red   = RGBA_GETRED(dwColor);
			green = RGBA_GETGREEN(dwColor);
			blue  = RGBA_GETBLUE(dwColor);

            if (bAlpha)
            {
                // Count the Underdraw & Overdraw pixels in the surface
                if (!(red || green || blue) || (red && green) || (red > 150) || (green > 150))
                {
    			    if (!(red || green || blue))
                    {
	    			    nBlackPixels++;
//                        dwColor = m_pSrcTarget->ColorConvert(RGBA_MAKE(255,255,255,255));
                        dwColor = ColorToPixel(d3dsd.Format, NULL, RGBA_MAKE(255,255,255,255));
                    }

                    if (red && green)
                    {
				        nYellowPixels++;
//                        dwColor = m_pSrcTarget->ColorConvert(RGBA_MAKE(255,255,0,255));
                        dwColor = ColorToPixel(d3dsd.Format, NULL, RGBA_MAKE(255,255,0,255));
                    }

                    if (red > 150)
                    {
                        nRedPixels++;
//                        dwColor = m_pSrcTarget->ColorConvert(RGBA_MAKE(255,0,0,255));
                        dwColor = ColorToPixel(d3dsd.Format, NULL, RGBA_MAKE(255,0,0,255));
                    }

                    if (green > 150)
                    {
                        nGreenPixels++;
//                        dwColor = m_pSrcTarget->ColorConvert(RGBA_MAKE(0,255,0,255));
                        dwColor = ColorToPixel(d3dsd.Format, NULL, RGBA_MAKE(0,255,0,255));
                    }

                    int nBytes = FormatToBitDepth(d3dsd.Format) / 8;
                    BYTE *pHighlight = (PBYTE)&dwColor;
                    BYTE *pWrite = (PBYTE)pColor;
                    pHighlight += nBytes;
            
                    for (int k=0; k < nBytes; k++)
                    {
                        pWrite--;
                        pHighlight--;
                        *pWrite = *pHighlight;
                    }
                }
            }
            else // Using Blt method
            {
			    // Count the Underdraw pixels in the surface
			    if (!(red || green || blue))
				    nBlackPixels++;

    		    // Count the Overdraw pixels in the surface
                if (red && green) 
				    nYellowPixels++;
            }
		}
	}

//	bResult = m_pSrcTarget->Unlock();
    bResult = SUCCEEDED(pd3ds->UnlockRect());  
    pd3ds->Release();
    
    if (!bResult)
 	{
		WriteToLog("ProcessFrame: Unlock failed on back buffer.");
        return false;
	}

	// Tell the logfile how it went
	if ((nBlackPixels == 0) && (nYellowPixels == 0) && (nRedPixels == 0) && (nGreenPixels == 0))
	{
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
//		m_fPassPercentage = 1.0;
        m_pDisplay->SetVerificationThreshold(1.0f);
		bResult = true;
		Pass();
	}
	else 
	{
        // If alpha method, Blt the highlighted failures 
        if (bAlpha)
        {
//            if (m_dwVersion <= 0x0700)
//            {
//                POINT Pt = {0,0};
//				Blt(m_pSrcTarget,Pt);
//            }
//            else // m_dwVersion >= 0x0800
//            {
                POINT Pt = {0,20};
                Present8(Pt);
//            }
        }

        if (nBlackPixels)
		{
			WriteToLog("UnderDraw Pixels detected!\n");
			WriteToLog("Found %d Black pixels (highlighted White).\n", nBlackPixels);
		}

		if (nYellowPixels)
		{
			WriteToLog("OverDraw Pixels detected!\n");
			WriteToLog("Found %d Yellow pixels.\n", nYellowPixels);
		}

		if (nRedPixels)
		{
			WriteToLog("OverDraw Pixels detected!\n");
			WriteToLog("Found %d overbright Red pixels.\n", nRedPixels);
		}

		if (nGreenPixels)
		{
			WriteToLog("OverDraw Pixels detected!\n");
			WriteToLog("Found %d overbright Green pixels.\n", nGreenPixels);
		}

		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
//		m_fPassPercentage = 1.0f - ((nBlackPixels + nYellowPixels + nGreenPixels + nRedPixels) / 65536.0f);
        m_pDisplay->SetVerificationThreshold(1.0f - ((nBlackPixels + nYellowPixels + nGreenPixels + nRedPixels) / 65536.0f));
		bResult = false;
		Fail();
	}

	WriteStatus("$gOverall Results",szBuffer);
	
    return bResult;
}

BOOL COverdrawTest::Render() {

    DWORD    dwClearFlags = D3DCLEAR_TARGET;
    HRESULT  hr;

    if (!m_bCreated) {
        return FALSE;
    }

    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return TRUE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) {
                return FALSE;
            }
        }
    }

    // Clear the rendering target
    m_pDevice->SetViewport(&m_vpFull);

//    ClearFrame();

    SwitchAPI((UINT)m_fFrame);

//    SceneRefresh();

    // Begin the scene
    m_pDevice->BeginScene();

    // Display the adapter mode
//    ShowDisplayMode();

    // Display the frame rate
//    ShowFrameRate();

    // Display the console
//    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    CompareImages();

    ProcessFrame();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    return TRUE;
}

//******************************************************************************
bool COverdrawTest::Present8(POINT & Pt)
{
    CSurface8* pd3ds;
    D3DSURFACE_DESC d3dsd;
    RECT rSrcRect, rDstRect;

    if (FAILED(m_pDevice->GetRenderTarget(&pd3ds))) {
        return false;
    }

    if (FAILED(pd3ds->GetDesc(&d3dsd))) {
        pd3ds->Release();
        return FALSE;
    }

    pd3ds->Release();

    rSrcRect.left = 0;
    rSrcRect.top = 0;
    rSrcRect.right = d3dsd.Width;
    rSrcRect.bottom = d3dsd.Height;

    rSrcRect.left = Pt.x;
    rSrcRect.top = Pt.y;
    rSrcRect.right = d3dsd.Width + Pt.x;
    rSrcRect.bottom = d3dsd.Height + Pt.y;

//    if (!SetLastError(m_pDevice->Present(&rSrcRect, &rDstRect, NULL, NULL)))
    if (!SetLastError(m_pDevice->Present(NULL, NULL, NULL, NULL)))
        return false;
    return true;
}

//******************************************************************************
BOOL COverdrawTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void COverdrawTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL COverdrawTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\perspective\color.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Perspective.h"

//************************************************************************
// Perspective Color Test functions

CColorTest::CColorTest()
{
	m_szTestName = TEXT("Perspective Color");
	m_szCommandKey = TEXT("Color");

    // Disable textures
    m_ModeOptions.fTextures = false;
}

CColorTest::~CColorTest()
{
}

UINT CColorTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

	// Setup the Test range
	SetTestRange(1, MAX_GRID_TESTS + MAX_TRI_TESTS);

	// Make sure we are on at lease DX8
//	if (m_dwVersion <= 0x0700)
//	{
//		WriteToLog("This test requires at least Dx8.\n");
//		return D3DTESTINIT_SKIPALL;
//	}

    // Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;

	// Check the appropriate Raster cap
	if (!(dwRasterCaps & D3DPRASTERCAPS_COLORPERSPECTIVE))
	{
		WriteToLog("Device capability not supported: Raster ColorPerspective.\n");
		return D3DTESTINIT_SKIPALL;
    }

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	return D3DTESTINIT_RUN;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\perspective\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\perspective\perspective.cpp ===
#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Perspective.h"

// Global Test and App instance
//CD3DWindowFramework	App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CPerspectiveTest*   pPerspectiveTest;
    BOOL                bQuit = FALSE, bRet = TRUE;
    UINT                i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 2 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pPerspectiveTest = new CTextureTest();
                break;
            case 1:
                pPerspectiveTest = new CColorTest();
                break;
        }

        if (!pPerspectiveTest) {
            return FALSE;
        }

        // Initialize the scene
        if (!pPerspectiveTest->Create(pDisplay)) {
            pPerspectiveTest->Release();
            return FALSE;
        }

        bRet = pPerspectiveTest->Exhibit(pnExitCode);

        bQuit = pPerspectiveTest->AbortedExit();

        // Clean up the scene
        pPerspectiveTest->Release();
    }

    return bRet;
}

CPerspectiveTest::CPerspectiveTest()
{
    pTexture = NULL;
    m_bExit = FALSE;
}

CPerspectiveTest::~CPerspectiveTest()
{
}

bool CPerspectiveTest::SetDefaultRenderStates(void)
{
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)TRUE);
	return true;
}

bool CPerspectiveTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255));
}

bool CPerspectiveTest::ExecuteTest(UINT uTestNum)
{
	// Initialize some variables
    dwVertexCount = 0;
	msgString[0] = '\0';

    if (m_ModeOptions.fTextures)
    {
    	// Cleanup previous texture
	    SetTexture(0, NULL);
        ReleaseTexture(pTexture);

	    // Let's build some triangles.
	    if (uTestNum <= MAX_GRID_TESTS * 4)
	    {
		    // Build the texturing grid
		    DrawTexGrid(uTestNum); 
	    }
	    else
	    {
		    // Build the triangle
		    DrawTriangle(uTestNum - (MAX_GRID_TESTS * 4)); 
	    }

	    // Create and set the texture
//        pTexture = CreateTexture(pImage->GetWidth(),pImage->GetHeight(),CDDS_TEXTURE_VIDEO,pImage);
//        pTexture = CreateStripedTexture(m_pDevice, 64, 64, 8, Stripes, false, false, m_fmtCommon[nTextureFormat]);
        pTexture = CreateStripedTexture(m_pDevice, 64, 64, 8, Stripes, false, false, D3DFMT_A8R8G8B8);

	    // Tell the framework what texture to use
        if (NULL != pTexture)
	    {
            SetTexture(0,pTexture);

//            if (m_dwVersion <= 0x0700)
//            {
//    		    sprintf(msgString, "%sTex: ",msgString);
//        	    GetTexFmtDesc(&m_pCommonTextureFormats[m_pMode->nTextureFormat].ddpfPixelFormat,msgString+strlen(msgString),80-strlen(msgString));
//            }
//            else
//    		    sprintf(msgString, "%sTex: %s",msgString,D3DFmtToString(m_fmtCommon[nTextureFormat]));
    		    sprintf(msgString, "%sTex: %s",msgString,D3DFmtToString(D3DFMT_A8R8G8B8));
	    }
	    else
	    {
		    WriteToLog("CreateTexture() failed with HResult = %X.\n",GetLastError());
		    TestFinish(D3DTESTFINISH_ABORT);
		    return false;
	    }
    }
    else
    {
	    // Let's build some triangles.
	    if (uTestNum <= MAX_GRID_TESTS)
	    {
		    // Build the color grid
		    DrawColorGrid(uTestNum); 
	    }
	    else
	    {
		    // Build the triangle
		    DrawTriangle(uTestNum - MAX_GRID_TESTS); 
	    }
    }

    // Tell the log that we are starting
    BeginTestCase(msgString);

    return true;
}

void CPerspectiveTest::SceneRefresh()
{
	if (BeginScene())
	{
		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}

bool CPerspectiveTest::ProcessFrame(void)
{
	char 	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;
    bool	bResult;

     // Use the standard 15%
    bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how the compare went
    if (bResult)
    {
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
	}

	WriteStatus("$gOverall Results",szBuffer);

    return bResult;
}

bool CPerspectiveTest::TestTerminate()
{
	// Cleanup texture & image data
    if (m_ModeOptions.fTextures)
    {
	    SetTexture(0, NULL);
        ReleaseTexture(pTexture);
        pTexture = NULL;
//        RELEASE(pImage);
    }

	return true;
}

//******************************************************************************
BOOL CPerspectiveTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CPerspectiveTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CPerspectiveTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\perspective\modulex.h ===
#define PREPEND_MODULE(Suffix) perspective##Suffix
#define MODULE_STRING "perspective"
#pragma comment(linker, "/include:_perspective_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\perspective\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\perspective\perspective.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	Perspective.h
 *
 ***************************************************************************/

#ifndef __PERSPECTIVE_H__
#define __PERSPECTIVE_H__

//#include "TestFrameBase.h"
//#include "CD3DTest.h"

//USETESTFRAME

// Defines
#define MAX_GRID_TESTS	32
#define MAX_TRI_TESTS	11

// Class definition
class CPerspectiveTest: public TESTFRAME(CD3DTest)
{
    // Data
    public:
    D3DTLVERTEX     VertexList[6];
    DWORD           dwVertexCount;
	CTexture8 *		pTexture;
//	CImageData *	pImage;
	char			msgString[80];

	D3DCOLOR		Stripes[8];
    BOOL            m_bExit;

	public:
	CPerspectiveTest();
	~CPerspectiveTest();

	// Framework functions
	virtual bool SetDefaultRenderStates(void);
	virtual bool ClearFrame(void);
	virtual bool ExecuteTest(UINT);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);
	virtual bool TestTerminate(void);

	// Helper functions
	void DrawTexGrid(int nTest);
	void DrawColorGrid(int nTest);
	void DrawTriangle(int nTest);

    virtual BOOL    AbortedExit(void);

protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

// Texture Class definitions
class CTextureTest: public CPerspectiveTest
{
	public:
	CTextureTest();
	~CTextureTest();

    // Framework functions
	UINT TestInitialize(void);

};

// Color Class definitions
class CColorTest: public CPerspectiveTest
{
	public:
	CColorTest();
	~CColorTest();

	// Framework functions
	UINT TestInitialize(void);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\perspective\drawmesh.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Perspective.h"

//************************************************************************
// Internal API:    DrawTexGrid
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CPerspectiveTest::DrawTexGrid(int nTest)
{
	int nMesh, nScale, nMapping;
	float fScale, fZValue[4];
    DWORD dwColor = RGBA_MAKE(255,255,255,255);

	// Initialize the interesting variables
  	nMesh = ((nTest-1) / 16) + 1;

    nMapping = ((nTest-1) / 4) + 1;
	nMapping = nMapping % 4;

	if (nMapping == 0)
		nMapping = 4;

	nScale = nTest;
	nScale = nScale % 4;

	if (nScale == 0)
		nScale = 4;

	fScale = 1.0f * nScale;

    // Setup the mesh
	switch (nMesh)
	{
		case (1): 
			fZValue[0] = 0.1f;
			fZValue[1] = 0.9f;
			fZValue[2] = 0.1f;
			fZValue[3] = 0.9f;
			break;
		case (2): 
			fZValue[0] = 0.1f;
			fZValue[1] = 0.5f;
			fZValue[2] = 0.5f;
			fZValue[3] = 0.9f;
			break;
		case (3): 
			fZValue[0] = 0.1f;
			fZValue[1] = 0.1f;
			fZValue[2] = 0.9f;
			fZValue[3] = 0.9f;
			break;
		case (4): 
			fZValue[0] = 0.5f;
			fZValue[1] = 0.1f;
			fZValue[2] = 0.9f;
			fZValue[3] = 0.5f;
			break;
		case (5): 
			fZValue[0] = 0.9f;
			fZValue[1] = 0.1f;
			fZValue[2] = 0.9f;
			fZValue[3] = 0.1f;
			break;
		case (6): 
			fZValue[0] = 0.9f;
			fZValue[1] = 0.5f;
			fZValue[2] = 0.5f;
			fZValue[3] = 0.1f;
			break;
		case (7): 
			fZValue[0] = 0.9f;
			fZValue[1] = 0.9f;
			fZValue[2] = 0.1f;
			fZValue[3] = 0.1f;
			break;
		case (8): 
			fZValue[0] = 0.5f;
			fZValue[1] = 0.9f;
			fZValue[2] = 0.1f;
			fZValue[3] = 0.5f;
			break;
	}

	sprintf(msgString, "%sZval:(%.1f)(%.1f)(%.1f)(%.1f), ",msgString,fZValue[2],fZValue[0],fZValue[3],fZValue[1]);

	switch (nMapping)
	{
		case (1): // Use standard ((0,0)(1,0)(0,1)(1,1)) mapping
   			sprintf(msgString, "%sMap:(0,0)(%d,0)(0,%d)(%d,%d), ",msgString,nScale,nScale,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor, 0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor, 0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, fZValue[3]),(1.0f / fZValue[3]), dwColor, 0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor, 0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, fZValue[0]),(1.0f / fZValue[0]), dwColor, 0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor, 0, fScale,fScale);
			break;
		case (2): // Use ((0,1)(0,0)(1,1)(1,0)) mapping
   			sprintf(msgString, "%sMap:(0,%d)(0,0)(%d,%d)(%d,0), ",msgString,nScale,nScale,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor, 0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor, 0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, fZValue[3]),(1.0f / fZValue[3]), dwColor, 0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor, 0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, fZValue[0]),(1.0f / fZValue[0]), dwColor, 0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor, 0, fScale,  0.0f);
			break;
		case (3): // Use ((1,1)(0,1)(1,0)(0,0)) mapping
   			sprintf(msgString, "%sMap:(%d,%d)(0,%d)(%d,0)(0,0), ",msgString,nScale,nScale,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor, 0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor, 0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, fZValue[3]),(1.0f / fZValue[3]), dwColor, 0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor, 0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, fZValue[0]),(1.0f / fZValue[0]), dwColor, 0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor, 0, 0.0f,    0.0f);
			break;
		case (4): // Use ((1,0)(1,1)(0,0)(0,1)) mapping
   			sprintf(msgString, "%sMap:(%d,0)(%d,%d)(0,0)(0,%d), ",msgString,nScale,nScale,nScale,nScale);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor, 0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor, 0, 0.0f,  fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, fZValue[3]),(1.0f / fZValue[3]), dwColor, 0, 0.0f,    0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor, 0, fScale,  0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, fZValue[0]),(1.0f / fZValue[0]), dwColor, 0, fScale,fScale);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor, 0, 0.0f,  fScale);
			break;
	}
}

//************************************************************************
// Internal API:    DrawColorGrid
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CPerspectiveTest::DrawColorGrid(int nTest)
{
    DWORD dwColor[4];
	float fZValue[4];
	int nMesh, nRotate;
	char szColor0[20], szColor1[20], szColor2[20], szColor3[20];

	// Initialize the interesting variables
   	nMesh = ((nTest-1) / 4) + 1;

    nRotate = nTest;
	nRotate = nRotate % 4;

	if (nRotate == 0)
		nRotate = 4;

    // Clear out the color strings
    szColor0[0] = '\0';
    szColor1[0] = '\0';
    szColor2[0] = '\0';
    szColor3[0] = '\0';

    // Setup the mesh
	switch (nMesh)
	{
		case (1): 
			fZValue[0] = 0.1f;
			fZValue[1] = 0.9f;
			fZValue[2] = 0.1f;
			fZValue[3] = 0.9f;

            sprintf(szColor0, "%sWhite",szColor0);
            dwColor[0] = RGBA_MAKE(255,255,255,255);

            sprintf(szColor1, "%sRed",szColor1);
            dwColor[1] = RGBA_MAKE(255,0,0,255);

            sprintf(szColor2, "%sGreen",szColor2);
            dwColor[2] = RGBA_MAKE(0,255,0,255);

            sprintf(szColor3, "%sBlue",szColor3);
            dwColor[3] = RGBA_MAKE(0,0,255,255);
			break;
		case (2): 
			fZValue[0] = 0.1f;
			fZValue[1] = 0.5f;
			fZValue[2] = 0.5f;
			fZValue[3] = 0.9f;

            sprintf(szColor0, "%sYellow",szColor0);
            dwColor[0] = RGBA_MAKE(255,255,0,255);

            sprintf(szColor1, "%sMagenta",szColor1);
            dwColor[1] = RGBA_MAKE(255,0,255,255);

            sprintf(szColor2, "%sCyan",szColor2);
            dwColor[2] = RGBA_MAKE(0,255,255,255);

            sprintf(szColor3, "%sBlack",szColor3);
            dwColor[3] = RGBA_MAKE(0,0,0,255);
			break;
		case (3): 
			fZValue[0] = 0.1f;
			fZValue[1] = 0.1f;
			fZValue[2] = 0.9f;
			fZValue[3] = 0.9f;

            sprintf(szColor0, "%sWhite",szColor0);
            dwColor[0] = RGBA_MAKE(255,255,255,255);

            sprintf(szColor1, "%sRed",szColor1);
            dwColor[1] = RGBA_MAKE(255,0,0,255);

            sprintf(szColor2, "%sYellow",szColor2);
            dwColor[2] = RGBA_MAKE(255,255,0,255);

            sprintf(szColor3, "%sMagenta",szColor3);
            dwColor[3] = RGBA_MAKE(255,0,255,255);
			break;
		case (4): 
			fZValue[0] = 0.5f;
			fZValue[1] = 0.1f;
			fZValue[2] = 0.9f;
			fZValue[3] = 0.5f;

            sprintf(szColor0, "%sGreen",szColor0);
            dwColor[0] = RGBA_MAKE(0,255,0,255);

            sprintf(szColor1, "%sBlue",szColor1);
            dwColor[1] = RGBA_MAKE(0,0,255,255);

            sprintf(szColor2, "%sCyan",szColor2);
            dwColor[2] = RGBA_MAKE(0,255,255,255);

            sprintf(szColor3, "%sBlack",szColor3);
            dwColor[3] = RGBA_MAKE(0,0,0,255);
			break;
		case (5): 
			fZValue[0] = 0.9f;
			fZValue[1] = 0.1f;
			fZValue[2] = 0.9f;
			fZValue[3] = 0.1f;

            sprintf(szColor0, "%sWhite",szColor0);
            dwColor[0] = RGBA_MAKE(255,255,255,255);

            sprintf(szColor1, "%sRed",szColor1);
            dwColor[1] = RGBA_MAKE(255,0,0,255);

            sprintf(szColor2, "%sCyan",szColor2);
            dwColor[2] = RGBA_MAKE(0,255,255,255);

            sprintf(szColor3, "%sBlack",szColor3);
            dwColor[3] = RGBA_MAKE(0,0,0,255);
			break;
		case (6): 
			fZValue[0] = 0.9f;
			fZValue[1] = 0.5f;
			fZValue[2] = 0.5f;
			fZValue[3] = 0.1f;

            sprintf(szColor0, "%sGreen",szColor0);
            dwColor[0] = RGBA_MAKE(0,255,0,255);

            sprintf(szColor1, "%sBlue",szColor1);
            dwColor[1] = RGBA_MAKE(0,0,255,255);

            sprintf(szColor2, "%sYellow",szColor2);
            dwColor[2] = RGBA_MAKE(255,255,0,255);

            sprintf(szColor3, "%sMagenta",szColor3);
            dwColor[3] = RGBA_MAKE(255,0,255,255);
			break;
		case (7): 
			fZValue[0] = 0.9f;
			fZValue[1] = 0.9f;
			fZValue[2] = 0.1f;
			fZValue[3] = 0.1f;

            sprintf(szColor0, "%sWhite",szColor0);
            dwColor[0] = RGBA_MAKE(255,255,255,255);

            sprintf(szColor1, "%sGreen",szColor1);
            dwColor[1] = RGBA_MAKE(0,255,0,255);

            sprintf(szColor2, "%sYellow",szColor2);
            dwColor[2] = RGBA_MAKE(255,255,0,255);

            sprintf(szColor3, "%sCyan",szColor3);
            dwColor[3] = RGBA_MAKE(0,255,255,255);
			break;
		case (8): 
			fZValue[0] = 0.5f;
			fZValue[1] = 0.9f;
			fZValue[2] = 0.1f;
			fZValue[3] = 0.5f;

            sprintf(szColor0, "%sRed",szColor0);
            dwColor[0] = RGBA_MAKE(255,0,0,255);

            sprintf(szColor1, "%sBlue",szColor1);
            dwColor[1] = RGBA_MAKE(0,0,255,255);

            sprintf(szColor2, "%sMagenta",szColor2);
            dwColor[2] = RGBA_MAKE(255,0,255,255);

            sprintf(szColor3, "%sBlack",szColor3);
            dwColor[3] = RGBA_MAKE(0,0,0,255);
			break;
	}

	sprintf(msgString, "%sZval:(%.1f)(%.1f)(%.1f)(%.1f), ",msgString,fZValue[2],fZValue[0],fZValue[3],fZValue[1]);

	switch (nRotate)
	{
		case (1): // Rotate vertex colors
   			sprintf(msgString, "%sColor:(%s)(%s)(%s)(%s)",msgString,szColor0,szColor1,szColor2,szColor3);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor[0], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor[3], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, fZValue[3]),(1.0f / fZValue[3]), dwColor[2], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor[0], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, fZValue[0]),(1.0f / fZValue[0]), dwColor[1], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor[3], 0, 0.0f,0.0f);
			break;
		case (2): // Rotate vertex colors
   			sprintf(msgString, "%sColor:(%s)(%s)(%s)(%s)",msgString,szColor2,szColor0,szColor3,szColor1);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor[2], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor[1], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, fZValue[3]),(1.0f / fZValue[3]), dwColor[3], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor[2], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, fZValue[0]),(1.0f / fZValue[0]), dwColor[0], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor[1], 0, 0.0f,0.0f);
			break;
		case (3): // Rotate vertex colors
   			sprintf(msgString, "%sColor:(%s)(%s)(%s)(%s)",msgString,szColor1,szColor3,szColor0,szColor2);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor[1], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor[2], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, fZValue[3]),(1.0f / fZValue[3]), dwColor[0], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor[1], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, fZValue[0]),(1.0f / fZValue[0]), dwColor[3], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor[2], 0, 0.0f,0.0f);
			break;
		case (4): // Rotate vertex colors
   			sprintf(msgString, "%sColor:(%s)(%s)(%s)(%s)",msgString,szColor3,szColor2,szColor1,szColor0);

			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor[3], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor[0], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f, 265.5f + (float)m_vpTest.Y, fZValue[3]),(1.0f / fZValue[3]), dwColor[1], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,   9.5f + (float)m_vpTest.Y, fZValue[2]),(1.0f / fZValue[2]), dwColor[3], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f,   9.5f + (float)m_vpTest.Y, fZValue[0]),(1.0f / fZValue[0]), dwColor[2], 0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 265.5f, 265.5f + (float)m_vpTest.Y, fZValue[1]),(1.0f / fZValue[1]), dwColor[0], 0, 0.0f,0.0f);
			break;
	}
}

//************************************************************************
// Internal API:    DrawTriangle
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CPerspectiveTest::DrawTriangle(int nTest)
{
	float fZValue[3];

	// Setup the mesh
	switch (nTest)
	{
		case 1:
			fZValue[0] = 0.99f;
			fZValue[1] = 0.01f;
			fZValue[2] = 0.01f;
			break;
		case 11:
			fZValue[0] = 0.01f;
			fZValue[1] = 0.99f;
			fZValue[2] = 0.99f;
			break;
		default:
			fZValue[0] = 1.0f - (0.1f * (nTest-1));
			fZValue[1] = 0.1f * (nTest-1);
			fZValue[2] = 0.1f * (nTest-1);
			break;
	}

	sprintf(msgString, "%sZval:(%.1f)(%.1f)(%.1f), ",msgString,fZValue[0],fZValue[2],fZValue[1]);

    if (m_ModeOptions.fTextures)
    {
	    int nScale = 1;
	    float fScale= (1.0f * nScale) - 0.001f;

        sprintf(msgString, "%sMap:(0,0.5)(1,0)(1,1)",msgString);

	    VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 128.0f,  0.0f,fZValue[0]),(1.0f / fZValue[0]), RGBA_MAKE(255,255,255,255),0, 0.000f,(fScale/2));
	    VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 256.0f,256.0f,fZValue[1]),(1.0f / fZValue[1]), RGBA_MAKE(255,255,255,255),0, fScale,0.000f);
	    VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.0f,256.0f,fZValue[2]),(1.0f / fZValue[2]), RGBA_MAKE(255,255,255,255),0, fScale,fScale);
    }
    else
    {
        sprintf(msgString, "%sColor:(Green)(Red)(Blue)",msgString);

        VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 128.0f,  0.0f,fZValue[0]),(1.0f / fZValue[0]), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
	    VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 256.0f,256.0f,fZValue[1]),(1.0f / fZValue[1]), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
	    VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.0f,256.0f,fZValue[2]),(1.0f / fZValue[2]), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\perspective\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=perspect
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_perspc.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\flags.cpp ===
// FILE:        flags.cpp
// DESC:        flags class methods
// AUTHOR:      Todd M. Frost
// COMMENTS:

//#include "windows.h"
#include "d3dlocus.h"
#include "flags.h"

#ifdef CLASSNAME
#undef CLASSNAME
#endif
#define CLASSNAME TEXT("CFlags")

// NAME:        CFlags()
// DESC:        constructor for flags class
// INPUT:       none
// OUTPUT:      none

CFlags::CFlags(VOID)
{
    m_dwCurrent = (DWORD) 0;
    m_dwSaved = (DWORD) 0;
}

// NAME:        ~CFlags()
// DESC:        destructor for flags class
// INPUT:       none
// OUTPUT:      none

CFlags::~CFlags(VOID)
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\perspective\exe\sources.inc ===
TARGETNAME=perspect
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_perspc.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\perspective\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_perspc
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    color.cpp \
    drawmesh.cpp \
    perspective.cpp \
    texture.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\attenfvfls.cpp ===
// FILE:        attenfvfls.cpp
// DESC:        attenuate class methods for point sprite conformance test
// AUTHOR:      Todd M. Frost
// COMMENTS:    D3DFVF_LVERTEX | D3DFVF_PSIZE

#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "PointSprite.h"

// NAME:        CSpriteAttenuateFVFLS()
// DESC:        constructor for sprite attenuate class (D3DFVF_LVERTEX | D3DFVF_PSIZE)
// INPUT:       none
// OUTPUT:      none

CSpriteAttenuateFVFLS::CSpriteAttenuateFVFLS(VOID)
{
    m_szTestName=TEXT("Point sprite attenuation (D3DFVF_LVERTEX | D3DFVF_PSIZE)");
    m_szCommandKey=TEXT("AttenuateFVFLS");

    m_dvPointSizeMax = 0.0f;

    m_LineOfSight.x = 0.0f;
    m_LineOfSight.y = 0.0f;
    m_LineOfSight.z = 0.0f;

    memset(m_Coefficients, 0, NCSETS*sizeof(COEFFDATA));
}

// NAME:        ~CSpriteAttenuateFVFLS()
// DESC:        destructor for sprite attenuate class (D3DFVF_LVERTEX | D3DFVF_PSIZE)
// INPUT:       none
// OUTPUT:      none

CSpriteAttenuateFVFLS::~CSpriteAttenuateFVFLS(VOID)
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CSpriteAttenuateFVFLS::CommandLineHelp(void)
{
    CSprite::CommandLineHelp();
//    WriteCommandLineHelp("$yinvalid: $wrun invalid parameter tests$c($wYes$c/No)");
    return;
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      appropriate D3DTESTINIT code

UINT CSpriteAttenuateFVFLS::TestInitialize(VOID)
{
    double dTemp;
    D3DVECTOR V;
    UINT uResult = CSprite::TestInitialize();

	// Although this values is set and used to calculate the coefficients
	// It will not be used by the test as the point size is passed with the 
	// vertex and is set in the Execute section of this test.
    m_Sprite.PointSize.f = 1.0f;//m_Sprite.PointSizeMax.f;

    V.x = m_At.x - m_From.x;
    V.y = m_At.y - m_From.y;
    V.z = m_At.z - m_From.z;
    dTemp = sqrt((double) (V.x*V.x + V.y*V.y + V.z*V.z));
    m_LineOfSight.x = (D3DVALUE) (V.x/dTemp);
    m_LineOfSight.y = (D3DVALUE) (V.y/dTemp);
    m_LineOfSight.z = (D3DVALUE) (V.z/dTemp);

    // Point Sprite scale formula 
	// Ss = Vh * Si * sqrt( 1/(A + B*De + C*(De*De) )
	// Si is the per vertex value or the RS point size

    // constant: a = ((Si*Vh)/Ss)**2
    //           This means that A will cause the point sprite to be max size.

    m_Coefficients[0].Ka.f =  ((m_Sprite.PointSize.f*m_ViewportCenter.y*2)/m_Sprite.PointSizeMax.f);//(m_ViewportCenter.y/5.0f) * (m_ViewportCenter.y/5.0f);
	m_Coefficients[0].Ka.f *= m_Coefficients[0].Ka.f;
	m_Coefficients[0].Kb.f = 0.0f;
	m_Coefficients[0].Kc.f = 0.0f;
        
    // linear: b = ((Si*Vh)/Ss)**2
    //         This causes the point sprite to be max size when De = 1;

    m_Coefficients[1].Ka.f = 0.0f;
	m_Coefficients[1].Kb.f = ((m_Sprite.PointSize.f*m_ViewportCenter.y*2)/m_Sprite.PointSizeMax.f);
	m_Coefficients[1].Kb.f *= m_Coefficients[1].Kb.f;
	m_Coefficients[1].Kc.f = 0.0f;    
    
    // quadratic: c = 1
    //            sqrt(1/(1.75*d*d))

    m_Coefficients[2].Ka.f = 0.0f;
	m_Coefficients[2].Kb.f = 0.0f;
	m_Coefficients[2].Kc.f = 1.75f;   

    // full: a = 0.514, b = 0.514, c = 0.514
    //      sqrt( 1/( 0.514 + (0.514*d) + (0.514*(d*d)) ) )

	m_Coefficients[3].Ka.f = 0.514f;
	m_Coefficients[3].Kb.f = 0.514f;
    m_Coefficients[3].Kc.f = 0.514f;

    m_nVariationsPerFormat *= NCSETS;
    SetTestRange((UINT) 1, (UINT) (m_nFormats*m_nVariationsPerFormat));

    SetRenderState(D3DRS_POINTSCALEENABLE, (DWORD) TRUE);

#ifndef UNDER_XBOX
    if (!m_Flags.bCheck(VERTEXPOINTSIZE) && !m_Flags.bCheck(INVALID))
        uResult = D3DTESTINIT_SKIPALL;
#endif

    return uResult;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test is executed successfully
//              false....otherwise

bool CSpriteAttenuateFVFLS::ExecuteTest(UINT uTest)
{
    bool bResult = true;
    D3DVALUE dvDistance, dvT;
    UINT uSet, uLocations;
   
	uLocations = m_nVariationsPerFormat/NCSETS;
    dvT = (D3DVALUE) ((uTest - 1) % uLocations) / (D3DVALUE) (uLocations - 1);
    dvDistance = dvT*((m_dvFar +1.0f ) - 2.0f*EPSILON);	// pick a range that culls front and back
    uSet = (UINT) ((uTest - 1) / uLocations) % NCSETS;

    m_Sprite.Ka.f = m_Coefficients[uSet].Ka.f;
    m_Sprite.Kb.f = m_Coefficients[uSet].Kb.f;
    m_Sprite.Kc.f = m_Coefficients[uSet].Kc.f;

    if (!CSprite::ExecuteTest(uTest))
        return false;

    sprintf(m_szBuffer, "(Ka,Kb,Kc)=(%f,%f,%f), distance %f",
            m_Sprite.Ka.f, m_Sprite.Kb.f, m_Sprite.Kc.f, dvDistance);
    BeginTestCase(m_szBuffer);

    SwitchAPI((UINT)m_fFrame);

    m_pDevice->SetViewport(&m_vpFull);
    m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(74, 150, 202), 1.0f, 0);

    m_pDevice->SetViewport(&m_vpTest);

    ClearFrame();

    if (BeginScene())
    {
        DWORD dwFormat = MYD3DFVF_LSVERTEX;
        MYD3DLSVERTEX Vertex;

        Vertex.dvX = m_From.x + EPSILON + dvDistance*m_LineOfSight.x;
        Vertex.dvY = m_From.y + EPSILON + dvDistance*m_LineOfSight.y;
        Vertex.dvZ = m_From.z + EPSILON + dvDistance*m_LineOfSight.z;
        Vertex.dcColor = m_Flags.bCheck(TEXTUREON) ? m_dcBackground : D3DCOLOR_RGBA(0,255,0,255);
        Vertex.dcSpecular = m_dcBackground;
        Vertex.dvTU = 0.0f;
        Vertex.dvTV = 0.0f;
#ifndef UNDER_XBOX
        Vertex.dvS = 2.0f;// A non-zero sensible value Chosen not to be 1;
#else

        m_pDevice->SetRenderState(D3DRS_POINTSIZE, F2DW(2.0f));
#endif

        if (!RenderPrimitive(D3DPT_POINTLIST, dwFormat, &Vertex, (DWORD) 1))
        {
            WriteToLog("RenderPrimitive() failed.\n");
            bResult = false;
        }

#ifdef UNDER_XBOX
        m_pDevice->SetRenderState(D3DRS_POINTSIZE, F2DW(1.0f));
#endif

        // Display the adapter mode
        ShowDisplayMode();

        // Display the frame rate
        ShowFrameRate();

        // Display the console
        m_pDisplay->ShowConsole();

        if (!EndScene())
        {
            WriteToLog("EndScene() failed.\n");
            bResult = false;
        }
    }
    else
    {
        WriteToLog("BeginScene() failed.\n");
        bResult = false;
    }

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

//    return bResult;
    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\perspective\texture.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Perspective.h"

//************************************************************************
// Perspective Texture Test functions

CTextureTest::CTextureTest()
{
	m_szTestName = TEXT("Perspective Texture");
	m_szCommandKey = TEXT("Texture");

    m_ModeOptions.fTextures = true;
}

CTextureTest::~CTextureTest()
{
}

UINT CTextureTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

	// Setup the Test range
	SetTestRange(1, (MAX_GRID_TESTS * 4) + MAX_TRI_TESTS);

	// Check the caps we are interested in
	DWORD dwTextureCaps = m_d3dcaps.TextureCaps;

	// Check the appropriate Texture cap
	if (!(dwTextureCaps & D3DPTEXTURECAPS_PERSPECTIVE))
	{
		WriteToLog("Device capability not supported: Texture Perspective.\n");
		return D3DTESTINIT_SKIPALL;
	}

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	// Setup the colors for the Stripes array
//	D3DCOLOR		Stripes[8];

	Stripes[0] = RGBA_MAKE(255,255,255,255);// White
	Stripes[1] = RGBA_MAKE(255,0,0,255);	// Red
	Stripes[2] = RGBA_MAKE(0,255,0,255);	// Green
	Stripes[3] = RGBA_MAKE(0,0,255,255);	// Blue
	Stripes[4] = RGBA_MAKE(255,255,0,255);	// Yellow
	Stripes[5] = RGBA_MAKE(255,0,255,255);	// Magenta
	Stripes[6] = RGBA_MAKE(0,255,255,255);	// Cyan
	Stripes[7] = RGBA_MAKE(128,128,128,255);// Grey

	// Create the stripe image data
//    CImageLoader    Image;

//    pImage = Image.LoadStripes(64,64,8,Stripes,false); 

	return D3DTESTINIT_RUN;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\batch.cpp ===
// FILE:        batch.cpp
// DESC:        batch methods for point sprite conformance test
// AUTHOR:      Anthony Clarke
// COMMENTS:    The idea behind this test is to check that points sprites
//				are render correctly when changes occur in both
//				render state and vertex data.


#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "PointSprite.h"

MYD3DTLVERTEX g_Vertices[4] = 
{
    { 128,  172, .5, 1, D3DCOLOR_RGBA(255, 0, 0, 255), D3DCOLOR_RGBA(0, 0, 0, 255), 0, 1 },
    { 128,  108, .5, 1, D3DCOLOR_RGBA(0, 255, 0, 255), D3DCOLOR_RGBA(0, 0, 0, 255), 0, 0 },
	{ 192,  172, .5, 1, D3DCOLOR_RGBA(255, 255, 255, 255), D3DCOLOR_RGBA(255, 255, 255, 255), 1, 1 },
    { 192,  108, .5, 1, D3DCOLOR_RGBA(0, 0, 255, 255), D3DCOLOR_RGBA(255, 255, 255, 255), 1, 0 }
};



// NAME:        CSpriteBatch()
// DESC:        
// INPUT:       none
// OUTPUT:      none

CSpriteBatch::CSpriteBatch(VOID)
{
    m_szTestName=TEXT("Point sprite batches");
    m_szCommandKey=TEXT("Batch");

    m_dvPointSizeMax = 0.0f;
	m_fChangeMode = false;
	return;
}

// NAME:        CSpriteBatch()
// DESC:        
// INPUT:       none
// OUTPUT:      none

CSpriteBatch::~CSpriteBatch(VOID)
{
	return;
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CSpriteBatch::CommandLineHelp(void)
{
    CSprite::CommandLineHelp();
	return;
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      appropriate D3DTESTINIT code

UINT CSpriteBatch::TestInitialize(VOID)
{   
	UINT uResult = CSprite::TestInitialize();
    	
	m_nVariationsPerFormat *= NCLIPTESTS / NUMPOINTSPRITES_ONSCREEN;
    m_nFormats++; //This one extra format is the texture off format.
	SetTestRange((UINT) 1, m_nVariationsPerFormat * m_nFormats);
	SetRenderState(D3DRS_POINTSCALEENABLE, (DWORD)FALSE);
    return uResult;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test is executed successfully
//              false....otherwise

bool CSpriteBatch::ExecuteTest(UINT uTest)
{
    bool bResult = true;
	int iFormat;

	iFormat = uTest / m_nVariationsPerFormat;
	// This is so the final no texture format is tested
	if (iFormat == m_nFormats-2) 
		 m_Flags.vClear(TEXTUREON);
    
	// every second sample change the shade mode	
	if (!(uTest % 2))
		m_fChangeMode = !m_fChangeMode;
	if (m_fChangeMode)
	{
		m_Flags.vSet(FLATSHADE);
	}
	else
	{		
		m_Flags.vClear(FLATSHADE);
	}

	if (!CSprite::ExecuteTest(uTest))
        return false;

    sprintf(m_szBuffer, "Sprite batch");
    BeginTestCase(m_szBuffer);

    SwitchAPI((UINT)m_fFrame);

    m_pDevice->SetViewport(&m_vpFull);
    m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(74, 150, 202), 1.0f, 0);

    m_pDevice->SetViewport(&m_vpTest);

    ClearFrame();

	//// enable(odd)/disable(even) point sprites	
	m_dwPointSpriteEnable = (uTest & 1);
    SetRenderState(D3DRS_POINTSPRITEENABLE, (DWORD) m_dwPointSpriteEnable);

    if (BeginScene())
    {
        DWORD dwFormat = MYD3DFVF_TLVERTEX;
        MYD3DTLVERTEX Vertex;
		MYD3DTLVERTEXNOTEX VertexNoTex;

        Vertex.dvSX = 0.0;
        Vertex.dvSY = 0.0;
        Vertex.dvSZ = m_ViewportCenter.z;
        if (m_Flags.bCheck(TEXTUREON))
		{
			Vertex.dcColor = m_dcBackground;
			Vertex.dcSpecular = m_dcBackground;
		}
		else
		{
			Vertex.dcColor = D3DCOLOR_RGBA(0,255,0,255);
			Vertex.dcSpecular = D3DCOLOR_RGBA(255,255,255,255);
		}
		Vertex.dvRHW = 1.0f;
        Vertex.dvTU = 0.0f;
        Vertex.dvTV = 0.0f;		
		m_Sprite.PointSize.f = m_dvPointSizeMax;
		
		//With Texture Co-ordinates
		if (!DrawPointSprites(&Vertex, dwFormat, (uTest-1)%NCLIPTESTS, 2))
		{
			WriteToLog("DrawPointSprites FVF with Texture Co-Ords failed.\n");
			bResult = false;
		}
		
		// Now render a vertex just a vertex not a point sprite
		m_Sprite.PointSize.f = 1;
		if (!DrawPointSprites(&Vertex, dwFormat, (uTest+1)%NCLIPTESTS, 1))
		{
			WriteToLog("DrawPointSprites rendering a vertex FVF with Texture Co-Ords failed.\n");
			bResult = false;
		}

        SetRenderState(D3DRS_POINTSPRITEENABLE, (DWORD) FALSE);

		//Centre primative
		if (!RenderPrimitive(D3DPT_TRIANGLESTRIP, MYD3DFVF_TLVERTEX, g_Vertices, 4))
		{
			WriteToLog("RenderPrimitive() D3DPT_TRIANGLESTRIP failed.\n");
			bResult = false;
		}

        SetRenderState(D3DRS_POINTSPRITEENABLE, (DWORD) m_dwPointSpriteEnable);

		//Without Texture Co-ordinates
		//VertexNoTex
		dwFormat = MYD3DFVF_TLVERTEX_NOTEX;

		VertexNoTex.dvSX = 0.0;
        VertexNoTex.dvSY = 0.0;
        VertexNoTex.dvSZ = m_ViewportCenter.z;
        if (m_Flags.bCheck(TEXTUREON))
		{
			VertexNoTex.dcColor = m_dcBackground;
			VertexNoTex.dcSpecular = m_dcBackground;
		}
		else
		{
			VertexNoTex.dcColor = D3DCOLOR_RGBA(255,0,0,255);
			VertexNoTex.dcSpecular = D3DCOLOR_RGBA(255,255,255,255);
		}
		VertexNoTex.dvRHW = 1.0f;    
		m_Sprite.PointSize.f = m_dvPointSizeMax;

		if (!DrawPointSprites(&VertexNoTex, dwFormat, (uTest+2)%NCLIPTESTS, 2))
		{
			WriteToLog("DrawPointSprites FVF with out Texture Co-Ords failed.\n");
			bResult = false;
		}

		// Now render a vertex just a vertex not a point sprite
		m_Sprite.PointSize.f = 1;
		if (!DrawPointSprites(&VertexNoTex, dwFormat, (uTest+3)%NCLIPTESTS, 1))
		{
			WriteToLog("DrawPointSprites rendering a vertex FVF with out Texture Co-Ords failed.\n");
			bResult = false;
		}

        // Display the adapter mode
        ShowDisplayMode();

        // Display the frame rate
        ShowFrameRate();

        // Display the console
        m_pDisplay->ShowConsole();

        if (!EndScene())
        {
            WriteToLog("EndScene() failed.\n");
            bResult = false;
        }
    }
    else
    {
        WriteToLog("BeginScene() failed.\n");
        bResult = false;
    }

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

//    return bResult;
    return false;
}

bool CSpriteBatch::ProcessFrame(void)
{
	DWORD dwTextureOn, dwShadeMode;
	bool fResult;

	fResult = CSprite::ProcessFrame();
	if (!fResult)
	{
		//TODO: m_dwPointSpriteEnable, this should be removed and GetRenderState
		// added to the framework....

		if (m_Flags.bCheck(TEXTUREON))
			dwTextureOn = 1;
		else
			dwTextureOn = 0;
		
		if (m_Flags.bCheck(FLATSHADE))
			dwShadeMode = D3DSHADE_FLAT;
		else
			dwShadeMode = D3DSHADE_GOURAUD;

		WriteToLog("RenderStates: ShadeMode %lu; PointSpriteEnable %lu; TexturesOn %lu\n", dwShadeMode, m_dwPointSpriteEnable, dwTextureOn);
	}
	return fResult;
}

// NAME:        DrawPointSprites()
// DESC:        simple wraper for drawing point sprites at increamental locations
// INPUT:       Vertex...  The point sprite vertex
//				dwFormat... The format of the vertex
//				StartPosNum... The start index into the NCLIPTESTS array
//				NumToDraw... The number of point sprites to draw.
// OUTPUT:      true.....if test is executed successfully
//              false....otherwise

bool CSpriteBatch::DrawPointSprites(LPVOID Vertex, DWORD dwFormat, UINT StartPosNum, UINT NumToDraw)
{
	int i;
	D3DVALUE *dvSX, *dvSY;

	if (!(D3DFVF_XYZRHW | dwFormat))
	{
		WriteToLog("DrawPointSprite failed. Points must be TnL\n");
		return false;
	}
	dvSX = (D3DVALUE*)Vertex;
	dvSY = (D3DVALUE*)(((BYTE*)Vertex)+sizeof(D3DVALUE));
	for (i = 0; i < (int)NumToDraw; ++i)
	{
		SetPosition((StartPosNum+i)%NCLIPTESTS, dvSX, dvSY);
		SetRenderState(D3DRS_POINTSIZE, F2DW(m_Sprite.PointSize.f) );
		if (!RenderPrimitive(D3DPT_POINTLIST, dwFormat, Vertex, (DWORD) 1))
		{
			WriteToLog("RenderPrimitive() D3DPT_POINTLIST failed.\n");
			return false;
		}
		m_Sprite.PointSize.f /= 2.0f;
	}
	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\attenfvfl.cpp ===
// FILE:        attenfvfl.cpp
// DESC:        attenuate class methods for point sprite conformance test
// AUTHOR:      Todd M. Frost
// COMMENTS:    D3DFVF_LVERTEX

#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "PointSprite.h"

// NAME:        CSpriteAttenuateFVFL()
// DESC:        constructor for sprite attenuate class (D3DFVF_LVERTEX)
// INPUT:       none
// OUTPUT:      none

CSpriteAttenuateFVFL::CSpriteAttenuateFVFL(VOID)
{
    m_szTestName=TEXT("Point sprite attenuation (D3DFVF_LVERTEX)");
    m_szCommandKey=TEXT("AttenuateFVFL");

    m_dvPointSizeMax = 0.0f;

    m_LineOfSight.x = 0.0f;
    m_LineOfSight.y = 0.0f;
    m_LineOfSight.z = 0.0f;

    memset(m_Coefficients, 0, NCSETS*sizeof(COEFFDATA));
}

// NAME:        ~CSpriteAttenuateFVFL()
// DESC:        destructor for sprite attenuate class (D3DFVF_LVERTEX)
// INPUT:       none
// OUTPUT:      none

CSpriteAttenuateFVFL::~CSpriteAttenuateFVFL(VOID)
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CSpriteAttenuateFVFL::CommandLineHelp(void)
{
    CSprite::CommandLineHelp();
	return;
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      appropriate D3DTESTINIT code

UINT CSpriteAttenuateFVFL::TestInitialize(VOID)
{
    double dTemp;
    D3DVECTOR V;
    UINT uResult = CSprite::TestInitialize();

    //This is used to set SetRenderState(D3DRS_POINTSIZE, m_Sprite.PointSize.dw);
	//and remains constant for this test
	m_Sprite.PointSize.f = 1.0f;

    V.x = m_At.x - m_From.x;
    V.y = m_At.y - m_From.y;
    V.z = m_At.z - m_From.z;
    dTemp = sqrt((double) (V.x*V.x + V.y*V.y + V.z*V.z));
    m_LineOfSight.x = (D3DVALUE) (V.x/dTemp);
    m_LineOfSight.y = (D3DVALUE) (V.y/dTemp);
    m_LineOfSight.z = (D3DVALUE) (V.z/dTemp);

	// Point Sprite scale formula 
	// Ss = Vh * Si * sqrt( 1/(A + B*De + C*(De*De) )
	// Si is the per vertex value or the RS point size

    // constant: a = ((Si*Vh)/Ss)**2
    //           This means that A will cause the point sprite to be max size.

    m_Coefficients[0].Ka.f =  ((m_Sprite.PointSize.f*m_ViewportCenter.y*2)/m_Sprite.PointSizeMax.f);//(m_ViewportCenter.y/5.0f) * (m_ViewportCenter.y/5.0f);
	m_Coefficients[0].Ka.f *= m_Coefficients[0].Ka.f;
	m_Coefficients[0].Kb.f = 0.0f;
	m_Coefficients[0].Kc.f = 0.0f;
        
    // linear: b = ((Si*Vh)/Ss)**2
    //         This causes the point sprite to be max size when De = 1;

    m_Coefficients[1].Ka.f = 0.0f;
	m_Coefficients[1].Kb.f = ((m_Sprite.PointSize.f*m_ViewportCenter.y*2)/m_Sprite.PointSizeMax.f);
	m_Coefficients[1].Kb.f *= m_Coefficients[1].Kb.f;
	m_Coefficients[1].Kc.f = 0.0f;    
    
    // quadratic: c = 1
    //            sqrt(1/(1.75*d*d))

    m_Coefficients[2].Ka.f = 0.0f;
	m_Coefficients[2].Kb.f = 0.0f;
	m_Coefficients[2].Kc.f = 1.75f;   

    // full: a = 0.514, b = 0.514, c = 0.514
    //      sqrt( 1/( 0.514 + (0.514*d) + (0.514*(d*d)) ) )

	m_Coefficients[3].Ka.f = 0.514f;
	m_Coefficients[3].Kb.f = 0.514f;
    m_Coefficients[3].Kc.f = 0.514f;

    m_nVariationsPerFormat *= NCSETS;
    SetTestRange((UINT) 1, (UINT) (m_nFormats*m_nVariationsPerFormat));
	
    SetRenderState(D3DRS_POINTSCALEENABLE, (DWORD) TRUE);
    return uResult;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test is executed successfully
//              false....otherwise

bool CSpriteAttenuateFVFL::ExecuteTest(UINT uTest)
{
    bool bResult = true;
    D3DVALUE dvDistance, dvT;
    UINT uSet, uLocations;
   
	uLocations = m_nVariationsPerFormat/NCSETS;
    dvT = (D3DVALUE) ((uTest - 1) % uLocations) / (D3DVALUE) (uLocations - 1);
    dvDistance = dvT*((m_dvFar +1.0f ) - 2.0f*EPSILON);	// pick a range that culls front and back
    uSet = (UINT) ((uTest - 1) / uLocations) % NCSETS;

    m_Sprite.Ka.f = m_Coefficients[uSet].Ka.f;
    m_Sprite.Kb.f = m_Coefficients[uSet].Kb.f;
    m_Sprite.Kc.f = m_Coefficients[uSet].Kc.f;
     
    if (!CSprite::ExecuteTest(uTest))
        return false;

    sprintf(m_szBuffer, "(Ka,Kb,Kc)=(%f,%f,%f), distance %f",
            m_Sprite.Ka.f, m_Sprite.Kb.f, m_Sprite.Kc.f, dvDistance);
    BeginTestCase(m_szBuffer);

    SwitchAPI((UINT)m_fFrame);

    m_pDevice->SetViewport(&m_vpFull);
    m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(74, 150, 202), 1.0f, 0);

    m_pDevice->SetViewport(&m_vpTest);

    ClearFrame();

    if (BeginScene())
    {
        DWORD dwFormat = MYD3DFVF_LVERTEX;
        MYD3DLVERTEX Vertex;

        Vertex.dvX = m_From.x + EPSILON + dvDistance*m_LineOfSight.x;
        Vertex.dvY = m_From.y + EPSILON + dvDistance*m_LineOfSight.y;
        Vertex.dvZ = m_From.z + EPSILON + dvDistance*m_LineOfSight.z;
        Vertex.dcColor = m_Flags.bCheck(TEXTUREON) ? m_dcBackground : D3DCOLOR_RGBA(0,255,0,255);
        Vertex.dcSpecular = m_dcBackground;
        Vertex.dvTU = 0.5f;
        Vertex.dvTV = 0.5f;

        if (!RenderPrimitive(D3DPT_POINTLIST, dwFormat, &Vertex, (DWORD) 1))
        {
            WriteToLog("RenderPrimitive() failed.\n");
            bResult = false;
        }

        // Display the adapter mode
        ShowDisplayMode();

        // Display the frame rate
        ShowFrameRate();

        // Display the console
        m_pDisplay->ShowConsole();

        if (!EndScene())
        {
            WriteToLog("EndScene() failed.\n");
            bResult = false;
        }
    }
    else
    {
        WriteToLog("BeginScene() failed.\n");
        bResult = false;
    }

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

//    return bResult;
    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\modulex.h ===
#define PREPEND_MODULE(Suffix) pointsprite##Suffix
#define MODULE_STRING "pointsprite"
#pragma comment(linker, "/include:_pointsprite_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by PointSprite.rc
//

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NO_MFC                     1
#define _APS_NEXT_RESOURCE_VALUE        101
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1000
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\scalefvfls.cpp ===
// FILE:        scalefvfls.cpp
// DESC:        scale class methods for point sprite conformance test
// AUTHOR:      Todd M. Frost
// COMMENTS:    D3DFVF_LVERTEX | D3DFVF_PSIZE

#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "PointSprite.h"

// NAME:        CSpriteScaleFVFLS()
// DESC:        constructor for sprite scale class (D3DFVF_LVERTEX | D3DFVF_PSIZE)
// INPUT:       none
// OUTPUT:      none

CSpriteScaleFVFLS::CSpriteScaleFVFLS(VOID)
{
    m_szTestName=TEXT("Point sprite scale (D3DFVF_LVERTEX | D3DFVF_PSIZE)");
    m_szCommandKey=TEXT("ScaleFVFLS");

    m_dvPointSizeMax = 0.0f;
}

// NAME:        ~CSpriteScaleFVFLS()
// DESC:        destructor for sprite scale class (D3DFVF_LVERTEX | D3DFVF_PSIZE)
// INPUT:       none
// OUTPUT:      none

CSpriteScaleFVFLS::~CSpriteScaleFVFLS(VOID)
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CSpriteScaleFVFLS::CommandLineHelp(void)
{
    CSprite::CommandLineHelp();
//    WriteCommandLineHelp("$yinvalid: $wrun invalid parameter tests$c($wYes$c/No)");
	return;
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      appropriate D3DTESTINIT code

UINT CSpriteScaleFVFLS::TestInitialize(VOID)
{
    UINT uResult = CSprite::TestInitialize();

    m_Sprite.PointSize.f = 1.0f;
    SetTestRange((UINT) 1, (UINT) (m_nFormats*m_nVariationsPerFormat));

#ifndef UNDER_XBOX
    if (!m_Flags.bCheck(VERTEXPOINTSIZE) && !m_Flags.bCheck(INVALID))
        uResult = D3DTESTINIT_SKIPALL;
#endif

    return uResult;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test is executed successfully
//              false....otherwise

bool CSpriteScaleFVFLS::ExecuteTest(UINT uTest)
{
    bool bResult = true;
    D3DVALUE dvS, dvT;

    dvT = ((D3DVALUE) ((uTest - 1) % m_nVariationsPerFormat))/((D3DVALUE) (m_nVariationsPerFormat - 1));
    dvS = dvT*(m_dvPointSizeMax*1.5f);

    if (!CSprite::ExecuteTest(uTest))
        return false;

    sprintf(m_szBuffer, "Point size (vertex):  %f", dvS);
    BeginTestCase(m_szBuffer);

    SwitchAPI((UINT)m_fFrame);

    m_pDevice->SetViewport(&m_vpFull);
    m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(74, 150, 202), 1.0f, 0);

    m_pDevice->SetViewport(&m_vpTest);

    ClearFrame();

    if (BeginScene())
    {
        DWORD dwFormat = MYD3DFVF_LSVERTEX;
        MYD3DLSVERTEX Vertex;

        Vertex.dvX = 0.0f;
        Vertex.dvY = 0.0f;
        Vertex.dvZ = 0.0f;
#ifndef UNDER_XBOX
        Vertex.dvS = dvS;
#endif
        Vertex.dcColor = m_dcBackground;
        Vertex.dcSpecular = m_dcBackground;
        Vertex.dvTU = 0.0f;
        Vertex.dvTV = 0.0f;

#ifdef UNDER_XBOX
        m_pDevice->SetRenderState(D3DRS_POINTSIZE, F2DW(dvS));
#endif

        if (!RenderPrimitive(D3DPT_POINTLIST, dwFormat, &Vertex, (DWORD) 1))
        {
            WriteToLog("RenderPrimitive() failed.\n");
            bResult = false;
        }

#ifdef UNDER_XBOX
        m_pDevice->SetRenderState(D3DRS_POINTSIZE, F2DW(1.0f));
#endif

        // Display the adapter mode
        ShowDisplayMode();

        // Display the frame rate
        ShowFrameRate();

        // Display the console
        m_pDisplay->ShowConsole();

        if (!EndScene())
        {
            WriteToLog("EndScene() failed.\n");
            bResult = false;
        }
    }
    else
    {
        WriteToLog("BeginScene() failed.\n");
        bResult = false;
    }

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

//    return bResult;
    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\PointSprite.cpp ===
// FILE:        pointsprite.cpp
// DESC:        point sprite class methods for point sprite conformance test
// AUTHOR:      Todd M. Frost
// COMMENTS:

#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "PointSprite.h"
//#include "testutils.h"
//#include "cimageloader.h"
//#include "ddraw.h"

#ifndef RGB_MAKE
#define RGB_MAKE(r, g, b) ((D3DCOLOR) (((r) << 16) | ((g) << 8) | (b)))
#endif

//CD3DWindowFramework   App;

// NAME:        fRed()
// DESC:        red function
// INPUT:       u....u texture coord
//              v....v texture coord
// OUTPUT:      2*sqrt((u-0.5)*(u-0.5) + (v-0.5)*(v-0.5))

FLOAT fRed(FLOAT u, FLOAT v)
{
	u -= 0.5f;
	v -= 0.5f;
	return (FLOAT) (2.0*sqrt(u*u + v*v));
}

// NAME:        fGreen()
// DESC:        green function
// INPUT:       u....u texture coord
//              v....v texture coord
// OUTPUT:      1 - 2*sqrt((u-0.5)*(u-0.5) + (v-0.5)*(v-0.5))

FLOAT fGreen(FLOAT u, FLOAT v)
{
	u -= 0.5f;
	v -= 0.5f;
	return (FLOAT) (1.0 - 2.0*sqrt(u*u + v*v));
}

// NAME:        fBlue()
// DESC:        blue function
// INPUT:       u....u texture coord
//              v....v texture coord
// OUTPUT:      2*sqrt(u*u + v*v) - 1

FLOAT fBlue(FLOAT u, FLOAT v)
{
	return (FLOAT) (2.0*sqrt(u*u + v*v) - 1.0);
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CSprite*        pSprite;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 7 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pSprite = new CSpriteAttenuateFVFL();
                break;
            case 1:
                pSprite = new CSpriteAttenuateFVFLS();
                break;
            case 2:
                pSprite = new CSpriteScaleFVFL();
                break;
            case 3:
                pSprite = new CSpriteScaleFVFLS();
                break;
            case 4:
                pSprite = new CSpriteScaleFVFTL();
                break;
            case 5:
                pSprite = new CSpriteScaleFVFTLS();
                break;
            case 6:
                pSprite = new CSpriteBatch();
                break;
        }

        if (!pSprite) {
            return FALSE;
        }

        // Initialize the scene
        if (!pSprite->Create(pDisplay)) {
            pSprite->Release();
            return FALSE;
        }

        bRet = pSprite->Exhibit(pnExitCode);

        bQuit = pSprite->AbortedExit();

        // Clean up the scene
        pSprite->Release();
    }

    return bRet;
}


// NAME:        CSprite()
// DESC:        constructor for sprite class
// INPUT:       none
// OUTPUT:      none

CSprite::CSprite(VOID)
{
    m_dcBackground = RGB_MAKE(255, 255, 255);

    m_dvAngle = 55.0f*pi/180.0f;
    m_dvFar = 90.0f;
    m_dvNear = 1.0f;

    m_At.x = 0.0f;
    m_At.y = 0.0f;
    m_At.z = 0.0f;

    m_From.x = 0.0f;
    m_From.y = 0.0f;
    m_From.z = -4.0f;

    m_Up.x = 0.0f;
    m_Up.y = 1.0f;
    m_Up.z = 0.0f;

    m_iFormat = (INT) NOFORMAT;
    m_nFormats = (INT) 0;
    m_pFormats = (INT *) NULL;

    m_nVariationsPerFormat = (UINT) 0;

//    m_pImage = NULL;

    m_pTexture = NULL;

    m_Sprite.Ka.f = 1.0f;           // default = 1.0f
    m_Sprite.Kb.f = 0.0f;           // default = 0.0f
    m_Sprite.Kc.f = 0.0f;           // default = 0.0f
    m_Sprite.PointSize.f = 1.0f;    // default = 1.0f
    m_Sprite.PointSizeMax.f = 1.0f; // default = 1.0f, range >= 0.0f
    m_Sprite.PointSizeMin.f = 1.0f; // default = 1.0f, range >= 0.0f

	m_ModeOptions.uMinDXVersion = 0x0800;	

    m_bExit = FALSE;
}

// NAME:        ~CSprite()
// DESC:        destructor for sprite class
// INPUT:       none
// OUTPUT:      none

CSprite::~CSprite(VOID)
{
//	delete m_pImage;
//	m_pImage = NULL;
    ReleaseTexture(m_pTexture);
    m_pTexture = NULL;
	free( m_pFormats );
	m_pFormats = NULL;
}


// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CSprite::CommandLineHelp(void)
{
//	WriteCommandLineHelp("$yvariations: $wvariations per texture $c(default=%d)", NVDEF);
//    WriteCommandLineHelp("$yvalidate: $wvalidate $c(On/$wOff$c)");
//    WriteCommandLineHelp("$ysymmetric: $wsymmetric $c($wOn$c/Off)");
//	WriteCommandLineHelp("$ytexoff: $wtexoff $c($wYes$c/No)");
//	WriteCommandLineHelp("$yflatshade: $wflatshade $c($wOn$c/Off)");
}


// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      appropriate D3DTESTINIT code

UINT CSprite::TestInitialize(VOID)
{
//    CImageLoader Loader;
//    DWORD dwFlags = (DDPF_PALETTEINDEXED1 |
//                     DDPF_PALETTEINDEXED2 |
//                     DDPF_PALETTEINDEXEDTO8 |
//                     DDPF_PALETTEINDEXED8);
    DWORD dwWidth = (DWORD) TEXTURE_WIDTH, dwHeight = (DWORD) TEXTURE_HEIGHT;
    UINT i, j;

    if (0x0800 > m_dwVersion)
        return D3DTESTINIT_SKIPALL;

    ProcessArgs();

//    for (m_nFormats = 0, i = 0; i < m_uCommonTextureFormats; i++)
//        if ((m_pCommonTextureFormats[i].ddpfPixelFormat.dwFlags & DDPF_RGB) &&
//            !(m_pCommonTextureFormats[i].ddpfPixelFormat.dwFlags & dwFlags))
//            m_nFormats++;
    m_nFormats = m_uCommonTextureFormats;

    if (0 == m_nFormats)
    {
        WriteToLog("Device does NOT support RGB texture formats.\n");
        return D3DTESTINIT_SKIPALL;
    }

    m_pFormats = (INT *) malloc(m_nFormats*sizeof(INT));
	for (j = 0, i = 0; i < m_uCommonTextureFormats; i++)
//        if ((m_pCommonTextureFormats[i].ddpfPixelFormat.dwFlags & DDPF_RGB) &&
//            !(m_pCommonTextureFormats[i].ddpfPixelFormat.dwFlags & dwFlags))
            if (j < (UINT)m_nFormats)
            {
                m_pFormats[j] = (INT) i;
                j++;
            }

	D3DCAPS8 Src;//, Ref;
    m_pSrcDevice8->GetDeviceCaps(&Src);
//    m_pRefDevice8->GetDeviceCaps(&Ref);
//    m_Sprite.PointSizeMax.f = (Src.MaxPointSize < Ref.MaxPointSize) ? Src.MaxPointSize : Ref.MaxPointSize;
    m_Sprite.PointSizeMax.f = Src.MaxPointSize;
    m_Flags.vSet(VERTEXPOINTSIZE);

#ifndef UNDER_XBOX
    if (!(Src.FVFCaps & D3DFVFCAPS_PSIZE))
#else
    if (Src.FVFCaps & D3DFVFCAPS_PSIZE)
    {
        Log(LOG_FAIL, TEXT("FVFCaps contains D3DFVFCAPS_PSIZE when D3DFVF_PSIZE is unsupported"));
    }
#endif
    {
        WriteToLog("Src device does not support point size in vertex data.\n");
        m_Flags.vClear(VERTEXPOINTSIZE);
    }

//    if (!(Ref.FVFCaps & D3DFVFCAPS_PSIZE))
//    {
//        WriteToLog("Ref device does not support point size in vertex data.\n");
//        m_Flags.vClear(VERTEXPOINTSIZE);
//    }
    
    if (!(m_Sprite.PointSizeMax.f > 1.0f))
    {
        WriteToLog("Device does NOT support point sprites.\n");

        if (m_Sprite.PointSizeMax.f < 1.0f)
            WriteToLog("Note:  dvMaxPointSize = %f (expected 1.0).\n", m_Sprite.PointSizeMax.f);

        return D3DTESTINIT_SKIPALL;
    }

	// find max point that can be contained within the port
    m_dvPointSizeMax = (D3DVALUE) ((m_pDisplay->GetWidth() > m_pDisplay->GetHeight()) ? m_pDisplay->GetHeight() : m_pDisplay->GetWidth());
    m_dvPointSizeMax = (m_Sprite.PointSizeMax.f < m_dvPointSizeMax) ? m_Sprite.PointSizeMax.f : m_dvPointSizeMax;

    m_ViewportCenter.x = (D3DVALUE) (m_pDisplay->GetWidth() >> 1);
    m_ViewportCenter.y = (D3DVALUE) (m_pDisplay->GetHeight() >> 1);
    m_ViewportCenter.z = (D3DVALUE) 0.5;

//    CHANNELDATA Data;
    Data.dwAlpha = (DWORD) 0;
    Data.dwRed = (DWORD) CIL_UNSIGNED;
    Data.dwGreen = (DWORD) CIL_UNSIGNED;
    Data.dwBlue = (DWORD) CIL_UNSIGNED;
    Data.fAlpha = NULL;

    if (m_Flags.bCheck(SYMMETRIC))
    {
        Data.fRed = fRed;
        Data.fGreen = fGreen;
        Data.fBlue = fRed;
    }
    else
    {
        Data.fRed = fRed;
        Data.fGreen = fGreen;
        Data.fBlue = fBlue;
    }

//    if (!(m_pImage = Loader.LoadChannelData(dwWidth, dwHeight, &Data)))
//    {
//        WriteToLog("Unable to load image.\n");
//        return D3DTESTINIT_ABORT;
//    }

    return D3DTESTINIT_RUN;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test is executed successfully
//              false....otherwise

bool CSprite::ExecuteTest(UINT uTest)
{
    bool bFound = false, bValid = true;
    int iFormat, iStage = 0;
    CHAR szBuffer[MAXBUFFER];

	iFormat = uTest / m_nVariationsPerFormat;
	if (iFormat < m_nFormats)
		bFound = true;

    if (!bFound)
        return false;

	if (m_Flags.bCheck(TEXTUREON))
	{
		if (iFormat != m_iFormat)
		{
//			DWORD dwFlags = CDDS_TEXTURE_VIDEO;
			DWORD dwWidth = (DWORD) TEXTURE_WIDTH, dwHeight = (DWORD) TEXTURE_HEIGHT;
            int nTextureFormat;

			m_iFormat = iFormat;
			nTextureFormat = m_pFormats[m_iFormat];

			ReleaseTexture(m_pTexture);
//##REVIEW: PointSprite doesn't like D3DFMT_DXT1 -- it gets drawn black
			if (!(m_pTexture = CreateChannelDataTexture(m_pDevice, dwWidth, dwHeight, &Data, m_fmtCommon[nTextureFormat])))
//			if (!(m_pTexture = CreateChannelDataTexture(m_pDevice, dwWidth, dwHeight, &Data, m_fmtCommon[iFormat])))
			{
				WriteToLog("Unable to create texture.\n");
				return false;
			}
		}
	}
	else
	{
		ReleaseTexture(m_pTexture);
        m_pTexture = NULL;
	}
    sprintf(szBuffer, "$y%f", m_Sprite.PointSize.f);
    WriteStatus("$gSize", szBuffer);
    sprintf(szBuffer, "$y%f", m_Sprite.PointSizeMin.f);
    WriteStatus("$gMin", szBuffer);
    sprintf(szBuffer, "$y%f", m_Sprite.PointSizeMax.f);
    WriteStatus("$gMax", szBuffer);
    sprintf(szBuffer, "$y%f", m_Sprite.Ka.f);
    WriteStatus("$gKa", szBuffer);
    sprintf(szBuffer, "$y%f", m_Sprite.Kb.f);
    WriteStatus("$gKb", szBuffer);
    sprintf(szBuffer, "$y%f", m_Sprite.Kc.f);
    WriteStatus("$gKc", szBuffer);

    SetRenderState(D3DRS_POINTSIZE, m_Sprite.PointSize.dw);
    SetRenderState(D3DRS_POINTSIZE_MIN, m_Sprite.PointSizeMin.dw);
    SetRenderState(D3DRS_POINTSCALE_A, m_Sprite.Ka.dw);
    SetRenderState(D3DRS_POINTSCALE_B, m_Sprite.Kb.dw);
    SetRenderState(D3DRS_POINTSCALE_C, m_Sprite.Kc.dw);

#ifdef UNDER_XBOX
    iStage = 3;
#endif // UNDER_XBOX

	if (m_Flags.bCheck(TEXTUREON))
	{
		SetTextureStageState(iStage, D3DTSS_ADDRESSU, (DWORD) D3DTADDRESS_CLAMP);
		SetTextureStageState(iStage, D3DTSS_ADDRESSV, (DWORD) D3DTADDRESS_CLAMP);
		SetTextureStageState(iStage, D3DTSS_MAGFILTER, (DWORD) TEXF_LINEAR);
		SetTextureStageState(iStage, D3DTSS_MINFILTER, (DWORD) TEXF_LINEAR);
		SetTextureStageState(iStage, D3DTSS_MIPFILTER, (DWORD) TEXF_NONE);
		SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_MODULATE);
		SetTextureStageState(iStage, D3DTSS_COLORARG1, (DWORD) D3DTA_TEXTURE);
		SetTextureStageState(iStage, D3DTSS_COLORARG2, (DWORD) D3DTA_DIFFUSE);
		SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_SELECTARG1);
		SetTextureStageState(iStage, D3DTSS_ALPHAARG1, (DWORD) D3DTA_TEXTURE);
		SetTextureStageState(iStage, D3DTSS_ALPHAARG2, (DWORD) D3DTA_DIFFUSE);
		SetTextureStageState(iStage, D3DTSS_TEXCOORDINDEX, (DWORD) 0);
		SetTexture(iStage, m_pTexture);
		iStage++;

#ifndef UNDER_XBOX
		SetTextureStageState(iStage, D3DTSS_COLOROP, (DWORD) D3DTOP_DISABLE);
		SetTextureStageState(iStage, D3DTSS_ALPHAOP, (DWORD) D3DTOP_DISABLE);
#endif // !UNDER_XBOX
	}
	else
	{
		SetTexture(iStage, NULL);
		iStage--;
	}
	
	if (m_Flags.bCheck(FLATSHADE))
	{
		SetRenderState(D3DRS_SHADEMODE, (DWORD)D3DSHADE_FLAT);
	}
	else
	{
		SetRenderState(D3DRS_SHADEMODE, (DWORD)D3DSHADE_GOURAUD);
	}

#ifndef UNDER_XBOX

    if (m_Flags.bCheck(VALIDATE))
    {
        DWORD dwPasses;
        HRESULT hResult;

        if (m_pSrcDevice8)
            if (D3D_OK != (hResult = m_pSrcDevice8->ValidateDevice(&dwPasses)))
            {
                WriteToLog("Src requires %d passes:  %X.\n",
                           dwPasses, hResult);
                bValid = false;
            }
    }

#endif // !UNDER_XBOX

    if (!bValid)
        SkipTests((UINT) 1);

    return true;
}

// NAME:        ProcessFrame()
// DESC:        process frame
// INPUT:       none
// OUTPUT:      bResult..result of src:ref image comparison

bool CSprite::ProcessFrame(void)
{
    bool bResult;
    CHAR szBuffer[MAXBUFFER];
    static int nPass = 0;
    static int nFail = 0;

    bResult = GetCompareResult(0.15f, 0.78f, (int) 0);

    if (m_Flags.bCheck(INVALID))
    {
        (m_fIncrementForward) ? nPass++ : nPass--;
        sprintf(szBuffer, "$yPass (invalid parameters): %d, Fail: %d", nPass, nFail);
        Pass();
    }
    else if (bResult)
    {
        (m_fIncrementForward) ? nPass++ : nPass--;
        sprintf(szBuffer, "$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
    else
    {
        (m_fIncrementForward) ? nFail++ : nFail--;
        sprintf(szBuffer, "$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
    }

    WriteStatus("$gSummary", szBuffer);
    return bResult;
}

// NAME:        TestTerminate()
// DESC:        terminate test
// INPUT:       none
// OUTPUT:      true

bool CSprite::TestTerminate(VOID)
{
    return true;
}

// NAME:        ClearFrame()
// DESC:        clear frame
// INPUT:       none
// OUTPUT:      m_dcBackround

bool CSprite::ClearFrame(VOID)
{
	bool bResult = Clear(m_dcBackground);
    //SetViewport(20, 20, 280, 240);
    return bResult;
}

// NAME:        SetDefaultMatrices()
// DESC:        setup default matrices
// INPUT:       none
// OUTPUT:      none

bool CSprite::SetDefaultMatrices(VOID)
{
    D3DMATRIX Matrix;

    Matrix = ProjectionMatrix(m_dvNear, m_dvFar, m_dvAngle);
    Matrix = MatrixMult(Matrix, (float) (1.0/Matrix.m[2][3]));

    if (!SetTransform(D3DTS_PROJECTION, &Matrix))
        return false;

    Matrix = ViewMatrix(m_From, m_At, m_Up);

    if (!SetTransform(D3DTS_VIEW, &Matrix))
        return false;

    return true;
}

// NAME:        SetDefaultRenderStates()
// DESC:        set default render states
// INPUT:       none
// OUTPUT:      true.....if SetRenderState() succeeds
//              false....otherwise

bool CSprite::SetDefaultRenderStates(VOID)
{
    SetRenderState(D3DRS_POINTSCALEENABLE, (DWORD) FALSE);
    SetRenderState(D3DRS_LIGHTING, (DWORD) FALSE);
    SetRenderState(D3DRS_POINTSPRITEENABLE, (DWORD) TRUE);
	return true;
}

// NAME:        ProcessArgs()
// DESC:        process args
// INPUT:       none
// OUTPUT:      none

VOID CSprite::ProcessArgs(VOID)
{
    int iDefault, iResult;

    if (KeySet("INVALID"))
        m_Flags.vSet(INVALID);
    else
        m_Flags.vClear(INVALID);

	if (KeySet("TEXOFF"))
		m_Flags.vClear(TEXTUREON);
	else
		m_Flags.vSet(TEXTUREON);

	if (KeySet("FLATSHADE"))
		m_Flags.vSet(FLATSHADE);
	else
		m_Flags.vClear(FLATSHADE);

    if (KeySet("WHQL"))
    {
        m_Flags.vSet(VALIDATE);
        m_nVariationsPerFormat = (UINT) NVDEF;
        return;
    }

    if (KeySet("SYMMETRIC"))
        m_Flags.vSet(SYMMETRIC);
    else
        m_Flags.vClear(SYMMETRIC);

    // variations
    // default:  NVDEF 

    iDefault = (int) NVDEF;
    ReadInteger("variations", iDefault, &iResult);
    m_nVariationsPerFormat = ((iResult < NVMIN) ? NVMIN : ((iResult >= NVMAX) ? NVMAX: iResult));

    // validate
    // default:  true

    if (!KeySet("!validate"))
        m_Flags.vSet(VALIDATE);
}

// NAME:        SetPosition()
// DESC:        set position (x,y)
// INPUT:       uPosition....position index
//              pfX..........x coordinate
//              pfY..........y coordinate
// OUTPUT:      true.....if test is executed successfully
//              false....otherwise
// all the values in SetPosition should be in pixels.

VOID CSprite::SetPosition(UINT nPosition, float *pfX, float *pfY)
{
	float fHalfPointSize = m_Sprite.PointSize.f/2.0f;
//    DWORD dwWidth = m_pDisplay->GetWidth();
//    DWORD dwHeight = m_pDisplay->GetHeight();
    DWORD dwWidth = m_vpTest.X + m_vpTest.Width;
    DWORD dwHeight = m_vpTest.Y + m_vpTest.Height;
    float fPosition[NCLIPTESTS][2] =
    {
        { (float) (	m_vpTest.X + fHalfPointSize),				(float) ( m_vpTest.Y + fHalfPointSize ) },
        { (float) (	m_ViewportCenter.x ),						(float) ( m_vpTest.Y + fHalfPointSize ) },
        { (float) (	dwWidth - fHalfPointSize ),	                (float) ( m_vpTest.Y + fHalfPointSize ) },
        { (float) ( dwWidth - fHalfPointSize ),	                (float) ( m_ViewportCenter.y ) },
        { (float) ( dwWidth - fHalfPointSize ),	                (float) ( dwHeight-fHalfPointSize ) },
        { (float) ( m_ViewportCenter.x ),						(float) ( dwHeight-fHalfPointSize ) },
        { (float) ( m_vpTest.X + fHalfPointSize ),				(float) ( dwHeight-fHalfPointSize ) },
        { (float) ( m_vpTest.X + fHalfPointSize ),				(float) ( m_ViewportCenter.y ) },
        { (float) ( m_vpTest.X ),								(float) ( m_vpTest.Y ) },
        { (float) ( m_ViewportCenter.x ),						(float) ( m_vpTest.Y ) },
        { (float) ( dwWidth ),					                (float) ( m_vpTest.Y ) },
        { (float) ( dwWidth ),					                (float) ( m_ViewportCenter.y ) },
        { (float) ( dwWidth ),					                (float) ( dwHeight ) },
        { (float) ( m_ViewportCenter.x ),						(float) ( dwHeight ) },
        { (float) ( m_vpTest.X ),								(float) ( dwHeight ) },
		{ (float) ( m_vpTest.X ),								(float) ( m_ViewportCenter.y ) },
        { (float) ( m_vpTest.X - fHalfPointSize ),				(float) ( m_vpTest.Y - fHalfPointSize ) },		
		{ (float) ( m_ViewportCenter.x ),						(float) ( m_vpTest.Y - fHalfPointSize ) },
		{ (float) ( dwWidth + fHalfPointSize ),	                (float) ( m_vpTest.Y - fHalfPointSize ) },
		{ (float) ( dwWidth + fHalfPointSize ),	                (float) ( m_ViewportCenter.y ) },
		{ (float) ( dwWidth + fHalfPointSize ),	                (float) ( dwHeight + fHalfPointSize ) },
		{ (float) ( m_ViewportCenter.x ),						(float) ( dwHeight + fHalfPointSize ) },
		{ (float) ( m_vpTest.X - fHalfPointSize ),				(float) ( dwHeight + fHalfPointSize ) },
		{ (float) ( m_vpTest.X - fHalfPointSize ),				(float) ( m_ViewportCenter.y ) },        
	};
    UINT n = (nPosition < NCLIPTESTS) ? nPosition : 0;

    *pfX = fPosition[n][0];
    *pfY = fPosition[n][1];
}

//******************************************************************************
BOOL CSprite::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CSprite::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CSprite::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\PointSprite.h ===
// FILE:        pointsprite.h
// DESC:        point sprite class header for point sprite conformance test
// AUTHOR:      Todd M. Frost

//#include "TestFrameBase.h"
//#include "CD3DTest.h"
#include "flags.h"

//USETESTFRAME

#define MYD3DFVF_LVERTEX (D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1)
#ifndef UNDER_XBOX
#define MYD3DFVF_LSVERTEX (D3DFVF_XYZ | D3DFVF_PSIZE | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1)
#else
#define MYD3DFVF_LSVERTEX (D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1)
#endif
#define MYD3DFVF_TLVERTEX (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1)
#ifndef UNDER_XBOX
#define MYD3DFVF_TLSVERTEX (D3DFVF_XYZRHW | D3DFVF_PSIZE | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1)
#else
#define MYD3DFVF_TLSVERTEX (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1)
#endif
#define MYD3DFVF_TLVERTEX_NOTEX (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_SPECULAR)

#define MAXBUFFER   128 // max buffer length for strings

#define TEXTURE_WIDTH   256 // texture width
#define TEXTURE_HEIGHT  256 // texture height

#define NVDEF 8   // number of variations (default)
#define NVMIN 2   // number of variations (min)
#define NVMAX 256 // number of variations (max)

#define NOFORMAT -1 // no format flag

#define	NCLIPTESTS 24 // number of clip tests (translates to (x,y) positions)
#define NUMPOINTSPRITES_ONSCREEN 6 // This is the number of pointsprites render to the target.

#define NCSETS 4 // number of coefficient sets (constant, linear, quadratic, full)

#define EPSILON ((float)(1.0e-3)) // clip plane epsilon (moves primitives just inside clip volume)

#define ZERO 1.0e-8 // floating point zero

#define VALIDATE        0x00000001
#define VERTEXPOINTSIZE 0x00000002
#define INVALID         0x00000004
#define SYMMETRIC       0x00000008
#define TEXTUREON		0x00000010
#define FLATSHADE		0x00000020

typedef union _FLOATUINT32 {
    FLOAT f;
    DWORD dw;
    UINT32 u;
} FLOATUINT32;

typedef struct _COEFFDATA {
    FLOATUINT32 Ka;
    FLOATUINT32 Kb;
    FLOATUINT32 Kc;
} COEFFDATA, *PCOEFFDATA;

typedef struct _SPRITEDATA {
    FLOATUINT32 Ka;
    FLOATUINT32 Kb;
    FLOATUINT32 Kc;
    FLOATUINT32 PointSize;
    FLOATUINT32 PointSizeMax;
    FLOATUINT32 PointSizeMin;
} SPRITEDATA, *PSPRITEDATA;

typedef struct _MYD3DLVERTEX {
    D3DVALUE dvX;
    D3DVALUE dvY;
    D3DVALUE dvZ;
    D3DCOLOR dcColor;
    D3DCOLOR dcSpecular;
    D3DVALUE dvTU;
    D3DVALUE dvTV;
} MYD3DLVERTEX, *PMYD3DLVERTEX;

typedef struct _MYD3DFVFLS {
    D3DVALUE dvX;
    D3DVALUE dvY;
    D3DVALUE dvZ;
#ifndef UNDER_XBOX
    D3DVALUE dvS;
#endif
    D3DCOLOR dcColor;
    D3DCOLOR dcSpecular;
    D3DVALUE dvTU;
    D3DVALUE dvTV;
} MYD3DLSVERTEX, *PMYD3DLSVERTEX;

typedef struct _MYD3DFVFTL {
    D3DVALUE dvSX;
    D3DVALUE dvSY;
    D3DVALUE dvSZ;
    D3DVALUE dvRHW;
    D3DCOLOR dcColor;
    D3DCOLOR dcSpecular;
    D3DVALUE dvTU;
    D3DVALUE dvTV;
} MYD3DTLVERTEX, *PMYD3DTLVERTEX;

typedef struct _MYD3DFVFTLNOTEX {
    D3DVALUE dvSX;
    D3DVALUE dvSY;
    D3DVALUE dvSZ;
    D3DVALUE dvRHW;
    D3DCOLOR dcColor;
    D3DCOLOR dcSpecular;
} MYD3DTLVERTEXNOTEX, *PMYD3DTLVERTEXNOTEX;

typedef struct _MYD3DFVFTLS {
    D3DVALUE dvSX;
    D3DVALUE dvSY;
    D3DVALUE dvSZ;
    D3DVALUE dvRHW;
#ifndef UNDER_XBOX
    D3DVALUE dvS;
#endif
    D3DCOLOR dcColor;
    D3DCOLOR dcSpecular;
    D3DVALUE dvTU;
    D3DVALUE dvTV;
} MYD3DTLSVERTEX, *PMYD3DTLSVERTEX;

class CSprite: public TESTFRAME(CD3DTest)
{
    private:
        INT m_iFormat;               // current texture format index
        INT *m_pFormats;             // texture format indices       
//        CImageData *m_pImage;        // image data class
        CTexture8 *m_pTexture;        // texture class

    protected:
        CHAR m_szBuffer[MAXBUFFER];  // text buffer
        D3DCOLOR m_dcBackground;     // background color
        D3DVALUE m_dvAngle;          // view angle (fov)
        D3DVALUE m_dvFar;            // far clipping plane
        D3DVALUE m_dvNear;           // near clipping plane
        D3DVALUE m_dvPointSizeMax;   // point sprite size max wrt viewport
        D3DVECTOR m_At;              // at point
        D3DVECTOR m_From;            // from point
        D3DVECTOR m_Up;              // up vector
        D3DVECTOR m_ViewportCenter;  // viewport center (screen space)
        INT m_nFormats;              // number of texture format indices
        UINT m_nVariationsPerFormat; // variations per texture format
        SPRITEDATA m_Sprite;         // sprite data

        CHANNELDATA Data;
        BOOL            m_bExit;

    public:
        CFlags m_Flags;              // flags class
        CSprite();
        ~CSprite();
		virtual VOID CommandLineHelp(VOID);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
        virtual bool ProcessFrame(VOID);
        virtual bool TestTerminate(VOID);
        virtual bool ClearFrame(VOID);
        bool SetDefaultMatrices(VOID);
        bool SetDefaultRenderStates(VOID);
        VOID ProcessArgs(VOID);
 		VOID SetPosition(UINT uTest, float *pfX, float *pfY);

        virtual BOOL    AbortedExit(void);

    protected:

        virtual void    ProcessInput();
        virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                            WPARAM wParam, LPARAM lParam);
};

class CSpriteAttenuateFVFL : public CSprite
{
    private:
        D3DVECTOR m_LineOfSight;            // line of sight (normalized)
        COEFFDATA m_Coefficients[NCSETS];   // attenuation coefficient data

    public:
        CSpriteAttenuateFVFL();
        ~CSpriteAttenuateFVFL();
        virtual VOID CommandLineHelp(VOID);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};

class CSpriteAttenuateFVFLS : public CSprite
{
    private:
        D3DVECTOR m_LineOfSight;            // line of sight (normalized)
        COEFFDATA m_Coefficients[NCSETS];   // attenuation coefficient data

    public:
        CSpriteAttenuateFVFLS();
        ~CSpriteAttenuateFVFLS();
        virtual VOID CommandLineHelp(VOID);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};

class CSpriteScaleFVFL : public CSprite
{
    public:
        CSpriteScaleFVFL();
        ~CSpriteScaleFVFL();
        virtual VOID CommandLineHelp(VOID);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};

class CSpriteScaleFVFLS : public CSprite
{
    public:
        CSpriteScaleFVFLS();
        ~CSpriteScaleFVFLS();
        virtual VOID CommandLineHelp(VOID);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};

class CSpriteScaleFVFTL : public CSprite
{
    public:
        CSpriteScaleFVFTL();
        ~CSpriteScaleFVFTL();
        virtual VOID CommandLineHelp(VOID);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};

class CSpriteScaleFVFTLS : public CSprite
{
    public:
        CSpriteScaleFVFTLS();
        ~CSpriteScaleFVFTLS();
        virtual VOID CommandLineHelp(VOID);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);		
};

class CSpriteBatch : public CSprite
{
    public:
        CSpriteBatch();
        ~CSpriteBatch();
        virtual VOID CommandLineHelp(VOID);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
		bool DrawPointSprites(LPVOID Vertex, DWORD dwFormat, UINT StartPosNum, UINT NumToDraw);
		bool ProcessFrame(void);
	private:
		DWORD m_dwPointSpriteEnable;
		bool m_fChangeMode;
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\scalefvfl.cpp ===
// FILE:        scalefvfl.cpp
// DESC:        scale class methods for point sprite conformance test
// AUTHOR:      Todd M. Frost
// COMMENTS:    D3DFVF_LVERTEX

#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "PointSprite.h"

// NAME:        CSpriteScaleFVFL()
// DESC:        constructor for sprite scale class (D3DFVF_LVERTEX)
// INPUT:       none
// OUTPUT:      none

CSpriteScaleFVFL::CSpriteScaleFVFL(VOID)
{
    m_szTestName=TEXT("Point sprite scale (D3DFVF_LVERTEX)");
    m_szCommandKey=TEXT("ScaleFVFL");

    m_dvPointSizeMax = 0.0f;
}

// NAME:        ~CSpriteScaleFVFL()
// DESC:        destructor for sprite scale class (D3DFVF_LVERTEX)
// INPUT:       none
// OUTPUT:      none

CSpriteScaleFVFL::~CSpriteScaleFVFL(VOID)
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CSpriteScaleFVFL::CommandLineHelp(void)
{
     CSprite::CommandLineHelp();
	 return;
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      appropriate D3DTESTINIT code

UINT CSpriteScaleFVFL::TestInitialize(VOID)
{
    UINT uResult = CSprite::TestInitialize();

    SetTestRange((UINT) 1, (UINT) (m_nFormats*m_nVariationsPerFormat));
    return uResult;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test is executed successfully
//              false....otherwise

bool CSpriteScaleFVFL::ExecuteTest(UINT uTest)
{
    bool bResult = true;
    D3DVALUE dvT;

    dvT = ((D3DVALUE) ((uTest - 1) % m_nVariationsPerFormat))/((D3DVALUE) (m_nVariationsPerFormat - 1));
    m_Sprite.PointSize.f = dvT*(m_dvPointSizeMax*1.5f);

    if (!CSprite::ExecuteTest(uTest))
        return false;

    sprintf(m_szBuffer, "Point size (state):  %f", m_Sprite.PointSize.f);
    BeginTestCase(m_szBuffer);

    SwitchAPI((UINT)m_fFrame);

    m_pDevice->SetViewport(&m_vpFull);
    m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(74, 150, 202), 1.0f, 0);

    m_pDevice->SetViewport(&m_vpTest);

    ClearFrame();

    if (BeginScene())
    {
        DWORD dwFormat = MYD3DFVF_LVERTEX;
        MYD3DLVERTEX Vertex;

        Vertex.dvX = 0.0f;
        Vertex.dvY = 0.0f;
        Vertex.dvZ = 0.0f;
        Vertex.dcColor = m_dcBackground;
        Vertex.dcSpecular = m_dcBackground;
        Vertex.dvTU = 0.0f;
        Vertex.dvTV = 0.0f;

        if (!RenderPrimitive(D3DPT_POINTLIST, dwFormat, &Vertex, (DWORD) 1))
        {
            WriteToLog("RenderPrimitive() failed.\n");
            bResult = false;
        }

        // Display the adapter mode
        ShowDisplayMode();

        // Display the frame rate
        ShowFrameRate();

        // Display the console
        m_pDisplay->ShowConsole();

        if (!EndScene())
        {
            WriteToLog("EndScene() failed.\n");
            bResult = false;
        }
    }
    else
    {
        WriteToLog("BeginScene() failed.\n");
        bResult = false;
    }

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

//    return bResult;
    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\flags.h ===
// FILE:        flags.h
// DESC:        flags class header
// AUTHOR:      Todd M. Frost
// COMMENTS:

#ifndef _CFLAGS
#define _CFLAGS

class CFlags {
    private:
        DWORD m_dwCurrent;  // current flags
        DWORD m_dwSaved;    // saved flags

    public:
        inline bool bCheck(DWORD dwFlags)
        {
            if (m_dwCurrent & dwFlags)
                return true;
            else
                return false;
        };
        inline VOID vClear(DWORD dwFlags)
        {
            m_dwCurrent &= ~dwFlags;
        };
        inline VOID vSet(DWORD dwFlags)
        {
            m_dwCurrent |= dwFlags;
        };
        inline DWORD dwGet(VOID)
        {
            return m_dwCurrent;
        };
        inline VOID vSave(VOID)
        {
            m_dwSaved = m_dwCurrent;
        };
        inline VOID vRestore(VOID)
        {
            m_dwCurrent = m_dwSaved;
        };
        inline VOID vReplace(DWORD dwFlags)
        {
            m_dwCurrent = dwFlags;
        };
        CFlags(VOID);
        ~CFlags(VOID); 
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\scalefvftl.cpp ===
// FILE:        scalefvftl.cpp
// DESC:        scale class methods for point sprite conformance test
// AUTHOR:      Todd M. Frost
// COMMENTS:    D3DFVF_TLVERTEX

#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "PointSprite.h"

// NAME:        CSpriteScaleFVFTL()
// DESC:        constructor for sprite scale class (D3DFVF_TLVERTEX)
// INPUT:       none
// OUTPUT:      none

CSpriteScaleFVFTL::CSpriteScaleFVFTL(VOID)
{
    m_szTestName=TEXT("Point sprite scale (D3DFVF_TLVERTEX)");
    m_szCommandKey=TEXT("ScaleFVFTL");

    m_dvPointSizeMax = 0.0f;
}

// NAME:        ~CSpriteScaleFVFTL()
// DESC:        destructor for sprite scale class (D3DFVF_TLVERTEX)
// INPUT:       none
// OUTPUT:      none

CSpriteScaleFVFTL::~CSpriteScaleFVFTL(VOID)
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CSpriteScaleFVFTL::CommandLineHelp(void)
{
     CSprite::CommandLineHelp();
	 return;
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      appropriate D3DTESTINIT code

UINT CSpriteScaleFVFTL::TestInitialize(VOID)
{
    UINT uResult = CSprite::TestInitialize();

    SetTestRange((UINT) 1, (UINT) (m_nFormats*m_nVariationsPerFormat*NCLIPTESTS));	// *2 for the POINTSPRITEENABLE off/on states divide 2 because there are always two point sprites on screen.
    return uResult;
}


// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test is executed successfully
//              false....otherwise

bool CSpriteScaleFVFTL::ExecuteTest(UINT uTest)
{
    bool bResult = true;
    D3DVALUE dvT;

	bool	bPSEnable = (uTest&1);
	uTest = (uTest + 1) / 2;
	UINT	nPosition = (uTest-1) % NCLIPTESTS;
	uTest = (uTest + NCLIPTESTS -1) / NCLIPTESTS;
    dvT = ((D3DVALUE) ((uTest - 1) % m_nVariationsPerFormat))/((D3DVALUE) (m_nVariationsPerFormat - 1));
    m_Sprite.PointSize.f = dvT*(m_dvPointSizeMax * 1.5f);

    if (!CSprite::ExecuteTest(uTest))
        return false;

	// turn on/off texture stretching for this point
    SetRenderState(D3DRS_POINTSPRITEENABLE, (DWORD) bPSEnable);

    sprintf(m_szBuffer, "Point size (state):  %f", m_Sprite.PointSize.f);
    BeginTestCase(m_szBuffer);

    SwitchAPI((UINT)m_fFrame);

    m_pDevice->SetViewport(&m_vpFull);
    m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(74, 150, 202), 1.0f, 0);

    m_pDevice->SetViewport(&m_vpTest);

    ClearFrame();

    if (BeginScene())
    {
        DWORD dwFormat = MYD3DFVF_TLVERTEX;
        MYD3DTLVERTEX Vertex[2];

		SetPosition(nPosition, &Vertex[0].dvSX, &Vertex[0].dvSY);
        Vertex[0].dvSZ = m_ViewportCenter.z;
        Vertex[0].dvRHW = 1.0f;
        Vertex[0].dcColor = m_dcBackground;
        Vertex[0].dcSpecular = m_dcBackground;
        Vertex[0].dvTU = 0.75f;
        Vertex[0].dvTV = 0.50f;

		SetPosition((NCLIPTESTS - 1) - nPosition, &Vertex[1].dvSX, &Vertex[1].dvSY);
        Vertex[1].dvSZ = m_ViewportCenter.z + .01f;
        Vertex[1].dvRHW = 1.0f;
        Vertex[1].dcColor = m_dcBackground;
        Vertex[1].dcSpecular = m_dcBackground;
        Vertex[1].dvTU = 0.55f;
        Vertex[1].dvTV = 0.70f;

        if (!RenderPrimitive(D3DPT_POINTLIST, dwFormat, &Vertex, (DWORD) 2))
        {
            WriteToLog("RenderPrimitive() failed.\n");
            bResult = false;
        }

        // Display the adapter mode
        ShowDisplayMode();

        // Display the frame rate
        ShowFrameRate();

        // Display the console
        m_pDisplay->ShowConsole();

        if (!EndScene())
        {
            WriteToLog("EndScene() failed.\n");
            bResult = false;
        }
    }
    else
    {
        WriteToLog("BeginScene() failed.\n");
        bResult = false;
    }

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

//    return bResult;
    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\pointtex\pointtex.h ===
#ifndef __LineTex_h__
#define __LineTex_h__

//#include "CD3DTest.h"

//USETESTFRAME

class PointTex : public CD3DTest
{
public:
    PointTex();
    ~PointTex();

    virtual BOOL Create(CDisplay* pDisplay);

	virtual UINT TestInitialize(void);
	virtual bool ExecuteTest(UINT);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);
    virtual bool TestTerminate(void);

	virtual bool SetDefaultMatrices(void);
	virtual bool SetDefaultMaterials(void);
	virtual bool SetDefaultLightStates(void);
	virtual bool SetDefaultRenderStates(void);
	virtual bool SetDefaultLights(void);

private:
//	CMaterial*		m_pMaterial;
//	CLight*			m_pLight;
	CTexture8*		m_pTextureArray[8];

    CVertexBuffer8* m_pd3dr;
    D3DVERTEX*      m_pVertices;
    DWORD           m_dwVertices;

    DWORD           m_dwCurrentTestNumber;
    DWORD           m_dwNumFailed;

    bool            GeneratePointList(void);

};

#endif // __LineTex_h__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_psprit
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    PointSprite.cpp \
    attenfvfl.cpp \
    attenfvfls.cpp \
    scalefvfl.cpp \
    scalefvfls.cpp \
    scalefvftl.cpp \
    scalefvftls.cpp \
    flags.cpp \
    batch.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\exe\sources.inc ===
TARGETNAME=ptsprite
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_psprit.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=ptsprite
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_psprit.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PointSprite\scalefvftls.cpp ===
// FILE:        scalefvftls.cpp
// DESC:        scale class methods for point sprite conformance test
// AUTHOR:      Todd M. Frost
// COMMENTS:    D3DFVF_TLVERTEX | D3DFVF_PSIZE

#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "PointSprite.h"

// NAME:        CSpriteScaleFVFTLS()
// DESC:        constructor for sprite scale class (D3DFVF_TLVERTEX | D3DFVF_PSIZE)
// INPUT:       none
// OUTPUT:      none

CSpriteScaleFVFTLS::CSpriteScaleFVFTLS(VOID)
{
    m_szTestName=TEXT("Point sprite scale (D3DFVF_TLVERTEX | D3DFVF_PSIZE)");
    m_szCommandKey=TEXT("ScaleFVFTLS");

    m_dvPointSizeMax = 0.0f;
}

// NAME:        ~CSpriteScaleFVFTLS()
// DESC:        destructor for sprite scale class (D3DFVF_TLVERTEX | D3DFVF_PSIZE)
// INPUT:       none
// OUTPUT:      none

CSpriteScaleFVFTLS::~CSpriteScaleFVFTLS(VOID)
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CSpriteScaleFVFTLS::CommandLineHelp(void)
{
    CSprite::CommandLineHelp();
//    WriteCommandLineHelp("$yinvalid: $wrun invalid parameter tests$c($wYes$c/No)");
	return;
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      appropriate D3DTESTINIT code

UINT CSpriteScaleFVFTLS::TestInitialize(VOID)
{
    UINT uResult = CSprite::TestInitialize();

    m_Sprite.PointSize.f = 1.0f;
    SetTestRange((UINT) 1, (UINT) (m_nFormats*m_nVariationsPerFormat*NCLIPTESTS*2));	// *2 for the POINTSPRITEENABLE off/on states

#ifndef UNDER_XBOX
    if (!m_Flags.bCheck(VERTEXPOINTSIZE) && !m_Flags.bCheck(INVALID))
        uResult = D3DTESTINIT_SKIPALL;
#endif

    return uResult;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test is executed successfully
//              false....otherwise

bool CSpriteScaleFVFTLS::ExecuteTest(UINT uTest)
{
    bool bResult = true;
    D3DVALUE dvS, dvT;

	uTest = (uTest + 1) / 2;
	UINT nPosition = (uTest - 1) % NCLIPTESTS;
	uTest = (uTest + NCLIPTESTS -1) / NCLIPTESTS;
    dvT = ((D3DVALUE) ((uTest - 1) % m_nVariationsPerFormat))/((D3DVALUE) (m_nVariationsPerFormat - 1));
    dvS = dvT*(m_dvPointSizeMax*1.5f);

    if (!CSprite::ExecuteTest(uTest))
        return false;

	// enable(odd)/disable(even) point sprites

    SetRenderState(D3DRS_POINTSPRITEENABLE, (DWORD) (uTest & 1));

    sprintf(m_szBuffer, "Point size (vertex):  %f", dvS);
    BeginTestCase(m_szBuffer);

    SwitchAPI((UINT)m_fFrame);

    m_pDevice->SetViewport(&m_vpFull);
    m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(74, 150, 202), 1.0f, 0);

    m_pDevice->SetViewport(&m_vpTest);

    ClearFrame();

    if (BeginScene())
    {
        DWORD dwFormat = MYD3DFVF_TLSVERTEX;
        MYD3DTLSVERTEX Vertex;

		SetPosition(nPosition, &Vertex.dvSX, &Vertex.dvSY);
        Vertex.dvSZ = m_ViewportCenter.z;
        Vertex.dvRHW = 1.0f;
        Vertex.dcColor = m_dcBackground;
        Vertex.dcSpecular = m_dcBackground;
        Vertex.dvTU = 0.75f;
        Vertex.dvTV = 0.50f;
#ifndef UNDER_XBOX
        Vertex.dvS = dvS;

#else

        m_pDevice->SetRenderState(D3DRS_POINTSIZE, F2DW(dvS));
#endif

        if (!RenderPrimitive(D3DPT_POINTLIST, dwFormat, &Vertex, (DWORD) 1))
        {
            WriteToLog("RenderPrimitive() failed.\n");
            bResult = false;
        }

#ifdef UNDER_XBOX
        m_pDevice->SetRenderState(D3DRS_POINTSIZE, F2DW(1.0f));
#endif

        // Display the adapter mode
        ShowDisplayMode();

        // Display the frame rate
        ShowFrameRate();

        // Display the console
        m_pDisplay->ShowConsole();

        if (!EndScene())
        {
            WriteToLog("EndScene() failed.\n");
            bResult = false;
        }
    }
    else
    {
        WriteToLog("BeginScene() failed.\n");
        bResult = false;
    }

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

//    return bResult;
    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\pointtex\default.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "PointTex.h"

bool PointTex::SetDefaultMatrices(void) {
    D3DMATRIX           Matrix;
    // We need to be far from scane to receive correct specular highlights
	D3DVECTOR           from = cD3DVECTOR(0.0f, 0.0f, 1.0f); 
    D3DVECTOR	        at = cD3DVECTOR(0.0f, 0.0f, 0.0f);
    D3DVECTOR	        up = cD3DVECTOR(0.0f, 1.0f, 0.0f);
    float				fWidth = 100.f;
	float				fHeight = 100.f;
	float               fZn = 0.1f;
	float               fZf = 2.f;

    
	// Projection matrix
	Matrix = OrthoMatrix(2.f, 2.f, fZn, fZf);
//	m_mProjectionMatrix = ProjectionMatrix(pi/4, 1.f, fZn, fZf);
	if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
		return false;

    Matrix = IdentityMatrix();
    if (!SetTransform(D3DTRANSFORMSTATE_WORLD,&Matrix))
        return false;

	Matrix = ViewMatrix(from, at, up);
    if (!SetTransform(D3DTRANSFORMSTATE_VIEW,&Matrix))
        return false;

    return true;
}

bool PointTex::SetDefaultMaterials(void) {
    D3DMATERIAL8        Material;
    HRESULT             hr;

//    m_pMaterial = CreateMaterial();

//    if (NULL == m_pMaterial)
//        return false;

    ZeroMemory(&Material,sizeof(D3DMATERIAL8));
//    Material.dwSize=sizeof(D3DMATERIAL);
    Material.Diffuse.r  = 1.0f;
    Material.Diffuse.g  = 1.0f;
    Material.Diffuse.b  = 1.0f;
    Material.Diffuse.a  = 1.0f;

    Material.Ambient.r  = 1.0f;
    Material.Ambient.g  = 1.0f;
    Material.Ambient.b  = 1.0f;
    Material.Ambient.a  = 1.0f;

    Material.Specular.r = 1.0f;
    Material.Specular.g = 1.0f;
    Material.Specular.b = 1.0f;
    Material.Specular.a = 1.0f;

    Material.Emissive.r = 0.0f;
    Material.Emissive.g = 0.0f;
    Material.Emissive.b = 0.0f;
    Material.Emissive.a = 0.0f;

    Material.Power      = 20.0f;
//    Material.dwRampSize = 32;
//	Material.hTexture	= 0;

//    if (!m_pMaterial->SetMaterial(&Material))
//        return false;

    // Now that the material data has been set,
    // re-set the material so the changes get picked up.

//    if (!SetMaterial(m_pMaterial))
//        return false;

//    return true;

    hr = m_pDevice->SetMaterial(&Material);
    return (hr == D3D_OK);
}


bool PointTex::SetDefaultLights(void) {
    D3DLIGHT8   Light;
	D3DVECTOR	vLightPos = cD3DVECTOR(0.f, 0.f, -500.f);
	D3DVECTOR	vLightDir = cD3DVECTOR(0.f, 0.f, 1.f);
    HRESULT     hr;

	ZeroMemory(&Light,sizeof(D3DLIGHT8));

	Light.Type           = D3DLIGHT_SPOT;
	Light.Diffuse.r		= 1.0f;
	Light.Diffuse.g		= 1.0f;
	Light.Diffuse.b		= 1.0f;
	Light.Diffuse.a		= 1.0f;
	Light.Position		= vLightPos;
	Light.Direction		= vLightDir;
	Light.Range           = D3DLIGHT_RANGE_MAX;
	Light.Attenuation0    = 1.f;
	Light.Attenuation1    = 0.f;
	Light.Attenuation2    = 0.f;
    Light.Theta			= pi/50;
    Light.Phi				= pi/20;
//	m_pLight = CreateLight();
//	if (NULL == m_pLight)
//		return false;

//	m_pLight->SetLight(&Light);
//	if (!SetLight(0,m_pLight))
//		return false;
	
//	return true;

    hr = m_pDevice->SetLight(0, &Light);
    if (FAILED(hr)) {
        return false;
    }

    hr = m_pDevice->LightEnable(0, TRUE);
	
	return (hr == D3D_OK);
}


bool PointTex::SetDefaultLightStates(void) {
    if (m_dwVersion >= 0x0700) 
	{
		SetRenderState(D3DRENDERSTATE_AMBIENT,RGB_MAKE(90,90,90));
		SetRenderState(D3DRENDERSTATE_LOCALVIEWER,(DWORD)TRUE);
#ifndef UNDER_XBOX
		SetRenderState(D3DRENDERSTATE_CLIPPING, (DWORD)TRUE);
#endif // !UNDER_XBOX
	}
	else 
	{
//	    SetLightState(D3DLIGHTSTATE_AMBIENT,RGB_MAKE(50,50,50));
	}
    return true;
}


bool PointTex::SetDefaultRenderStates(void) {
#ifndef UNDER_XBOX
	SetRenderState(D3DRENDERSTATE_LASTPIXEL, (DWORD)TRUE);
#endif // !UNDER_XBOX
	SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE, (DWORD)FALSE);
	SetRenderState(D3DRENDERSTATE_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
	SetRenderState(D3DRENDERSTATE_DESTBLEND, (DWORD)D3DBLEND_ZERO);
	SetRenderState(D3DRENDERSTATE_LIGHTING, (DWORD)TRUE);
	SetTextureStageState(0, D3DTSS_MINFILTER, (DWORD)TEXF_LINEAR);
	SetTextureStageState(0, D3DTSS_MIPFILTER, (DWORD)TEXF_POINT);
	SetTextureStageState(0, D3DTSS_ADDRESSU, (DWORD)D3DTADDRESS_MIRROR);
	SetTextureStageState(0, D3DTSS_ADDRESSV, (DWORD)D3DTADDRESS_MIRROR);
	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\pointtex\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\pointtex\modulex.h ===
#define PREPEND_MODULE(Suffix) pointtex##Suffix
#define MODULE_STRING "pointtex"
#pragma comment(linker, "/include:_pointtex_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\pointtex\pointtex.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "PointTex.h"
//#include "cimageloader.h"

//CD3DWindowFramework     theApp;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    PointTex*       TestOne;
    BOOL            bRet = TRUE;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    TestOne = new PointTex();
    if (!TestOne) {
        return FALSE;
    }

    // Initialize the scene
    if (!TestOne->Create(pDisplay)) {
        TestOne->Release();
        return FALSE;
    }

    bRet = TestOne->Exhibit(pnExitCode);

    // Clean up the scene
    TestOne->Release();

    return bRet;
}

PointTex::PointTex()
{
//    m_pMaterial = NULL;
//    m_pLight = NULL;
    for (int i = 0; i < 8; i++)
        m_pTextureArray[i] = NULL;

    m_pd3dr = NULL;
    m_pVertices = NULL;
    m_dwVertices = 0;

    m_dwCurrentTestNumber = 0;
    m_dwNumFailed = 0;

	m_szTestName = TEXT("PointTex");
	m_szCommandKey = TEXT("pointtex");
}

PointTex::~PointTex()
{
#ifdef UNDER_XBOX
    if (!(GetStartupContext() & TSTART_STRESS)) {
        m_pDisplay->ReleaseDevice();
        m_pDisplay->GetDirect3D8()->SetPushBufferSize(524288, 32768);
        m_pDisplay->CreateDevice();
    }
#endif

//    RELEASE(m_pMaterial);
//    RELEASE(m_pLight);
    for (int i = 0; i < 8; i++)
    {
        ReleaseTexture(m_pTextureArray[i]);
    }

    if (m_pd3dr) {
        ReleaseVertexBuffer(m_pd3dr);
        m_pd3dr = NULL;
        m_dwVertices = 0;
    }
    if (m_pVertices)
    {
        delete [] m_pVertices;
        m_pVertices = NULL;
        m_dwVertices = 0;
    }
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the scene for rendering.
//
// Arguments:
//
//     CDisplay* pDisplay               - Pointer to a Display object.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL PointTex::Create(CDisplay* pDisplay) {

#ifdef UNDER_XBOX
    if (!(GetStartupContext() & TSTART_STRESS)) {
        pDisplay->ReleaseDevice();
        pDisplay->GetDirect3D8()->SetPushBufferSize(8388608, 32768);
        pDisplay->CreateDevice();
    }
#endif

    return CD3DTest::Create(pDisplay);
}

bool PointTex::GeneratePointList(void) {
	int		iSegments = 250;
    float   fStart = 0.75f;
	int		i, j;
	float	fX = -fStart;
	float	fY = -fStart;
	float	fXInc = (2.f * fStart) / float(iSegments);
	float	fYInc = (2.f * fStart) / float(iSegments);
    D3DVERTEX* pr;

	m_dwVertices = iSegments * iSegments;
    if (GetStartupContext() & TSTART_STRESS) {
        m_pd3dr = CreateVertexBuffer(m_pDevice, NULL, m_dwVertices * sizeof(D3DVERTEX), 0, D3DFVF_VERTEX);
        if (!m_pd3dr) { 
            return false;
        }

        m_pd3dr->Lock(0, 0, (LPBYTE*)&pr, 0);
    }
    else {
	    m_pVertices = new D3DVERTEX [ m_dwVertices ];
	    if (m_pVertices == NULL)
		    return false;
        pr = m_pVertices;        
    }

	for (i = 0; i < iSegments; i++) 
    {
    	for (j = 0; j < iSegments; j++) 
        {
            int k = i*iSegments + j;
		    pr[k] = cD3DVERTEX(cD3DVECTOR(fX, fY, 0.f), Normalize(cD3DVECTOR(0.f, 1.f, 1.f)), 0.f, 0.f);

            pr[k].tu = (pr[k].x + fStart) / (2.f * fStart);
            pr[k].tv = (pr[k].y + fStart) / (2.f * fStart);

    		fX += fXInc;
        }
        fY += fYInc;
        fX = -fStart;
	}

    if (GetStartupContext() & TSTART_STRESS) {
        m_pd3dr->Unlock();
    }

	return true;
}



UINT PointTex::TestInitialize(void)
{
//	CImageLoader    Loader;
//	CImageData*		pImage = NULL;

    SetTestRange(1, 10);

    // Get number of supported texture stages with textures
    DWORD   dwTexCount = m_d3dcaps.MaxSimultaneousTextures;

    // Generate point vertices
    if (!GeneratePointList())
    {
        WriteToLog("PointTex: not enough memory to generate point list.\n");
        return D3DTESTINIT_ABORT;
    }

    // Loading textures
    static DWORD tex[8][8] = 
    {
        {0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff},
        {0x00ffffff, 0x000000ff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff},
        {0x00ffffff, 0x00ffffff, 0x0000ff00, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff},
        {0x00ffffff, 0x00ffffff, 0x00ffffff, 0x0000ffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff},
        {0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ff0000, 0x00ffffff, 0x00ffffff, 0x00ffffff},
        {0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ff00ff, 0x00ffffff, 0x00ffffff},
        {0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffff00, 0x00ffffff},
        {0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00f0f0f0}
    };

    for (int i = 0; i < (int)dwTexCount; i++) {
		char fbuf[10];
		sprintf(fbuf, "tex%1d.bmp", i);
//		pImage = Loader.LoadStripes(256, 256, 8, tex[i], true);
//        if (NULL == pImage)
//        {
//            WriteToLog("PointTex: failed to load %s image\n", fbuf);
//            return D3DTESTINIT_ABORT;
//        }
		m_pTextureArray[i] = CreateStripedTexture(m_pDevice, 256,256,8,tex[i],true);
//		RELEASE(pImage);
        if (NULL == m_pTextureArray[i]) 
        {
			WriteToLog("PointTex: failed to create texture from image\n");
            return D3DTESTINIT_ABORT;
        }

		SetTexture(i, m_pTextureArray[i]);
        SetTextureStageState(i, D3DTSS_TEXCOORDINDEX, (DWORD)0);
		SetTextureStageState(i, D3DTSS_COLORARG1, (DWORD)D3DTA_TEXTURE);
		if (i) 
		{
			SetTextureStageState(i, D3DTSS_COLORARG2, (DWORD)D3DTA_CURRENT);
			SetTextureStageState(i, D3DTSS_COLOROP, (DWORD)D3DTOP_MODULATE);
		}
		else
		{
			SetTextureStageState(i, D3DTSS_COLORARG2, (DWORD)D3DTA_DIFFUSE);
			SetTextureStageState(i, D3DTSS_COLOROP, (DWORD)D3DTOP_SELECTARG1);
		}

    }

	return D3DTESTINIT_RUN;
}


bool PointTex::ExecuteTest(UINT iTest)
{
    m_dwCurrentTestNumber = (DWORD)iTest;

    BeginTestCase("");
    return true;
}

void PointTex::SceneRefresh(void) 
{
// ##REVIEW: The point pixels dim on the second test.  If scene refresh code is moved into ExecuteTest,
// a ClearFrame and Present are added, and false is returned from ExecuteTest, then things appear
// correctly.  Investigate what in CD3DTest::Render is causing the problem.
    if (BeginScene())
    {
        if (!(GetStartupContext() & TSTART_STRESS)) {
            RenderPrimitive(D3DPT_POINTLIST, D3DFVF_VERTEX, m_pVertices, m_dwVertices, NULL, 0, 0);
        }
        else {
            m_pDevice->SetStreamSource(0, m_pd3dr, sizeof(D3DVERTEX));
            m_pDevice->SetVertexShader(D3DFVF_VERTEX);
            m_pDevice->DrawPrimitive(D3DPT_POINTLIST, 0, m_dwVertices);
        }
        EndScene();
    }
}

bool PointTex::ProcessFrame(void)
{
	bool    bResult;

    bResult = GetCompareResult(0.15f);

    if (!bResult) {
		WriteToLog("$rPointTex: Test fails on frame %d\n", m_dwCurrentTestNumber);
		Fail();
		m_dwNumFailed++;
    }
	else {
		Pass();
	}
	EndTestCase();

	return true;
}

bool PointTex::TestTerminate(void)
{
//    RELEASE(m_pMaterial);
//    RELEASE(m_pLight);
    for (int i = 0; i < 8; i++)
    {
        ReleaseTexture(m_pTextureArray[i]);
        m_pTextureArray[i] = NULL;
    }

    if (m_pd3dr) {
        ReleaseVertexBuffer(m_pd3dr);
        m_pd3dr = NULL;
        m_dwVertices = 0;
    }

    if (m_pVertices)
    {
        delete [] m_pVertices;
        m_pVertices = NULL;
        m_dwVertices = 0;
    }
	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\pointtex\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=PointTex
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_pnttex.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\pointtex\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_pnttex
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    PointTex.cpp \
    Default.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\pointtex\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\address.cpp ===
// FILE:        address.cpp
// DESC:        pixel shader address conformance tests
// AUTHOR:      Cliff Hudson

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "PShader.h"

//CPSAddress PSAddressTest;

extern MYTLVERTEX g_FourColorVertices[];
extern MYTLVERTEX g_TexKillVertices[];
extern MYTLVERTEX g_IndexARGBVertices[];
extern MYCUBETLVERTEX2 g_Cube2Vertices[];
extern MYCUBETLVERTEX3 g_Cube3Vertices[];
extern MYCUBETLVERTEX2 g_Texm2Vertices[];
extern MYCUBETLVERTEX3 g_Texm3Vertices[];

CTexture8* CreateBumpMapTexture(CDevice8* pDevice, LPTSTR szName);

CPSAddress::CPSAddress()
{
    m_szTestName = TEXT("PSAddress");
    m_szCommandKey = TEXT("PSAddress");

//    m_pCheckerData = NULL;
    m_pCheckerTex = NULL;
//    m_pColorCheckerData = NULL;
    m_pColorCheckerTex = NULL;
//    m_pBEM1Data = NULL;
    m_pBEM1Tex = NULL;
//    m_pBEM3Data = NULL;
    m_pBEM3Tex = NULL;
//    m_pBrickData = NULL;
    m_pBrickTex = NULL;
    m_pCubeTex = NULL;
    m_pSysCubeTex = NULL;
//    m_pCubeData[0] = NULL;
//    m_pCubeData[1] = NULL;
//    m_pCubeData[2] = NULL;
//    m_pCubeData[3] = NULL;
//    m_pCubeData[4] = NULL;
//    m_pCubeData[5] = NULL;
}

bool CPSAddress::TestTerminate()
{
    ReleaseTexture(m_pCheckerTex);
    m_pCheckerTex = NULL;
//    RELEASE(m_pCheckerData);
    ReleaseTexture(m_pColorCheckerTex);
    m_pColorCheckerTex = NULL;
//    RELEASE(m_pColorCheckerData);
//    RELEASE(m_pBEM1Data);
    ReleaseTexture(m_pBEM1Tex);
    m_pBEM1Tex = NULL;
//    RELEASE(m_pBEM3Data);
    ReleaseTexture(m_pBEM3Tex);
    m_pBEM3Tex = NULL;
    ReleaseTexture(m_pBrickTex);
    m_pBrickTex = NULL;
//    RELEASE(m_pBrickData);
    ReleaseTexture(m_pCubeTex); 
    m_pCubeTex = NULL;
    ReleaseTexture(m_pSysCubeTex); 
    m_pSysCubeTex = NULL;
//    RELEASE(m_pCubeData[0]); 
//    RELEASE(m_pCubeData[1]); 
//    RELEASE(m_pCubeData[2]); 
//    RELEASE(m_pCubeData[3]); 
//    RELEASE(m_pCubeData[4]); 
//    RELEASE(m_pCubeData[5]); 
    return CPShader::TestTerminate();
}

UINT CPSAddress::TestInitialize()
{
    CPShader::TestInitialize();
        
    if (!LoadTextures())
        return D3DTESTINIT_ABORT;

    PopulateShaderInfo();
    SetTestRange(1, m_uNumShaders);

//    if (m_bSkipAllForCaps)
//        SkipTestRange(1, m_uNumShaders);

    return D3DTESTINIT_RUN;
}

void CPSAddress::PopulateShaderInfo()
{
    float fConstant[4] = { 0.0f, 0.0f, 1.0f, 0.0f };

    // ****************************** add ******************************
	// (1) tex
    AddShaderDef("Address: tex",
                 "tex t0\n"
                 "mov r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(0, 5));
    AddTextureToLastShaderDef(m_pColorCheckerTex);


	// (2) texcoord
    AddShaderDef("Address: texcoord",
                 "texcoord t0\n"
                 "mov r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);

    // (3) texkill
	AddShaderDef("Address: texkill",
                 "texkill t0\n"
                 "mov r0, v0\n",
                 MYTLVERTEX_FVF, g_TexKillVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);

    // (4) texbem
	AddShaderDef("Address: texbem",
                 "tex t0\n"
                 "texbem t1, t0\n"
                 "mov r0, t1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
VerifyTexture(m_pBEM1Tex);
    AddTextureToLastShaderDef(m_pBEM1Tex);
VerifyTexture(m_pBEM1Tex);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    
    // (5) texbeml
	AddShaderDef("Address: texbeml",
                 "tex t0\n"
                 "texbeml t1, t0\n"
                 "mov r0, t1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
VerifyTexture(m_pBEM1Tex);
    AddTextureToLastShaderDef(m_pBEM1Tex);
VerifyTexture(m_pBEM1Tex);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
   
    // (6) texreg2ar
	AddShaderDef("Address: texreg2ar",
				 "tex t0\n"
				 "texreg2ar t1, t0\n"
                 "mov r0, t1\n",
                 MYTLVERTEX_FVF, g_IndexARGBVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
VerifyTexture(m_pBEM1Tex);
    AddTextureToLastShaderDef(m_pBEM1Tex);
VerifyTexture(m_pBEM1Tex);

    // (7) texreg2gb
	AddShaderDef("Address: texreg2gb",
				 "tex t0\n"
                 "texreg2gb t1, t0\n"
                 "mov r0, t1\n",
                 MYTLVERTEX_FVF, g_IndexARGBVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
VerifyTexture(m_pBEM1Tex);
    AddTextureToLastShaderDef(m_pBEM1Tex);
VerifyTexture(m_pBEM1Tex);

    // (8) texm3x2tex
	AddShaderDef("Address: texm3x2tex",
                 "tex t0\n"
                 "texm3x2pad t1, t0\n"
                 "texm3x2tex t2, t0\n"
                 "mov r0, t2\n",
                 MYCUBETLVERTEX2_FVF, g_Texm2Vertices);
    AddTextureToLastShaderDef(m_pBrickTex);
    AddTextureToLastShaderDef(NULL);
    AddTextureToLastShaderDef(m_pColorCheckerTex);

    // (9) texm3x3tex
	AddShaderDef("Address: texm3x3tex",
                 "tex t0\n"
                 "texm3x3pad t1, t0\n"
                 "texm3x3pad t2, t0\n"
                 "texm3x3tex t3, t0\n"
                 "dp3 r0, t3, v0\n",
                 MYCUBETLVERTEX3_FVF, g_Cube3Vertices);
VerifyTexture(m_pBEM1Tex);
    AddTextureToLastShaderDef(m_pBEM1Tex);
VerifyTexture(m_pBEM1Tex);
    AddTextureToLastShaderDef(NULL);
    AddTextureToLastShaderDef(NULL);
    AddTextureToLastShaderDef(m_pCubeTex);

    // (10) texm3x3spec
	AddShaderDef("Address: texm3x3spec",
                 "tex t0\n"
                 "texm3x3pad t1, t0\n"
                 "texm3x3pad t2, t0\n"
                 "texm3x3spec t3, t0, c0\n"
                 "mov r0, t3\n",
                 MYCUBETLVERTEX3_FVF, g_Cube3Vertices);
VerifyTexture(m_pBEM1Tex);
    AddTextureToLastShaderDef(m_pBEM1Tex);
VerifyTexture(m_pBEM1Tex);
    AddTextureToLastShaderDef(NULL);
    AddTextureToLastShaderDef(NULL);
    AddTextureToLastShaderDef(m_pCubeTex);
    AddConstantsToLastShaderDef(fConstant, 4);

    // (11) texm3x3diff and texm3x3spec
	AddShaderDef("Address - texm3x3diff and texm3x3spec",
                 "tex t0\n"
                 "texm3x3pad t1, t0\n"
                 "texm3x3diff t2, t0\n"
                 "texm3x3spec t3, t0, c0\n"
                 "mov r0.rgb, t3\n"
                 "mov r0.a, t2\n",
                 MYCUBETLVERTEX3_FVF, g_Cube3Vertices, PSVERSION(255, 255));
VerifyTexture(m_pBEM1Tex);
    AddTextureToLastShaderDef(m_pBEM1Tex);
VerifyTexture(m_pBEM1Tex);
    AddTextureToLastShaderDef(NULL);
    AddTextureToLastShaderDef(m_pCubeTex);
    AddTextureToLastShaderDef(m_pCubeTex);
    AddConstantsToLastShaderDef(fConstant, 4);
}

bool CPSAddress::LoadTextures()
{
//    CImageLoader Loader;

//    if (NULL == (m_pCheckerData = Loader.Load(CIL_BMP, "checker.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load checker.bmp.  Aborting.\n");
//        return false;
//    }

//    if (NULL == (m_pCheckerTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pCheckerData)))
    if (NULL == (m_pCheckerTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("checker.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create checker texture.  Aborting.\n");
        return false; 
    }

//    if (NULL == (m_pColorCheckerData = Loader.Load(CIL_BMP, "colorchecker.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load Colorchecker.bmp.  Aborting.\n");
//        return false;
//    }

//    if (NULL == (m_pColorCheckerTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pColorCheckerData)))
    if (NULL == (m_pColorCheckerTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("colorchecker.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create color checker texture.  Aborting.\n");
        return false; 
    }

	// Bricks
//	if (NULL == (m_pBrickData = GenerateBrickTexture()))
//    {
//        WriteToLog("(ERROR) Failed to generate dp3 data.  Aborting.\n");
//        return false;
//    }
    if (NULL == (m_pBrickTex = GenerateBrickTexture()))
    {
        WriteToLog("(ERROR) Failed to create DP3 texture.  Aborting.\n");
        return false;
    }

/*
    m_pCubeData[0] = Loader.Load(CIL_BMP, "skyxpos.bmp", 1.0f);
    m_pCubeData[1] = Loader.Load(CIL_BMP, "skyxneg.bmp", 1.0f);
    m_pCubeData[2] = Loader.Load(CIL_BMP, "skyypos.bmp", 1.0f);
    m_pCubeData[3] = Loader.Load(CIL_BMP, "skyyneg.bmp", 1.0f);
    m_pCubeData[4] = Loader.Load(CIL_BMP, "skyzpos.bmp", 1.0f);
    m_pCubeData[5] = Loader.Load(CIL_BMP, "skyzneg.bmp", 1.0f);

    if (!(m_pCubeData[0] && m_pCubeData[1] && m_pCubeData[2] && m_pCubeData[3] && m_pCubeData[4] && m_pCubeData[5]))
    {
        WriteToLog("(ERROR) Failed to load cube map data.  Aborting.\n");
        return false;
    }

    m_pMode->nCubeFormat = 0;

    if (NULL == (m_pCubeTex = CreateCubicTexture(512, 512, 1, CDDS_TEXTURE_VIDEO | CDDS_TEXTURE_ALLFACES)))
    {
        WriteToLog("(ERROR) Failed to create cubemap (%08X).  Aborting.\n", GetLastError());
        return false;
    }
    
    if (NULL == (m_pSysCubeTex = CreateCubicTexture(512, 512, 1, CDDS_TEXTURE_SYSTEM | CDDS_TEXTURE_ALLFACES | CDDS_TEXTURE_LOCK)))
    {
        WriteToLog("(ERROR) Failed to create system memory cubemap (%08X).  Aborting.\n", GetLastError());
        return false;
    }
    
    for (int i = 0; i < 6; i++)
    {
        for (int j = 0; j < m_pSysCubeTex->m_pSrcSurface->GetNumAttachedSurfaces(); j++)
        {
            CDirectDrawSurface * pSurface = m_pSysCubeTex->m_pSrcSurface->GetCubicSurface(i)->GetAttachedSurface(j);
            pSurface->SetImageData(m_pCubeData[j]);
            RELEASE(pSurface);

            if (NULL != m_pRefTarget)
            {
                CDirectDrawSurface * pSurface = m_pSysCubeTex->m_pRefSurface->GetCubicSurface(i)->GetAttachedSurface(j);
                pSurface->SetImageData(m_pCubeData[j]);
                RELEASE(pSurface);
            }
        }
    } 
    
    if (!UpdateCubicTexture8(m_pSysCubeTex, m_pCubeTex))
        return false;
*/
    if (NULL == (m_pCubeTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("sky0.bmp"), D3DFMT_A8R8G8B8, TTYPE_CUBEMAP, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 512, 512)))
    {
        WriteToLog("(ERROR) Failed to create cubemap.  Aborting.\n");
        return false;
    }
     
//    ResetTextureFormats();

//    if (!RequestTextureFormats(DDPF_BUMPLUMINANCE, DDPF_RGB))
//    {
//        SkipTestRange(4, 4);
//        WriteToLog("(WARNING) No common BumpDuDv formats.\n");
//    }
//    else
//    {
//        m_pMode->nTextureFormat = 0;

//        if (NULL == (m_pBEM1Data = Loader.Load(CIL_BMP, "bem1.bmp", 1.0f)))
//        {
//            WriteToLog("(ERROR) Failed to load bem1.bmp.  Aborting.\n");
//            return false;
//        }
    
//        if (NULL == (m_pBEM1Tex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pBEM1Data)))

//        if (NULL == (m_pBEM1Tex = (CTexture8*)CreateTexture(m_pDevice, TEXT("bem1.bmp"), D3DFMT_V8U8, TTYPE_BUMPMAP, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
        if (NULL == (m_pBEM1Tex = CreateBumpMapTexture(m_pDevice, TEXT("bem1.bmp"))))
        {
            WriteToLog("(ERROR) Failed to create bump environment map texture.  Aborting.\n");
            return false; 
        }
VerifyTexture(m_pBEM1Tex);


//        if (NULL == (m_pBEM3Data = Loader.Load(CIL_BMP, "bem3.bmp", 1.0f)))
//        {
//            WriteToLog("(ERROR) Failed to load bem3.bmp.  Aborting.\n");
//            return false;
//        }
    
//        if (NULL == (m_pBEM3Tex = CreateTexture(128,128, CDDS_TEXTURE_VIDEO, m_pBEM1Data)))
//        if (NULL == (m_pBEM3Tex = (CTexture8*)CreateTexture(m_pDevice, TEXT("bem3.bmp"), D3DFMT_V8U8, TTYPE_BUMPMAP, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 128, 128)))
        if (NULL == (m_pBEM3Tex = CreateBumpMapTexture(m_pDevice, TEXT("bem3.bmp"))))
        {
            WriteToLog("(ERROR) Failed to create second bump environment map texture.  Aborting.\n");
            return false; 
        }
//    }
 
    return true;
}

bool CPSAddress::ExecuteTest(UINT uiTest)
{
    if (CPShader::ExecuteTest(uiTest))
    {
        SetTextureStageState(1, D3DTSS_BUMPENVMAT00, F2DW(1.0f));
        SetTextureStageState(1, D3DTSS_BUMPENVMAT01, F2DW(0.0f));
        SetTextureStageState(1, D3DTSS_BUMPENVMAT10, F2DW(0.0f));
        SetTextureStageState(1, D3DTSS_BUMPENVMAT11, F2DW(1.0f));
        SetTextureStageState(1, D3DTSS_BUMPENVLSCALE, F2DW(1.0f));
        SetTextureStageState(1, D3DTSS_BUMPENVLOFFSET, F2DW(0.0f));
        return true;
    }

    return false;
}

void CPSAddress::CommandLineHelp()
{
}

//******************************************************************************
CTexture8* CreateBumpMapTexture(CDevice8* pDevice, LPTSTR szName) {

    CTexture8* pd3dtSrc, *pd3dtDst;
    D3DSURFACE_DESC d3dsd;
    D3DLOCKED_RECT d3dlrSrc, d3dlrDst;
    LPDWORD pdwSrc;
    LPWORD pwDst;
    UINT i, j;

    pd3dtSrc = (CTexture8*)CreateTexture(pDevice, szName, D3DFMT_A8R8G8B8);
    if (!pd3dtSrc) {
        return NULL;
    }
    
    pd3dtSrc->GetLevelDesc(0, &d3dsd);

    pd3dtDst = (CTexture8*)CreateTexture(pDevice, d3dsd.Width, d3dsd.Height, D3DFMT_L6V5U5);
    if (!pd3dtDst) {
        ReleaseTexture(pd3dtSrc);
        return NULL;
    }

    pd3dtSrc->LockRect(0, &d3dlrSrc, NULL, 0);
    pd3dtDst->LockRect(0, &d3dlrDst, NULL, 0);

    pdwSrc = (LPDWORD)d3dlrSrc.pBits;
    pwDst = (LPWORD)d3dlrDst.pBits;

    for (i = 0; i < d3dsd.Height; i++) {

        for (j = 0; j < d3dsd.Width; j++) {

            pwDst[j] = (WORD)(((pdwSrc[j] & 0xFC) << 8) |
                       (((pdwSrc[j] >> 8) & 0xF8) << 2) |
                       (((pdwSrc[j] >> 16) & 0xF8) >> 3));
        }

        pdwSrc += d3dlrSrc.Pitch / 4;
        pwDst += d3dlrDst.Pitch / 2;
    }

    pd3dtSrc->UnlockRect(0);
    pd3dtDst->UnlockRect(0);
    ReleaseTexture(pd3dtSrc);

    return pd3dtDst;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\dstmod.cpp ===
// FILE:        dstmod.cpp
// DESC:        pixel shader dst mod conformance tests
// AUTHOR:      Cliff Hudson

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "PShader.h"
//#include "CImageLoader.h"

//CPSDestMod PSDestModTest;

extern MYTLVERTEX g_FourColorVertices[];

CPSDestMod::CPSDestMod()
{
    m_szTestName = TEXT("PSDestMod");
    m_szCommandKey = TEXT("PSDestMod");

//    m_pCheckerData = NULL;
    m_pCheckerTex = NULL;
    m_pColorCheckerTex = NULL;
//    m_pColorCheckerData = NULL;
    m_pDXLogoTex = NULL;
//    m_pDXLogoData = NULL;
    m_pDP3Tex = NULL;
//    m_pDP3Data = NULL;
}

bool CPSDestMod::TestTerminate()
{
    ReleaseTexture(m_pCheckerTex);
//    RELEASE(m_pCheckerData);
    ReleaseTexture(m_pColorCheckerTex);
//    RELEASE(m_pColorCheckerData);
    ReleaseTexture(m_pDXLogoTex);
//    RELEASE(m_pDXLogoData);
    ReleaseTexture(m_pDP3Tex);
//    RELEASE(m_pDP3Data);
    return CPShader::TestTerminate();
}

UINT CPSDestMod::TestInitialize()
{
    CPShader::TestInitialize();

    if (!LoadTextures())
        return D3DTESTINIT_ABORT;

    PopulateShaderInfo();
    SetTestRange(1, m_uNumShaders);

//    if (m_bSkipAllForCaps)
//        SkipTestRange(1, m_uNumShaders);

    return D3DTESTINIT_RUN;
}

void CPSDestMod::PopulateShaderInfo()
{
    float fConstants[8] = { 0.0f, 0.0f, 0.0f, 0.5f, 0.0f, 0.0f, 0.0f, 0.0f };
    
	// (1) Red, Green, Blue
	AddShaderDef("Dest Mask - Red, Green, Blue",
                 "tex t0\n"
                 "mov r0, c0\n"
                 "mov r1.rgb, t0\n"
                 "mul r0.rgb, t0, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, true);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 8);

    // (2) Alpha
	AddShaderDef("Dest Mask - Alpha",
                 "tex t0\n"
                 "mov r0, t0\n"
                 "mov r0.a, c0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, true);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 4);

    // (3) Red, Green, Blue, Alpha
	AddShaderDef("Dest Mask - Red, Green, Blue, Alpha",
                 "tex t0\n"
                 "mov r0, c1\n"
                 "mov r1, c0\n"
                 "mov r1.rgb, t0\n"
                 "mov r0.rgba, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, true);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 8);

/*
    // (4) Red
	AddShaderDef("Dest Mask - Red",
                 "tex t0\n"
                 "mov r1, c0\n"
                 "mov r1.r, t0\n"
                 "mul r0, t0, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 4);

    // (5) Green
	AddShaderDef("Dest Mask - Green",
                 "tex t0\n"
                 "mov r1, c0\n"
                 "mov r1.g, t0\n"
                 "mul r0, t0, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 4);

    // (6) Blue
	AddShaderDef("Dest Mask - Blue",
                 "tex t0\n"
                 "mov r1, c0\n"
                 "mov r1.b, t0\n"
                 "mul r0, t0, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 4);

    // (7) Red, Green
	AddShaderDef("Dest Mask - Red, Green",
                 "tex t0\n"
                 "mov r1, c0\n"
                 "mov r1.rg, t0\n"
                 "mul r0, t0, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 4);

    // (8) Red, Blue
	AddShaderDef("Dest Mask - Red, Blue",
                 "tex t0\n"
                 "mov r1, c0\n"
                 "mov r1.rb, t0\n"
                 "mul r0, t0, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 4);

    // (9) Green, Blue
	AddShaderDef("Dest Mask - Green, Blue",
                 "tex t0\n"
                 "mov r1, c0\n"
                 "mov r1.gb, t0\n"
                 "mul r0, t0, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 4);

    // (10) Red, Alpha
	AddShaderDef("Dest Mask - Red, Alpha",
                 "tex t0\n"
                 "mov r0, c1\n"
                 "mov r1, c0\n"
                 "mov r1.r, t0\n"
                 "mov r0.ra, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, true, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 8);

    // (11) Green, Alpha
	AddShaderDef("Dest Mask - Green, Alpha",
                 "tex t0\n"
                 "mov r0, c1\n"
                 "mov r1, c0\n"
                 "mov r1.g, t0\n"
                 "mov r0.ga, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, true, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 8);

    // (12) Blue, Alpha
	AddShaderDef("Dest Mask - Blue, Alpha",
                 "tex t0\n"
                 "mov r0, c1\n"
                 "mov r1, c0\n"
                 "mov r1.b, t0\n"
                 "mov r0.ba, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, true, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 8);

    // (13) Red, Green, Alpha
	AddShaderDef("Dest Mask - Red, Green, Alpha",
                 "tex t0\n"
                 "mov r0, c1\n"
                 "mov r1, c0\n"
                 "mov r1.rg, t0\n"
                 "mov r0.rga, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, true, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 8);

    // (14) Red, Blue, Alpha
	AddShaderDef("Dest Mask - Red, Blue, Alpha",
                 "tex t0\n"
                 "mov r0, c1\n"
                 "mov r1, c0\n"
                 "mov r1.rb, t0\n"
                 "mov r0.rba, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, true, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 8);

    // (15) Green, Blue, Alpha
	AddShaderDef("Dest Mask - Green, Blue, Alpha",
                 "tex t0\n"
                 "mov r0, c1\n"
                 "mov r1, c0\n"
                 "mov r1.gb, t0\n"
                 "mov r0.gba, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, true, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 8);
*/

}

bool CPSDestMod::LoadTextures()
{
//    CImageLoader Loader;
    
//    if (NULL == (m_pCheckerData = Loader.Load(CIL_BMP, "checker.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load checker.bmp.  Aborting.\n");
//        return false;
//    }
    
//    if (NULL == (m_pCheckerTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pCheckerData)))
    if (NULL == (m_pCheckerTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("checker.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create checker texture.  Aborting.\n");
        return false;
    }
   
//    if (NULL == (m_pColorCheckerData = Loader.Load(CIL_BMP, "colorchecker.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load Colorchecker.bmp.  Aborting.\n");
//        return false;
//    }

//    if (NULL == (m_pColorCheckerTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pColorCheckerData)))
    if (NULL == (m_pColorCheckerTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("colorchecker.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create color checker texture.  Aborting.\n");
        return false;
    }

//    if (NULL == (m_pDXLogoData = Loader.Load(CIL_BMP, "DXLogo.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load DXLogo.bmp.  Aborting.\n");
//        return false;
//    }

//    if (NULL == (m_pDXLogoTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pDXLogoData)))
    if (NULL == (m_pDXLogoTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("dxlogo.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create DX Logo texture.  Aborting.\n");
        return false;
    }

//    if (NULL == (m_pDP3Data = Loader.Load(CIL_BMP, "DP3.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load DP3.bmp.  Aborting.\n");
//        return false;
//    }

//    if (NULL == (m_pDP3Tex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pDP3Data)))
    if (NULL == (m_pDP3Tex = (CTexture8*)CreateTexture(m_pDevice, TEXT("dp3.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
//    if (NULL == (m_pDP3Tex = (CTexture8*)CreateTexture(m_pDevice, TEXT("DP3.bmp"), D3DFMT_A8R8G8B8, TTYPE_NORMALMAP, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create DP3 texture.  Aborting.\n");
        return false;
    } 
    
    return true;
}

bool CPSDestMod::ExecuteTest(UINT uiTest)
{
    return CPShader::ExecuteTest(uiTest);
}

void CPSDestMod::CommandLineHelp()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\pointtex\exe\sources.inc ===
TARGETNAME=PointTex
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_pnttex.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_pshade
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    PShader.cpp \
    op.cpp \
    address.cpp \
    register.cpp \
    srcmod.cpp \
    dstmod.cpp \
    instmod.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\modulex.h ===
#define PREPEND_MODULE(Suffix) pshader##Suffix
#define MODULE_STRING "pshader"
#pragma comment(linker, "/include:_pshader_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\PShader.cpp ===
// FILE:        PShader.cpp
// DESC:        pixel shader conformance tests
// AUTHOR:      Cliff Hudson

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "PShader.h"

//CD3DWindowFramework App;

#define UVe 0.99

#ifndef D3DRGBA
    #define D3DRGBA(r, g, b, a) \
        ((D3DCOLOR) \
         (   (((long)((a) * 255)) << 24) | (((long)((r) * 255)) << 16) \
         |   (((long)((g) * 255)) << 8) | (long)((b) * 255) \
         ))
#endif

MYTLVERTEX g_FourColorVertices[4] =
{
    { 0, 1, 0, 1, D3DRGBA(1, 0, 0, 1), D3DRGBA(0, 0, 0, 1), 0.0, 1.0 },
    { 0, 0, 0, 1, D3DRGBA(0, 1, 0, 1), D3DRGBA(0, 0, 0, 1), 0.0, 0.0 },
    { 1, 1, 0, 1, D3DRGBA(1, 1, 1, 1), D3DRGBA(1, 1, 1, 1), 1.0, 1.0 },
    { 1, 0, 0, 1, D3DRGBA(0, 0, 1, 1), D3DRGBA(1, 1, 1, 1), 1.0, 0.0 }
};

MYTLVERTEX g_FourColorVertices2[4] =
{
    { 0, 1, 0, 1, D3DRGBA(0.5f, 0,	  0,    1), D3DRGBA(0,    0,    0,    1), 0.0, 1.0 },
    { 0, 0, 0, 1, D3DRGBA(0,    0.5f, 0,    1), D3DRGBA(0,    0,    0,    1), 0.0, 0.0 },
    { 1, 1, 0, 1, D3DRGBA(0.5f, 0.5f, 0.5f, 1), D3DRGBA(0.5f, 0.5f, 0.5f, 1), 1.0, 1.0 },
    { 1, 0, 0, 1, D3DRGBA(0,    0,    0.5f, 1), D3DRGBA(0.5f, 0.5f, 0.5f, 1), 1.0, 0.0 }
};

MYTLVERTEX g_FourBrickVertices[4] =
{
    { 0, 1, 0, 1, D3DRGBA(1, 0, 0, 1), D3DRGBA(0, 0, 0, 1), 0.0, 4.0 },
    { 0, 0, 0, 1, D3DRGBA(0, 1, 0, 1), D3DRGBA(0, 0, 0, 1), 0.0, 0.0 },
    { 1, 1, 0, 1, D3DRGBA(1, 1, 1, 1), D3DRGBA(1, 1, 1, 1), 4.0, 4.0 },
    { 1, 0, 0, 1, D3DRGBA(0, 0, 1, 1), D3DRGBA(1, 1, 1, 1), 4.0, 0.0 }
};

MYTLVERTEX g_FourColorAlphaVertices[4] =
{
    { 0, 1, 0, 1, D3DRGBA(1, 0, 0, 0.5), D3DRGBA(0, 0, 0, 1), 0.0, 1.0 },
    { 0, 0, 0, 1, D3DRGBA(0, 1, 0, 0.5), D3DRGBA(0, 0, 0, 1), 0.0, 0.0 },
    { 1, 1, 0, 1, D3DRGBA(1, 1, 1, 0.5), D3DRGBA(1, 1, 1, 1), 1.0, 1.0 },
    { 1, 0, 0, 1, D3DRGBA(0, 0, 1, 0.5), D3DRGBA(1, 1, 1, 1), 1.0, 0.0 }
};

MYTLVERTEX g_TexKillVertices[4] =
{
    { 0, 1, 0, 1, D3DRGBA(1, 0, 0, 1), D3DRGBA(0, 0, 0, 1),  0.0,  0.5 },
    { 0, 0, 0, 1, D3DRGBA(0, 1, 0, 1), D3DRGBA(0, 0, 0, 1), -0.5, -0.5 },
    { 1, 1, 0, 1, D3DRGBA(1, 1, 1, 1), D3DRGBA(1, 1, 1, 1),  0.5,  0.5 },
    { 1, 0, 0, 1, D3DRGBA(0, 0, 1, 1), D3DRGBA(1, 1, 1, 1),  0.5,  0.0 }
};

MYTLVERTEX g_IndexARGBVertices[4] =
{
    { 0, 1, 0, 1, D3DRGBA(  0, UVe,   0, UVe), D3DRGBA(0, 0, 0, 1), 0.0, 1.0 },
    { 0, 0, 0, 1, D3DRGBA(UVe, UVe, UVe, UVe), D3DRGBA(0, 0, 0, 1), 0.0, 0.0 },
    { 1, 1, 0, 1, D3DRGBA(  0,   0,   0,   0), D3DRGBA(1, 1, 1, 1), 1.0, 1.0 },
    { 1, 0, 0, 1, D3DRGBA(UVe,   0, UVe,   0), D3DRGBA(1, 1, 1, 1), 1.0, 0.0 }
};

MYCUBETLVERTEX2 g_Cube2Vertices[4] =
{
    { 0, 1, 0, 1, D3DRGBA(1, 0, 0, 1), D3DRGBA(0, 0, 0, 1), 0, 1, 1, 0, 0, 0, 1, 0 },
    { 0, 0, 0, 1, D3DRGBA(0, 1, 0, 1), D3DRGBA(0, 0, 0, 1), 0, 0, 1, 0, 0, 0, 1, 0 },
    { 1, 1, 0, 1, D3DRGBA(1, 1, 1, 1), D3DRGBA(1, 1, 1, 1), 1, 1, 1, 0, 0, 0, 1, 0 },
    { 1, 0, 0, 1, D3DRGBA(0, 0, 1, 1), D3DRGBA(1, 1, 1, 1), 1, 0, 1, 0, 0, 0, 1, 0 }
};

MYCUBETLVERTEX3 g_Cube3Vertices[4] =
{
    { 0, 1, 0, 1, D3DRGBA(1, 0, 0, 1), D3DRGBA(0, 0, 0, 1), 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1},
    { 0, 0, 0, 1, D3DRGBA(0, 1, 0, 1), D3DRGBA(0, 0, 0, 1), 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1},
    { 1, 1, 0, 1, D3DRGBA(1, 1, 1, 1), D3DRGBA(1, 1, 1, 1), 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1},
    { 1, 0, 0, 1, D3DRGBA(0, 0, 1, 1), D3DRGBA(1, 1, 1, 1), 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}
};

MYCUBETLVERTEX2 g_Texm2Vertices[4] =
{
    { 0, 1, 0, 1, D3DRGBA(1, 0, 0, 1), D3DRGBA(0, 0, 0, 1), 0, 2,	1, 0, 0,	0, 1, 0 },
    { 0, 0, 0, 1, D3DRGBA(0, 1, 0, 1), D3DRGBA(0, 0, 0, 1), 0, 0,	1, 0, 0,	0, 1, 0 },
    { 1, 1, 0, 1, D3DRGBA(1, 1, 1, 1), D3DRGBA(1, 1, 1, 1), 2, 2,	1, 0, 0,	0, 1, 0 },
    { 1, 0, 0, 1, D3DRGBA(0, 0, 1, 1), D3DRGBA(1, 1, 1, 1), 2, 0,	1, 0, 0,	0, 1, 0 }
};

MYCUBETLVERTEX3 g_Texm3Vertices[4] =
{
    { 0, 1, 0, 1, D3DRGBA(1, 0, 0, 1), D3DRGBA(0, 0, 0, 1), 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1},
    { 0, 0, 0, 1, D3DRGBA(0, 1, 0, 1), D3DRGBA(0, 0, 0, 1), 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1},
    { 1, 1, 0, 1, D3DRGBA(1, 1, 1, 1), D3DRGBA(1, 1, 1, 1), 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1},
    { 1, 0, 0, 1, D3DRGBA(0, 0, 1, 1), D3DRGBA(1, 1, 1, 1), 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}
};

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CPShader*       pPShaderTest;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 6 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pPShaderTest = new CPSOps();
                break;
            case 1:
                pPShaderTest = new CPSAddress();
                break;
            case 2:
                pPShaderTest = new CPSRegister();
                break;
            case 3:
                pPShaderTest = new CPSSrcMod();
                break;
            case 4:
                pPShaderTest = new CPSDestMod();
                break;
            case 5:
                pPShaderTest = new CPSInstMod();
                break;
        }

        if (!pPShaderTest) {
            return FALSE;
        }

        // Initialize the scene
        if (!pPShaderTest->Create(pDisplay)) {
            pPShaderTest->Release();
            return FALSE;
        }

        bRet = pPShaderTest->Exhibit(pnExitCode);

        bQuit = pPShaderTest->AbortedExit();

        // Clean up the scene
        pPShaderTest->Release();
    }

    return bRet;
}

CPShader::CPShader()
{
    m_szTestName = TEXT("PShader");
    m_szCommandKey = TEXT("PShader");

    m_nPass = m_nFail = 0;
    m_uNumShaders = 0;
    m_bStretch = true;
    m_bExit = FALSE;
}

void CPShader::CommandLineHelp()
{
}

UINT CPShader::TestInitialize()
{
    float x[4], y[4];

    if (!DoCapsCheck())
    {
        m_bSkipAllForCaps = true;
        return D3DTESTINIT_ABORT;
    }

    DWORD dwWidth = m_pDisplay->GetWidth();
    DWORD dwHeight = m_pDisplay->GetHeight();

    if (m_bStretch) {
        x[0] = (float)m_vpTest.X;
        y[0] = (float)(m_vpTest.Y + m_vpTest.Height);
        x[1] = (float)m_vpTest.X;
        y[1] = (float)m_vpTest.Y;
        x[2] = (float)(m_vpTest.X + m_vpTest.Width);
        y[2] = (float)(m_vpTest.Y + m_vpTest.Height);
        x[3] = (float)(m_vpTest.X + m_vpTest.Width);
        y[3] = (float)m_vpTest.Y;
    }
    else {
        x[0] = 0.0f;
        y[0] = 1.0f;
        x[1] = 0.0f;
        y[1] = 0.0f;
        x[2] = 1.0f;
        y[2] = 1.0f;
        x[3] = 1.0f;
        y[3] = 0.0f;
    }

    for (UINT i = 0; i < 4; i++)
    {
        g_FourColorVertices[i].x = x[i];
        g_FourColorVertices[i].y = y[i];

        g_FourColorVertices2[i].x = x[i];
        g_FourColorVertices2[i].y = y[i];

        g_FourBrickVertices[i].x = x[i];
        g_FourBrickVertices[i].y = y[i];

        g_FourColorAlphaVertices[i].x = x[i];
        g_FourColorAlphaVertices[i].y = y[i];

        g_TexKillVertices[i].x = x[i];
        g_TexKillVertices[i].y = y[i];

        g_IndexARGBVertices[i].x = x[i];
        g_IndexARGBVertices[i].y = y[i];

        g_Cube2Vertices[i].x = x[i];
        g_Cube2Vertices[i].y = y[i];

        g_Cube3Vertices[i].x = x[i];
        g_Cube3Vertices[i].y = y[i];

		g_Texm2Vertices[i].x = x[i];
		g_Texm2Vertices[i].y = y[i];

		g_Texm3Vertices[i].x = x[i];
		g_Texm3Vertices[i].y = y[i];
    }

    m_bSkipAllForCaps = false;
    return D3DTESTINIT_RUN;
}

bool CPShader::TestTerminate()
{
//    SHADERVECTOR::iterator iShader = m_vShaders.begin();
    UINT i;

//    while (iShader != m_vShaders.end())
    for (i = 0; i < m_uNumShaders; i++)
    {
        ReleaseVertexBuffer(m_Shaders[i].pSrcVB);
//        RELEASE(iShader->pRefVB);

        if (m_Shaders[i].dwHandle) {
            m_pDevice->SetPixelShader(NULL);
            m_pDevice->DeletePixelShader(m_Shaders[i].dwHandle);
        }

//        iShader++;
    }

	return true;
}


bool CPShader::ProcessFrame(void)
{
    bool bResult;
    char szBuffer[64];

    bResult = GetCompareResult(0.15f, 0.78f, 0);

    if (bResult)
    {
        (m_fIncrementForward) ? m_nPass++ : m_nPass--;
        sprintf(szBuffer,"$yPass: %d, Fail: %d", m_nPass, m_nFail);
        Pass();
    }
    else
    {
        (m_fIncrementForward) ? m_nFail++ : m_nFail--;
        sprintf(szBuffer,"$yPass: %d, Fail: %d", m_nPass, m_nFail);
        Fail();
    }

   WriteStatus("$gOverall Results",szBuffer);
   EndTestCase();
   return bResult;
}


void CPShader::AddShaderDef(char *pName, char *pCode, DWORD dwFVF, void *pVertices, bool bAlpha, DWORD dwRequired)
{
    char szCode[1024];
    HRESULT hResult;
//    SHADERVECTOR::iterator iShader = m_vShaders.insert(m_vShaders.end());
    PMYSHADER pShader = &m_Shaders[m_uNumShaders++];

    memset(pShader, 0, sizeof(MYSHADER));

    pShader->bSetup = true;
    pShader->pName = pName;
    pShader->pCode = pCode;
    pShader->dwConstantsStart = 0;
    pShader->dwHandle = 0;
    pShader->pSrcVB = NULL;
    pShader->pRefVB = NULL;
    pShader->dwVertexFormat = dwFVF;
    pShader->dwVertexFormatSize = GetVertexSize(dwFVF);
    pShader->dwRequired = dwRequired;
    pShader->bAlpha = bAlpha;

#ifdef UNDER_XBOX
	if (D3DSHADER_VERSION_MAJOR(dwRequired) == 6 && D3DSHADER_VERSION_MINOR(dwRequired) == 9) {
        sprintf(szCode, "xps.1.1\n%s", pCode);
    }
    else {
#endif

	    // Reset 0.5 pixel shaders to 1.0
	    if (D3DSHADER_VERSION_MAJOR(dwRequired) == 0 && D3DSHADER_VERSION_MINOR(dwRequired) == 5)
		    dwRequired = PSVERSION(1,0);

    //    if (VERSIONMASK(m_dwSupported) < VERSIONMASK(pShader->dwRequired) &&
    //		D3DSHADER_VERSION_MAJOR(pShader->dwRequired) != 255)
    //        return;

        sprintf(szCode, "ps.%d.%02d\n%s", D3DSHADER_VERSION_MAJOR(dwRequired),
                                        D3DSHADER_VERSION_MINOR(dwRequired), pCode);
#ifdef UNDER_XBOX
    }
#endif

#ifndef UNDER_XBOX

    DWORD dwFlags = 0;
    LPD3DXBUFFER pXCode = NULL;
    LPD3DXBUFFER pXError = NULL;
    hResult = D3DXAssembleShader(szCode, strlen(szCode), dwFlags, NULL, &pXCode, &pXError);

    if (FAILED(hResult))
    {
        WriteToLog("(ERROR) Pixel shader assembly failed:  %08X\n", hResult);
        WriteToLog("        Shader Name:\n%s\n", pName);
        WriteToLog("        Shader Code:\n%s", szCode);
        WriteToLog("        Error:\n%s\n", pXError->GetBufferPointer());
        pShader->bSetup = false;
    }
    else
    {
        if (FAILED(m_pDevice->CreatePixelShader((DWORD *) pXCode->GetBufferPointer(), &(pShader->dwHandle))))
        {
            WriteToLog("(ERROR) CreatePixelShader failed for shader '%s' - '%X'\n",
                       pName, GetLastError());
            pShader->bSetup = false;
        }
    }

    RELEASE(pXCode);
    RELEASE(pXError);

#else

    if (FAILED(m_pDevice->CreatePixelShaderAsm(szCode, strlen(szCode), &(pShader->dwHandle))))
    {
        WriteToLog("(ERROR) CreatePixelShader failed for shader '%s' - '%X'\n",
                   pName, GetLastError());
        pShader->bSetup = false;
    }

#endif

    if (!CreateLoadedVertexBuffers(dwFVF, pVertices, &(pShader->pSrcVB), &(pShader->pRefVB)))
    {
        pShader->bSetup = false;
    }
}

void CPShader::AddShaderDef(char *pName, char *pCode, DWORD dwFVF, void *pVertices)
{
    AddShaderDef(pName, pCode, dwFVF, pVertices, false, DEFAULT_PSVERSION);
} 

void CPShader::AddShaderDef(char *pName, char *pCode, DWORD dwFVF, void *pVertices, bool bAlpha)
{
    AddShaderDef(pName, pCode, dwFVF, pVertices, bAlpha, DEFAULT_PSVERSION);
} 

void CPShader::AddShaderDef(char *pName, char *pCode, DWORD dwFVF, void *pVertices, DWORD dwRequired)
{
    AddShaderDef(pName, pCode, dwFVF, pVertices, false, dwRequired);
} 

void CPShader::AddTextureToLastShaderDef(CTexture8 * pTexture)
{
//    MYSHADER &Shader = m_vShaders.back();

//    Shader.vTextures.push_back(pTexture);

    if (m_uNumShaders) {
        MYSHADER* pShader = &m_Shaders[m_uNumShaders-1];
        pShader->pd3dt[pShader->uNumTextures++] = pTexture;
    }
}

void CPShader::SetConstantsStart(DWORD dwStart)
{
//    MYSHADER &Shader = m_vShaders.back();

//    Shader.dwConstantsStart = dwStart;

    if (m_uNumShaders) {
        MYSHADER* pShader = &m_Shaders[m_uNumShaders-1];
        pShader->dwConstantsStart = dwStart;
    }
}

void CPShader::AddConstantsToLastShaderDef(float a, float b, float c, float d)
{
//    MYSHADER &Shader = m_vShaders.back();
    
//    Shader.vConstants.push_back(a);
//    Shader.vConstants.push_back(b);
//    Shader.vConstants.push_back(c);
//    Shader.vConstants.push_back(d);

    if (m_uNumShaders) {
        MYSHADER* pShader = &m_Shaders[m_uNumShaders-1];
        pShader->fConstants[pShader->uNumConstants++] = a;
        pShader->fConstants[pShader->uNumConstants++] = b;
        pShader->fConstants[pShader->uNumConstants++] = c;
        pShader->fConstants[pShader->uNumConstants++] = d;
    }
}

void CPShader::AddConstantsToLastShaderDef(float f[4])
{
//    MYSHADER &Shader = m_vShaders.back();
    
//    Shader.vConstants.push_back(f[0]);
//    Shader.vConstants.push_back(f[1]);
//    Shader.vConstants.push_back(f[2]);
//    Shader.vConstants.push_back(f[3]);

    if (m_uNumShaders) {
        MYSHADER* pShader = &m_Shaders[m_uNumShaders-1];
        memcpy(&pShader->fConstants[pShader->uNumConstants], f, 4 * sizeof(float));
        pShader->uNumConstants += 4;
    }
}

void CPShader::AddConstantsToLastShaderDef(float *f, DWORD dwCount)
{
//    MYSHADER &Shader = m_vShaders.back();

//    for (DWORD d = 0; d < dwCount; d++)
//        Shader.vConstants.push_back(f[d]);

    if (m_uNumShaders) {
        MYSHADER* pShader = &m_Shaders[m_uNumShaders-1];
        for (DWORD d = 0; d < dwCount; d++) {
            pShader->fConstants[pShader->uNumConstants++] = f[d];
        }
    }
}

bool CPShader::CreateLoadedVertexBuffers(DWORD dwFVFType, void *pData, CVertexBuffer8 **ppSource, CVertexBuffer8 **ppRef)
{
    CVertexBuffer8 *pSrc, *pRef;

//    pSrc = CreateVertexBuffer(dwFVFType, 4, NULL, false);
    pSrc = CreateVertexBuffer(m_pDevice, pData, 4 * GetVertexSize(dwFVFType), 0, dwFVFType);

    if (!pSrc)
    {
        WriteToLog("(ERROR) Failed to create source vertex buffer. (%08X)\n", GetLastError());
        return false;
    }
/*
    pRef = CreateVertexBuffer(dwFVFType, 4, NULL, true);

    if (!pRef)
    {
        WriteToLog("(ERROR) Failed to create reference vertex buffer. (%08X)\n", GetLastError());
        RELEASE(pSrc);
        return false;
    }

    void *pVertexTarget = NULL;

    if (pSrc->Lock((VOID **) &pVertexTarget))
    {
        memcpy(pVertexTarget, pData, 4*GetVertexSize(dwFVFType));
        pSrc->Unlock();
        pVertexTarget = NULL;
    }
    else
    {
        WriteToLog("(ERROR) Failed to load source vertex buffer.\n");
        RELEASE(pSrc);
        RELEASE(pRef);
        return false;
    }

    if (pRef->Lock((VOID **) &pVertexTarget))
    {
        memcpy(pVertexTarget, pData, 4*GetVertexSize(dwFVFType));
        pRef->Unlock();
        pVertexTarget = NULL;
    }
    else
    {
        WriteToLog("(ERROR) Failed to load reference vertex buffer.\n");
        RELEASE(pSrc);
        RELEASE(pRef);
        return false;
    }
*/
    *ppSource = pSrc;
    *ppRef = NULL;//pRef;
    return true;
}


bool CPShader::SetupBasicScene(UINT uiTest)
{
//    MYSHADER &Shader = m_vShaders[uiTest - 1];
    MYSHADER &Shader = m_Shaders[uiTest - 1];

    if (FAILED(m_pDevice->SetPixelShader(Shader.dwHandle)))
    {
        WriteToLog("(ERROR) Failed to set pixel shader. (%08X)\n", GetLastError());
        return false;
    }

//    DWORD dwSrcHandle, dwRefHandle;

//    if (!GetPixelShaderHandles(Shader.dwHandle, &dwSrcHandle, &dwRefHandle))
//    {
//        WriteToLog("(ERROR) Unable to get pixel shader handles. (%08X)\n", GetLastError());
//        return false;
//    }
  
    if (!SetVertexShader(Shader.dwVertexFormat, Shader.dwVertexFormat))
    {
        WriteToLog("(ERROR) SetVertexShader failed. (%08X)\n", GetLastError());
        return false;
    }

    if (!SetStreamSource((DWORD) 0, Shader.pSrcVB, Shader.pRefVB, Shader.dwVertexFormatSize, (DWORD) 0)) 
    {
        WriteToLog("(ERROR) SetStreamSource failed. %08X\n", GetLastError());
        return false;
    }

    DWORD dwCurrentTexIndex = 0;
//    TEXTUREVECTOR &TexVec = Shader.vTextures;
//    TEXTUREVECTOR::iterator iCurrentTexture = TexVec.begin();
    UINT iCurrentTexture;

//    while (iCurrentTexture != TexVec.end())
//    {
//        SetTexture(dwCurrentTexIndex, *iCurrentTexture);
//        dwCurrentTexIndex++;
//        iCurrentTexture++;
//    }

if (strcmp(Shader.pName, "Address: texbem") == 0) {
VerifyTexture(Shader.pd3dt[0]);
}
    for (iCurrentTexture = 0; iCurrentTexture < Shader.uNumTextures; iCurrentTexture++) {
        SetTexture(dwCurrentTexIndex, Shader.pd3dt[iCurrentTexture]);
        SetTextureStageState(dwCurrentTexIndex++, D3DTSS_TEXCOORDINDEX, 0);
    }

    if (dwCurrentTexIndex < 4) {
        SetTexture(dwCurrentTexIndex, NULL);
    }

//    if (Shader.vConstants.size() > 0)
    if (Shader.uNumConstants > 0)
    {
//        if (((Shader.vConstants.size() % 4) != 0) || (Shader.vConstants.size() > 24))
        if (((Shader.uNumConstants % 4) != 0) || (Shader.uNumConstants > 24))
        {
            WriteToLog("(ERROR) Invalid number of constants specified\n");
            return false;
        }
        if (FAILED(m_pDevice->SetPixelShaderConstant(Shader.dwConstantsStart, &(Shader.fConstants[0]), Shader.uNumConstants/4)))
        {
            WriteToLog("(ERROR) SetPixelShaderConstant failed. (%08X)\n", GetLastError());
            return false;
        }
    }

    if (Shader.bAlpha)
        SetRenderState(D3DRS_ALPHABLENDENABLE, (DWORD) TRUE);
    else
        SetRenderState(D3DRS_ALPHABLENDENABLE, (DWORD) FALSE);

    SetRenderState(D3DRS_CULLMODE, (DWORD) D3DCULL_NONE);
#ifndef UNDER_XBOX
    SetRenderState(D3DRS_CLIPPING, (DWORD) FALSE);
#endif // !UNDER_XBOX
    SetRenderState(D3DRS_LIGHTING, (DWORD) FALSE);
    SetRenderState(D3DRS_ZENABLE, (DWORD) FALSE);
    SetRenderState(D3DRS_SRCBLEND, (DWORD) D3DBLEND_SRCALPHA);
    SetRenderState(D3DRS_DESTBLEND, (DWORD) D3DBLEND_INVSRCALPHA);

    SetRenderState(D3DRS_SPECULARENABLE, FALSE);

    return true;
}

bool CPShader::ExecuteTest(UINT uiTest)
{
    char szBuffer[256];

	// Check if we need to skip 255 shader
#if 0
	if (D3DSHADER_VERSION_MAJOR(m_Shaders[uiTest-1].dwRequired) == 255 && !(m_Shaders[uiTest-1].bSetup))
	{
		SkipTests(1);
		return false;
	}
#endif

    sprintf(szBuffer, "%s", m_Shaders[uiTest - 1].pName);
    BeginTestCase(szBuffer);
    WriteStatus("Name:", m_Shaders[uiTest - 1].pName);

#if 0
	if (D3DSHADER_VERSION_MAJOR(m_Shaders[uiTest-1].dwRequired) != 255)
	{
        if (VERSIONMASK(m_Shaders[uiTest-1].dwRequired) > VERSIONMASK(m_dwSupported))
        {
            WriteToLog("(SKIP) Shader version %d.%d required, %d.%d supported.\n",
                       D3DSHADER_VERSION_MAJOR(m_Shaders[uiTest-1].dwRequired),
                       D3DSHADER_VERSION_MINOR(m_Shaders[uiTest-1].dwRequired),
                       D3DSHADER_VERSION_MAJOR(m_dwSupported),
                       D3DSHADER_VERSION_MINOR(m_dwSupported));
            SkipTests(1);
            return false;
        }

    //	WriteToLog("Code:\nps %d,%d\n%s",	D3DSHADER_VERSION_MAJOR(m_vShaders[uiTest-1].dwRequired),
    //										D3DSHADER_VERSION_MINOR(m_vShaders[uiTest-1].dwRequired),
    //										m_vShaders[uiTest - 1].pCode);

        if (!(m_Shaders[uiTest-1].bSetup))
        {
            WriteToLog("(FAIL) Shader setup failed.\n");
            Fail();
            return false;
        }
    }
#else
    if (!(m_Shaders[uiTest-1].bSetup))
    {
        WriteToLog("(FAIL) Shader setup failed.\n");
        Fail();
        return false;
    }
#endif

    if (!SetupBasicScene(uiTest))
    {
        WriteToLog("(FAIL) Basic scene setup failed.\n");
        Fail();
        return false;
    }

    return true;
}

void CPShader::SceneRefresh()
{
    if (BeginScene())
    {
        HRESULT hResult = m_pSrcDevice8->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

        if (D3D_OK != hResult)
        { 
            WriteToLog("(ERROR) DrawPrimitive on the source failed. %08X\n", hResult);
            Fail();
        }
/*
        hResult = m_pRefDevice8->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

        if (D3D_OK != hResult)
        {
            WriteToLog("(ERROR) DrawPrimitive on the reference failed. %08X\n", hResult);
            Fail();
        }
*/
        if (!EndScene())
        {
            WriteToLog("(ERROR) EndScene() failed: %08X\n", GetLastError());
            Fail();
        }
    }
    else
    {
        WriteToLog("(ERROR) BeginScene() failed: %08X\n", GetLastError());
        Fail();
    }
}

bool CPShader::DoCapsCheck()
{
	// Check if caps from 2 GetDeviceCaps() functions are in agreement
	if (m_dwVersion == 0x0800)
	{
		HRESULT		hr;
		D3DCAPS8	D3DCaps;
		
		// Source device
		hr = m_pSrcDevice8->GetDeviceCaps(&D3DCaps);
		if (FAILED(hr))
		{
			WriteToLog("PShader: GetDeviceCaps() call failed\n");
			return false;
		}
		else
		{
			if (D3DCaps.PixelShaderVersion != m_d3dcaps.PixelShaderVersion)
			{
				WriteToLog("PShader: Caps are not consistent on source device\n");
				return false;
			}
		}

		// Reference device
//		hr = m_pRefDevice8->GetDeviceCaps(&D3DCaps);
//		if (FAILED(hr))
//		{
//			WriteToLog("PShader: GetDeviceCaps() call failed\n");
//			return false;
//		}
//		else
//		{
//			if (D3DCaps.PixelShaderVersion != m_pAdapter->Devices[m_pMode->nRefDevice].Desc.dwPixelShaderVersion)
//			{
//				WriteToLog("PShader: Caps are not consistent on reference device\n");
//				return false;
//			}
//		}
	}

    bool bPass = false;
//    DEVICEDESC SrcDesc = m_pAdapter->Devices[m_pMode->nSrcDevice].Desc;;

    if (m_dwVersion < 0x0800)
    {
        WriteToLog("ERROR: Test requires at least DirectX 8.0.\n");
    }
    else
    {
        m_dwSupported = m_d3dcaps.PixelShaderVersion;
        WriteToLog("Pixel shader version:  %8X\n", m_dwSupported);
        WriteToLog("Pixel shader version:  %d.%d\n", D3DSHADER_VERSION_MAJOR(m_dwSupported),
                                                     D3DSHADER_VERSION_MINOR(m_dwSupported));
        WriteToLog("Pixel shader maximum:  %f\n", m_d3dcaps.MaxPixelShaderValue);

        if (0xFFFF0000 != (m_dwSupported & 0xFFFF0000))
            WriteToLog("ERROR: High word of version (%4X) should be FFFF.\n",
                       (m_dwSupported >> 16));

        if ((D3DSHADER_VERSION_MAJOR(m_dwSupported) < 1) &&
            (D3DSHADER_VERSION_MINOR(m_dwSupported) < 5))
        {
            WriteToLog("Minimum pixel shader version of 0.5 required for this test.\n");
        }
        else
            bPass = true;
    }

    return bPass;
}

bool CPShader::UpdateCubicTexture8(CTexture8 *pSrc, CTexture8 *pDst)
{
    HRESULT hResult;

    hResult = m_pSrcDevice8->UpdateTexture(pSrc, pDst);

    if (FAILED(hResult))
    {
        WriteToLog("Source UpdateTexture() failed with HResult = %X.\n",
                   hResult);
        return false;
    }
/*
    if (NULL != m_pRefTarget)
    {
        hResult = m_pRefDevice8->UpdateTexture(pSrc->m_pRefCubeTexture8,
                                               pDst->m_pRefCubeTexture8);

        if (FAILED(hResult))
        {
            WriteToLog("Reference UpdateTexture() failed with HResult = %X.\n",
                       GetHResultString(hResult).c_str());
            return false;
        }
    }
*/
    return true;
}

CTexture8* CPShader::GenerateBrickTexture()
{
//	IMAGEDATA	*Data = new IMAGEDATA[64 * 64];
	int			i, j;
    D3DLOCKED_RECT d3dlr;
    LPDWORD Data;

#ifndef UNDER_XBOX
    CTexture8* pd3dt = (CTexture8*)CreateTexture(m_pDevice, 64, 64, D3DFMT_A8R8G8B8);
#else
    CTexture8* pd3dt = (CTexture8*)CreateTexture(m_pDevice, 64, 64, D3DFMT_LIN_A8R8G8B8);
#endif // UNDER_XBOX
    if (!pd3dt) {
        return NULL;
    }

    if (FAILED(pd3dt->LockRect(0, &d3dlr, NULL, 0))) {
        return NULL;
    }

	// Fill with (0, 0, -1) - (128, 128, 0)
//	for (i = 0; i < (64*64); i++)
//		Data[i].dwColor = (256 << 24) | (128 << 16) | (128 << 8) | (0 << 0);
    for (i = 0, Data = (LPDWORD)d3dlr.pBits; i < 64; i++) {
        for (j = 0; j < 64; j++) {
            Data[j] = (256 << 24) | (128 << 16) | (128 << 8) | (0 << 0);
        }
        Data += d3dlr.Pitch / 4;
    }

	// Make "up" lines (0, 0.5, -0.866025) - (128, 191, 17)
//	for (i = 0; i < 8; i++)
//		for (j = 0; j < 64; j++)
//			Data[i*8*64 + j].dwColor = (256 << 24) | (128 << 16) | (191 << 8) | (17 << 0);
    for (i = 0, Data = (LPDWORD)d3dlr.pBits; i < 8; i++) {
        for (j = 0; j < 64; j++) {
            Data[j] = (256 << 24) | (128 << 16) | (191 << 8) | (17 << 0);
        }
        Data += d3dlr.Pitch / 4 * 8;
    }

	// Make "down" lines (0, -0.5, -0.866025) - (0, 64, 17)
//	for (i = 0; i < 8; i++)
//		for (j = 0; j < 64; j++)
//			Data[(i*8+7)*64 + j].dwColor = (256 << 24) | (128 << 16) | (64 << 8) | (17 << 0);
    for (i = 0, Data = (LPDWORD)d3dlr.pBits + (d3dlr.Pitch / 4 * 7); i < 8; i++) {
        for (j = 0; j < 64; j++) {
			Data[j] = (256 << 24) | (128 << 16) | (64 << 8) | (17 << 0);
        }
        Data += d3dlr.Pitch / 4 * 8;
    }

	// Make "left" lines (-0.5, 0, -0.866025) - (64, 128, 17)
	for (i = 0, Data = (LPDWORD)d3dlr.pBits; i < 8; i++)
		for (j = 0; j < 64; j++)
			if ( ((i & 0x01) && j & 0x08) || ( 0 == (i & 0x01) && 0 == (j & 0x08)))
//				Data[i*8 + j*64].dwColor = (256 << 24) | (64 << 16) | (128 << 8) | (17 << 0);
				Data[i*8 + j*(d3dlr.Pitch/4)] = (256 << 24) | (64 << 16) | (128 << 8) | (17 << 0);


	// Make "right" lines (0.5, 0, -0.866025) - (191, 128, 17)
	for (i = 0, Data = (LPDWORD)d3dlr.pBits; i < 8; i++)
		for (j = 0; j < 64; j++)
			if ( ((i & 0x01) && 0 == (j & 0x08)) || ( 0 == (i & 0x01) && (j & 0x08)))
//				Data[(i*8+7) + j*64].dwColor = (256 << 24) | (191 << 16) | (128 << 8) | (17 << 0);
				Data[(i*8+7) + j*(d3dlr.Pitch/4)] = (256 << 24) | (191 << 16) | (128 << 8) | (17 << 0);

//				Data[(i*8 + j*64) / 64 * (d3dlr.Pitch/4) + (i*8 + j*64) % 64] = (256 << 24) | (64 << 16) | (128 << 8) | (17 << 0);
//				Data[((i*8+7) + j*64) / 64 * (d3dlr.Pitch/4) + ((i*8+7) + j*64) % 64] = (256 << 24) | (191 << 16) | (128 << 8) | (17 << 0);


    if (FAILED(pd3dt->UnlockRect(0))) {
        return NULL;
    }

//	CImageData *pImageData = new CImageData();
//	if(false == pImageData->SetData(64, 64, Data))
//	{
//		delete pImageData;
//		delete [] Data;
//		return NULL;
//	}
//	delete [] Data;
//	return pImageData;

#ifndef UNDER_XBOX
    return pd3dt;
#else
    CTexture8* pd3dt2 = (CTexture8*)CreateTexture(m_pDevice, 64, 64, D3DFMT_A8R8G8B8);
    CopyTexture(pd3dt2, NULL, pd3dt, NULL, D3DX_FILTER_POINT);
    ReleaseTexture(pd3dt);
    return pd3dt2;
#endif // UNDER_XBOX
}

//******************************************************************************
BOOL CPShader::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CPShader::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CPShader::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}

//******************************************************************************
void CPShader::VerifyTexture(CTexture8* pd3dt) {

    if (pd3dt == NULL) {
        OutputDebugString(TEXT("CPShader: The given texture pointer is NULL\r\n"));
        __asm int 3;
    }
    pd3dt->AddRef();
    pd3dt->Release();
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\op.cpp ===
// FILE:        op.cpp
// DESC:        pixel shader op conformance tests
// AUTHOR:      Cliff Hudson

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "PShader.h"
//#include "CImageLoader.h"

#ifndef D3DRGBA
    #define D3DRGBA(r, g, b, a) \
        ((D3DCOLOR) \
         (   (((long)((a) * 255)) << 24) | (((long)((r) * 255)) << 16) \
         |   (((long)((g) * 255)) << 8) | (long)((b) * 255) \
         ))
#endif

//CPSOps PSOpTest;

extern MYTLVERTEX g_FourColorVertices[];
extern MYTLVERTEX g_FourColorVertices2[];
extern MYTLVERTEX g_FourBrickVertices[];

CPSOps::CPSOps()
{
    m_szTestName = TEXT("PSOps");
    m_szCommandKey = TEXT("PSOps");

//    m_pCheckerData = NULL;
    m_pCheckerTex = NULL;
//    m_pChecker2Data = NULL;
    m_pChecker2Tex = NULL;
//    m_pDP3Data = NULL;
    m_pDP3Tex = NULL;
//    m_pBrickData = NULL;
    m_pBrickTex = NULL;
//    m_pGradientData = NULL;
    m_pGradientTex = NULL;
//	m_pDXLogoData = NULL;
	m_pDXLogoTex = NULL;
}

bool CPSOps::TestTerminate()
{
    ReleaseTexture(m_pCheckerTex);
//    RELEASE(m_pCheckerData);
    ReleaseTexture(m_pChecker2Tex);
//    RELEASE(m_pChecker2Data);
    ReleaseTexture(m_pDP3Tex);
//    RELEASE(m_pDP3Data);
    ReleaseTexture(m_pBrickTex);
//    RELEASE(m_pBrickData);
    ReleaseTexture(m_pGradientTex);
//    RELEASE(m_pGradientData);
    ReleaseTexture(m_pDXLogoTex);
//    RELEASE(m_pDXLogoData);
    return CPShader::TestTerminate();
}

UINT CPSOps::TestInitialize()
{
    CPShader::TestInitialize();

    if (!LoadTextures())
        return D3DTESTINIT_ABORT;

    PopulateShaderInfo();
    SetTestRange(1, m_uNumShaders);

//    if (m_bSkipAllForCaps)
//        SkipTestRange(1, m_uNumShaders);

    return D3DTESTINIT_RUN;
}

void CPSOps::PopulateShaderInfo()
{
    // ****************************** add ******************************
	// (1) add
	AddShaderDef("add",
                 "tex t0\n"
                 "add r0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);

    // (2) add_x2
	AddShaderDef("add_x2",
                 "tex t0\n"
                 "add_x2 r0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices2, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pChecker2Tex);

    // (3) add_x4
	AddShaderDef("add_x4",
                 "tex t0\n"
                 "add_x4 r0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices2, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pChecker2Tex);

    // (4) add_d2
	AddShaderDef("add_d2",
                 "tex t0\n"
                 "add_d2 r0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);

    // (5) add_sat
	AddShaderDef("add_sat",
                 "tex t0\n"
#ifndef UNDER_XBOX
                 "add_sat r1, t0, v0\n"
				 "mov_d2 r0, r1\n",
#else
                 "add r1, t0, v0\n"
//				 "mov_d2 r0, r1_usgn\n",
				 "mov_d2 r0, r1\n",
#endif
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);

    
	// ****************************** dp3 ******************************
    // (6) dp3
	AddShaderDef("dp3",
                 "tex t0\n"
				 "dp3 r0, c0_sgn, t0_sgn\n"
				 "mul r0, v0, r0\n",
                 MYTLVERTEX_FVF, g_FourBrickVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pBrickTex);
    AddConstantsToLastShaderDef(0.408248f, 0.408248f, -0.816497f, 1.0f);

    // (7) dp3_x2
	AddShaderDef("dp3_x2",
                 "tex t0\n"
				 "dp3_x2 r0, c0_sgn, t0_sgn\n"
				 "mul_d2 r0, v0, r0\n",
                 MYTLVERTEX_FVF, g_FourBrickVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pBrickTex);
    AddConstantsToLastShaderDef(0.408248f, 0.408248f, -0.816497f, 1.0f);

    // (8) dp3_x4
	AddShaderDef("dp3_x4",
                 "tex t0\n"
				 "dp3_x4 r0, c0_sgn, t0_sgn\n"
				 "mul_d2 r0, v0, r0\n",
                 MYTLVERTEX_FVF, g_FourBrickVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pBrickTex);
    AddConstantsToLastShaderDef(0.204124f, 0.204124f, -0.408248f, 1.0f);

    // (9) dp3_d2
	AddShaderDef("dp3_d2",
                 "tex t0\n"
				 "dp3_d2 r0, c0_sgn, t0_sgn\n"
				 "mul_x2 r0, v0, r0\n",
                 MYTLVERTEX_FVF, g_FourBrickVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pBrickTex);
    AddConstantsToLastShaderDef(0.408248f, 0.408248f, -0.816497f, 1.0f);

    // (10) dp3_sat
	AddShaderDef("dp3_sat",
                 "tex t0\n"
#ifndef UNDER_XBOX
				 "dp3_sat r0, c0, t0_sgn\n"
				 "mul_d2 r0, v0, r0\n",
#else
				 "dp3 r0, c0_sgn, t0_sgn\n"
//				 "mul_d2 r0, v0, r0_usgn\n",
				 "mul_d2 r0, v0, r0\n",
#endif
                 MYTLVERTEX_FVF, g_FourBrickVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pBrickTex);
    AddConstantsToLastShaderDef(0.408248f, 0.408248f, -0.816497f, 1.0f);

    
	// ****************************** lrp ******************************
	// (11) lrp
    AddShaderDef("lrp",
                 "tex t0\n"
                 "lrp r0, c0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(0.5, 0.5, 0.5, 0.5);

	// (12) lrp_x2
    AddShaderDef("lrp_x2",
                 "tex t0\n"
                 "lrp_x2 r0, c0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(0.5, 0.5, 0.5, 0.5);

	// (13) lrp_x4
    AddShaderDef("lrp_x4",
                 "tex t0\n"
                 "lrp_x4 r0, c0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(0.5, 0.5, 0.5, 0.5);

	// (14) lrp_d2
    AddShaderDef("lrp_d2",
                 "tex t0\n"
                 "lrp_d2 r0, c0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(0.3f, 0.3f, 0.3f, 0.3f);

	// (15) lrp_sat
    AddShaderDef("lrp_sat",
                 "tex t0\n"
#ifndef UNDER_XBOX
                 "lrp_sat r0, c0, t0, v0\n"
				 "mov_d2 r0, r0\n",
#else
                 "lrp r0, c0, t0, v0\n"
//				 "mov_d2 r0, r0_usgn\n",
				 "mov_d2 r0, r0\n",
#endif
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(0.7f, 0.7f, 0.7f, 0.7f);


    // ****************************** mad ******************************
    // (16) mad
	AddShaderDef("mad",
                 "tex t0\n"
                 "mad r0, c0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(0.5, 0.5, 0.5, 0.5);

    // (17) mad_x2
	AddShaderDef("mad_x2",
                 "tex t0\n"
                 "mad_x2 r0, v0, c0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(0.25, 0.25, 0.25, 0.25);

    // (18) mad_x4
	AddShaderDef("mad_x4",
                 "tex t0\n"
                 "mad_x4 r0, v0, c0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pChecker2Tex);
    AddConstantsToLastShaderDef(0.25, 0.25, 0.25, 0.25);

    // (19) mad_d2
	AddShaderDef("mad_d2",
                 "tex t0\n"
                 "mad_d2 r0, c0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(0.5, 0.5, 0.5, 0.5);

    // (20) mad_sat
	AddShaderDef("mad_sat",
                 "tex t0\n"
#ifndef UNDER_XBOX
                 "mad_sat r0, c0, t0, v0\n"
				 "mov_d2 r0, r0\n",
#else
                 "mad r0, c0, t0, v0\n"
//				 "mov_d2 r0, r0_usgn\n",
				 "mov_d2 r0, r0\n",
#endif
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(0.5, 0.5, 0.5, 0.5);

    // ****************************** mov ******************************
    // (21) mov
    AddShaderDef("mov",
                 "tex t0\n"
                 "mov r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pChecker2Tex);

    // (22) mov_x2
    AddShaderDef("mov_x2",
                 "tex t0\n"
                 "mov_x2 r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pChecker2Tex);

    // (23) mov_x4
    AddShaderDef("mov_x4",
                 "tex t0\n"
                 "mov_x4 r1, v0\n"
				 "mul r0, r1, c0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(0.2f, 0.2f, 0.2f, 0.2f);

    // (24) mov_d2
    AddShaderDef("mov_d2",
                 "tex t0\n"
                 "mov_d2 r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);

    // (25) mov_sat
    AddShaderDef("mov_sat",
                 "tex t0\n"
                 "mov_x2 r0, t0\n"
#ifndef UNDER_XBOX
				 "mov_sat r1, r0\n"
				 "mov_d2 r0.rgb, r1\n",
#else
				 "mov r1, r0\n"
//				 "mov_d2 r0.rgb, r1_usgn\n",
				 "mov_d2 r0.rgb, r1\n",
#endif
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pGradientTex);

    // ****************************** mul ******************************
    // (26) mul
    AddShaderDef("mul",
                 "tex t0\n"
                 "mul r0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pChecker2Tex);

    // (27) mul_x2
    AddShaderDef("mul_x2",
                 "tex t0\n"
                 "mul_x2 r0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pChecker2Tex);

    // (28) mul_x4
    AddShaderDef("mul_x4",
                 "tex t0\n"
                 "mul_x4 r0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pChecker2Tex);

    // (29) mul_d2
    AddShaderDef("mul_d2",
                 "tex t0\n"
                 "mul_d2 r0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);

    // (30) mul_sat
    AddShaderDef("mul_sat",
                 "tex t0\n"
                 "add r1, t0, c0\n"
#ifndef UNDER_XBOX
				 "mul_sat r0, r1, v0\n"
				 "add r0.rgb, r0, -c0\n",
#else
				 "mul r0, r1, v0\n"
//				 "add r0.rgb, r0_usgn, -c0\n",
				 "add r0.rgb, r0, -c0\n",
#endif
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(0.5f, 0.5f, 0.5f, 0.5f);

    // ****************************** sub ******************************
    // (31) sub
	AddShaderDef("sub",
                 "tex t0\n"
                 "tex t1\n"
                 "mov r1, t1\n"
				 "sub r0, t0, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pGradientTex);

    // (32) sub_x2
	AddShaderDef("sub_x2",
                 "tex t0\n"
				 "tex t1\n"
				 "mov r1, t1\n"
                 "sub_x2 r0, t0, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pGradientTex);

    // (33) sub_x4
	AddShaderDef("sub_x4",
                 "tex t0\n"
                 "sub_x4 r0, t0, c0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(0.8f, 0.8f, 0.8f, 0.8f);

    // (34) sub_d2
	AddShaderDef("sub_d2",
                 "tex t0\n"
                 "sub_d2 r0, c0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(0.5, 0.5, 0.5, 0.5);

    // (35) sub_sat
	AddShaderDef("sub_sat",
                 "tex t0\n"
#ifndef UNDER_XBOX
                 "sub_sat r1, c0, t0\n"
				 "mov_d2 r0, r1\n",
#else
                 "sub r1, c0, t0\n"
//				 "mov_d2 r0, r1_usgn\n",
				 "mov_d2 r0, r1\n",
#endif
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(1.5f, 1.5f, 1.5f, 1.5f);

    // ****************************** nop ******************************
	// (36) nop
    AddShaderDef("nop",
                 "tex t0\n" 
                 "nop\n"
                 "mov r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);

	// (37) nop_x2
    AddShaderDef("nop",
                 "tex t0\n" 
                 "nop_x2\n"
                 "mov r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pChecker2Tex);

	// (38) nop_x4
    AddShaderDef("nop",
                 "tex t0\n" 
                 "nop_x4\n"
                 "mov r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pGradientTex);

	// (39) nop_d2
    AddShaderDef("nop",
                 "tex t0\n" 
                 "nop_d2\n"
                 "mov r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pDXLogoTex);

	// (40) nop_sat
    AddShaderDef("nop",
                 "tex t0\n" 
#ifndef UNDER_XBOX
                 "nop_sat\n"
#else
                 "nop\n"
#endif
                 "mov r0, t0\n",
                 MYTLVERTEX_FVF, g_FourBrickVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pBrickTex);

    // ****************************** cnd ******************************
    // (41) cnd
	AddShaderDef("cnd",
                 "tex t0\n"
                 "tex t1\n"
                 "mov r0, t0\n"
                 "cnd r0, r0.a, r0, t1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pGradientTex);
    AddTextureToLastShaderDef(m_pCheckerTex);

    // (42) cnd_x2
	AddShaderDef("cnd_x2",
                 "tex t0\n"
                 "tex t1\n"
                 "mov r0, t0\n"
                 "cnd_x2 r0, r0.a, r0, t1\n"
				 "mov r0, 1-r0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pGradientTex);
    AddTextureToLastShaderDef(m_pCheckerTex);

    // (43) cnd_x4
	AddShaderDef("cnd_x4",
                 "tex t0\n"
                 "tex t1\n"
                 "mov r0, t0\n"
                 "cnd_x4 r0, r0.a, r0, t1\n"
				 "mov_d2 r0, r0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pGradientTex);
    AddTextureToLastShaderDef(m_pCheckerTex);

    // (44) cnd_d2
	AddShaderDef("cnd_d2",
                 "tex t0\n"
                 "tex t1\n"
                 "mov r0, t0\n"
                 "cnd_d2 r0, r0.a, r0, t1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pGradientTex);
    AddTextureToLastShaderDef(m_pCheckerTex);

    // (45) cnd_sat
	AddShaderDef("cnd_sat",
                 "tex t0\n"
                 "tex t1\n"
                 "mov_x2 r0, t0\n"
#ifndef UNDER_XBOX
                 "cnd_sat r1, r0.a, r0, t1\n"
				 "mov_d2 r0, r1\n",
#else
                 "cnd r1, r0.a, r0, t1\n"
//				 "mov_d2 r0, r1_usgn\n",
				 "mov_d2 r0, r1\n",
#endif
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pGradientTex);
    AddTextureToLastShaderDef(m_pCheckerTex);

    // *************************** cnd pairing ***************************
    // (46) cnd pairing
	AddShaderDef("cnd: pairing",
				 "def c0, 0, 0, 0, 1.0\n"
				 "def c1, 0, 0, 0, 0.4\n"
				 "mov r0, c0\n"
				 "mov r1, c1\n"
				 "mov r0.a, r1.a\n"
				 "+cnd r0.rgb, r0.a, c0.a, r0.a\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
}

bool CPSOps::LoadTextures()
{
//    CImageLoader Loader;
    
    // Checker
//	if (NULL == (m_pCheckerData = Loader.Load(CIL_BMP, "checker.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load checker.bmp.  Aborting.\n");
//        return false;
//    }
//    if (NULL == (m_pCheckerTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pCheckerData)))
    if (NULL == (m_pCheckerTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("checker.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create checker texture.  Aborting.\n");
        return false;
    }
    
    // Checker2
//	if (NULL == (m_pChecker2Data = Loader.Load(CIL_BMP, "checker2.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load checker2.bmp.  Aborting.\n");
//        return false;
//    }
//    if (NULL == (m_pChecker2Tex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pChecker2Data)))
    if (NULL == (m_pChecker2Tex = (CTexture8*)CreateTexture(m_pDevice, TEXT("checker2.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create checker texture.  Aborting.\n");
        return false;
    }
    
    // DP3
//	if (NULL == (m_pDP3Data = Loader.Load(CIL_BMP, "DP3.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load DP3.bmp.  Aborting.\n");
//        return false;
//    }
//    if (NULL == (m_pDP3Tex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pDP3Data)))
    if (NULL == (m_pDP3Tex = (CTexture8*)CreateTexture(m_pDevice, TEXT("dp3.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create DP3 texture.  Aborting.\n");
        return false;
    }

    // DXLogo
//	if (NULL == (m_pDXLogoData = Loader.Load(CIL_BMP, "DXLogo.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load DXLogo.bmp.  Aborting.\n");
//        return false;
//    }
//    if (NULL == (m_pDXLogoTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pDXLogoData)))
    if (NULL == (m_pDXLogoTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("dxlogo.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create DXLogo texture.  Aborting.\n");
        return false;
    }

	// Bricks
//	if (NULL == (m_pBrickData = GenerateBrickTexture()))
//    {
//        WriteToLog("(ERROR) Failed to generate dp3 data.  Aborting.\n");
//        return false;
//    }
//    if (NULL == (m_pBrickTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pBrickData)))
    if (NULL == (m_pBrickTex = GenerateBrickTexture()))
    {
        WriteToLog("(ERROR) Failed to create DP3 texture.  Aborting.\n");
        return false;
    }

    // Gradient
	DWORD dwColors[4] =
    {
        D3DRGBA(0, 1, 0, 1),
        D3DRGBA(0, 1, 0, 1),
        D3DRGBA(1, 1, 1, 0),
        D3DRGBA(1, 1, 1, 0)
    };
//    if (NULL == (m_pGradientData = Loader.LoadGradient(64, 64, dwColors)))
//    {
//        WriteToLog("(ERROR) Failed to create gradient data.  Aborting.\n");
//        return false;
//    }
//    if (NULL == (m_pGradientTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pGradientData)))
    if (NULL == (m_pGradientTex = CreateGradientTexture(m_pDevice, 64, 64, dwColors)))
    {
        WriteToLog("(ERROR) Failed to create gradient texture.  Aborting.\n");
        return false;
    }

    return true;
}

bool CPSOps::ExecuteTest(UINT uiTest)
{
    return CPShader::ExecuteTest(uiTest);
}

void  CPSOps::CommandLineHelp()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\register.cpp ===
// FILE:        register.cpp
// DESC:        pixel shader reg conformance tests
// AUTHOR:      Cliff Hudson

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "PShader.h"
//#include "CImageLoader.h"

//CPSRegister PSRegisterTest;

extern MYTLVERTEX g_FourColorVertices[];

CPSRegister::CPSRegister()
{
    m_szTestName = TEXT("PSRegister");
    m_szCommandKey = TEXT("PSRegister");

//    m_pCheckerData = NULL;
    m_pCheckerTex = NULL;
    m_pColorCheckerTex = NULL;
//    m_pColorCheckerData = NULL;
    m_pDXLogoTex = NULL;
//    m_pDXLogoData = NULL;
    m_pDP3Tex = NULL;
//    m_pDP3Data = NULL;
}

bool CPSRegister::TestTerminate()
{
    ReleaseTexture(m_pCheckerTex);
//    RELEASE(m_pCheckerData);
    ReleaseTexture(m_pColorCheckerTex);
//    RELEASE(m_pColorCheckerData);
    ReleaseTexture(m_pDXLogoTex);
//    RELEASE(m_pDXLogoData);
    ReleaseTexture(m_pDP3Tex);
//    RELEASE(m_pDP3Data);
    return CPShader::TestTerminate();
}

UINT CPSRegister::TestInitialize()
{
    CPShader::TestInitialize();

    if (!LoadTextures())
        return D3DTESTINIT_ABORT;

    PopulateShaderInfo();
    SetTestRange(1, m_uNumShaders);

//    if (m_bSkipAllForCaps)
//        SkipTestRange(1, m_uNumShaders);

    return D3DTESTINIT_RUN;
}

void CPSRegister::PopulateShaderInfo()
{
    float fConstants[24] =
        {
            0.0f, 0.0f, 0.0f, 0.0f,
            0.2f, 0.2f, 0.2f, 0.2f,  
            0.4f, 0.4f, 0.4f, 0.4f,
            0.6f, 0.6f, 0.6f, 0.6f,
            0.8f, 0.8f, 0.8f, 0.8f,
            1.0f, 1.0f, 1.0f, 1.0f
        };

    // (1) t0
	AddShaderDef("mov from t0",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "mov r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);

    // (2) t1
	AddShaderDef("mov from t1",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "mov r0, t1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    
    // (3) t2
	AddShaderDef("mov from t2",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "mov r0, t2\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);

    // (4) t3
	AddShaderDef("mov from t3",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "mov r0, t3\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);

    // (5) v0
	AddShaderDef("mov from v0",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "mov r0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);

    // (6) v1
	AddShaderDef("mov from v1",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "mov r0, v1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);

    // (7) t0 + v0
	AddShaderDef("t0 + v0",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "add r0, t0, v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
   
    // (8) t0 + c0
	AddShaderDef("t0 + c0",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "add r0, t0, c0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    AddConstantsToLastShaderDef(fConstants, 4);
    SetConstantsStart(0);
    
    // (9) t0 + c1
    AddShaderDef("t0 + c1",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "add r0, t0, c1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    AddConstantsToLastShaderDef(fConstants + 4, 4);
    SetConstantsStart(1);
     
    // (10) t0 + c2
    AddShaderDef("t0 + c2",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "add r0, t0, c2\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    AddConstantsToLastShaderDef(fConstants + 8, 4);
    SetConstantsStart(2);

    // (11) t0 + c3
	AddShaderDef("t0 + c3",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "add r0, t0, c3\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    AddConstantsToLastShaderDef(fConstants + 12, 4);
    SetConstantsStart(3);

    // (12) t0 + c4
	AddShaderDef("t0 + c4",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "add r0, t0, c4\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    AddConstantsToLastShaderDef(fConstants + 16, 4);
    SetConstantsStart(4);

    // (13) t0 + c5
	AddShaderDef("t0 + c5",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "add r0, t0, c5\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    AddConstantsToLastShaderDef(fConstants + 20, 4);
    SetConstantsStart(5);

    // (14) c1*t0 + c0
	AddShaderDef("c0*t0 + c1",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "mad r0, c1, t0, c0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    AddConstantsToLastShaderDef(fConstants, 24);

    // (15) c2*t0 + c0
    AddShaderDef("c2*t0 + c0",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "mad r0, c2, t0, c0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    AddConstantsToLastShaderDef(fConstants, 24);

    // (16) c3*t0 + c0
	AddShaderDef("c3*t0 + c0",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "mad r0, c3, t0, c0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    AddConstantsToLastShaderDef(fConstants, 24);

    // (17) c4*t0 + c0
	AddShaderDef("c4*t0 + c0",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "mad r0, c4, t0, c0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    AddConstantsToLastShaderDef(fConstants, 24);

    // (18) c5*t0 + c0
	AddShaderDef("c5*t0 + c0",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "mad r0, c5, t0, c0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    AddConstantsToLastShaderDef(fConstants, 24);

    // (19) c3*v0 + c0
	AddShaderDef("c3*v0 + c0",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "mad r0, c3, v0, c0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    AddConstantsToLastShaderDef(fConstants, 24);

    // (20) c3*v1 + c0
    AddShaderDef("c3*v1 + c0",
                 "tex t0\n"
                 "tex t1\n"
                 "tex t2\n"
                 "tex t3\n"
                 "mad r0, c3, v1, c0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);
    AddConstantsToLastShaderDef(fConstants, 24);


    // (21) add to t0 
	AddShaderDef("add to t0",
                 "mov r0, c0\n"
                 "add t0, v0, r0\n"
				 "add r0, r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1,1));
    AddConstantsToLastShaderDef(fConstants, 4);
	
    // (22) sub to t1 
	AddShaderDef("sub to t1",
                 "tex t0\n"
                 "mov r1, c0\n"
                 "sub t1, t0, v0\n"
				 "add r0, r1, t1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1,1));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 4);

	// (23) mul to t2
	AddShaderDef("mul to t2",
                 "tex t0\n"
                 "mov r0, c0\n"
                 "mul t2, t0, c1\n"
				 "add r0, r0, t2\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1,1));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 4);
    AddConstantsToLastShaderDef(fConstants + 16, 4);

	// (24) lrp to t3
	AddShaderDef("lrp to t3",
                 "tex t0\n"
                 "mov r0, c0\n"
                 "lrp t3, t0, c1, v0\n"
				 "add r0, r0, t3\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1,1));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 4);
    AddConstantsToLastShaderDef(fConstants + 16, 4);
}

bool CPSRegister::LoadTextures()
{
//    CImageLoader    Loader;
    
//    if (NULL == (m_pCheckerData = Loader.Load(CIL_BMP, "checker.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load checker.bmp.  Aborting.\n");
//        return false;
//    }
    
//    if (NULL == (m_pCheckerTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pCheckerData)))
    if (NULL == (m_pCheckerTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("checker.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create checker texture.  Aborting.\n");
        return false;
    }
   
//    if (NULL == (m_pColorCheckerData = Loader.Load(CIL_BMP, "colorchecker.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load Colorchecker.bmp.  Aborting.\n");
//        return false;
//    }

//    if (NULL == (m_pColorCheckerTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pColorCheckerData)))
    if (NULL == (m_pColorCheckerTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("colorchecker.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create color checker texture.  Aborting.\n");
        return false;
    }

//    if (NULL == (m_pDXLogoData = Loader.Load(CIL_BMP, "DXLogo.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load DXLogo.bmp.  Aborting.\n");
//        return false;
//    }

//    if (NULL == (m_pDXLogoTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pDXLogoData)))
    if (NULL == (m_pDXLogoTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("dxlogo.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create DX Logo texture.  Aborting.\n");
        return false;
    }

//    if (NULL == (m_pDP3Data = Loader.Load(CIL_BMP, "DP3.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load DP3.bmp.  Aborting.\n");
//        return false;
//    }

//    if (NULL == (m_pDP3Tex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pDP3Data)))
    if (NULL == (m_pDP3Tex = (CTexture8*)CreateTexture(m_pDevice, TEXT("dp3.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create DP3 texture.  Aborting.\n");
        return false;
    } 

    return true;
}

bool CPSRegister::ExecuteTest(UINT uiTest)
{
    return CPShader::ExecuteTest(uiTest);
}

void CPSRegister::CommandLineHelp()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\PShader.h ===
// FILE:        pshader.h
// DESC:        pixel shader class header for pixel shader conformance tests
// AUTHOR:      Cliff Hudson

#ifndef _PSHADER_H_
#define _PSHADER_H_

//#include <d3d8.h>
//#include <d3dx8.h>
//#include <ddraw.h>
//#include "TestFrameBase.h"
//#include "CD3DTest.h"
//#include "CShapes.h"
//#include <vector>

//USETESTFRAME

#define DEFAULT_PSVERSION (DWORD)D3DPS_VERSION(1,0)
#define PSVERSION(a, b) ((DWORD)D3DPS_VERSION((a), (b)))
#define VERSIONMASK(_version) (_version & 0x0000FFFF)
/*
typedef struct _MYTLVERTEX 
{
    float x, y, z, w;
    DWORD a, b;
    float u, v;
} MYTLVERTEX, *PMYTLVERTEX;
*/
struct MYTLVERTEX 
{
    float x, y, z, w;
    DWORD a, b;
    float u, v;
};

#define MYTLVERTEX_FVF (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1)

typedef struct _MYCUBETLVERTEX2
{
    float x, y, z, w;
    DWORD a, b;
    float u0, v0;
    float u1, v1, w1;
    float u2, v2, w2; 
} MYCUBETLVERTEX2, * PMYCUBETLVERTEX2;

#define MYCUBETLVERTEX2_FVF (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX3 | D3DFVF_TEXCOORDSIZE2(0) | D3DFVF_TEXCOORDSIZE3(1) | D3DFVF_TEXCOORDSIZE3(2))

typedef struct _MYCUBETLVERTEX3
{
    float x, y, z, w;
    DWORD a, b;
    float u0, v0;
    float u1, v1, w1; 
    float u2, v2, w2; 
    float u3, v3, w3; 
} MYCUBETLVERTEX3, * PMYCUBETLVERTEX3;

#define MYCUBETLVERTEX3_FVF (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX4 | D3DFVF_TEXCOORDSIZE2(0) | D3DFVF_TEXCOORDSIZE3(1) | D3DFVF_TEXCOORDSIZE3(2) | D3DFVF_TEXCOORDSIZE3(3))

//typedef std::vector<CTexture *> TEXTUREVECTOR;

typedef struct
{
    char *pName;                   // pixel shader name
    char *pCode;                   // pixel shader code (ASCII)
    DWORD dwHandle;                // pixel shader handle
//    std::vector<float> vConstants; // constant vector
    float fConstants[256];
    UINT uNumConstants;
    DWORD dwConstantsStart;        // constant start
    DWORD dwRequired;              // base pixel shader version
    CVertexBuffer8 *pSrcVB;         // src vertex buffer
    CVertexBuffer8 *pRefVB;         // ref vertex buffer
    DWORD dwVertexFormat;          // vertex format
    DWORD dwVertexFormatSize;      // vertex format size
//    TEXTUREVECTOR vTextures;       // texture vector
    CTexture8* pd3dt[8];
    UINT uNumTextures;
    bool bAlpha;                   // alpha blend flag
    bool bSetup;                   // setup flag
} MYSHADER, * PMYSHADER;

//typedef std::vector<MYSHADER> SHADERVECTOR;

class CPShader : public TESTFRAME(CD3DTest)
{
    public:
        CPShader();
        virtual UINT TestInitialize(void);
        virtual bool TestTerminate(void);
        virtual void CommandLineHelp(void);
        virtual bool ProcessFrame(void);
        virtual bool ExecuteTest(UINT);
        virtual void SceneRefresh(void);

        virtual BOOL    AbortedExit(void);

    protected:

        virtual void    ProcessInput();
        virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                            WPARAM wParam, LPARAM lParam);

    protected:
        bool DoCapsCheck();
        virtual bool LoadTextures() = 0;
        virtual void PopulateShaderInfo() = 0;

        void AddShaderDef(char *pName, char *pCode, DWORD dwFVF, void *pVertices);
        void AddShaderDef(char *pName, char *pCode, DWORD dwFVF, void *pVertices, bool bAlpha);
        void AddShaderDef(char *pName, char *pCode, DWORD dwFVF, void *pVertices, DWORD dwRequired);
        void AddShaderDef(char *pName, char *pCode, DWORD dwFVF, void *pVertices, bool bAlpha, DWORD dwRequired);

        void AddTextureToLastShaderDef(CTexture8 * pTexture);
        void SetConstantsStart(DWORD dwStart);
        void AddConstantsToLastShaderDef(float a, float b, float c, float d);
        void AddConstantsToLastShaderDef(float f[4]);
        void AddConstantsToLastShaderDef(float *f, DWORD dwCount);

        bool UpdateCubicTexture8(CTexture8 * pSrcTexture, CTexture8 * pTargetTexture);
		CTexture8*		GenerateBrickTexture(void);

        void VerifyTexture(CTexture8* pd3dt);

    private:
        bool SetupBasicScene(UINT);
        bool CreateLoadedVertexBuffers(DWORD dwFVFType, void *pData, CVertexBuffer8 **ppSource, CVertexBuffer8 **ppRef);

    protected:
//        SHADERVECTOR m_vShaders;
        MYSHADER m_Shaders[64];
        UINT m_uNumShaders;
        DWORD m_dwSupported;
        int m_nPass;
        int m_nFail;
        bool m_bSkipAllForCaps;
		DWORD			m_dwCurrentTestNumber;

        bool m_bStretch;

        BOOL            m_bExit;
};

class CPSOps : public CPShader
{
    public:
        CPSOps();

        UINT TestInitialize(void);
        bool ExecuteTest(UINT);
        bool TestTerminate(void);
        void CommandLineHelp(void);

    protected:
        bool LoadTextures();
        void PopulateShaderInfo();

//        CImageData		*m_pCheckerData;
        CTexture8		*m_pCheckerTex;
//        CImageData		*m_pChecker2Data;
        CTexture8		*m_pChecker2Tex;
//        CImageData		*m_pDP3Data;
        CTexture8		*m_pDP3Tex;
//        CImageData		*m_pBrickData;
        CTexture8		*m_pBrickTex;
//        CImageData		*m_pGradientData;
        CTexture8		*m_pGradientTex;
//        CImageData		*m_pDXLogoData;
        CTexture8		*m_pDXLogoTex;
};

class CPSRegister : public CPShader
{
    public:
        CPSRegister();

        UINT TestInitialize(void);
        bool ExecuteTest(UINT);
        bool TestTerminate(void);
        void CommandLineHelp(void);

    protected:
        bool LoadTextures();
        void PopulateShaderInfo();

//        CImageData *m_pCheckerData;
        CTexture8 *m_pCheckerTex;
//        CImageData *m_pDP3Data;
        CTexture8 *m_pDP3Tex;
//        CImageData *m_pColorCheckerData;
        CTexture8 *m_pColorCheckerTex;
//        CImageData *m_pDXLogoData;
        CTexture8 *m_pDXLogoTex;
};

class CPSSrcMod : public CPShader
{
    public:
        CPSSrcMod();

        UINT TestInitialize(void);
        bool ExecuteTest(UINT);
        bool TestTerminate(void);
        void CommandLineHelp(void);

    protected:
        bool LoadTextures();
        void PopulateShaderInfo();

//        CImageData *m_pCheckerData;
        CTexture8 *m_pCheckerTex;
//        CImageData *m_pDP3Data;
        CTexture8 *m_pDP3Tex;
//        CImageData *m_pColorCheckerData;
        CTexture8 *m_pColorCheckerTex;
//        CImageData *m_pDXLogoData;
        CTexture8 *m_pDXLogoTex;
};

class CPSDestMod : public CPShader
{
    public:
        CPSDestMod();

        UINT TestInitialize(void);
        bool ExecuteTest(UINT);
        bool TestTerminate(void);
        void CommandLineHelp(void);

    protected:
        bool LoadTextures();
        void PopulateShaderInfo();

//        CImageData *m_pCheckerData;
        CTexture8 *m_pCheckerTex;
//        CImageData *m_pDP3Data;
        CTexture8 *m_pDP3Tex;
//        CImageData *m_pColorCheckerData;
        CTexture8 *m_pColorCheckerTex;
//        CImageData *m_pDXLogoData;
        CTexture8 *m_pDXLogoTex;
};

class CPSInstMod : public CPShader
{
    public:
        CPSInstMod();

        UINT TestInitialize(void);
        bool ExecuteTest(UINT);
        bool TestTerminate(void);
        void CommandLineHelp(void);

    protected:
        bool LoadTextures();
        void PopulateShaderInfo();

//        CImageData *m_pDXLogoData;
        CTexture8 *m_pDXLogoTex;
};

class CPSAddress : public CPShader
{
    public:
        CPSAddress();

        UINT TestInitialize(void);
        bool ExecuteTest(UINT);
        bool TestTerminate(void);
        void CommandLineHelp(void);

    protected:
        bool LoadTextures();
        void PopulateShaderInfo();

//        CImageData *m_pCheckerData;
        CTexture8 *m_pCheckerTex;
//        CImageData *m_pColorCheckerData;
        CTexture8 *m_pColorCheckerTex;
//        CImageData *m_pBEM1Data;
        CTexture8 *m_pBEM1Tex;
//        CImageData *m_pBEM3Data;
        CTexture8 *m_pBEM3Tex;
        CTexture8 *m_pBrickTex;
        CTexture8 *m_pCubeTex;
        CTexture8 *m_pSysCubeTex;
//        CImageData *m_pCubeData[6];
};

#endif // _PSHADER_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\srcmod.cpp ===
// FILE:        srcmod.cpp
// DESC:        pixel shader src mod conformance tests
// AUTHOR:      Cliff Hudson

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "PShader.h"
//#include "CImageLoader.h"

//CPSSrcMod PSSrcModTest;

extern MYTLVERTEX g_FourColorAlphaVertices[];
extern MYTLVERTEX g_FourColorVertices[];

CPSSrcMod::CPSSrcMod()
{
    m_szTestName = TEXT("PSSrcMod");
    m_szCommandKey = TEXT("PSSrcMod");

//    m_pCheckerData = NULL;
    m_pCheckerTex = NULL;
    m_pColorCheckerTex = NULL;
//    m_pColorCheckerData = NULL;
    m_pDXLogoTex = NULL;
//    m_pDXLogoData = NULL;
    m_pDP3Tex = NULL;
//    m_pDP3Data = NULL;
}

bool CPSSrcMod::TestTerminate()
{
    ReleaseTexture(m_pCheckerTex);
//    RELEASE(m_pCheckerData);
    ReleaseTexture(m_pColorCheckerTex);
//    RELEASE(m_pColorCheckerData);
    ReleaseTexture(m_pDXLogoTex);
//    RELEASE(m_pDXLogoData);
    ReleaseTexture(m_pDP3Tex);
//    RELEASE(m_pDP3Data);
    return CPShader::TestTerminate();
}

UINT CPSSrcMod::TestInitialize()
{
    CPShader::TestInitialize();

    if (!LoadTextures())
        return D3DTESTINIT_ABORT;

    PopulateShaderInfo();
    SetTestRange(1, m_uNumShaders);

//    if (m_bSkipAllForCaps)
//        SkipTestRange(1, m_uNumShaders);

    return D3DTESTINIT_RUN;
}

void CPSSrcMod::PopulateShaderInfo()
{
    float fConstants[24] =
        { 0.0f, 0.0f, 0.0f, 0.0f,
          0.2f, 0.2f, 0.2f, 0.2f,
          0.4f, 0.4f, 0.4f, 0.4f,
          0.6f, 0.6f, 0.6f, 0.6f,
          0.8f, 0.8f, 0.8f, 0.8f,
          1.0f, 1.0f, 1.0f, 1.0f
        };

    AddShaderDef("Source Negate - TEXTURE 0",
                 "tex t0\n"
                 "mov r0, -t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);

    AddShaderDef("Source Negate - TEXTURE 1",
                 "tex t1\n"
                 "mov r0, -t1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);

    AddShaderDef("Source Negate - TEXTURE 2",
                 "tex t2\n"
                 "mov r0, -t2\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);

    AddShaderDef("Source Negate - TEXTURE 3",
                 "tex t3\n"
                 "mov r0, -t3\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);

    AddShaderDef("Source Negate - INPUT 0",
                 "mov r0, -v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);

    AddShaderDef("Source Negate - INPUT 1",
                 "mov r0, -v1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);

    AddShaderDef("Source Negate - CONSTANT 0",
                 "mov r0, -c0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 24);

    AddShaderDef("Source Negate - CONSTANT 1",
                 "mov r0, -c1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 24);

    AddShaderDef("Source Negate - CONSTANT 2",
                 "mov r0, -c2\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 24);

    AddShaderDef("Source Negate - CONSTANT 3",
                 "mov r0, -c3\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 24);

    AddShaderDef("Source Negate - CONSTANT 4",
                 "mov r0, -c4\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 24);

    AddShaderDef("Source Negate - CONSTANT 5",
                 "mov r0, -c5\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 24);
    
    AddShaderDef("Invert - TEXTURE 0",
                 "tex t0\n"
                 "mov r0, 1-t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);

    AddShaderDef("Invert - TEXTURE 1",
                 "tex t1\n"
                 "mov r0, 1-t1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);

    AddShaderDef("Invert - TEXTURE 2",
                 "tex t2\n"
                 "mov r0, 1-t2\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);

    AddShaderDef("Invert - TEXTURE 3",
                 "tex t3\n"
                 "mov r0, 1-t3\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pCheckerTex);
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddTextureToLastShaderDef(m_pDXLogoTex);
    AddTextureToLastShaderDef(m_pDP3Tex);

    AddShaderDef("Invert - INPUT 0",
                 "mov r0, 1-v0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);

    AddShaderDef("Invert - INPUT 1",
                 "mov r0, 1-v1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);

    AddShaderDef("Invert - CONSTANT 0",
                 "mov r0, 1-c0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 24);

    AddShaderDef("Invert - CONSTANT 1",
                 "mov r0, 1-c1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 24);

    AddShaderDef("Invert - CONSTANT 2",
                 "mov r0, 1-c2\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 24);

    AddShaderDef("Invert - CONSTANT 3",
                 "mov r0, 1-c3\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 24);

    AddShaderDef("Invert - CONSTANT 4",
                 "mov r0, 1-c4\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 24);

    AddShaderDef("Invert - CONSTANT 5",
                 "mov r0, 1-c5\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 24);

    AddShaderDef("Alpha Replicate",
                 "tex t0\n"
                 "mov r0, t0.a\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, true, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pColorCheckerTex);
    AddConstantsToLastShaderDef(fConstants, 24);
}

bool CPSSrcMod::LoadTextures()
{
//    CImageLoader Loader;
    
//    if (NULL == (m_pCheckerData = Loader.Load(CIL_BMP, "checker.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load checker.bmp.  Aborting.\n");
//        return false;
//    }
    
//    if (NULL == (m_pCheckerTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pCheckerData)))
    if (NULL == (m_pCheckerTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("checker.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create checker texture.  Aborting.\n");
        return false;
    }
   
//    if (NULL == (m_pColorCheckerData = Loader.Load(CIL_BMP, "colorchecker.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load Colorchecker.bmp.  Aborting.\n");
//        return false;
//    }

//    if (NULL == (m_pColorCheckerTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pColorCheckerData)))
    if (NULL == (m_pColorCheckerTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("colorchecker.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create color checker texture.  Aborting.\n");
        return false;
    }

//    if (NULL == (m_pDXLogoData = Loader.Load(CIL_BMP, "DXLogo.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load DXLogo.bmp.  Aborting.\n");
//        return false;
//    }

//    if (NULL == (m_pDXLogoTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pDXLogoData)))
    if (NULL == (m_pDXLogoTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("dxlogo.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create DX Logo texture.  Aborting.\n");
        return false;
    }

//    if (NULL == (m_pDP3Data = Loader.Load(CIL_BMP, "DP3.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load DP3.bmp.  Aborting.\n");
//        return false;
//    }

//    if (NULL == (m_pDP3Tex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pDP3Data)))
    if (NULL == (m_pDP3Tex = (CTexture8*)CreateTexture(m_pDevice, TEXT("dp3.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create DP3 texture.  Aborting.\n");
        return false;
    } 
    
    return true;
}

bool CPSSrcMod::ExecuteTest(UINT uiTest)
{
    return CPShader::ExecuteTest(uiTest);
}

void CPSSrcMod::CommandLineHelp()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\instmod.cpp ===
// FILE:        instmod.cpp
// DESC:        pixel shader inst mod conformance tests
// AUTHOR:      Cliff Hudson

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "PShader.h"
//#include "CImageLoader.h"

//CPSInstMod PSInstModTest;

extern MYTLVERTEX g_FourColorVertices[];

CPSInstMod::CPSInstMod()
{
    m_szTestName = TEXT("PSInstMod");
    m_szCommandKey = TEXT("PSInstMod");

//    m_pDXLogoData = NULL;
    m_pDXLogoTex = NULL;
}

bool CPSInstMod::TestTerminate()
{
    ReleaseTexture(m_pDXLogoTex);
//    RELEASE(m_pDXLogoData);
    return CPShader::TestTerminate();
}

UINT CPSInstMod::TestInitialize()
{
    CPShader::TestInitialize();

    if (!LoadTextures())
        return D3DTESTINIT_ABORT;

    PopulateShaderInfo();
    SetTestRange(1, m_uNumShaders);

//    if (m_bSkipAllForCaps)
//        SkipTestRange(1, m_uNumShaders);

    return D3DTESTINIT_RUN;
}

void CPSInstMod::PopulateShaderInfo()
{
    float fConstants[4] = { 0.8f, 0.8f, 0.8f, 0.8f };

    // (1) _x2
	AddShaderDef("Instruction Mod - _x2",
                 "tex t0\n"
                 "mov_x2 r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pDXLogoTex);

    // (2) _x4
    AddShaderDef("Instruction Mod - _x4",
                 "tex t0\n"
                 "mov_x4 r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pDXLogoTex);

    // (3) _d2
    AddShaderDef("Instruction Mod - _d2",
                 "tex t0\n"
                 "mov_d2 r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pDXLogoTex);

#ifdef UNDER_XBOX

    if (m_pDisplay->GetConnectionStatus() == SERVER_CONNECTED) {
        return;
    }

    // (4) _bx2
    AddShaderDef("Instruction Mod - _bx2",
                 "mul_bx2 r1, v0, c0\n"
				 "mov r0, r1\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(6, 9));
    AddConstantsToLastShaderDef(fConstants, 8);


/*
    AddShaderDef("Instruction Mod - _x8",
                 "tex t0\n"
                 "mov_x8 r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pDXLogoTex);

    AddShaderDef("Instruction Mod - _d4",
                 "tex t0\n"
                 "mov_d4 r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pDXLogoTex);

    AddShaderDef("Instruction Mod - _d8",
                 "tex t0\n"
                 "mov_d8 r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pDXLogoTex);
*/
    AddShaderDef("Instruction Mod - Bias",
                 "tex t0\n"
                 "mov_bias r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(6,9));
    AddTextureToLastShaderDef(m_pDXLogoTex);
/*
    AddShaderDef("Instruction Mod - Unbias",
                 "tex t0\n"
                 "mov_unbias r0, t0\n",
                 MYTLVERTEX_FVF, g_FourColorVertices, PSVERSION(1, 0));
    AddTextureToLastShaderDef(m_pDXLogoTex);
*/
#endif // UNDER_XBOX
}

bool CPSInstMod::LoadTextures()
{
//    CImageLoader Loader;
    
//    if (NULL == (m_pDXLogoData = Loader.Load(CIL_BMP, "dxlogo.bmp", 1.0f)))
//    {
//        WriteToLog("(ERROR) Failed to load dxlogo.bmp.  Aborting.\n");
//        return false;
//    }
    
//    if (NULL == (m_pDXLogoTex = CreateTexture(64, 64, CDDS_TEXTURE_VIDEO, m_pDXLogoData)))
    if (NULL == (m_pDXLogoTex = (CTexture8*)CreateTexture(m_pDevice, TEXT("dxlogo.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE, NULL, 1.0f, COLORKEY_NONE, POOL_DEFAULT, 64, 64)))
    {
        WriteToLog("(ERROR) Failed to create DXLogo texture.  Aborting.\n");
        return false;
    }
    
    return true;
}

bool CPSInstMod::ExecuteTest(UINT uiTest)
{
    return CPShader::ExecuteTest(uiTest);
}

void CPSInstMod::CommandLineHelp()
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\exe\sources.inc ===
TARGETNAME=PShader
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\m_pshade.lib \
    $(TEST_LIB_PATH)\l_pshade.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=PShader
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_pshade.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\exe\include.cpp ===
#pragma comment(linker, "/include:_pshader_bem1")
#pragma comment(linker, "/include:_pshader_bem2")
#pragma comment(linker, "/include:_pshader_bem3")
#pragma comment(linker, "/include:_pshader_checker")
#pragma comment(linker, "/include:_pshader_checker2")
#pragma comment(linker, "/include:_pshader_colorchecker")
#pragma comment(linker, "/include:_pshader_dp3")
#pragma comment(linker, "/include:_pshader_dxlogo")
#pragma comment(linker, "/include:_pshader_sky1")
#pragma comment(linker, "/include:_pshader_sky0")
#pragma comment(linker, "/include:_pshader_sky2")
#pragma comment(linker, "/include:_pshader_sky3")
#pragma comment(linker, "/include:_pshader_sky4")
#pragma comment(linker, "/include:_pshader_sky5")
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\media\bem2.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    bem2.bmp.cpp

Description

    Data file for the resource bem2.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_bem2[] = {

   0x42, 0x4D, 0x36, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 
   0x00, 0x00, 0x21, 0x00, 0x00, 0x29, 0x00, 0x00, 0x31, 0x00, 0x00, 0x39, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4A, 0x00, 0x00, 0x52, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x63, 0x00, 0x00, 0x6B, 0x00, 0x00, 
   0x73, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x84, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x94, 0x00, 0x00, 0x9C, 
   0x00, 0x00, 0xA5, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xC6, 0x00, 
   0x00, 0xCE, 0x00, 0x00, 0xD6, 0x00, 0x00, 0xDE, 0x00, 0x00, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 
   0xF7, 0x00, 0x00, 0xFF, 0x00, 0x00, 
};

static RESOURCEDATA g_rd_bem2(TEXT(MODULE_STRING), TEXT("bem2.bmp"), g_bem2, sizeof(g_bem2));

extern "C" LPVOID PREPEND_MODULE(_bem2) = (LPVOID)&g_rd_bem2;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\media\bem1.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    bem1.bmp.cpp

Description

    Data file for the resource bem1.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_bem1[] = {

   0x42, 0x4D, 0x36, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x04, 0x7F, 0x02, 0x08, 0x7F, 0x04, 0x0C, 
   0x7F, 0x06, 0x10, 0x7F, 0x08, 0x14, 0x7F, 0x0A, 0x18, 0x7F, 0x0C, 0x1C, 0x7F, 0x0E, 0x20, 0x7F, 
   0x10, 0x24, 0x7F, 0x12, 0x28, 0x7F, 0x14, 0x2C, 0x7F, 0x16, 0x30, 0x7F, 0x18, 0x34, 0x7F, 0x1A, 
   0x38, 0x7F, 0x1C, 0x3C, 0x7F, 0x1E, 0x41, 0x7F, 0x21, 0x45, 0x7F, 0x23, 0x49, 0x7F, 0x25, 0x4D, 
   0x7F, 0x27, 0x51, 0x7F, 0x29, 0x55, 0x7F, 0x2B, 0x59, 0x7F, 0x2D, 0x5D, 0x7F, 0x2F, 0x61, 0x7F, 
   0x31, 0x65, 0x7F, 0x33, 0x69, 0x7F, 0x35, 0x6D, 0x7F, 0x37, 0x71, 0x7F, 0x39, 0x75, 0x7F, 0x3B, 
   0x79, 0x7F, 0x3D, 0x7D, 0x7F, 0x3F, 0x82, 0x7F, 0x41, 0x86, 0x7F, 0x43, 0x8A, 0x7F, 0x45, 0x8E, 
   0x7F, 0x47, 0x92, 0x7F, 0x49, 0x96, 0x7F, 0x4B, 0x9A, 0x7F, 0x4D, 0x9E, 0x7F, 0x4F, 0xA2, 0x7F, 
   0x51, 0xA6, 0x7F, 0x53, 0xAA, 0x7F, 0x55, 0xAE, 0x7F, 0x57, 0xB2, 0x7F, 0x59, 0xB6, 0x7F, 0x5B, 
   0xBA, 0x7F, 0x5D, 0xBE, 0x7F, 0x5F, 0xC3, 0x7F, 0x61, 0xC7, 0x7F, 0x63, 0xCB, 0x7F, 0x65, 0xCF, 
   0x7F, 0x67, 0xD3, 0x7F, 0x69, 0xD7, 0x7F, 0x6B, 0xDB, 0x7F, 0x6D, 0xDF, 0x7F, 0x6F, 0xE3, 0x7F, 
   0x71, 0xE7, 0x7F, 0x73, 0xEB, 0x7F, 0x75, 0xEF, 0x7F, 0x77, 0xF3, 0x7F, 0x79, 0xF7, 0x7F, 0x7B, 
   0xFB, 0x7F, 0x7D, 0xFF, 0x7F, 0x7F, 0x00, 0x7E, 0x00, 0x04, 0x7E, 0x02, 0x08, 0x7E, 0x04, 0x0C, 
   0x7E, 0x06, 0x10, 0x7E, 0x08, 0x14, 0x7E, 0x0A, 0x18, 0x7E, 0x0C, 0x1C, 0x7E, 0x0E, 0x20, 0x7E, 
   0x10, 0x24, 0x7E, 0x12, 0x28, 0x7E, 0x14, 0x2C, 0x7E, 0x16, 0x30, 0x7E, 0x18, 0x34, 0x7E, 0x1A, 
   0x38, 0x7E, 0x1C, 0x3C, 0x7E, 0x1E, 0x41, 0x7E, 0x21, 0x45, 0x7E, 0x23, 0x49, 0x7E, 0x25, 0x4D, 
   0x7E, 0x27, 0x51, 0x7E, 0x29, 0x55, 0x7E, 0x2B, 0x59, 0x7E, 0x2D, 0x5D, 0x7E, 0x2F, 0x61, 0x7E, 
   0x31, 0x65, 0x7E, 0x33, 0x69, 0x7E, 0x35, 0x6D, 0x7E, 0x37, 0x71, 0x7E, 0x39, 0x75, 0x7E, 0x3B, 
   0x79, 0x7E, 0x3D, 0x7D, 0x7E, 0x3F, 0x82, 0x7E, 0x41, 0x86, 0x7E, 0x43, 0x8A, 0x7E, 0x45, 0x8E, 
   0x7E, 0x47, 0x92, 0x7E, 0x49, 0x96, 0x7E, 0x4B, 0x9A, 0x7E, 0x4D, 0x9E, 0x7E, 0x4F, 0xA2, 0x7E, 
   0x51, 0xA6, 0x7E, 0x53, 0xAA, 0x7E, 0x55, 0xAE, 0x7E, 0x57, 0xB2, 0x7E, 0x59, 0xB6, 0x7E, 0x5B, 
   0xBA, 0x7E, 0x5D, 0xBE, 0x7E, 0x5F, 0xC3, 0x7E, 0x61, 0xC7, 0x7E, 0x63, 0xCB, 0x7E, 0x65, 0xCF, 
   0x7E, 0x67, 0xD3, 0x7E, 0x69, 0xD7, 0x7E, 0x6B, 0xDB, 0x7E, 0x6D, 0xDF, 0x7E, 0x6F, 0xE3, 0x7E, 
   0x71, 0xE7, 0x7E, 0x73, 0xEB, 0x7E, 0x75, 0xEF, 0x7E, 0x77, 0xF3, 0x7E, 0x79, 0xF7, 0x7E, 0x7B, 
   0xFB, 0x7E, 0x7D, 0xFF, 0x7E, 0x7F, 0x00, 0x7C, 0x00, 0x04, 0x7C, 0x02, 0x08, 0x7C, 0x04, 0x0C, 
   0x7C, 0x06, 0x10, 0x7C, 0x08, 0x14, 0x7C, 0x0A, 0x18, 0x7C, 0x0C, 0x1C, 0x7C, 0x0E, 0x20, 0x7C, 
   0x10, 0x24, 0x7C, 0x12, 0x28, 0x7C, 0x14, 0x2C, 0x7C, 0x16, 0x30, 0x7C, 0x18, 0x34, 0x7C, 0x1A, 
   0x38, 0x7C, 0x1C, 0x3C, 0x7C, 0x1E, 0x41, 0x7C, 0x21, 0x45, 0x7C, 0x23, 0x49, 0x7C, 0x25, 0x4D, 
   0x7C, 0x27, 0x51, 0x7C, 0x29, 0x55, 0x7C, 0x2B, 0x59, 0x7C, 0x2D, 0x5D, 0x7C, 0x2F, 0x61, 0x7C, 
   0x31, 0x65, 0x7C, 0x33, 0x69, 0x7C, 0x35, 0x6D, 0x7C, 0x37, 0x71, 0x7C, 0x39, 0x75, 0x7C, 0x3B, 
   0x79, 0x7C, 0x3D, 0x7D, 0x7C, 0x3F, 0x82, 0x7C, 0x41, 0x86, 0x7C, 0x43, 0x8A, 0x7C, 0x45, 0x8E, 
   0x7C, 0x47, 0x92, 0x7C, 0x49, 0x96, 0x7C, 0x4B, 0x9A, 0x7C, 0x4D, 0x9E, 0x7C, 0x4F, 0xA2, 0x7C, 
   0x51, 0xA6, 0x7C, 0x53, 0xAA, 0x7C, 0x55, 0xAE, 0x7C, 0x57, 0xB2, 0x7C, 0x59, 0xB6, 0x7C, 0x5B, 
   0xBA, 0x7C, 0x5D, 0xBE, 0x7C, 0x5F, 0xC3, 0x7C, 0x61, 0xC7, 0x7C, 0x63, 0xCB, 0x7C, 0x65, 0xCF, 
   0x7C, 0x67, 0xD3, 0x7C, 0x69, 0xD7, 0x7C, 0x6B, 0xDB, 0x7C, 0x6D, 0xDF, 0x7C, 0x6F, 0xE3, 0x7C, 
   0x71, 0xE7, 0x7C, 0x73, 0xEB, 0x7C, 0x75, 0xEF, 0x7C, 0x77, 0xF3, 0x7C, 0x79, 0xF7, 0x7C, 0x7B, 
   0xFB, 0x7C, 0x7D, 0xFF, 0x7C, 0x7F, 0x00, 0x7A, 0x00, 0x04, 0x7A, 0x02, 0x08, 0x7A, 0x04, 0x0C, 
   0x7A, 0x06, 0x10, 0x7A, 0x08, 0x14, 0x7A, 0x0A, 0x18, 0x7A, 0x0C, 0x1C, 0x7A, 0x0E, 0x20, 0x7A, 
   0x10, 0x24, 0x7A, 0x12, 0x28, 0x7A, 0x14, 0x2C, 0x7A, 0x16, 0x30, 0x7A, 0x18, 0x34, 0x7A, 0x1A, 
   0x38, 0x7A, 0x1C, 0x3C, 0x7A, 0x1E, 0x41, 0x7A, 0x21, 0x45, 0x7A, 0x23, 0x49, 0x7A, 0x25, 0x4D, 
   0x7A, 0x27, 0x51, 0x7A, 0x29, 0x55, 0x7A, 0x2B, 0x59, 0x7A, 0x2D, 0x5D, 0x7A, 0x2F, 0x61, 0x7A, 
   0x31, 0x65, 0x7A, 0x33, 0x69, 0x7A, 0x35, 0x6D, 0x7A, 0x37, 0x71, 0x7A, 0x39, 0x75, 0x7A, 0x3B, 
   0x79, 0x7A, 0x3D, 0x7D, 0x7A, 0x3F, 0x82, 0x7A, 0x41, 0x86, 0x7A, 0x43, 0x8A, 0x7A, 0x45, 0x8E, 
   0x7A, 0x47, 0x92, 0x7A, 0x49, 0x96, 0x7A, 0x4B, 0x9A, 0x7A, 0x4D, 0x9E, 0x7A, 0x4F, 0xA2, 0x7A, 
   0x51, 0xA6, 0x7A, 0x53, 0xAA, 0x7A, 0x55, 0xAE, 0x7A, 0x57, 0xB2, 0x7A, 0x59, 0xB6, 0x7A, 0x5B, 
   0xBA, 0x7A, 0x5D, 0xBE, 0x7A, 0x5F, 0xC3, 0x7A, 0x61, 0xC7, 0x7A, 0x63, 0xCB, 0x7A, 0x65, 0xCF, 
   0x7A, 0x67, 0xD3, 0x7A, 0x69, 0xD7, 0x7A, 0x6B, 0xDB, 0x7A, 0x6D, 0xDF, 0x7A, 0x6F, 0xE3, 0x7A, 
   0x71, 0xE7, 0x7A, 0x73, 0xEB, 0x7A, 0x75, 0xEF, 0x7A, 0x77, 0xF3, 0x7A, 0x79, 0xF7, 0x7A, 0x7B, 
   0xFB, 0x7A, 0x7D, 0xFF, 0x7A, 0x7F, 0x00, 0x78, 0x00, 0x04, 0x78, 0x02, 0x08, 0x78, 0x04, 0x0C, 
   0x78, 0x06, 0x10, 0x78, 0x08, 0x14, 0x78, 0x0A, 0x18, 0x78, 0x0C, 0x1C, 0x78, 0x0E, 0x20, 0x78, 
   0x10, 0x24, 0x78, 0x12, 0x28, 0x78, 0x14, 0x2C, 0x78, 0x16, 0x30, 0x78, 0x18, 0x34, 0x78, 0x1A, 
   0x38, 0x78, 0x1C, 0x3C, 0x78, 0x1E, 0x41, 0x78, 0x21, 0x45, 0x78, 0x23, 0x49, 0x78, 0x25, 0x4D, 
   0x78, 0x27, 0x51, 0x78, 0x29, 0x55, 0x78, 0x2B, 0x59, 0x78, 0x2D, 0x5D, 0x78, 0x2F, 0x61, 0x78, 
   0x31, 0x65, 0x78, 0x33, 0x69, 0x78, 0x35, 0x6D, 0x78, 0x37, 0x71, 0x78, 0x39, 0x75, 0x78, 0x3B, 
   0x79, 0x78, 0x3D, 0x7D, 0x78, 0x3F, 0x82, 0x78, 0x41, 0x86, 0x78, 0x43, 0x8A, 0x78, 0x45, 0x8E, 
   0x78, 0x47, 0x92, 0x78, 0x49, 0x96, 0x78, 0x4B, 0x9A, 0x78, 0x4D, 0x9E, 0x78, 0x4F, 0xA2, 0x78, 
   0x51, 0xA6, 0x78, 0x53, 0xAA, 0x78, 0x55, 0xAE, 0x78, 0x57, 0xB2, 0x78, 0x59, 0xB6, 0x78, 0x5B, 
   0xBA, 0x78, 0x5D, 0xBE, 0x78, 0x5F, 0xC3, 0x78, 0x61, 0xC7, 0x78, 0x63, 0xCB, 0x78, 0x65, 0xCF, 
   0x78, 0x67, 0xD3, 0x78, 0x69, 0xD7, 0x78, 0x6B, 0xDB, 0x78, 0x6D, 0xDF, 0x78, 0x6F, 0xE3, 0x78, 
   0x71, 0xE7, 0x78, 0x73, 0xEB, 0x78, 0x75, 0xEF, 0x78, 0x77, 0xF3, 0x78, 0x79, 0xF7, 0x78, 0x7B, 
   0xFB, 0x78, 0x7D, 0xFF, 0x78, 0x7F, 0x00, 0x76, 0x00, 0x04, 0x76, 0x02, 0x08, 0x76, 0x04, 0x0C, 
   0x76, 0x06, 0x10, 0x76, 0x08, 0x14, 0x76, 0x0A, 0x18, 0x76, 0x0C, 0x1C, 0x76, 0x0E, 0x20, 0x76, 
   0x10, 0x24, 0x76, 0x12, 0x28, 0x76, 0x14, 0x2C, 0x76, 0x16, 0x30, 0x76, 0x18, 0x34, 0x76, 0x1A, 
   0x38, 0x76, 0x1C, 0x3C, 0x76, 0x1E, 0x41, 0x76, 0x21, 0x45, 0x76, 0x23, 0x49, 0x76, 0x25, 0x4D, 
   0x76, 0x27, 0x51, 0x76, 0x29, 0x55, 0x76, 0x2B, 0x59, 0x76, 0x2D, 0x5D, 0x76, 0x2F, 0x61, 0x76, 
   0x31, 0x65, 0x76, 0x33, 0x69, 0x76, 0x35, 0x6D, 0x76, 0x37, 0x71, 0x76, 0x39, 0x75, 0x76, 0x3B, 
   0x79, 0x76, 0x3D, 0x7D, 0x76, 0x3F, 0x82, 0x76, 0x41, 0x86, 0x76, 0x43, 0x8A, 0x76, 0x45, 0x8E, 
   0x76, 0x47, 0x92, 0x76, 0x49, 0x96, 0x76, 0x4B, 0x9A, 0x76, 0x4D, 0x9E, 0x76, 0x4F, 0xA2, 0x76, 
   0x51, 0xA6, 0x76, 0x53, 0xAA, 0x76, 0x55, 0xAE, 0x76, 0x57, 0xB2, 0x76, 0x59, 0xB6, 0x76, 0x5B, 
   0xBA, 0x76, 0x5D, 0xBE, 0x76, 0x5F, 0xC3, 0x76, 0x61, 0xC7, 0x76, 0x63, 0xCB, 0x76, 0x65, 0xCF, 
   0x76, 0x67, 0xD3, 0x76, 0x69, 0xD7, 0x76, 0x6B, 0xDB, 0x76, 0x6D, 0xDF, 0x76, 0x6F, 0xE3, 0x76, 
   0x71, 0xE7, 0x76, 0x73, 0xEB, 0x76, 0x75, 0xEF, 0x76, 0x77, 0xF3, 0x76, 0x79, 0xF7, 0x76, 0x7B, 
   0xFB, 0x76, 0x7D, 0xFF, 0x76, 0x7F, 0x00, 0x74, 0x00, 0x04, 0x74, 0x02, 0x08, 0x74, 0x04, 0x0C, 
   0x74, 0x06, 0x10, 0x74, 0x08, 0x14, 0x74, 0x0A, 0x18, 0x74, 0x0C, 0x1C, 0x74, 0x0E, 0x20, 0x74, 
   0x10, 0x24, 0x74, 0x12, 0x28, 0x74, 0x14, 0x2C, 0x74, 0x16, 0x30, 0x74, 0x18, 0x34, 0x74, 0x1A, 
   0x38, 0x74, 0x1C, 0x3C, 0x74, 0x1E, 0x41, 0x74, 0x21, 0x45, 0x74, 0x23, 0x49, 0x74, 0x25, 0x4D, 
   0x74, 0x27, 0x51, 0x74, 0x29, 0x55, 0x74, 0x2B, 0x59, 0x74, 0x2D, 0x5D, 0x74, 0x2F, 0x61, 0x74, 
   0x31, 0x65, 0x74, 0x33, 0x69, 0x74, 0x35, 0x6D, 0x74, 0x37, 0x71, 0x74, 0x39, 0x75, 0x74, 0x3B, 
   0x79, 0x74, 0x3D, 0x7D, 0x74, 0x3F, 0x82, 0x74, 0x41, 0x86, 0x74, 0x43, 0x8A, 0x74, 0x45, 0x8E, 
   0x74, 0x47, 0x92, 0x74, 0x49, 0x96, 0x74, 0x4B, 0x9A, 0x74, 0x4D, 0x9E, 0x74, 0x4F, 0xA2, 0x74, 
   0x51, 0xA6, 0x74, 0x53, 0xAA, 0x74, 0x55, 0xAE, 0x74, 0x57, 0xB2, 0x74, 0x59, 0xB6, 0x74, 0x5B, 
   0xBA, 0x74, 0x5D, 0xBE, 0x74, 0x5F, 0xC3, 0x74, 0x61, 0xC7, 0x74, 0x63, 0xCB, 0x74, 0x65, 0xCF, 
   0x74, 0x67, 0xD3, 0x74, 0x69, 0xD7, 0x74, 0x6B, 0xDB, 0x74, 0x6D, 0xDF, 0x74, 0x6F, 0xE3, 0x74, 
   0x71, 0xE7, 0x74, 0x73, 0xEB, 0x74, 0x75, 0xEF, 0x74, 0x77, 0xF3, 0x74, 0x79, 0xF7, 0x74, 0x7B, 
   0xFB, 0x74, 0x7D, 0xFF, 0x74, 0x7F, 0x00, 0x72, 0x00, 0x04, 0x72, 0x02, 0x08, 0x72, 0x04, 0x0C, 
   0x72, 0x06, 0x10, 0x72, 0x08, 0x14, 0x72, 0x0A, 0x18, 0x72, 0x0C, 0x1C, 0x72, 0x0E, 0x20, 0x72, 
   0x10, 0x24, 0x72, 0x12, 0x28, 0x72, 0x14, 0x2C, 0x72, 0x16, 0x30, 0x72, 0x18, 0x34, 0x72, 0x1A, 
   0x38, 0x72, 0x1C, 0x3C, 0x72, 0x1E, 0x41, 0x72, 0x21, 0x45, 0x72, 0x23, 0x49, 0x72, 0x25, 0x4D, 
   0x72, 0x27, 0x51, 0x72, 0x29, 0x55, 0x72, 0x2B, 0x59, 0x72, 0x2D, 0x5D, 0x72, 0x2F, 0x61, 0x72, 
   0x31, 0x65, 0x72, 0x33, 0x69, 0x72, 0x35, 0x6D, 0x72, 0x37, 0x71, 0x72, 0x39, 0x75, 0x72, 0x3B, 
   0x79, 0x72, 0x3D, 0x7D, 0x72, 0x3F, 0x82, 0x72, 0x41, 0x86, 0x72, 0x43, 0x8A, 0x72, 0x45, 0x8E, 
   0x72, 0x47, 0x92, 0x72, 0x49, 0x96, 0x72, 0x4B, 0x9A, 0x72, 0x4D, 0x9E, 0x72, 0x4F, 0xA2, 0x72, 
   0x51, 0xA6, 0x72, 0x53, 0xAA, 0x72, 0x55, 0xAE, 0x72, 0x57, 0xB2, 0x72, 0x59, 0xB6, 0x72, 0x5B, 
   0xBA, 0x72, 0x5D, 0xBE, 0x72, 0x5F, 0xC3, 0x72, 0x61, 0xC7, 0x72, 0x63, 0xCB, 0x72, 0x65, 0xCF, 
   0x72, 0x67, 0xD3, 0x72, 0x69, 0xD7, 0x72, 0x6B, 0xDB, 0x72, 0x6D, 0xDF, 0x72, 0x6F, 0xE3, 0x72, 
   0x71, 0xE7, 0x72, 0x73, 0xEB, 0x72, 0x75, 0xEF, 0x72, 0x77, 0xF3, 0x72, 0x79, 0xF7, 0x72, 0x7B, 
   0xFB, 0x72, 0x7D, 0xFF, 0x72, 0x7F, 0x00, 0x70, 0x00, 0x04, 0x70, 0x02, 0x08, 0x70, 0x04, 0x0C, 
   0x70, 0x06, 0x10, 0x70, 0x08, 0x14, 0x70, 0x0A, 0x18, 0x70, 0x0C, 0x1C, 0x70, 0x0E, 0x20, 0x70, 
   0x10, 0x24, 0x70, 0x12, 0x28, 0x70, 0x14, 0x2C, 0x70, 0x16, 0x30, 0x70, 0x18, 0x34, 0x70, 0x1A, 
   0x38, 0x70, 0x1C, 0x3C, 0x70, 0x1E, 0x41, 0x70, 0x21, 0x45, 0x70, 0x23, 0x49, 0x70, 0x25, 0x4D, 
   0x70, 0x27, 0x51, 0x70, 0x29, 0x55, 0x70, 0x2B, 0x59, 0x70, 0x2D, 0x5D, 0x70, 0x2F, 0x61, 0x70, 
   0x31, 0x65, 0x70, 0x33, 0x69, 0x70, 0x35, 0x6D, 0x70, 0x37, 0x71, 0x70, 0x39, 0x75, 0x70, 0x3B, 
   0x79, 0x70, 0x3D, 0x7D, 0x70, 0x3F, 0x82, 0x70, 0x41, 0x86, 0x70, 0x43, 0x8A, 0x70, 0x45, 0x8E, 
   0x70, 0x47, 0x92, 0x70, 0x49, 0x96, 0x70, 0x4B, 0x9A, 0x70, 0x4D, 0x9E, 0x70, 0x4F, 0xA2, 0x70, 
   0x51, 0xA6, 0x70, 0x53, 0xAA, 0x70, 0x55, 0xAE, 0x70, 0x57, 0xB2, 0x70, 0x59, 0xB6, 0x70, 0x5B, 
   0xBA, 0x70, 0x5D, 0xBE, 0x70, 0x5F, 0xC3, 0x70, 0x61, 0xC7, 0x70, 0x63, 0xCB, 0x70, 0x65, 0xCF, 
   0x70, 0x67, 0xD3, 0x70, 0x69, 0xD7, 0x70, 0x6B, 0xDB, 0x70, 0x6D, 0xDF, 0x70, 0x6F, 0xE3, 0x70, 
   0x71, 0xE7, 0x70, 0x73, 0xEB, 0x70, 0x75, 0xEF, 0x70, 0x77, 0xF3, 0x70, 0x79, 0xF7, 0x70, 0x7B, 
   0xFB, 0x70, 0x7D, 0xFF, 0x70, 0x7F, 0x00, 0x6E, 0x00, 0x04, 0x6E, 0x02, 0x08, 0x6E, 0x04, 0x0C, 
   0x6E, 0x06, 0x10, 0x6E, 0x08, 0x14, 0x6E, 0x0A, 0x18, 0x6E, 0x0C, 0x1C, 0x6E, 0x0E, 0x20, 0x6E, 
   0x10, 0x24, 0x6E, 0x12, 0x28, 0x6E, 0x14, 0x2C, 0x6E, 0x16, 0x30, 0x6E, 0x18, 0x34, 0x6E, 0x1A, 
   0x38, 0x6E, 0x1C, 0x3C, 0x6E, 0x1E, 0x41, 0x6E, 0x21, 0x45, 0x6E, 0x23, 0x49, 0x6E, 0x25, 0x4D, 
   0x6E, 0x27, 0x51, 0x6E, 0x29, 0x55, 0x6E, 0x2B, 0x59, 0x6E, 0x2D, 0x5D, 0x6E, 0x2F, 0x61, 0x6E, 
   0x31, 0x65, 0x6E, 0x33, 0x69, 0x6E, 0x35, 0x6D, 0x6E, 0x37, 0x71, 0x6E, 0x39, 0x75, 0x6E, 0x3B, 
   0x79, 0x6E, 0x3D, 0x7D, 0x6E, 0x3F, 0x82, 0x6E, 0x41, 0x86, 0x6E, 0x43, 0x8A, 0x6E, 0x45, 0x8E, 
   0x6E, 0x47, 0x92, 0x6E, 0x49, 0x96, 0x6E, 0x4B, 0x9A, 0x6E, 0x4D, 0x9E, 0x6E, 0x4F, 0xA2, 0x6E, 
   0x51, 0xA6, 0x6E, 0x53, 0xAA, 0x6E, 0x55, 0xAE, 0x6E, 0x57, 0xB2, 0x6E, 0x59, 0xB6, 0x6E, 0x5B, 
   0xBA, 0x6E, 0x5D, 0xBE, 0x6E, 0x5F, 0xC3, 0x6E, 0x61, 0xC7, 0x6E, 0x63, 0xCB, 0x6E, 0x65, 0xCF, 
   0x6E, 0x67, 0xD3, 0x6E, 0x69, 0xD7, 0x6E, 0x6B, 0xDB, 0x6E, 0x6D, 0xDF, 0x6E, 0x6F, 0xE3, 0x6E, 
   0x71, 0xE7, 0x6E, 0x73, 0xEB, 0x6E, 0x75, 0xEF, 0x6E, 0x77, 0xF3, 0x6E, 0x79, 0xF7, 0x6E, 0x7B, 
   0xFB, 0x6E, 0x7D, 0xFF, 0x6E, 0x7F, 0x00, 0x6C, 0x00, 0x04, 0x6C, 0x02, 0x08, 0x6C, 0x04, 0x0C, 
   0x6C, 0x06, 0x10, 0x6C, 0x08, 0x14, 0x6C, 0x0A, 0x18, 0x6C, 0x0C, 0x1C, 0x6C, 0x0E, 0x20, 0x6C, 
   0x10, 0x24, 0x6C, 0x12, 0x28, 0x6C, 0x14, 0x2C, 0x6C, 0x16, 0x30, 0x6C, 0x18, 0x34, 0x6C, 0x1A, 
   0x38, 0x6C, 0x1C, 0x3C, 0x6C, 0x1E, 0x41, 0x6C, 0x21, 0x45, 0x6C, 0x23, 0x49, 0x6C, 0x25, 0x4D, 
   0x6C, 0x27, 0x51, 0x6C, 0x29, 0x55, 0x6C, 0x2B, 0x59, 0x6C, 0x2D, 0x5D, 0x6C, 0x2F, 0x61, 0x6C, 
   0x31, 0x65, 0x6C, 0x33, 0x69, 0x6C, 0x35, 0x6D, 0x6C, 0x37, 0x71, 0x6C, 0x39, 0x75, 0x6C, 0x3B, 
   0x79, 0x6C, 0x3D, 0x7D, 0x6C, 0x3F, 0x82, 0x6C, 0x41, 0x86, 0x6C, 0x43, 0x8A, 0x6C, 0x45, 0x8E, 
   0x6C, 0x47, 0x92, 0x6C, 0x49, 0x96, 0x6C, 0x4B, 0x9A, 0x6C, 0x4D, 0x9E, 0x6C, 0x4F, 0xA2, 0x6C, 
   0x51, 0xA6, 0x6C, 0x53, 0xAA, 0x6C, 0x55, 0xAE, 0x6C, 0x57, 0xB2, 0x6C, 0x59, 0xB6, 0x6C, 0x5B, 
   0xBA, 0x6C, 0x5D, 0xBE, 0x6C, 0x5F, 0xC3, 0x6C, 0x61, 0xC7, 0x6C, 0x63, 0xCB, 0x6C, 0x65, 0xCF, 
   0x6C, 0x67, 0xD3, 0x6C, 0x69, 0xD7, 0x6C, 0x6B, 0xDB, 0x6C, 0x6D, 0xDF, 0x6C, 0x6F, 0xE3, 0x6C, 
   0x71, 0xE7, 0x6C, 0x73, 0xEB, 0x6C, 0x75, 0xEF, 0x6C, 0x77, 0xF3, 0x6C, 0x79, 0xF7, 0x6C, 0x7B, 
   0xFB, 0x6C, 0x7D, 0xFF, 0x6C, 0x7F, 0x00, 0x6A, 0x00, 0x04, 0x6A, 0x02, 0x08, 0x6A, 0x04, 0x0C, 
   0x6A, 0x06, 0x10, 0x6A, 0x08, 0x14, 0x6A, 0x0A, 0x18, 0x6A, 0x0C, 0x1C, 0x6A, 0x0E, 0x20, 0x6A, 
   0x10, 0x24, 0x6A, 0x12, 0x28, 0x6A, 0x14, 0x2C, 0x6A, 0x16, 0x30, 0x6A, 0x18, 0x34, 0x6A, 0x1A, 
   0x38, 0x6A, 0x1C, 0x3C, 0x6A, 0x1E, 0x41, 0x6A, 0x21, 0x45, 0x6A, 0x23, 0x49, 0x6A, 0x25, 0x4D, 
   0x6A, 0x27, 0x51, 0x6A, 0x29, 0x55, 0x6A, 0x2B, 0x59, 0x6A, 0x2D, 0x5D, 0x6A, 0x2F, 0x61, 0x6A, 
   0x31, 0x65, 0x6A, 0x33, 0x69, 0x6A, 0x35, 0x6D, 0x6A, 0x37, 0x71, 0x6A, 0x39, 0x75, 0x6A, 0x3B, 
   0x79, 0x6A, 0x3D, 0x7D, 0x6A, 0x3F, 0x82, 0x6A, 0x41, 0x86, 0x6A, 0x43, 0x8A, 0x6A, 0x45, 0x8E, 
   0x6A, 0x47, 0x92, 0x6A, 0x49, 0x96, 0x6A, 0x4B, 0x9A, 0x6A, 0x4D, 0x9E, 0x6A, 0x4F, 0xA2, 0x6A, 
   0x51, 0xA6, 0x6A, 0x53, 0xAA, 0x6A, 0x55, 0xAE, 0x6A, 0x57, 0xB2, 0x6A, 0x59, 0xB6, 0x6A, 0x5B, 
   0xBA, 0x6A, 0x5D, 0xBE, 0x6A, 0x5F, 0xC3, 0x6A, 0x61, 0xC7, 0x6A, 0x63, 0xCB, 0x6A, 0x65, 0xCF, 
   0x6A, 0x67, 0xD3, 0x6A, 0x69, 0xD7, 0x6A, 0x6B, 0xDB, 0x6A, 0x6D, 0xDF, 0x6A, 0x6F, 0xE3, 0x6A, 
   0x71, 0xE7, 0x6A, 0x73, 0xEB, 0x6A, 0x75, 0xEF, 0x6A, 0x77, 0xF3, 0x6A, 0x79, 0xF7, 0x6A, 0x7B, 
   0xFB, 0x6A, 0x7D, 0xFF, 0x6A, 0x7F, 0x00, 0x68, 0x00, 0x04, 0x68, 0x02, 0x08, 0x68, 0x04, 0x0C, 
   0x68, 0x06, 0x10, 0x68, 0x08, 0x14, 0x68, 0x0A, 0x18, 0x68, 0x0C, 0x1C, 0x68, 0x0E, 0x20, 0x68, 
   0x10, 0x24, 0x68, 0x12, 0x28, 0x68, 0x14, 0x2C, 0x68, 0x16, 0x30, 0x68, 0x18, 0x34, 0x68, 0x1A, 
   0x38, 0x68, 0x1C, 0x3C, 0x68, 0x1E, 0x41, 0x68, 0x21, 0x45, 0x68, 0x23, 0x49, 0x68, 0x25, 0x4D, 
   0x68, 0x27, 0x51, 0x68, 0x29, 0x55, 0x68, 0x2B, 0x59, 0x68, 0x2D, 0x5D, 0x68, 0x2F, 0x61, 0x68, 
   0x31, 0x65, 0x68, 0x33, 0x69, 0x68, 0x35, 0x6D, 0x68, 0x37, 0x71, 0x68, 0x39, 0x75, 0x68, 0x3B, 
   0x79, 0x68, 0x3D, 0x7D, 0x68, 0x3F, 0x82, 0x68, 0x41, 0x86, 0x68, 0x43, 0x8A, 0x68, 0x45, 0x8E, 
   0x68, 0x47, 0x92, 0x68, 0x49, 0x96, 0x68, 0x4B, 0x9A, 0x68, 0x4D, 0x9E, 0x68, 0x4F, 0xA2, 0x68, 
   0x51, 0xA6, 0x68, 0x53, 0xAA, 0x68, 0x55, 0xAE, 0x68, 0x57, 0xB2, 0x68, 0x59, 0xB6, 0x68, 0x5B, 
   0xBA, 0x68, 0x5D, 0xBE, 0x68, 0x5F, 0xC3, 0x68, 0x61, 0xC7, 0x68, 0x63, 0xCB, 0x68, 0x65, 0xCF, 
   0x68, 0x67, 0xD3, 0x68, 0x69, 0xD7, 0x68, 0x6B, 0xDB, 0x68, 0x6D, 0xDF, 0x68, 0x6F, 0xE3, 0x68, 
   0x71, 0xE7, 0x68, 0x73, 0xEB, 0x68, 0x75, 0xEF, 0x68, 0x77, 0xF3, 0x68, 0x79, 0xF7, 0x68, 0x7B, 
   0xFB, 0x68, 0x7D, 0xFF, 0x68, 0x7F, 0x00, 0x66, 0x00, 0x04, 0x66, 0x02, 0x08, 0x66, 0x04, 0x0C, 
   0x66, 0x06, 0x10, 0x66, 0x08, 0x14, 0x66, 0x0A, 0x18, 0x66, 0x0C, 0x1C, 0x66, 0x0E, 0x20, 0x66, 
   0x10, 0x24, 0x66, 0x12, 0x28, 0x66, 0x14, 0x2C, 0x66, 0x16, 0x30, 0x66, 0x18, 0x34, 0x66, 0x1A, 
   0x38, 0x66, 0x1C, 0x3C, 0x66, 0x1E, 0x41, 0x66, 0x21, 0x45, 0x66, 0x23, 0x49, 0x66, 0x25, 0x4D, 
   0x66, 0x27, 0x51, 0x66, 0x29, 0x55, 0x66, 0x2B, 0x59, 0x66, 0x2D, 0x5D, 0x66, 0x2F, 0x61, 0x66, 
   0x31, 0x65, 0x66, 0x33, 0x69, 0x66, 0x35, 0x6D, 0x66, 0x37, 0x71, 0x66, 0x39, 0x75, 0x66, 0x3B, 
   0x79, 0x66, 0x3D, 0x7D, 0x66, 0x3F, 0x82, 0x66, 0x41, 0x86, 0x66, 0x43, 0x8A, 0x66, 0x45, 0x8E, 
   0x66, 0x47, 0x92, 0x66, 0x49, 0x96, 0x66, 0x4B, 0x9A, 0x66, 0x4D, 0x9E, 0x66, 0x4F, 0xA2, 0x66, 
   0x51, 0xA6, 0x66, 0x53, 0xAA, 0x66, 0x55, 0xAE, 0x66, 0x57, 0xB2, 0x66, 0x59, 0xB6, 0x66, 0x5B, 
   0xBA, 0x66, 0x5D, 0xBE, 0x66, 0x5F, 0xC3, 0x66, 0x61, 0xC7, 0x66, 0x63, 0xCB, 0x66, 0x65, 0xCF, 
   0x66, 0x67, 0xD3, 0x66, 0x69, 0xD7, 0x66, 0x6B, 0xDB, 0x66, 0x6D, 0xDF, 0x66, 0x6F, 0xE3, 0x66, 
   0x71, 0xE7, 0x66, 0x73, 0xEB, 0x66, 0x75, 0xEF, 0x66, 0x77, 0xF3, 0x66, 0x79, 0xF7, 0x66, 0x7B, 
   0xFB, 0x66, 0x7D, 0xFF, 0x66, 0x7F, 0x00, 0x64, 0x00, 0x04, 0x64, 0x02, 0x08, 0x64, 0x04, 0x0C, 
   0x64, 0x06, 0x10, 0x64, 0x08, 0x14, 0x64, 0x0A, 0x18, 0x64, 0x0C, 0x1C, 0x64, 0x0E, 0x20, 0x64, 
   0x10, 0x24, 0x64, 0x12, 0x28, 0x64, 0x14, 0x2C, 0x64, 0x16, 0x30, 0x64, 0x18, 0x34, 0x64, 0x1A, 
   0x38, 0x64, 0x1C, 0x3C, 0x64, 0x1E, 0x41, 0x64, 0x21, 0x45, 0x64, 0x23, 0x49, 0x64, 0x25, 0x4D, 
   0x64, 0x27, 0x51, 0x64, 0x29, 0x55, 0x64, 0x2B, 0x59, 0x64, 0x2D, 0x5D, 0x64, 0x2F, 0x61, 0x64, 
   0x31, 0x65, 0x64, 0x33, 0x69, 0x64, 0x35, 0x6D, 0x64, 0x37, 0x71, 0x64, 0x39, 0x75, 0x64, 0x3B, 
   0x79, 0x64, 0x3D, 0x7D, 0x64, 0x3F, 0x82, 0x64, 0x41, 0x86, 0x64, 0x43, 0x8A, 0x64, 0x45, 0x8E, 
   0x64, 0x47, 0x92, 0x64, 0x49, 0x96, 0x64, 0x4B, 0x9A, 0x64, 0x4D, 0x9E, 0x64, 0x4F, 0xA2, 0x64, 
   0x51, 0xA6, 0x64, 0x53, 0xAA, 0x64, 0x55, 0xAE, 0x64, 0x57, 0xB2, 0x64, 0x59, 0xB6, 0x64, 0x5B, 
   0xBA, 0x64, 0x5D, 0xBE, 0x64, 0x5F, 0xC3, 0x64, 0x61, 0xC7, 0x64, 0x63, 0xCB, 0x64, 0x65, 0xCF, 
   0x64, 0x67, 0xD3, 0x64, 0x69, 0xD7, 0x64, 0x6B, 0xDB, 0x64, 0x6D, 0xDF, 0x64, 0x6F, 0xE3, 0x64, 
   0x71, 0xE7, 0x64, 0x73, 0xEB, 0x64, 0x75, 0xEF, 0x64, 0x77, 0xF3, 0x64, 0x79, 0xF7, 0x64, 0x7B, 
   0xFB, 0x64, 0x7D, 0xFF, 0x64, 0x7F, 0x00, 0x62, 0x00, 0x04, 0x62, 0x02, 0x08, 0x62, 0x04, 0x0C, 
   0x62, 0x06, 0x10, 0x62, 0x08, 0x14, 0x62, 0x0A, 0x18, 0x62, 0x0C, 0x1C, 0x62, 0x0E, 0x20, 0x62, 
   0x10, 0x24, 0x62, 0x12, 0x28, 0x62, 0x14, 0x2C, 0x62, 0x16, 0x30, 0x62, 0x18, 0x34, 0x62, 0x1A, 
   0x38, 0x62, 0x1C, 0x3C, 0x62, 0x1E, 0x41, 0x62, 0x21, 0x45, 0x62, 0x23, 0x49, 0x62, 0x25, 0x4D, 
   0x62, 0x27, 0x51, 0x62, 0x29, 0x55, 0x62, 0x2B, 0x59, 0x62, 0x2D, 0x5D, 0x62, 0x2F, 0x61, 0x62, 
   0x31, 0x65, 0x62, 0x33, 0x69, 0x62, 0x35, 0x6D, 0x62, 0x37, 0x71, 0x62, 0x39, 0x75, 0x62, 0x3B, 
   0x79, 0x62, 0x3D, 0x7D, 0x62, 0x3F, 0x82, 0x62, 0x41, 0x86, 0x62, 0x43, 0x8A, 0x62, 0x45, 0x8E, 
   0x62, 0x47, 0x92, 0x62, 0x49, 0x96, 0x62, 0x4B, 0x9A, 0x62, 0x4D, 0x9E, 0x62, 0x4F, 0xA2, 0x62, 
   0x51, 0xA6, 0x62, 0x53, 0xAA, 0x62, 0x55, 0xAE, 0x62, 0x57, 0xB2, 0x62, 0x59, 0xB6, 0x62, 0x5B, 
   0xBA, 0x62, 0x5D, 0xBE, 0x62, 0x5F, 0xC3, 0x62, 0x61, 0xC7, 0x62, 0x63, 0xCB, 0x62, 0x65, 0xCF, 
   0x62, 0x67, 0xD3, 0x62, 0x69, 0xD7, 0x62, 0x6B, 0xDB, 0x62, 0x6D, 0xDF, 0x62, 0x6F, 0xE3, 0x62, 
   0x71, 0xE7, 0x62, 0x73, 0xEB, 0x62, 0x75, 0xEF, 0x62, 0x77, 0xF3, 0x62, 0x79, 0xF7, 0x62, 0x7B, 
   0xFB, 0x62, 0x7D, 0xFF, 0x62, 0x7F, 0x00, 0x5F, 0x00, 0x04, 0x5F, 0x02, 0x08, 0x5F, 0x04, 0x0C, 
   0x5F, 0x06, 0x10, 0x5F, 0x08, 0x14, 0x5F, 0x0A, 0x18, 0x5F, 0x0C, 0x1C, 0x5F, 0x0E, 0x20, 0x5F, 
   0x10, 0x24, 0x5F, 0x12, 0x28, 0x5F, 0x14, 0x2C, 0x5F, 0x16, 0x30, 0x5F, 0x18, 0x34, 0x5F, 0x1A, 
   0x38, 0x5F, 0x1C, 0x3C, 0x5F, 0x1E, 0x41, 0x5F, 0x21, 0x45, 0x5F, 0x23, 0x49, 0x5F, 0x25, 0x4D, 
   0x5F, 0x27, 0x51, 0x5F, 0x29, 0x55, 0x5F, 0x2B, 0x59, 0x5F, 0x2D, 0x5D, 0x5F, 0x2F, 0x61, 0x5F, 
   0x31, 0x65, 0x5F, 0x33, 0x69, 0x5F, 0x35, 0x6D, 0x5F, 0x37, 0x71, 0x5F, 0x39, 0x75, 0x5F, 0x3B, 
   0x79, 0x5F, 0x3D, 0x7D, 0x5F, 0x3F, 0x82, 0x5F, 0x41, 0x86, 0x5F, 0x43, 0x8A, 0x5F, 0x45, 0x8E, 
   0x5F, 0x47, 0x92, 0x5F, 0x49, 0x96, 0x5F, 0x4B, 0x9A, 0x5F, 0x4D, 0x9E, 0x5F, 0x4F, 0xA2, 0x5F, 
   0x51, 0xA6, 0x5F, 0x53, 0xAA, 0x5F, 0x55, 0xAE, 0x5F, 0x57, 0xB2, 0x5F, 0x59, 0xB6, 0x5F, 0x5B, 
   0xBA, 0x5F, 0x5D, 0xBE, 0x5F, 0x5F, 0xC3, 0x5F, 0x61, 0xC7, 0x5F, 0x63, 0xCB, 0x5F, 0x65, 0xCF, 
   0x5F, 0x67, 0xD3, 0x5F, 0x69, 0xD7, 0x5F, 0x6B, 0xDB, 0x5F, 0x6D, 0xDF, 0x5F, 0x6F, 0xE3, 0x5F, 
   0x71, 0xE7, 0x5F, 0x73, 0xEB, 0x5F, 0x75, 0xEF, 0x5F, 0x77, 0xF3, 0x5F, 0x79, 0xF7, 0x5F, 0x7B, 
   0xFB, 0x5F, 0x7D, 0xFF, 0x5F, 0x7F, 0x00, 0x5D, 0x00, 0x04, 0x5D, 0x02, 0x08, 0x5D, 0x04, 0x0C, 
   0x5D, 0x06, 0x10, 0x5D, 0x08, 0x14, 0x5D, 0x0A, 0x18, 0x5D, 0x0C, 0x1C, 0x5D, 0x0E, 0x20, 0x5D, 
   0x10, 0x24, 0x5D, 0x12, 0x28, 0x5D, 0x14, 0x2C, 0x5D, 0x16, 0x30, 0x5D, 0x18, 0x34, 0x5D, 0x1A, 
   0x38, 0x5D, 0x1C, 0x3C, 0x5D, 0x1E, 0x41, 0x5D, 0x21, 0x45, 0x5D, 0x23, 0x49, 0x5D, 0x25, 0x4D, 
   0x5D, 0x27, 0x51, 0x5D, 0x29, 0x55, 0x5D, 0x2B, 0x59, 0x5D, 0x2D, 0x5D, 0x5D, 0x2F, 0x61, 0x5D, 
   0x31, 0x65, 0x5D, 0x33, 0x69, 0x5D, 0x35, 0x6D, 0x5D, 0x37, 0x71, 0x5D, 0x39, 0x75, 0x5D, 0x3B, 
   0x79, 0x5D, 0x3D, 0x7D, 0x5D, 0x3F, 0x82, 0x5D, 0x41, 0x86, 0x5D, 0x43, 0x8A, 0x5D, 0x45, 0x8E, 
   0x5D, 0x47, 0x92, 0x5D, 0x49, 0x96, 0x5D, 0x4B, 0x9A, 0x5D, 0x4D, 0x9E, 0x5D, 0x4F, 0xA2, 0x5D, 
   0x51, 0xA6, 0x5D, 0x53, 0xAA, 0x5D, 0x55, 0xAE, 0x5D, 0x57, 0xB2, 0x5D, 0x59, 0xB6, 0x5D, 0x5B, 
   0xBA, 0x5D, 0x5D, 0xBE, 0x5D, 0x5F, 0xC3, 0x5D, 0x61, 0xC7, 0x5D, 0x63, 0xCB, 0x5D, 0x65, 0xCF, 
   0x5D, 0x67, 0xD3, 0x5D, 0x69, 0xD7, 0x5D, 0x6B, 0xDB, 0x5D, 0x6D, 0xDF, 0x5D, 0x6F, 0xE3, 0x5D, 
   0x71, 0xE7, 0x5D, 0x73, 0xEB, 0x5D, 0x75, 0xEF, 0x5D, 0x77, 0xF3, 0x5D, 0x79, 0xF7, 0x5D, 0x7B, 
   0xFB, 0x5D, 0x7D, 0xFF, 0x5D, 0x7F, 0x00, 0x5B, 0x00, 0x04, 0x5B, 0x02, 0x08, 0x5B, 0x04, 0x0C, 
   0x5B, 0x06, 0x10, 0x5B, 0x08, 0x14, 0x5B, 0x0A, 0x18, 0x5B, 0x0C, 0x1C, 0x5B, 0x0E, 0x20, 0x5B, 
   0x10, 0x24, 0x5B, 0x12, 0x28, 0x5B, 0x14, 0x2C, 0x5B, 0x16, 0x30, 0x5B, 0x18, 0x34, 0x5B, 0x1A, 
   0x38, 0x5B, 0x1C, 0x3C, 0x5B, 0x1E, 0x41, 0x5B, 0x21, 0x45, 0x5B, 0x23, 0x49, 0x5B, 0x25, 0x4D, 
   0x5B, 0x27, 0x51, 0x5B, 0x29, 0x55, 0x5B, 0x2B, 0x59, 0x5B, 0x2D, 0x5D, 0x5B, 0x2F, 0x61, 0x5B, 
   0x31, 0x65, 0x5B, 0x33, 0x69, 0x5B, 0x35, 0x6D, 0x5B, 0x37, 0x71, 0x5B, 0x39, 0x75, 0x5B, 0x3B, 
   0x79, 0x5B, 0x3D, 0x7D, 0x5B, 0x3F, 0x82, 0x5B, 0x41, 0x86, 0x5B, 0x43, 0x8A, 0x5B, 0x45, 0x8E, 
   0x5B, 0x47, 0x92, 0x5B, 0x49, 0x96, 0x5B, 0x4B, 0x9A, 0x5B, 0x4D, 0x9E, 0x5B, 0x4F, 0xA2, 0x5B, 
   0x51, 0xA6, 0x5B, 0x53, 0xAA, 0x5B, 0x55, 0xAE, 0x5B, 0x57, 0xB2, 0x5B, 0x59, 0xB6, 0x5B, 0x5B, 
   0xBA, 0x5B, 0x5D, 0xBE, 0x5B, 0x5F, 0xC3, 0x5B, 0x61, 0xC7, 0x5B, 0x63, 0xCB, 0x5B, 0x65, 0xCF, 
   0x5B, 0x67, 0xD3, 0x5B, 0x69, 0xD7, 0x5B, 0x6B, 0xDB, 0x5B, 0x6D, 0xDF, 0x5B, 0x6F, 0xE3, 0x5B, 
   0x71, 0xE7, 0x5B, 0x73, 0xEB, 0x5B, 0x75, 0xEF, 0x5B, 0x77, 0xF3, 0x5B, 0x79, 0xF7, 0x5B, 0x7B, 
   0xFB, 0x5B, 0x7D, 0xFF, 0x5B, 0x7F, 0x00, 0x59, 0x00, 0x04, 0x59, 0x02, 0x08, 0x59, 0x04, 0x0C, 
   0x59, 0x06, 0x10, 0x59, 0x08, 0x14, 0x59, 0x0A, 0x18, 0x59, 0x0C, 0x1C, 0x59, 0x0E, 0x20, 0x59, 
   0x10, 0x24, 0x59, 0x12, 0x28, 0x59, 0x14, 0x2C, 0x59, 0x16, 0x30, 0x59, 0x18, 0x34, 0x59, 0x1A, 
   0x38, 0x59, 0x1C, 0x3C, 0x59, 0x1E, 0x41, 0x59, 0x21, 0x45, 0x59, 0x23, 0x49, 0x59, 0x25, 0x4D, 
   0x59, 0x27, 0x51, 0x59, 0x29, 0x55, 0x59, 0x2B, 0x59, 0x59, 0x2D, 0x5D, 0x59, 0x2F, 0x61, 0x59, 
   0x31, 0x65, 0x59, 0x33, 0x69, 0x59, 0x35, 0x6D, 0x59, 0x37, 0x71, 0x59, 0x39, 0x75, 0x59, 0x3B, 
   0x79, 0x59, 0x3D, 0x7D, 0x59, 0x3F, 0x82, 0x59, 0x41, 0x86, 0x59, 0x43, 0x8A, 0x59, 0x45, 0x8E, 
   0x59, 0x47, 0x92, 0x59, 0x49, 0x96, 0x59, 0x4B, 0x9A, 0x59, 0x4D, 0x9E, 0x59, 0x4F, 0xA2, 0x59, 
   0x51, 0xA6, 0x59, 0x53, 0xAA, 0x59, 0x55, 0xAE, 0x59, 0x57, 0xB2, 0x59, 0x59, 0xB6, 0x59, 0x5B, 
   0xBA, 0x59, 0x5D, 0xBE, 0x59, 0x5F, 0xC3, 0x59, 0x61, 0xC7, 0x59, 0x63, 0xCB, 0x59, 0x65, 0xCF, 
   0x59, 0x67, 0xD3, 0x59, 0x69, 0xD7, 0x59, 0x6B, 0xDB, 0x59, 0x6D, 0xDF, 0x59, 0x6F, 0xE3, 0x59, 
   0x71, 0xE7, 0x59, 0x73, 0xEB, 0x59, 0x75, 0xEF, 0x59, 0x77, 0xF3, 0x59, 0x79, 0xF7, 0x59, 0x7B, 
   0xFB, 0x59, 0x7D, 0xFF, 0x59, 0x7F, 0x00, 0x57, 0x00, 0x04, 0x57, 0x02, 0x08, 0x57, 0x04, 0x0C, 
   0x57, 0x06, 0x10, 0x57, 0x08, 0x14, 0x57, 0x0A, 0x18, 0x57, 0x0C, 0x1C, 0x57, 0x0E, 0x20, 0x57, 
   0x10, 0x24, 0x57, 0x12, 0x28, 0x57, 0x14, 0x2C, 0x57, 0x16, 0x30, 0x57, 0x18, 0x34, 0x57, 0x1A, 
   0x38, 0x57, 0x1C, 0x3C, 0x57, 0x1E, 0x41, 0x57, 0x21, 0x45, 0x57, 0x23, 0x49, 0x57, 0x25, 0x4D, 
   0x57, 0x27, 0x51, 0x57, 0x29, 0x55, 0x57, 0x2B, 0x59, 0x57, 0x2D, 0x5D, 0x57, 0x2F, 0x61, 0x57, 
   0x31, 0x65, 0x57, 0x33, 0x69, 0x57, 0x35, 0x6D, 0x57, 0x37, 0x71, 0x57, 0x39, 0x75, 0x57, 0x3B, 
   0x79, 0x57, 0x3D, 0x7D, 0x57, 0x3F, 0x82, 0x57, 0x41, 0x86, 0x57, 0x43, 0x8A, 0x57, 0x45, 0x8E, 
   0x57, 0x47, 0x92, 0x57, 0x49, 0x96, 0x57, 0x4B, 0x9A, 0x57, 0x4D, 0x9E, 0x57, 0x4F, 0xA2, 0x57, 
   0x51, 0xA6, 0x57, 0x53, 0xAA, 0x57, 0x55, 0xAE, 0x57, 0x57, 0xB2, 0x57, 0x59, 0xB6, 0x57, 0x5B, 
   0xBA, 0x57, 0x5D, 0xBE, 0x57, 0x5F, 0xC3, 0x57, 0x61, 0xC7, 0x57, 0x63, 0xCB, 0x57, 0x65, 0xCF, 
   0x57, 0x67, 0xD3, 0x57, 0x69, 0xD7, 0x57, 0x6B, 0xDB, 0x57, 0x6D, 0xDF, 0x57, 0x6F, 0xE3, 0x57, 
   0x71, 0xE7, 0x57, 0x73, 0xEB, 0x57, 0x75, 0xEF, 0x57, 0x77, 0xF3, 0x57, 0x79, 0xF7, 0x57, 0x7B, 
   0xFB, 0x57, 0x7D, 0xFF, 0x57, 0x7F, 0x00, 0x55, 0x00, 0x04, 0x55, 0x02, 0x08, 0x55, 0x04, 0x0C, 
   0x55, 0x06, 0x10, 0x55, 0x08, 0x14, 0x55, 0x0A, 0x18, 0x55, 0x0C, 0x1C, 0x55, 0x0E, 0x20, 0x55, 
   0x10, 0x24, 0x55, 0x12, 0x28, 0x55, 0x14, 0x2C, 0x55, 0x16, 0x30, 0x55, 0x18, 0x34, 0x55, 0x1A, 
   0x38, 0x55, 0x1C, 0x3C, 0x55, 0x1E, 0x41, 0x55, 0x21, 0x45, 0x55, 0x23, 0x49, 0x55, 0x25, 0x4D, 
   0x55, 0x27, 0x51, 0x55, 0x29, 0x55, 0x55, 0x2B, 0x59, 0x55, 0x2D, 0x5D, 0x55, 0x2F, 0x61, 0x55, 
   0x31, 0x65, 0x55, 0x33, 0x69, 0x55, 0x35, 0x6D, 0x55, 0x37, 0x71, 0x55, 0x39, 0x75, 0x55, 0x3B, 
   0x79, 0x55, 0x3D, 0x7D, 0x55, 0x3F, 0x82, 0x55, 0x41, 0x86, 0x55, 0x43, 0x8A, 0x55, 0x45, 0x8E, 
   0x55, 0x47, 0x92, 0x55, 0x49, 0x96, 0x55, 0x4B, 0x9A, 0x55, 0x4D, 0x9E, 0x55, 0x4F, 0xA2, 0x55, 
   0x51, 0xA6, 0x55, 0x53, 0xAA, 0x55, 0x55, 0xAE, 0x55, 0x57, 0xB2, 0x55, 0x59, 0xB6, 0x55, 0x5B, 
   0xBA, 0x55, 0x5D, 0xBE, 0x55, 0x5F, 0xC3, 0x55, 0x61, 0xC7, 0x55, 0x63, 0xCB, 0x55, 0x65, 0xCF, 
   0x55, 0x67, 0xD3, 0x55, 0x69, 0xD7, 0x55, 0x6B, 0xDB, 0x55, 0x6D, 0xDF, 0x55, 0x6F, 0xE3, 0x55, 
   0x71, 0xE7, 0x55, 0x73, 0xEB, 0x55, 0x75, 0xEF, 0x55, 0x77, 0xF3, 0x55, 0x79, 0xF7, 0x55, 0x7B, 
   0xFB, 0x55, 0x7D, 0xFF, 0x55, 0x7F, 0x00, 0x53, 0x00, 0x04, 0x53, 0x02, 0x08, 0x53, 0x04, 0x0C, 
   0x53, 0x06, 0x10, 0x53, 0x08, 0x14, 0x53, 0x0A, 0x18, 0x53, 0x0C, 0x1C, 0x53, 0x0E, 0x20, 0x53, 
   0x10, 0x24, 0x53, 0x12, 0x28, 0x53, 0x14, 0x2C, 0x53, 0x16, 0x30, 0x53, 0x18, 0x34, 0x53, 0x1A, 
   0x38, 0x53, 0x1C, 0x3C, 0x53, 0x1E, 0x41, 0x53, 0x21, 0x45, 0x53, 0x23, 0x49, 0x53, 0x25, 0x4D, 
   0x53, 0x27, 0x51, 0x53, 0x29, 0x55, 0x53, 0x2B, 0x59, 0x53, 0x2D, 0x5D, 0x53, 0x2F, 0x61, 0x53, 
   0x31, 0x65, 0x53, 0x33, 0x69, 0x53, 0x35, 0x6D, 0x53, 0x37, 0x71, 0x53, 0x39, 0x75, 0x53, 0x3B, 
   0x79, 0x53, 0x3D, 0x7D, 0x53, 0x3F, 0x82, 0x53, 0x41, 0x86, 0x53, 0x43, 0x8A, 0x53, 0x45, 0x8E, 
   0x53, 0x47, 0x92, 0x53, 0x49, 0x96, 0x53, 0x4B, 0x9A, 0x53, 0x4D, 0x9E, 0x53, 0x4F, 0xA2, 0x53, 
   0x51, 0xA6, 0x53, 0x53, 0xAA, 0x53, 0x55, 0xAE, 0x53, 0x57, 0xB2, 0x53, 0x59, 0xB6, 0x53, 0x5B, 
   0xBA, 0x53, 0x5D, 0xBE, 0x53, 0x5F, 0xC3, 0x53, 0x61, 0xC7, 0x53, 0x63, 0xCB, 0x53, 0x65, 0xCF, 
   0x53, 0x67, 0xD3, 0x53, 0x69, 0xD7, 0x53, 0x6B, 0xDB, 0x53, 0x6D, 0xDF, 0x53, 0x6F, 0xE3, 0x53, 
   0x71, 0xE7, 0x53, 0x73, 0xEB, 0x53, 0x75, 0xEF, 0x53, 0x77, 0xF3, 0x53, 0x79, 0xF7, 0x53, 0x7B, 
   0xFB, 0x53, 0x7D, 0xFF, 0x53, 0x7F, 0x00, 0x51, 0x00, 0x04, 0x51, 0x02, 0x08, 0x51, 0x04, 0x0C, 
   0x51, 0x06, 0x10, 0x51, 0x08, 0x14, 0x51, 0x0A, 0x18, 0x51, 0x0C, 0x1C, 0x51, 0x0E, 0x20, 0x51, 
   0x10, 0x24, 0x51, 0x12, 0x28, 0x51, 0x14, 0x2C, 0x51, 0x16, 0x30, 0x51, 0x18, 0x34, 0x51, 0x1A, 
   0x38, 0x51, 0x1C, 0x3C, 0x51, 0x1E, 0x41, 0x51, 0x21, 0x45, 0x51, 0x23, 0x49, 0x51, 0x25, 0x4D, 
   0x51, 0x27, 0x51, 0x51, 0x29, 0x55, 0x51, 0x2B, 0x59, 0x51, 0x2D, 0x5D, 0x51, 0x2F, 0x61, 0x51, 
   0x31, 0x65, 0x51, 0x33, 0x69, 0x51, 0x35, 0x6D, 0x51, 0x37, 0x71, 0x51, 0x39, 0x75, 0x51, 0x3B, 
   0x79, 0x51, 0x3D, 0x7D, 0x51, 0x3F, 0x82, 0x51, 0x41, 0x86, 0x51, 0x43, 0x8A, 0x51, 0x45, 0x8E, 
   0x51, 0x47, 0x92, 0x51, 0x49, 0x96, 0x51, 0x4B, 0x9A, 0x51, 0x4D, 0x9E, 0x51, 0x4F, 0xA2, 0x51, 
   0x51, 0xA6, 0x51, 0x53, 0xAA, 0x51, 0x55, 0xAE, 0x51, 0x57, 0xB2, 0x51, 0x59, 0xB6, 0x51, 0x5B, 
   0xBA, 0x51, 0x5D, 0xBE, 0x51, 0x5F, 0xC3, 0x51, 0x61, 0xC7, 0x51, 0x63, 0xCB, 0x51, 0x65, 0xCF, 
   0x51, 0x67, 0xD3, 0x51, 0x69, 0xD7, 0x51, 0x6B, 0xDB, 0x51, 0x6D, 0xDF, 0x51, 0x6F, 0xE3, 0x51, 
   0x71, 0xE7, 0x51, 0x73, 0xEB, 0x51, 0x75, 0xEF, 0x51, 0x77, 0xF3, 0x51, 0x79, 0xF7, 0x51, 0x7B, 
   0xFB, 0x51, 0x7D, 0xFF, 0x51, 0x7F, 0x00, 0x4F, 0x00, 0x04, 0x4F, 0x02, 0x08, 0x4F, 0x04, 0x0C, 
   0x4F, 0x06, 0x10, 0x4F, 0x08, 0x14, 0x4F, 0x0A, 0x18, 0x4F, 0x0C, 0x1C, 0x4F, 0x0E, 0x20, 0x4F, 
   0x10, 0x24, 0x4F, 0x12, 0x28, 0x4F, 0x14, 0x2C, 0x4F, 0x16, 0x30, 0x4F, 0x18, 0x34, 0x4F, 0x1A, 
   0x38, 0x4F, 0x1C, 0x3C, 0x4F, 0x1E, 0x41, 0x4F, 0x21, 0x45, 0x4F, 0x23, 0x49, 0x4F, 0x25, 0x4D, 
   0x4F, 0x27, 0x51, 0x4F, 0x29, 0x55, 0x4F, 0x2B, 0x59, 0x4F, 0x2D, 0x5D, 0x4F, 0x2F, 0x61, 0x4F, 
   0x31, 0x65, 0x4F, 0x33, 0x69, 0x4F, 0x35, 0x6D, 0x4F, 0x37, 0x71, 0x4F, 0x39, 0x75, 0x4F, 0x3B, 
   0x79, 0x4F, 0x3D, 0x7D, 0x4F, 0x3F, 0x82, 0x4F, 0x41, 0x86, 0x4F, 0x43, 0x8A, 0x4F, 0x45, 0x8E, 
   0x4F, 0x47, 0x92, 0x4F, 0x49, 0x96, 0x4F, 0x4B, 0x9A, 0x4F, 0x4D, 0x9E, 0x4F, 0x4F, 0xA2, 0x4F, 
   0x51, 0xA6, 0x4F, 0x53, 0xAA, 0x4F, 0x55, 0xAE, 0x4F, 0x57, 0xB2, 0x4F, 0x59, 0xB6, 0x4F, 0x5B, 
   0xBA, 0x4F, 0x5D, 0xBE, 0x4F, 0x5F, 0xC3, 0x4F, 0x61, 0xC7, 0x4F, 0x63, 0xCB, 0x4F, 0x65, 0xCF, 
   0x4F, 0x67, 0xD3, 0x4F, 0x69, 0xD7, 0x4F, 0x6B, 0xDB, 0x4F, 0x6D, 0xDF, 0x4F, 0x6F, 0xE3, 0x4F, 
   0x71, 0xE7, 0x4F, 0x73, 0xEB, 0x4F, 0x75, 0xEF, 0x4F, 0x77, 0xF3, 0x4F, 0x79, 0xF7, 0x4F, 0x7B, 
   0xFB, 0x4F, 0x7D, 0xFF, 0x4F, 0x7F, 0x00, 0x4D, 0x00, 0x04, 0x4D, 0x02, 0x08, 0x4D, 0x04, 0x0C, 
   0x4D, 0x06, 0x10, 0x4D, 0x08, 0x14, 0x4D, 0x0A, 0x18, 0x4D, 0x0C, 0x1C, 0x4D, 0x0E, 0x20, 0x4D, 
   0x10, 0x24, 0x4D, 0x12, 0x28, 0x4D, 0x14, 0x2C, 0x4D, 0x16, 0x30, 0x4D, 0x18, 0x34, 0x4D, 0x1A, 
   0x38, 0x4D, 0x1C, 0x3C, 0x4D, 0x1E, 0x41, 0x4D, 0x21, 0x45, 0x4D, 0x23, 0x49, 0x4D, 0x25, 0x4D, 
   0x4D, 0x27, 0x51, 0x4D, 0x29, 0x55, 0x4D, 0x2B, 0x59, 0x4D, 0x2D, 0x5D, 0x4D, 0x2F, 0x61, 0x4D, 
   0x31, 0x65, 0x4D, 0x33, 0x69, 0x4D, 0x35, 0x6D, 0x4D, 0x37, 0x71, 0x4D, 0x39, 0x75, 0x4D, 0x3B, 
   0x79, 0x4D, 0x3D, 0x7D, 0x4D, 0x3F, 0x82, 0x4D, 0x41, 0x86, 0x4D, 0x43, 0x8A, 0x4D, 0x45, 0x8E, 
   0x4D, 0x47, 0x92, 0x4D, 0x49, 0x96, 0x4D, 0x4B, 0x9A, 0x4D, 0x4D, 0x9E, 0x4D, 0x4F, 0xA2, 0x4D, 
   0x51, 0xA6, 0x4D, 0x53, 0xAA, 0x4D, 0x55, 0xAE, 0x4D, 0x57, 0xB2, 0x4D, 0x59, 0xB6, 0x4D, 0x5B, 
   0xBA, 0x4D, 0x5D, 0xBE, 0x4D, 0x5F, 0xC3, 0x4D, 0x61, 0xC7, 0x4D, 0x63, 0xCB, 0x4D, 0x65, 0xCF, 
   0x4D, 0x67, 0xD3, 0x4D, 0x69, 0xD7, 0x4D, 0x6B, 0xDB, 0x4D, 0x6D, 0xDF, 0x4D, 0x6F, 0xE3, 0x4D, 
   0x71, 0xE7, 0x4D, 0x73, 0xEB, 0x4D, 0x75, 0xEF, 0x4D, 0x77, 0xF3, 0x4D, 0x79, 0xF7, 0x4D, 0x7B, 
   0xFB, 0x4D, 0x7D, 0xFF, 0x4D, 0x7F, 0x00, 0x4B, 0x00, 0x04, 0x4B, 0x02, 0x08, 0x4B, 0x04, 0x0C, 
   0x4B, 0x06, 0x10, 0x4B, 0x08, 0x14, 0x4B, 0x0A, 0x18, 0x4B, 0x0C, 0x1C, 0x4B, 0x0E, 0x20, 0x4B, 
   0x10, 0x24, 0x4B, 0x12, 0x28, 0x4B, 0x14, 0x2C, 0x4B, 0x16, 0x30, 0x4B, 0x18, 0x34, 0x4B, 0x1A, 
   0x38, 0x4B, 0x1C, 0x3C, 0x4B, 0x1E, 0x41, 0x4B, 0x21, 0x45, 0x4B, 0x23, 0x49, 0x4B, 0x25, 0x4D, 
   0x4B, 0x27, 0x51, 0x4B, 0x29, 0x55, 0x4B, 0x2B, 0x59, 0x4B, 0x2D, 0x5D, 0x4B, 0x2F, 0x61, 0x4B, 
   0x31, 0x65, 0x4B, 0x33, 0x69, 0x4B, 0x35, 0x6D, 0x4B, 0x37, 0x71, 0x4B, 0x39, 0x75, 0x4B, 0x3B, 
   0x79, 0x4B, 0x3D, 0x7D, 0x4B, 0x3F, 0x82, 0x4B, 0x41, 0x86, 0x4B, 0x43, 0x8A, 0x4B, 0x45, 0x8E, 
   0x4B, 0x47, 0x92, 0x4B, 0x49, 0x96, 0x4B, 0x4B, 0x9A, 0x4B, 0x4D, 0x9E, 0x4B, 0x4F, 0xA2, 0x4B, 
   0x51, 0xA6, 0x4B, 0x53, 0xAA, 0x4B, 0x55, 0xAE, 0x4B, 0x57, 0xB2, 0x4B, 0x59, 0xB6, 0x4B, 0x5B, 
   0xBA, 0x4B, 0x5D, 0xBE, 0x4B, 0x5F, 0xC3, 0x4B, 0x61, 0xC7, 0x4B, 0x63, 0xCB, 0x4B, 0x65, 0xCF, 
   0x4B, 0x67, 0xD3, 0x4B, 0x69, 0xD7, 0x4B, 0x6B, 0xDB, 0x4B, 0x6D, 0xDF, 0x4B, 0x6F, 0xE3, 0x4B, 
   0x71, 0xE7, 0x4B, 0x73, 0xEB, 0x4B, 0x75, 0xEF, 0x4B, 0x77, 0xF3, 0x4B, 0x79, 0xF7, 0x4B, 0x7B, 
   0xFB, 0x4B, 0x7D, 0xFF, 0x4B, 0x7F, 0x00, 0x49, 0x00, 0x04, 0x49, 0x02, 0x08, 0x49, 0x04, 0x0C, 
   0x49, 0x06, 0x10, 0x49, 0x08, 0x14, 0x49, 0x0A, 0x18, 0x49, 0x0C, 0x1C, 0x49, 0x0E, 0x20, 0x49, 
   0x10, 0x24, 0x49, 0x12, 0x28, 0x49, 0x14, 0x2C, 0x49, 0x16, 0x30, 0x49, 0x18, 0x34, 0x49, 0x1A, 
   0x38, 0x49, 0x1C, 0x3C, 0x49, 0x1E, 0x41, 0x49, 0x21, 0x45, 0x49, 0x23, 0x49, 0x49, 0x25, 0x4D, 
   0x49, 0x27, 0x51, 0x49, 0x29, 0x55, 0x49, 0x2B, 0x59, 0x49, 0x2D, 0x5D, 0x49, 0x2F, 0x61, 0x49, 
   0x31, 0x65, 0x49, 0x33, 0x69, 0x49, 0x35, 0x6D, 0x49, 0x37, 0x71, 0x49, 0x39, 0x75, 0x49, 0x3B, 
   0x79, 0x49, 0x3D, 0x7D, 0x49, 0x3F, 0x82, 0x49, 0x41, 0x86, 0x49, 0x43, 0x8A, 0x49, 0x45, 0x8E, 
   0x49, 0x47, 0x92, 0x49, 0x49, 0x96, 0x49, 0x4B, 0x9A, 0x49, 0x4D, 0x9E, 0x49, 0x4F, 0xA2, 0x49, 
   0x51, 0xA6, 0x49, 0x53, 0xAA, 0x49, 0x55, 0xAE, 0x49, 0x57, 0xB2, 0x49, 0x59, 0xB6, 0x49, 0x5B, 
   0xBA, 0x49, 0x5D, 0xBE, 0x49, 0x5F, 0xC3, 0x49, 0x61, 0xC7, 0x49, 0x63, 0xCB, 0x49, 0x65, 0xCF, 
   0x49, 0x67, 0xD3, 0x49, 0x69, 0xD7, 0x49, 0x6B, 0xDB, 0x49, 0x6D, 0xDF, 0x49, 0x6F, 0xE3, 0x49, 
   0x71, 0xE7, 0x49, 0x73, 0xEB, 0x49, 0x75, 0xEF, 0x49, 0x77, 0xF3, 0x49, 0x79, 0xF7, 0x49, 0x7B, 
   0xFB, 0x49, 0x7D, 0xFF, 0x49, 0x7F, 0x00, 0x47, 0x00, 0x04, 0x47, 0x02, 0x08, 0x47, 0x04, 0x0C, 
   0x47, 0x06, 0x10, 0x47, 0x08, 0x14, 0x47, 0x0A, 0x18, 0x47, 0x0C, 0x1C, 0x47, 0x0E, 0x20, 0x47, 
   0x10, 0x24, 0x47, 0x12, 0x28, 0x47, 0x14, 0x2C, 0x47, 0x16, 0x30, 0x47, 0x18, 0x34, 0x47, 0x1A, 
   0x38, 0x47, 0x1C, 0x3C, 0x47, 0x1E, 0x41, 0x47, 0x21, 0x45, 0x47, 0x23, 0x49, 0x47, 0x25, 0x4D, 
   0x47, 0x27, 0x51, 0x47, 0x29, 0x55, 0x47, 0x2B, 0x59, 0x47, 0x2D, 0x5D, 0x47, 0x2F, 0x61, 0x47, 
   0x31, 0x65, 0x47, 0x33, 0x69, 0x47, 0x35, 0x6D, 0x47, 0x37, 0x71, 0x47, 0x39, 0x75, 0x47, 0x3B, 
   0x79, 0x47, 0x3D, 0x7D, 0x47, 0x3F, 0x82, 0x47, 0x41, 0x86, 0x47, 0x43, 0x8A, 0x47, 0x45, 0x8E, 
   0x47, 0x47, 0x92, 0x47, 0x49, 0x96, 0x47, 0x4B, 0x9A, 0x47, 0x4D, 0x9E, 0x47, 0x4F, 0xA2, 0x47, 
   0x51, 0xA6, 0x47, 0x53, 0xAA, 0x47, 0x55, 0xAE, 0x47, 0x57, 0xB2, 0x47, 0x59, 0xB6, 0x47, 0x5B, 
   0xBA, 0x47, 0x5D, 0xBE, 0x47, 0x5F, 0xC3, 0x47, 0x61, 0xC7, 0x47, 0x63, 0xCB, 0x47, 0x65, 0xCF, 
   0x47, 0x67, 0xD3, 0x47, 0x69, 0xD7, 0x47, 0x6B, 0xDB, 0x47, 0x6D, 0xDF, 0x47, 0x6F, 0xE3, 0x47, 
   0x71, 0xE7, 0x47, 0x73, 0xEB, 0x47, 0x75, 0xEF, 0x47, 0x77, 0xF3, 0x47, 0x79, 0xF7, 0x47, 0x7B, 
   0xFB, 0x47, 0x7D, 0xFF, 0x47, 0x7F, 0x00, 0x45, 0x00, 0x04, 0x45, 0x02, 0x08, 0x45, 0x04, 0x0C, 
   0x45, 0x06, 0x10, 0x45, 0x08, 0x14, 0x45, 0x0A, 0x18, 0x45, 0x0C, 0x1C, 0x45, 0x0E, 0x20, 0x45, 
   0x10, 0x24, 0x45, 0x12, 0x28, 0x45, 0x14, 0x2C, 0x45, 0x16, 0x30, 0x45, 0x18, 0x34, 0x45, 0x1A, 
   0x38, 0x45, 0x1C, 0x3C, 0x45, 0x1E, 0x41, 0x45, 0x21, 0x45, 0x45, 0x23, 0x49, 0x45, 0x25, 0x4D, 
   0x45, 0x27, 0x51, 0x45, 0x29, 0x55, 0x45, 0x2B, 0x59, 0x45, 0x2D, 0x5D, 0x45, 0x2F, 0x61, 0x45, 
   0x31, 0x65, 0x45, 0x33, 0x69, 0x45, 0x35, 0x6D, 0x45, 0x37, 0x71, 0x45, 0x39, 0x75, 0x45, 0x3B, 
   0x79, 0x45, 0x3D, 0x7D, 0x45, 0x3F, 0x82, 0x45, 0x41, 0x86, 0x45, 0x43, 0x8A, 0x45, 0x45, 0x8E, 
   0x45, 0x47, 0x92, 0x45, 0x49, 0x96, 0x45, 0x4B, 0x9A, 0x45, 0x4D, 0x9E, 0x45, 0x4F, 0xA2, 0x45, 
   0x51, 0xA6, 0x45, 0x53, 0xAA, 0x45, 0x55, 0xAE, 0x45, 0x57, 0xB2, 0x45, 0x59, 0xB6, 0x45, 0x5B, 
   0xBA, 0x45, 0x5D, 0xBE, 0x45, 0x5F, 0xC3, 0x45, 0x61, 0xC7, 0x45, 0x63, 0xCB, 0x45, 0x65, 0xCF, 
   0x45, 0x67, 0xD3, 0x45, 0x69, 0xD7, 0x45, 0x6B, 0xDB, 0x45, 0x6D, 0xDF, 0x45, 0x6F, 0xE3, 0x45, 
   0x71, 0xE7, 0x45, 0x73, 0xEB, 0x45, 0x75, 0xEF, 0x45, 0x77, 0xF3, 0x45, 0x79, 0xF7, 0x45, 0x7B, 
   0xFB, 0x45, 0x7D, 0xFF, 0x45, 0x7F, 0x00, 0x43, 0x00, 0x04, 0x43, 0x02, 0x08, 0x43, 0x04, 0x0C, 
   0x43, 0x06, 0x10, 0x43, 0x08, 0x14, 0x43, 0x0A, 0x18, 0x43, 0x0C, 0x1C, 0x43, 0x0E, 0x20, 0x43, 
   0x10, 0x24, 0x43, 0x12, 0x28, 0x43, 0x14, 0x2C, 0x43, 0x16, 0x30, 0x43, 0x18, 0x34, 0x43, 0x1A, 
   0x38, 0x43, 0x1C, 0x3C, 0x43, 0x1E, 0x41, 0x43, 0x21, 0x45, 0x43, 0x23, 0x49, 0x43, 0x25, 0x4D, 
   0x43, 0x27, 0x51, 0x43, 0x29, 0x55, 0x43, 0x2B, 0x59, 0x43, 0x2D, 0x5D, 0x43, 0x2F, 0x61, 0x43, 
   0x31, 0x65, 0x43, 0x33, 0x69, 0x43, 0x35, 0x6D, 0x43, 0x37, 0x71, 0x43, 0x39, 0x75, 0x43, 0x3B, 
   0x79, 0x43, 0x3D, 0x7D, 0x43, 0x3F, 0x82, 0x43, 0x41, 0x86, 0x43, 0x43, 0x8A, 0x43, 0x45, 0x8E, 
   0x43, 0x47, 0x92, 0x43, 0x49, 0x96, 0x43, 0x4B, 0x9A, 0x43, 0x4D, 0x9E, 0x43, 0x4F, 0xA2, 0x43, 
   0x51, 0xA6, 0x43, 0x53, 0xAA, 0x43, 0x55, 0xAE, 0x43, 0x57, 0xB2, 0x43, 0x59, 0xB6, 0x43, 0x5B, 
   0xBA, 0x43, 0x5D, 0xBE, 0x43, 0x5F, 0xC3, 0x43, 0x61, 0xC7, 0x43, 0x63, 0xCB, 0x43, 0x65, 0xCF, 
   0x43, 0x67, 0xD3, 0x43, 0x69, 0xD7, 0x43, 0x6B, 0xDB, 0x43, 0x6D, 0xDF, 0x43, 0x6F, 0xE3, 0x43, 
   0x71, 0xE7, 0x43, 0x73, 0xEB, 0x43, 0x75, 0xEF, 0x43, 0x77, 0xF3, 0x43, 0x79, 0xF7, 0x43, 0x7B, 
   0xFB, 0x43, 0x7D, 0xFF, 0x43, 0x7F, 0x00, 0x41, 0x00, 0x04, 0x41, 0x02, 0x08, 0x41, 0x04, 0x0C, 
   0x41, 0x06, 0x10, 0x41, 0x08, 0x14, 0x41, 0x0A, 0x18, 0x41, 0x0C, 0x1C, 0x41, 0x0E, 0x20, 0x41, 
   0x10, 0x24, 0x41, 0x12, 0x28, 0x41, 0x14, 0x2C, 0x41, 0x16, 0x30, 0x41, 0x18, 0x34, 0x41, 0x1A, 
   0x38, 0x41, 0x1C, 0x3C, 0x41, 0x1E, 0x41, 0x41, 0x21, 0x45, 0x41, 0x23, 0x49, 0x41, 0x25, 0x4D, 
   0x41, 0x27, 0x51, 0x41, 0x29, 0x55, 0x41, 0x2B, 0x59, 0x41, 0x2D, 0x5D, 0x41, 0x2F, 0x61, 0x41, 
   0x31, 0x65, 0x41, 0x33, 0x69, 0x41, 0x35, 0x6D, 0x41, 0x37, 0x71, 0x41, 0x39, 0x75, 0x41, 0x3B, 
   0x79, 0x41, 0x3D, 0x7D, 0x41, 0x3F, 0x82, 0x41, 0x41, 0x86, 0x41, 0x43, 0x8A, 0x41, 0x45, 0x8E, 
   0x41, 0x47, 0x92, 0x41, 0x49, 0x96, 0x41, 0x4B, 0x9A, 0x41, 0x4D, 0x9E, 0x41, 0x4F, 0xA2, 0x41, 
   0x51, 0xA6, 0x41, 0x53, 0xAA, 0x41, 0x55, 0xAE, 0x41, 0x57, 0xB2, 0x41, 0x59, 0xB6, 0x41, 0x5B, 
   0xBA, 0x41, 0x5D, 0xBE, 0x41, 0x5F, 0xC3, 0x41, 0x61, 0xC7, 0x41, 0x63, 0xCB, 0x41, 0x65, 0xCF, 
   0x41, 0x67, 0xD3, 0x41, 0x69, 0xD7, 0x41, 0x6B, 0xDB, 0x41, 0x6D, 0xDF, 0x41, 0x6F, 0xE3, 0x41, 
   0x71, 0xE7, 0x41, 0x73, 0xEB, 0x41, 0x75, 0xEF, 0x41, 0x77, 0xF3, 0x41, 0x79, 0xF7, 0x41, 0x7B, 
   0xFB, 0x41, 0x7D, 0xFF, 0x41, 0x7F, 0x00, 0x3F, 0x00, 0x04, 0x3F, 0x02, 0x08, 0x3F, 0x04, 0x0C, 
   0x3F, 0x06, 0x10, 0x3F, 0x08, 0x14, 0x3F, 0x0A, 0x18, 0x3F, 0x0C, 0x1C, 0x3F, 0x0E, 0x20, 0x3F, 
   0x10, 0x24, 0x3F, 0x12, 0x28, 0x3F, 0x14, 0x2C, 0x3F, 0x16, 0x30, 0x3F, 0x18, 0x34, 0x3F, 0x1A, 
   0x38, 0x3F, 0x1C, 0x3C, 0x3F, 0x1E, 0x41, 0x3F, 0x21, 0x45, 0x3F, 0x23, 0x49, 0x3F, 0x25, 0x4D, 
   0x3F, 0x27, 0x51, 0x3F, 0x29, 0x55, 0x3F, 0x2B, 0x59, 0x3F, 0x2D, 0x5D, 0x3F, 0x2F, 0x61, 0x3F, 
   0x31, 0x65, 0x3F, 0x33, 0x69, 0x3F, 0x35, 0x6D, 0x3F, 0x37, 0x71, 0x3F, 0x39, 0x75, 0x3F, 0x3B, 
   0x79, 0x3F, 0x3D, 0x7D, 0x3F, 0x3F, 0x82, 0x3F, 0x41, 0x86, 0x3F, 0x43, 0x8A, 0x3F, 0x45, 0x8E, 
   0x3F, 0x47, 0x92, 0x3F, 0x49, 0x96, 0x3F, 0x4B, 0x9A, 0x3F, 0x4D, 0x9E, 0x3F, 0x4F, 0xA2, 0x3F, 
   0x51, 0xA6, 0x3F, 0x53, 0xAA, 0x3F, 0x55, 0xAE, 0x3F, 0x57, 0xB2, 0x3F, 0x59, 0xB6, 0x3F, 0x5B, 
   0xBA, 0x3F, 0x5D, 0xBE, 0x3F, 0x5F, 0xC3, 0x3F, 0x61, 0xC7, 0x3F, 0x63, 0xCB, 0x3F, 0x65, 0xCF, 
   0x3F, 0x67, 0xD3, 0x3F, 0x69, 0xD7, 0x3F, 0x6B, 0xDB, 0x3F, 0x6D, 0xDF, 0x3F, 0x6F, 0xE3, 0x3F, 
   0x71, 0xE7, 0x3F, 0x73, 0xEB, 0x3F, 0x75, 0xEF, 0x3F, 0x77, 0xF3, 0x3F, 0x79, 0xF7, 0x3F, 0x7B, 
   0xFB, 0x3F, 0x7D, 0xFF, 0x3F, 0x7F, 0x00, 0x3D, 0x00, 0x04, 0x3D, 0x02, 0x08, 0x3D, 0x04, 0x0C, 
   0x3D, 0x06, 0x10, 0x3D, 0x08, 0x14, 0x3D, 0x0A, 0x18, 0x3D, 0x0C, 0x1C, 0x3D, 0x0E, 0x20, 0x3D, 
   0x10, 0x24, 0x3D, 0x12, 0x28, 0x3D, 0x14, 0x2C, 0x3D, 0x16, 0x30, 0x3D, 0x18, 0x34, 0x3D, 0x1A, 
   0x38, 0x3D, 0x1C, 0x3C, 0x3D, 0x1E, 0x41, 0x3D, 0x21, 0x45, 0x3D, 0x23, 0x49, 0x3D, 0x25, 0x4D, 
   0x3D, 0x27, 0x51, 0x3D, 0x29, 0x55, 0x3D, 0x2B, 0x59, 0x3D, 0x2D, 0x5D, 0x3D, 0x2F, 0x61, 0x3D, 
   0x31, 0x65, 0x3D, 0x33, 0x69, 0x3D, 0x35, 0x6D, 0x3D, 0x37, 0x71, 0x3D, 0x39, 0x75, 0x3D, 0x3B, 
   0x79, 0x3D, 0x3D, 0x7D, 0x3D, 0x3F, 0x82, 0x3D, 0x41, 0x86, 0x3D, 0x43, 0x8A, 0x3D, 0x45, 0x8E, 
   0x3D, 0x47, 0x92, 0x3D, 0x49, 0x96, 0x3D, 0x4B, 0x9A, 0x3D, 0x4D, 0x9E, 0x3D, 0x4F, 0xA2, 0x3D, 
   0x51, 0xA6, 0x3D, 0x53, 0xAA, 0x3D, 0x55, 0xAE, 0x3D, 0x57, 0xB2, 0x3D, 0x59, 0xB6, 0x3D, 0x5B, 
   0xBA, 0x3D, 0x5D, 0xBE, 0x3D, 0x5F, 0xC3, 0x3D, 0x61, 0xC7, 0x3D, 0x63, 0xCB, 0x3D, 0x65, 0xCF, 
   0x3D, 0x67, 0xD3, 0x3D, 0x69, 0xD7, 0x3D, 0x6B, 0xDB, 0x3D, 0x6D, 0xDF, 0x3D, 0x6F, 0xE3, 0x3D, 
   0x71, 0xE7, 0x3D, 0x73, 0xEB, 0x3D, 0x75, 0xEF, 0x3D, 0x77, 0xF3, 0x3D, 0x79, 0xF7, 0x3D, 0x7B, 
   0xFB, 0x3D, 0x7D, 0xFF, 0x3D, 0x7F, 0x00, 0x3B, 0x00, 0x04, 0x3B, 0x02, 0x08, 0x3B, 0x04, 0x0C, 
   0x3B, 0x06, 0x10, 0x3B, 0x08, 0x14, 0x3B, 0x0A, 0x18, 0x3B, 0x0C, 0x1C, 0x3B, 0x0E, 0x20, 0x3B, 
   0x10, 0x24, 0x3B, 0x12, 0x28, 0x3B, 0x14, 0x2C, 0x3B, 0x16, 0x30, 0x3B, 0x18, 0x34, 0x3B, 0x1A, 
   0x38, 0x3B, 0x1C, 0x3C, 0x3B, 0x1E, 0x41, 0x3B, 0x21, 0x45, 0x3B, 0x23, 0x49, 0x3B, 0x25, 0x4D, 
   0x3B, 0x27, 0x51, 0x3B, 0x29, 0x55, 0x3B, 0x2B, 0x59, 0x3B, 0x2D, 0x5D, 0x3B, 0x2F, 0x61, 0x3B, 
   0x31, 0x65, 0x3B, 0x33, 0x69, 0x3B, 0x35, 0x6D, 0x3B, 0x37, 0x71, 0x3B, 0x39, 0x75, 0x3B, 0x3B, 
   0x79, 0x3B, 0x3D, 0x7D, 0x3B, 0x3F, 0x82, 0x3B, 0x41, 0x86, 0x3B, 0x43, 0x8A, 0x3B, 0x45, 0x8E, 
   0x3B, 0x47, 0x92, 0x3B, 0x49, 0x96, 0x3B, 0x4B, 0x9A, 0x3B, 0x4D, 0x9E, 0x3B, 0x4F, 0xA2, 0x3B, 
   0x51, 0xA6, 0x3B, 0x53, 0xAA, 0x3B, 0x55, 0xAE, 0x3B, 0x57, 0xB2, 0x3B, 0x59, 0xB6, 0x3B, 0x5B, 
   0xBA, 0x3B, 0x5D, 0xBE, 0x3B, 0x5F, 0xC3, 0x3B, 0x61, 0xC7, 0x3B, 0x63, 0xCB, 0x3B, 0x65, 0xCF, 
   0x3B, 0x67, 0xD3, 0x3B, 0x69, 0xD7, 0x3B, 0x6B, 0xDB, 0x3B, 0x6D, 0xDF, 0x3B, 0x6F, 0xE3, 0x3B, 
   0x71, 0xE7, 0x3B, 0x73, 0xEB, 0x3B, 0x75, 0xEF, 0x3B, 0x77, 0xF3, 0x3B, 0x79, 0xF7, 0x3B, 0x7B, 
   0xFB, 0x3B, 0x7D, 0xFF, 0x3B, 0x7F, 0x00, 0x39, 0x00, 0x04, 0x39, 0x02, 0x08, 0x39, 0x04, 0x0C, 
   0x39, 0x06, 0x10, 0x39, 0x08, 0x14, 0x39, 0x0A, 0x18, 0x39, 0x0C, 0x1C, 0x39, 0x0E, 0x20, 0x39, 
   0x10, 0x24, 0x39, 0x12, 0x28, 0x39, 0x14, 0x2C, 0x39, 0x16, 0x30, 0x39, 0x18, 0x34, 0x39, 0x1A, 
   0x38, 0x39, 0x1C, 0x3C, 0x39, 0x1E, 0x41, 0x39, 0x21, 0x45, 0x39, 0x23, 0x49, 0x39, 0x25, 0x4D, 
   0x39, 0x27, 0x51, 0x39, 0x29, 0x55, 0x39, 0x2B, 0x59, 0x39, 0x2D, 0x5D, 0x39, 0x2F, 0x61, 0x39, 
   0x31, 0x65, 0x39, 0x33, 0x69, 0x39, 0x35, 0x6D, 0x39, 0x37, 0x71, 0x39, 0x39, 0x75, 0x39, 0x3B, 
   0x79, 0x39, 0x3D, 0x7D, 0x39, 0x3F, 0x82, 0x39, 0x41, 0x86, 0x39, 0x43, 0x8A, 0x39, 0x45, 0x8E, 
   0x39, 0x47, 0x92, 0x39, 0x49, 0x96, 0x39, 0x4B, 0x9A, 0x39, 0x4D, 0x9E, 0x39, 0x4F, 0xA2, 0x39, 
   0x51, 0xA6, 0x39, 0x53, 0xAA, 0x39, 0x55, 0xAE, 0x39, 0x57, 0xB2, 0x39, 0x59, 0xB6, 0x39, 0x5B, 
   0xBA, 0x39, 0x5D, 0xBE, 0x39, 0x5F, 0xC3, 0x39, 0x61, 0xC7, 0x39, 0x63, 0xCB, 0x39, 0x65, 0xCF, 
   0x39, 0x67, 0xD3, 0x39, 0x69, 0xD7, 0x39, 0x6B, 0xDB, 0x39, 0x6D, 0xDF, 0x39, 0x6F, 0xE3, 0x39, 
   0x71, 0xE7, 0x39, 0x73, 0xEB, 0x39, 0x75, 0xEF, 0x39, 0x77, 0xF3, 0x39, 0x79, 0xF7, 0x39, 0x7B, 
   0xFB, 0x39, 0x7D, 0xFF, 0x39, 0x7F, 0x00, 0x37, 0x00, 0x04, 0x37, 0x02, 0x08, 0x37, 0x04, 0x0C, 
   0x37, 0x06, 0x10, 0x37, 0x08, 0x14, 0x37, 0x0A, 0x18, 0x37, 0x0C, 0x1C, 0x37, 0x0E, 0x20, 0x37, 
   0x10, 0x24, 0x37, 0x12, 0x28, 0x37, 0x14, 0x2C, 0x37, 0x16, 0x30, 0x37, 0x18, 0x34, 0x37, 0x1A, 
   0x38, 0x37, 0x1C, 0x3C, 0x37, 0x1E, 0x41, 0x37, 0x21, 0x45, 0x37, 0x23, 0x49, 0x37, 0x25, 0x4D, 
   0x37, 0x27, 0x51, 0x37, 0x29, 0x55, 0x37, 0x2B, 0x59, 0x37, 0x2D, 0x5D, 0x37, 0x2F, 0x61, 0x37, 
   0x31, 0x65, 0x37, 0x33, 0x69, 0x37, 0x35, 0x6D, 0x37, 0x37, 0x71, 0x37, 0x39, 0x75, 0x37, 0x3B, 
   0x79, 0x37, 0x3D, 0x7D, 0x37, 0x3F, 0x82, 0x37, 0x41, 0x86, 0x37, 0x43, 0x8A, 0x37, 0x45, 0x8E, 
   0x37, 0x47, 0x92, 0x37, 0x49, 0x96, 0x37, 0x4B, 0x9A, 0x37, 0x4D, 0x9E, 0x37, 0x4F, 0xA2, 0x37, 
   0x51, 0xA6, 0x37, 0x53, 0xAA, 0x37, 0x55, 0xAE, 0x37, 0x57, 0xB2, 0x37, 0x59, 0xB6, 0x37, 0x5B, 
   0xBA, 0x37, 0x5D, 0xBE, 0x37, 0x5F, 0xC3, 0x37, 0x61, 0xC7, 0x37, 0x63, 0xCB, 0x37, 0x65, 0xCF, 
   0x37, 0x67, 0xD3, 0x37, 0x69, 0xD7, 0x37, 0x6B, 0xDB, 0x37, 0x6D, 0xDF, 0x37, 0x6F, 0xE3, 0x37, 
   0x71, 0xE7, 0x37, 0x73, 0xEB, 0x37, 0x75, 0xEF, 0x37, 0x77, 0xF3, 0x37, 0x79, 0xF7, 0x37, 0x7B, 
   0xFB, 0x37, 0x7D, 0xFF, 0x37, 0x7F, 0x00, 0x35, 0x00, 0x04, 0x35, 0x02, 0x08, 0x35, 0x04, 0x0C, 
   0x35, 0x06, 0x10, 0x35, 0x08, 0x14, 0x35, 0x0A, 0x18, 0x35, 0x0C, 0x1C, 0x35, 0x0E, 0x20, 0x35, 
   0x10, 0x24, 0x35, 0x12, 0x28, 0x35, 0x14, 0x2C, 0x35, 0x16, 0x30, 0x35, 0x18, 0x34, 0x35, 0x1A, 
   0x38, 0x35, 0x1C, 0x3C, 0x35, 0x1E, 0x41, 0x35, 0x21, 0x45, 0x35, 0x23, 0x49, 0x35, 0x25, 0x4D, 
   0x35, 0x27, 0x51, 0x35, 0x29, 0x55, 0x35, 0x2B, 0x59, 0x35, 0x2D, 0x5D, 0x35, 0x2F, 0x61, 0x35, 
   0x31, 0x65, 0x35, 0x33, 0x69, 0x35, 0x35, 0x6D, 0x35, 0x37, 0x71, 0x35, 0x39, 0x75, 0x35, 0x3B, 
   0x79, 0x35, 0x3D, 0x7D, 0x35, 0x3F, 0x82, 0x35, 0x41, 0x86, 0x35, 0x43, 0x8A, 0x35, 0x45, 0x8E, 
   0x35, 0x47, 0x92, 0x35, 0x49, 0x96, 0x35, 0x4B, 0x9A, 0x35, 0x4D, 0x9E, 0x35, 0x4F, 0xA2, 0x35, 
   0x51, 0xA6, 0x35, 0x53, 0xAA, 0x35, 0x55, 0xAE, 0x35, 0x57, 0xB2, 0x35, 0x59, 0xB6, 0x35, 0x5B, 
   0xBA, 0x35, 0x5D, 0xBE, 0x35, 0x5F, 0xC3, 0x35, 0x61, 0xC7, 0x35, 0x63, 0xCB, 0x35, 0x65, 0xCF, 
   0x35, 0x67, 0xD3, 0x35, 0x69, 0xD7, 0x35, 0x6B, 0xDB, 0x35, 0x6D, 0xDF, 0x35, 0x6F, 0xE3, 0x35, 
   0x71, 0xE7, 0x35, 0x73, 0xEB, 0x35, 0x75, 0xEF, 0x35, 0x77, 0xF3, 0x35, 0x79, 0xF7, 0x35, 0x7B, 
   0xFB, 0x35, 0x7D, 0xFF, 0x35, 0x7F, 0x00, 0x33, 0x00, 0x04, 0x33, 0x02, 0x08, 0x33, 0x04, 0x0C, 
   0x33, 0x06, 0x10, 0x33, 0x08, 0x14, 0x33, 0x0A, 0x18, 0x33, 0x0C, 0x1C, 0x33, 0x0E, 0x20, 0x33, 
   0x10, 0x24, 0x33, 0x12, 0x28, 0x33, 0x14, 0x2C, 0x33, 0x16, 0x30, 0x33, 0x18, 0x34, 0x33, 0x1A, 
   0x38, 0x33, 0x1C, 0x3C, 0x33, 0x1E, 0x41, 0x33, 0x21, 0x45, 0x33, 0x23, 0x49, 0x33, 0x25, 0x4D, 
   0x33, 0x27, 0x51, 0x33, 0x29, 0x55, 0x33, 0x2B, 0x59, 0x33, 0x2D, 0x5D, 0x33, 0x2F, 0x61, 0x33, 
   0x31, 0x65, 0x33, 0x33, 0x69, 0x33, 0x35, 0x6D, 0x33, 0x37, 0x71, 0x33, 0x39, 0x75, 0x33, 0x3B, 
   0x79, 0x33, 0x3D, 0x7D, 0x33, 0x3F, 0x82, 0x33, 0x41, 0x86, 0x33, 0x43, 0x8A, 0x33, 0x45, 0x8E, 
   0x33, 0x47, 0x92, 0x33, 0x49, 0x96, 0x33, 0x4B, 0x9A, 0x33, 0x4D, 0x9E, 0x33, 0x4F, 0xA2, 0x33, 
   0x51, 0xA6, 0x33, 0x53, 0xAA, 0x33, 0x55, 0xAE, 0x33, 0x57, 0xB2, 0x33, 0x59, 0xB6, 0x33, 0x5B, 
   0xBA, 0x33, 0x5D, 0xBE, 0x33, 0x5F, 0xC3, 0x33, 0x61, 0xC7, 0x33, 0x63, 0xCB, 0x33, 0x65, 0xCF, 
   0x33, 0x67, 0xD3, 0x33, 0x69, 0xD7, 0x33, 0x6B, 0xDB, 0x33, 0x6D, 0xDF, 0x33, 0x6F, 0xE3, 0x33, 
   0x71, 0xE7, 0x33, 0x73, 0xEB, 0x33, 0x75, 0xEF, 0x33, 0x77, 0xF3, 0x33, 0x79, 0xF7, 0x33, 0x7B, 
   0xFB, 0x33, 0x7D, 0xFF, 0x33, 0x7F, 0x00, 0x31, 0x00, 0x04, 0x31, 0x02, 0x08, 0x31, 0x04, 0x0C, 
   0x31, 0x06, 0x10, 0x31, 0x08, 0x14, 0x31, 0x0A, 0x18, 0x31, 0x0C, 0x1C, 0x31, 0x0E, 0x20, 0x31, 
   0x10, 0x24, 0x31, 0x12, 0x28, 0x31, 0x14, 0x2C, 0x31, 0x16, 0x30, 0x31, 0x18, 0x34, 0x31, 0x1A, 
   0x38, 0x31, 0x1C, 0x3C, 0x31, 0x1E, 0x41, 0x31, 0x21, 0x45, 0x31, 0x23, 0x49, 0x31, 0x25, 0x4D, 
   0x31, 0x27, 0x51, 0x31, 0x29, 0x55, 0x31, 0x2B, 0x59, 0x31, 0x2D, 0x5D, 0x31, 0x2F, 0x61, 0x31, 
   0x31, 0x65, 0x31, 0x33, 0x69, 0x31, 0x35, 0x6D, 0x31, 0x37, 0x71, 0x31, 0x39, 0x75, 0x31, 0x3B, 
   0x79, 0x31, 0x3D, 0x7D, 0x31, 0x3F, 0x82, 0x31, 0x41, 0x86, 0x31, 0x43, 0x8A, 0x31, 0x45, 0x8E, 
   0x31, 0x47, 0x92, 0x31, 0x49, 0x96, 0x31, 0x4B, 0x9A, 0x31, 0x4D, 0x9E, 0x31, 0x4F, 0xA2, 0x31, 
   0x51, 0xA6, 0x31, 0x53, 0xAA, 0x31, 0x55, 0xAE, 0x31, 0x57, 0xB2, 0x31, 0x59, 0xB6, 0x31, 0x5B, 
   0xBA, 0x31, 0x5D, 0xBE, 0x31, 0x5F, 0xC3, 0x31, 0x61, 0xC7, 0x31, 0x63, 0xCB, 0x31, 0x65, 0xCF, 
   0x31, 0x67, 0xD3, 0x31, 0x69, 0xD7, 0x31, 0x6B, 0xDB, 0x31, 0x6D, 0xDF, 0x31, 0x6F, 0xE3, 0x31, 
   0x71, 0xE7, 0x31, 0x73, 0xEB, 0x31, 0x75, 0xEF, 0x31, 0x77, 0xF3, 0x31, 0x79, 0xF7, 0x31, 0x7B, 
   0xFB, 0x31, 0x7D, 0xFF, 0x31, 0x7F, 0x00, 0x2F, 0x00, 0x04, 0x2F, 0x02, 0x08, 0x2F, 0x04, 0x0C, 
   0x2F, 0x06, 0x10, 0x2F, 0x08, 0x14, 0x2F, 0x0A, 0x18, 0x2F, 0x0C, 0x1C, 0x2F, 0x0E, 0x20, 0x2F, 
   0x10, 0x24, 0x2F, 0x12, 0x28, 0x2F, 0x14, 0x2C, 0x2F, 0x16, 0x30, 0x2F, 0x18, 0x34, 0x2F, 0x1A, 
   0x38, 0x2F, 0x1C, 0x3C, 0x2F, 0x1E, 0x41, 0x2F, 0x21, 0x45, 0x2F, 0x23, 0x49, 0x2F, 0x25, 0x4D, 
   0x2F, 0x27, 0x51, 0x2F, 0x29, 0x55, 0x2F, 0x2B, 0x59, 0x2F, 0x2D, 0x5D, 0x2F, 0x2F, 0x61, 0x2F, 
   0x31, 0x65, 0x2F, 0x33, 0x69, 0x2F, 0x35, 0x6D, 0x2F, 0x37, 0x71, 0x2F, 0x39, 0x75, 0x2F, 0x3B, 
   0x79, 0x2F, 0x3D, 0x7D, 0x2F, 0x3F, 0x82, 0x2F, 0x41, 0x86, 0x2F, 0x43, 0x8A, 0x2F, 0x45, 0x8E, 
   0x2F, 0x47, 0x92, 0x2F, 0x49, 0x96, 0x2F, 0x4B, 0x9A, 0x2F, 0x4D, 0x9E, 0x2F, 0x4F, 0xA2, 0x2F, 
   0x51, 0xA6, 0x2F, 0x53, 0xAA, 0x2F, 0x55, 0xAE, 0x2F, 0x57, 0xB2, 0x2F, 0x59, 0xB6, 0x2F, 0x5B, 
   0xBA, 0x2F, 0x5D, 0xBE, 0x2F, 0x5F, 0xC3, 0x2F, 0x61, 0xC7, 0x2F, 0x63, 0xCB, 0x2F, 0x65, 0xCF, 
   0x2F, 0x67, 0xD3, 0x2F, 0x69, 0xD7, 0x2F, 0x6B, 0xDB, 0x2F, 0x6D, 0xDF, 0x2F, 0x6F, 0xE3, 0x2F, 
   0x71, 0xE7, 0x2F, 0x73, 0xEB, 0x2F, 0x75, 0xEF, 0x2F, 0x77, 0xF3, 0x2F, 0x79, 0xF7, 0x2F, 0x7B, 
   0xFB, 0x2F, 0x7D, 0xFF, 0x2F, 0x7F, 0x00, 0x2D, 0x00, 0x04, 0x2D, 0x02, 0x08, 0x2D, 0x04, 0x0C, 
   0x2D, 0x06, 0x10, 0x2D, 0x08, 0x14, 0x2D, 0x0A, 0x18, 0x2D, 0x0C, 0x1C, 0x2D, 0x0E, 0x20, 0x2D, 
   0x10, 0x24, 0x2D, 0x12, 0x28, 0x2D, 0x14, 0x2C, 0x2D, 0x16, 0x30, 0x2D, 0x18, 0x34, 0x2D, 0x1A, 
   0x38, 0x2D, 0x1C, 0x3C, 0x2D, 0x1E, 0x41, 0x2D, 0x21, 0x45, 0x2D, 0x23, 0x49, 0x2D, 0x25, 0x4D, 
   0x2D, 0x27, 0x51, 0x2D, 0x29, 0x55, 0x2D, 0x2B, 0x59, 0x2D, 0x2D, 0x5D, 0x2D, 0x2F, 0x61, 0x2D, 
   0x31, 0x65, 0x2D, 0x33, 0x69, 0x2D, 0x35, 0x6D, 0x2D, 0x37, 0x71, 0x2D, 0x39, 0x75, 0x2D, 0x3B, 
   0x79, 0x2D, 0x3D, 0x7D, 0x2D, 0x3F, 0x82, 0x2D, 0x41, 0x86, 0x2D, 0x43, 0x8A, 0x2D, 0x45, 0x8E, 
   0x2D, 0x47, 0x92, 0x2D, 0x49, 0x96, 0x2D, 0x4B, 0x9A, 0x2D, 0x4D, 0x9E, 0x2D, 0x4F, 0xA2, 0x2D, 
   0x51, 0xA6, 0x2D, 0x53, 0xAA, 0x2D, 0x55, 0xAE, 0x2D, 0x57, 0xB2, 0x2D, 0x59, 0xB6, 0x2D, 0x5B, 
   0xBA, 0x2D, 0x5D, 0xBE, 0x2D, 0x5F, 0xC3, 0x2D, 0x61, 0xC7, 0x2D, 0x63, 0xCB, 0x2D, 0x65, 0xCF, 
   0x2D, 0x67, 0xD3, 0x2D, 0x69, 0xD7, 0x2D, 0x6B, 0xDB, 0x2D, 0x6D, 0xDF, 0x2D, 0x6F, 0xE3, 0x2D, 
   0x71, 0xE7, 0x2D, 0x73, 0xEB, 0x2D, 0x75, 0xEF, 0x2D, 0x77, 0xF3, 0x2D, 0x79, 0xF7, 0x2D, 0x7B, 
   0xFB, 0x2D, 0x7D, 0xFF, 0x2D, 0x7F, 0x00, 0x2B, 0x00, 0x04, 0x2B, 0x02, 0x08, 0x2B, 0x04, 0x0C, 
   0x2B, 0x06, 0x10, 0x2B, 0x08, 0x14, 0x2B, 0x0A, 0x18, 0x2B, 0x0C, 0x1C, 0x2B, 0x0E, 0x20, 0x2B, 
   0x10, 0x24, 0x2B, 0x12, 0x28, 0x2B, 0x14, 0x2C, 0x2B, 0x16, 0x30, 0x2B, 0x18, 0x34, 0x2B, 0x1A, 
   0x38, 0x2B, 0x1C, 0x3C, 0x2B, 0x1E, 0x41, 0x2B, 0x21, 0x45, 0x2B, 0x23, 0x49, 0x2B, 0x25, 0x4D, 
   0x2B, 0x27, 0x51, 0x2B, 0x29, 0x55, 0x2B, 0x2B, 0x59, 0x2B, 0x2D, 0x5D, 0x2B, 0x2F, 0x61, 0x2B, 
   0x31, 0x65, 0x2B, 0x33, 0x69, 0x2B, 0x35, 0x6D, 0x2B, 0x37, 0x71, 0x2B, 0x39, 0x75, 0x2B, 0x3B, 
   0x79, 0x2B, 0x3D, 0x7D, 0x2B, 0x3F, 0x82, 0x2B, 0x41, 0x86, 0x2B, 0x43, 0x8A, 0x2B, 0x45, 0x8E, 
   0x2B, 0x47, 0x92, 0x2B, 0x49, 0x96, 0x2B, 0x4B, 0x9A, 0x2B, 0x4D, 0x9E, 0x2B, 0x4F, 0xA2, 0x2B, 
   0x51, 0xA6, 0x2B, 0x53, 0xAA, 0x2B, 0x55, 0xAE, 0x2B, 0x57, 0xB2, 0x2B, 0x59, 0xB6, 0x2B, 0x5B, 
   0xBA, 0x2B, 0x5D, 0xBE, 0x2B, 0x5F, 0xC3, 0x2B, 0x61, 0xC7, 0x2B, 0x63, 0xCB, 0x2B, 0x65, 0xCF, 
   0x2B, 0x67, 0xD3, 0x2B, 0x69, 0xD7, 0x2B, 0x6B, 0xDB, 0x2B, 0x6D, 0xDF, 0x2B, 0x6F, 0xE3, 0x2B, 
   0x71, 0xE7, 0x2B, 0x73, 0xEB, 0x2B, 0x75, 0xEF, 0x2B, 0x77, 0xF3, 0x2B, 0x79, 0xF7, 0x2B, 0x7B, 
   0xFB, 0x2B, 0x7D, 0xFF, 0x2B, 0x7F, 0x00, 0x29, 0x00, 0x04, 0x29, 0x02, 0x08, 0x29, 0x04, 0x0C, 
   0x29, 0x06, 0x10, 0x29, 0x08, 0x14, 0x29, 0x0A, 0x18, 0x29, 0x0C, 0x1C, 0x29, 0x0E, 0x20, 0x29, 
   0x10, 0x24, 0x29, 0x12, 0x28, 0x29, 0x14, 0x2C, 0x29, 0x16, 0x30, 0x29, 0x18, 0x34, 0x29, 0x1A, 
   0x38, 0x29, 0x1C, 0x3C, 0x29, 0x1E, 0x41, 0x29, 0x21, 0x45, 0x29, 0x23, 0x49, 0x29, 0x25, 0x4D, 
   0x29, 0x27, 0x51, 0x29, 0x29, 0x55, 0x29, 0x2B, 0x59, 0x29, 0x2D, 0x5D, 0x29, 0x2F, 0x61, 0x29, 
   0x31, 0x65, 0x29, 0x33, 0x69, 0x29, 0x35, 0x6D, 0x29, 0x37, 0x71, 0x29, 0x39, 0x75, 0x29, 0x3B, 
   0x79, 0x29, 0x3D, 0x7D, 0x29, 0x3F, 0x82, 0x29, 0x41, 0x86, 0x29, 0x43, 0x8A, 0x29, 0x45, 0x8E, 
   0x29, 0x47, 0x92, 0x29, 0x49, 0x96, 0x29, 0x4B, 0x9A, 0x29, 0x4D, 0x9E, 0x29, 0x4F, 0xA2, 0x29, 
   0x51, 0xA6, 0x29, 0x53, 0xAA, 0x29, 0x55, 0xAE, 0x29, 0x57, 0xB2, 0x29, 0x59, 0xB6, 0x29, 0x5B, 
   0xBA, 0x29, 0x5D, 0xBE, 0x29, 0x5F, 0xC3, 0x29, 0x61, 0xC7, 0x29, 0x63, 0xCB, 0x29, 0x65, 0xCF, 
   0x29, 0x67, 0xD3, 0x29, 0x69, 0xD7, 0x29, 0x6B, 0xDB, 0x29, 0x6D, 0xDF, 0x29, 0x6F, 0xE3, 0x29, 
   0x71, 0xE7, 0x29, 0x73, 0xEB, 0x29, 0x75, 0xEF, 0x29, 0x77, 0xF3, 0x29, 0x79, 0xF7, 0x29, 0x7B, 
   0xFB, 0x29, 0x7D, 0xFF, 0x29, 0x7F, 0x00, 0x27, 0x00, 0x04, 0x27, 0x02, 0x08, 0x27, 0x04, 0x0C, 
   0x27, 0x06, 0x10, 0x27, 0x08, 0x14, 0x27, 0x0A, 0x18, 0x27, 0x0C, 0x1C, 0x27, 0x0E, 0x20, 0x27, 
   0x10, 0x24, 0x27, 0x12, 0x28, 0x27, 0x14, 0x2C, 0x27, 0x16, 0x30, 0x27, 0x18, 0x34, 0x27, 0x1A, 
   0x38, 0x27, 0x1C, 0x3C, 0x27, 0x1E, 0x41, 0x27, 0x21, 0x45, 0x27, 0x23, 0x49, 0x27, 0x25, 0x4D, 
   0x27, 0x27, 0x51, 0x27, 0x29, 0x55, 0x27, 0x2B, 0x59, 0x27, 0x2D, 0x5D, 0x27, 0x2F, 0x61, 0x27, 
   0x31, 0x65, 0x27, 0x33, 0x69, 0x27, 0x35, 0x6D, 0x27, 0x37, 0x71, 0x27, 0x39, 0x75, 0x27, 0x3B, 
   0x79, 0x27, 0x3D, 0x7D, 0x27, 0x3F, 0x82, 0x27, 0x41, 0x86, 0x27, 0x43, 0x8A, 0x27, 0x45, 0x8E, 
   0x27, 0x47, 0x92, 0x27, 0x49, 0x96, 0x27, 0x4B, 0x9A, 0x27, 0x4D, 0x9E, 0x27, 0x4F, 0xA2, 0x27, 
   0x51, 0xA6, 0x27, 0x53, 0xAA, 0x27, 0x55, 0xAE, 0x27, 0x57, 0xB2, 0x27, 0x59, 0xB6, 0x27, 0x5B, 
   0xBA, 0x27, 0x5D, 0xBE, 0x27, 0x5F, 0xC3, 0x27, 0x61, 0xC7, 0x27, 0x63, 0xCB, 0x27, 0x65, 0xCF, 
   0x27, 0x67, 0xD3, 0x27, 0x69, 0xD7, 0x27, 0x6B, 0xDB, 0x27, 0x6D, 0xDF, 0x27, 0x6F, 0xE3, 0x27, 
   0x71, 0xE7, 0x27, 0x73, 0xEB, 0x27, 0x75, 0xEF, 0x27, 0x77, 0xF3, 0x27, 0x79, 0xF7, 0x27, 0x7B, 
   0xFB, 0x27, 0x7D, 0xFF, 0x27, 0x7F, 0x00, 0x25, 0x00, 0x04, 0x25, 0x02, 0x08, 0x25, 0x04, 0x0C, 
   0x25, 0x06, 0x10, 0x25, 0x08, 0x14, 0x25, 0x0A, 0x18, 0x25, 0x0C, 0x1C, 0x25, 0x0E, 0x20, 0x25, 
   0x10, 0x24, 0x25, 0x12, 0x28, 0x25, 0x14, 0x2C, 0x25, 0x16, 0x30, 0x25, 0x18, 0x34, 0x25, 0x1A, 
   0x38, 0x25, 0x1C, 0x3C, 0x25, 0x1E, 0x41, 0x25, 0x21, 0x45, 0x25, 0x23, 0x49, 0x25, 0x25, 0x4D, 
   0x25, 0x27, 0x51, 0x25, 0x29, 0x55, 0x25, 0x2B, 0x59, 0x25, 0x2D, 0x5D, 0x25, 0x2F, 0x61, 0x25, 
   0x31, 0x65, 0x25, 0x33, 0x69, 0x25, 0x35, 0x6D, 0x25, 0x37, 0x71, 0x25, 0x39, 0x75, 0x25, 0x3B, 
   0x79, 0x25, 0x3D, 0x7D, 0x25, 0x3F, 0x82, 0x25, 0x41, 0x86, 0x25, 0x43, 0x8A, 0x25, 0x45, 0x8E, 
   0x25, 0x47, 0x92, 0x25, 0x49, 0x96, 0x25, 0x4B, 0x9A, 0x25, 0x4D, 0x9E, 0x25, 0x4F, 0xA2, 0x25, 
   0x51, 0xA6, 0x25, 0x53, 0xAA, 0x25, 0x55, 0xAE, 0x25, 0x57, 0xB2, 0x25, 0x59, 0xB6, 0x25, 0x5B, 
   0xBA, 0x25, 0x5D, 0xBE, 0x25, 0x5F, 0xC3, 0x25, 0x61, 0xC7, 0x25, 0x63, 0xCB, 0x25, 0x65, 0xCF, 
   0x25, 0x67, 0xD3, 0x25, 0x69, 0xD7, 0x25, 0x6B, 0xDB, 0x25, 0x6D, 0xDF, 0x25, 0x6F, 0xE3, 0x25, 
   0x71, 0xE7, 0x25, 0x73, 0xEB, 0x25, 0x75, 0xEF, 0x25, 0x77, 0xF3, 0x25, 0x79, 0xF7, 0x25, 0x7B, 
   0xFB, 0x25, 0x7D, 0xFF, 0x25, 0x7F, 0x00, 0x23, 0x00, 0x04, 0x23, 0x02, 0x08, 0x23, 0x04, 0x0C, 
   0x23, 0x06, 0x10, 0x23, 0x08, 0x14, 0x23, 0x0A, 0x18, 0x23, 0x0C, 0x1C, 0x23, 0x0E, 0x20, 0x23, 
   0x10, 0x24, 0x23, 0x12, 0x28, 0x23, 0x14, 0x2C, 0x23, 0x16, 0x30, 0x23, 0x18, 0x34, 0x23, 0x1A, 
   0x38, 0x23, 0x1C, 0x3C, 0x23, 0x1E, 0x41, 0x23, 0x21, 0x45, 0x23, 0x23, 0x49, 0x23, 0x25, 0x4D, 
   0x23, 0x27, 0x51, 0x23, 0x29, 0x55, 0x23, 0x2B, 0x59, 0x23, 0x2D, 0x5D, 0x23, 0x2F, 0x61, 0x23, 
   0x31, 0x65, 0x23, 0x33, 0x69, 0x23, 0x35, 0x6D, 0x23, 0x37, 0x71, 0x23, 0x39, 0x75, 0x23, 0x3B, 
   0x79, 0x23, 0x3D, 0x7D, 0x23, 0x3F, 0x82, 0x23, 0x41, 0x86, 0x23, 0x43, 0x8A, 0x23, 0x45, 0x8E, 
   0x23, 0x47, 0x92, 0x23, 0x49, 0x96, 0x23, 0x4B, 0x9A, 0x23, 0x4D, 0x9E, 0x23, 0x4F, 0xA2, 0x23, 
   0x51, 0xA6, 0x23, 0x53, 0xAA, 0x23, 0x55, 0xAE, 0x23, 0x57, 0xB2, 0x23, 0x59, 0xB6, 0x23, 0x5B, 
   0xBA, 0x23, 0x5D, 0xBE, 0x23, 0x5F, 0xC3, 0x23, 0x61, 0xC7, 0x23, 0x63, 0xCB, 0x23, 0x65, 0xCF, 
   0x23, 0x67, 0xD3, 0x23, 0x69, 0xD7, 0x23, 0x6B, 0xDB, 0x23, 0x6D, 0xDF, 0x23, 0x6F, 0xE3, 0x23, 
   0x71, 0xE7, 0x23, 0x73, 0xEB, 0x23, 0x75, 0xEF, 0x23, 0x77, 0xF3, 0x23, 0x79, 0xF7, 0x23, 0x7B, 
   0xFB, 0x23, 0x7D, 0xFF, 0x23, 0x7F, 0x00, 0x21, 0x00, 0x04, 0x21, 0x02, 0x08, 0x21, 0x04, 0x0C, 
   0x21, 0x06, 0x10, 0x21, 0x08, 0x14, 0x21, 0x0A, 0x18, 0x21, 0x0C, 0x1C, 0x21, 0x0E, 0x20, 0x21, 
   0x10, 0x24, 0x21, 0x12, 0x28, 0x21, 0x14, 0x2C, 0x21, 0x16, 0x30, 0x21, 0x18, 0x34, 0x21, 0x1A, 
   0x38, 0x21, 0x1C, 0x3C, 0x21, 0x1E, 0x41, 0x21, 0x21, 0x45, 0x21, 0x23, 0x49, 0x21, 0x25, 0x4D, 
   0x21, 0x27, 0x51, 0x21, 0x29, 0x55, 0x21, 0x2B, 0x59, 0x21, 0x2D, 0x5D, 0x21, 0x2F, 0x61, 0x21, 
   0x31, 0x65, 0x21, 0x33, 0x69, 0x21, 0x35, 0x6D, 0x21, 0x37, 0x71, 0x21, 0x39, 0x75, 0x21, 0x3B, 
   0x79, 0x21, 0x3D, 0x7D, 0x21, 0x3F, 0x82, 0x21, 0x41, 0x86, 0x21, 0x43, 0x8A, 0x21, 0x45, 0x8E, 
   0x21, 0x47, 0x92, 0x21, 0x49, 0x96, 0x21, 0x4B, 0x9A, 0x21, 0x4D, 0x9E, 0x21, 0x4F, 0xA2, 0x21, 
   0x51, 0xA6, 0x21, 0x53, 0xAA, 0x21, 0x55, 0xAE, 0x21, 0x57, 0xB2, 0x21, 0x59, 0xB6, 0x21, 0x5B, 
   0xBA, 0x21, 0x5D, 0xBE, 0x21, 0x5F, 0xC3, 0x21, 0x61, 0xC7, 0x21, 0x63, 0xCB, 0x21, 0x65, 0xCF, 
   0x21, 0x67, 0xD3, 0x21, 0x69, 0xD7, 0x21, 0x6B, 0xDB, 0x21, 0x6D, 0xDF, 0x21, 0x6F, 0xE3, 0x21, 
   0x71, 0xE7, 0x21, 0x73, 0xEB, 0x21, 0x75, 0xEF, 0x21, 0x77, 0xF3, 0x21, 0x79, 0xF7, 0x21, 0x7B, 
   0xFB, 0x21, 0x7D, 0xFF, 0x21, 0x7F, 0x00, 0x1F, 0x00, 0x04, 0x1F, 0x02, 0x08, 0x1F, 0x04, 0x0C, 
   0x1F, 0x06, 0x10, 0x1F, 0x08, 0x14, 0x1F, 0x0A, 0x18, 0x1F, 0x0C, 0x1C, 0x1F, 0x0E, 0x20, 0x1F, 
   0x10, 0x24, 0x1F, 0x12, 0x28, 0x1F, 0x14, 0x2C, 0x1F, 0x16, 0x30, 0x1F, 0x18, 0x34, 0x1F, 0x1A, 
   0x38, 0x1F, 0x1C, 0x3C, 0x1F, 0x1E, 0x41, 0x1F, 0x21, 0x45, 0x1F, 0x23, 0x49, 0x1F, 0x25, 0x4D, 
   0x1F, 0x27, 0x51, 0x1F, 0x29, 0x55, 0x1F, 0x2B, 0x59, 0x1F, 0x2D, 0x5D, 0x1F, 0x2F, 0x61, 0x1F, 
   0x31, 0x65, 0x1F, 0x33, 0x69, 0x1F, 0x35, 0x6D, 0x1F, 0x37, 0x71, 0x1F, 0x39, 0x75, 0x1F, 0x3B, 
   0x79, 0x1F, 0x3D, 0x7D, 0x1F, 0x3F, 0x82, 0x1F, 0x41, 0x86, 0x1F, 0x43, 0x8A, 0x1F, 0x45, 0x8E, 
   0x1F, 0x47, 0x92, 0x1F, 0x49, 0x96, 0x1F, 0x4B, 0x9A, 0x1F, 0x4D, 0x9E, 0x1F, 0x4F, 0xA2, 0x1F, 
   0x51, 0xA6, 0x1F, 0x53, 0xAA, 0x1F, 0x55, 0xAE, 0x1F, 0x57, 0xB2, 0x1F, 0x59, 0xB6, 0x1F, 0x5B, 
   0xBA, 0x1F, 0x5D, 0xBE, 0x1F, 0x5F, 0xC3, 0x1F, 0x61, 0xC7, 0x1F, 0x63, 0xCB, 0x1F, 0x65, 0xCF, 
   0x1F, 0x67, 0xD3, 0x1F, 0x69, 0xD7, 0x1F, 0x6B, 0xDB, 0x1F, 0x6D, 0xDF, 0x1F, 0x6F, 0xE3, 0x1F, 
   0x71, 0xE7, 0x1F, 0x73, 0xEB, 0x1F, 0x75, 0xEF, 0x1F, 0x77, 0xF3, 0x1F, 0x79, 0xF7, 0x1F, 0x7B, 
   0xFB, 0x1F, 0x7D, 0xFF, 0x1F, 0x7F, 0x00, 0x1D, 0x00, 0x04, 0x1D, 0x02, 0x08, 0x1D, 0x04, 0x0C, 
   0x1D, 0x06, 0x10, 0x1D, 0x08, 0x14, 0x1D, 0x0A, 0x18, 0x1D, 0x0C, 0x1C, 0x1D, 0x0E, 0x20, 0x1D, 
   0x10, 0x24, 0x1D, 0x12, 0x28, 0x1D, 0x14, 0x2C, 0x1D, 0x16, 0x30, 0x1D, 0x18, 0x34, 0x1D, 0x1A, 
   0x38, 0x1D, 0x1C, 0x3C, 0x1D, 0x1E, 0x41, 0x1D, 0x21, 0x45, 0x1D, 0x23, 0x49, 0x1D, 0x25, 0x4D, 
   0x1D, 0x27, 0x51, 0x1D, 0x29, 0x55, 0x1D, 0x2B, 0x59, 0x1D, 0x2D, 0x5D, 0x1D, 0x2F, 0x61, 0x1D, 
   0x31, 0x65, 0x1D, 0x33, 0x69, 0x1D, 0x35, 0x6D, 0x1D, 0x37, 0x71, 0x1D, 0x39, 0x75, 0x1D, 0x3B, 
   0x79, 0x1D, 0x3D, 0x7D, 0x1D, 0x3F, 0x82, 0x1D, 0x41, 0x86, 0x1D, 0x43, 0x8A, 0x1D, 0x45, 0x8E, 
   0x1D, 0x47, 0x92, 0x1D, 0x49, 0x96, 0x1D, 0x4B, 0x9A, 0x1D, 0x4D, 0x9E, 0x1D, 0x4F, 0xA2, 0x1D, 
   0x51, 0xA6, 0x1D, 0x53, 0xAA, 0x1D, 0x55, 0xAE, 0x1D, 0x57, 0xB2, 0x1D, 0x59, 0xB6, 0x1D, 0x5B, 
   0xBA, 0x1D, 0x5D, 0xBE, 0x1D, 0x5F, 0xC3, 0x1D, 0x61, 0xC7, 0x1D, 0x63, 0xCB, 0x1D, 0x65, 0xCF, 
   0x1D, 0x67, 0xD3, 0x1D, 0x69, 0xD7, 0x1D, 0x6B, 0xDB, 0x1D, 0x6D, 0xDF, 0x1D, 0x6F, 0xE3, 0x1D, 
   0x71, 0xE7, 0x1D, 0x73, 0xEB, 0x1D, 0x75, 0xEF, 0x1D, 0x77, 0xF3, 0x1D, 0x79, 0xF7, 0x1D, 0x7B, 
   0xFB, 0x1D, 0x7D, 0xFF, 0x1D, 0x7F, 0x00, 0x1B, 0x00, 0x04, 0x1B, 0x02, 0x08, 0x1B, 0x04, 0x0C, 
   0x1B, 0x06, 0x10, 0x1B, 0x08, 0x14, 0x1B, 0x0A, 0x18, 0x1B, 0x0C, 0x1C, 0x1B, 0x0E, 0x20, 0x1B, 
   0x10, 0x24, 0x1B, 0x12, 0x28, 0x1B, 0x14, 0x2C, 0x1B, 0x16, 0x30, 0x1B, 0x18, 0x34, 0x1B, 0x1A, 
   0x38, 0x1B, 0x1C, 0x3C, 0x1B, 0x1E, 0x41, 0x1B, 0x21, 0x45, 0x1B, 0x23, 0x49, 0x1B, 0x25, 0x4D, 
   0x1B, 0x27, 0x51, 0x1B, 0x29, 0x55, 0x1B, 0x2B, 0x59, 0x1B, 0x2D, 0x5D, 0x1B, 0x2F, 0x61, 0x1B, 
   0x31, 0x65, 0x1B, 0x33, 0x69, 0x1B, 0x35, 0x6D, 0x1B, 0x37, 0x71, 0x1B, 0x39, 0x75, 0x1B, 0x3B, 
   0x79, 0x1B, 0x3D, 0x7D, 0x1B, 0x3F, 0x82, 0x1B, 0x41, 0x86, 0x1B, 0x43, 0x8A, 0x1B, 0x45, 0x8E, 
   0x1B, 0x47, 0x92, 0x1B, 0x49, 0x96, 0x1B, 0x4B, 0x9A, 0x1B, 0x4D, 0x9E, 0x1B, 0x4F, 0xA2, 0x1B, 
   0x51, 0xA6, 0x1B, 0x53, 0xAA, 0x1B, 0x55, 0xAE, 0x1B, 0x57, 0xB2, 0x1B, 0x59, 0xB6, 0x1B, 0x5B, 
   0xBA, 0x1B, 0x5D, 0xBE, 0x1B, 0x5F, 0xC3, 0x1B, 0x61, 0xC7, 0x1B, 0x63, 0xCB, 0x1B, 0x65, 0xCF, 
   0x1B, 0x67, 0xD3, 0x1B, 0x69, 0xD7, 0x1B, 0x6B, 0xDB, 0x1B, 0x6D, 0xDF, 0x1B, 0x6F, 0xE3, 0x1B, 
   0x71, 0xE7, 0x1B, 0x73, 0xEB, 0x1B, 0x75, 0xEF, 0x1B, 0x77, 0xF3, 0x1B, 0x79, 0xF7, 0x1B, 0x7B, 
   0xFB, 0x1B, 0x7D, 0xFF, 0x1B, 0x7F, 0x00, 0x19, 0x00, 0x04, 0x19, 0x02, 0x08, 0x19, 0x04, 0x0C, 
   0x19, 0x06, 0x10, 0x19, 0x08, 0x14, 0x19, 0x0A, 0x18, 0x19, 0x0C, 0x1C, 0x19, 0x0E, 0x20, 0x19, 
   0x10, 0x24, 0x19, 0x12, 0x28, 0x19, 0x14, 0x2C, 0x19, 0x16, 0x30, 0x19, 0x18, 0x34, 0x19, 0x1A, 
   0x38, 0x19, 0x1C, 0x3C, 0x19, 0x1E, 0x41, 0x19, 0x21, 0x45, 0x19, 0x23, 0x49, 0x19, 0x25, 0x4D, 
   0x19, 0x27, 0x51, 0x19, 0x29, 0x55, 0x19, 0x2B, 0x59, 0x19, 0x2D, 0x5D, 0x19, 0x2F, 0x61, 0x19, 
   0x31, 0x65, 0x19, 0x33, 0x69, 0x19, 0x35, 0x6D, 0x19, 0x37, 0x71, 0x19, 0x39, 0x75, 0x19, 0x3B, 
   0x79, 0x19, 0x3D, 0x7D, 0x19, 0x3F, 0x82, 0x19, 0x41, 0x86, 0x19, 0x43, 0x8A, 0x19, 0x45, 0x8E, 
   0x19, 0x47, 0x92, 0x19, 0x49, 0x96, 0x19, 0x4B, 0x9A, 0x19, 0x4D, 0x9E, 0x19, 0x4F, 0xA2, 0x19, 
   0x51, 0xA6, 0x19, 0x53, 0xAA, 0x19, 0x55, 0xAE, 0x19, 0x57, 0xB2, 0x19, 0x59, 0xB6, 0x19, 0x5B, 
   0xBA, 0x19, 0x5D, 0xBE, 0x19, 0x5F, 0xC3, 0x19, 0x61, 0xC7, 0x19, 0x63, 0xCB, 0x19, 0x65, 0xCF, 
   0x19, 0x67, 0xD3, 0x19, 0x69, 0xD7, 0x19, 0x6B, 0xDB, 0x19, 0x6D, 0xDF, 0x19, 0x6F, 0xE3, 0x19, 
   0x71, 0xE7, 0x19, 0x73, 0xEB, 0x19, 0x75, 0xEF, 0x19, 0x77, 0xF3, 0x19, 0x79, 0xF7, 0x19, 0x7B, 
   0xFB, 0x19, 0x7D, 0xFF, 0x19, 0x7F, 0x00, 0x17, 0x00, 0x04, 0x17, 0x02, 0x08, 0x17, 0x04, 0x0C, 
   0x17, 0x06, 0x10, 0x17, 0x08, 0x14, 0x17, 0x0A, 0x18, 0x17, 0x0C, 0x1C, 0x17, 0x0E, 0x20, 0x17, 
   0x10, 0x24, 0x17, 0x12, 0x28, 0x17, 0x14, 0x2C, 0x17, 0x16, 0x30, 0x17, 0x18, 0x34, 0x17, 0x1A, 
   0x38, 0x17, 0x1C, 0x3C, 0x17, 0x1E, 0x41, 0x17, 0x21, 0x45, 0x17, 0x23, 0x49, 0x17, 0x25, 0x4D, 
   0x17, 0x27, 0x51, 0x17, 0x29, 0x55, 0x17, 0x2B, 0x59, 0x17, 0x2D, 0x5D, 0x17, 0x2F, 0x61, 0x17, 
   0x31, 0x65, 0x17, 0x33, 0x69, 0x17, 0x35, 0x6D, 0x17, 0x37, 0x71, 0x17, 0x39, 0x75, 0x17, 0x3B, 
   0x79, 0x17, 0x3D, 0x7D, 0x17, 0x3F, 0x82, 0x17, 0x41, 0x86, 0x17, 0x43, 0x8A, 0x17, 0x45, 0x8E, 
   0x17, 0x47, 0x92, 0x17, 0x49, 0x96, 0x17, 0x4B, 0x9A, 0x17, 0x4D, 0x9E, 0x17, 0x4F, 0xA2, 0x17, 
   0x51, 0xA6, 0x17, 0x53, 0xAA, 0x17, 0x55, 0xAE, 0x17, 0x57, 0xB2, 0x17, 0x59, 0xB6, 0x17, 0x5B, 
   0xBA, 0x17, 0x5D, 0xBE, 0x17, 0x5F, 0xC3, 0x17, 0x61, 0xC7, 0x17, 0x63, 0xCB, 0x17, 0x65, 0xCF, 
   0x17, 0x67, 0xD3, 0x17, 0x69, 0xD7, 0x17, 0x6B, 0xDB, 0x17, 0x6D, 0xDF, 0x17, 0x6F, 0xE3, 0x17, 
   0x71, 0xE7, 0x17, 0x73, 0xEB, 0x17, 0x75, 0xEF, 0x17, 0x77, 0xF3, 0x17, 0x79, 0xF7, 0x17, 0x7B, 
   0xFB, 0x17, 0x7D, 0xFF, 0x17, 0x7F, 0x00, 0x15, 0x00, 0x04, 0x15, 0x02, 0x08, 0x15, 0x04, 0x0C, 
   0x15, 0x06, 0x10, 0x15, 0x08, 0x14, 0x15, 0x0A, 0x18, 0x15, 0x0C, 0x1C, 0x15, 0x0E, 0x20, 0x15, 
   0x10, 0x24, 0x15, 0x12, 0x28, 0x15, 0x14, 0x2C, 0x15, 0x16, 0x30, 0x15, 0x18, 0x34, 0x15, 0x1A, 
   0x38, 0x15, 0x1C, 0x3C, 0x15, 0x1E, 0x41, 0x15, 0x21, 0x45, 0x15, 0x23, 0x49, 0x15, 0x25, 0x4D, 
   0x15, 0x27, 0x51, 0x15, 0x29, 0x55, 0x15, 0x2B, 0x59, 0x15, 0x2D, 0x5D, 0x15, 0x2F, 0x61, 0x15, 
   0x31, 0x65, 0x15, 0x33, 0x69, 0x15, 0x35, 0x6D, 0x15, 0x37, 0x71, 0x15, 0x39, 0x75, 0x15, 0x3B, 
   0x79, 0x15, 0x3D, 0x7D, 0x15, 0x3F, 0x82, 0x15, 0x41, 0x86, 0x15, 0x43, 0x8A, 0x15, 0x45, 0x8E, 
   0x15, 0x47, 0x92, 0x15, 0x49, 0x96, 0x15, 0x4B, 0x9A, 0x15, 0x4D, 0x9E, 0x15, 0x4F, 0xA2, 0x15, 
   0x51, 0xA6, 0x15, 0x53, 0xAA, 0x15, 0x55, 0xAE, 0x15, 0x57, 0xB2, 0x15, 0x59, 0xB6, 0x15, 0x5B, 
   0xBA, 0x15, 0x5D, 0xBE, 0x15, 0x5F, 0xC3, 0x15, 0x61, 0xC7, 0x15, 0x63, 0xCB, 0x15, 0x65, 0xCF, 
   0x15, 0x67, 0xD3, 0x15, 0x69, 0xD7, 0x15, 0x6B, 0xDB, 0x15, 0x6D, 0xDF, 0x15, 0x6F, 0xE3, 0x15, 
   0x71, 0xE7, 0x15, 0x73, 0xEB, 0x15, 0x75, 0xEF, 0x15, 0x77, 0xF3, 0x15, 0x79, 0xF7, 0x15, 0x7B, 
   0xFB, 0x15, 0x7D, 0xFF, 0x15, 0x7F, 0x00, 0x13, 0x00, 0x04, 0x13, 0x02, 0x08, 0x13, 0x04, 0x0C, 
   0x13, 0x06, 0x10, 0x13, 0x08, 0x14, 0x13, 0x0A, 0x18, 0x13, 0x0C, 0x1C, 0x13, 0x0E, 0x20, 0x13, 
   0x10, 0x24, 0x13, 0x12, 0x28, 0x13, 0x14, 0x2C, 0x13, 0x16, 0x30, 0x13, 0x18, 0x34, 0x13, 0x1A, 
   0x38, 0x13, 0x1C, 0x3C, 0x13, 0x1E, 0x41, 0x13, 0x21, 0x45, 0x13, 0x23, 0x49, 0x13, 0x25, 0x4D, 
   0x13, 0x27, 0x51, 0x13, 0x29, 0x55, 0x13, 0x2B, 0x59, 0x13, 0x2D, 0x5D, 0x13, 0x2F, 0x61, 0x13, 
   0x31, 0x65, 0x13, 0x33, 0x69, 0x13, 0x35, 0x6D, 0x13, 0x37, 0x71, 0x13, 0x39, 0x75, 0x13, 0x3B, 
   0x79, 0x13, 0x3D, 0x7D, 0x13, 0x3F, 0x82, 0x13, 0x41, 0x86, 0x13, 0x43, 0x8A, 0x13, 0x45, 0x8E, 
   0x13, 0x47, 0x92, 0x13, 0x49, 0x96, 0x13, 0x4B, 0x9A, 0x13, 0x4D, 0x9E, 0x13, 0x4F, 0xA2, 0x13, 
   0x51, 0xA6, 0x13, 0x53, 0xAA, 0x13, 0x55, 0xAE, 0x13, 0x57, 0xB2, 0x13, 0x59, 0xB6, 0x13, 0x5B, 
   0xBA, 0x13, 0x5D, 0xBE, 0x13, 0x5F, 0xC3, 0x13, 0x61, 0xC7, 0x13, 0x63, 0xCB, 0x13, 0x65, 0xCF, 
   0x13, 0x67, 0xD3, 0x13, 0x69, 0xD7, 0x13, 0x6B, 0xDB, 0x13, 0x6D, 0xDF, 0x13, 0x6F, 0xE3, 0x13, 
   0x71, 0xE7, 0x13, 0x73, 0xEB, 0x13, 0x75, 0xEF, 0x13, 0x77, 0xF3, 0x13, 0x79, 0xF7, 0x13, 0x7B, 
   0xFB, 0x13, 0x7D, 0xFF, 0x13, 0x7F, 0x00, 0x11, 0x00, 0x04, 0x11, 0x02, 0x08, 0x11, 0x04, 0x0C, 
   0x11, 0x06, 0x10, 0x11, 0x08, 0x14, 0x11, 0x0A, 0x18, 0x11, 0x0C, 0x1C, 0x11, 0x0E, 0x20, 0x11, 
   0x10, 0x24, 0x11, 0x12, 0x28, 0x11, 0x14, 0x2C, 0x11, 0x16, 0x30, 0x11, 0x18, 0x34, 0x11, 0x1A, 
   0x38, 0x11, 0x1C, 0x3C, 0x11, 0x1E, 0x41, 0x11, 0x21, 0x45, 0x11, 0x23, 0x49, 0x11, 0x25, 0x4D, 
   0x11, 0x27, 0x51, 0x11, 0x29, 0x55, 0x11, 0x2B, 0x59, 0x11, 0x2D, 0x5D, 0x11, 0x2F, 0x61, 0x11, 
   0x31, 0x65, 0x11, 0x33, 0x69, 0x11, 0x35, 0x6D, 0x11, 0x37, 0x71, 0x11, 0x39, 0x75, 0x11, 0x3B, 
   0x79, 0x11, 0x3D, 0x7D, 0x11, 0x3F, 0x82, 0x11, 0x41, 0x86, 0x11, 0x43, 0x8A, 0x11, 0x45, 0x8E, 
   0x11, 0x47, 0x92, 0x11, 0x49, 0x96, 0x11, 0x4B, 0x9A, 0x11, 0x4D, 0x9E, 0x11, 0x4F, 0xA2, 0x11, 
   0x51, 0xA6, 0x11, 0x53, 0xAA, 0x11, 0x55, 0xAE, 0x11, 0x57, 0xB2, 0x11, 0x59, 0xB6, 0x11, 0x5B, 
   0xBA, 0x11, 0x5D, 0xBE, 0x11, 0x5F, 0xC3, 0x11, 0x61, 0xC7, 0x11, 0x63, 0xCB, 0x11, 0x65, 0xCF, 
   0x11, 0x67, 0xD3, 0x11, 0x69, 0xD7, 0x11, 0x6B, 0xDB, 0x11, 0x6D, 0xDF, 0x11, 0x6F, 0xE3, 0x11, 
   0x71, 0xE7, 0x11, 0x73, 0xEB, 0x11, 0x75, 0xEF, 0x11, 0x77, 0xF3, 0x11, 0x79, 0xF7, 0x11, 0x7B, 
   0xFB, 0x11, 0x7D, 0xFF, 0x11, 0x7F, 0x00, 0x0F, 0x00, 0x04, 0x0F, 0x02, 0x08, 0x0F, 0x04, 0x0C, 
   0x0F, 0x06, 0x10, 0x0F, 0x08, 0x14, 0x0F, 0x0A, 0x18, 0x0F, 0x0C, 0x1C, 0x0F, 0x0E, 0x20, 0x0F, 
   0x10, 0x24, 0x0F, 0x12, 0x28, 0x0F, 0x14, 0x2C, 0x0F, 0x16, 0x30, 0x0F, 0x18, 0x34, 0x0F, 0x1A, 
   0x38, 0x0F, 0x1C, 0x3C, 0x0F, 0x1E, 0x41, 0x0F, 0x21, 0x45, 0x0F, 0x23, 0x49, 0x0F, 0x25, 0x4D, 
   0x0F, 0x27, 0x51, 0x0F, 0x29, 0x55, 0x0F, 0x2B, 0x59, 0x0F, 0x2D, 0x5D, 0x0F, 0x2F, 0x61, 0x0F, 
   0x31, 0x65, 0x0F, 0x33, 0x69, 0x0F, 0x35, 0x6D, 0x0F, 0x37, 0x71, 0x0F, 0x39, 0x75, 0x0F, 0x3B, 
   0x79, 0x0F, 0x3D, 0x7D, 0x0F, 0x3F, 0x82, 0x0F, 0x41, 0x86, 0x0F, 0x43, 0x8A, 0x0F, 0x45, 0x8E, 
   0x0F, 0x47, 0x92, 0x0F, 0x49, 0x96, 0x0F, 0x4B, 0x9A, 0x0F, 0x4D, 0x9E, 0x0F, 0x4F, 0xA2, 0x0F, 
   0x51, 0xA6, 0x0F, 0x53, 0xAA, 0x0F, 0x55, 0xAE, 0x0F, 0x57, 0xB2, 0x0F, 0x59, 0xB6, 0x0F, 0x5B, 
   0xBA, 0x0F, 0x5D, 0xBE, 0x0F, 0x5F, 0xC3, 0x0F, 0x61, 0xC7, 0x0F, 0x63, 0xCB, 0x0F, 0x65, 0xCF, 
   0x0F, 0x67, 0xD3, 0x0F, 0x69, 0xD7, 0x0F, 0x6B, 0xDB, 0x0F, 0x6D, 0xDF, 0x0F, 0x6F, 0xE3, 0x0F, 
   0x71, 0xE7, 0x0F, 0x73, 0xEB, 0x0F, 0x75, 0xEF, 0x0F, 0x77, 0xF3, 0x0F, 0x79, 0xF7, 0x0F, 0x7B, 
   0xFB, 0x0F, 0x7D, 0xFF, 0x0F, 0x7F, 0x00, 0x0D, 0x00, 0x04, 0x0D, 0x02, 0x08, 0x0D, 0x04, 0x0C, 
   0x0D, 0x06, 0x10, 0x0D, 0x08, 0x14, 0x0D, 0x0A, 0x18, 0x0D, 0x0C, 0x1C, 0x0D, 0x0E, 0x20, 0x0D, 
   0x10, 0x24, 0x0D, 0x12, 0x28, 0x0D, 0x14, 0x2C, 0x0D, 0x16, 0x30, 0x0D, 0x18, 0x34, 0x0D, 0x1A, 
   0x38, 0x0D, 0x1C, 0x3C, 0x0D, 0x1E, 0x41, 0x0D, 0x21, 0x45, 0x0D, 0x23, 0x49, 0x0D, 0x25, 0x4D, 
   0x0D, 0x27, 0x51, 0x0D, 0x29, 0x55, 0x0D, 0x2B, 0x59, 0x0D, 0x2D, 0x5D, 0x0D, 0x2F, 0x61, 0x0D, 
   0x31, 0x65, 0x0D, 0x33, 0x69, 0x0D, 0x35, 0x6D, 0x0D, 0x37, 0x71, 0x0D, 0x39, 0x75, 0x0D, 0x3B, 
   0x79, 0x0D, 0x3D, 0x7D, 0x0D, 0x3F, 0x82, 0x0D, 0x41, 0x86, 0x0D, 0x43, 0x8A, 0x0D, 0x45, 0x8E, 
   0x0D, 0x47, 0x92, 0x0D, 0x49, 0x96, 0x0D, 0x4B, 0x9A, 0x0D, 0x4D, 0x9E, 0x0D, 0x4F, 0xA2, 0x0D, 
   0x51, 0xA6, 0x0D, 0x53, 0xAA, 0x0D, 0x55, 0xAE, 0x0D, 0x57, 0xB2, 0x0D, 0x59, 0xB6, 0x0D, 0x5B, 
   0xBA, 0x0D, 0x5D, 0xBE, 0x0D, 0x5F, 0xC3, 0x0D, 0x61, 0xC7, 0x0D, 0x63, 0xCB, 0x0D, 0x65, 0xCF, 
   0x0D, 0x67, 0xD3, 0x0D, 0x69, 0xD7, 0x0D, 0x6B, 0xDB, 0x0D, 0x6D, 0xDF, 0x0D, 0x6F, 0xE3, 0x0D, 
   0x71, 0xE7, 0x0D, 0x73, 0xEB, 0x0D, 0x75, 0xEF, 0x0D, 0x77, 0xF3, 0x0D, 0x79, 0xF7, 0x0D, 0x7B, 
   0xFB, 0x0D, 0x7D, 0xFF, 0x0D, 0x7F, 0x00, 0x0B, 0x00, 0x04, 0x0B, 0x02, 0x08, 0x0B, 0x04, 0x0C, 
   0x0B, 0x06, 0x10, 0x0B, 0x08, 0x14, 0x0B, 0x0A, 0x18, 0x0B, 0x0C, 0x1C, 0x0B, 0x0E, 0x20, 0x0B, 
   0x10, 0x24, 0x0B, 0x12, 0x28, 0x0B, 0x14, 0x2C, 0x0B, 0x16, 0x30, 0x0B, 0x18, 0x34, 0x0B, 0x1A, 
   0x38, 0x0B, 0x1C, 0x3C, 0x0B, 0x1E, 0x41, 0x0B, 0x21, 0x45, 0x0B, 0x23, 0x49, 0x0B, 0x25, 0x4D, 
   0x0B, 0x27, 0x51, 0x0B, 0x29, 0x55, 0x0B, 0x2B, 0x59, 0x0B, 0x2D, 0x5D, 0x0B, 0x2F, 0x61, 0x0B, 
   0x31, 0x65, 0x0B, 0x33, 0x69, 0x0B, 0x35, 0x6D, 0x0B, 0x37, 0x71, 0x0B, 0x39, 0x75, 0x0B, 0x3B, 
   0x79, 0x0B, 0x3D, 0x7D, 0x0B, 0x3F, 0x82, 0x0B, 0x41, 0x86, 0x0B, 0x43, 0x8A, 0x0B, 0x45, 0x8E, 
   0x0B, 0x47, 0x92, 0x0B, 0x49, 0x96, 0x0B, 0x4B, 0x9A, 0x0B, 0x4D, 0x9E, 0x0B, 0x4F, 0xA2, 0x0B, 
   0x51, 0xA6, 0x0B, 0x53, 0xAA, 0x0B, 0x55, 0xAE, 0x0B, 0x57, 0xB2, 0x0B, 0x59, 0xB6, 0x0B, 0x5B, 
   0xBA, 0x0B, 0x5D, 0xBE, 0x0B, 0x5F, 0xC3, 0x0B, 0x61, 0xC7, 0x0B, 0x63, 0xCB, 0x0B, 0x65, 0xCF, 
   0x0B, 0x67, 0xD3, 0x0B, 0x69, 0xD7, 0x0B, 0x6B, 0xDB, 0x0B, 0x6D, 0xDF, 0x0B, 0x6F, 0xE3, 0x0B, 
   0x71, 0xE7, 0x0B, 0x73, 0xEB, 0x0B, 0x75, 0xEF, 0x0B, 0x77, 0xF3, 0x0B, 0x79, 0xF7, 0x0B, 0x7B, 
   0xFB, 0x0B, 0x7D, 0xFF, 0x0B, 0x7F, 0x00, 0x09, 0x00, 0x04, 0x09, 0x02, 0x08, 0x09, 0x04, 0x0C, 
   0x09, 0x06, 0x10, 0x09, 0x08, 0x14, 0x09, 0x0A, 0x18, 0x09, 0x0C, 0x1C, 0x09, 0x0E, 0x20, 0x09, 
   0x10, 0x24, 0x09, 0x12, 0x28, 0x09, 0x14, 0x2C, 0x09, 0x16, 0x30, 0x09, 0x18, 0x34, 0x09, 0x1A, 
   0x38, 0x09, 0x1C, 0x3C, 0x09, 0x1E, 0x41, 0x09, 0x21, 0x45, 0x09, 0x23, 0x49, 0x09, 0x25, 0x4D, 
   0x09, 0x27, 0x51, 0x09, 0x29, 0x55, 0x09, 0x2B, 0x59, 0x09, 0x2D, 0x5D, 0x09, 0x2F, 0x61, 0x09, 
   0x31, 0x65, 0x09, 0x33, 0x69, 0x09, 0x35, 0x6D, 0x09, 0x37, 0x71, 0x09, 0x39, 0x75, 0x09, 0x3B, 
   0x79, 0x09, 0x3D, 0x7D, 0x09, 0x3F, 0x82, 0x09, 0x41, 0x86, 0x09, 0x43, 0x8A, 0x09, 0x45, 0x8E, 
   0x09, 0x47, 0x92, 0x09, 0x49, 0x96, 0x09, 0x4B, 0x9A, 0x09, 0x4D, 0x9E, 0x09, 0x4F, 0xA2, 0x09, 
   0x51, 0xA6, 0x09, 0x53, 0xAA, 0x09, 0x55, 0xAE, 0x09, 0x57, 0xB2, 0x09, 0x59, 0xB6, 0x09, 0x5B, 
   0xBA, 0x09, 0x5D, 0xBE, 0x09, 0x5F, 0xC3, 0x09, 0x61, 0xC7, 0x09, 0x63, 0xCB, 0x09, 0x65, 0xCF, 
   0x09, 0x67, 0xD3, 0x09, 0x69, 0xD7, 0x09, 0x6B, 0xDB, 0x09, 0x6D, 0xDF, 0x09, 0x6F, 0xE3, 0x09, 
   0x71, 0xE7, 0x09, 0x73, 0xEB, 0x09, 0x75, 0xEF, 0x09, 0x77, 0xF3, 0x09, 0x79, 0xF7, 0x09, 0x7B, 
   0xFB, 0x09, 0x7D, 0xFF, 0x09, 0x7F, 0x00, 0x07, 0x00, 0x04, 0x07, 0x02, 0x08, 0x07, 0x04, 0x0C, 
   0x07, 0x06, 0x10, 0x07, 0x08, 0x14, 0x07, 0x0A, 0x18, 0x07, 0x0C, 0x1C, 0x07, 0x0E, 0x20, 0x07, 
   0x10, 0x24, 0x07, 0x12, 0x28, 0x07, 0x14, 0x2C, 0x07, 0x16, 0x30, 0x07, 0x18, 0x34, 0x07, 0x1A, 
   0x38, 0x07, 0x1C, 0x3C, 0x07, 0x1E, 0x41, 0x07, 0x21, 0x45, 0x07, 0x23, 0x49, 0x07, 0x25, 0x4D, 
   0x07, 0x27, 0x51, 0x07, 0x29, 0x55, 0x07, 0x2B, 0x59, 0x07, 0x2D, 0x5D, 0x07, 0x2F, 0x61, 0x07, 
   0x31, 0x65, 0x07, 0x33, 0x69, 0x07, 0x35, 0x6D, 0x07, 0x37, 0x71, 0x07, 0x39, 0x75, 0x07, 0x3B, 
   0x79, 0x07, 0x3D, 0x7D, 0x07, 0x3F, 0x82, 0x07, 0x41, 0x86, 0x07, 0x43, 0x8A, 0x07, 0x45, 0x8E, 
   0x07, 0x47, 0x92, 0x07, 0x49, 0x96, 0x07, 0x4B, 0x9A, 0x07, 0x4D, 0x9E, 0x07, 0x4F, 0xA2, 0x07, 
   0x51, 0xA6, 0x07, 0x53, 0xAA, 0x07, 0x55, 0xAE, 0x07, 0x57, 0xB2, 0x07, 0x59, 0xB6, 0x07, 0x5B, 
   0xBA, 0x07, 0x5D, 0xBE, 0x07, 0x5F, 0xC3, 0x07, 0x61, 0xC7, 0x07, 0x63, 0xCB, 0x07, 0x65, 0xCF, 
   0x07, 0x67, 0xD3, 0x07, 0x69, 0xD7, 0x07, 0x6B, 0xDB, 0x07, 0x6D, 0xDF, 0x07, 0x6F, 0xE3, 0x07, 
   0x71, 0xE7, 0x07, 0x73, 0xEB, 0x07, 0x75, 0xEF, 0x07, 0x77, 0xF3, 0x07, 0x79, 0xF7, 0x07, 0x7B, 
   0xFB, 0x07, 0x7D, 0xFF, 0x07, 0x7F, 0x00, 0x05, 0x00, 0x04, 0x05, 0x02, 0x08, 0x05, 0x04, 0x0C, 
   0x05, 0x06, 0x10, 0x05, 0x08, 0x14, 0x05, 0x0A, 0x18, 0x05, 0x0C, 0x1C, 0x05, 0x0E, 0x20, 0x05, 
   0x10, 0x24, 0x05, 0x12, 0x28, 0x05, 0x14, 0x2C, 0x05, 0x16, 0x30, 0x05, 0x18, 0x34, 0x05, 0x1A, 
   0x38, 0x05, 0x1C, 0x3C, 0x05, 0x1E, 0x41, 0x05, 0x21, 0x45, 0x05, 0x23, 0x49, 0x05, 0x25, 0x4D, 
   0x05, 0x27, 0x51, 0x05, 0x29, 0x55, 0x05, 0x2B, 0x59, 0x05, 0x2D, 0x5D, 0x05, 0x2F, 0x61, 0x05, 
   0x31, 0x65, 0x05, 0x33, 0x69, 0x05, 0x35, 0x6D, 0x05, 0x37, 0x71, 0x05, 0x39, 0x75, 0x05, 0x3B, 
   0x79, 0x05, 0x3D, 0x7D, 0x05, 0x3F, 0x82, 0x05, 0x41, 0x86, 0x05, 0x43, 0x8A, 0x05, 0x45, 0x8E, 
   0x05, 0x47, 0x92, 0x05, 0x49, 0x96, 0x05, 0x4B, 0x9A, 0x05, 0x4D, 0x9E, 0x05, 0x4F, 0xA2, 0x05, 
   0x51, 0xA6, 0x05, 0x53, 0xAA, 0x05, 0x55, 0xAE, 0x05, 0x57, 0xB2, 0x05, 0x59, 0xB6, 0x05, 0x5B, 
   0xBA, 0x05, 0x5D, 0xBE, 0x05, 0x5F, 0xC3, 0x05, 0x61, 0xC7, 0x05, 0x63, 0xCB, 0x05, 0x65, 0xCF, 
   0x05, 0x67, 0xD3, 0x05, 0x69, 0xD7, 0x05, 0x6B, 0xDB, 0x05, 0x6D, 0xDF, 0x05, 0x6F, 0xE3, 0x05, 
   0x71, 0xE7, 0x05, 0x73, 0xEB, 0x05, 0x75, 0xEF, 0x05, 0x77, 0xF3, 0x05, 0x79, 0xF7, 0x05, 0x7B, 
   0xFB, 0x05, 0x7D, 0xFF, 0x05, 0x7F, 0x00, 0x03, 0x00, 0x04, 0x03, 0x02, 0x08, 0x03, 0x04, 0x0C, 
   0x03, 0x06, 0x10, 0x03, 0x08, 0x14, 0x03, 0x0A, 0x18, 0x03, 0x0C, 0x1C, 0x03, 0x0E, 0x20, 0x03, 
   0x10, 0x24, 0x03, 0x12, 0x28, 0x03, 0x14, 0x2C, 0x03, 0x16, 0x30, 0x03, 0x18, 0x34, 0x03, 0x1A, 
   0x38, 0x03, 0x1C, 0x3C, 0x03, 0x1E, 0x41, 0x03, 0x21, 0x45, 0x03, 0x23, 0x49, 0x03, 0x25, 0x4D, 
   0x03, 0x27, 0x51, 0x03, 0x29, 0x55, 0x03, 0x2B, 0x59, 0x03, 0x2D, 0x5D, 0x03, 0x2F, 0x61, 0x03, 
   0x31, 0x65, 0x03, 0x33, 0x69, 0x03, 0x35, 0x6D, 0x03, 0x37, 0x71, 0x03, 0x39, 0x75, 0x03, 0x3B, 
   0x79, 0x03, 0x3D, 0x7D, 0x03, 0x3F, 0x82, 0x03, 0x41, 0x86, 0x03, 0x43, 0x8A, 0x03, 0x45, 0x8E, 
   0x03, 0x47, 0x92, 0x03, 0x49, 0x96, 0x03, 0x4B, 0x9A, 0x03, 0x4D, 0x9E, 0x03, 0x4F, 0xA2, 0x03, 
   0x51, 0xA6, 0x03, 0x53, 0xAA, 0x03, 0x55, 0xAE, 0x03, 0x57, 0xB2, 0x03, 0x59, 0xB6, 0x03, 0x5B, 
   0xBA, 0x03, 0x5D, 0xBE, 0x03, 0x5F, 0xC3, 0x03, 0x61, 0xC7, 0x03, 0x63, 0xCB, 0x03, 0x65, 0xCF, 
   0x03, 0x67, 0xD3, 0x03, 0x69, 0xD7, 0x03, 0x6B, 0xDB, 0x03, 0x6D, 0xDF, 0x03, 0x6F, 0xE3, 0x03, 
   0x71, 0xE7, 0x03, 0x73, 0xEB, 0x03, 0x75, 0xEF, 0x03, 0x77, 0xF3, 0x03, 0x79, 0xF7, 0x03, 0x7B, 
   0xFB, 0x03, 0x7D, 0xFF, 0x03, 0x7F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x08, 0x00, 0x04, 0x0C, 
   0x00, 0x06, 0x10, 0x00, 0x08, 0x14, 0x00, 0x0A, 0x18, 0x00, 0x0C, 0x1C, 0x00, 0x0E, 0x20, 0x00, 
   0x10, 0x24, 0x00, 0x12, 0x28, 0x00, 0x14, 0x2C, 0x00, 0x16, 0x30, 0x00, 0x18, 0x34, 0x00, 0x1A, 
   0x38, 0x00, 0x1C, 0x3C, 0x00, 0x1E, 0x41, 0x00, 0x21, 0x45, 0x00, 0x23, 0x49, 0x00, 0x25, 0x4D, 
   0x00, 0x27, 0x51, 0x00, 0x29, 0x55, 0x00, 0x2B, 0x59, 0x00, 0x2D, 0x5D, 0x00, 0x2F, 0x61, 0x00, 
   0x31, 0x65, 0x00, 0x33, 0x69, 0x00, 0x35, 0x6D, 0x00, 0x37, 0x71, 0x00, 0x39, 0x75, 0x00, 0x3B, 
   0x79, 0x00, 0x3D, 0x7D, 0x00, 0x3F, 0x82, 0x00, 0x41, 0x86, 0x00, 0x43, 0x8A, 0x00, 0x45, 0x8E, 
   0x00, 0x47, 0x92, 0x00, 0x49, 0x96, 0x00, 0x4B, 0x9A, 0x00, 0x4D, 0x9E, 0x00, 0x4F, 0xA2, 0x00, 
   0x51, 0xA6, 0x00, 0x53, 0xAA, 0x00, 0x55, 0xAE, 0x00, 0x57, 0xB2, 0x00, 0x59, 0xB6, 0x00, 0x5B, 
   0xBA, 0x00, 0x5D, 0xBE, 0x00, 0x5F, 0xC3, 0x00, 0x61, 0xC7, 0x00, 0x63, 0xCB, 0x00, 0x65, 0xCF, 
   0x00, 0x67, 0xD3, 0x00, 0x69, 0xD7, 0x00, 0x6B, 0xDB, 0x00, 0x6D, 0xDF, 0x00, 0x6F, 0xE3, 0x00, 
   0x71, 0xE7, 0x00, 0x73, 0xEB, 0x00, 0x75, 0xEF, 0x00, 0x77, 0xF3, 0x00, 0x79, 0xF7, 0x00, 0x7B, 
   0xFB, 0x00, 0x7D, 0xFF, 0x00, 0x7F, 
};

static RESOURCEDATA g_rd_bem1(TEXT(MODULE_STRING), TEXT("bem1.bmp"), g_bem1, sizeof(g_bem1));

extern "C" LPVOID PREPEND_MODULE(_bem1) = (LPVOID)&g_rd_bem1;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\media\checker.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    checker.bmp.cpp

Description

    Data file for the resource checker.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_checker[] = {

   0x42, 0x4D, 0x36, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

static RESOURCEDATA g_rd_checker(TEXT(MODULE_STRING), TEXT("checker.bmp"), g_checker, sizeof(g_checker));

extern "C" LPVOID PREPEND_MODULE(_checker) = (LPVOID)&g_rd_checker;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\media\bem3.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    bem3.bmp.cpp

Description

    Data file for the resource bem3.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_bem3[] = {

   0x42, 0x4D, 0x36, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x06, 0x7E, 0x00, 0x0C, 0x7E, 0x00, 
   0x12, 0x7E, 0x00, 0x18, 0x7E, 0x00, 0x1E, 0x7E, 0x00, 0x24, 0x7E, 0x00, 0x2A, 0x7E, 0x00, 0x30, 
   0x7E, 0x00, 0x36, 0x7E, 0x00, 0x3B, 0x7E, 0x00, 0x41, 0x7E, 0x00, 0x46, 0x7E, 0x00, 0x4B, 0x7E, 
   0x00, 0x50, 0x7E, 0x00, 0x55, 0x7E, 0x00, 0x59, 0x7E, 0x00, 0x5E, 0x7E, 0x00, 0x62, 0x7E, 0x00, 
   0x66, 0x7E, 0x00, 0x69, 0x7E, 0x00, 0x6C, 0x7E, 0x00, 0x70, 0x7E, 0x00, 0x72, 0x7E, 0x00, 0x75, 
   0x7E, 0x00, 0x77, 0x7E, 0x00, 0x79, 0x7E, 0x00, 0x7B, 0x7E, 0x00, 0x7C, 0x7E, 0x00, 0x7D, 0x7E, 
   0x00, 0x7E, 0x7E, 0x00, 0x7E, 0x7E, 0x00, 0x7F, 0x7E, 0x00, 0x7E, 0x7E, 0x00, 0x7E, 0x7E, 0x00, 
   0x7D, 0x7E, 0x00, 0x7C, 0x7E, 0x00, 0x7B, 0x7E, 0x00, 0x79, 0x7E, 0x00, 0x77, 0x7E, 0x00, 0x75, 
   0x7E, 0x00, 0x72, 0x7E, 0x00, 0x70, 0x7E, 0x00, 0x6C, 0x7E, 0x00, 0x69, 0x7E, 0x00, 0x66, 0x7E, 
   0x00, 0x62, 0x7E, 0x00, 0x5E, 0x7E, 0x00, 0x59, 0x7E, 0x00, 0x55, 0x7E, 0x00, 0x50, 0x7E, 0x00, 
   0x4B, 0x7E, 0x00, 0x46, 0x7E, 0x00, 0x41, 0x7E, 0x00, 0x3B, 0x7E, 0x00, 0x36, 0x7E, 0x00, 0x30, 
   0x7E, 0x00, 0x2A, 0x7E, 0x00, 0x24, 0x7E, 0x00, 0x1E, 0x7E, 0x00, 0x18, 0x7E, 0x00, 0x12, 0x7E, 
   0x00, 0x0C, 0x7E, 0x00, 0x06, 0x7E, 0x00, 0x00, 0x7F, 0x00, 0xFA, 0x7F, 0x00, 0xF4, 0x7F, 0x00, 
   0xEE, 0x7F, 0x00, 0xE8, 0x7F, 0x00, 0xE2, 0x7F, 0x00, 0xDC, 0x7F, 0x00, 0xD6, 0x7F, 0x00, 0xD0, 
   0x7F, 0x00, 0xCA, 0x7F, 0x00, 0xC5, 0x7F, 0x00, 0xBF, 0x7F, 0x00, 0xBA, 0x7F, 0x00, 0xB5, 0x7F, 
   0x00, 0xB0, 0x7F, 0x00, 0xAB, 0x7F, 0x00, 0xA7, 0x7F, 0x00, 0xA2, 0x7F, 0x00, 0x9E, 0x7F, 0x00, 
   0x9A, 0x7F, 0x00, 0x97, 0x7F, 0x00, 0x94, 0x7F, 0x00, 0x90, 0x7F, 0x00, 0x8E, 0x7F, 0x00, 0x8B, 
   0x7F, 0x00, 0x89, 0x7F, 0x00, 0x87, 0x7F, 0x00, 0x85, 0x7F, 0x00, 0x84, 0x7F, 0x00, 0x83, 0x7F, 
   0x00, 0x82, 0x7F, 0x00, 0x82, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x82, 0x7F, 0x00, 0x82, 0x7F, 0x00, 
   0x83, 0x7F, 0x00, 0x84, 0x7F, 0x00, 0x85, 0x7F, 0x00, 0x87, 0x7F, 0x00, 0x89, 0x7F, 0x00, 0x8B, 
   0x7F, 0x00, 0x8E, 0x7F, 0x00, 0x90, 0x7F, 0x00, 0x94, 0x7F, 0x00, 0x97, 0x7F, 0x00, 0x9A, 0x7F, 
   0x00, 0x9E, 0x7F, 0x00, 0xA2, 0x7F, 0x00, 0xA7, 0x7F, 0x00, 0xAB, 0x7F, 0x00, 0xB0, 0x7F, 0x00, 
   0xB5, 0x7F, 0x00, 0xBA, 0x7F, 0x00, 0xBF, 0x7F, 0x00, 0xC5, 0x7F, 0x00, 0xCA, 0x7F, 0x00, 0xD0, 
   0x7F, 0x00, 0xD6, 0x7F, 0x00, 0xDC, 0x7F, 0x00, 0xE2, 0x7F, 0x00, 0xE8, 0x7F, 0x00, 0xEE, 0x7F, 
   0x00, 0xF4, 0x7F, 0x00, 0xFA, 0x7F, 0x06, 0x00, 0x7E, 0x06, 0x06, 0x7F, 0x06, 0x0C, 0x7F, 0x06, 
   0x12, 0x7F, 0x06, 0x18, 0x80, 0x06, 0x1E, 0x80, 0x05, 0x24, 0x80, 0x05, 0x2A, 0x81, 0x05, 0x30, 
   0x81, 0x05, 0x36, 0x81, 0x05, 0x3B, 0x81, 0x05, 0x41, 0x82, 0x05, 0x46, 0x82, 0x05, 0x4B, 0x82, 
   0x04, 0x50, 0x82, 0x04, 0x55, 0x83, 0x04, 0x59, 0x83, 0x04, 0x5D, 0x83, 0x03, 0x62, 0x83, 0x03, 
   0x65, 0x84, 0x03, 0x69, 0x84, 0x03, 0x6C, 0x84, 0x02, 0x6F, 0x84, 0x02, 0x72, 0x84, 0x02, 0x75, 
   0x84, 0x02, 0x77, 0x84, 0x01, 0x79, 0x84, 0x01, 0x7B, 0x85, 0x01, 0x7C, 0x85, 0x00, 0x7D, 0x85, 
   0x00, 0x7E, 0x85, 0x00, 0x7E, 0x85, 0x00, 0x7E, 0x85, 0x00, 0x7E, 0x85, 0x00, 0x7E, 0x85, 0x00, 
   0x7D, 0x85, 0xFF, 0x7C, 0x85, 0xFF, 0x7B, 0x85, 0xFF, 0x79, 0x84, 0xFE, 0x77, 0x84, 0xFE, 0x75, 
   0x84, 0xFE, 0x72, 0x84, 0xFE, 0x6F, 0x84, 0xFD, 0x6C, 0x84, 0xFD, 0x69, 0x84, 0xFD, 0x65, 0x84, 
   0xFD, 0x62, 0x83, 0xFC, 0x5D, 0x83, 0xFC, 0x59, 0x83, 0xFC, 0x55, 0x83, 0xFC, 0x50, 0x82, 0xFB, 
   0x4B, 0x82, 0xFB, 0x46, 0x82, 0xFB, 0x41, 0x82, 0xFB, 0x3B, 0x81, 0xFB, 0x36, 0x81, 0xFB, 0x30, 
   0x81, 0xFB, 0x2A, 0x81, 0xFB, 0x24, 0x80, 0xFA, 0x1E, 0x80, 0xFA, 0x18, 0x80, 0xFA, 0x12, 0x7F, 
   0xFA, 0x0C, 0x7F, 0xFA, 0x06, 0x7F, 0xFA, 0x00, 0x7F, 0xFA, 0xFA, 0x7E, 0xFA, 0xF4, 0x7E, 0xFA, 
   0xEE, 0x7E, 0xFA, 0xE8, 0x7D, 0xFA, 0xE2, 0x7D, 0xFB, 0xDC, 0x7D, 0xFB, 0xD6, 0x7C, 0xFB, 0xD0, 
   0x7C, 0xFB, 0xCA, 0x7C, 0xFB, 0xC5, 0x7C, 0xFB, 0xBF, 0x7B, 0xFB, 0xBA, 0x7B, 0xFB, 0xB5, 0x7B, 
   0xFC, 0xB0, 0x7B, 0xFC, 0xAB, 0x7A, 0xFC, 0xA7, 0x7A, 0xFC, 0xA3, 0x7A, 0xFD, 0x9E, 0x7A, 0xFD, 
   0x9B, 0x79, 0xFD, 0x97, 0x79, 0xFD, 0x94, 0x79, 0xFE, 0x91, 0x79, 0xFE, 0x8E, 0x79, 0xFE, 0x8B, 
   0x79, 0xFE, 0x89, 0x79, 0xFF, 0x87, 0x79, 0xFF, 0x85, 0x78, 0xFF, 0x84, 0x78, 0x00, 0x83, 0x78, 
   0x00, 0x82, 0x78, 0x00, 0x82, 0x78, 0x00, 0x82, 0x78, 0x00, 0x82, 0x78, 0x00, 0x82, 0x78, 0x00, 
   0x83, 0x78, 0x01, 0x84, 0x78, 0x01, 0x85, 0x78, 0x01, 0x87, 0x79, 0x02, 0x89, 0x79, 0x02, 0x8B, 
   0x79, 0x02, 0x8E, 0x79, 0x02, 0x91, 0x79, 0x03, 0x94, 0x79, 0x03, 0x97, 0x79, 0x03, 0x9B, 0x79, 
   0x03, 0x9E, 0x7A, 0x04, 0xA3, 0x7A, 0x04, 0xA7, 0x7A, 0x04, 0xAB, 0x7A, 0x04, 0xB0, 0x7B, 0x05, 
   0xB5, 0x7B, 0x05, 0xBA, 0x7B, 0x05, 0xBF, 0x7B, 0x05, 0xC5, 0x7C, 0x05, 0xCA, 0x7C, 0x05, 0xD0, 
   0x7C, 0x05, 0xD6, 0x7C, 0x05, 0xDC, 0x7D, 0x06, 0xE2, 0x7D, 0x06, 0xE8, 0x7D, 0x06, 0xEE, 0x7E, 
   0x06, 0xF4, 0x7E, 0x06, 0xFA, 0x7E, 0x0C, 0x00, 0x7E, 0x0C, 0x06, 0x7F, 0x0C, 0x0C, 0x80, 0x0C, 
   0x12, 0x80, 0x0C, 0x18, 0x81, 0x0C, 0x1E, 0x82, 0x0B, 0x24, 0x82, 0x0B, 0x2A, 0x83, 0x0B, 0x30, 
   0x83, 0x0B, 0x36, 0x84, 0x0A, 0x3B, 0x84, 0x0A, 0x40, 0x85, 0x0A, 0x46, 0x85, 0x09, 0x4B, 0x86, 
   0x09, 0x50, 0x86, 0x09, 0x54, 0x87, 0x08, 0x59, 0x87, 0x08, 0x5D, 0x88, 0x07, 0x61, 0x88, 0x07, 
   0x65, 0x88, 0x06, 0x69, 0x89, 0x06, 0x6C, 0x89, 0x05, 0x6F, 0x89, 0x05, 0x72, 0x8A, 0x04, 0x74, 
   0x8A, 0x04, 0x77, 0x8A, 0x03, 0x78, 0x8A, 0x03, 0x7A, 0x8B, 0x02, 0x7B, 0x8B, 0x01, 0x7D, 0x8B, 
   0x01, 0x7D, 0x8B, 0x00, 0x7E, 0x8B, 0x00, 0x7E, 0x8B, 0x00, 0x7E, 0x8B, 0xFF, 0x7D, 0x8B, 0xFF, 
   0x7D, 0x8B, 0xFE, 0x7B, 0x8B, 0xFD, 0x7A, 0x8B, 0xFD, 0x78, 0x8A, 0xFC, 0x77, 0x8A, 0xFC, 0x74, 
   0x8A, 0xFB, 0x72, 0x8A, 0xFB, 0x6F, 0x89, 0xFA, 0x6C, 0x89, 0xFA, 0x69, 0x89, 0xF9, 0x65, 0x88, 
   0xF9, 0x61, 0x88, 0xF8, 0x5D, 0x88, 0xF8, 0x59, 0x87, 0xF7, 0x54, 0x87, 0xF7, 0x50, 0x86, 0xF7, 
   0x4B, 0x86, 0xF6, 0x46, 0x85, 0xF6, 0x40, 0x85, 0xF6, 0x3B, 0x84, 0xF5, 0x36, 0x84, 0xF5, 0x30, 
   0x83, 0xF5, 0x2A, 0x83, 0xF5, 0x24, 0x82, 0xF4, 0x1E, 0x82, 0xF4, 0x18, 0x81, 0xF4, 0x12, 0x80, 
   0xF4, 0x0C, 0x80, 0xF4, 0x06, 0x7F, 0xF4, 0x00, 0x7F, 0xF4, 0xFA, 0x7E, 0xF4, 0xF4, 0x7D, 0xF4, 
   0xEE, 0x7D, 0xF4, 0xE8, 0x7C, 0xF4, 0xE2, 0x7B, 0xF5, 0xDC, 0x7B, 0xF5, 0xD6, 0x7A, 0xF5, 0xD0, 
   0x7A, 0xF5, 0xCA, 0x79, 0xF6, 0xC5, 0x79, 0xF6, 0xC0, 0x78, 0xF6, 0xBA, 0x78, 0xF7, 0xB5, 0x77, 
   0xF7, 0xB0, 0x77, 0xF7, 0xAC, 0x76, 0xF8, 0xA7, 0x76, 0xF8, 0xA3, 0x75, 0xF9, 0x9F, 0x75, 0xF9, 
   0x9B, 0x75, 0xFA, 0x97, 0x74, 0xFA, 0x94, 0x74, 0xFB, 0x91, 0x74, 0xFB, 0x8E, 0x73, 0xFC, 0x8C, 
   0x73, 0xFC, 0x89, 0x73, 0xFD, 0x88, 0x73, 0xFD, 0x86, 0x72, 0xFE, 0x85, 0x72, 0xFF, 0x83, 0x72, 
   0xFF, 0x83, 0x72, 0x00, 0x82, 0x72, 0x00, 0x82, 0x72, 0x00, 0x82, 0x72, 0x01, 0x83, 0x72, 0x01, 
   0x83, 0x72, 0x02, 0x85, 0x72, 0x03, 0x86, 0x72, 0x03, 0x88, 0x73, 0x04, 0x89, 0x73, 0x04, 0x8C, 
   0x73, 0x05, 0x8E, 0x73, 0x05, 0x91, 0x74, 0x06, 0x94, 0x74, 0x06, 0x97, 0x74, 0x07, 0x9B, 0x75, 
   0x07, 0x9F, 0x75, 0x08, 0xA3, 0x75, 0x08, 0xA7, 0x76, 0x09, 0xAC, 0x76, 0x09, 0xB0, 0x77, 0x09, 
   0xB5, 0x77, 0x0A, 0xBA, 0x78, 0x0A, 0xC0, 0x78, 0x0A, 0xC5, 0x79, 0x0B, 0xCA, 0x79, 0x0B, 0xD0, 
   0x7A, 0x0B, 0xD6, 0x7A, 0x0B, 0xDC, 0x7B, 0x0C, 0xE2, 0x7B, 0x0C, 0xE8, 0x7C, 0x0C, 0xEE, 0x7D, 
   0x0C, 0xF4, 0x7D, 0x0C, 0xFA, 0x7E, 0x12, 0x00, 0x7E, 0x12, 0x06, 0x7F, 0x12, 0x0C, 0x80, 0x12, 
   0x12, 0x81, 0x12, 0x18, 0x82, 0x12, 0x1E, 0x83, 0x11, 0x24, 0x84, 0x11, 0x2A, 0x85, 0x11, 0x30, 
   0x86, 0x10, 0x35, 0x86, 0x10, 0x3B, 0x87, 0x0F, 0x40, 0x88, 0x0F, 0x45, 0x89, 0x0E, 0x4A, 0x8A, 
   0x0E, 0x4F, 0x8A, 0x0D, 0x54, 0x8B, 0x0D, 0x58, 0x8C, 0x0C, 0x5D, 0x8C, 0x0B, 0x61, 0x8D, 0x0B, 
   0x64, 0x8D, 0x0A, 0x68, 0x8E, 0x09, 0x6B, 0x8E, 0x08, 0x6E, 0x8F, 0x07, 0x71, 0x8F, 0x07, 0x74, 
   0x90, 0x06, 0x76, 0x90, 0x05, 0x78, 0x90, 0x04, 0x79, 0x91, 0x03, 0x7B, 0x91, 0x02, 0x7C, 0x91, 
   0x01, 0x7D, 0x91, 0x00, 0x7D, 0x91, 0x00, 0x7D, 0x91, 0x00, 0x7D, 0x91, 0xFF, 0x7D, 0x91, 0xFE, 
   0x7C, 0x91, 0xFD, 0x7B, 0x91, 0xFC, 0x79, 0x91, 0xFB, 0x78, 0x90, 0xFA, 0x76, 0x90, 0xF9, 0x74, 
   0x90, 0xF9, 0x71, 0x8F, 0xF8, 0x6E, 0x8F, 0xF7, 0x6B, 0x8E, 0xF6, 0x68, 0x8E, 0xF5, 0x64, 0x8D, 
   0xF5, 0x61, 0x8D, 0xF4, 0x5D, 0x8C, 0xF3, 0x58, 0x8C, 0xF3, 0x54, 0x8B, 0xF2, 0x4F, 0x8A, 0xF2, 
   0x4A, 0x8A, 0xF1, 0x45, 0x89, 0xF1, 0x40, 0x88, 0xF0, 0x3B, 0x87, 0xF0, 0x35, 0x86, 0xEF, 0x30, 
   0x86, 0xEF, 0x2A, 0x85, 0xEF, 0x24, 0x84, 0xEE, 0x1E, 0x83, 0xEE, 0x18, 0x82, 0xEE, 0x12, 0x81, 
   0xEE, 0x0C, 0x80, 0xEE, 0x06, 0x7F, 0xEE, 0x00, 0x7F, 0xEE, 0xFA, 0x7E, 0xEE, 0xF4, 0x7D, 0xEE, 
   0xEE, 0x7C, 0xEE, 0xE8, 0x7B, 0xEE, 0xE2, 0x7A, 0xEF, 0xDC, 0x79, 0xEF, 0xD6, 0x78, 0xEF, 0xD0, 
   0x77, 0xF0, 0xCB, 0x77, 0xF0, 0xC5, 0x76, 0xF1, 0xC0, 0x75, 0xF1, 0xBB, 0x74, 0xF2, 0xB6, 0x73, 
   0xF2, 0xB1, 0x73, 0xF3, 0xAC, 0x72, 0xF3, 0xA8, 0x71, 0xF4, 0xA3, 0x71, 0xF5, 0x9F, 0x70, 0xF5, 
   0x9C, 0x70, 0xF6, 0x98, 0x6F, 0xF7, 0x95, 0x6F, 0xF8, 0x92, 0x6E, 0xF9, 0x8F, 0x6E, 0xF9, 0x8C, 
   0x6D, 0xFA, 0x8A, 0x6D, 0xFB, 0x88, 0x6D, 0xFC, 0x87, 0x6C, 0xFD, 0x85, 0x6C, 0xFE, 0x84, 0x6C, 
   0xFF, 0x83, 0x6C, 0x00, 0x83, 0x6C, 0x00, 0x83, 0x6C, 0x00, 0x83, 0x6C, 0x01, 0x83, 0x6C, 0x02, 
   0x84, 0x6C, 0x03, 0x85, 0x6C, 0x04, 0x87, 0x6C, 0x05, 0x88, 0x6D, 0x06, 0x8A, 0x6D, 0x07, 0x8C, 
   0x6D, 0x07, 0x8F, 0x6E, 0x08, 0x92, 0x6E, 0x09, 0x95, 0x6F, 0x0A, 0x98, 0x6F, 0x0B, 0x9C, 0x70, 
   0x0B, 0x9F, 0x70, 0x0C, 0xA3, 0x71, 0x0D, 0xA8, 0x71, 0x0D, 0xAC, 0x72, 0x0E, 0xB1, 0x73, 0x0E, 
   0xB6, 0x73, 0x0F, 0xBB, 0x74, 0x0F, 0xC0, 0x75, 0x10, 0xC5, 0x76, 0x10, 0xCB, 0x77, 0x11, 0xD0, 
   0x77, 0x11, 0xD6, 0x78, 0x11, 0xDC, 0x79, 0x12, 0xE2, 0x7A, 0x12, 0xE8, 0x7B, 0x12, 0xEE, 0x7C, 
   0x12, 0xF4, 0x7D, 0x12, 0xFA, 0x7E, 0x18, 0x00, 0x7E, 0x18, 0x06, 0x80, 0x18, 0x0C, 0x81, 0x18, 
   0x12, 0x82, 0x18, 0x18, 0x83, 0x18, 0x1E, 0x85, 0x17, 0x24, 0x86, 0x17, 0x29, 0x87, 0x16, 0x2F, 
   0x88, 0x16, 0x35, 0x89, 0x15, 0x3A, 0x8A, 0x15, 0x40, 0x8B, 0x14, 0x45, 0x8C, 0x13, 0x4A, 0x8D, 
   0x13, 0x4F, 0x8E, 0x12, 0x53, 0x8F, 0x11, 0x58, 0x90, 0x10, 0x5C, 0x91, 0x0F, 0x60, 0x92, 0x0E, 
   0x64, 0x92, 0x0D, 0x67, 0x93, 0x0C, 0x6A, 0x94, 0x0B, 0x6D, 0x94, 0x0A, 0x70, 0x95, 0x09, 0x73, 
   0x95, 0x08, 0x75, 0x96, 0x07, 0x77, 0x96, 0x06, 0x78, 0x97, 0x04, 0x7A, 0x97, 0x03, 0x7B, 0x97, 
   0x02, 0x7B, 0x97, 0x01, 0x7C, 0x97, 0x00, 0x7C, 0x97, 0xFF, 0x7C, 0x97, 0xFE, 0x7B, 0x97, 0xFD, 
   0x7B, 0x97, 0xFC, 0x7A, 0x97, 0xFA, 0x78, 0x97, 0xF9, 0x77, 0x96, 0xF8, 0x75, 0x96, 0xF7, 0x73, 
   0x95, 0xF6, 0x70, 0x95, 0xF5, 0x6D, 0x94, 0xF4, 0x6A, 0x94, 0xF3, 0x67, 0x93, 0xF2, 0x64, 0x92, 
   0xF1, 0x60, 0x92, 0xF0, 0x5C, 0x91, 0xEF, 0x58, 0x90, 0xEE, 0x53, 0x8F, 0xED, 0x4F, 0x8E, 0xED, 
   0x4A, 0x8D, 0xEC, 0x45, 0x8C, 0xEB, 0x40, 0x8B, 0xEB, 0x3A, 0x8A, 0xEA, 0x35, 0x89, 0xEA, 0x2F, 
   0x88, 0xE9, 0x29, 0x87, 0xE9, 0x24, 0x86, 0xE8, 0x1E, 0x85, 0xE8, 0x18, 0x83, 0xE8, 0x12, 0x82, 
   0xE8, 0x0C, 0x81, 0xE8, 0x06, 0x80, 0xE8, 0x00, 0x7F, 0xE8, 0xFA, 0x7D, 0xE8, 0xF4, 0x7C, 0xE8, 
   0xEE, 0x7B, 0xE8, 0xE8, 0x7A, 0xE8, 0xE2, 0x78, 0xE9, 0xDC, 0x77, 0xE9, 0xD7, 0x76, 0xEA, 0xD1, 
   0x75, 0xEA, 0xCB, 0x74, 0xEB, 0xC6, 0x73, 0xEB, 0xC0, 0x72, 0xEC, 0xBB, 0x71, 0xED, 0xB6, 0x70, 
   0xED, 0xB1, 0x6F, 0xEE, 0xAD, 0x6E, 0xEF, 0xA8, 0x6D, 0xF0, 0xA4, 0x6C, 0xF1, 0xA0, 0x6B, 0xF2, 
   0x9C, 0x6B, 0xF3, 0x99, 0x6A, 0xF4, 0x96, 0x69, 0xF5, 0x93, 0x69, 0xF6, 0x90, 0x68, 0xF7, 0x8D, 
   0x68, 0xF8, 0x8B, 0x67, 0xF9, 0x89, 0x67, 0xFA, 0x88, 0x66, 0xFC, 0x86, 0x66, 0xFD, 0x85, 0x66, 
   0xFE, 0x85, 0x66, 0xFF, 0x84, 0x66, 0x00, 0x84, 0x66, 0x01, 0x84, 0x66, 0x02, 0x85, 0x66, 0x03, 
   0x85, 0x66, 0x04, 0x86, 0x66, 0x06, 0x88, 0x66, 0x07, 0x89, 0x67, 0x08, 0x8B, 0x67, 0x09, 0x8D, 
   0x68, 0x0A, 0x90, 0x68, 0x0B, 0x93, 0x69, 0x0C, 0x96, 0x69, 0x0D, 0x99, 0x6A, 0x0E, 0x9C, 0x6B, 
   0x0F, 0xA0, 0x6B, 0x10, 0xA4, 0x6C, 0x11, 0xA8, 0x6D, 0x12, 0xAD, 0x6E, 0x13, 0xB1, 0x6F, 0x13, 
   0xB6, 0x70, 0x14, 0xBB, 0x71, 0x15, 0xC0, 0x72, 0x15, 0xC6, 0x73, 0x16, 0xCB, 0x74, 0x16, 0xD1, 
   0x75, 0x17, 0xD7, 0x76, 0x17, 0xDC, 0x77, 0x18, 0xE2, 0x78, 0x18, 0xE8, 0x7A, 0x18, 0xEE, 0x7B, 
   0x18, 0xF4, 0x7C, 0x18, 0xFA, 0x7D, 0x1E, 0x00, 0x7E, 0x1E, 0x06, 0x80, 0x1E, 0x0C, 0x82, 0x1E, 
   0x12, 0x83, 0x1E, 0x18, 0x85, 0x1D, 0x1D, 0x86, 0x1D, 0x23, 0x87, 0x1D, 0x29, 0x89, 0x1C, 0x2F, 
   0x8A, 0x1B, 0x34, 0x8C, 0x1B, 0x3A, 0x8D, 0x1A, 0x3F, 0x8E, 0x19, 0x44, 0x90, 0x18, 0x49, 0x91, 
   0x17, 0x4E, 0x92, 0x16, 0x52, 0x93, 0x15, 0x57, 0x94, 0x14, 0x5B, 0x95, 0x13, 0x5F, 0x96, 0x12, 
   0x62, 0x97, 0x11, 0x66, 0x98, 0x0F, 0x69, 0x99, 0x0E, 0x6C, 0x9A, 0x0D, 0x6F, 0x9A, 0x0B, 0x71, 
   0x9B, 0x0A, 0x73, 0x9C, 0x08, 0x75, 0x9C, 0x07, 0x77, 0x9C, 0x06, 0x78, 0x9D, 0x04, 0x79, 0x9D, 
   0x03, 0x7A, 0x9D, 0x01, 0x7B, 0x9D, 0x00, 0x7B, 0x9D, 0xFF, 0x7B, 0x9D, 0xFD, 0x7A, 0x9D, 0xFC, 
   0x79, 0x9D, 0xFA, 0x78, 0x9D, 0xF9, 0x77, 0x9C, 0xF8, 0x75, 0x9C, 0xF6, 0x73, 0x9C, 0xF5, 0x71, 
   0x9B, 0xF3, 0x6F, 0x9A, 0xF2, 0x6C, 0x9A, 0xF1, 0x69, 0x99, 0xEF, 0x66, 0x98, 0xEE, 0x62, 0x97, 
   0xED, 0x5F, 0x96, 0xEC, 0x5B, 0x95, 0xEB, 0x57, 0x94, 0xEA, 0x52, 0x93, 0xE9, 0x4E, 0x92, 0xE8, 
   0x49, 0x91, 0xE7, 0x44, 0x90, 0xE6, 0x3F, 0x8E, 0xE5, 0x3A, 0x8D, 0xE5, 0x34, 0x8C, 0xE4, 0x2F, 
   0x8A, 0xE3, 0x29, 0x89, 0xE3, 0x23, 0x87, 0xE3, 0x1D, 0x86, 0xE2, 0x18, 0x85, 0xE2, 0x12, 0x83, 
   0xE2, 0x0C, 0x82, 0xE2, 0x06, 0x80, 0xE2, 0x00, 0x7F, 0xE2, 0xFA, 0x7D, 0xE2, 0xF4, 0x7B, 0xE2, 
   0xEE, 0x7A, 0xE2, 0xE8, 0x78, 0xE3, 0xE3, 0x77, 0xE3, 0xDD, 0x76, 0xE3, 0xD7, 0x74, 0xE4, 0xD1, 
   0x73, 0xE5, 0xCC, 0x71, 0xE5, 0xC6, 0x70, 0xE6, 0xC1, 0x6F, 0xE7, 0xBC, 0x6D, 0xE8, 0xB7, 0x6C, 
   0xE9, 0xB2, 0x6B, 0xEA, 0xAE, 0x6A, 0xEB, 0xA9, 0x69, 0xEC, 0xA5, 0x68, 0xED, 0xA1, 0x67, 0xEE, 
   0x9E, 0x66, 0xEF, 0x9A, 0x65, 0xF1, 0x97, 0x64, 0xF2, 0x94, 0x63, 0xF3, 0x91, 0x63, 0xF5, 0x8F, 
   0x62, 0xF6, 0x8D, 0x61, 0xF8, 0x8B, 0x61, 0xF9, 0x89, 0x61, 0xFA, 0x88, 0x60, 0xFC, 0x87, 0x60, 
   0xFD, 0x86, 0x60, 0xFF, 0x85, 0x60, 0x00, 0x85, 0x60, 0x01, 0x85, 0x60, 0x03, 0x86, 0x60, 0x04, 
   0x87, 0x60, 0x06, 0x88, 0x60, 0x07, 0x89, 0x61, 0x08, 0x8B, 0x61, 0x0A, 0x8D, 0x61, 0x0B, 0x8F, 
   0x62, 0x0D, 0x91, 0x63, 0x0E, 0x94, 0x63, 0x0F, 0x97, 0x64, 0x11, 0x9A, 0x65, 0x12, 0x9E, 0x66, 
   0x13, 0xA1, 0x67, 0x14, 0xA5, 0x68, 0x15, 0xA9, 0x69, 0x16, 0xAE, 0x6A, 0x17, 0xB2, 0x6B, 0x18, 
   0xB7, 0x6C, 0x19, 0xBC, 0x6D, 0x1A, 0xC1, 0x6F, 0x1B, 0xC6, 0x70, 0x1B, 0xCC, 0x71, 0x1C, 0xD1, 
   0x73, 0x1D, 0xD7, 0x74, 0x1D, 0xDD, 0x76, 0x1D, 0xE3, 0x77, 0x1E, 0xE8, 0x78, 0x1E, 0xEE, 0x7A, 
   0x1E, 0xF4, 0x7B, 0x1E, 0xFA, 0x7D, 0x24, 0x00, 0x7E, 0x24, 0x05, 0x80, 0x24, 0x0B, 0x82, 0x24, 
   0x11, 0x84, 0x24, 0x17, 0x86, 0x23, 0x1D, 0x87, 0x23, 0x23, 0x89, 0x22, 0x28, 0x8B, 0x22, 0x2E, 
   0x8D, 0x21, 0x33, 0x8E, 0x20, 0x39, 0x90, 0x1F, 0x3E, 0x91, 0x1E, 0x43, 0x93, 0x1D, 0x48, 0x94, 
   0x1C, 0x4D, 0x96, 0x1B, 0x51, 0x97, 0x1A, 0x55, 0x99, 0x18, 0x5A, 0x9A, 0x17, 0x5D, 0x9B, 0x15, 
   0x61, 0x9C, 0x14, 0x65, 0x9D, 0x12, 0x68, 0x9E, 0x11, 0x6B, 0x9F, 0x0F, 0x6D, 0xA0, 0x0E, 0x70, 
   0xA1, 0x0C, 0x72, 0xA1, 0x0A, 0x74, 0xA2, 0x08, 0x75, 0xA2, 0x07, 0x77, 0xA3, 0x05, 0x78, 0xA3, 
   0x03, 0x78, 0xA3, 0x01, 0x79, 0xA3, 0x00, 0x79, 0xA3, 0xFF, 0x79, 0xA3, 0xFD, 0x78, 0xA3, 0xFB, 
   0x78, 0xA3, 0xF9, 0x77, 0xA3, 0xF8, 0x75, 0xA2, 0xF6, 0x74, 0xA2, 0xF4, 0x72, 0xA1, 0xF2, 0x70, 
   0xA1, 0xF1, 0x6D, 0xA0, 0xEF, 0x6B, 0x9F, 0xEE, 0x68, 0x9E, 0xEC, 0x65, 0x9D, 0xEB, 0x61, 0x9C, 
   0xE9, 0x5D, 0x9B, 0xE8, 0x5A, 0x9A, 0xE6, 0x55, 0x99, 0xE5, 0x51, 0x97, 0xE4, 0x4D, 0x96, 0xE3, 
   0x48, 0x94, 0xE2, 0x43, 0x93, 0xE1, 0x3E, 0x91, 0xE0, 0x39, 0x90, 0xDF, 0x33, 0x8E, 0xDE, 0x2E, 
   0x8D, 0xDE, 0x28, 0x8B, 0xDD, 0x23, 0x89, 0xDD, 0x1D, 0x87, 0xDC, 0x17, 0x86, 0xDC, 0x11, 0x84, 
   0xDC, 0x0B, 0x82, 0xDC, 0x05, 0x80, 0xDC, 0x00, 0x7F, 0xDC, 0xFB, 0x7D, 0xDC, 0xF5, 0x7B, 0xDC, 
   0xEF, 0x79, 0xDC, 0xE9, 0x77, 0xDD, 0xE3, 0x76, 0xDD, 0xDD, 0x74, 0xDE, 0xD8, 0x72, 0xDE, 0xD2, 
   0x70, 0xDF, 0xCD, 0x6F, 0xE0, 0xC7, 0x6D, 0xE1, 0xC2, 0x6C, 0xE2, 0xBD, 0x6A, 0xE3, 0xB8, 0x69, 
   0xE4, 0xB3, 0x67, 0xE5, 0xAF, 0x66, 0xE6, 0xAB, 0x64, 0xE8, 0xA6, 0x63, 0xE9, 0xA3, 0x62, 0xEB, 
   0x9F, 0x61, 0xEC, 0x9B, 0x60, 0xEE, 0x98, 0x5F, 0xEF, 0x95, 0x5E, 0xF1, 0x93, 0x5D, 0xF2, 0x90, 
   0x5C, 0xF4, 0x8E, 0x5C, 0xF6, 0x8C, 0x5B, 0xF8, 0x8B, 0x5B, 0xF9, 0x89, 0x5A, 0xFB, 0x88, 0x5A, 
   0xFD, 0x88, 0x5A, 0xFF, 0x87, 0x5A, 0x00, 0x87, 0x5A, 0x01, 0x87, 0x5A, 0x03, 0x88, 0x5A, 0x05, 
   0x88, 0x5A, 0x07, 0x89, 0x5A, 0x08, 0x8B, 0x5B, 0x0A, 0x8C, 0x5B, 0x0C, 0x8E, 0x5C, 0x0E, 0x90, 
   0x5C, 0x0F, 0x93, 0x5D, 0x11, 0x95, 0x5E, 0x12, 0x98, 0x5F, 0x14, 0x9B, 0x60, 0x15, 0x9F, 0x61, 
   0x17, 0xA3, 0x62, 0x18, 0xA6, 0x63, 0x1A, 0xAB, 0x64, 0x1B, 0xAF, 0x66, 0x1C, 0xB3, 0x67, 0x1D, 
   0xB8, 0x69, 0x1E, 0xBD, 0x6A, 0x1F, 0xC2, 0x6C, 0x20, 0xC7, 0x6D, 0x21, 0xCD, 0x6F, 0x22, 0xD2, 
   0x70, 0x22, 0xD8, 0x72, 0x23, 0xDD, 0x74, 0x23, 0xE3, 0x76, 0x24, 0xE9, 0x77, 0x24, 0xEF, 0x79, 
   0x24, 0xF5, 0x7B, 0x24, 0xFB, 0x7D, 0x2A, 0x00, 0x7E, 0x2A, 0x05, 0x81, 0x2A, 0x0B, 0x83, 0x2A, 
   0x11, 0x85, 0x29, 0x17, 0x87, 0x29, 0x1D, 0x89, 0x28, 0x22, 0x8B, 0x28, 0x28, 0x8D, 0x27, 0x2D, 
   0x8F, 0x26, 0x33, 0x91, 0x25, 0x38, 0x93, 0x24, 0x3D, 0x94, 0x23, 0x42, 0x96, 0x22, 0x47, 0x98, 
   0x21, 0x4B, 0x9A, 0x1F, 0x50, 0x9B, 0x1E, 0x54, 0x9D, 0x1C, 0x58, 0x9E, 0x1B, 0x5C, 0xA0, 0x19, 
   0x60, 0xA1, 0x17, 0x63, 0xA2, 0x15, 0x66, 0xA3, 0x14, 0x69, 0xA4, 0x12, 0x6C, 0xA5, 0x10, 0x6E, 
   0xA6, 0x0E, 0x70, 0xA7, 0x0C, 0x72, 0xA7, 0x0A, 0x73, 0xA8, 0x08, 0x75, 0xA8, 0x06, 0x76, 0xA9, 
   0x04, 0x77, 0xA9, 0x02, 0x77, 0xA9, 0x00, 0x77, 0xA9, 0xFE, 0x77, 0xA9, 0xFC, 0x77, 0xA9, 0xFA, 
   0x76, 0xA9, 0xF8, 0x75, 0xA8, 0xF6, 0x73, 0xA8, 0xF4, 0x72, 0xA7, 0xF2, 0x70, 0xA7, 0xF0, 0x6E, 
   0xA6, 0xEE, 0x6C, 0xA5, 0xEC, 0x69, 0xA4, 0xEB, 0x66, 0xA3, 0xE9, 0x63, 0xA2, 0xE7, 0x60, 0xA1, 
   0xE5, 0x5C, 0xA0, 0xE4, 0x58, 0x9E, 0xE2, 0x54, 0x9D, 0xE1, 0x50, 0x9B, 0xDF, 0x4B, 0x9A, 0xDE, 
   0x47, 0x98, 0xDD, 0x42, 0x96, 0xDC, 0x3D, 0x94, 0xDB, 0x38, 0x93, 0xDA, 0x33, 0x91, 0xD9, 0x2D, 
   0x8F, 0xD8, 0x28, 0x8D, 0xD8, 0x22, 0x8B, 0xD7, 0x1D, 0x89, 0xD7, 0x17, 0x87, 0xD6, 0x11, 0x85, 
   0xD6, 0x0B, 0x83, 0xD6, 0x05, 0x81, 0xD6, 0x00, 0x7F, 0xD6, 0xFB, 0x7C, 0xD6, 0xF5, 0x7A, 0xD6, 
   0xEF, 0x78, 0xD7, 0xE9, 0x76, 0xD7, 0xE3, 0x74, 0xD8, 0xDE, 0x72, 0xD8, 0xD8, 0x70, 0xD9, 0xD3, 
   0x6E, 0xDA, 0xCD, 0x6C, 0xDB, 0xC8, 0x6A, 0xDC, 0xC3, 0x69, 0xDD, 0xBE, 0x67, 0xDE, 0xB9, 0x65, 
   0xDF, 0xB5, 0x63, 0xE1, 0xB0, 0x62, 0xE2, 0xAC, 0x60, 0xE4, 0xA8, 0x5F, 0xE5, 0xA4, 0x5D, 0xE7, 
   0xA0, 0x5C, 0xE9, 0x9D, 0x5B, 0xEB, 0x9A, 0x5A, 0xEC, 0x97, 0x59, 0xEE, 0x94, 0x58, 0xF0, 0x92, 
   0x57, 0xF2, 0x90, 0x56, 0xF4, 0x8E, 0x56, 0xF6, 0x8D, 0x55, 0xF8, 0x8B, 0x55, 0xFA, 0x8A, 0x54, 
   0xFC, 0x89, 0x54, 0xFE, 0x89, 0x54, 0x00, 0x89, 0x54, 0x02, 0x89, 0x54, 0x04, 0x89, 0x54, 0x06, 
   0x8A, 0x54, 0x08, 0x8B, 0x55, 0x0A, 0x8D, 0x55, 0x0C, 0x8E, 0x56, 0x0E, 0x90, 0x56, 0x10, 0x92, 
   0x57, 0x12, 0x94, 0x58, 0x14, 0x97, 0x59, 0x15, 0x9A, 0x5A, 0x17, 0x9D, 0x5B, 0x19, 0xA0, 0x5C, 
   0x1B, 0xA4, 0x5D, 0x1C, 0xA8, 0x5F, 0x1E, 0xAC, 0x60, 0x1F, 0xB0, 0x62, 0x21, 0xB5, 0x63, 0x22, 
   0xB9, 0x65, 0x23, 0xBE, 0x67, 0x24, 0xC3, 0x69, 0x25, 0xC8, 0x6A, 0x26, 0xCD, 0x6C, 0x27, 0xD3, 
   0x6E, 0x28, 0xD8, 0x70, 0x28, 0xDE, 0x72, 0x29, 0xE3, 0x74, 0x29, 0xE9, 0x76, 0x2A, 0xEF, 0x78, 
   0x2A, 0xF5, 0x7A, 0x2A, 0xFB, 0x7C, 0x30, 0x00, 0x7E, 0x30, 0x05, 0x81, 0x30, 0x0B, 0x83, 0x30, 
   0x11, 0x86, 0x2F, 0x16, 0x88, 0x2F, 0x1C, 0x8A, 0x2E, 0x22, 0x8D, 0x2D, 0x27, 0x8F, 0x2C, 0x2C, 
   0x91, 0x2B, 0x32, 0x93, 0x2A, 0x37, 0x95, 0x29, 0x3C, 0x97, 0x28, 0x41, 0x9A, 0x27, 0x45, 0x9B, 
   0x25, 0x4A, 0x9D, 0x24, 0x4E, 0x9F, 0x22, 0x52, 0xA1, 0x20, 0x56, 0xA3, 0x1E, 0x5A, 0xA4, 0x1C, 
   0x5E, 0xA6, 0x1B, 0x61, 0xA7, 0x18, 0x64, 0xA8, 0x16, 0x67, 0xA9, 0x14, 0x6A, 0xAA, 0x12, 0x6C, 
   0xAB, 0x10, 0x6E, 0xAC, 0x0E, 0x70, 0xAD, 0x0B, 0x71, 0xAE, 0x09, 0x73, 0xAE, 0x07, 0x74, 0xAF, 
   0x04, 0x74, 0xAF, 0x02, 0x75, 0xAF, 0x00, 0x75, 0xAF, 0xFE, 0x75, 0xAF, 0xFC, 0x74, 0xAF, 0xF9, 
   0x74, 0xAF, 0xF7, 0x73, 0xAE, 0xF5, 0x71, 0xAE, 0xF2, 0x70, 0xAD, 0xF0, 0x6E, 0xAC, 0xEE, 0x6C, 
   0xAB, 0xEC, 0x6A, 0xAA, 0xEA, 0x67, 0xA9, 0xE8, 0x64, 0xA8, 0xE5, 0x61, 0xA7, 0xE4, 0x5E, 0xA6, 
   0xE2, 0x5A, 0xA4, 0xE0, 0x56, 0xA3, 0xDE, 0x52, 0xA1, 0xDC, 0x4E, 0x9F, 0xDB, 0x4A, 0x9D, 0xD9, 
   0x45, 0x9B, 0xD8, 0x41, 0x9A, 0xD7, 0x3C, 0x97, 0xD6, 0x37, 0x95, 0xD5, 0x32, 0x93, 0xD4, 0x2C, 
   0x91, 0xD3, 0x27, 0x8F, 0xD2, 0x22, 0x8D, 0xD1, 0x1C, 0x8A, 0xD1, 0x16, 0x88, 0xD0, 0x11, 0x86, 
   0xD0, 0x0B, 0x83, 0xD0, 0x05, 0x81, 0xD0, 0x00, 0x7F, 0xD0, 0xFB, 0x7C, 0xD0, 0xF5, 0x7A, 0xD0, 
   0xEF, 0x77, 0xD1, 0xEA, 0x75, 0xD1, 0xE4, 0x73, 0xD2, 0xDE, 0x70, 0xD3, 0xD9, 0x6E, 0xD4, 0xD4, 
   0x6C, 0xD5, 0xCE, 0x6A, 0xD6, 0xC9, 0x68, 0xD7, 0xC4, 0x66, 0xD8, 0xBF, 0x63, 0xD9, 0xBB, 0x62, 
   0xDB, 0xB6, 0x60, 0xDC, 0xB2, 0x5E, 0xDE, 0xAE, 0x5C, 0xE0, 0xAA, 0x5A, 0xE2, 0xA6, 0x59, 0xE4, 
   0xA2, 0x57, 0xE5, 0x9F, 0x56, 0xE8, 0x9C, 0x55, 0xEA, 0x99, 0x54, 0xEC, 0x96, 0x53, 0xEE, 0x94, 
   0x52, 0xF0, 0x92, 0x51, 0xF2, 0x90, 0x50, 0xF5, 0x8F, 0x4F, 0xF7, 0x8D, 0x4F, 0xF9, 0x8C, 0x4E, 
   0xFC, 0x8C, 0x4E, 0xFE, 0x8B, 0x4E, 0x00, 0x8B, 0x4E, 0x02, 0x8B, 0x4E, 0x04, 0x8C, 0x4E, 0x07, 
   0x8C, 0x4E, 0x09, 0x8D, 0x4F, 0x0B, 0x8F, 0x4F, 0x0E, 0x90, 0x50, 0x10, 0x92, 0x51, 0x12, 0x94, 
   0x52, 0x14, 0x96, 0x53, 0x16, 0x99, 0x54, 0x18, 0x9C, 0x55, 0x1B, 0x9F, 0x56, 0x1C, 0xA2, 0x57, 
   0x1E, 0xA6, 0x59, 0x20, 0xAA, 0x5A, 0x22, 0xAE, 0x5C, 0x24, 0xB2, 0x5E, 0x25, 0xB6, 0x60, 0x27, 
   0xBB, 0x62, 0x28, 0xBF, 0x63, 0x29, 0xC4, 0x66, 0x2A, 0xC9, 0x68, 0x2B, 0xCE, 0x6A, 0x2C, 0xD4, 
   0x6C, 0x2D, 0xD9, 0x6E, 0x2E, 0xDE, 0x70, 0x2F, 0xE4, 0x73, 0x2F, 0xEA, 0x75, 0x30, 0xEF, 0x77, 
   0x30, 0xF5, 0x7A, 0x30, 0xFB, 0x7C, 0x36, 0x00, 0x7E, 0x36, 0x05, 0x81, 0x36, 0x0B, 0x84, 0x35, 
   0x10, 0x86, 0x35, 0x16, 0x89, 0x34, 0x1B, 0x8C, 0x33, 0x21, 0x8E, 0x33, 0x26, 0x91, 0x32, 0x2B, 
   0x93, 0x31, 0x31, 0x96, 0x2F, 0x36, 0x98, 0x2E, 0x3B, 0x9A, 0x2D, 0x3F, 0x9D, 0x2B, 0x44, 0x9F, 
   0x29, 0x48, 0xA1, 0x28, 0x4D, 0xA3, 0x26, 0x51, 0xA5, 0x24, 0x55, 0xA7, 0x22, 0x58, 0xA8, 0x20, 
   0x5C, 0xAA, 0x1E, 0x5F, 0xAC, 0x1B, 0x62, 0xAD, 0x19, 0x65, 0xAE, 0x17, 0x67, 0xB0, 0x14, 0x6A, 
   0xB1, 0x12, 0x6C, 0xB2, 0x0F, 0x6D, 0xB2, 0x0D, 0x6F, 0xB3, 0x0A, 0x70, 0xB4, 0x07, 0x71, 0xB4, 
   0x05, 0x72, 0xB5, 0x02, 0x72, 0xB5, 0x00, 0x72, 0xB5, 0xFE, 0x72, 0xB5, 0xFB, 0x72, 0xB5, 0xF9, 
   0x71, 0xB4, 0xF6, 0x70, 0xB4, 0xF3, 0x6F, 0xB3, 0xF1, 0x6D, 0xB2, 0xEE, 0x6C, 0xB2, 0xEC, 0x6A, 
   0xB1, 0xE9, 0x67, 0xB0, 0xE7, 0x65, 0xAE, 0xE5, 0x62, 0xAD, 0xE2, 0x5F, 0xAC, 0xE0, 0x5C, 0xAA, 
   0xDE, 0x58, 0xA8, 0xDC, 0x55, 0xA7, 0xDA, 0x51, 0xA5, 0xD8, 0x4D, 0xA3, 0xD7, 0x48, 0xA1, 0xD5, 
   0x44, 0x9F, 0xD3, 0x3F, 0x9D, 0xD2, 0x3B, 0x9A, 0xD1, 0x36, 0x98, 0xCF, 0x31, 0x96, 0xCE, 0x2B, 
   0x93, 0xCD, 0x26, 0x91, 0xCD, 0x21, 0x8E, 0xCC, 0x1B, 0x8C, 0xCB, 0x16, 0x89, 0xCB, 0x10, 0x86, 
   0xCA, 0x0B, 0x84, 0xCA, 0x05, 0x81, 0xCA, 0x00, 0x7F, 0xCA, 0xFB, 0x7C, 0xCA, 0xF5, 0x79, 0xCB, 
   0xF0, 0x77, 0xCB, 0xEA, 0x74, 0xCC, 0xE5, 0x71, 0xCD, 0xDF, 0x6F, 0xCD, 0xDA, 0x6C, 0xCE, 0xD5, 
   0x6A, 0xCF, 0xCF, 0x67, 0xD1, 0xCA, 0x65, 0xD2, 0xC5, 0x63, 0xD3, 0xC1, 0x60, 0xD5, 0xBC, 0x5E, 
   0xD7, 0xB8, 0x5C, 0xD8, 0xB3, 0x5A, 0xDA, 0xAF, 0x58, 0xDC, 0xAB, 0x56, 0xDE, 0xA8, 0x55, 0xE0, 
   0xA4, 0x53, 0xE2, 0xA1, 0x51, 0xE5, 0x9E, 0x50, 0xE7, 0x9B, 0x4F, 0xE9, 0x99, 0x4D, 0xEC, 0x96, 
   0x4C, 0xEE, 0x94, 0x4B, 0xF1, 0x93, 0x4B, 0xF3, 0x91, 0x4A, 0xF6, 0x90, 0x49, 0xF9, 0x8F, 0x49, 
   0xFB, 0x8E, 0x48, 0xFE, 0x8E, 0x48, 0x00, 0x8E, 0x48, 0x02, 0x8E, 0x48, 0x05, 0x8E, 0x48, 0x07, 
   0x8F, 0x49, 0x0A, 0x90, 0x49, 0x0D, 0x91, 0x4A, 0x0F, 0x93, 0x4B, 0x12, 0x94, 0x4B, 0x14, 0x96, 
   0x4C, 0x17, 0x99, 0x4D, 0x19, 0x9B, 0x4F, 0x1B, 0x9E, 0x50, 0x1E, 0xA1, 0x51, 0x20, 0xA4, 0x53, 
   0x22, 0xA8, 0x55, 0x24, 0xAB, 0x56, 0x26, 0xAF, 0x58, 0x28, 0xB3, 0x5A, 0x29, 0xB8, 0x5C, 0x2B, 
   0xBC, 0x5E, 0x2D, 0xC1, 0x60, 0x2E, 0xC5, 0x63, 0x2F, 0xCA, 0x65, 0x31, 0xCF, 0x67, 0x32, 0xD5, 
   0x6A, 0x33, 0xDA, 0x6C, 0x33, 0xDF, 0x6F, 0x34, 0xE5, 0x71, 0x35, 0xEA, 0x74, 0x35, 0xF0, 0x77, 
   0x36, 0xF5, 0x79, 0x36, 0xFB, 0x7C, 0x3B, 0x00, 0x7E, 0x3B, 0x05, 0x81, 0x3B, 0x0A, 0x84, 0x3B, 
   0x10, 0x87, 0x3A, 0x15, 0x8A, 0x3A, 0x1B, 0x8D, 0x39, 0x20, 0x90, 0x38, 0x25, 0x93, 0x37, 0x2A, 
   0x95, 0x36, 0x2F, 0x98, 0x34, 0x34, 0x9B, 0x33, 0x39, 0x9D, 0x31, 0x3E, 0xA0, 0x30, 0x42, 0xA2, 
   0x2E, 0x47, 0xA4, 0x2C, 0x4B, 0xA7, 0x2A, 0x4F, 0xA9, 0x28, 0x52, 0xAB, 0x25, 0x56, 0xAD, 0x23, 
   0x59, 0xAF, 0x21, 0x5D, 0xB0, 0x1E, 0x60, 0xB2, 0x1C, 0x62, 0xB3, 0x19, 0x65, 0xB5, 0x16, 0x67, 
   0xB6, 0x14, 0x69, 0xB7, 0x11, 0x6B, 0xB8, 0x0E, 0x6C, 0xB9, 0x0B, 0x6D, 0xB9, 0x08, 0x6E, 0xBA, 
   0x05, 0x6F, 0xBA, 0x02, 0x6F, 0xBA, 0x00, 0x70, 0xBA, 0xFE, 0x6F, 0xBA, 0xFB, 0x6F, 0xBA, 0xF8, 
   0x6E, 0xBA, 0xF5, 0x6D, 0xB9, 0xF2, 0x6C, 0xB9, 0xEF, 0x6B, 0xB8, 0xEC, 0x69, 0xB7, 0xEA, 0x67, 
   0xB6, 0xE7, 0x65, 0xB5, 0xE4, 0x62, 0xB3, 0xE2, 0x60, 0xB2, 0xDF, 0x5D, 0xB0, 0xDD, 0x59, 0xAF, 
   0xDB, 0x56, 0xAD, 0xD8, 0x52, 0xAB, 0xD6, 0x4F, 0xA9, 0xD4, 0x4B, 0xA7, 0xD2, 0x47, 0xA4, 0xD0, 
   0x42, 0xA2, 0xCF, 0x3E, 0xA0, 0xCD, 0x39, 0x9D, 0xCC, 0x34, 0x9B, 0xCA, 0x2F, 0x98, 0xC9, 0x2A, 
   0x95, 0xC8, 0x25, 0x93, 0xC7, 0x20, 0x90, 0xC6, 0x1B, 0x8D, 0xC6, 0x15, 0x8A, 0xC5, 0x10, 0x87, 
   0xC5, 0x0A, 0x84, 0xC5, 0x05, 0x81, 0xC5, 0x00, 0x7F, 0xC5, 0xFB, 0x7C, 0xC5, 0xF6, 0x79, 0xC5, 
   0xF0, 0x76, 0xC6, 0xEB, 0x73, 0xC6, 0xE5, 0x70, 0xC7, 0xE0, 0x6D, 0xC8, 0xDB, 0x6A, 0xC9, 0xD6, 
   0x68, 0xCA, 0xD1, 0x65, 0xCC, 0xCC, 0x62, 0xCD, 0xC7, 0x60, 0xCF, 0xC2, 0x5D, 0xD0, 0xBE, 0x5B, 
   0xD2, 0xB9, 0x59, 0xD4, 0xB5, 0x56, 0xD6, 0xB1, 0x54, 0xD8, 0xAE, 0x52, 0xDB, 0xAA, 0x50, 0xDD, 
   0xA7, 0x4E, 0xDF, 0xA3, 0x4D, 0xE2, 0xA0, 0x4B, 0xE4, 0x9E, 0x4A, 0xE7, 0x9B, 0x48, 0xEA, 0x99, 
   0x47, 0xEC, 0x97, 0x46, 0xEF, 0x95, 0x45, 0xF2, 0x94, 0x44, 0xF5, 0x93, 0x44, 0xF8, 0x92, 0x43, 
   0xFB, 0x91, 0x43, 0xFE, 0x91, 0x43, 0x00, 0x90, 0x43, 0x02, 0x91, 0x43, 0x05, 0x91, 0x43, 0x08, 
   0x92, 0x43, 0x0B, 0x93, 0x44, 0x0E, 0x94, 0x44, 0x11, 0x95, 0x45, 0x14, 0x97, 0x46, 0x16, 0x99, 
   0x47, 0x19, 0x9B, 0x48, 0x1C, 0x9E, 0x4A, 0x1E, 0xA0, 0x4B, 0x21, 0xA3, 0x4D, 0x23, 0xA7, 0x4E, 
   0x25, 0xAA, 0x50, 0x28, 0xAE, 0x52, 0x2A, 0xB1, 0x54, 0x2C, 0xB5, 0x56, 0x2E, 0xB9, 0x59, 0x30, 
   0xBE, 0x5B, 0x31, 0xC2, 0x5D, 0x33, 0xC7, 0x60, 0x34, 0xCC, 0x62, 0x36, 0xD1, 0x65, 0x37, 0xD6, 
   0x68, 0x38, 0xDB, 0x6A, 0x39, 0xE0, 0x6D, 0x3A, 0xE5, 0x70, 0x3A, 0xEB, 0x73, 0x3B, 0xF0, 0x76, 
   0x3B, 0xF6, 0x79, 0x3B, 0xFB, 0x7C, 0x41, 0x00, 0x7E, 0x41, 0x05, 0x82, 0x40, 0x0A, 0x85, 0x40, 
   0x0F, 0x88, 0x40, 0x15, 0x8B, 0x3F, 0x1A, 0x8E, 0x3E, 0x1F, 0x91, 0x3D, 0x24, 0x94, 0x3C, 0x29, 
   0x97, 0x3B, 0x2E, 0x9A, 0x39, 0x33, 0x9D, 0x38, 0x38, 0xA0, 0x36, 0x3C, 0xA3, 0x34, 0x40, 0xA5, 
   0x32, 0x45, 0xA8, 0x30, 0x49, 0xAA, 0x2E, 0x4D, 0xAD, 0x2B, 0x50, 0xAF, 0x29, 0x54, 0xB1, 0x26, 
   0x57, 0xB3, 0x24, 0x5A, 0xB5, 0x21, 0x5D, 0xB7, 0x1E, 0x60, 0xB8, 0x1B, 0x62, 0xBA, 0x18, 0x64, 
   0xBB, 0x15, 0x66, 0xBC, 0x12, 0x68, 0xBD, 0x0F, 0x69, 0xBE, 0x0C, 0x6A, 0xBF, 0x09, 0x6B, 0xBF, 
   0x06, 0x6C, 0xBF, 0x03, 0x6C, 0xC0, 0x00, 0x6C, 0xC0, 0xFD, 0x6C, 0xC0, 0xFA, 0x6C, 0xBF, 0xF7, 
   0x6B, 0xBF, 0xF4, 0x6A, 0xBF, 0xF1, 0x69, 0xBE, 0xEE, 0x68, 0xBD, 0xEB, 0x66, 0xBC, 0xE8, 0x64, 
   0xBB, 0xE5, 0x62, 0xBA, 0xE2, 0x60, 0xB8, 0xDF, 0x5D, 0xB7, 0xDC, 0x5A, 0xB5, 0xDA, 0x57, 0xB3, 
   0xD7, 0x54, 0xB1, 0xD5, 0x50, 0xAF, 0xD2, 0x4D, 0xAD, 0xD0, 0x49, 0xAA, 0xCE, 0x45, 0xA8, 0xCC, 
   0x40, 0xA5, 0xCA, 0x3C, 0xA3, 0xC8, 0x38, 0xA0, 0xC7, 0x33, 0x9D, 0xC5, 0x2E, 0x9A, 0xC4, 0x29, 
   0x97, 0xC3, 0x24, 0x94, 0xC2, 0x1F, 0x91, 0xC1, 0x1A, 0x8E, 0xC0, 0x15, 0x8B, 0xC0, 0x0F, 0x88, 
   0xC0, 0x0A, 0x85, 0xBF, 0x05, 0x82, 0xBF, 0x00, 0x7F, 0xBF, 0xFB, 0x7B, 0xC0, 0xF6, 0x78, 0xC0, 
   0xF1, 0x75, 0xC0, 0xEB, 0x72, 0xC1, 0xE6, 0x6F, 0xC2, 0xE1, 0x6C, 0xC3, 0xDC, 0x69, 0xC4, 0xD7, 
   0x66, 0xC5, 0xD2, 0x63, 0xC7, 0xCD, 0x60, 0xC8, 0xC8, 0x5D, 0xCA, 0xC4, 0x5A, 0xCC, 0xC0, 0x58, 
   0xCE, 0xBB, 0x55, 0xD0, 0xB7, 0x53, 0xD2, 0xB3, 0x50, 0xD5, 0xB0, 0x4E, 0xD7, 0xAC, 0x4C, 0xDA, 
   0xA9, 0x4A, 0xDC, 0xA6, 0x48, 0xDF, 0xA3, 0x46, 0xE2, 0xA0, 0x45, 0xE5, 0x9E, 0x43, 0xE8, 0x9C, 
   0x42, 0xEB, 0x9A, 0x41, 0xEE, 0x98, 0x40, 0xF1, 0x97, 0x3F, 0xF4, 0x96, 0x3E, 0xF7, 0x95, 0x3E, 
   0xFA, 0x94, 0x3E, 0xFD, 0x94, 0x3D, 0x00, 0x94, 0x3D, 0x03, 0x94, 0x3D, 0x06, 0x94, 0x3E, 0x09, 
   0x95, 0x3E, 0x0C, 0x96, 0x3E, 0x0F, 0x97, 0x3F, 0x12, 0x98, 0x40, 0x15, 0x9A, 0x41, 0x18, 0x9C, 
   0x42, 0x1B, 0x9E, 0x43, 0x1E, 0xA0, 0x45, 0x21, 0xA3, 0x46, 0x24, 0xA6, 0x48, 0x26, 0xA9, 0x4A, 
   0x29, 0xAC, 0x4C, 0x2B, 0xB0, 0x4E, 0x2E, 0xB3, 0x50, 0x30, 0xB7, 0x53, 0x32, 0xBB, 0x55, 0x34, 
   0xC0, 0x58, 0x36, 0xC4, 0x5A, 0x38, 0xC8, 0x5D, 0x39, 0xCD, 0x60, 0x3B, 0xD2, 0x63, 0x3C, 0xD7, 
   0x66, 0x3D, 0xDC, 0x69, 0x3E, 0xE1, 0x6C, 0x3F, 0xE6, 0x6F, 0x40, 0xEB, 0x72, 0x40, 0xF1, 0x75, 
   0x40, 0xF6, 0x78, 0x41, 0xFB, 0x7B, 0x46, 0x00, 0x7E, 0x46, 0x05, 0x82, 0x46, 0x0A, 0x85, 0x45, 
   0x0F, 0x89, 0x45, 0x14, 0x8C, 0x44, 0x19, 0x90, 0x43, 0x1E, 0x93, 0x42, 0x23, 0x96, 0x41, 0x28, 
   0x9A, 0x3F, 0x2D, 0x9D, 0x3E, 0x31, 0xA0, 0x3C, 0x36, 0xA3, 0x3A, 0x3A, 0xA6, 0x38, 0x3E, 0xA9, 
   0x36, 0x42, 0xAB, 0x34, 0x46, 0xAE, 0x31, 0x4A, 0xB0, 0x2F, 0x4E, 0xB3, 0x2C, 0x51, 0xB5, 0x2A, 
   0x54, 0xB7, 0x27, 0x57, 0xB9, 0x24, 0x5A, 0xBB, 0x21, 0x5D, 0xBD, 0x1E, 0x5F, 0xBE, 0x1B, 0x61, 
   0xC0, 0x17, 0x63, 0xC1, 0x14, 0x65, 0xC2, 0x11, 0x66, 0xC3, 0x0D, 0x67, 0xC4, 0x0A, 0x68, 0xC4, 
   0x06, 0x69, 0xC5, 0x03, 0x69, 0xC5, 0x00, 0x69, 0xC5, 0xFD, 0x69, 0xC5, 0xFA, 0x69, 0xC5, 0xF6, 
   0x68, 0xC4, 0xF3, 0x67, 0xC4, 0xEF, 0x66, 0xC3, 0xEC, 0x65, 0xC2, 0xE9, 0x63, 0xC1, 0xE5, 0x61, 
   0xC0, 0xE2, 0x5F, 0xBE, 0xDF, 0x5D, 0xBD, 0xDC, 0x5A, 0xBB, 0xD9, 0x57, 0xB9, 0xD6, 0x54, 0xB7, 
   0xD4, 0x51, 0xB5, 0xD1, 0x4E, 0xB3, 0xCF, 0x4A, 0xB0, 0xCC, 0x46, 0xAE, 0xCA, 0x42, 0xAB, 0xC8, 
   0x3E, 0xA9, 0xC6, 0x3A, 0xA6, 0xC4, 0x36, 0xA3, 0xC2, 0x31, 0xA0, 0xC1, 0x2D, 0x9D, 0xBF, 0x28, 
   0x9A, 0xBE, 0x23, 0x96, 0xBD, 0x1E, 0x93, 0xBC, 0x19, 0x90, 0xBB, 0x14, 0x8C, 0xBB, 0x0F, 0x89, 
   0xBA, 0x0A, 0x85, 0xBA, 0x05, 0x82, 0xBA, 0x00, 0x7F, 0xBA, 0xFB, 0x7B, 0xBA, 0xF6, 0x78, 0xBB, 
   0xF1, 0x74, 0xBB, 0xEC, 0x71, 0xBC, 0xE7, 0x6D, 0xBD, 0xE2, 0x6A, 0xBE, 0xDD, 0x67, 0xBF, 0xD8, 
   0x63, 0xC1, 0xD3, 0x60, 0xC2, 0xCF, 0x5D, 0xC4, 0xCA, 0x5A, 0xC6, 0xC6, 0x57, 0xC8, 0xC2, 0x54, 
   0xCA, 0xBE, 0x52, 0xCC, 0xBA, 0x4F, 0xCF, 0xB6, 0x4D, 0xD1, 0xB2, 0x4A, 0xD4, 0xAF, 0x48, 0xD6, 
   0xAC, 0x46, 0xD9, 0xA9, 0x44, 0xDC, 0xA6, 0x42, 0xDF, 0xA3, 0x40, 0xE2, 0xA1, 0x3F, 0xE5, 0x9F, 
   0x3D, 0xE9, 0x9D, 0x3C, 0xEC, 0x9B, 0x3B, 0xEF, 0x9A, 0x3A, 0xF3, 0x99, 0x39, 0xF6, 0x98, 0x39, 
   0xFA, 0x97, 0x38, 0xFD, 0x97, 0x38, 0x00, 0x97, 0x38, 0x03, 0x97, 0x38, 0x06, 0x97, 0x38, 0x0A, 
   0x98, 0x39, 0x0D, 0x99, 0x39, 0x11, 0x9A, 0x3A, 0x14, 0x9B, 0x3B, 0x17, 0x9D, 0x3C, 0x1B, 0x9F, 
   0x3D, 0x1E, 0xA1, 0x3F, 0x21, 0xA3, 0x40, 0x24, 0xA6, 0x42, 0x27, 0xA9, 0x44, 0x2A, 0xAC, 0x46, 
   0x2C, 0xAF, 0x48, 0x2F, 0xB2, 0x4A, 0x31, 0xB6, 0x4D, 0x34, 0xBA, 0x4F, 0x36, 0xBE, 0x52, 0x38, 
   0xC2, 0x54, 0x3A, 0xC6, 0x57, 0x3C, 0xCA, 0x5A, 0x3E, 0xCF, 0x5D, 0x3F, 0xD3, 0x60, 0x41, 0xD8, 
   0x63, 0x42, 0xDD, 0x67, 0x43, 0xE2, 0x6A, 0x44, 0xE7, 0x6D, 0x45, 0xEC, 0x71, 0x45, 0xF1, 0x74, 
   0x46, 0xF6, 0x78, 0x46, 0xFB, 0x7B, 0x4B, 0x00, 0x7E, 0x4B, 0x05, 0x82, 0x4B, 0x09, 0x86, 0x4A, 
   0x0E, 0x8A, 0x4A, 0x13, 0x8D, 0x49, 0x18, 0x91, 0x48, 0x1D, 0x94, 0x47, 0x22, 0x98, 0x45, 0x27, 
   0x9B, 0x44, 0x2B, 0x9F, 0x42, 0x30, 0xA2, 0x40, 0x34, 0xA5, 0x3E, 0x38, 0xA9, 0x3C, 0x3C, 0xAC, 
   0x3A, 0x40, 0xAE, 0x38, 0x44, 0xB1, 0x35, 0x48, 0xB4, 0x32, 0x4B, 0xB7, 0x2F, 0x4E, 0xB9, 0x2D, 
   0x51, 0xBB, 0x2A, 0x54, 0xBD, 0x26, 0x57, 0xBF, 0x23, 0x59, 0xC1, 0x20, 0x5C, 0xC3, 0x1C, 0x5E, 
   0xC4, 0x19, 0x60, 0xC6, 0x15, 0x61, 0xC7, 0x12, 0x62, 0xC8, 0x0E, 0x64, 0xC9, 0x0B, 0x64, 0xC9, 
   0x07, 0x65, 0xCA, 0x03, 0x65, 0xCA, 0x00, 0x66, 0xCA, 0xFD, 0x65, 0xCA, 0xF9, 0x65, 0xCA, 0xF5, 
   0x64, 0xC9, 0xF2, 0x64, 0xC9, 0xEE, 0x62, 0xC8, 0xEB, 0x61, 0xC7, 0xE7, 0x60, 0xC6, 0xE4, 0x5E, 
   0xC4, 0xE0, 0x5C, 0xC3, 0xDD, 0x59, 0xC1, 0xDA, 0x57, 0xBF, 0xD6, 0x54, 0xBD, 0xD3, 0x51, 0xBB, 
   0xD1, 0x4E, 0xB9, 0xCE, 0x4B, 0xB7, 0xCB, 0x48, 0xB4, 0xC8, 0x44, 0xB1, 0xC6, 0x40, 0xAE, 0xC4, 
   0x3C, 0xAC, 0xC2, 0x38, 0xA9, 0xC0, 0x34, 0xA5, 0xBE, 0x30, 0xA2, 0xBC, 0x2B, 0x9F, 0xBB, 0x27, 
   0x9B, 0xB9, 0x22, 0x98, 0xB8, 0x1D, 0x94, 0xB7, 0x18, 0x91, 0xB6, 0x13, 0x8D, 0xB6, 0x0E, 0x8A, 
   0xB5, 0x09, 0x86, 0xB5, 0x05, 0x82, 0xB5, 0x00, 0x7F, 0xB5, 0xFB, 0x7B, 0xB5, 0xF7, 0x77, 0xB6, 
   0xF2, 0x73, 0xB6, 0xED, 0x70, 0xB7, 0xE8, 0x6C, 0xB8, 0xE3, 0x69, 0xB9, 0xDE, 0x65, 0xBB, 0xD9, 
   0x62, 0xBC, 0xD5, 0x5E, 0xBE, 0xD0, 0x5B, 0xC0, 0xCC, 0x58, 0xC2, 0xC8, 0x54, 0xC4, 0xC4, 0x51, 
   0xC6, 0xC0, 0x4F, 0xC8, 0xBC, 0x4C, 0xCB, 0xB8, 0x49, 0xCE, 0xB5, 0x46, 0xD1, 0xB2, 0x44, 0xD3, 
   0xAF, 0x42, 0xD6, 0xAC, 0x40, 0xDA, 0xA9, 0x3E, 0xDD, 0xA7, 0x3C, 0xE0, 0xA4, 0x3A, 0xE4, 0xA2, 
   0x39, 0xE7, 0xA0, 0x37, 0xEB, 0x9F, 0x36, 0xEE, 0x9E, 0x35, 0xF2, 0x9C, 0x34, 0xF5, 0x9C, 0x34, 
   0xF9, 0x9B, 0x33, 0xFD, 0x9B, 0x33, 0x00, 0x9A, 0x33, 0x03, 0x9B, 0x33, 0x07, 0x9B, 0x33, 0x0B, 
   0x9C, 0x34, 0x0E, 0x9C, 0x34, 0x12, 0x9E, 0x35, 0x15, 0x9F, 0x36, 0x19, 0xA0, 0x37, 0x1C, 0xA2, 
   0x39, 0x20, 0xA4, 0x3A, 0x23, 0xA7, 0x3C, 0x26, 0xA9, 0x3E, 0x2A, 0xAC, 0x40, 0x2D, 0xAF, 0x42, 
   0x2F, 0xB2, 0x44, 0x32, 0xB5, 0x46, 0x35, 0xB8, 0x49, 0x38, 0xBC, 0x4C, 0x3A, 0xC0, 0x4F, 0x3C, 
   0xC4, 0x51, 0x3E, 0xC8, 0x54, 0x40, 0xCC, 0x58, 0x42, 0xD0, 0x5B, 0x44, 0xD5, 0x5E, 0x45, 0xD9, 
   0x62, 0x47, 0xDE, 0x65, 0x48, 0xE3, 0x69, 0x49, 0xE8, 0x6C, 0x4A, 0xED, 0x70, 0x4A, 0xF2, 0x73, 
   0x4B, 0xF7, 0x77, 0x4B, 0xFB, 0x7B, 0x50, 0x00, 0x7E, 0x50, 0x04, 0x82, 0x50, 0x09, 0x86, 0x4F, 
   0x0E, 0x8A, 0x4F, 0x13, 0x8E, 0x4E, 0x17, 0x92, 0x4D, 0x1C, 0x96, 0x4B, 0x21, 0x9A, 0x4A, 0x25, 
   0x9D, 0x48, 0x29, 0xA1, 0x47, 0x2E, 0xA4, 0x45, 0x32, 0xA8, 0x42, 0x36, 0xAB, 0x40, 0x3A, 0xAE, 
   0x3E, 0x3E, 0xB2, 0x3B, 0x41, 0xB5, 0x38, 0x45, 0xB7, 0x36, 0x48, 0xBA, 0x33, 0x4B, 0xBD, 0x2F, 
   0x4E, 0xBF, 0x2C, 0x51, 0xC1, 0x29, 0x54, 0xC4, 0x25, 0x56, 0xC6, 0x22, 0x58, 0xC7, 0x1E, 0x5A, 
   0xC9, 0x1B, 0x5C, 0xCA, 0x17, 0x5D, 0xCC, 0x13, 0x5F, 0xCD, 0x0F, 0x60, 0xCE, 0x0B, 0x61, 0xCE, 
   0x07, 0x61, 0xCF, 0x03, 0x62, 0xCF, 0x00, 0x62, 0xCF, 0xFD, 0x62, 0xCF, 0xF9, 0x61, 0xCF, 0xF5, 
   0x61, 0xCE, 0xF1, 0x60, 0xCE, 0xED, 0x5F, 0xCD, 0xE9, 0x5D, 0xCC, 0xE5, 0x5C, 0xCA, 0xE2, 0x5A, 
   0xC9, 0xDE, 0x58, 0xC7, 0xDB, 0x56, 0xC6, 0xD7, 0x54, 0xC4, 0xD4, 0x51, 0xC1, 0xD1, 0x4E, 0xBF, 
   0xCD, 0x4B, 0xBD, 0xCA, 0x48, 0xBA, 0xC8, 0x45, 0xB7, 0xC5, 0x41, 0xB5, 0xC2, 0x3E, 0xB2, 0xC0, 
   0x3A, 0xAE, 0xBE, 0x36, 0xAB, 0xBB, 0x32, 0xA8, 0xB9, 0x2E, 0xA4, 0xB8, 0x29, 0xA1, 0xB6, 0x25, 
   0x9D, 0xB5, 0x21, 0x9A, 0xB3, 0x1C, 0x96, 0xB2, 0x17, 0x92, 0xB1, 0x13, 0x8E, 0xB1, 0x0E, 0x8A, 
   0xB0, 0x09, 0x86, 0xB0, 0x04, 0x82, 0xB0, 0x00, 0x7F, 0xB0, 0xFC, 0x7B, 0xB0, 0xF7, 0x77, 0xB1, 
   0xF2, 0x73, 0xB1, 0xED, 0x6F, 0xB2, 0xE9, 0x6B, 0xB3, 0xE4, 0x67, 0xB5, 0xDF, 0x63, 0xB6, 0xDB, 
   0x60, 0xB8, 0xD7, 0x5C, 0xB9, 0xD2, 0x59, 0xBB, 0xCE, 0x55, 0xBE, 0xCA, 0x52, 0xC0, 0xC6, 0x4F, 
   0xC2, 0xC2, 0x4B, 0xC5, 0xBF, 0x48, 0xC8, 0xBB, 0x46, 0xCA, 0xB8, 0x43, 0xCD, 0xB5, 0x40, 0xD1, 
   0xB2, 0x3E, 0xD4, 0xAF, 0x3C, 0xD7, 0xAC, 0x39, 0xDB, 0xAA, 0x37, 0xDE, 0xA8, 0x36, 0xE2, 0xA6, 
   0x34, 0xE5, 0xA4, 0x33, 0xE9, 0xA3, 0x31, 0xED, 0xA1, 0x30, 0xF1, 0xA0, 0x2F, 0xF5, 0x9F, 0x2F, 
   0xF9, 0x9F, 0x2E, 0xFD, 0x9E, 0x2E, 0x00, 0x9E, 0x2E, 0x03, 0x9E, 0x2E, 0x07, 0x9F, 0x2E, 0x0B, 
   0x9F, 0x2F, 0x0F, 0xA0, 0x2F, 0x13, 0xA1, 0x30, 0x17, 0xA3, 0x31, 0x1B, 0xA4, 0x33, 0x1E, 0xA6, 
   0x34, 0x22, 0xA8, 0x36, 0x25, 0xAA, 0x37, 0x29, 0xAC, 0x39, 0x2C, 0xAF, 0x3C, 0x2F, 0xB2, 0x3E, 
   0x33, 0xB5, 0x40, 0x36, 0xB8, 0x43, 0x38, 0xBB, 0x46, 0x3B, 0xBF, 0x48, 0x3E, 0xC2, 0x4B, 0x40, 
   0xC6, 0x4F, 0x42, 0xCA, 0x52, 0x45, 0xCE, 0x55, 0x47, 0xD2, 0x59, 0x48, 0xD7, 0x5C, 0x4A, 0xDB, 
   0x60, 0x4B, 0xDF, 0x63, 0x4D, 0xE4, 0x67, 0x4E, 0xE9, 0x6B, 0x4F, 0xED, 0x6F, 0x4F, 0xF2, 0x73, 
   0x50, 0xF7, 0x77, 0x50, 0xFC, 0x7B, 0x55, 0x00, 0x7E, 0x55, 0x04, 0x83, 0x54, 0x09, 0x87, 0x54, 
   0x0D, 0x8B, 0x53, 0x12, 0x8F, 0x52, 0x16, 0x93, 0x51, 0x1B, 0x97, 0x50, 0x1F, 0x9B, 0x4E, 0x24, 
   0x9F, 0x4D, 0x28, 0xA3, 0x4B, 0x2C, 0xA7, 0x49, 0x30, 0xAA, 0x46, 0x34, 0xAE, 0x44, 0x38, 0xB1, 
   0x41, 0x3B, 0xB5, 0x3F, 0x3F, 0xB8, 0x3C, 0x42, 0xBB, 0x39, 0x45, 0xBE, 0x36, 0x48, 0xC0, 0x32, 
   0x4B, 0xC3, 0x2F, 0x4E, 0xC5, 0x2B, 0x50, 0xC8, 0x28, 0x52, 0xCA, 0x24, 0x55, 0xCC, 0x20, 0x56, 
   0xCD, 0x1C, 0x58, 0xCF, 0x18, 0x5A, 0xD0, 0x14, 0x5B, 0xD1, 0x10, 0x5C, 0xD2, 0x0C, 0x5D, 0xD3, 
   0x08, 0x5D, 0xD3, 0x04, 0x5D, 0xD4, 0x00, 0x5E, 0xD4, 0xFC, 0x5D, 0xD4, 0xF8, 0x5D, 0xD3, 0xF4, 
   0x5D, 0xD3, 0xF0, 0x5C, 0xD2, 0xEC, 0x5B, 0xD1, 0xE8, 0x5A, 0xD0, 0xE4, 0x58, 0xCF, 0xE0, 0x56, 
   0xCD, 0xDC, 0x55, 0xCC, 0xD8, 0x52, 0xCA, 0xD5, 0x50, 0xC8, 0xD1, 0x4E, 0xC5, 0xCE, 0x4B, 0xC3, 
   0xCA, 0x48, 0xC0, 0xC7, 0x45, 0xBE, 0xC4, 0x42, 0xBB, 0xC1, 0x3F, 0xB8, 0xBF, 0x3B, 0xB5, 0xBC, 
   0x38, 0xB1, 0xBA, 0x34, 0xAE, 0xB7, 0x30, 0xAA, 0xB5, 0x2C, 0xA7, 0xB3, 0x28, 0xA3, 0xB2, 0x24, 
   0x9F, 0xB0, 0x1F, 0x9B, 0xAF, 0x1B, 0x97, 0xAE, 0x16, 0x93, 0xAD, 0x12, 0x8F, 0xAC, 0x0D, 0x8B, 
   0xAC, 0x09, 0x87, 0xAB, 0x04, 0x83, 0xAB, 0x00, 0x7F, 0xAB, 0xFC, 0x7A, 0xAC, 0xF7, 0x76, 0xAC, 
   0xF3, 0x72, 0xAD, 0xEE, 0x6E, 0xAE, 0xEA, 0x6A, 0xAF, 0xE5, 0x66, 0xB0, 0xE1, 0x62, 0xB2, 0xDC, 
   0x5E, 0xB3, 0xD8, 0x5A, 0xB5, 0xD4, 0x56, 0xB7, 0xD0, 0x53, 0xBA, 0xCC, 0x4F, 0xBC, 0xC8, 0x4C, 
   0xBF, 0xC5, 0x48, 0xC1, 0xC1, 0x45, 0xC4, 0xBE, 0x42, 0xC7, 0xBB, 0x3F, 0xCA, 0xB8, 0x3D, 0xCE, 
   0xB5, 0x3A, 0xD1, 0xB2, 0x38, 0xD5, 0xB0, 0x35, 0xD8, 0xAE, 0x33, 0xDC, 0xAB, 0x31, 0xE0, 0xAA, 
   0x30, 0xE4, 0xA8, 0x2E, 0xE8, 0xA6, 0x2D, 0xEC, 0xA5, 0x2C, 0xF0, 0xA4, 0x2B, 0xF4, 0xA3, 0x2A, 
   0xF8, 0xA3, 0x2A, 0xFC, 0xA3, 0x29, 0x00, 0xA2, 0x29, 0x04, 0xA3, 0x29, 0x08, 0xA3, 0x2A, 0x0C, 
   0xA3, 0x2A, 0x10, 0xA4, 0x2B, 0x14, 0xA5, 0x2C, 0x18, 0xA6, 0x2D, 0x1C, 0xA8, 0x2E, 0x20, 0xAA, 
   0x30, 0x24, 0xAB, 0x31, 0x28, 0xAE, 0x33, 0x2B, 0xB0, 0x35, 0x2F, 0xB2, 0x38, 0x32, 0xB5, 0x3A, 
   0x36, 0xB8, 0x3D, 0x39, 0xBB, 0x3F, 0x3C, 0xBE, 0x42, 0x3F, 0xC1, 0x45, 0x41, 0xC5, 0x48, 0x44, 
   0xC8, 0x4C, 0x46, 0xCC, 0x4F, 0x49, 0xD0, 0x53, 0x4B, 0xD4, 0x56, 0x4D, 0xD8, 0x5A, 0x4E, 0xDC, 
   0x5E, 0x50, 0xE1, 0x62, 0x51, 0xE5, 0x66, 0x52, 0xEA, 0x6A, 0x53, 0xEE, 0x6E, 0x54, 0xF3, 0x72, 
   0x54, 0xF7, 0x76, 0x55, 0xFC, 0x7A, 0x59, 0x00, 0x7E, 0x59, 0x04, 0x83, 0x59, 0x08, 0x87, 0x58, 
   0x0D, 0x8C, 0x58, 0x11, 0x90, 0x57, 0x15, 0x94, 0x55, 0x1A, 0x99, 0x54, 0x1E, 0x9D, 0x52, 0x22, 
   0xA1, 0x51, 0x26, 0xA5, 0x4F, 0x2A, 0xA9, 0x4D, 0x2E, 0xAD, 0x4A, 0x31, 0xB0, 0x48, 0x35, 0xB4, 
   0x45, 0x38, 0xB7, 0x42, 0x3C, 0xBB, 0x3F, 0x3F, 0xBE, 0x3C, 0x42, 0xC1, 0x38, 0x45, 0xC4, 0x35, 
   0x48, 0xC7, 0x31, 0x4A, 0xC9, 0x2E, 0x4D, 0xCC, 0x2A, 0x4F, 0xCE, 0x26, 0x51, 0xD0, 0x22, 0x52, 
   0xD1, 0x1E, 0x54, 0xD3, 0x1A, 0x55, 0xD4, 0x15, 0x57, 0xD6, 0x11, 0x58, 0xD7, 0x0D, 0x58, 0xD7, 
   0x08, 0x59, 0xD8, 0x04, 0x59, 0xD8, 0x00, 0x59, 0xD8, 0xFC, 0x59, 0xD8, 0xF8, 0x59, 0xD8, 0xF3, 
   0x58, 0xD7, 0xEF, 0x58, 0xD7, 0xEB, 0x57, 0xD6, 0xE6, 0x55, 0xD4, 0xE2, 0x54, 0xD3, 0xDE, 0x52, 
   0xD1, 0xDA, 0x51, 0xD0, 0xD6, 0x4F, 0xCE, 0xD2, 0x4D, 0xCC, 0xCF, 0x4A, 0xC9, 0xCB, 0x48, 0xC7, 
   0xC8, 0x45, 0xC4, 0xC4, 0x42, 0xC1, 0xC1, 0x3F, 0xBE, 0xBE, 0x3C, 0xBB, 0xBB, 0x38, 0xB7, 0xB8, 
   0x35, 0xB4, 0xB6, 0x31, 0xB0, 0xB3, 0x2E, 0xAD, 0xB1, 0x2A, 0xA9, 0xAF, 0x26, 0xA5, 0xAE, 0x22, 
   0xA1, 0xAC, 0x1E, 0x9D, 0xAB, 0x1A, 0x99, 0xA9, 0x15, 0x94, 0xA8, 0x11, 0x90, 0xA8, 0x0D, 0x8C, 
   0xA7, 0x08, 0x87, 0xA7, 0x04, 0x83, 0xA7, 0x00, 0x7F, 0xA7, 0xFC, 0x7A, 0xA7, 0xF8, 0x76, 0xA8, 
   0xF3, 0x71, 0xA8, 0xEF, 0x6D, 0xA9, 0xEB, 0x69, 0xAB, 0xE6, 0x64, 0xAC, 0xE2, 0x60, 0xAE, 0xDE, 
   0x5C, 0xAF, 0xDA, 0x58, 0xB1, 0xD6, 0x54, 0xB3, 0xD2, 0x50, 0xB6, 0xCF, 0x4D, 0xB8, 0xCB, 0x49, 
   0xBB, 0xC8, 0x46, 0xBE, 0xC4, 0x42, 0xC1, 0xC1, 0x3F, 0xC4, 0xBE, 0x3C, 0xC8, 0xBB, 0x39, 0xCB, 
   0xB8, 0x36, 0xCF, 0xB6, 0x34, 0xD2, 0xB3, 0x31, 0xD6, 0xB1, 0x2F, 0xDA, 0xAF, 0x2D, 0xDE, 0xAE, 
   0x2C, 0xE2, 0xAC, 0x2A, 0xE6, 0xAB, 0x29, 0xEB, 0xA9, 0x27, 0xEF, 0xA8, 0x26, 0xF3, 0xA8, 0x26, 
   0xF8, 0xA7, 0x25, 0xFC, 0xA7, 0x25, 0x00, 0xA7, 0x25, 0x04, 0xA7, 0x25, 0x08, 0xA7, 0x25, 0x0D, 
   0xA8, 0x26, 0x11, 0xA8, 0x26, 0x15, 0xA9, 0x27, 0x1A, 0xAB, 0x29, 0x1E, 0xAC, 0x2A, 0x22, 0xAE, 
   0x2C, 0x26, 0xAF, 0x2D, 0x2A, 0xB1, 0x2F, 0x2E, 0xB3, 0x31, 0x31, 0xB6, 0x34, 0x35, 0xB8, 0x36, 
   0x38, 0xBB, 0x39, 0x3C, 0xBE, 0x3C, 0x3F, 0xC1, 0x3F, 0x42, 0xC4, 0x42, 0x45, 0xC8, 0x46, 0x48, 
   0xCB, 0x49, 0x4A, 0xCF, 0x4D, 0x4D, 0xD2, 0x50, 0x4F, 0xD6, 0x54, 0x51, 0xDA, 0x58, 0x52, 0xDE, 
   0x5C, 0x54, 0xE2, 0x60, 0x55, 0xE6, 0x64, 0x57, 0xEB, 0x69, 0x58, 0xEF, 0x6D, 0x58, 0xF3, 0x71, 
   0x59, 0xF8, 0x76, 0x59, 0xFC, 0x7A, 0x5E, 0x00, 0x7E, 0x5D, 0x04, 0x83, 0x5D, 0x08, 0x88, 0x5D, 
   0x0C, 0x8C, 0x5C, 0x10, 0x91, 0x5B, 0x14, 0x95, 0x5A, 0x18, 0x9A, 0x58, 0x1C, 0x9E, 0x56, 0x20, 
   0xA3, 0x55, 0x24, 0xA7, 0x52, 0x28, 0xAB, 0x50, 0x2B, 0xAF, 0x4E, 0x2F, 0xB3, 0x4B, 0x32, 0xB7, 
   0x48, 0x36, 0xBA, 0x45, 0x39, 0xBE, 0x42, 0x3C, 0xC1, 0x3F, 0x3F, 0xC4, 0x3B, 0x41, 0xC7, 0x38, 
   0x44, 0xCA, 0x34, 0x46, 0xCD, 0x30, 0x49, 0xCF, 0x2C, 0x4B, 0xD1, 0x28, 0x4D, 0xD4, 0x24, 0x4E, 
   0xD5, 0x1F, 0x50, 0xD7, 0x1B, 0x51, 0xD9, 0x16, 0x52, 0xDA, 0x12, 0x53, 0xDB, 0x0D, 0x54, 0xDC, 
   0x09, 0x54, 0xDC, 0x04, 0x55, 0xDC, 0x00, 0x55, 0xDD, 0xFC, 0x55, 0xDC, 0xF7, 0x54, 0xDC, 0xF3, 
   0x54, 0xDC, 0xEE, 0x53, 0xDB, 0xEA, 0x52, 0xDA, 0xE5, 0x51, 0xD9, 0xE1, 0x50, 0xD7, 0xDC, 0x4E, 
   0xD5, 0xD8, 0x4D, 0xD4, 0xD4, 0x4B, 0xD1, 0xD0, 0x49, 0xCF, 0xCC, 0x46, 0xCD, 0xC8, 0x44, 0xCA, 
   0xC5, 0x41, 0xC7, 0xC1, 0x3F, 0xC4, 0xBE, 0x3C, 0xC1, 0xBB, 0x39, 0xBE, 0xB8, 0x36, 0xBA, 0xB5, 
   0x32, 0xB7, 0xB2, 0x2F, 0xB3, 0xB0, 0x2B, 0xAF, 0xAE, 0x28, 0xAB, 0xAB, 0x24, 0xA7, 0xAA, 0x20, 
   0xA3, 0xA8, 0x1C, 0x9E, 0xA6, 0x18, 0x9A, 0xA5, 0x14, 0x95, 0xA4, 0x10, 0x91, 0xA3, 0x0C, 0x8C, 
   0xA3, 0x08, 0x88, 0xA3, 0x04, 0x83, 0xA2, 0x00, 0x7F, 0xA3, 0xFC, 0x7A, 0xA3, 0xF8, 0x75, 0xA3, 
   0xF4, 0x71, 0xA4, 0xF0, 0x6C, 0xA5, 0xEC, 0x68, 0xA6, 0xE8, 0x63, 0xA8, 0xE4, 0x5F, 0xAA, 0xE0, 
   0x5A, 0xAB, 0xDC, 0x56, 0xAE, 0xD8, 0x52, 0xB0, 0xD5, 0x4E, 0xB2, 0xD1, 0x4A, 0xB5, 0xCE, 0x46, 
   0xB8, 0xCA, 0x43, 0xBB, 0xC7, 0x3F, 0xBE, 0xC4, 0x3C, 0xC1, 0xC1, 0x39, 0xC5, 0xBF, 0x36, 0xC8, 
   0xBC, 0x33, 0xCC, 0xBA, 0x30, 0xD0, 0xB7, 0x2E, 0xD4, 0xB5, 0x2C, 0xD8, 0xB3, 0x29, 0xDC, 0xB2, 
   0x28, 0xE1, 0xB0, 0x26, 0xE5, 0xAF, 0x24, 0xEA, 0xAE, 0x23, 0xEE, 0xAD, 0x22, 0xF3, 0xAC, 0x21, 
   0xF7, 0xAC, 0x21, 0xFC, 0xAB, 0x21, 0x00, 0xAB, 0x20, 0x04, 0xAB, 0x21, 0x09, 0xAC, 0x21, 0x0D, 
   0xAC, 0x21, 0x12, 0xAD, 0x22, 0x16, 0xAE, 0x23, 0x1B, 0xAF, 0x24, 0x1F, 0xB0, 0x26, 0x24, 0xB2, 
   0x28, 0x28, 0xB3, 0x29, 0x2C, 0xB5, 0x2C, 0x30, 0xB7, 0x2E, 0x34, 0xBA, 0x30, 0x38, 0xBC, 0x33, 
   0x3B, 0xBF, 0x36, 0x3F, 0xC1, 0x39, 0x42, 0xC4, 0x3C, 0x45, 0xC7, 0x3F, 0x48, 0xCA, 0x43, 0x4B, 
   0xCE, 0x46, 0x4E, 0xD1, 0x4A, 0x50, 0xD5, 0x4E, 0x52, 0xD8, 0x52, 0x55, 0xDC, 0x56, 0x56, 0xE0, 
   0x5A, 0x58, 0xE4, 0x5F, 0x5A, 0xE8, 0x63, 0x5B, 0xEC, 0x68, 0x5C, 0xF0, 0x6C, 0x5D, 0xF4, 0x71, 
   0x5D, 0xF8, 0x75, 0x5D, 0xFC, 0x7A, 0x62, 0x00, 0x7E, 0x62, 0x03, 0x83, 0x61, 0x07, 0x88, 0x61, 
   0x0B, 0x8D, 0x60, 0x0F, 0x92, 0x5F, 0x13, 0x96, 0x5D, 0x17, 0x9B, 0x5C, 0x1B, 0xA0, 0x5A, 0x1E, 
   0xA4, 0x58, 0x22, 0xA8, 0x56, 0x25, 0xAD, 0x54, 0x29, 0xB1, 0x51, 0x2C, 0xB5, 0x4E, 0x2F, 0xB9, 
   0x4B, 0x33, 0xBD, 0x48, 0x36, 0xC0, 0x45, 0x38, 0xC4, 0x41, 0x3B, 0xC7, 0x3E, 0x3E, 0xCA, 0x3A, 
   0x40, 0xCD, 0x36, 0x42, 0xD0, 0x32, 0x45, 0xD3, 0x2E, 0x47, 0xD5, 0x29, 0x48, 0xD7, 0x25, 0x4A, 
   0xD9, 0x21, 0x4B, 0xDB, 0x1C, 0x4D, 0xDC, 0x17, 0x4E, 0xDE, 0x13, 0x4F, 0xDF, 0x0E, 0x4F, 0xE0, 
   0x09, 0x50, 0xE0, 0x04, 0x50, 0xE1, 0x00, 0x50, 0xE1, 0xFC, 0x50, 0xE1, 0xF7, 0x50, 0xE0, 0xF2, 
   0x4F, 0xE0, 0xED, 0x4F, 0xDF, 0xE9, 0x4E, 0xDE, 0xE4, 0x4D, 0xDC, 0xDF, 0x4B, 0xDB, 0xDB, 0x4A, 
   0xD9, 0xD7, 0x48, 0xD7, 0xD2, 0x47, 0xD5, 0xCE, 0x45, 0xD3, 0xCA, 0x42, 0xD0, 0xC6, 0x40, 0xCD, 
   0xC2, 0x3E, 0xCA, 0xBF, 0x3B, 0xC7, 0xBB, 0x38, 0xC4, 0xB8, 0x36, 0xC0, 0xB5, 0x33, 0xBD, 0xB2, 
   0x2F, 0xB9, 0xAF, 0x2C, 0xB5, 0xAC, 0x29, 0xB1, 0xAA, 0x25, 0xAD, 0xA8, 0x22, 0xA8, 0xA6, 0x1E, 
   0xA4, 0xA4, 0x1B, 0xA0, 0xA3, 0x17, 0x9B, 0xA1, 0x13, 0x96, 0xA0, 0x0F, 0x92, 0x9F, 0x0B, 0x8D, 
   0x9F, 0x07, 0x88, 0x9E, 0x03, 0x83, 0x9E, 0x00, 0x7F, 0x9E, 0xFD, 0x7A, 0x9F, 0xF9, 0x75, 0x9F, 
   0xF5, 0x70, 0xA0, 0xF1, 0x6B, 0xA1, 0xED, 0x67, 0xA3, 0xE9, 0x62, 0xA4, 0xE5, 0x5D, 0xA6, 0xE2, 
   0x59, 0xA8, 0xDE, 0x55, 0xAA, 0xDB, 0x50, 0xAC, 0xD7, 0x4C, 0xAF, 0xD4, 0x48, 0xB2, 0xD1, 0x44, 
   0xB5, 0xCD, 0x40, 0xB8, 0xCA, 0x3D, 0xBB, 0xC8, 0x39, 0xBF, 0xC5, 0x36, 0xC2, 0xC2, 0x33, 0xC6, 
   0xC0, 0x30, 0xCA, 0xBE, 0x2D, 0xCE, 0xBB, 0x2A, 0xD2, 0xB9, 0x28, 0xD7, 0xB8, 0x26, 0xDB, 0xB6, 
   0x24, 0xDF, 0xB5, 0x22, 0xE4, 0xB3, 0x21, 0xE9, 0xB2, 0x1F, 0xED, 0xB1, 0x1E, 0xF2, 0xB1, 0x1D, 
   0xF7, 0xB0, 0x1D, 0xFC, 0xB0, 0x1C, 0x00, 0xB0, 0x1C, 0x04, 0xB0, 0x1C, 0x09, 0xB0, 0x1D, 0x0E, 
   0xB1, 0x1D, 0x13, 0xB1, 0x1E, 0x17, 0xB2, 0x1F, 0x1C, 0xB3, 0x21, 0x21, 0xB5, 0x22, 0x25, 0xB6, 
   0x24, 0x29, 0xB8, 0x26, 0x2E, 0xB9, 0x28, 0x32, 0xBB, 0x2A, 0x36, 0xBE, 0x2D, 0x3A, 0xC0, 0x30, 
   0x3E, 0xC2, 0x33, 0x41, 0xC5, 0x36, 0x45, 0xC8, 0x39, 0x48, 0xCA, 0x3D, 0x4B, 0xCD, 0x40, 0x4E, 
   0xD1, 0x44, 0x51, 0xD4, 0x48, 0x54, 0xD7, 0x4C, 0x56, 0xDB, 0x50, 0x58, 0xDE, 0x55, 0x5A, 0xE2, 
   0x59, 0x5C, 0xE5, 0x5D, 0x5D, 0xE9, 0x62, 0x5F, 0xED, 0x67, 0x60, 0xF1, 0x6B, 0x61, 0xF5, 0x70, 
   0x61, 0xF9, 0x75, 0x62, 0xFD, 0x7A, 0x66, 0x00, 0x7E, 0x65, 0x03, 0x84, 0x65, 0x07, 0x88, 0x64, 
   0x0B, 0x8D, 0x64, 0x0E, 0x92, 0x62, 0x12, 0x97, 0x61, 0x15, 0x9C, 0x60, 0x19, 0xA1, 0x5E, 0x1C, 
   0xA6, 0x5C, 0x20, 0xAA, 0x59, 0x23, 0xAF, 0x57, 0x26, 0xB3, 0x54, 0x2A, 0xB7, 0x51, 0x2D, 0xBB, 
   0x4E, 0x2F, 0xBF, 0x4B, 0x32, 0xC3, 0x48, 0x35, 0xC7, 0x44, 0x38, 0xCA, 0x40, 0x3A, 0xCD, 0x3C, 
   0x3C, 0xD0, 0x38, 0x3E, 0xD3, 0x34, 0x40, 0xD6, 0x30, 0x42, 0xD8, 0x2B, 0x44, 0xDB, 0x27, 0x45, 
   0xDD, 0x22, 0x47, 0xDF, 0x1D, 0x48, 0xE0, 0x18, 0x49, 0xE1, 0x13, 0x4A, 0xE3, 0x0E, 0x4A, 0xE3, 
   0x09, 0x4B, 0xE4, 0x05, 0x4B, 0xE4, 0x00, 0x4B, 0xE5, 0xFB, 0x4B, 0xE4, 0xF7, 0x4B, 0xE4, 0xF2, 
   0x4A, 0xE3, 0xED, 0x4A, 0xE3, 0xE8, 0x49, 0xE1, 0xE3, 0x48, 0xE0, 0xDE, 0x47, 0xDF, 0xD9, 0x45, 
   0xDD, 0xD5, 0x44, 0xDB, 0xD0, 0x42, 0xD8, 0xCC, 0x40, 0xD6, 0xC8, 0x3E, 0xD3, 0xC4, 0x3C, 0xD0, 
   0xC0, 0x3A, 0xCD, 0xBC, 0x38, 0xCA, 0xB8, 0x35, 0xC7, 0xB5, 0x32, 0xC3, 0xB2, 0x2F, 0xBF, 0xAF, 
   0x2D, 0xBB, 0xAC, 0x2A, 0xB7, 0xA9, 0x26, 0xB3, 0xA7, 0x23, 0xAF, 0xA4, 0x20, 0xAA, 0xA2, 0x1C, 
   0xA6, 0xA0, 0x19, 0xA1, 0x9F, 0x15, 0x9C, 0x9E, 0x12, 0x97, 0x9C, 0x0E, 0x92, 0x9C, 0x0B, 0x8D, 
   0x9B, 0x07, 0x88, 0x9B, 0x03, 0x84, 0x9A, 0x00, 0x7F, 0x9B, 0xFD, 0x79, 0x9B, 0xF9, 0x75, 0x9C, 
   0xF5, 0x70, 0x9C, 0xF2, 0x6B, 0x9E, 0xEE, 0x66, 0x9F, 0xEB, 0x61, 0xA0, 0xE7, 0x5C, 0xA2, 0xE4, 
   0x57, 0xA4, 0xE0, 0x53, 0xA7, 0xDD, 0x4E, 0xA9, 0xDA, 0x4A, 0xAC, 0xD6, 0x46, 0xAF, 0xD3, 0x42, 
   0xB2, 0xD1, 0x3E, 0xB5, 0xCE, 0x3A, 0xB8, 0xCB, 0x36, 0xBC, 0xC8, 0x33, 0xC0, 0xC6, 0x30, 0xC4, 
   0xC4, 0x2D, 0xC8, 0xC2, 0x2A, 0xCC, 0xC0, 0x27, 0xD0, 0xBE, 0x25, 0xD5, 0xBC, 0x22, 0xD9, 0xBB, 
   0x20, 0xDE, 0xB9, 0x1E, 0xE3, 0xB8, 0x1D, 0xE8, 0xB7, 0x1C, 0xED, 0xB6, 0x1A, 0xF2, 0xB6, 0x1A, 
   0xF7, 0xB5, 0x19, 0xFB, 0xB5, 0x19, 0x00, 0xB5, 0x18, 0x05, 0xB5, 0x19, 0x09, 0xB5, 0x19, 0x0E, 
   0xB6, 0x1A, 0x13, 0xB6, 0x1A, 0x18, 0xB7, 0x1C, 0x1D, 0xB8, 0x1D, 0x22, 0xB9, 0x1E, 0x27, 0xBB, 
   0x20, 0x2B, 0xBC, 0x22, 0x30, 0xBE, 0x25, 0x34, 0xC0, 0x27, 0x38, 0xC2, 0x2A, 0x3C, 0xC4, 0x2D, 
   0x40, 0xC6, 0x30, 0x44, 0xC8, 0x33, 0x48, 0xCB, 0x36, 0x4B, 0xCE, 0x3A, 0x4E, 0xD1, 0x3E, 0x51, 
   0xD3, 0x42, 0x54, 0xD6, 0x46, 0x57, 0xDA, 0x4A, 0x59, 0xDD, 0x4E, 0x5C, 0xE0, 0x53, 0x5E, 0xE4, 
   0x57, 0x60, 0xE7, 0x5C, 0x61, 0xEB, 0x61, 0x62, 0xEE, 0x66, 0x64, 0xF2, 0x6B, 0x64, 0xF5, 0x70, 
   0x65, 0xF9, 0x75, 0x65, 0xFD, 0x79, 0x69, 0x00, 0x7E, 0x69, 0x03, 0x84, 0x69, 0x06, 0x89, 0x68, 
   0x0A, 0x8E, 0x67, 0x0D, 0x93, 0x66, 0x11, 0x98, 0x65, 0x14, 0x9D, 0x63, 0x17, 0xA2, 0x61, 0x1B, 
   0xA7, 0x5F, 0x1E, 0xAC, 0x5D, 0x21, 0xB0, 0x5A, 0x24, 0xB5, 0x57, 0x27, 0xB9, 0x54, 0x2A, 0xBD, 
   0x51, 0x2C, 0xC1, 0x4E, 0x2F, 0xC5, 0x4A, 0x31, 0xC9, 0x46, 0x34, 0xCD, 0x42, 0x36, 0xD0, 0x3E, 
   0x38, 0xD3, 0x3A, 0x3A, 0xD6, 0x36, 0x3C, 0xD9, 0x31, 0x3E, 0xDC, 0x2D, 0x3F, 0xDE, 0x28, 0x41, 
   0xE0, 0x23, 0x42, 0xE2, 0x1E, 0x43, 0xE4, 0x19, 0x44, 0xE5, 0x14, 0x45, 0xE6, 0x0F, 0x45, 0xE7, 
   0x0A, 0x46, 0xE8, 0x05, 0x46, 0xE8, 0x00, 0x46, 0xE8, 0xFB, 0x46, 0xE8, 0xF6, 0x46, 0xE8, 0xF1, 
   0x45, 0xE7, 0xEC, 0x45, 0xE6, 0xE7, 0x44, 0xE5, 0xE2, 0x43, 0xE4, 0xDD, 0x42, 0xE2, 0xD8, 0x41, 
   0xE0, 0xD3, 0x3F, 0xDE, 0xCF, 0x3E, 0xDC, 0xCA, 0x3C, 0xD9, 0xC6, 0x3A, 0xD6, 0xC2, 0x38, 0xD3, 
   0xBE, 0x36, 0xD0, 0xBA, 0x34, 0xCD, 0xB6, 0x31, 0xC9, 0xB2, 0x2F, 0xC5, 0xAF, 0x2C, 0xC1, 0xAC, 
   0x2A, 0xBD, 0xA9, 0x27, 0xB9, 0xA6, 0x24, 0xB5, 0xA3, 0x21, 0xB0, 0xA1, 0x1E, 0xAC, 0x9F, 0x1B, 
   0xA7, 0x9D, 0x17, 0xA2, 0x9B, 0x14, 0x9D, 0x9A, 0x11, 0x98, 0x99, 0x0D, 0x93, 0x98, 0x0A, 0x8E, 
   0x97, 0x06, 0x89, 0x97, 0x03, 0x84, 0x97, 0x00, 0x7F, 0x97, 0xFD, 0x79, 0x97, 0xFA, 0x74, 0x98, 
   0xF6, 0x6F, 0x99, 0xF3, 0x6A, 0x9A, 0xEF, 0x65, 0x9B, 0xEC, 0x60, 0x9D, 0xE9, 0x5B, 0x9F, 0xE5, 
   0x56, 0xA1, 0xE2, 0x51, 0xA3, 0xDF, 0x4D, 0xA6, 0xDC, 0x48, 0xA9, 0xD9, 0x44, 0xAC, 0xD6, 0x40, 
   0xAF, 0xD4, 0x3C, 0xB2, 0xD1, 0x38, 0xB6, 0xCF, 0x34, 0xBA, 0xCC, 0x30, 0xBE, 0xCA, 0x2D, 0xC2, 
   0xC8, 0x2A, 0xC6, 0xC6, 0x27, 0xCA, 0xC4, 0x24, 0xCF, 0xC2, 0x21, 0xD3, 0xC1, 0x1F, 0xD8, 0xBF, 
   0x1D, 0xDD, 0xBE, 0x1B, 0xE2, 0xBD, 0x19, 0xE7, 0xBC, 0x18, 0xEC, 0xBB, 0x17, 0xF1, 0xBB, 0x16, 
   0xF6, 0xBA, 0x15, 0xFB, 0xBA, 0x15, 0x00, 0xBA, 0x15, 0x05, 0xBA, 0x15, 0x0A, 0xBA, 0x15, 0x0F, 
   0xBB, 0x16, 0x14, 0xBB, 0x17, 0x19, 0xBC, 0x18, 0x1E, 0xBD, 0x19, 0x23, 0xBE, 0x1B, 0x28, 0xBF, 
   0x1D, 0x2D, 0xC1, 0x1F, 0x31, 0xC2, 0x21, 0x36, 0xC4, 0x24, 0x3A, 0xC6, 0x27, 0x3E, 0xC8, 0x2A, 
   0x42, 0xCA, 0x2D, 0x46, 0xCC, 0x30, 0x4A, 0xCF, 0x34, 0x4E, 0xD1, 0x38, 0x51, 0xD4, 0x3C, 0x54, 
   0xD6, 0x40, 0x57, 0xD9, 0x44, 0x5A, 0xDC, 0x48, 0x5D, 0xDF, 0x4D, 0x5F, 0xE2, 0x51, 0x61, 0xE5, 
   0x56, 0x63, 0xE9, 0x5B, 0x65, 0xEC, 0x60, 0x66, 0xEF, 0x65, 0x67, 0xF3, 0x6A, 0x68, 0xF6, 0x6F, 
   0x69, 0xFA, 0x74, 0x69, 0xFD, 0x79, 0x6C, 0x00, 0x7E, 0x6C, 0x03, 0x84, 0x6C, 0x06, 0x89, 0x6B, 
   0x09, 0x8E, 0x6A, 0x0C, 0x94, 0x69, 0x0F, 0x99, 0x68, 0x12, 0x9E, 0x66, 0x15, 0xA3, 0x64, 0x18, 
   0xA8, 0x62, 0x1B, 0xAD, 0x60, 0x1E, 0xB2, 0x5D, 0x21, 0xB7, 0x5A, 0x24, 0xBB, 0x57, 0x26, 0xBF, 
   0x54, 0x29, 0xC4, 0x50, 0x2B, 0xC8, 0x4D, 0x2E, 0xCC, 0x49, 0x30, 0xCF, 0x45, 0x32, 0xD3, 0x40, 
   0x34, 0xD6, 0x3C, 0x36, 0xD9, 0x38, 0x38, 0xDC, 0x33, 0x39, 0xDF, 0x2E, 0x3B, 0xE1, 0x29, 0x3C, 
   0xE3, 0x24, 0x3D, 0xE5, 0x1F, 0x3E, 0xE7, 0x1A, 0x3F, 0xE8, 0x15, 0x40, 0xE9, 0x0F, 0x40, 0xEA, 
   0x0A, 0x40, 0xEB, 0x05, 0x41, 0xEB, 0x00, 0x41, 0xEB, 0xFB, 0x41, 0xEB, 0xF6, 0x40, 0xEB, 0xF1, 
   0x40, 0xEA, 0xEB, 0x40, 0xE9, 0xE6, 0x3F, 0xE8, 0xE1, 0x3E, 0xE7, 0xDC, 0x3D, 0xE5, 0xD7, 0x3C, 
   0xE3, 0xD2, 0x3B, 0xE1, 0xCD, 0x39, 0xDF, 0xC8, 0x38, 0xDC, 0xC4, 0x36, 0xD9, 0xC0, 0x34, 0xD6, 
   0xBB, 0x32, 0xD3, 0xB7, 0x30, 0xCF, 0xB3, 0x2E, 0xCC, 0xB0, 0x2B, 0xC8, 0xAC, 0x29, 0xC4, 0xA9, 
   0x26, 0xBF, 0xA6, 0x24, 0xBB, 0xA3, 0x21, 0xB7, 0xA0, 0x1E, 0xB2, 0x9E, 0x1B, 0xAD, 0x9C, 0x18, 
   0xA8, 0x9A, 0x15, 0xA3, 0x98, 0x12, 0x9E, 0x97, 0x0F, 0x99, 0x96, 0x0C, 0x94, 0x95, 0x09, 0x8E, 
   0x94, 0x06, 0x89, 0x94, 0x03, 0x84, 0x94, 0x00, 0x7F, 0x94, 0xFD, 0x79, 0x94, 0xFA, 0x74, 0x95, 
   0xF7, 0x6F, 0x96, 0xF4, 0x69, 0x97, 0xF1, 0x64, 0x98, 0xEE, 0x5F, 0x9A, 0xEB, 0x5A, 0x9C, 0xE8, 
   0x55, 0x9E, 0xE5, 0x50, 0xA0, 0xE2, 0x4B, 0xA3, 0xDF, 0x46, 0xA6, 0xDC, 0x42, 0xA9, 0xDA, 0x3E, 
   0xAC, 0xD7, 0x39, 0xB0, 0xD5, 0x35, 0xB3, 0xD2, 0x31, 0xB7, 0xD0, 0x2E, 0xBB, 0xCE, 0x2A, 0xC0, 
   0xCC, 0x27, 0xC4, 0xCA, 0x24, 0xC8, 0xC8, 0x21, 0xCD, 0xC7, 0x1E, 0xD2, 0xC5, 0x1C, 0xD7, 0xC4, 
   0x1A, 0xDC, 0xC3, 0x18, 0xE1, 0xC2, 0x16, 0xE6, 0xC1, 0x15, 0xEB, 0xC0, 0x14, 0xF1, 0xC0, 0x13, 
   0xF6, 0xC0, 0x12, 0xFB, 0xBF, 0x12, 0x00, 0xBF, 0x12, 0x05, 0xBF, 0x12, 0x0A, 0xC0, 0x12, 0x0F, 
   0xC0, 0x13, 0x15, 0xC0, 0x14, 0x1A, 0xC1, 0x15, 0x1F, 0xC2, 0x16, 0x24, 0xC3, 0x18, 0x29, 0xC4, 
   0x1A, 0x2E, 0xC5, 0x1C, 0x33, 0xC7, 0x1E, 0x38, 0xC8, 0x21, 0x3C, 0xCA, 0x24, 0x40, 0xCC, 0x27, 
   0x45, 0xCE, 0x2A, 0x49, 0xD0, 0x2E, 0x4D, 0xD2, 0x31, 0x50, 0xD5, 0x35, 0x54, 0xD7, 0x39, 0x57, 
   0xDA, 0x3E, 0x5A, 0xDC, 0x42, 0x5D, 0xDF, 0x46, 0x60, 0xE2, 0x4B, 0x62, 0xE5, 0x50, 0x64, 0xE8, 
   0x55, 0x66, 0xEB, 0x5A, 0x68, 0xEE, 0x5F, 0x69, 0xF1, 0x64, 0x6A, 0xF4, 0x69, 0x6B, 0xF7, 0x6F, 
   0x6C, 0xFA, 0x74, 0x6C, 0xFD, 0x79, 0x70, 0x00, 0x7E, 0x6F, 0x02, 0x84, 0x6F, 0x05, 0x89, 0x6E, 
   0x08, 0x8F, 0x6D, 0x0B, 0x94, 0x6C, 0x0E, 0x9A, 0x6B, 0x11, 0x9F, 0x69, 0x14, 0xA4, 0x67, 0x16, 
   0xA9, 0x65, 0x19, 0xAE, 0x62, 0x1C, 0xB3, 0x60, 0x1E, 0xB8, 0x5D, 0x21, 0xBD, 0x59, 0x23, 0xC1, 
   0x56, 0x25, 0xC6, 0x52, 0x28, 0xCA, 0x4F, 0x2A, 0xCE, 0x4B, 0x2C, 0xD1, 0x47, 0x2E, 0xD5, 0x42, 
   0x30, 0xD8, 0x3E, 0x31, 0xDC, 0x39, 0x33, 0xDF, 0x34, 0x34, 0xE1, 0x2F, 0x36, 0xE4, 0x2A, 0x37, 
   0xE6, 0x25, 0x38, 0xE8, 0x20, 0x39, 0xEA, 0x1B, 0x3A, 0xEB, 0x15, 0x3A, 0xEC, 0x10, 0x3B, 0xED, 
   0x0A, 0x3B, 0xEE, 0x05, 0x3B, 0xEE, 0x00, 0x3B, 0xEF, 0xFB, 0x3B, 0xEE, 0xF6, 0x3B, 0xEE, 0xF0, 
   0x3B, 0xED, 0xEB, 0x3A, 0xEC, 0xE5, 0x3A, 0xEB, 0xE0, 0x39, 0xEA, 0xDB, 0x38, 0xE8, 0xD6, 0x37, 
   0xE6, 0xD1, 0x36, 0xE4, 0xCC, 0x34, 0xE1, 0xC7, 0x33, 0xDF, 0xC2, 0x31, 0xDC, 0xBE, 0x30, 0xD8, 
   0xB9, 0x2E, 0xD5, 0xB5, 0x2C, 0xD1, 0xB1, 0x2A, 0xCE, 0xAE, 0x28, 0xCA, 0xAA, 0x25, 0xC6, 0xA7, 
   0x23, 0xC1, 0xA3, 0x21, 0xBD, 0xA0, 0x1E, 0xB8, 0x9E, 0x1C, 0xB3, 0x9B, 0x19, 0xAE, 0x99, 0x16, 
   0xA9, 0x97, 0x14, 0xA4, 0x95, 0x11, 0x9F, 0x94, 0x0E, 0x9A, 0x93, 0x0B, 0x94, 0x92, 0x08, 0x8F, 
   0x91, 0x05, 0x89, 0x91, 0x02, 0x84, 0x90, 0x00, 0x7F, 0x91, 0xFE, 0x79, 0x91, 0xFB, 0x74, 0x92, 
   0xF8, 0x6E, 0x93, 0xF5, 0x69, 0x94, 0xF2, 0x63, 0x95, 0xEF, 0x5E, 0x97, 0xEC, 0x59, 0x99, 0xEA, 
   0x54, 0x9B, 0xE7, 0x4F, 0x9E, 0xE4, 0x4A, 0xA0, 0xE2, 0x45, 0xA3, 0xDF, 0x40, 0xA7, 0xDD, 0x3C, 
   0xAA, 0xDB, 0x37, 0xAE, 0xD8, 0x33, 0xB1, 0xD6, 0x2F, 0xB5, 0xD4, 0x2C, 0xB9, 0xD2, 0x28, 0xBE, 
   0xD0, 0x25, 0xC2, 0xCF, 0x21, 0xC7, 0xCD, 0x1E, 0xCC, 0xCC, 0x1C, 0xD1, 0xCA, 0x19, 0xD6, 0xC9, 
   0x17, 0xDB, 0xC8, 0x15, 0xE0, 0xC7, 0x13, 0xE5, 0xC6, 0x12, 0xEB, 0xC6, 0x11, 0xF0, 0xC5, 0x10, 
   0xF6, 0xC5, 0x0F, 0xFB, 0xC5, 0x0F, 0x00, 0xC5, 0x0E, 0x05, 0xC5, 0x0F, 0x0A, 0xC5, 0x0F, 0x10, 
   0xC5, 0x10, 0x15, 0xC6, 0x11, 0x1B, 0xC6, 0x12, 0x20, 0xC7, 0x13, 0x25, 0xC8, 0x15, 0x2A, 0xC9, 
   0x17, 0x2F, 0xCA, 0x19, 0x34, 0xCC, 0x1C, 0x39, 0xCD, 0x1E, 0x3E, 0xCF, 0x21, 0x42, 0xD0, 0x25, 
   0x47, 0xD2, 0x28, 0x4B, 0xD4, 0x2C, 0x4F, 0xD6, 0x2F, 0x52, 0xD8, 0x33, 0x56, 0xDB, 0x37, 0x59, 
   0xDD, 0x3C, 0x5D, 0xDF, 0x40, 0x60, 0xE2, 0x45, 0x62, 0xE4, 0x4A, 0x65, 0xE7, 0x4F, 0x67, 0xEA, 
   0x54, 0x69, 0xEC, 0x59, 0x6B, 0xEF, 0x5E, 0x6C, 0xF2, 0x63, 0x6D, 0xF5, 0x69, 0x6E, 0xF8, 0x6E, 
   0x6F, 0xFB, 0x74, 0x6F, 0xFE, 0x79, 0x72, 0x00, 0x7E, 0x72, 0x02, 0x84, 0x72, 0x05, 0x8A, 0x71, 
   0x07, 0x8F, 0x70, 0x0A, 0x95, 0x6F, 0x0D, 0x9A, 0x6D, 0x0F, 0xA0, 0x6C, 0x12, 0xA5, 0x6A, 0x14, 
   0xAA, 0x67, 0x17, 0xB0, 0x65, 0x19, 0xB5, 0x62, 0x1B, 0xBA, 0x5F, 0x1E, 0xBE, 0x5C, 0x20, 0xC3, 
   0x58, 0x22, 0xC7, 0x55, 0x24, 0xCC, 0x51, 0x26, 0xD0, 0x4D, 0x28, 0xD4, 0x48, 0x29, 0xD7, 0x44, 
   0x2B, 0xDB, 0x3F, 0x2D, 0xDE, 0x3B, 0x2E, 0xE1, 0x36, 0x2F, 0xE4, 0x31, 0x31, 0xE6, 0x2B, 0x32, 
   0xE9, 0x26, 0x33, 0xEB, 0x21, 0x33, 0xEC, 0x1B, 0x34, 0xEE, 0x16, 0x35, 0xEF, 0x10, 0x35, 0xF0, 
   0x0B, 0x36, 0xF1, 0x05, 0x36, 0xF1, 0x00, 0x36, 0xF1, 0xFB, 0x36, 0xF1, 0xF5, 0x36, 0xF1, 0xF0, 
   0x35, 0xF0, 0xEA, 0x35, 0xEF, 0xE5, 0x34, 0xEE, 0xDF, 0x33, 0xEC, 0xDA, 0x33, 0xEB, 0xD5, 0x32, 
   0xE9, 0xCF, 0x31, 0xE6, 0xCA, 0x2F, 0xE4, 0xC5, 0x2E, 0xE1, 0xC1, 0x2D, 0xDE, 0xBC, 0x2B, 0xDB, 
   0xB8, 0x29, 0xD7, 0xB3, 0x28, 0xD4, 0xAF, 0x26, 0xD0, 0xAB, 0x24, 0xCC, 0xA8, 0x22, 0xC7, 0xA4, 
   0x20, 0xC3, 0xA1, 0x1E, 0xBE, 0x9E, 0x1B, 0xBA, 0x9B, 0x19, 0xB5, 0x99, 0x17, 0xB0, 0x96, 0x14, 
   0xAA, 0x94, 0x12, 0xA5, 0x93, 0x0F, 0xA0, 0x91, 0x0D, 0x9A, 0x90, 0x0A, 0x95, 0x8F, 0x07, 0x8F, 
   0x8E, 0x05, 0x8A, 0x8E, 0x02, 0x84, 0x8E, 0x00, 0x7F, 0x8E, 0xFE, 0x79, 0x8E, 0xFB, 0x73, 0x8F, 
   0xF9, 0x6E, 0x90, 0xF6, 0x68, 0x91, 0xF3, 0x63, 0x93, 0xF1, 0x5D, 0x94, 0xEE, 0x58, 0x96, 0xEC, 
   0x53, 0x99, 0xE9, 0x4D, 0x9B, 0xE7, 0x48, 0x9E, 0xE5, 0x43, 0xA1, 0xE2, 0x3F, 0xA4, 0xE0, 0x3A, 
   0xA8, 0xDE, 0x36, 0xAB, 0xDC, 0x31, 0xAF, 0xDA, 0x2D, 0xB3, 0xD8, 0x29, 0xB8, 0xD7, 0x26, 0xBC, 
   0xD5, 0x22, 0xC1, 0xD3, 0x1F, 0xC5, 0xD2, 0x1C, 0xCA, 0xD1, 0x19, 0xCF, 0xCF, 0x17, 0xD5, 0xCE, 
   0x14, 0xDA, 0xCD, 0x12, 0xDF, 0xCD, 0x11, 0xE5, 0xCC, 0x0F, 0xEA, 0xCB, 0x0E, 0xF0, 0xCB, 0x0D, 
   0xF5, 0xCA, 0x0C, 0xFB, 0xCA, 0x0C, 0x00, 0xCA, 0x0C, 0x05, 0xCA, 0x0C, 0x0B, 0xCA, 0x0C, 0x10, 
   0xCB, 0x0D, 0x16, 0xCB, 0x0E, 0x1B, 0xCC, 0x0F, 0x21, 0xCD, 0x11, 0x26, 0xCD, 0x12, 0x2B, 0xCE, 
   0x14, 0x31, 0xCF, 0x17, 0x36, 0xD1, 0x19, 0x3B, 0xD2, 0x1C, 0x3F, 0xD3, 0x1F, 0x44, 0xD5, 0x22, 
   0x48, 0xD7, 0x26, 0x4D, 0xD8, 0x29, 0x51, 0xDA, 0x2D, 0x55, 0xDC, 0x31, 0x58, 0xDE, 0x36, 0x5C, 
   0xE0, 0x3A, 0x5F, 0xE2, 0x3F, 0x62, 0xE5, 0x43, 0x65, 0xE7, 0x48, 0x67, 0xE9, 0x4D, 0x6A, 0xEC, 
   0x53, 0x6C, 0xEE, 0x58, 0x6D, 0xF1, 0x5D, 0x6F, 0xF3, 0x63, 0x70, 0xF6, 0x68, 0x71, 0xF9, 0x6E, 
   0x72, 0xFB, 0x73, 0x72, 0xFE, 0x79, 0x75, 0x00, 0x7E, 0x75, 0x02, 0x84, 0x74, 0x04, 0x8A, 0x74, 
   0x07, 0x90, 0x73, 0x09, 0x95, 0x71, 0x0B, 0x9B, 0x70, 0x0E, 0xA1, 0x6E, 0x10, 0xA6, 0x6C, 0x12, 
   0xAB, 0x6A, 0x14, 0xB1, 0x67, 0x16, 0xB6, 0x64, 0x18, 0xBB, 0x61, 0x1B, 0xC0, 0x5E, 0x1C, 0xC4, 
   0x5A, 0x1E, 0xC9, 0x56, 0x20, 0xCD, 0x52, 0x22, 0xD1, 0x4E, 0x24, 0xD5, 0x4A, 0x25, 0xD9, 0x45, 
   0x27, 0xDD, 0x41, 0x28, 0xE0, 0x3C, 0x29, 0xE3, 0x37, 0x2A, 0xE6, 0x32, 0x2B, 0xE9, 0x2C, 0x2C, 
   0xEB, 0x27, 0x2D, 0xED, 0x22, 0x2E, 0xEF, 0x1C, 0x2F, 0xF0, 0x16, 0x2F, 0xF2, 0x11, 0x30, 0xF3, 
   0x0B, 0x30, 0xF3, 0x05, 0x30, 0xF4, 0x00, 0x30, 0xF4, 0xFB, 0x30, 0xF4, 0xF5, 0x30, 0xF3, 0xEF, 
   0x30, 0xF3, 0xEA, 0x2F, 0xF2, 0xE4, 0x2F, 0xF0, 0xDE, 0x2E, 0xEF, 0xD9, 0x2D, 0xED, 0xD4, 0x2C, 
   0xEB, 0xCE, 0x2B, 0xE9, 0xC9, 0x2A, 0xE6, 0xC4, 0x29, 0xE3, 0xBF, 0x28, 0xE0, 0xBB, 0x27, 0xDD, 
   0xB6, 0x25, 0xD9, 0xB2, 0x24, 0xD5, 0xAE, 0x22, 0xD1, 0xAA, 0x20, 0xCD, 0xA6, 0x1E, 0xC9, 0xA2, 
   0x1C, 0xC4, 0x9F, 0x1B, 0xC0, 0x9C, 0x18, 0xBB, 0x99, 0x16, 0xB6, 0x96, 0x14, 0xB1, 0x94, 0x12, 
   0xAB, 0x92, 0x10, 0xA6, 0x90, 0x0E, 0xA1, 0x8F, 0x0B, 0x9B, 0x8D, 0x09, 0x95, 0x8C, 0x07, 0x90, 
   0x8C, 0x04, 0x8A, 0x8B, 0x02, 0x84, 0x8B, 0x00, 0x7F, 0x8B, 0xFE, 0x79, 0x8C, 0xFC, 0x73, 0x8C, 
   0xF9, 0x6D, 0x8D, 0xF7, 0x68, 0x8F, 0xF5, 0x62, 0x90, 0xF2, 0x5C, 0x92, 0xF0, 0x57, 0x94, 0xEE, 
   0x52, 0x96, 0xEC, 0x4C, 0x99, 0xEA, 0x47, 0x9C, 0xE8, 0x42, 0x9F, 0xE5, 0x3D, 0xA2, 0xE4, 0x39, 
   0xA6, 0xE2, 0x34, 0xAA, 0xE0, 0x30, 0xAE, 0xDE, 0x2C, 0xB2, 0xDC, 0x28, 0xB6, 0xDB, 0x24, 0xBB, 
   0xD9, 0x20, 0xBF, 0xD8, 0x1D, 0xC4, 0xD7, 0x1A, 0xC9, 0xD6, 0x17, 0xCE, 0xD5, 0x14, 0xD4, 0xD4, 
   0x12, 0xD9, 0xD3, 0x10, 0xDE, 0xD2, 0x0E, 0xE4, 0xD1, 0x0D, 0xEA, 0xD1, 0x0B, 0xEF, 0xD0, 0x0A, 
   0xF5, 0xD0, 0x0A, 0xFB, 0xD0, 0x09, 0x00, 0xD0, 0x09, 0x05, 0xD0, 0x09, 0x0B, 0xD0, 0x0A, 0x11, 
   0xD0, 0x0A, 0x16, 0xD1, 0x0B, 0x1C, 0xD1, 0x0D, 0x22, 0xD2, 0x0E, 0x27, 0xD3, 0x10, 0x2C, 0xD4, 
   0x12, 0x32, 0xD5, 0x14, 0x37, 0xD6, 0x17, 0x3C, 0xD7, 0x1A, 0x41, 0xD8, 0x1D, 0x45, 0xD9, 0x20, 
   0x4A, 0xDB, 0x24, 0x4E, 0xDC, 0x28, 0x52, 0xDE, 0x2C, 0x56, 0xE0, 0x30, 0x5A, 0xE2, 0x34, 0x5E, 
   0xE4, 0x39, 0x61, 0xE5, 0x3D, 0x64, 0xE8, 0x42, 0x67, 0xEA, 0x47, 0x6A, 0xEC, 0x4C, 0x6C, 0xEE, 
   0x52, 0x6E, 0xF0, 0x57, 0x70, 0xF2, 0x5C, 0x71, 0xF5, 0x62, 0x73, 0xF7, 0x68, 0x74, 0xF9, 0x6D, 
   0x74, 0xFC, 0x73, 0x75, 0xFE, 0x79, 0x77, 0x00, 0x7E, 0x77, 0x02, 0x84, 0x77, 0x04, 0x8A, 0x76, 
   0x06, 0x90, 0x75, 0x08, 0x96, 0x73, 0x0A, 0x9C, 0x72, 0x0C, 0xA1, 0x70, 0x0E, 0xA7, 0x6E, 0x10, 
   0xAC, 0x6C, 0x12, 0xB2, 0x69, 0x14, 0xB7, 0x66, 0x15, 0xBC, 0x63, 0x17, 0xC1, 0x60, 0x19, 0xC6, 
   0x5C, 0x1B, 0xCA, 0x58, 0x1C, 0xCF, 0x54, 0x1E, 0xD3, 0x50, 0x1F, 0xD7, 0x4B, 0x21, 0xDB, 0x47, 
   0x22, 0xDF, 0x42, 0x23, 0xE2, 0x3D, 0x24, 0xE5, 0x38, 0x25, 0xE8, 0x33, 0x26, 0xEB, 0x2D, 0x27, 
   0xED, 0x28, 0x28, 0xEF, 0x22, 0x28, 0xF1, 0x1D, 0x29, 0xF2, 0x17, 0x29, 0xF4, 0x11, 0x2A, 0xF5, 
   0x0B, 0x2A, 0xF6, 0x05, 0x2A, 0xF6, 0x00, 0x2A, 0xF6, 0xFB, 0x2A, 0xF6, 0xF5, 0x2A, 0xF6, 0xEF, 
   0x2A, 0xF5, 0xE9, 0x29, 0xF4, 0xE3, 0x29, 0xF2, 0xDE, 0x28, 0xF1, 0xD8, 0x28, 0xEF, 0xD3, 0x27, 
   0xED, 0xCD, 0x26, 0xEB, 0xC8, 0x25, 0xE8, 0xC3, 0x24, 0xE5, 0xBE, 0x23, 0xE2, 0xB9, 0x22, 0xDF, 
   0xB5, 0x21, 0xDB, 0xB0, 0x1F, 0xD7, 0xAC, 0x1E, 0xD3, 0xA8, 0x1C, 0xCF, 0xA4, 0x1B, 0xCA, 0xA0, 
   0x19, 0xC6, 0x9D, 0x17, 0xC1, 0x9A, 0x15, 0xBC, 0x97, 0x14, 0xB7, 0x94, 0x12, 0xB2, 0x92, 0x10, 
   0xAC, 0x90, 0x0E, 0xA7, 0x8E, 0x0C, 0xA1, 0x8D, 0x0A, 0x9C, 0x8B, 0x08, 0x96, 0x8A, 0x06, 0x90, 
   0x89, 0x04, 0x8A, 0x89, 0x02, 0x84, 0x89, 0x00, 0x7F, 0x89, 0xFE, 0x79, 0x89, 0xFC, 0x73, 0x8A, 
   0xFA, 0x6D, 0x8B, 0xF8, 0x67, 0x8D, 0xF6, 0x61, 0x8E, 0xF4, 0x5C, 0x90, 0xF2, 0x56, 0x92, 0xF0, 
   0x51, 0x94, 0xEE, 0x4B, 0x97, 0xEC, 0x46, 0x9A, 0xEB, 0x41, 0x9D, 0xE9, 0x3C, 0xA0, 0xE7, 0x37, 
   0xA4, 0xE5, 0x33, 0xA8, 0xE4, 0x2E, 0xAC, 0xE2, 0x2A, 0xB0, 0xE1, 0x26, 0xB5, 0xDF, 0x22, 0xB9, 
   0xDE, 0x1E, 0xBE, 0xDD, 0x1B, 0xC3, 0xDC, 0x18, 0xC8, 0xDB, 0x15, 0xCD, 0xDA, 0x12, 0xD3, 0xD9, 
   0x10, 0xD8, 0xD8, 0x0E, 0xDE, 0xD8, 0x0C, 0xE3, 0xD7, 0x0B, 0xE9, 0xD7, 0x09, 0xEF, 0xD6, 0x08, 
   0xF5, 0xD6, 0x07, 0xFB, 0xD6, 0x07, 0x00, 0xD6, 0x07, 0x05, 0xD6, 0x07, 0x0B, 0xD6, 0x07, 0x11, 
   0xD6, 0x08, 0x17, 0xD7, 0x09, 0x1D, 0xD7, 0x0B, 0x22, 0xD8, 0x0C, 0x28, 0xD8, 0x0E, 0x2D, 0xD9, 
   0x10, 0x33, 0xDA, 0x12, 0x38, 0xDB, 0x15, 0x3D, 0xDC, 0x18, 0x42, 0xDD, 0x1B, 0x47, 0xDE, 0x1E, 
   0x4B, 0xDF, 0x22, 0x50, 0xE1, 0x26, 0x54, 0xE2, 0x2A, 0x58, 0xE4, 0x2E, 0x5C, 0xE5, 0x33, 0x60, 
   0xE7, 0x37, 0x63, 0xE9, 0x3C, 0x66, 0xEB, 0x41, 0x69, 0xEC, 0x46, 0x6C, 0xEE, 0x4B, 0x6E, 0xF0, 
   0x51, 0x70, 0xF2, 0x56, 0x72, 0xF4, 0x5C, 0x73, 0xF6, 0x61, 0x75, 0xF8, 0x67, 0x76, 0xFA, 0x6D, 
   0x77, 0xFC, 0x73, 0x77, 0xFE, 0x79, 0x79, 0x00, 0x7E, 0x79, 0x01, 0x84, 0x78, 0x03, 0x8A, 0x78, 
   0x05, 0x90, 0x77, 0x07, 0x96, 0x75, 0x08, 0x9C, 0x74, 0x0A, 0xA2, 0x72, 0x0C, 0xA7, 0x70, 0x0E, 
   0xAD, 0x6D, 0x0F, 0xB2, 0x6B, 0x11, 0xB8, 0x68, 0x12, 0xBD, 0x65, 0x14, 0xC2, 0x61, 0x15, 0xC7, 
   0x5D, 0x17, 0xCC, 0x5A, 0x18, 0xD0, 0x55, 0x1A, 0xD4, 0x51, 0x1B, 0xD9, 0x4D, 0x1C, 0xDC, 0x48, 
   0x1D, 0xE0, 0x43, 0x1E, 0xE4, 0x3E, 0x1F, 0xE7, 0x39, 0x20, 0xEA, 0x33, 0x21, 0xEC, 0x2E, 0x22, 
   0xEF, 0x28, 0x22, 0xF1, 0x23, 0x23, 0xF3, 0x1D, 0x23, 0xF4, 0x17, 0x24, 0xF6, 0x11, 0x24, 0xF7, 
   0x0B, 0x24, 0xF7, 0x05, 0x24, 0xF8, 0x00, 0x24, 0xF8, 0xFB, 0x24, 0xF8, 0xF5, 0x24, 0xF7, 0xEF, 
   0x24, 0xF7, 0xE9, 0x24, 0xF6, 0xE3, 0x23, 0xF4, 0xDD, 0x23, 0xF3, 0xD8, 0x22, 0xF1, 0xD2, 0x22, 
   0xEF, 0xCD, 0x21, 0xEC, 0xC7, 0x20, 0xEA, 0xC2, 0x1F, 0xE7, 0xBD, 0x1E, 0xE4, 0xB8, 0x1D, 0xE0, 
   0xB3, 0x1C, 0xDC, 0xAF, 0x1B, 0xD9, 0xAB, 0x1A, 0xD4, 0xA6, 0x18, 0xD0, 0xA3, 0x17, 0xCC, 0x9F, 
   0x15, 0xC7, 0x9B, 0x14, 0xC2, 0x98, 0x12, 0xBD, 0x95, 0x11, 0xB8, 0x93, 0x0F, 0xB2, 0x90, 0x0E, 
   0xAD, 0x8E, 0x0C, 0xA7, 0x8C, 0x0A, 0xA2, 0x8B, 0x08, 0x9C, 0x89, 0x07, 0x96, 0x88, 0x05, 0x90, 
   0x88, 0x03, 0x8A, 0x87, 0x01, 0x84, 0x87, 0x00, 0x7F, 0x87, 0xFF, 0x79, 0x88, 0xFD, 0x73, 0x88, 
   0xFB, 0x6D, 0x89, 0xF9, 0x67, 0x8B, 0xF8, 0x61, 0x8C, 0xF6, 0x5B, 0x8E, 0xF4, 0x56, 0x90, 0xF2, 
   0x50, 0x93, 0xF1, 0x4B, 0x95, 0xEF, 0x45, 0x98, 0xEE, 0x40, 0x9B, 0xEC, 0x3B, 0x9F, 0xEB, 0x36, 
   0xA3, 0xE9, 0x31, 0xA6, 0xE8, 0x2D, 0xAB, 0xE6, 0x29, 0xAF, 0xE5, 0x24, 0xB3, 0xE4, 0x21, 0xB8, 
   0xE3, 0x1D, 0xBD, 0xE2, 0x19, 0xC2, 0xE1, 0x16, 0xC7, 0xE0, 0x13, 0xCD, 0xDF, 0x11, 0xD2, 0xDE, 
   0x0E, 0xD8, 0xDE, 0x0C, 0xDD, 0xDD, 0x0A, 0xE3, 0xDD, 0x09, 0xE9, 0xDC, 0x07, 0xEF, 0xDC, 0x06, 
   0xF5, 0xDC, 0x06, 0xFB, 0xDC, 0x05, 0x00, 0xDC, 0x05, 0x05, 0xDC, 0x05, 0x0B, 0xDC, 0x06, 0x11, 
   0xDC, 0x06, 0x17, 0xDC, 0x07, 0x1D, 0xDD, 0x09, 0x23, 0xDD, 0x0A, 0x28, 0xDE, 0x0C, 0x2E, 0xDE, 
   0x0E, 0x33, 0xDF, 0x11, 0x39, 0xE0, 0x13, 0x3E, 0xE1, 0x16, 0x43, 0xE2, 0x19, 0x48, 0xE3, 0x1D, 
   0x4D, 0xE4, 0x21, 0x51, 0xE5, 0x24, 0x55, 0xE6, 0x29, 0x5A, 0xE8, 0x2D, 0x5D, 0xE9, 0x31, 0x61, 
   0xEB, 0x36, 0x65, 0xEC, 0x3B, 0x68, 0xEE, 0x40, 0x6B, 0xEF, 0x45, 0x6D, 0xF1, 0x4B, 0x70, 0xF2, 
   0x50, 0x72, 0xF4, 0x56, 0x74, 0xF6, 0x5B, 0x75, 0xF8, 0x61, 0x77, 0xF9, 0x67, 0x78, 0xFB, 0x6D, 
   0x78, 0xFD, 0x73, 0x79, 0xFF, 0x79, 0x7B, 0x00, 0x7E, 0x7B, 0x01, 0x85, 0x7A, 0x03, 0x8B, 0x79, 
   0x04, 0x91, 0x78, 0x06, 0x97, 0x77, 0x07, 0x9C, 0x75, 0x08, 0xA2, 0x73, 0x0A, 0xA8, 0x71, 0x0B, 
   0xAE, 0x6F, 0x0D, 0xB3, 0x6C, 0x0E, 0xB9, 0x69, 0x0F, 0xBE, 0x66, 0x11, 0xC3, 0x62, 0x12, 0xC8, 
   0x5F, 0x13, 0xCD, 0x5B, 0x14, 0xD1, 0x57, 0x15, 0xD6, 0x52, 0x16, 0xDA, 0x4E, 0x17, 0xDE, 0x49, 
   0x18, 0xE1, 0x44, 0x19, 0xE5, 0x3F, 0x1A, 0xE8, 0x3A, 0x1B, 0xEB, 0x34, 0x1B, 0xEE, 0x2F, 0x1C, 
   0xF0, 0x29, 0x1D, 0xF2, 0x23, 0x1D, 0xF4, 0x1D, 0x1D, 0xF6, 0x18, 0x1E, 0xF7, 0x12, 0x1E, 0xF8, 
   0x0C, 0x1E, 0xF9, 0x06, 0x1E, 0xFA, 0x00, 0x1E, 0xFA, 0xFA, 0x1E, 0xFA, 0xF4, 0x1E, 0xF9, 0xEE, 
   0x1E, 0xF8, 0xE8, 0x1E, 0xF7, 0xE3, 0x1D, 0xF6, 0xDD, 0x1D, 0xF4, 0xD7, 0x1D, 0xF2, 0xD1, 0x1C, 
   0xF0, 0xCC, 0x1B, 0xEE, 0xC6, 0x1B, 0xEB, 0xC1, 0x1A, 0xE8, 0xBC, 0x19, 0xE5, 0xB7, 0x18, 0xE1, 
   0xB2, 0x17, 0xDE, 0xAE, 0x16, 0xDA, 0xA9, 0x15, 0xD6, 0xA5, 0x14, 0xD1, 0xA1, 0x13, 0xCD, 0x9E, 
   0x12, 0xC8, 0x9A, 0x11, 0xC3, 0x97, 0x0F, 0xBE, 0x94, 0x0E, 0xB9, 0x91, 0x0D, 0xB3, 0x8F, 0x0B, 
   0xAE, 0x8D, 0x0A, 0xA8, 0x8B, 0x08, 0xA2, 0x89, 0x07, 0x9C, 0x88, 0x06, 0x97, 0x87, 0x04, 0x91, 
   0x86, 0x03, 0x8B, 0x85, 0x01, 0x85, 0x85, 0x00, 0x7F, 0x85, 0xFF, 0x78, 0x86, 0xFD, 0x72, 0x87, 
   0xFC, 0x6C, 0x88, 0xFA, 0x66, 0x89, 0xF9, 0x61, 0x8B, 0xF8, 0x5B, 0x8D, 0xF6, 0x55, 0x8F, 0xF5, 
   0x4F, 0x91, 0xF3, 0x4A, 0x94, 0xF2, 0x44, 0x97, 0xF1, 0x3F, 0x9A, 0xEF, 0x3A, 0x9E, 0xEE, 0x35, 
   0xA1, 0xED, 0x30, 0xA5, 0xEC, 0x2C, 0xA9, 0xEB, 0x27, 0xAE, 0xEA, 0x23, 0xB2, 0xE9, 0x1F, 0xB7, 
   0xE8, 0x1C, 0xBC, 0xE7, 0x18, 0xC1, 0xE6, 0x15, 0xC6, 0xE5, 0x12, 0xCC, 0xE5, 0x0F, 0xD1, 0xE4, 
   0x0D, 0xD7, 0xE3, 0x0B, 0xDD, 0xE3, 0x09, 0xE3, 0xE3, 0x07, 0xE8, 0xE2, 0x06, 0xEE, 0xE2, 0x05, 
   0xF4, 0xE2, 0x04, 0xFA, 0xE2, 0x03, 0x00, 0xE2, 0x03, 0x06, 0xE2, 0x03, 0x0C, 0xE2, 0x04, 0x12, 
   0xE2, 0x05, 0x18, 0xE2, 0x06, 0x1D, 0xE3, 0x07, 0x23, 0xE3, 0x09, 0x29, 0xE3, 0x0B, 0x2F, 0xE4, 
   0x0D, 0x34, 0xE5, 0x0F, 0x3A, 0xE5, 0x12, 0x3F, 0xE6, 0x15, 0x44, 0xE7, 0x18, 0x49, 0xE8, 0x1C, 
   0x4E, 0xE9, 0x1F, 0x52, 0xEA, 0x23, 0x57, 0xEB, 0x27, 0x5B, 0xEC, 0x2C, 0x5F, 0xED, 0x30, 0x62, 
   0xEE, 0x35, 0x66, 0xEF, 0x3A, 0x69, 0xF1, 0x3F, 0x6C, 0xF2, 0x44, 0x6F, 0xF3, 0x4A, 0x71, 0xF5, 
   0x4F, 0x73, 0xF6, 0x55, 0x75, 0xF8, 0x5B, 0x77, 0xF9, 0x61, 0x78, 0xFA, 0x66, 0x79, 0xFC, 0x6C, 
   0x7A, 0xFD, 0x72, 0x7B, 0xFF, 0x78, 0x7C, 0x00, 0x7E, 0x7C, 0x01, 0x85, 0x7B, 0x02, 0x8B, 0x7B, 
   0x03, 0x91, 0x7A, 0x04, 0x97, 0x78, 0x06, 0x9D, 0x77, 0x07, 0xA3, 0x75, 0x08, 0xA8, 0x73, 0x09, 
   0xAE, 0x70, 0x0A, 0xB4, 0x6D, 0x0B, 0xB9, 0x6A, 0x0C, 0xBF, 0x67, 0x0D, 0xC4, 0x64, 0x0E, 0xC9, 
   0x60, 0x0F, 0xCE, 0x5C, 0x10, 0xD2, 0x58, 0x11, 0xD7, 0x53, 0x12, 0xDB, 0x4F, 0x13, 0xDF, 0x4A, 
   0x13, 0xE3, 0x45, 0x14, 0xE6, 0x40, 0x15, 0xE9, 0x3A, 0x15, 0xEC, 0x35, 0x16, 0xEF, 0x2F, 0x16, 
   0xF2, 0x29, 0x17, 0xF4, 0x24, 0x17, 0xF6, 0x1E, 0x18, 0xF7, 0x18, 0x18, 0xF9, 0x12, 0x18, 0xFA, 
   0x0C, 0x18, 0xFA, 0x06, 0x18, 0xFB, 0x00, 0x18, 0xFB, 0xFA, 0x18, 0xFB, 0xF4, 0x18, 0xFA, 0xEE, 
   0x18, 0xFA, 0xE8, 0x18, 0xF9, 0xE2, 0x18, 0xF7, 0xDC, 0x17, 0xF6, 0xD7, 0x17, 0xF4, 0xD1, 0x16, 
   0xF2, 0xCB, 0x16, 0xEF, 0xC6, 0x15, 0xEC, 0xC0, 0x15, 0xE9, 0xBB, 0x14, 0xE6, 0xB6, 0x13, 0xE3, 
   0xB1, 0x13, 0xDF, 0xAD, 0x12, 0xDB, 0xA8, 0x11, 0xD7, 0xA4, 0x10, 0xD2, 0xA0, 0x0F, 0xCE, 0x9C, 
   0x0E, 0xC9, 0x99, 0x0D, 0xC4, 0x96, 0x0C, 0xBF, 0x93, 0x0B, 0xB9, 0x90, 0x0A, 0xB4, 0x8D, 0x09, 
   0xAE, 0x8B, 0x08, 0xA8, 0x89, 0x07, 0xA3, 0x88, 0x06, 0x9D, 0x86, 0x04, 0x97, 0x85, 0x03, 0x91, 
   0x85, 0x02, 0x8B, 0x84, 0x01, 0x85, 0x84, 0x00, 0x7F, 0x84, 0xFF, 0x78, 0x85, 0xFE, 0x72, 0x85, 
   0xFD, 0x6C, 0x86, 0xFC, 0x66, 0x88, 0xFA, 0x60, 0x89, 0xF9, 0x5A, 0x8B, 0xF8, 0x55, 0x8D, 0xF7, 
   0x4F, 0x90, 0xF6, 0x49, 0x93, 0xF5, 0x44, 0x96, 0xF4, 0x3E, 0x99, 0xF3, 0x39, 0x9C, 0xF2, 0x34, 
   0xA0, 0xF1, 0x2F, 0xA4, 0xF0, 0x2B, 0xA8, 0xEF, 0x26, 0xAD, 0xEE, 0x22, 0xB1, 0xED, 0x1E, 0xB6, 
   0xED, 0x1A, 0xBB, 0xEC, 0x17, 0xC0, 0xEB, 0x14, 0xC6, 0xEB, 0x11, 0xCB, 0xEA, 0x0E, 0xD1, 0xEA, 
   0x0B, 0xD7, 0xE9, 0x09, 0xDC, 0xE9, 0x07, 0xE2, 0xE8, 0x06, 0xE8, 0xE8, 0x04, 0xEE, 0xE8, 0x03, 
   0xF4, 0xE8, 0x03, 0xFA, 0xE8, 0x02, 0x00, 0xE8, 0x02, 0x06, 0xE8, 0x02, 0x0C, 0xE8, 0x03, 0x12, 
   0xE8, 0x03, 0x18, 0xE8, 0x04, 0x1E, 0xE8, 0x06, 0x24, 0xE9, 0x07, 0x29, 0xE9, 0x09, 0x2F, 0xEA, 
   0x0B, 0x35, 0xEA, 0x0E, 0x3A, 0xEB, 0x11, 0x40, 0xEB, 0x14, 0x45, 0xEC, 0x17, 0x4A, 0xED, 0x1A, 
   0x4F, 0xED, 0x1E, 0x53, 0xEE, 0x22, 0x58, 0xEF, 0x26, 0x5C, 0xF0, 0x2B, 0x60, 0xF1, 0x2F, 0x64, 
   0xF2, 0x34, 0x67, 0xF3, 0x39, 0x6A, 0xF4, 0x3E, 0x6D, 0xF5, 0x44, 0x70, 0xF6, 0x49, 0x73, 0xF7, 
   0x4F, 0x75, 0xF8, 0x55, 0x77, 0xF9, 0x5A, 0x78, 0xFA, 0x60, 0x7A, 0xFC, 0x66, 0x7B, 0xFD, 0x6C, 
   0x7B, 0xFE, 0x72, 0x7C, 0xFF, 0x78, 0x7D, 0x00, 0x7E, 0x7D, 0x00, 0x85, 0x7D, 0x01, 0x8B, 0x7C, 
   0x02, 0x91, 0x7B, 0x03, 0x97, 0x79, 0x04, 0x9D, 0x78, 0x05, 0xA3, 0x76, 0x06, 0xA9, 0x74, 0x07, 
   0xAF, 0x71, 0x07, 0xB4, 0x6E, 0x08, 0xBA, 0x6B, 0x09, 0xBF, 0x68, 0x0A, 0xC4, 0x64, 0x0B, 0xC9, 
   0x61, 0x0B, 0xCE, 0x5D, 0x0C, 0xD3, 0x58, 0x0D, 0xD7, 0x54, 0x0D, 0xDC, 0x4F, 0x0E, 0xE0, 0x4A, 
   0x0E, 0xE3, 0x45, 0x0F, 0xE7, 0x40, 0x0F, 0xEA, 0x3B, 0x10, 0xED, 0x35, 0x10, 0xF0, 0x30, 0x11, 
   0xF3, 0x2A, 0x11, 0xF5, 0x24, 0x11, 0xF7, 0x1E, 0x12, 0xF8, 0x18, 0x12, 0xFA, 0x12, 0x12, 0xFB, 
   0x0C, 0x12, 0xFC, 0x06, 0x12, 0xFC, 0x00, 0x12, 0xFC, 0xFA, 0x12, 0xFC, 0xF4, 0x12, 0xFC, 0xEE, 
   0x12, 0xFB, 0xE8, 0x12, 0xFA, 0xE2, 0x12, 0xF8, 0xDC, 0x11, 0xF7, 0xD6, 0x11, 0xF5, 0xD0, 0x11, 
   0xF3, 0xCB, 0x10, 0xF0, 0xC5, 0x10, 0xED, 0xC0, 0x0F, 0xEA, 0xBB, 0x0F, 0xE7, 0xB6, 0x0E, 0xE3, 
   0xB1, 0x0E, 0xE0, 0xAC, 0x0D, 0xDC, 0xA8, 0x0D, 0xD7, 0xA3, 0x0C, 0xD3, 0x9F, 0x0B, 0xCE, 0x9C, 
   0x0B, 0xC9, 0x98, 0x0A, 0xC4, 0x95, 0x09, 0xBF, 0x92, 0x08, 0xBA, 0x8F, 0x07, 0xB4, 0x8C, 0x07, 
   0xAF, 0x8A, 0x06, 0xA9, 0x88, 0x05, 0xA3, 0x87, 0x04, 0x9D, 0x85, 0x03, 0x97, 0x84, 0x02, 0x91, 
   0x83, 0x01, 0x8B, 0x83, 0x00, 0x85, 0x83, 0x00, 0x7F, 0x83, 0x00, 0x78, 0x83, 0xFF, 0x72, 0x84, 
   0xFE, 0x6C, 0x85, 0xFD, 0x66, 0x87, 0xFC, 0x60, 0x88, 0xFB, 0x5A, 0x8A, 0xFA, 0x54, 0x8C, 0xF9, 
   0x4E, 0x8F, 0xF9, 0x49, 0x92, 0xF8, 0x43, 0x95, 0xF7, 0x3E, 0x98, 0xF6, 0x39, 0x9C, 0xF5, 0x34, 
   0x9F, 0xF5, 0x2F, 0xA3, 0xF4, 0x2A, 0xA8, 0xF3, 0x26, 0xAC, 0xF3, 0x21, 0xB1, 0xF2, 0x1D, 0xB6, 
   0xF2, 0x1A, 0xBB, 0xF1, 0x16, 0xC0, 0xF1, 0x13, 0xC5, 0xF0, 0x10, 0xCB, 0xF0, 0x0D, 0xD0, 0xEF, 
   0x0A, 0xD6, 0xEF, 0x08, 0xDC, 0xEF, 0x06, 0xE2, 0xEE, 0x05, 0xE8, 0xEE, 0x03, 0xEE, 0xEE, 0x02, 
   0xF4, 0xEE, 0x01, 0xFA, 0xEE, 0x01, 0x00, 0xEE, 0x01, 0x06, 0xEE, 0x01, 0x0C, 0xEE, 0x01, 0x12, 
   0xEE, 0x02, 0x18, 0xEE, 0x03, 0x1E, 0xEE, 0x05, 0x24, 0xEF, 0x06, 0x2A, 0xEF, 0x08, 0x30, 0xEF, 
   0x0A, 0x35, 0xF0, 0x0D, 0x3B, 0xF0, 0x10, 0x40, 0xF1, 0x13, 0x45, 0xF1, 0x16, 0x4A, 0xF2, 0x1A, 
   0x4F, 0xF2, 0x1D, 0x54, 0xF3, 0x21, 0x58, 0xF3, 0x26, 0x5D, 0xF4, 0x2A, 0x61, 0xF5, 0x2F, 0x64, 
   0xF5, 0x34, 0x68, 0xF6, 0x39, 0x6B, 0xF7, 0x3E, 0x6E, 0xF8, 0x43, 0x71, 0xF9, 0x49, 0x74, 0xF9, 
   0x4E, 0x76, 0xFA, 0x54, 0x78, 0xFB, 0x5A, 0x79, 0xFC, 0x60, 0x7B, 0xFD, 0x66, 0x7C, 0xFE, 0x6C, 
   0x7D, 0xFF, 0x72, 0x7D, 0x00, 0x78, 0x7E, 0x00, 0x7E, 0x7E, 0x00, 0x85, 0x7D, 0x01, 0x8B, 0x7D, 
   0x01, 0x91, 0x7B, 0x02, 0x97, 0x7A, 0x03, 0x9D, 0x78, 0x03, 0xA3, 0x77, 0x04, 0xA9, 0x74, 0x04, 
   0xAF, 0x72, 0x05, 0xB5, 0x6F, 0x05, 0xBA, 0x6C, 0x06, 0xBF, 0x69, 0x06, 0xC5, 0x65, 0x07, 0xCA, 
   0x61, 0x07, 0xCF, 0x5D, 0x08, 0xD3, 0x59, 0x08, 0xD8, 0x54, 0x09, 0xDC, 0x50, 0x09, 0xE0, 0x4B, 
   0x09, 0xE4, 0x46, 0x0A, 0xE8, 0x40, 0x0A, 0xEB, 0x3B, 0x0A, 0xEE, 0x36, 0x0B, 0xF1, 0x30, 0x0B, 
   0xF3, 0x2A, 0x0B, 0xF6, 0x24, 0x0B, 0xF7, 0x1E, 0x0C, 0xF9, 0x18, 0x0C, 0xFA, 0x12, 0x0C, 0xFC, 
   0x0C, 0x0C, 0xFC, 0x06, 0x0C, 0xFD, 0x00, 0x0C, 0xFD, 0xFA, 0x0C, 0xFD, 0xF4, 0x0C, 0xFC, 0xEE, 
   0x0C, 0xFC, 0xE8, 0x0C, 0xFA, 0xE2, 0x0C, 0xF9, 0xDC, 0x0B, 0xF7, 0xD6, 0x0B, 0xF6, 0xD0, 0x0B, 
   0xF3, 0xCA, 0x0B, 0xF1, 0xC5, 0x0A, 0xEE, 0xC0, 0x0A, 0xEB, 0xBA, 0x0A, 0xE8, 0xB5, 0x09, 0xE4, 
   0xB0, 0x09, 0xE0, 0xAC, 0x09, 0xDC, 0xA7, 0x08, 0xD8, 0xA3, 0x08, 0xD3, 0x9F, 0x07, 0xCF, 0x9B, 
   0x07, 0xCA, 0x97, 0x06, 0xC5, 0x94, 0x06, 0xBF, 0x91, 0x05, 0xBA, 0x8E, 0x05, 0xB5, 0x8C, 0x04, 
   0xAF, 0x89, 0x04, 0xA9, 0x88, 0x03, 0xA3, 0x86, 0x03, 0x9D, 0x85, 0x02, 0x97, 0x83, 0x01, 0x91, 
   0x83, 0x01, 0x8B, 0x82, 0x00, 0x85, 0x82, 0x00, 0x7F, 0x82, 0x00, 0x78, 0x83, 0xFF, 0x72, 0x83, 
   0xFF, 0x6C, 0x85, 0xFE, 0x66, 0x86, 0xFD, 0x60, 0x88, 0xFD, 0x5A, 0x89, 0xFC, 0x54, 0x8C, 0xFC, 
   0x4E, 0x8E, 0xFB, 0x48, 0x91, 0xFB, 0x43, 0x94, 0xFA, 0x3E, 0x97, 0xFA, 0x38, 0x9B, 0xF9, 0x33, 
   0x9F, 0xF9, 0x2E, 0xA3, 0xF8, 0x2A, 0xA7, 0xF8, 0x25, 0xAC, 0xF7, 0x21, 0xB0, 0xF7, 0x1D, 0xB5, 
   0xF7, 0x19, 0xBA, 0xF6, 0x15, 0xC0, 0xF6, 0x12, 0xC5, 0xF6, 0x0F, 0xCA, 0xF5, 0x0C, 0xD0, 0xF5, 
   0x0A, 0xD6, 0xF5, 0x07, 0xDC, 0xF5, 0x06, 0xE2, 0xF4, 0x04, 0xE8, 0xF4, 0x03, 0xEE, 0xF4, 0x01, 
   0xF4, 0xF4, 0x01, 0xFA, 0xF4, 0x00, 0x00, 0xF4, 0x00, 0x06, 0xF4, 0x00, 0x0C, 0xF4, 0x01, 0x12, 
   0xF4, 0x01, 0x18, 0xF4, 0x03, 0x1E, 0xF4, 0x04, 0x24, 0xF5, 0x06, 0x2A, 0xF5, 0x07, 0x30, 0xF5, 
   0x0A, 0x36, 0xF5, 0x0C, 0x3B, 0xF6, 0x0F, 0x40, 0xF6, 0x12, 0x46, 0xF6, 0x15, 0x4B, 0xF7, 0x19, 
   0x50, 0xF7, 0x1D, 0x54, 0xF7, 0x21, 0x59, 0xF8, 0x25, 0x5D, 0xF8, 0x2A, 0x61, 0xF9, 0x2E, 0x65, 
   0xF9, 0x33, 0x69, 0xFA, 0x38, 0x6C, 0xFA, 0x3E, 0x6F, 0xFB, 0x43, 0x72, 0xFB, 0x48, 0x74, 0xFC, 
   0x4E, 0x77, 0xFC, 0x54, 0x78, 0xFD, 0x5A, 0x7A, 0xFD, 0x60, 0x7B, 0xFE, 0x66, 0x7D, 0xFF, 0x6C, 
   0x7D, 0xFF, 0x72, 0x7E, 0x00, 0x78, 0x7E, 0x00, 0x7E, 0x7E, 0x00, 0x85, 0x7E, 0x00, 0x8B, 0x7D, 
   0x00, 0x91, 0x7C, 0x01, 0x97, 0x7B, 0x01, 0x9D, 0x79, 0x01, 0xA3, 0x77, 0x02, 0xA9, 0x75, 0x02, 
   0xAF, 0x72, 0x02, 0xB5, 0x6F, 0x02, 0xBA, 0x6C, 0x03, 0xC0, 0x69, 0x03, 0xC5, 0x65, 0x03, 0xCA, 
   0x62, 0x03, 0xCF, 0x5D, 0x04, 0xD4, 0x59, 0x04, 0xD8, 0x55, 0x04, 0xDC, 0x50, 0x04, 0xE1, 0x4B, 
   0x05, 0xE4, 0x46, 0x05, 0xE8, 0x41, 0x05, 0xEB, 0x3B, 0x05, 0xEE, 0x36, 0x05, 0xF1, 0x30, 0x05, 
   0xF4, 0x2A, 0x05, 0xF6, 0x24, 0x05, 0xF8, 0x1E, 0x06, 0xFA, 0x18, 0x06, 0xFB, 0x12, 0x06, 0xFC, 
   0x0C, 0x06, 0xFD, 0x06, 0x06, 0xFD, 0x00, 0x06, 0xFD, 0xFA, 0x06, 0xFD, 0xF4, 0x06, 0xFD, 0xEE, 
   0x06, 0xFC, 0xE8, 0x06, 0xFB, 0xE2, 0x06, 0xFA, 0xDC, 0x05, 0xF8, 0xD6, 0x05, 0xF6, 0xD0, 0x05, 
   0xF4, 0xCA, 0x05, 0xF1, 0xC5, 0x05, 0xEE, 0xBF, 0x05, 0xEB, 0xBA, 0x05, 0xE8, 0xB5, 0x05, 0xE4, 
   0xB0, 0x04, 0xE1, 0xAB, 0x04, 0xDC, 0xA7, 0x04, 0xD8, 0xA3, 0x04, 0xD4, 0x9E, 0x03, 0xCF, 0x9B, 
   0x03, 0xCA, 0x97, 0x03, 0xC5, 0x94, 0x03, 0xC0, 0x91, 0x02, 0xBA, 0x8E, 0x02, 0xB5, 0x8B, 0x02, 
   0xAF, 0x89, 0x02, 0xA9, 0x87, 0x01, 0xA3, 0x85, 0x01, 0x9D, 0x84, 0x01, 0x97, 0x83, 0x00, 0x91, 
   0x82, 0x00, 0x8B, 0x82, 0x00, 0x85, 0x82, 0x00, 0x7F, 0x82, 0x00, 0x78, 0x82, 0x00, 0x72, 0x83, 
   0x00, 0x6C, 0x84, 0xFF, 0x66, 0x85, 0xFF, 0x60, 0x87, 0xFF, 0x5A, 0x89, 0xFE, 0x54, 0x8B, 0xFE, 
   0x4E, 0x8E, 0xFE, 0x48, 0x91, 0xFE, 0x43, 0x94, 0xFD, 0x3D, 0x97, 0xFD, 0x38, 0x9B, 0xFD, 0x33, 
   0x9E, 0xFD, 0x2E, 0xA3, 0xFC, 0x29, 0xA7, 0xFC, 0x25, 0xAB, 0xFC, 0x21, 0xB0, 0xFC, 0x1C, 0xB5, 
   0xFB, 0x19, 0xBA, 0xFB, 0x15, 0xBF, 0xFB, 0x12, 0xC5, 0xFB, 0x0F, 0xCA, 0xFB, 0x0C, 0xD0, 0xFB, 
   0x09, 0xD6, 0xFB, 0x07, 0xDC, 0xFB, 0x05, 0xE2, 0xFA, 0x03, 0xE8, 0xFA, 0x02, 0xEE, 0xFA, 0x01, 
   0xF4, 0xFA, 0x00, 0xFA, 0xFA, 0x00, 0x00, 0xFA, 0x00, 0x06, 0xFA, 0x00, 0x0C, 0xFA, 0x00, 0x12, 
   0xFA, 0x01, 0x18, 0xFA, 0x02, 0x1E, 0xFA, 0x03, 0x24, 0xFB, 0x05, 0x2A, 0xFB, 0x07, 0x30, 0xFB, 
   0x09, 0x36, 0xFB, 0x0C, 0x3B, 0xFB, 0x0F, 0x41, 0xFB, 0x12, 0x46, 0xFB, 0x15, 0x4B, 0xFB, 0x19, 
   0x50, 0xFC, 0x1C, 0x55, 0xFC, 0x21, 0x59, 0xFC, 0x25, 0x5D, 0xFC, 0x29, 0x62, 0xFD, 0x2E, 0x65, 
   0xFD, 0x33, 0x69, 0xFD, 0x38, 0x6C, 0xFD, 0x3D, 0x6F, 0xFE, 0x43, 0x72, 0xFE, 0x48, 0x75, 0xFE, 
   0x4E, 0x77, 0xFE, 0x54, 0x79, 0xFF, 0x5A, 0x7B, 0xFF, 0x60, 0x7C, 0xFF, 0x66, 0x7D, 0x00, 0x6C, 
   0x7E, 0x00, 0x72, 0x7E, 0x00, 0x78, 0x7F, 0x00, 0x7E, 0x7E, 0x00, 0x85, 0x7E, 0x00, 0x8B, 0x7D, 
   0x00, 0x91, 0x7C, 0x00, 0x97, 0x7B, 0x00, 0x9D, 0x79, 0x00, 0xA3, 0x77, 0x00, 0xA9, 0x75, 0x00, 
   0xAF, 0x72, 0x00, 0xB5, 0x70, 0x00, 0xBA, 0x6C, 0x00, 0xC0, 0x69, 0x00, 0xC5, 0x66, 0x00, 0xCA, 
   0x62, 0x00, 0xCF, 0x5E, 0x00, 0xD4, 0x59, 0x00, 0xD8, 0x55, 0x00, 0xDD, 0x50, 0x00, 0xE1, 0x4B, 
   0x00, 0xE5, 0x46, 0x00, 0xE8, 0x41, 0x00, 0xEB, 0x3B, 0x00, 0xEF, 0x36, 0x00, 0xF1, 0x30, 0x00, 
   0xF4, 0x2A, 0x00, 0xF6, 0x24, 0x00, 0xF8, 0x1E, 0x00, 0xFA, 0x18, 0x00, 0xFB, 0x12, 0x00, 0xFC, 
   0x0C, 0x00, 0xFD, 0x06, 0x00, 0xFD, 0x00, 0x00, 0xFE, 0xFA, 0x00, 0xFD, 0xF4, 0x00, 0xFD, 0xEE, 
   0x00, 0xFC, 0xE8, 0x00, 0xFB, 0xE2, 0x00, 0xFA, 0xDC, 0x00, 0xF8, 0xD6, 0x00, 0xF6, 0xD0, 0x00, 
   0xF4, 0xCA, 0x00, 0xF1, 0xC5, 0x00, 0xEF, 0xBF, 0x00, 0xEB, 0xBA, 0x00, 0xE8, 0xB5, 0x00, 0xE5, 
   0xB0, 0x00, 0xE1, 0xAB, 0x00, 0xDD, 0xA7, 0x00, 0xD8, 0xA2, 0x00, 0xD4, 0x9E, 0x00, 0xCF, 0x9A, 
   0x00, 0xCA, 0x97, 0x00, 0xC5, 0x94, 0x00, 0xC0, 0x90, 0x00, 0xBA, 0x8E, 0x00, 0xB5, 0x8B, 0x00, 
   0xAF, 0x89, 0x00, 0xA9, 0x87, 0x00, 0xA3, 0x85, 0x00, 0x9D, 0x84, 0x00, 0x97, 0x83, 0x00, 0x91, 
   0x82, 0x00, 0x8B, 0x82, 0x00, 0x85, 0x81, 0x00, 0x7F, 0x82, 0x00, 0x78, 0x82, 0x00, 0x72, 0x83, 
   0x00, 0x6C, 0x84, 0x00, 0x66, 0x85, 0x00, 0x60, 0x87, 0x00, 0x5A, 0x89, 0x00, 0x54, 0x8B, 0x00, 
   0x4E, 0x8E, 0x00, 0x48, 0x90, 0x00, 0x43, 0x94, 0x00, 0x3D, 0x97, 0x00, 0x38, 0x9A, 0x00, 0x33, 
   0x9E, 0x00, 0x2E, 0xA2, 0x00, 0x29, 0xA7, 0x00, 0x25, 0xAB, 0x00, 0x20, 0xB0, 0x00, 0x1C, 0xB5, 
   0x00, 0x18, 0xBA, 0x00, 0x15, 0xBF, 0x00, 0x12, 0xC5, 0x00, 0x0E, 0xCA, 0x00, 0x0C, 0xD0, 0x00, 
   0x09, 0xD6, 0x00, 0x07, 0xDC, 0x00, 0x05, 0xE2, 0x00, 0x03, 0xE8, 0x00, 0x02, 0xEE, 0x00, 0x01, 
   0xF4, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x12, 
   0x00, 0x01, 0x18, 0x00, 0x02, 0x1E, 0x00, 0x03, 0x24, 0x00, 0x05, 0x2A, 0x00, 0x07, 0x30, 0x00, 
   0x09, 0x36, 0x00, 0x0C, 0x3B, 0x00, 0x0E, 0x41, 0x00, 0x12, 0x46, 0x00, 0x15, 0x4B, 0x00, 0x18, 
   0x50, 0x00, 0x1C, 0x55, 0x00, 0x20, 0x59, 0x00, 0x25, 0x5E, 0x00, 0x29, 0x62, 0x00, 0x2E, 0x66, 
   0x00, 0x33, 0x69, 0x00, 0x38, 0x6C, 0x00, 0x3D, 0x70, 0x00, 0x43, 0x72, 0x00, 0x48, 0x75, 0x00, 
   0x4E, 0x77, 0x00, 0x54, 0x79, 0x00, 0x5A, 0x7B, 0x00, 0x60, 0x7C, 0x00, 0x66, 0x7D, 0x00, 0x6C, 
   0x7E, 0x00, 0x72, 0x7E, 0x00, 0x78, 0x7E, 0x00, 0x7E, 0x7E, 0x00, 0x85, 0x7E, 0x00, 0x8B, 0x7D, 
   0x00, 0x91, 0x7C, 0xFF, 0x97, 0x7B, 0xFF, 0x9D, 0x79, 0xFF, 0xA3, 0x77, 0xFE, 0xA9, 0x75, 0xFE, 
   0xAF, 0x72, 0xFE, 0xB5, 0x6F, 0xFE, 0xBA, 0x6C, 0xFD, 0xC0, 0x69, 0xFD, 0xC5, 0x65, 0xFD, 0xCA, 
   0x62, 0xFD, 0xCF, 0x5D, 0xFC, 0xD4, 0x59, 0xFC, 0xD8, 0x55, 0xFC, 0xDC, 0x50, 0xFC, 0xE1, 0x4B, 
   0xFB, 0xE4, 0x46, 0xFB, 0xE8, 0x41, 0xFB, 0xEB, 0x3B, 0xFB, 0xEE, 0x36, 0xFB, 0xF1, 0x30, 0xFB, 
   0xF4, 0x2A, 0xFB, 0xF6, 0x24, 0xFB, 0xF8, 0x1E, 0xFA, 0xFA, 0x18, 0xFA, 0xFB, 0x12, 0xFA, 0xFC, 
   0x0C, 0xFA, 0xFD, 0x06, 0xFA, 0xFD, 0x00, 0xFA, 0xFD, 0xFA, 0xFA, 0xFD, 0xF4, 0xFA, 0xFD, 0xEE, 
   0xFA, 0xFC, 0xE8, 0xFA, 0xFB, 0xE2, 0xFA, 0xFA, 0xDC, 0xFB, 0xF8, 0xD6, 0xFB, 0xF6, 0xD0, 0xFB, 
   0xF4, 0xCA, 0xFB, 0xF1, 0xC5, 0xFB, 0xEE, 0xBF, 0xFB, 0xEB, 0xBA, 0xFB, 0xE8, 0xB5, 0xFB, 0xE4, 
   0xB0, 0xFC, 0xE1, 0xAB, 0xFC, 0xDC, 0xA7, 0xFC, 0xD8, 0xA3, 0xFC, 0xD4, 0x9E, 0xFD, 0xCF, 0x9B, 
   0xFD, 0xCA, 0x97, 0xFD, 0xC5, 0x94, 0xFD, 0xC0, 0x91, 0xFE, 0xBA, 0x8E, 0xFE, 0xB5, 0x8B, 0xFE, 
   0xAF, 0x89, 0xFE, 0xA9, 0x87, 0xFF, 0xA3, 0x85, 0xFF, 0x9D, 0x84, 0xFF, 0x97, 0x83, 0x00, 0x91, 
   0x82, 0x00, 0x8B, 0x82, 0x00, 0x85, 0x82, 0x00, 0x7F, 0x82, 0x00, 0x78, 0x82, 0x00, 0x72, 0x83, 
   0x00, 0x6C, 0x84, 0x01, 0x66, 0x85, 0x01, 0x60, 0x87, 0x01, 0x5A, 0x89, 0x02, 0x54, 0x8B, 0x02, 
   0x4E, 0x8E, 0x02, 0x48, 0x91, 0x02, 0x43, 0x94, 0x03, 0x3D, 0x97, 0x03, 0x38, 0x9B, 0x03, 0x33, 
   0x9E, 0x03, 0x2E, 0xA3, 0x04, 0x29, 0xA7, 0x04, 0x25, 0xAB, 0x04, 0x21, 0xB0, 0x04, 0x1C, 0xB5, 
   0x05, 0x19, 0xBA, 0x05, 0x15, 0xBF, 0x05, 0x12, 0xC5, 0x05, 0x0F, 0xCA, 0x05, 0x0C, 0xD0, 0x05, 
   0x09, 0xD6, 0x05, 0x07, 0xDC, 0x05, 0x05, 0xE2, 0x06, 0x03, 0xE8, 0x06, 0x02, 0xEE, 0x06, 0x01, 
   0xF4, 0x06, 0x00, 0xFA, 0x06, 0x00, 0x00, 0x06, 0x00, 0x06, 0x06, 0x00, 0x0C, 0x06, 0x00, 0x12, 
   0x06, 0x01, 0x18, 0x06, 0x02, 0x1E, 0x06, 0x03, 0x24, 0x05, 0x05, 0x2A, 0x05, 0x07, 0x30, 0x05, 
   0x09, 0x36, 0x05, 0x0C, 0x3B, 0x05, 0x0F, 0x41, 0x05, 0x12, 0x46, 0x05, 0x15, 0x4B, 0x05, 0x19, 
   0x50, 0x04, 0x1C, 0x55, 0x04, 0x21, 0x59, 0x04, 0x25, 0x5D, 0x04, 0x29, 0x62, 0x03, 0x2E, 0x65, 
   0x03, 0x33, 0x69, 0x03, 0x38, 0x6C, 0x03, 0x3D, 0x6F, 0x02, 0x43, 0x72, 0x02, 0x48, 0x75, 0x02, 
   0x4E, 0x77, 0x02, 0x54, 0x79, 0x01, 0x5A, 0x7B, 0x01, 0x60, 0x7C, 0x01, 0x66, 0x7D, 0x00, 0x6C, 
   0x7E, 0x00, 0x72, 0x7E, 0x00, 0x78, 0x7E, 0x00, 0x7E, 0x7E, 0x00, 0x85, 0x7D, 0xFF, 0x8B, 0x7D, 
   0xFF, 0x91, 0x7B, 0xFE, 0x97, 0x7A, 0xFD, 0x9D, 0x78, 0xFD, 0xA3, 0x77, 0xFC, 0xA9, 0x74, 0xFC, 
   0xAF, 0x72, 0xFB, 0xB5, 0x6F, 0xFB, 0xBA, 0x6C, 0xFA, 0xBF, 0x69, 0xFA, 0xC5, 0x65, 0xF9, 0xCA, 
   0x61, 0xF9, 0xCF, 0x5D, 0xF8, 0xD3, 0x59, 0xF8, 0xD8, 0x54, 0xF7, 0xDC, 0x50, 0xF7, 0xE0, 0x4B, 
   0xF7, 0xE4, 0x46, 0xF6, 0xE8, 0x40, 0xF6, 0xEB, 0x3B, 0xF6, 0xEE, 0x36, 0xF5, 0xF1, 0x30, 0xF5, 
   0xF3, 0x2A, 0xF5, 0xF6, 0x24, 0xF5, 0xF7, 0x1E, 0xF4, 0xF9, 0x18, 0xF4, 0xFA, 0x12, 0xF4, 0xFC, 
   0x0C, 0xF4, 0xFC, 0x06, 0xF4, 0xFD, 0x00, 0xF4, 0xFD, 0xFA, 0xF4, 0xFD, 0xF4, 0xF4, 0xFC, 0xEE, 
   0xF4, 0xFC, 0xE8, 0xF4, 0xFA, 0xE2, 0xF4, 0xF9, 0xDC, 0xF5, 0xF7, 0xD6, 0xF5, 0xF6, 0xD0, 0xF5, 
   0xF3, 0xCA, 0xF5, 0xF1, 0xC5, 0xF6, 0xEE, 0xC0, 0xF6, 0xEB, 0xBA, 0xF6, 0xE8, 0xB5, 0xF7, 0xE4, 
   0xB0, 0xF7, 0xE0, 0xAC, 0xF7, 0xDC, 0xA7, 0xF8, 0xD8, 0xA3, 0xF8, 0xD3, 0x9F, 0xF9, 0xCF, 0x9B, 
   0xF9, 0xCA, 0x97, 0xFA, 0xC5, 0x94, 0xFA, 0xBF, 0x91, 0xFB, 0xBA, 0x8E, 0xFB, 0xB5, 0x8C, 0xFC, 
   0xAF, 0x89, 0xFC, 0xA9, 0x88, 0xFD, 0xA3, 0x86, 0xFD, 0x9D, 0x85, 0xFE, 0x97, 0x83, 0xFF, 0x91, 
   0x83, 0xFF, 0x8B, 0x82, 0x00, 0x85, 0x82, 0x00, 0x7F, 0x82, 0x00, 0x78, 0x83, 0x01, 0x72, 0x83, 
   0x01, 0x6C, 0x85, 0x02, 0x66, 0x86, 0x03, 0x60, 0x88, 0x03, 0x5A, 0x89, 0x04, 0x54, 0x8C, 0x04, 
   0x4E, 0x8E, 0x05, 0x48, 0x91, 0x05, 0x43, 0x94, 0x06, 0x3E, 0x97, 0x06, 0x38, 0x9B, 0x07, 0x33, 
   0x9F, 0x07, 0x2E, 0xA3, 0x08, 0x2A, 0xA7, 0x08, 0x25, 0xAC, 0x09, 0x21, 0xB0, 0x09, 0x1D, 0xB5, 
   0x09, 0x19, 0xBA, 0x0A, 0x15, 0xC0, 0x0A, 0x12, 0xC5, 0x0A, 0x0F, 0xCA, 0x0B, 0x0C, 0xD0, 0x0B, 
   0x0A, 0xD6, 0x0B, 0x07, 0xDC, 0x0B, 0x06, 0xE2, 0x0C, 0x04, 0xE8, 0x0C, 0x03, 0xEE, 0x0C, 0x01, 
   0xF4, 0x0C, 0x01, 0xFA, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x06, 0x0C, 0x00, 0x0C, 0x0C, 0x01, 0x12, 
   0x0C, 0x01, 0x18, 0x0C, 0x03, 0x1E, 0x0C, 0x04, 0x24, 0x0B, 0x06, 0x2A, 0x0B, 0x07, 0x30, 0x0B, 
   0x0A, 0x36, 0x0B, 0x0C, 0x3B, 0x0A, 0x0F, 0x40, 0x0A, 0x12, 0x46, 0x0A, 0x15, 0x4B, 0x09, 0x19, 
   0x50, 0x09, 0x1D, 0x54, 0x09, 0x21, 0x59, 0x08, 0x25, 0x5D, 0x08, 0x2A, 0x61, 0x07, 0x2E, 0x65, 
   0x07, 0x33, 0x69, 0x06, 0x38, 0x6C, 0x06, 0x3E, 0x6F, 0x05, 0x43, 0x72, 0x05, 0x48, 0x74, 0x04, 
   0x4E, 0x77, 0x04, 0x54, 0x78, 0x03, 0x5A, 0x7A, 0x03, 0x60, 0x7B, 0x02, 0x66, 0x7D, 0x01, 0x6C, 
   0x7D, 0x01, 0x72, 0x7E, 0x00, 0x78, 0x7D, 0x00, 0x7E, 0x7D, 0x00, 0x85, 0x7D, 0xFF, 0x8B, 0x7C, 
   0xFE, 0x91, 0x7B, 0xFD, 0x97, 0x79, 0xFC, 0x9D, 0x78, 0xFB, 0xA3, 0x76, 0xFA, 0xA9, 0x74, 0xF9, 
   0xAF, 0x71, 0xF9, 0xB4, 0x6E, 0xF8, 0xBA, 0x6B, 0xF7, 0xBF, 0x68, 0xF6, 0xC4, 0x64, 0xF5, 0xC9, 
   0x61, 0xF5, 0xCE, 0x5D, 0xF4, 0xD3, 0x58, 0xF3, 0xD7, 0x54, 0xF3, 0xDC, 0x4F, 0xF2, 0xE0, 0x4A, 
   0xF2, 0xE3, 0x45, 0xF1, 0xE7, 0x40, 0xF1, 0xEA, 0x3B, 0xF0, 0xED, 0x35, 0xF0, 0xF0, 0x30, 0xEF, 
   0xF3, 0x2A, 0xEF, 0xF5, 0x24, 0xEF, 0xF7, 0x1E, 0xEE, 0xF8, 0x18, 0xEE, 0xFA, 0x12, 0xEE, 0xFB, 
   0x0C, 0xEE, 0xFC, 0x06, 0xEE, 0xFC, 0x00, 0xEE, 0xFC, 0xFA, 0xEE, 0xFC, 0xF4, 0xEE, 0xFC, 0xEE, 
   0xEE, 0xFB, 0xE8, 0xEE, 0xFA, 0xE2, 0xEE, 0xF8, 0xDC, 0xEF, 0xF7, 0xD6, 0xEF, 0xF5, 0xD0, 0xEF, 
   0xF3, 0xCB, 0xF0, 0xF0, 0xC5, 0xF0, 0xED, 0xC0, 0xF1, 0xEA, 0xBB, 0xF1, 0xE7, 0xB6, 0xF2, 0xE3, 
   0xB1, 0xF2, 0xE0, 0xAC, 0xF3, 0xDC, 0xA8, 0xF3, 0xD7, 0xA3, 0xF4, 0xD3, 0x9F, 0xF5, 0xCE, 0x9C, 
   0xF5, 0xC9, 0x98, 0xF6, 0xC4, 0x95, 0xF7, 0xBF, 0x92, 0xF8, 0xBA, 0x8F, 0xF9, 0xB4, 0x8C, 0xF9, 
   0xAF, 0x8A, 0xFA, 0xA9, 0x88, 0xFB, 0xA3, 0x87, 0xFC, 0x9D, 0x85, 0xFD, 0x97, 0x84, 0xFE, 0x91, 
   0x83, 0xFF, 0x8B, 0x83, 0x00, 0x85, 0x83, 0x00, 0x7F, 0x83, 0x00, 0x78, 0x83, 0x01, 0x72, 0x84, 
   0x02, 0x6C, 0x85, 0x03, 0x66, 0x87, 0x04, 0x60, 0x88, 0x05, 0x5A, 0x8A, 0x06, 0x54, 0x8C, 0x07, 
   0x4E, 0x8F, 0x07, 0x49, 0x92, 0x08, 0x43, 0x95, 0x09, 0x3E, 0x98, 0x0A, 0x39, 0x9C, 0x0B, 0x34, 
   0x9F, 0x0B, 0x2F, 0xA3, 0x0C, 0x2A, 0xA8, 0x0D, 0x26, 0xAC, 0x0D, 0x21, 0xB1, 0x0E, 0x1D, 0xB6, 
   0x0E, 0x1A, 0xBB, 0x0F, 0x16, 0xC0, 0x0F, 0x13, 0xC5, 0x10, 0x10, 0xCB, 0x10, 0x0D, 0xD0, 0x11, 
   0x0A, 0xD6, 0x11, 0x08, 0xDC, 0x11, 0x06, 0xE2, 0x12, 0x05, 0xE8, 0x12, 0x03, 0xEE, 0x12, 0x02, 
   0xF4, 0x12, 0x01, 0xFA, 0x12, 0x01, 0x00, 0x12, 0x01, 0x06, 0x12, 0x01, 0x0C, 0x12, 0x01, 0x12, 
   0x12, 0x02, 0x18, 0x12, 0x03, 0x1E, 0x12, 0x05, 0x24, 0x11, 0x06, 0x2A, 0x11, 0x08, 0x30, 0x11, 
   0x0A, 0x35, 0x10, 0x0D, 0x3B, 0x10, 0x10, 0x40, 0x0F, 0x13, 0x45, 0x0F, 0x16, 0x4A, 0x0E, 0x1A, 
   0x4F, 0x0E, 0x1D, 0x54, 0x0D, 0x21, 0x58, 0x0D, 0x26, 0x5D, 0x0C, 0x2A, 0x61, 0x0B, 0x2F, 0x64, 
   0x0B, 0x34, 0x68, 0x0A, 0x39, 0x6B, 0x09, 0x3E, 0x6E, 0x08, 0x43, 0x71, 0x07, 0x49, 0x74, 0x07, 
   0x4E, 0x76, 0x06, 0x54, 0x78, 0x05, 0x5A, 0x79, 0x04, 0x60, 0x7B, 0x03, 0x66, 0x7C, 0x02, 0x6C, 
   0x7D, 0x01, 0x72, 0x7D, 0x00, 0x78, 0x7C, 0x00, 0x7E, 0x7C, 0xFF, 0x85, 0x7B, 0xFE, 0x8B, 0x7B, 
   0xFD, 0x91, 0x7A, 0xFC, 0x97, 0x78, 0xFA, 0x9D, 0x77, 0xF9, 0xA3, 0x75, 0xF8, 0xA8, 0x73, 0xF7, 
   0xAE, 0x70, 0xF6, 0xB4, 0x6D, 0xF5, 0xB9, 0x6A, 0xF4, 0xBF, 0x67, 0xF3, 0xC4, 0x64, 0xF2, 0xC9, 
   0x60, 0xF1, 0xCE, 0x5C, 0xF0, 0xD2, 0x58, 0xEF, 0xD7, 0x53, 0xEE, 0xDB, 0x4F, 0xED, 0xDF, 0x4A, 
   0xED, 0xE3, 0x45, 0xEC, 0xE6, 0x40, 0xEB, 0xE9, 0x3A, 0xEB, 0xEC, 0x35, 0xEA, 0xEF, 0x2F, 0xEA, 
   0xF2, 0x29, 0xE9, 0xF4, 0x24, 0xE9, 0xF6, 0x1E, 0xE8, 0xF7, 0x18, 0xE8, 0xF9, 0x12, 0xE8, 0xFA, 
   0x0C, 0xE8, 0xFA, 0x06, 0xE8, 0xFB, 0x00, 0xE8, 0xFB, 0xFA, 0xE8, 0xFB, 0xF4, 0xE8, 0xFA, 0xEE, 
   0xE8, 0xFA, 0xE8, 0xE8, 0xF9, 0xE2, 0xE8, 0xF7, 0xDC, 0xE9, 0xF6, 0xD7, 0xE9, 0xF4, 0xD1, 0xEA, 
   0xF2, 0xCB, 0xEA, 0xEF, 0xC6, 0xEB, 0xEC, 0xC0, 0xEB, 0xE9, 0xBB, 0xEC, 0xE6, 0xB6, 0xED, 0xE3, 
   0xB1, 0xED, 0xDF, 0xAD, 0xEE, 0xDB, 0xA8, 0xEF, 0xD7, 0xA4, 0xF0, 0xD2, 0xA0, 0xF1, 0xCE, 0x9C, 
   0xF2, 0xC9, 0x99, 0xF3, 0xC4, 0x96, 0xF4, 0xBF, 0x93, 0xF5, 0xB9, 0x90, 0xF6, 0xB4, 0x8D, 0xF7, 
   0xAE, 0x8B, 0xF8, 0xA8, 0x89, 0xF9, 0xA3, 0x88, 0xFA, 0x9D, 0x86, 0xFC, 0x97, 0x85, 0xFD, 0x91, 
   0x85, 0xFE, 0x8B, 0x84, 0xFF, 0x85, 0x84, 0x00, 0x7F, 0x84, 0x01, 0x78, 0x85, 0x02, 0x72, 0x85, 
   0x03, 0x6C, 0x86, 0x04, 0x66, 0x88, 0x06, 0x60, 0x89, 0x07, 0x5A, 0x8B, 0x08, 0x55, 0x8D, 0x09, 
   0x4F, 0x90, 0x0A, 0x49, 0x93, 0x0B, 0x44, 0x96, 0x0C, 0x3E, 0x99, 0x0D, 0x39, 0x9C, 0x0E, 0x34, 
   0xA0, 0x0F, 0x2F, 0xA4, 0x10, 0x2B, 0xA8, 0x11, 0x26, 0xAD, 0x12, 0x22, 0xB1, 0x13, 0x1E, 0xB6, 
   0x13, 0x1A, 0xBB, 0x14, 0x17, 0xC0, 0x15, 0x14, 0xC6, 0x15, 0x11, 0xCB, 0x16, 0x0E, 0xD1, 0x16, 
   0x0B, 0xD7, 0x17, 0x09, 0xDC, 0x17, 0x07, 0xE2, 0x18, 0x06, 0xE8, 0x18, 0x04, 0xEE, 0x18, 0x03, 
   0xF4, 0x18, 0x03, 0xFA, 0x18, 0x02, 0x00, 0x18, 0x02, 0x06, 0x18, 0x02, 0x0C, 0x18, 0x03, 0x12, 
   0x18, 0x03, 0x18, 0x18, 0x04, 0x1E, 0x18, 0x06, 0x24, 0x17, 0x07, 0x29, 0x17, 0x09, 0x2F, 0x16, 
   0x0B, 0x35, 0x16, 0x0E, 0x3A, 0x15, 0x11, 0x40, 0x15, 0x14, 0x45, 0x14, 0x17, 0x4A, 0x13, 0x1A, 
   0x4F, 0x13, 0x1E, 0x53, 0x12, 0x22, 0x58, 0x11, 0x26, 0x5C, 0x10, 0x2B, 0x60, 0x0F, 0x2F, 0x64, 
   0x0E, 0x34, 0x67, 0x0D, 0x39, 0x6A, 0x0C, 0x3E, 0x6D, 0x0B, 0x44, 0x70, 0x0A, 0x49, 0x73, 0x09, 
   0x4F, 0x75, 0x08, 0x55, 0x77, 0x07, 0x5A, 0x78, 0x06, 0x60, 0x7A, 0x04, 0x66, 0x7B, 0x03, 0x6C, 
   0x7B, 0x02, 0x72, 0x7C, 0x01, 0x78, 0x7B, 0x00, 0x7E, 0x7B, 0xFF, 0x85, 0x7A, 0xFD, 0x8B, 0x79, 
   0xFC, 0x91, 0x78, 0xFA, 0x97, 0x77, 0xF9, 0x9C, 0x75, 0xF8, 0xA2, 0x73, 0xF6, 0xA8, 0x71, 0xF5, 
   0xAE, 0x6F, 0xF3, 0xB3, 0x6C, 0xF2, 0xB9, 0x69, 0xF1, 0xBE, 0x66, 0xEF, 0xC3, 0x62, 0xEE, 0xC8, 
   0x5F, 0xED, 0xCD, 0x5B, 0xEC, 0xD1, 0x57, 0xEB, 0xD6, 0x52, 0xEA, 0xDA, 0x4E, 0xE9, 0xDE, 0x49, 
   0xE8, 0xE1, 0x44, 0xE7, 0xE5, 0x3F, 0xE6, 0xE8, 0x3A, 0xE5, 0xEB, 0x34, 0xE5, 0xEE, 0x2F, 0xE4, 
   0xF0, 0x29, 0xE3, 0xF2, 0x23, 0xE3, 0xF4, 0x1D, 0xE3, 0xF6, 0x18, 0xE2, 0xF7, 0x12, 0xE2, 0xF8, 
   0x0C, 0xE2, 0xF9, 0x06, 0xE2, 0xFA, 0x00, 0xE2, 0xFA, 0xFA, 0xE2, 0xFA, 0xF4, 0xE2, 0xF9, 0xEE, 
   0xE2, 0xF8, 0xE8, 0xE2, 0xF7, 0xE3, 0xE3, 0xF6, 0xDD, 0xE3, 0xF4, 0xD7, 0xE3, 0xF2, 0xD1, 0xE4, 
   0xF0, 0xCC, 0xE5, 0xEE, 0xC6, 0xE5, 0xEB, 0xC1, 0xE6, 0xE8, 0xBC, 0xE7, 0xE5, 0xB7, 0xE8, 0xE1, 
   0xB2, 0xE9, 0xDE, 0xAE, 0xEA, 0xDA, 0xA9, 0xEB, 0xD6, 0xA5, 0xEC, 0xD1, 0xA1, 0xED, 0xCD, 0x9E, 
   0xEE, 0xC8, 0x9A, 0xEF, 0xC3, 0x97, 0xF1, 0xBE, 0x94, 0xF2, 0xB9, 0x91, 0xF3, 0xB3, 0x8F, 0xF5, 
   0xAE, 0x8D, 0xF6, 0xA8, 0x8B, 0xF8, 0xA2, 0x89, 0xF9, 0x9C, 0x88, 0xFA, 0x97, 0x87, 0xFC, 0x91, 
   0x86, 0xFD, 0x8B, 0x85, 0xFF, 0x85, 0x85, 0x00, 0x7F, 0x85, 0x01, 0x78, 0x86, 0x03, 0x72, 0x87, 
   0x04, 0x6C, 0x88, 0x06, 0x66, 0x89, 0x07, 0x61, 0x8B, 0x08, 0x5B, 0x8D, 0x0A, 0x55, 0x8F, 0x0B, 
   0x4F, 0x91, 0x0D, 0x4A, 0x94, 0x0E, 0x44, 0x97, 0x0F, 0x3F, 0x9A, 0x11, 0x3A, 0x9E, 0x12, 0x35, 
   0xA1, 0x13, 0x30, 0xA5, 0x14, 0x2C, 0xA9, 0x15, 0x27, 0xAE, 0x16, 0x23, 0xB2, 0x17, 0x1F, 0xB7, 
   0x18, 0x1C, 0xBC, 0x19, 0x18, 0xC1, 0x1A, 0x15, 0xC6, 0x1B, 0x12, 0xCC, 0x1B, 0x0F, 0xD1, 0x1C, 
   0x0D, 0xD7, 0x1D, 0x0B, 0xDD, 0x1D, 0x09, 0xE3, 0x1D, 0x07, 0xE8, 0x1E, 0x06, 0xEE, 0x1E, 0x05, 
   0xF4, 0x1E, 0x04, 0xFA, 0x1E, 0x03, 0x00, 0x1E, 0x03, 0x06, 0x1E, 0x03, 0x0C, 0x1E, 0x04, 0x12, 
   0x1E, 0x05, 0x18, 0x1E, 0x06, 0x1D, 0x1D, 0x07, 0x23, 0x1D, 0x09, 0x29, 0x1D, 0x0B, 0x2F, 0x1C, 
   0x0D, 0x34, 0x1B, 0x0F, 0x3A, 0x1B, 0x12, 0x3F, 0x1A, 0x15, 0x44, 0x19, 0x18, 0x49, 0x18, 0x1C, 
   0x4E, 0x17, 0x1F, 0x52, 0x16, 0x23, 0x57, 0x15, 0x27, 0x5B, 0x14, 0x2C, 0x5F, 0x13, 0x30, 0x62, 
   0x12, 0x35, 0x66, 0x11, 0x3A, 0x69, 0x0F, 0x3F, 0x6C, 0x0E, 0x44, 0x6F, 0x0D, 0x4A, 0x71, 0x0B, 
   0x4F, 0x73, 0x0A, 0x55, 0x75, 0x08, 0x5B, 0x77, 0x07, 0x61, 0x78, 0x06, 0x66, 0x79, 0x04, 0x6C, 
   0x7A, 0x03, 0x72, 0x7B, 0x01, 0x78, 0x79, 0x00, 0x7E, 0x79, 0xFF, 0x84, 0x78, 0xFD, 0x8A, 0x78, 
   0xFB, 0x90, 0x77, 0xF9, 0x96, 0x75, 0xF8, 0x9C, 0x74, 0xF6, 0xA2, 0x72, 0xF4, 0xA7, 0x70, 0xF2, 
   0xAD, 0x6D, 0xF1, 0xB2, 0x6B, 0xEF, 0xB8, 0x68, 0xEE, 0xBD, 0x65, 0xEC, 0xC2, 0x61, 0xEB, 0xC7, 
   0x5D, 0xE9, 0xCC, 0x5A, 0xE8, 0xD0, 0x55, 0xE6, 0xD4, 0x51, 0xE5, 0xD9, 0x4D, 0xE4, 0xDC, 0x48, 
   0xE3, 0xE0, 0x43, 0xE2, 0xE4, 0x3E, 0xE1, 0xE7, 0x39, 0xE0, 0xEA, 0x33, 0xDF, 0xEC, 0x2E, 0xDE, 
   0xEF, 0x28, 0xDE, 0xF1, 0x23, 0xDD, 0xF3, 0x1D, 0xDD, 0xF4, 0x17, 0xDC, 0xF6, 0x11, 0xDC, 0xF7, 
   0x0B, 0xDC, 0xF7, 0x05, 0xDC, 0xF8, 0x00, 0xDC, 0xF8, 0xFB, 0xDC, 0xF8, 0xF5, 0xDC, 0xF7, 0xEF, 
   0xDC, 0xF7, 0xE9, 0xDC, 0xF6, 0xE3, 0xDD, 0xF4, 0xDD, 0xDD, 0xF3, 0xD8, 0xDE, 0xF1, 0xD2, 0xDE, 
   0xEF, 0xCD, 0xDF, 0xEC, 0xC7, 0xE0, 0xEA, 0xC2, 0xE1, 0xE7, 0xBD, 0xE2, 0xE4, 0xB8, 0xE3, 0xE0, 
   0xB3, 0xE4, 0xDC, 0xAF, 0xE5, 0xD9, 0xAB, 0xE6, 0xD4, 0xA6, 0xE8, 0xD0, 0xA3, 0xE9, 0xCC, 0x9F, 
   0xEB, 0xC7, 0x9B, 0xEC, 0xC2, 0x98, 0xEE, 0xBD, 0x95, 0xEF, 0xB8, 0x93, 0xF1, 0xB2, 0x90, 0xF2, 
   0xAD, 0x8E, 0xF4, 0xA7, 0x8C, 0xF6, 0xA2, 0x8B, 0xF8, 0x9C, 0x89, 0xF9, 0x96, 0x88, 0xFB, 0x90, 
   0x88, 0xFD, 0x8A, 0x87, 0xFF, 0x84, 0x87, 0x00, 0x7F, 0x87, 0x01, 0x79, 0x88, 0x03, 0x73, 0x88, 
   0x05, 0x6D, 0x89, 0x07, 0x67, 0x8B, 0x08, 0x61, 0x8C, 0x0A, 0x5B, 0x8E, 0x0C, 0x56, 0x90, 0x0E, 
   0x50, 0x93, 0x0F, 0x4B, 0x95, 0x11, 0x45, 0x98, 0x12, 0x40, 0x9B, 0x14, 0x3B, 0x9F, 0x15, 0x36, 
   0xA3, 0x17, 0x31, 0xA6, 0x18, 0x2D, 0xAB, 0x1A, 0x29, 0xAF, 0x1B, 0x24, 0xB3, 0x1C, 0x21, 0xB8, 
   0x1D, 0x1D, 0xBD, 0x1E, 0x19, 0xC2, 0x1F, 0x16, 0xC7, 0x20, 0x13, 0xCD, 0x21, 0x11, 0xD2, 0x22, 
   0x0E, 0xD8, 0x22, 0x0C, 0xDD, 0x23, 0x0A, 0xE3, 0x23, 0x09, 0xE9, 0x24, 0x07, 0xEF, 0x24, 0x06, 
   0xF5, 0x24, 0x06, 0xFB, 0x24, 0x05, 0x00, 0x24, 0x05, 0x05, 0x24, 0x05, 0x0B, 0x24, 0x06, 0x11, 
   0x24, 0x06, 0x17, 0x24, 0x07, 0x1D, 0x23, 0x09, 0x23, 0x23, 0x0A, 0x28, 0x22, 0x0C, 0x2E, 0x22, 
   0x0E, 0x33, 0x21, 0x11, 0x39, 0x20, 0x13, 0x3E, 0x1F, 0x16, 0x43, 0x1E, 0x19, 0x48, 0x1D, 0x1D, 
   0x4D, 0x1C, 0x21, 0x51, 0x1B, 0x24, 0x55, 0x1A, 0x29, 0x5A, 0x18, 0x2D, 0x5D, 0x17, 0x31, 0x61, 
   0x15, 0x36, 0x65, 0x14, 0x3B, 0x68, 0x12, 0x40, 0x6B, 0x11, 0x45, 0x6D, 0x0F, 0x4B, 0x70, 0x0E, 
   0x50, 0x72, 0x0C, 0x56, 0x74, 0x0A, 0x5B, 0x75, 0x08, 0x61, 0x77, 0x07, 0x67, 0x78, 0x05, 0x6D, 
   0x78, 0x03, 0x73, 0x79, 0x01, 0x79, 0x77, 0x00, 0x7E, 0x77, 0xFE, 0x84, 0x77, 0xFC, 0x8A, 0x76, 
   0xFA, 0x90, 0x75, 0xF8, 0x96, 0x73, 0xF6, 0x9C, 0x72, 0xF4, 0xA1, 0x70, 0xF2, 0xA7, 0x6E, 0xF0, 
   0xAC, 0x6C, 0xEE, 0xB2, 0x69, 0xEC, 0xB7, 0x66, 0xEB, 0xBC, 0x63, 0xE9, 0xC1, 0x60, 0xE7, 0xC6, 
   0x5C, 0xE5, 0xCA, 0x58, 0xE4, 0xCF, 0x54, 0xE2, 0xD3, 0x50, 0xE1, 0xD7, 0x4B, 0xDF, 0xDB, 0x47, 
   0xDE, 0xDF, 0x42, 0xDD, 0xE2, 0x3D, 0xDC, 0xE5, 0x38, 0xDB, 0xE8, 0x33, 0xDA, 0xEB, 0x2D, 0xD9, 
   0xED, 0x28, 0xD8, 0xEF, 0x22, 0xD8, 0xF1, 0x1D, 0xD7, 0xF2, 0x17, 0xD7, 0xF4, 0x11, 0xD6, 0xF5, 
   0x0B, 0xD6, 0xF6, 0x05, 0xD6, 0xF6, 0x00, 0xD6, 0xF6, 0xFB, 0xD6, 0xF6, 0xF5, 0xD6, 0xF6, 0xEF, 
   0xD6, 0xF5, 0xE9, 0xD7, 0xF4, 0xE3, 0xD7, 0xF2, 0xDE, 0xD8, 0xF1, 0xD8, 0xD8, 0xEF, 0xD3, 0xD9, 
   0xED, 0xCD, 0xDA, 0xEB, 0xC8, 0xDB, 0xE8, 0xC3, 0xDC, 0xE5, 0xBE, 0xDD, 0xE2, 0xB9, 0xDE, 0xDF, 
   0xB5, 0xDF, 0xDB, 0xB0, 0xE1, 0xD7, 0xAC, 0xE2, 0xD3, 0xA8, 0xE4, 0xCF, 0xA4, 0xE5, 0xCA, 0xA0, 
   0xE7, 0xC6, 0x9D, 0xE9, 0xC1, 0x9A, 0xEB, 0xBC, 0x97, 0xEC, 0xB7, 0x94, 0xEE, 0xB2, 0x92, 0xF0, 
   0xAC, 0x90, 0xF2, 0xA7, 0x8E, 0xF4, 0xA1, 0x8D, 0xF6, 0x9C, 0x8B, 0xF8, 0x96, 0x8A, 0xFA, 0x90, 
   0x89, 0xFC, 0x8A, 0x89, 0xFE, 0x84, 0x89, 0x00, 0x7F, 0x89, 0x02, 0x79, 0x89, 0x04, 0x73, 0x8A, 
   0x06, 0x6D, 0x8B, 0x08, 0x67, 0x8D, 0x0A, 0x61, 0x8E, 0x0C, 0x5C, 0x90, 0x0E, 0x56, 0x92, 0x10, 
   0x51, 0x94, 0x12, 0x4B, 0x97, 0x14, 0x46, 0x9A, 0x15, 0x41, 0x9D, 0x17, 0x3C, 0xA0, 0x19, 0x37, 
   0xA4, 0x1B, 0x33, 0xA8, 0x1C, 0x2E, 0xAC, 0x1E, 0x2A, 0xB0, 0x1F, 0x26, 0xB5, 0x21, 0x22, 0xB9, 
   0x22, 0x1E, 0xBE, 0x23, 0x1B, 0xC3, 0x24, 0x18, 0xC8, 0x25, 0x15, 0xCD, 0x26, 0x12, 0xD3, 0x27, 
   0x10, 0xD8, 0x28, 0x0E, 0xDE, 0x28, 0x0C, 0xE3, 0x29, 0x0B, 0xE9, 0x29, 0x09, 0xEF, 0x2A, 0x08, 
   0xF5, 0x2A, 0x07, 0xFB, 0x2A, 0x07, 0x00, 0x2A, 0x07, 0x05, 0x2A, 0x07, 0x0B, 0x2A, 0x07, 0x11, 
   0x2A, 0x08, 0x17, 0x29, 0x09, 0x1D, 0x29, 0x0B, 0x22, 0x28, 0x0C, 0x28, 0x28, 0x0E, 0x2D, 0x27, 
   0x10, 0x33, 0x26, 0x12, 0x38, 0x25, 0x15, 0x3D, 0x24, 0x18, 0x42, 0x23, 0x1B, 0x47, 0x22, 0x1E, 
   0x4B, 0x21, 0x22, 0x50, 0x1F, 0x26, 0x54, 0x1E, 0x2A, 0x58, 0x1C, 0x2E, 0x5C, 0x1B, 0x33, 0x60, 
   0x19, 0x37, 0x63, 0x17, 0x3C, 0x66, 0x15, 0x41, 0x69, 0x14, 0x46, 0x6C, 0x12, 0x4B, 0x6E, 0x10, 
   0x51, 0x70, 0x0E, 0x56, 0x72, 0x0C, 0x5C, 0x73, 0x0A, 0x61, 0x75, 0x08, 0x67, 0x76, 0x06, 0x6D, 
   0x77, 0x04, 0x73, 0x77, 0x02, 0x79, 0x75, 0x00, 0x7E, 0x75, 0xFE, 0x84, 0x74, 0xFC, 0x8A, 0x74, 
   0xF9, 0x90, 0x73, 0xF7, 0x95, 0x71, 0xF5, 0x9B, 0x70, 0xF2, 0xA1, 0x6E, 0xF0, 0xA6, 0x6C, 0xEE, 
   0xAB, 0x6A, 0xEC, 0xB1, 0x67, 0xEA, 0xB6, 0x64, 0xE8, 0xBB, 0x61, 0xE5, 0xC0, 0x5E, 0xE4, 0xC4, 
   0x5A, 0xE2, 0xC9, 0x56, 0xE0, 0xCD, 0x52, 0xDE, 0xD1, 0x4E, 0xDC, 0xD5, 0x4A, 0xDB, 0xD9, 0x45, 
   0xD9, 0xDD, 0x41, 0xD8, 0xE0, 0x3C, 0xD7, 0xE3, 0x37, 0xD6, 0xE6, 0x32, 0xD5, 0xE9, 0x2C, 0xD4, 
   0xEB, 0x27, 0xD3, 0xED, 0x22, 0xD2, 0xEF, 0x1C, 0xD1, 0xF0, 0x16, 0xD1, 0xF2, 0x11, 0xD0, 0xF3, 
   0x0B, 0xD0, 0xF3, 0x05, 0xD0, 0xF4, 0x00, 0xD0, 0xF4, 0xFB, 0xD0, 0xF4, 0xF5, 0xD0, 0xF3, 0xEF, 
   0xD0, 0xF3, 0xEA, 0xD1, 0xF2, 0xE4, 0xD1, 0xF0, 0xDE, 0xD2, 0xEF, 0xD9, 0xD3, 0xED, 0xD4, 0xD4, 
   0xEB, 0xCE, 0xD5, 0xE9, 0xC9, 0xD6, 0xE6, 0xC4, 0xD7, 0xE3, 0xBF, 0xD8, 0xE0, 0xBB, 0xD9, 0xDD, 
   0xB6, 0xDB, 0xD9, 0xB2, 0xDC, 0xD5, 0xAE, 0xDE, 0xD1, 0xAA, 0xE0, 0xCD, 0xA6, 0xE2, 0xC9, 0xA2, 
   0xE4, 0xC4, 0x9F, 0xE5, 0xC0, 0x9C, 0xE8, 0xBB, 0x99, 0xEA, 0xB6, 0x96, 0xEC, 0xB1, 0x94, 0xEE, 
   0xAB, 0x92, 0xF0, 0xA6, 0x90, 0xF2, 0xA1, 0x8F, 0xF5, 0x9B, 0x8D, 0xF7, 0x95, 0x8C, 0xF9, 0x90, 
   0x8C, 0xFC, 0x8A, 0x8B, 0xFE, 0x84, 0x8B, 0x00, 0x7F, 0x8B, 0x02, 0x79, 0x8C, 0x04, 0x73, 0x8C, 
   0x07, 0x6D, 0x8D, 0x09, 0x68, 0x8F, 0x0B, 0x62, 0x90, 0x0E, 0x5C, 0x92, 0x10, 0x57, 0x94, 0x12, 
   0x52, 0x96, 0x14, 0x4C, 0x99, 0x16, 0x47, 0x9C, 0x18, 0x42, 0x9F, 0x1B, 0x3D, 0xA2, 0x1C, 0x39, 
   0xA6, 0x1E, 0x34, 0xAA, 0x20, 0x30, 0xAE, 0x22, 0x2C, 0xB2, 0x24, 0x28, 0xB6, 0x25, 0x24, 0xBB, 
   0x27, 0x20, 0xBF, 0x28, 0x1D, 0xC4, 0x29, 0x1A, 0xC9, 0x2A, 0x17, 0xCE, 0x2B, 0x14, 0xD4, 0x2C, 
   0x12, 0xD9, 0x2D, 0x10, 0xDE, 0x2E, 0x0E, 0xE4, 0x2F, 0x0D, 0xEA, 0x2F, 0x0B, 0xEF, 0x30, 0x0A, 
   0xF5, 0x30, 0x0A, 0xFB, 0x30, 0x09, 0x00, 0x30, 0x09, 0x05, 0x30, 0x09, 0x0B, 0x30, 0x0A, 0x11, 
   0x30, 0x0A, 0x16, 0x2F, 0x0B, 0x1C, 0x2F, 0x0D, 0x22, 0x2E, 0x0E, 0x27, 0x2D, 0x10, 0x2C, 0x2C, 
   0x12, 0x32, 0x2B, 0x14, 0x37, 0x2A, 0x17, 0x3C, 0x29, 0x1A, 0x41, 0x28, 0x1D, 0x45, 0x27, 0x20, 
   0x4A, 0x25, 0x24, 0x4E, 0x24, 0x28, 0x52, 0x22, 0x2C, 0x56, 0x20, 0x30, 0x5A, 0x1E, 0x34, 0x5E, 
   0x1C, 0x39, 0x61, 0x1B, 0x3D, 0x64, 0x18, 0x42, 0x67, 0x16, 0x47, 0x6A, 0x14, 0x4C, 0x6C, 0x12, 
   0x52, 0x6E, 0x10, 0x57, 0x70, 0x0E, 0x5C, 0x71, 0x0B, 0x62, 0x73, 0x09, 0x68, 0x74, 0x07, 0x6D, 
   0x74, 0x04, 0x73, 0x75, 0x02, 0x79, 0x72, 0x00, 0x7E, 0x72, 0xFE, 0x84, 0x72, 0xFB, 0x8A, 0x71, 
   0xF9, 0x8F, 0x70, 0xF6, 0x95, 0x6F, 0xF3, 0x9A, 0x6D, 0xF1, 0xA0, 0x6C, 0xEE, 0xA5, 0x6A, 0xEC, 
   0xAA, 0x67, 0xE9, 0xB0, 0x65, 0xE7, 0xB5, 0x62, 0xE5, 0xBA, 0x5F, 0xE2, 0xBE, 0x5C, 0xE0, 0xC3, 
   0x58, 0xDE, 0xC7, 0x55, 0xDC, 0xCC, 0x51, 0xDA, 0xD0, 0x4D, 0xD8, 0xD4, 0x48, 0xD7, 0xD7, 0x44, 
   0xD5, 0xDB, 0x3F, 0xD3, 0xDE, 0x3B, 0xD2, 0xE1, 0x36, 0xD1, 0xE4, 0x31, 0xCF, 0xE6, 0x2B, 0xCE, 
   0xE9, 0x26, 0xCD, 0xEB, 0x21, 0xCD, 0xEC, 0x1B, 0xCC, 0xEE, 0x16, 0xCB, 0xEF, 0x10, 0xCB, 0xF0, 
   0x0B, 0xCA, 0xF1, 0x05, 0xCA, 0xF1, 0x00, 0xCA, 0xF1, 0xFB, 0xCA, 0xF1, 0xF5, 0xCA, 0xF1, 0xF0, 
   0xCB, 0xF0, 0xEA, 0xCB, 0xEF, 0xE5, 0xCC, 0xEE, 0xDF, 0xCD, 0xEC, 0xDA, 0xCD, 0xEB, 0xD5, 0xCE, 
   0xE9, 0xCF, 0xCF, 0xE6, 0xCA, 0xD1, 0xE4, 0xC5, 0xD2, 0xE1, 0xC1, 0xD3, 0xDE, 0xBC, 0xD5, 0xDB, 
   0xB8, 0xD7, 0xD7, 0xB3, 0xD8, 0xD4, 0xAF, 0xDA, 0xD0, 0xAB, 0xDC, 0xCC, 0xA8, 0xDE, 0xC7, 0xA4, 
   0xE0, 0xC3, 0xA1, 0xE2, 0xBE, 0x9E, 0xE5, 0xBA, 0x9B, 0xE7, 0xB5, 0x99, 0xE9, 0xB0, 0x96, 0xEC, 
   0xAA, 0x94, 0xEE, 0xA5, 0x93, 0xF1, 0xA0, 0x91, 0xF3, 0x9A, 0x90, 0xF6, 0x95, 0x8F, 0xF9, 0x8F, 
   0x8E, 0xFB, 0x8A, 0x8E, 0xFE, 0x84, 0x8E, 0x00, 0x7F, 0x8E, 0x02, 0x79, 0x8E, 0x05, 0x73, 0x8F, 
   0x07, 0x6E, 0x90, 0x0A, 0x68, 0x91, 0x0D, 0x63, 0x93, 0x0F, 0x5D, 0x94, 0x12, 0x58, 0x96, 0x14, 
   0x53, 0x99, 0x17, 0x4D, 0x9B, 0x19, 0x48, 0x9E, 0x1B, 0x43, 0xA1, 0x1E, 0x3F, 0xA4, 0x20, 0x3A, 
   0xA8, 0x22, 0x36, 0xAB, 0x24, 0x31, 0xAF, 0x26, 0x2D, 0xB3, 0x28, 0x29, 0xB8, 0x29, 0x26, 0xBC, 
   0x2B, 0x22, 0xC1, 0x2D, 0x1F, 0xC5, 0x2E, 0x1C, 0xCA, 0x2F, 0x19, 0xCF, 0x31, 0x17, 0xD5, 0x32, 
   0x14, 0xDA, 0x33, 0x12, 0xDF, 0x33, 0x11, 0xE5, 0x34, 0x0F, 0xEA, 0x35, 0x0E, 0xF0, 0x35, 0x0D, 
   0xF5, 0x36, 0x0C, 0xFB, 0x36, 0x0C, 0x00, 0x36, 0x0C, 0x05, 0x36, 0x0C, 0x0B, 0x36, 0x0C, 0x10, 
   0x35, 0x0D, 0x16, 0x35, 0x0E, 0x1B, 0x34, 0x0F, 0x21, 0x33, 0x11, 0x26, 0x33, 0x12, 0x2B, 0x32, 
   0x14, 0x31, 0x31, 0x17, 0x36, 0x2F, 0x19, 0x3B, 0x2E, 0x1C, 0x3F, 0x2D, 0x1F, 0x44, 0x2B, 0x22, 
   0x48, 0x29, 0x26, 0x4D, 0x28, 0x29, 0x51, 0x26, 0x2D, 0x55, 0x24, 0x31, 0x58, 0x22, 0x36, 0x5C, 
   0x20, 0x3A, 0x5F, 0x1E, 0x3F, 0x62, 0x1B, 0x43, 0x65, 0x19, 0x48, 0x67, 0x17, 0x4D, 0x6A, 0x14, 
   0x53, 0x6C, 0x12, 0x58, 0x6D, 0x0F, 0x5D, 0x6F, 0x0D, 0x63, 0x70, 0x0A, 0x68, 0x71, 0x07, 0x6E, 
   0x72, 0x05, 0x73, 0x72, 0x02, 0x79, 0x70, 0x00, 0x7E, 0x6F, 0xFE, 0x84, 0x6F, 0xFB, 0x89, 0x6E, 
   0xF8, 0x8F, 0x6D, 0xF5, 0x94, 0x6C, 0xF2, 0x9A, 0x6B, 0xEF, 0x9F, 0x69, 0xEC, 0xA4, 0x67, 0xEA, 
   0xA9, 0x65, 0xE7, 0xAE, 0x62, 0xE4, 0xB3, 0x60, 0xE2, 0xB8, 0x5D, 0xDF, 0xBD, 0x59, 0xDD, 0xC1, 
   0x56, 0xDB, 0xC6, 0x52, 0xD8, 0xCA, 0x4F, 0xD6, 0xCE, 0x4B, 0xD4, 0xD1, 0x47, 0xD2, 0xD5, 0x42, 
   0xD0, 0xD8, 0x3E, 0xCF, 0xDC, 0x39, 0xCD, 0xDF, 0x34, 0xCC, 0xE1, 0x2F, 0xCA, 0xE4, 0x2A, 0xC9, 
   0xE6, 0x25, 0xC8, 0xE8, 0x20, 0xC7, 0xEA, 0x1B, 0xC6, 0xEB, 0x15, 0xC6, 0xEC, 0x10, 0xC5, 0xED, 
   0x0A, 0xC5, 0xEE, 0x05, 0xC5, 0xEE, 0x00, 0xC5, 0xEF, 0xFB, 0xC5, 0xEE, 0xF6, 0xC5, 0xEE, 0xF0, 
   0xC5, 0xED, 0xEB, 0xC6, 0xEC, 0xE5, 0xC6, 0xEB, 0xE0, 0xC7, 0xEA, 0xDB, 0xC8, 0xE8, 0xD6, 0xC9, 
   0xE6, 0xD1, 0xCA, 0xE4, 0xCC, 0xCC, 0xE1, 0xC7, 0xCD, 0xDF, 0xC2, 0xCF, 0xDC, 0xBE, 0xD0, 0xD8, 
   0xB9, 0xD2, 0xD5, 0xB5, 0xD4, 0xD1, 0xB1, 0xD6, 0xCE, 0xAE, 0xD8, 0xCA, 0xAA, 0xDB, 0xC6, 0xA7, 
   0xDD, 0xC1, 0xA3, 0xDF, 0xBD, 0xA0, 0xE2, 0xB8, 0x9E, 0xE4, 0xB3, 0x9B, 0xE7, 0xAE, 0x99, 0xEA, 
   0xA9, 0x97, 0xEC, 0xA4, 0x95, 0xEF, 0x9F, 0x94, 0xF2, 0x9A, 0x93, 0xF5, 0x94, 0x92, 0xF8, 0x8F, 
   0x91, 0xFB, 0x89, 0x91, 0xFE, 0x84, 0x90, 0x00, 0x7F, 0x91, 0x02, 0x79, 0x91, 0x05, 0x74, 0x92, 
   0x08, 0x6E, 0x93, 0x0B, 0x69, 0x94, 0x0E, 0x63, 0x95, 0x11, 0x5E, 0x97, 0x14, 0x59, 0x99, 0x16, 
   0x54, 0x9B, 0x19, 0x4F, 0x9E, 0x1C, 0x4A, 0xA0, 0x1E, 0x45, 0xA3, 0x21, 0x40, 0xA7, 0x23, 0x3C, 
   0xAA, 0x25, 0x37, 0xAE, 0x28, 0x33, 0xB1, 0x2A, 0x2F, 0xB5, 0x2C, 0x2C, 0xB9, 0x2E, 0x28, 0xBE, 
   0x30, 0x25, 0xC2, 0x31, 0x21, 0xC7, 0x33, 0x1E, 0xCC, 0x34, 0x1C, 0xD1, 0x36, 0x19, 0xD6, 0x37, 
   0x17, 0xDB, 0x38, 0x15, 0xE0, 0x39, 0x13, 0xE5, 0x3A, 0x12, 0xEB, 0x3A, 0x11, 0xF0, 0x3B, 0x10, 
   0xF6, 0x3B, 0x0F, 0xFB, 0x3B, 0x0F, 0x00, 0x3B, 0x0E, 0x05, 0x3B, 0x0F, 0x0A, 0x3B, 0x0F, 0x10, 
   0x3B, 0x10, 0x15, 0x3A, 0x11, 0x1B, 0x3A, 0x12, 0x20, 0x39, 0x13, 0x25, 0x38, 0x15, 0x2A, 0x37, 
   0x17, 0x2F, 0x36, 0x19, 0x34, 0x34, 0x1C, 0x39, 0x33, 0x1E, 0x3E, 0x31, 0x21, 0x42, 0x30, 0x25, 
   0x47, 0x2E, 0x28, 0x4B, 0x2C, 0x2C, 0x4F, 0x2A, 0x2F, 0x52, 0x28, 0x33, 0x56, 0x25, 0x37, 0x59, 
   0x23, 0x3C, 0x5D, 0x21, 0x40, 0x60, 0x1E, 0x45, 0x62, 0x1C, 0x4A, 0x65, 0x19, 0x4F, 0x67, 0x16, 
   0x54, 0x69, 0x14, 0x59, 0x6B, 0x11, 0x5E, 0x6C, 0x0E, 0x63, 0x6D, 0x0B, 0x69, 0x6E, 0x08, 0x6E, 
   0x6F, 0x05, 0x74, 0x6F, 0x02, 0x79, 0x6C, 0x00, 0x7E, 0x6C, 0xFD, 0x84, 0x6C, 0xFA, 0x89, 0x6B, 
   0xF7, 0x8E, 0x6A, 0xF4, 0x94, 0x69, 0xF1, 0x99, 0x68, 0xEE, 0x9E, 0x66, 0xEB, 0xA3, 0x64, 0xE8, 
   0xA8, 0x62, 0xE5, 0xAD, 0x60, 0xE2, 0xB2, 0x5D, 0xDF, 0xB7, 0x5A, 0xDC, 0xBB, 0x57, 0xDA, 0xBF, 
   0x54, 0xD7, 0xC4, 0x50, 0xD5, 0xC8, 0x4D, 0xD2, 0xCC, 0x49, 0xD0, 0xCF, 0x45, 0xCE, 0xD3, 0x40, 
   0xCC, 0xD6, 0x3C, 0xCA, 0xD9, 0x38, 0xC8, 0xDC, 0x33, 0xC7, 0xDF, 0x2E, 0xC5, 0xE1, 0x29, 0xC4, 
   0xE3, 0x24, 0xC3, 0xE5, 0x1F, 0xC2, 0xE7, 0x1A, 0xC1, 0xE8, 0x15, 0xC0, 0xE9, 0x0F, 0xC0, 0xEA, 
   0x0A, 0xC0, 0xEB, 0x05, 0xBF, 0xEB, 0x00, 0xBF, 0xEB, 0xFB, 0xBF, 0xEB, 0xF6, 0xC0, 0xEB, 0xF1, 
   0xC0, 0xEA, 0xEB, 0xC0, 0xE9, 0xE6, 0xC1, 0xE8, 0xE1, 0xC2, 0xE7, 0xDC, 0xC3, 0xE5, 0xD7, 0xC4, 
   0xE3, 0xD2, 0xC5, 0xE1, 0xCD, 0xC7, 0xDF, 0xC8, 0xC8, 0xDC, 0xC4, 0xCA, 0xD9, 0xC0, 0xCC, 0xD6, 
   0xBB, 0xCE, 0xD3, 0xB7, 0xD0, 0xCF, 0xB3, 0xD2, 0xCC, 0xB0, 0xD5, 0xC8, 0xAC, 0xD7, 0xC4, 0xA9, 
   0xDA, 0xBF, 0xA6, 0xDC, 0xBB, 0xA3, 0xDF, 0xB7, 0xA0, 0xE2, 0xB2, 0x9E, 0xE5, 0xAD, 0x9C, 0xE8, 
   0xA8, 0x9A, 0xEB, 0xA3, 0x98, 0xEE, 0x9E, 0x97, 0xF1, 0x99, 0x96, 0xF4, 0x94, 0x95, 0xF7, 0x8E, 
   0x94, 0xFA, 0x89, 0x94, 0xFD, 0x84, 0x94, 0x00, 0x7F, 0x94, 0x03, 0x79, 0x94, 0x06, 0x74, 0x95, 
   0x09, 0x6F, 0x96, 0x0C, 0x69, 0x97, 0x0F, 0x64, 0x98, 0x12, 0x5F, 0x9A, 0x15, 0x5A, 0x9C, 0x18, 
   0x55, 0x9E, 0x1B, 0x50, 0xA0, 0x1E, 0x4B, 0xA3, 0x21, 0x46, 0xA6, 0x24, 0x42, 0xA9, 0x26, 0x3E, 
   0xAC, 0x29, 0x39, 0xB0, 0x2B, 0x35, 0xB3, 0x2E, 0x31, 0xB7, 0x30, 0x2E, 0xBB, 0x32, 0x2A, 0xC0, 
   0x34, 0x27, 0xC4, 0x36, 0x24, 0xC8, 0x38, 0x21, 0xCD, 0x39, 0x1E, 0xD2, 0x3B, 0x1C, 0xD7, 0x3C, 
   0x1A, 0xDC, 0x3D, 0x18, 0xE1, 0x3E, 0x16, 0xE6, 0x3F, 0x15, 0xEB, 0x40, 0x14, 0xF1, 0x40, 0x13, 
   0xF6, 0x40, 0x12, 0xFB, 0x41, 0x12, 0x00, 0x41, 0x12, 0x05, 0x41, 0x12, 0x0A, 0x40, 0x12, 0x0F, 
   0x40, 0x13, 0x15, 0x40, 0x14, 0x1A, 0x3F, 0x15, 0x1F, 0x3E, 0x16, 0x24, 0x3D, 0x18, 0x29, 0x3C, 
   0x1A, 0x2E, 0x3B, 0x1C, 0x33, 0x39, 0x1E, 0x38, 0x38, 0x21, 0x3C, 0x36, 0x24, 0x40, 0x34, 0x27, 
   0x45, 0x32, 0x2A, 0x49, 0x30, 0x2E, 0x4D, 0x2E, 0x31, 0x50, 0x2B, 0x35, 0x54, 0x29, 0x39, 0x57, 
   0x26, 0x3E, 0x5A, 0x24, 0x42, 0x5D, 0x21, 0x46, 0x60, 0x1E, 0x4B, 0x62, 0x1B, 0x50, 0x64, 0x18, 
   0x55, 0x66, 0x15, 0x5A, 0x68, 0x12, 0x5F, 0x69, 0x0F, 0x64, 0x6A, 0x0C, 0x69, 0x6B, 0x09, 0x6F, 
   0x6C, 0x06, 0x74, 0x6C, 0x03, 0x79, 0x69, 0x00, 0x7E, 0x69, 0xFD, 0x84, 0x69, 0xFA, 0x89, 0x68, 
   0xF6, 0x8E, 0x67, 0xF3, 0x93, 0x66, 0xEF, 0x98, 0x65, 0xEC, 0x9D, 0x63, 0xE9, 0xA2, 0x61, 0xE5, 
   0xA7, 0x5F, 0xE2, 0xAC, 0x5D, 0xDF, 0xB0, 0x5A, 0xDC, 0xB5, 0x57, 0xD9, 0xB9, 0x54, 0xD6, 0xBD, 
   0x51, 0xD4, 0xC1, 0x4E, 0xD1, 0xC5, 0x4A, 0xCF, 0xC9, 0x46, 0xCC, 0xCD, 0x42, 0xCA, 0xD0, 0x3E, 
   0xC8, 0xD3, 0x3A, 0xC6, 0xD6, 0x36, 0xC4, 0xD9, 0x31, 0xC2, 0xDC, 0x2D, 0xC1, 0xDE, 0x28, 0xBF, 
   0xE0, 0x23, 0xBE, 0xE2, 0x1E, 0xBD, 0xE4, 0x19, 0xBC, 0xE5, 0x14, 0xBB, 0xE6, 0x0F, 0xBB, 0xE7, 
   0x0A, 0xBA, 0xE8, 0x05, 0xBA, 0xE8, 0x00, 0xBA, 0xE8, 0xFB, 0xBA, 0xE8, 0xF6, 0xBA, 0xE8, 0xF1, 
   0xBB, 0xE7, 0xEC, 0xBB, 0xE6, 0xE7, 0xBC, 0xE5, 0xE2, 0xBD, 0xE4, 0xDD, 0xBE, 0xE2, 0xD8, 0xBF, 
   0xE0, 0xD3, 0xC1, 0xDE, 0xCF, 0xC2, 0xDC, 0xCA, 0xC4, 0xD9, 0xC6, 0xC6, 0xD6, 0xC2, 0xC8, 0xD3, 
   0xBE, 0xCA, 0xD0, 0xBA, 0xCC, 0xCD, 0xB6, 0xCF, 0xC9, 0xB2, 0xD1, 0xC5, 0xAF, 0xD4, 0xC1, 0xAC, 
   0xD6, 0xBD, 0xA9, 0xD9, 0xB9, 0xA6, 0xDC, 0xB5, 0xA3, 0xDF, 0xB0, 0xA1, 0xE2, 0xAC, 0x9F, 0xE5, 
   0xA7, 0x9D, 0xE9, 0xA2, 0x9B, 0xEC, 0x9D, 0x9A, 0xEF, 0x98, 0x99, 0xF3, 0x93, 0x98, 0xF6, 0x8E, 
   0x97, 0xFA, 0x89, 0x97, 0xFD, 0x84, 0x97, 0x00, 0x7F, 0x97, 0x03, 0x79, 0x97, 0x06, 0x74, 0x98, 
   0x0A, 0x6F, 0x99, 0x0D, 0x6A, 0x9A, 0x11, 0x65, 0x9B, 0x14, 0x60, 0x9D, 0x17, 0x5B, 0x9F, 0x1B, 
   0x56, 0xA1, 0x1E, 0x51, 0xA3, 0x21, 0x4D, 0xA6, 0x24, 0x48, 0xA9, 0x27, 0x44, 0xAC, 0x2A, 0x40, 
   0xAF, 0x2C, 0x3C, 0xB2, 0x2F, 0x38, 0xB6, 0x31, 0x34, 0xBA, 0x34, 0x30, 0xBE, 0x36, 0x2D, 0xC2, 
   0x38, 0x2A, 0xC6, 0x3A, 0x27, 0xCA, 0x3C, 0x24, 0xCF, 0x3E, 0x21, 0xD3, 0x3F, 0x1F, 0xD8, 0x41, 
   0x1D, 0xDD, 0x42, 0x1B, 0xE2, 0x43, 0x19, 0xE7, 0x44, 0x18, 0xEC, 0x45, 0x17, 0xF1, 0x45, 0x16, 
   0xF6, 0x46, 0x15, 0xFB, 0x46, 0x15, 0x00, 0x46, 0x15, 0x05, 0x46, 0x15, 0x0A, 0x46, 0x15, 0x0F, 
   0x45, 0x16, 0x14, 0x45, 0x17, 0x19, 0x44, 0x18, 0x1E, 0x43, 0x19, 0x23, 0x42, 0x1B, 0x28, 0x41, 
   0x1D, 0x2D, 0x3F, 0x1F, 0x31, 0x3E, 0x21, 0x36, 0x3C, 0x24, 0x3A, 0x3A, 0x27, 0x3E, 0x38, 0x2A, 
   0x42, 0x36, 0x2D, 0x46, 0x34, 0x30, 0x4A, 0x31, 0x34, 0x4E, 0x2F, 0x38, 0x51, 0x2C, 0x3C, 0x54, 
   0x2A, 0x40, 0x57, 0x27, 0x44, 0x5A, 0x24, 0x48, 0x5D, 0x21, 0x4D, 0x5F, 0x1E, 0x51, 0x61, 0x1B, 
   0x56, 0x63, 0x17, 0x5B, 0x65, 0x14, 0x60, 0x66, 0x11, 0x65, 0x67, 0x0D, 0x6A, 0x68, 0x0A, 0x6F, 
   0x69, 0x06, 0x74, 0x69, 0x03, 0x79, 0x66, 0x00, 0x7E, 0x65, 0xFD, 0x84, 0x65, 0xF9, 0x88, 0x64, 
   0xF5, 0x8D, 0x64, 0xF2, 0x92, 0x62, 0xEE, 0x97, 0x61, 0xEB, 0x9C, 0x60, 0xE7, 0xA1, 0x5E, 0xE4, 
   0xA6, 0x5C, 0xE0, 0xAA, 0x59, 0xDD, 0xAF, 0x57, 0xDA, 0xB3, 0x54, 0xD6, 0xB7, 0x51, 0xD3, 0xBB, 
   0x4E, 0xD1, 0xBF, 0x4B, 0xCE, 0xC3, 0x48, 0xCB, 0xC7, 0x44, 0xC8, 0xCA, 0x40, 0xC6, 0xCD, 0x3C, 
   0xC4, 0xD0, 0x38, 0xC2, 0xD3, 0x34, 0xC0, 0xD6, 0x30, 0xBE, 0xD8, 0x2B, 0xBC, 0xDB, 0x27, 0xBB, 
   0xDD, 0x22, 0xB9, 0xDF, 0x1D, 0xB8, 0xE0, 0x18, 0xB7, 0xE1, 0x13, 0xB6, 0xE3, 0x0E, 0xB6, 0xE3, 
   0x09, 0xB5, 0xE4, 0x05, 0xB5, 0xE4, 0x00, 0xB5, 0xE5, 0xFB, 0xB5, 0xE4, 0xF7, 0xB5, 0xE4, 0xF2, 
   0xB6, 0xE3, 0xED, 0xB6, 0xE3, 0xE8, 0xB7, 0xE1, 0xE3, 0xB8, 0xE0, 0xDE, 0xB9, 0xDF, 0xD9, 0xBB, 
   0xDD, 0xD5, 0xBC, 0xDB, 0xD0, 0xBE, 0xD8, 0xCC, 0xC0, 0xD6, 0xC8, 0xC2, 0xD3, 0xC4, 0xC4, 0xD0, 
   0xC0, 0xC6, 0xCD, 0xBC, 0xC8, 0xCA, 0xB8, 0xCB, 0xC7, 0xB5, 0xCE, 0xC3, 0xB2, 0xD1, 0xBF, 0xAF, 
   0xD3, 0xBB, 0xAC, 0xD6, 0xB7, 0xA9, 0xDA, 0xB3, 0xA7, 0xDD, 0xAF, 0xA4, 0xE0, 0xAA, 0xA2, 0xE4, 
   0xA6, 0xA0, 0xE7, 0xA1, 0x9F, 0xEB, 0x9C, 0x9E, 0xEE, 0x97, 0x9C, 0xF2, 0x92, 0x9C, 0xF5, 0x8D, 
   0x9B, 0xF9, 0x88, 0x9B, 0xFD, 0x84, 0x9A, 0x00, 0x7F, 0x9B, 0x03, 0x79, 0x9B, 0x07, 0x75, 0x9C, 
   0x0B, 0x70, 0x9C, 0x0E, 0x6B, 0x9E, 0x12, 0x66, 0x9F, 0x15, 0x61, 0xA0, 0x19, 0x5C, 0xA2, 0x1C, 
   0x57, 0xA4, 0x20, 0x53, 0xA7, 0x23, 0x4E, 0xA9, 0x26, 0x4A, 0xAC, 0x2A, 0x46, 0xAF, 0x2D, 0x42, 
   0xB2, 0x2F, 0x3E, 0xB5, 0x32, 0x3A, 0xB8, 0x35, 0x36, 0xBC, 0x38, 0x33, 0xC0, 0x3A, 0x30, 0xC4, 
   0x3C, 0x2D, 0xC8, 0x3E, 0x2A, 0xCC, 0x40, 0x27, 0xD0, 0x42, 0x25, 0xD5, 0x44, 0x22, 0xD9, 0x45, 
   0x20, 0xDE, 0x47, 0x1E, 0xE3, 0x48, 0x1D, 0xE8, 0x49, 0x1C, 0xED, 0x4A, 0x1A, 0xF2, 0x4A, 0x1A, 
   0xF7, 0x4B, 0x19, 0xFB, 0x4B, 0x19, 0x00, 0x4B, 0x18, 0x05, 0x4B, 0x19, 0x09, 0x4B, 0x19, 0x0E, 
   0x4A, 0x1A, 0x13, 0x4A, 0x1A, 0x18, 0x49, 0x1C, 0x1D, 0x48, 0x1D, 0x22, 0x47, 0x1E, 0x27, 0x45, 
   0x20, 0x2B, 0x44, 0x22, 0x30, 0x42, 0x25, 0x34, 0x40, 0x27, 0x38, 0x3E, 0x2A, 0x3C, 0x3C, 0x2D, 
   0x40, 0x3A, 0x30, 0x44, 0x38, 0x33, 0x48, 0x35, 0x36, 0x4B, 0x32, 0x3A, 0x4E, 0x2F, 0x3E, 0x51, 
   0x2D, 0x42, 0x54, 0x2A, 0x46, 0x57, 0x26, 0x4A, 0x59, 0x23, 0x4E, 0x5C, 0x20, 0x53, 0x5E, 0x1C, 
   0x57, 0x60, 0x19, 0x5C, 0x61, 0x15, 0x61, 0x62, 0x12, 0x66, 0x64, 0x0E, 0x6B, 0x64, 0x0B, 0x70, 
   0x65, 0x07, 0x75, 0x65, 0x03, 0x79, 0x62, 0x00, 0x7E, 0x62, 0xFD, 0x83, 0x61, 0xF9, 0x88, 0x61, 
   0xF5, 0x8D, 0x60, 0xF1, 0x92, 0x5F, 0xED, 0x96, 0x5D, 0xE9, 0x9B, 0x5C, 0xE5, 0xA0, 0x5A, 0xE2, 
   0xA4, 0x58, 0xDE, 0xA8, 0x56, 0xDB, 0xAD, 0x54, 0xD7, 0xB1, 0x51, 0xD4, 0xB5, 0x4E, 0xD1, 0xB9, 
   0x4B, 0xCD, 0xBD, 0x48, 0xCA, 0xC0, 0x45, 0xC8, 0xC4, 0x41, 0xC5, 0xC7, 0x3E, 0xC2, 0xCA, 0x3A, 
   0xC0, 0xCD, 0x36, 0xBE, 0xD0, 0x32, 0xBB, 0xD3, 0x2E, 0xB9, 0xD5, 0x29, 0xB8, 0xD7, 0x25, 0xB6, 
   0xD9, 0x21, 0xB5, 0xDB, 0x1C, 0xB3, 0xDC, 0x17, 0xB2, 0xDE, 0x13, 0xB1, 0xDF, 0x0E, 0xB1, 0xE0, 
   0x09, 0xB0, 0xE0, 0x04, 0xB0, 0xE1, 0x00, 0xB0, 0xE1, 0xFC, 0xB0, 0xE1, 0xF7, 0xB0, 0xE0, 0xF2, 
   0xB1, 0xE0, 0xED, 0xB1, 0xDF, 0xE9, 0xB2, 0xDE, 0xE4, 0xB3, 0xDC, 0xDF, 0xB5, 0xDB, 0xDB, 0xB6, 
   0xD9, 0xD7, 0xB8, 0xD7, 0xD2, 0xB9, 0xD5, 0xCE, 0xBB, 0xD3, 0xCA, 0xBE, 0xD0, 0xC6, 0xC0, 0xCD, 
   0xC2, 0xC2, 0xCA, 0xBF, 0xC5, 0xC7, 0xBB, 0xC8, 0xC4, 0xB8, 0xCA, 0xC0, 0xB5, 0xCD, 0xBD, 0xB2, 
   0xD1, 0xB9, 0xAF, 0xD4, 0xB5, 0xAC, 0xD7, 0xB1, 0xAA, 0xDB, 0xAD, 0xA8, 0xDE, 0xA8, 0xA6, 0xE2, 
   0xA4, 0xA4, 0xE5, 0xA0, 0xA3, 0xE9, 0x9B, 0xA1, 0xED, 0x96, 0xA0, 0xF1, 0x92, 0x9F, 0xF5, 0x8D, 
   0x9F, 0xF9, 0x88, 0x9E, 0xFD, 0x83, 0x9E, 0x00, 0x7F, 0x9E, 0x03, 0x7A, 0x9F, 0x07, 0x75, 0x9F, 
   0x0B, 0x70, 0xA0, 0x0F, 0x6B, 0xA1, 0x13, 0x67, 0xA3, 0x17, 0x62, 0xA4, 0x1B, 0x5D, 0xA6, 0x1E, 
   0x59, 0xA8, 0x22, 0x55, 0xAA, 0x25, 0x50, 0xAC, 0x29, 0x4C, 0xAF, 0x2C, 0x48, 0xB2, 0x2F, 0x44, 
   0xB5, 0x33, 0x40, 0xB8, 0x36, 0x3D, 0xBB, 0x38, 0x39, 0xBF, 0x3B, 0x36, 0xC2, 0x3E, 0x33, 0xC6, 
   0x40, 0x30, 0xCA, 0x42, 0x2D, 0xCE, 0x45, 0x2A, 0xD2, 0x47, 0x28, 0xD7, 0x48, 0x26, 0xDB, 0x4A, 
   0x24, 0xDF, 0x4B, 0x22, 0xE4, 0x4D, 0x21, 0xE9, 0x4E, 0x1F, 0xED, 0x4F, 0x1E, 0xF2, 0x4F, 0x1D, 
   0xF7, 0x50, 0x1D, 0xFC, 0x50, 0x1C, 0x00, 0x50, 0x1C, 0x04, 0x50, 0x1C, 0x09, 0x50, 0x1D, 0x0E, 
   0x4F, 0x1D, 0x13, 0x4F, 0x1E, 0x17, 0x4E, 0x1F, 0x1C, 0x4D, 0x21, 0x21, 0x4B, 0x22, 0x25, 0x4A, 
   0x24, 0x29, 0x48, 0x26, 0x2E, 0x47, 0x28, 0x32, 0x45, 0x2A, 0x36, 0x42, 0x2D, 0x3A, 0x40, 0x30, 
   0x3E, 0x3E, 0x33, 0x41, 0x3B, 0x36, 0x45, 0x38, 0x39, 0x48, 0x36, 0x3D, 0x4B, 0x33, 0x40, 0x4E, 
   0x2F, 0x44, 0x51, 0x2C, 0x48, 0x54, 0x29, 0x4C, 0x56, 0x25, 0x50, 0x58, 0x22, 0x55, 0x5A, 0x1E, 
   0x59, 0x5C, 0x1B, 0x5D, 0x5D, 0x17, 0x62, 0x5F, 0x13, 0x67, 0x60, 0x0F, 0x6B, 0x61, 0x0B, 0x70, 
   0x61, 0x07, 0x75, 0x62, 0x03, 0x7A, 0x5E, 0x00, 0x7E, 0x5D, 0xFC, 0x83, 0x5D, 0xF8, 0x88, 0x5D, 
   0xF4, 0x8C, 0x5C, 0xF0, 0x91, 0x5B, 0xEC, 0x95, 0x5A, 0xE8, 0x9A, 0x58, 0xE4, 0x9E, 0x56, 0xE0, 
   0xA3, 0x55, 0xDC, 0xA7, 0x52, 0xD8, 0xAB, 0x50, 0xD5, 0xAF, 0x4E, 0xD1, 0xB3, 0x4B, 0xCE, 0xB7, 
   0x48, 0xCA, 0xBA, 0x45, 0xC7, 0xBE, 0x42, 0xC4, 0xC1, 0x3F, 0xC1, 0xC4, 0x3B, 0xBF, 0xC7, 0x38, 
   0xBC, 0xCA, 0x34, 0xBA, 0xCD, 0x30, 0xB7, 0xCF, 0x2C, 0xB5, 0xD1, 0x28, 0xB3, 0xD4, 0x24, 0xB2, 
   0xD5, 0x1F, 0xB0, 0xD7, 0x1B, 0xAF, 0xD9, 0x16, 0xAE, 0xDA, 0x12, 0xAD, 0xDB, 0x0D, 0xAC, 0xDC, 
   0x09, 0xAC, 0xDC, 0x04, 0xAB, 0xDC, 0x00, 0xAB, 0xDD, 0xFC, 0xAB, 0xDC, 0xF7, 0xAC, 0xDC, 0xF3, 
   0xAC, 0xDC, 0xEE, 0xAD, 0xDB, 0xEA, 0xAE, 0xDA, 0xE5, 0xAF, 0xD9, 0xE1, 0xB0, 0xD7, 0xDC, 0xB2, 
   0xD5, 0xD8, 0xB3, 0xD4, 0xD4, 0xB5, 0xD1, 0xD0, 0xB7, 0xCF, 0xCC, 0xBA, 0xCD, 0xC8, 0xBC, 0xCA, 
   0xC5, 0xBF, 0xC7, 0xC1, 0xC1, 0xC4, 0xBE, 0xC4, 0xC1, 0xBB, 0xC7, 0xBE, 0xB8, 0xCA, 0xBA, 0xB5, 
   0xCE, 0xB7, 0xB2, 0xD1, 0xB3, 0xB0, 0xD5, 0xAF, 0xAE, 0xD8, 0xAB, 0xAB, 0xDC, 0xA7, 0xAA, 0xE0, 
   0xA3, 0xA8, 0xE4, 0x9E, 0xA6, 0xE8, 0x9A, 0xA5, 0xEC, 0x95, 0xA4, 0xF0, 0x91, 0xA3, 0xF4, 0x8C, 
   0xA3, 0xF8, 0x88, 0xA3, 0xFC, 0x83, 0xA2, 0x00, 0x7F, 0xA3, 0x04, 0x7A, 0xA3, 0x08, 0x75, 0xA3, 
   0x0C, 0x71, 0xA4, 0x10, 0x6C, 0xA5, 0x14, 0x68, 0xA6, 0x18, 0x63, 0xA8, 0x1C, 0x5F, 0xAA, 0x20, 
   0x5A, 0xAB, 0x24, 0x56, 0xAE, 0x28, 0x52, 0xB0, 0x2B, 0x4E, 0xB2, 0x2F, 0x4A, 0xB5, 0x32, 0x46, 
   0xB8, 0x36, 0x43, 0xBB, 0x39, 0x3F, 0xBE, 0x3C, 0x3C, 0xC1, 0x3F, 0x39, 0xC5, 0x41, 0x36, 0xC8, 
   0x44, 0x33, 0xCC, 0x46, 0x30, 0xD0, 0x49, 0x2E, 0xD4, 0x4B, 0x2C, 0xD8, 0x4D, 0x29, 0xDC, 0x4E, 
   0x28, 0xE1, 0x50, 0x26, 0xE5, 0x51, 0x24, 0xEA, 0x52, 0x23, 0xEE, 0x53, 0x22, 0xF3, 0x54, 0x21, 
   0xF7, 0x54, 0x21, 0xFC, 0x55, 0x21, 0x00, 0x55, 0x20, 0x04, 0x55, 0x21, 0x09, 0x54, 0x21, 0x0D, 
   0x54, 0x21, 0x12, 0x53, 0x22, 0x16, 0x52, 0x23, 0x1B, 0x51, 0x24, 0x1F, 0x50, 0x26, 0x24, 0x4E, 
   0x28, 0x28, 0x4D, 0x29, 0x2C, 0x4B, 0x2C, 0x30, 0x49, 0x2E, 0x34, 0x46, 0x30, 0x38, 0x44, 0x33, 
   0x3B, 0x41, 0x36, 0x3F, 0x3F, 0x39, 0x42, 0x3C, 0x3C, 0x45, 0x39, 0x3F, 0x48, 0x36, 0x43, 0x4B, 
   0x32, 0x46, 0x4E, 0x2F, 0x4A, 0x50, 0x2B, 0x4E, 0x52, 0x28, 0x52, 0x55, 0x24, 0x56, 0x56, 0x20, 
   0x5A, 0x58, 0x1C, 0x5F, 0x5A, 0x18, 0x63, 0x5B, 0x14, 0x68, 0x5C, 0x10, 0x6C, 0x5D, 0x0C, 0x71, 
   0x5D, 0x08, 0x75, 0x5D, 0x04, 0x7A, 0x59, 0x00, 0x7E, 0x59, 0xFC, 0x83, 0x59, 0xF8, 0x87, 0x58, 
   0xF3, 0x8C, 0x58, 0xEF, 0x90, 0x57, 0xEB, 0x94, 0x55, 0xE6, 0x99, 0x54, 0xE2, 0x9D, 0x52, 0xDE, 
   0xA1, 0x51, 0xDA, 0xA5, 0x4F, 0xD6, 0xA9, 0x4D, 0xD2, 0xAD, 0x4A, 0xCF, 0xB0, 0x48, 0xCB, 0xB4, 
   0x45, 0xC8, 0xB7, 0x42, 0xC4, 0xBB, 0x3F, 0xC1, 0xBE, 0x3C, 0xBE, 0xC1, 0x38, 0xBB, 0xC4, 0x35, 
   0xB8, 0xC7, 0x31, 0xB6, 0xC9, 0x2E, 0xB3, 0xCC, 0x2A, 0xB1, 0xCE, 0x26, 0xAF, 0xD0, 0x22, 0xAE, 
   0xD1, 0x1E, 0xAC, 0xD3, 0x1A, 0xAB, 0xD4, 0x15, 0xA9, 0xD6, 0x11, 0xA8, 0xD7, 0x0D, 0xA8, 0xD7, 
   0x08, 0xA7, 0xD8, 0x04, 0xA7, 0xD8, 0x00, 0xA7, 0xD8, 0xFC, 0xA7, 0xD8, 0xF8, 0xA7, 0xD8, 0xF3, 
   0xA8, 0xD7, 0xEF, 0xA8, 0xD7, 0xEB, 0xA9, 0xD6, 0xE6, 0xAB, 0xD4, 0xE2, 0xAC, 0xD3, 0xDE, 0xAE, 
   0xD1, 0xDA, 0xAF, 0xD0, 0xD6, 0xB1, 0xCE, 0xD2, 0xB3, 0xCC, 0xCF, 0xB6, 0xC9, 0xCB, 0xB8, 0xC7, 
   0xC8, 0xBB, 0xC4, 0xC4, 0xBE, 0xC1, 0xC1, 0xC1, 0xBE, 0xBE, 0xC4, 0xBB, 0xBB, 0xC8, 0xB7, 0xB8, 
   0xCB, 0xB4, 0xB6, 0xCF, 0xB0, 0xB3, 0xD2, 0xAD, 0xB1, 0xD6, 0xA9, 0xAF, 0xDA, 0xA5, 0xAE, 0xDE, 
   0xA1, 0xAC, 0xE2, 0x9D, 0xAB, 0xE6, 0x99, 0xA9, 0xEB, 0x94, 0xA8, 0xEF, 0x90, 0xA8, 0xF3, 0x8C, 
   0xA7, 0xF8, 0x87, 0xA7, 0xFC, 0x83, 0xA7, 0x00, 0x7F, 0xA7, 0x04, 0x7A, 0xA7, 0x08, 0x76, 0xA8, 
   0x0D, 0x71, 0xA8, 0x11, 0x6D, 0xA9, 0x15, 0x69, 0xAB, 0x1A, 0x64, 0xAC, 0x1E, 0x60, 0xAE, 0x22, 
   0x5C, 0xAF, 0x26, 0x58, 0xB1, 0x2A, 0x54, 0xB3, 0x2E, 0x50, 0xB6, 0x31, 0x4D, 0xB8, 0x35, 0x49, 
   0xBB, 0x38, 0x46, 0xBE, 0x3C, 0x42, 0xC1, 0x3F, 0x3F, 0xC4, 0x42, 0x3C, 0xC8, 0x45, 0x39, 0xCB, 
   0x48, 0x36, 0xCF, 0x4A, 0x34, 0xD2, 0x4D, 0x31, 0xD6, 0x4F, 0x2F, 0xDA, 0x51, 0x2D, 0xDE, 0x52, 
   0x2C, 0xE2, 0x54, 0x2A, 0xE6, 0x55, 0x29, 0xEB, 0x57, 0x27, 0xEF, 0x58, 0x26, 0xF3, 0x58, 0x26, 
   0xF8, 0x59, 0x25, 0xFC, 0x59, 0x25, 0x00, 0x59, 0x25, 0x04, 0x59, 0x25, 0x08, 0x59, 0x25, 0x0D, 
   0x58, 0x26, 0x11, 0x58, 0x26, 0x15, 0x57, 0x27, 0x1A, 0x55, 0x29, 0x1E, 0x54, 0x2A, 0x22, 0x52, 
   0x2C, 0x26, 0x51, 0x2D, 0x2A, 0x4F, 0x2F, 0x2E, 0x4D, 0x31, 0x31, 0x4A, 0x34, 0x35, 0x48, 0x36, 
   0x38, 0x45, 0x39, 0x3C, 0x42, 0x3C, 0x3F, 0x3F, 0x3F, 0x42, 0x3C, 0x42, 0x45, 0x38, 0x46, 0x48, 
   0x35, 0x49, 0x4A, 0x31, 0x4D, 0x4D, 0x2E, 0x50, 0x4F, 0x2A, 0x54, 0x51, 0x26, 0x58, 0x52, 0x22, 
   0x5C, 0x54, 0x1E, 0x60, 0x55, 0x1A, 0x64, 0x57, 0x15, 0x69, 0x58, 0x11, 0x6D, 0x58, 0x0D, 0x71, 
   0x59, 0x08, 0x76, 0x59, 0x04, 0x7A, 0x55, 0x00, 0x7E, 0x55, 0xFC, 0x83, 0x54, 0xF7, 0x87, 0x54, 
   0xF3, 0x8B, 0x53, 0xEE, 0x8F, 0x52, 0xEA, 0x93, 0x51, 0xE5, 0x97, 0x50, 0xE1, 0x9B, 0x4E, 0xDC, 
   0x9F, 0x4D, 0xD8, 0xA3, 0x4B, 0xD4, 0xA7, 0x49, 0xD0, 0xAA, 0x46, 0xCC, 0xAE, 0x44, 0xC8, 0xB1, 
   0x41, 0xC5, 0xB5, 0x3F, 0xC1, 0xB8, 0x3C, 0xBE, 0xBB, 0x39, 0xBB, 0xBE, 0x36, 0xB8, 0xC0, 0x32, 
   0xB5, 0xC3, 0x2F, 0xB2, 0xC5, 0x2B, 0xB0, 0xC8, 0x28, 0xAE, 0xCA, 0x24, 0xAB, 0xCC, 0x20, 0xAA, 
   0xCD, 0x1C, 0xA8, 0xCF, 0x18, 0xA6, 0xD0, 0x14, 0xA5, 0xD1, 0x10, 0xA4, 0xD2, 0x0C, 0xA3, 0xD3, 
   0x08, 0xA3, 0xD3, 0x04, 0xA3, 0xD4, 0x00, 0xA2, 0xD4, 0xFC, 0xA3, 0xD4, 0xF8, 0xA3, 0xD3, 0xF4, 
   0xA3, 0xD3, 0xF0, 0xA4, 0xD2, 0xEC, 0xA5, 0xD1, 0xE8, 0xA6, 0xD0, 0xE4, 0xA8, 0xCF, 0xE0, 0xAA, 
   0xCD, 0xDC, 0xAB, 0xCC, 0xD8, 0xAE, 0xCA, 0xD5, 0xB0, 0xC8, 0xD1, 0xB2, 0xC5, 0xCE, 0xB5, 0xC3, 
   0xCA, 0xB8, 0xC0, 0xC7, 0xBB, 0xBE, 0xC4, 0xBE, 0xBB, 0xC1, 0xC1, 0xB8, 0xBF, 0xC5, 0xB5, 0xBC, 
   0xC8, 0xB1, 0xBA, 0xCC, 0xAE, 0xB7, 0xD0, 0xAA, 0xB5, 0xD4, 0xA7, 0xB3, 0xD8, 0xA3, 0xB2, 0xDC, 
   0x9F, 0xB0, 0xE1, 0x9B, 0xAF, 0xE5, 0x97, 0xAE, 0xEA, 0x93, 0xAD, 0xEE, 0x8F, 0xAC, 0xF3, 0x8B, 
   0xAC, 0xF7, 0x87, 0xAB, 0xFC, 0x83, 0xAB, 0x00, 0x7F, 0xAB, 0x04, 0x7A, 0xAC, 0x09, 0x76, 0xAC, 
   0x0D, 0x72, 0xAD, 0x12, 0x6E, 0xAE, 0x16, 0x6A, 0xAF, 0x1B, 0x66, 0xB0, 0x1F, 0x62, 0xB2, 0x24, 
   0x5E, 0xB3, 0x28, 0x5A, 0xB5, 0x2C, 0x56, 0xB7, 0x30, 0x53, 0xBA, 0x34, 0x4F, 0xBC, 0x38, 0x4C, 
   0xBF, 0x3B, 0x48, 0xC1, 0x3F, 0x45, 0xC4, 0x42, 0x42, 0xC7, 0x45, 0x3F, 0xCA, 0x48, 0x3D, 0xCE, 
   0x4B, 0x3A, 0xD1, 0x4E, 0x38, 0xD5, 0x50, 0x35, 0xD8, 0x52, 0x33, 0xDC, 0x55, 0x31, 0xE0, 0x56, 
   0x30, 0xE4, 0x58, 0x2E, 0xE8, 0x5A, 0x2D, 0xEC, 0x5B, 0x2C, 0xF0, 0x5C, 0x2B, 0xF4, 0x5D, 0x2A, 
   0xF8, 0x5D, 0x2A, 0xFC, 0x5D, 0x29, 0x00, 0x5E, 0x29, 0x04, 0x5D, 0x29, 0x08, 0x5D, 0x2A, 0x0C, 
   0x5D, 0x2A, 0x10, 0x5C, 0x2B, 0x14, 0x5B, 0x2C, 0x18, 0x5A, 0x2D, 0x1C, 0x58, 0x2E, 0x20, 0x56, 
   0x30, 0x24, 0x55, 0x31, 0x28, 0x52, 0x33, 0x2B, 0x50, 0x35, 0x2F, 0x4E, 0x38, 0x32, 0x4B, 0x3A, 
   0x36, 0x48, 0x3D, 0x39, 0x45, 0x3F, 0x3C, 0x42, 0x42, 0x3F, 0x3F, 0x45, 0x41, 0x3B, 0x48, 0x44, 
   0x38, 0x4C, 0x46, 0x34, 0x4F, 0x49, 0x30, 0x53, 0x4B, 0x2C, 0x56, 0x4D, 0x28, 0x5A, 0x4E, 0x24, 
   0x5E, 0x50, 0x1F, 0x62, 0x51, 0x1B, 0x66, 0x52, 0x16, 0x6A, 0x53, 0x12, 0x6E, 0x54, 0x0D, 0x72, 
   0x54, 0x09, 0x76, 0x55, 0x04, 0x7A, 0x50, 0x00, 0x7E, 0x50, 0xFC, 0x82, 0x50, 0xF7, 0x86, 0x4F, 
   0xF2, 0x8A, 0x4F, 0xED, 0x8E, 0x4E, 0xE9, 0x92, 0x4D, 0xE4, 0x96, 0x4B, 0xDF, 0x9A, 0x4A, 0xDB, 
   0x9D, 0x48, 0xD7, 0xA1, 0x47, 0xD2, 0xA4, 0x45, 0xCE, 0xA8, 0x42, 0xCA, 0xAB, 0x40, 0xC6, 0xAE, 
   0x3E, 0xC2, 0xB2, 0x3B, 0xBF, 0xB5, 0x38, 0xBB, 0xB7, 0x36, 0xB8, 0xBA, 0x33, 0xB5, 0xBD, 0x2F, 
   0xB2, 0xBF, 0x2C, 0xAF, 0xC1, 0x29, 0xAC, 0xC4, 0x25, 0xAA, 0xC6, 0x22, 0xA8, 0xC7, 0x1E, 0xA6, 
   0xC9, 0x1B, 0xA4, 0xCA, 0x17, 0xA3, 0xCC, 0x13, 0xA1, 0xCD, 0x0F, 0xA0, 0xCE, 0x0B, 0x9F, 0xCE, 
   0x07, 0x9F, 0xCF, 0x03, 0x9E, 0xCF, 0x00, 0x9E, 0xCF, 0xFD, 0x9E, 0xCF, 0xF9, 0x9F, 0xCF, 0xF5, 
   0x9F, 0xCE, 0xF1, 0xA0, 0xCE, 0xED, 0xA1, 0xCD, 0xE9, 0xA3, 0xCC, 0xE5, 0xA4, 0xCA, 0xE2, 0xA6, 
   0xC9, 0xDE, 0xA8, 0xC7, 0xDB, 0xAA, 0xC6, 0xD7, 0xAC, 0xC4, 0xD4, 0xAF, 0xC1, 0xD1, 0xB2, 0xBF, 
   0xCD, 0xB5, 0xBD, 0xCA, 0xB8, 0xBA, 0xC8, 0xBB, 0xB7, 0xC5, 0xBF, 0xB5, 0xC2, 0xC2, 0xB2, 0xC0, 
   0xC6, 0xAE, 0xBE, 0xCA, 0xAB, 0xBB, 0xCE, 0xA8, 0xB9, 0xD2, 0xA4, 0xB8, 0xD7, 0xA1, 0xB6, 0xDB, 
   0x9D, 0xB5, 0xDF, 0x9A, 0xB3, 0xE4, 0x96, 0xB2, 0xE9, 0x92, 0xB1, 0xED, 0x8E, 0xB1, 0xF2, 0x8A, 
   0xB0, 0xF7, 0x86, 0xB0, 0xFC, 0x82, 0xB0, 0x00, 0x7F, 0xB0, 0x04, 0x7B, 0xB0, 0x09, 0x77, 0xB1, 
   0x0E, 0x73, 0xB1, 0x13, 0x6F, 0xB2, 0x17, 0x6B, 0xB3, 0x1C, 0x67, 0xB5, 0x21, 0x63, 0xB6, 0x25, 
   0x60, 0xB8, 0x29, 0x5C, 0xB9, 0x2E, 0x59, 0xBB, 0x32, 0x55, 0xBE, 0x36, 0x52, 0xC0, 0x3A, 0x4F, 
   0xC2, 0x3E, 0x4B, 0xC5, 0x41, 0x48, 0xC8, 0x45, 0x46, 0xCA, 0x48, 0x43, 0xCD, 0x4B, 0x40, 0xD1, 
   0x4E, 0x3E, 0xD4, 0x51, 0x3C, 0xD7, 0x54, 0x39, 0xDB, 0x56, 0x37, 0xDE, 0x58, 0x36, 0xE2, 0x5A, 
   0x34, 0xE5, 0x5C, 0x33, 0xE9, 0x5D, 0x31, 0xED, 0x5F, 0x30, 0xF1, 0x60, 0x2F, 0xF5, 0x61, 0x2F, 
   0xF9, 0x61, 0x2E, 0xFD, 0x62, 0x2E, 0x00, 0x62, 0x2E, 0x03, 0x62, 0x2E, 0x07, 0x61, 0x2E, 0x0B, 
   0x61, 0x2F, 0x0F, 0x60, 0x2F, 0x13, 0x5F, 0x30, 0x17, 0x5D, 0x31, 0x1B, 0x5C, 0x33, 0x1E, 0x5A, 
   0x34, 0x22, 0x58, 0x36, 0x25, 0x56, 0x37, 0x29, 0x54, 0x39, 0x2C, 0x51, 0x3C, 0x2F, 0x4E, 0x3E, 
   0x33, 0x4B, 0x40, 0x36, 0x48, 0x43, 0x38, 0x45, 0x46, 0x3B, 0x41, 0x48, 0x3E, 0x3E, 0x4B, 0x40, 
   0x3A, 0x4F, 0x42, 0x36, 0x52, 0x45, 0x32, 0x55, 0x47, 0x2E, 0x59, 0x48, 0x29, 0x5C, 0x4A, 0x25, 
   0x60, 0x4B, 0x21, 0x63, 0x4D, 0x1C, 0x67, 0x4E, 0x17, 0x6B, 0x4F, 0x13, 0x6F, 0x4F, 0x0E, 0x73, 
   0x50, 0x09, 0x77, 0x50, 0x04, 0x7B, 0x4B, 0x00, 0x7E, 0x4B, 0xFB, 0x82, 0x4B, 0xF7, 0x86, 0x4A, 
   0xF2, 0x8A, 0x4A, 0xED, 0x8D, 0x49, 0xE8, 0x91, 0x48, 0xE3, 0x94, 0x47, 0xDE, 0x98, 0x45, 0xD9, 
   0x9B, 0x44, 0xD5, 0x9F, 0x42, 0xD0, 0xA2, 0x40, 0xCC, 0xA5, 0x3E, 0xC8, 0xA9, 0x3C, 0xC4, 0xAC, 
   0x3A, 0xC0, 0xAE, 0x38, 0xBC, 0xB1, 0x35, 0xB8, 0xB4, 0x32, 0xB5, 0xB7, 0x2F, 0xB2, 0xB9, 0x2D, 
   0xAF, 0xBB, 0x2A, 0xAC, 0xBD, 0x26, 0xA9, 0xBF, 0x23, 0xA7, 0xC1, 0x20, 0xA4, 0xC3, 0x1C, 0xA2, 
   0xC4, 0x19, 0xA0, 0xC6, 0x15, 0x9F, 0xC7, 0x12, 0x9E, 0xC8, 0x0E, 0x9C, 0xC9, 0x0B, 0x9C, 0xC9, 
   0x07, 0x9B, 0xCA, 0x03, 0x9B, 0xCA, 0x00, 0x9A, 0xCA, 0xFD, 0x9B, 0xCA, 0xF9, 0x9B, 0xCA, 0xF5, 
   0x9C, 0xC9, 0xF2, 0x9C, 0xC9, 0xEE, 0x9E, 0xC8, 0xEB, 0x9F, 0xC7, 0xE7, 0xA0, 0xC6, 0xE4, 0xA2, 
   0xC4, 0xE0, 0xA4, 0xC3, 0xDD, 0xA7, 0xC1, 0xDA, 0xA9, 0xBF, 0xD6, 0xAC, 0xBD, 0xD3, 0xAF, 0xBB, 
   0xD1, 0xB2, 0xB9, 0xCE, 0xB5, 0xB7, 0xCB, 0xB8, 0xB4, 0xC8, 0xBC, 0xB1, 0xC6, 0xC0, 0xAE, 0xC4, 
   0xC4, 0xAC, 0xC2, 0xC8, 0xA9, 0xC0, 0xCC, 0xA5, 0xBE, 0xD0, 0xA2, 0xBC, 0xD5, 0x9F, 0xBB, 0xD9, 
   0x9B, 0xB9, 0xDE, 0x98, 0xB8, 0xE3, 0x94, 0xB7, 0xE8, 0x91, 0xB6, 0xED, 0x8D, 0xB6, 0xF2, 0x8A, 
   0xB5, 0xF7, 0x86, 0xB5, 0xFB, 0x82, 0xB5, 0x00, 0x7F, 0xB5, 0x05, 0x7B, 0xB5, 0x09, 0x77, 0xB6, 
   0x0E, 0x73, 0xB6, 0x13, 0x70, 0xB7, 0x18, 0x6C, 0xB8, 0x1D, 0x69, 0xB9, 0x22, 0x65, 0xBB, 0x27, 
   0x62, 0xBC, 0x2B, 0x5E, 0xBE, 0x30, 0x5B, 0xC0, 0x34, 0x58, 0xC2, 0x38, 0x54, 0xC4, 0x3C, 0x51, 
   0xC6, 0x40, 0x4F, 0xC8, 0x44, 0x4C, 0xCB, 0x48, 0x49, 0xCE, 0x4B, 0x46, 0xD1, 0x4E, 0x44, 0xD3, 
   0x51, 0x42, 0xD6, 0x54, 0x40, 0xDA, 0x57, 0x3E, 0xDD, 0x59, 0x3C, 0xE0, 0x5C, 0x3A, 0xE4, 0x5E, 
   0x39, 0xE7, 0x60, 0x37, 0xEB, 0x61, 0x36, 0xEE, 0x62, 0x35, 0xF2, 0x64, 0x34, 0xF5, 0x64, 0x34, 
   0xF9, 0x65, 0x33, 0xFD, 0x65, 0x33, 0x00, 0x66, 0x33, 0x03, 0x65, 0x33, 0x07, 0x65, 0x33, 0x0B, 
   0x64, 0x34, 0x0E, 0x64, 0x34, 0x12, 0x62, 0x35, 0x15, 0x61, 0x36, 0x19, 0x60, 0x37, 0x1C, 0x5E, 
   0x39, 0x20, 0x5C, 0x3A, 0x23, 0x59, 0x3C, 0x26, 0x57, 0x3E, 0x2A, 0x54, 0x40, 0x2D, 0x51, 0x42, 
   0x2F, 0x4E, 0x44, 0x32, 0x4B, 0x46, 0x35, 0x48, 0x49, 0x38, 0x44, 0x4C, 0x3A, 0x40, 0x4F, 0x3C, 
   0x3C, 0x51, 0x3E, 0x38, 0x54, 0x40, 0x34, 0x58, 0x42, 0x30, 0x5B, 0x44, 0x2B, 0x5E, 0x45, 0x27, 
   0x62, 0x47, 0x22, 0x65, 0x48, 0x1D, 0x69, 0x49, 0x18, 0x6C, 0x4A, 0x13, 0x70, 0x4A, 0x0E, 0x73, 
   0x4B, 0x09, 0x77, 0x4B, 0x05, 0x7B, 0x46, 0x00, 0x7E, 0x46, 0xFB, 0x82, 0x46, 0xF6, 0x85, 0x45, 
   0xF1, 0x89, 0x45, 0xEC, 0x8C, 0x44, 0xE7, 0x90, 0x43, 0xE2, 0x93, 0x42, 0xDD, 0x96, 0x41, 0xD8, 
   0x9A, 0x3F, 0xD3, 0x9D, 0x3E, 0xCF, 0xA0, 0x3C, 0xCA, 0xA3, 0x3A, 0xC6, 0xA6, 0x38, 0xC2, 0xA9, 
   0x36, 0xBE, 0xAB, 0x34, 0xBA, 0xAE, 0x31, 0xB6, 0xB0, 0x2F, 0xB2, 0xB3, 0x2C, 0xAF, 0xB5, 0x2A, 
   0xAC, 0xB7, 0x27, 0xA9, 0xB9, 0x24, 0xA6, 0xBB, 0x21, 0xA3, 0xBD, 0x1E, 0xA1, 0xBE, 0x1B, 0x9F, 
   0xC0, 0x17, 0x9D, 0xC1, 0x14, 0x9B, 0xC2, 0x11, 0x9A, 0xC3, 0x0D, 0x99, 0xC4, 0x0A, 0x98, 0xC4, 
   0x06, 0x97, 0xC5, 0x03, 0x97, 0xC5, 0x00, 0x97, 0xC5, 0xFD, 0x97, 0xC5, 0xFA, 0x97, 0xC5, 0xF6, 
   0x98, 0xC4, 0xF3, 0x99, 0xC4, 0xEF, 0x9A, 0xC3, 0xEC, 0x9B, 0xC2, 0xE9, 0x9D, 0xC1, 0xE5, 0x9F, 
   0xC0, 0xE2, 0xA1, 0xBE, 0xDF, 0xA3, 0xBD, 0xDC, 0xA6, 0xBB, 0xD9, 0xA9, 0xB9, 0xD6, 0xAC, 0xB7, 
   0xD4, 0xAF, 0xB5, 0xD1, 0xB2, 0xB3, 0xCF, 0xB6, 0xB0, 0xCC, 0xBA, 0xAE, 0xCA, 0xBE, 0xAB, 0xC8, 
   0xC2, 0xA9, 0xC6, 0xC6, 0xA6, 0xC4, 0xCA, 0xA3, 0xC2, 0xCF, 0xA0, 0xC1, 0xD3, 0x9D, 0xBF, 0xD8, 
   0x9A, 0xBE, 0xDD, 0x96, 0xBD, 0xE2, 0x93, 0xBC, 0xE7, 0x90, 0xBB, 0xEC, 0x8C, 0xBB, 0xF1, 0x89, 
   0xBA, 0xF6, 0x85, 0xBA, 0xFB, 0x82, 0xBA, 0x00, 0x7F, 0xBA, 0x05, 0x7B, 0xBA, 0x0A, 0x78, 0xBB, 
   0x0F, 0x74, 0xBB, 0x14, 0x71, 0xBC, 0x19, 0x6D, 0xBD, 0x1E, 0x6A, 0xBE, 0x23, 0x67, 0xBF, 0x28, 
   0x63, 0xC1, 0x2D, 0x60, 0xC2, 0x31, 0x5D, 0xC4, 0x36, 0x5A, 0xC6, 0x3A, 0x57, 0xC8, 0x3E, 0x54, 
   0xCA, 0x42, 0x52, 0xCC, 0x46, 0x4F, 0xCF, 0x4A, 0x4D, 0xD1, 0x4E, 0x4A, 0xD4, 0x51, 0x48, 0xD6, 
   0x54, 0x46, 0xD9, 0x57, 0x44, 0xDC, 0x5A, 0x42, 0xDF, 0x5D, 0x40, 0xE2, 0x5F, 0x3F, 0xE5, 0x61, 
   0x3D, 0xE9, 0x63, 0x3C, 0xEC, 0x65, 0x3B, 0xEF, 0x66, 0x3A, 0xF3, 0x67, 0x39, 0xF6, 0x68, 0x39, 
   0xFA, 0x69, 0x38, 0xFD, 0x69, 0x38, 0x00, 0x69, 0x38, 0x03, 0x69, 0x38, 0x06, 0x69, 0x38, 0x0A, 
   0x68, 0x39, 0x0D, 0x67, 0x39, 0x11, 0x66, 0x3A, 0x14, 0x65, 0x3B, 0x17, 0x63, 0x3C, 0x1B, 0x61, 
   0x3D, 0x1E, 0x5F, 0x3F, 0x21, 0x5D, 0x40, 0x24, 0x5A, 0x42, 0x27, 0x57, 0x44, 0x2A, 0x54, 0x46, 
   0x2C, 0x51, 0x48, 0x2F, 0x4E, 0x4A, 0x31, 0x4A, 0x4D, 0x34, 0x46, 0x4F, 0x36, 0x42, 0x52, 0x38, 
   0x3E, 0x54, 0x3A, 0x3A, 0x57, 0x3C, 0x36, 0x5A, 0x3E, 0x31, 0x5D, 0x3F, 0x2D, 0x60, 0x41, 0x28, 
   0x63, 0x42, 0x23, 0x67, 0x43, 0x1E, 0x6A, 0x44, 0x19, 0x6D, 0x45, 0x14, 0x71, 0x45, 0x0F, 0x74, 
   0x46, 0x0A, 0x78, 0x46, 0x05, 0x7B, 0x41, 0x00, 0x7E, 0x41, 0xFB, 0x82, 0x40, 0xF6, 0x85, 0x40, 
   0xF1, 0x88, 0x40, 0xEB, 0x8B, 0x3F, 0xE6, 0x8E, 0x3E, 0xE1, 0x91, 0x3D, 0xDC, 0x94, 0x3C, 0xD7, 
   0x97, 0x3B, 0xD2, 0x9A, 0x39, 0xCD, 0x9D, 0x38, 0xC8, 0xA0, 0x36, 0xC4, 0xA3, 0x34, 0xC0, 0xA5, 
   0x32, 0xBB, 0xA8, 0x30, 0xB7, 0xAA, 0x2E, 0xB3, 0xAD, 0x2B, 0xB0, 0xAF, 0x29, 0xAC, 0xB1, 0x26, 
   0xA9, 0xB3, 0x24, 0xA6, 0xB5, 0x21, 0xA3, 0xB7, 0x1E, 0xA0, 0xB8, 0x1B, 0x9E, 0xBA, 0x18, 0x9C, 
   0xBB, 0x15, 0x9A, 0xBC, 0x12, 0x98, 0xBD, 0x0F, 0x97, 0xBE, 0x0C, 0x96, 0xBF, 0x09, 0x95, 0xBF, 
   0x06, 0x94, 0xBF, 0x03, 0x94, 0xC0, 0x00, 0x94, 0xC0, 0xFD, 0x94, 0xC0, 0xFA, 0x94, 0xBF, 0xF7, 
   0x95, 0xBF, 0xF4, 0x96, 0xBF, 0xF1, 0x97, 0xBE, 0xEE, 0x98, 0xBD, 0xEB, 0x9A, 0xBC, 0xE8, 0x9C, 
   0xBB, 0xE5, 0x9E, 0xBA, 0xE2, 0xA0, 0xB8, 0xDF, 0xA3, 0xB7, 0xDC, 0xA6, 0xB5, 0xDA, 0xA9, 0xB3, 
   0xD7, 0xAC, 0xB1, 0xD5, 0xB0, 0xAF, 0xD2, 0xB3, 0xAD, 0xD0, 0xB7, 0xAA, 0xCE, 0xBB, 0xA8, 0xCC, 
   0xC0, 0xA5, 0xCA, 0xC4, 0xA3, 0xC8, 0xC8, 0xA0, 0xC7, 0xCD, 0x9D, 0xC5, 0xD2, 0x9A, 0xC4, 0xD7, 
   0x97, 0xC3, 0xDC, 0x94, 0xC2, 0xE1, 0x91, 0xC1, 0xE6, 0x8E, 0xC0, 0xEB, 0x8B, 0xC0, 0xF1, 0x88, 
   0xC0, 0xF6, 0x85, 0xBF, 0xFB, 0x82, 0xBF, 0x00, 0x7F, 0xBF, 0x05, 0x7B, 0xC0, 0x0A, 0x78, 0xC0, 
   0x0F, 0x75, 0xC0, 0x15, 0x72, 0xC1, 0x1A, 0x6F, 0xC2, 0x1F, 0x6C, 0xC3, 0x24, 0x69, 0xC4, 0x29, 
   0x66, 0xC5, 0x2E, 0x63, 0xC7, 0x33, 0x60, 0xC8, 0x38, 0x5D, 0xCA, 0x3C, 0x5A, 0xCC, 0x40, 0x58, 
   0xCE, 0x45, 0x55, 0xD0, 0x49, 0x53, 0xD2, 0x4D, 0x50, 0xD5, 0x50, 0x4E, 0xD7, 0x54, 0x4C, 0xDA, 
   0x57, 0x4A, 0xDC, 0x5A, 0x48, 0xDF, 0x5D, 0x46, 0xE2, 0x60, 0x45, 0xE5, 0x62, 0x43, 0xE8, 0x64, 
   0x42, 0xEB, 0x66, 0x41, 0xEE, 0x68, 0x40, 0xF1, 0x69, 0x3F, 0xF4, 0x6A, 0x3E, 0xF7, 0x6B, 0x3E, 
   0xFA, 0x6C, 0x3E, 0xFD, 0x6C, 0x3D, 0x00, 0x6C, 0x3D, 0x03, 0x6C, 0x3D, 0x06, 0x6C, 0x3E, 0x09, 
   0x6B, 0x3E, 0x0C, 0x6A, 0x3E, 0x0F, 0x69, 0x3F, 0x12, 0x68, 0x40, 0x15, 0x66, 0x41, 0x18, 0x64, 
   0x42, 0x1B, 0x62, 0x43, 0x1E, 0x60, 0x45, 0x21, 0x5D, 0x46, 0x24, 0x5A, 0x48, 0x26, 0x57, 0x4A, 
   0x29, 0x54, 0x4C, 0x2B, 0x50, 0x4E, 0x2E, 0x4D, 0x50, 0x30, 0x49, 0x53, 0x32, 0x45, 0x55, 0x34, 
   0x40, 0x58, 0x36, 0x3C, 0x5A, 0x38, 0x38, 0x5D, 0x39, 0x33, 0x60, 0x3B, 0x2E, 0x63, 0x3C, 0x29, 
   0x66, 0x3D, 0x24, 0x69, 0x3E, 0x1F, 0x6C, 0x3F, 0x1A, 0x6F, 0x40, 0x15, 0x72, 0x40, 0x0F, 0x75, 
   0x40, 0x0A, 0x78, 0x41, 0x05, 0x7B, 0x3B, 0x00, 0x7E, 0x3B, 0xFB, 0x81, 0x3B, 0xF6, 0x84, 0x3B, 
   0xF0, 0x87, 0x3A, 0xEB, 0x8A, 0x3A, 0xE5, 0x8D, 0x39, 0xE0, 0x90, 0x38, 0xDB, 0x93, 0x37, 0xD6, 
   0x95, 0x36, 0xD1, 0x98, 0x34, 0xCC, 0x9B, 0x33, 0xC7, 0x9D, 0x31, 0xC2, 0xA0, 0x30, 0xBE, 0xA2, 
   0x2E, 0xB9, 0xA4, 0x2C, 0xB5, 0xA7, 0x2A, 0xB1, 0xA9, 0x28, 0xAE, 0xAB, 0x25, 0xAA, 0xAD, 0x23, 
   0xA7, 0xAF, 0x21, 0xA3, 0xB0, 0x1E, 0xA0, 0xB2, 0x1C, 0x9E, 0xB3, 0x19, 0x9B, 0xB5, 0x16, 0x99, 
   0xB6, 0x14, 0x97, 0xB7, 0x11, 0x95, 0xB8, 0x0E, 0x94, 0xB9, 0x0B, 0x93, 0xB9, 0x08, 0x92, 0xBA, 
   0x05, 0x91, 0xBA, 0x02, 0x91, 0xBA, 0x00, 0x90, 0xBA, 0xFE, 0x91, 0xBA, 0xFB, 0x91, 0xBA, 0xF8, 
   0x92, 0xBA, 0xF5, 0x93, 0xB9, 0xF2, 0x94, 0xB9, 0xEF, 0x95, 0xB8, 0xEC, 0x97, 0xB7, 0xEA, 0x99, 
   0xB6, 0xE7, 0x9B, 0xB5, 0xE4, 0x9E, 0xB3, 0xE2, 0xA0, 0xB2, 0xDF, 0xA3, 0xB0, 0xDD, 0xA7, 0xAF, 
   0xDB, 0xAA, 0xAD, 0xD8, 0xAE, 0xAB, 0xD6, 0xB1, 0xA9, 0xD4, 0xB5, 0xA7, 0xD2, 0xB9, 0xA4, 0xD0, 
   0xBE, 0xA2, 0xCF, 0xC2, 0xA0, 0xCD, 0xC7, 0x9D, 0xCC, 0xCC, 0x9B, 0xCA, 0xD1, 0x98, 0xC9, 0xD6, 
   0x95, 0xC8, 0xDB, 0x93, 0xC7, 0xE0, 0x90, 0xC6, 0xE5, 0x8D, 0xC6, 0xEB, 0x8A, 0xC5, 0xF0, 0x87, 
   0xC5, 0xF6, 0x84, 0xC5, 0xFB, 0x81, 0xC5, 0x00, 0x7F, 0xC5, 0x05, 0x7C, 0xC5, 0x0A, 0x79, 0xC5, 
   0x10, 0x76, 0xC6, 0x15, 0x73, 0xC6, 0x1B, 0x70, 0xC7, 0x20, 0x6D, 0xC8, 0x25, 0x6A, 0xC9, 0x2A, 
   0x68, 0xCA, 0x2F, 0x65, 0xCC, 0x34, 0x62, 0xCD, 0x39, 0x60, 0xCF, 0x3E, 0x5D, 0xD0, 0x42, 0x5B, 
   0xD2, 0x47, 0x59, 0xD4, 0x4B, 0x56, 0xD6, 0x4F, 0x54, 0xD8, 0x52, 0x52, 0xDB, 0x56, 0x50, 0xDD, 
   0x59, 0x4E, 0xDF, 0x5D, 0x4D, 0xE2, 0x60, 0x4B, 0xE4, 0x62, 0x4A, 0xE7, 0x65, 0x48, 0xEA, 0x67, 
   0x47, 0xEC, 0x69, 0x46, 0xEF, 0x6B, 0x45, 0xF2, 0x6C, 0x44, 0xF5, 0x6D, 0x44, 0xF8, 0x6E, 0x43, 
   0xFB, 0x6F, 0x43, 0xFE, 0x6F, 0x43, 0x00, 0x70, 0x43, 0x02, 0x6F, 0x43, 0x05, 0x6F, 0x43, 0x08, 
   0x6E, 0x43, 0x0B, 0x6D, 0x44, 0x0E, 0x6C, 0x44, 0x11, 0x6B, 0x45, 0x14, 0x69, 0x46, 0x16, 0x67, 
   0x47, 0x19, 0x65, 0x48, 0x1C, 0x62, 0x4A, 0x1E, 0x60, 0x4B, 0x21, 0x5D, 0x4D, 0x23, 0x59, 0x4E, 
   0x25, 0x56, 0x50, 0x28, 0x52, 0x52, 0x2A, 0x4F, 0x54, 0x2C, 0x4B, 0x56, 0x2E, 0x47, 0x59, 0x30, 
   0x42, 0x5B, 0x31, 0x3E, 0x5D, 0x33, 0x39, 0x60, 0x34, 0x34, 0x62, 0x36, 0x2F, 0x65, 0x37, 0x2A, 
   0x68, 0x38, 0x25, 0x6A, 0x39, 0x20, 0x6D, 0x3A, 0x1B, 0x70, 0x3A, 0x15, 0x73, 0x3B, 0x10, 0x76, 
   0x3B, 0x0A, 0x79, 0x3B, 0x05, 0x7C, 0x36, 0x00, 0x7E, 0x36, 0xFB, 0x81, 0x36, 0xF5, 0x84, 0x35, 
   0xF0, 0x86, 0x35, 0xEA, 0x89, 0x34, 0xE5, 0x8C, 0x33, 0xDF, 0x8E, 0x33, 0xDA, 0x91, 0x32, 0xD5, 
   0x93, 0x31, 0xCF, 0x96, 0x2F, 0xCA, 0x98, 0x2E, 0xC5, 0x9A, 0x2D, 0xC1, 0x9D, 0x2B, 0xBC, 0x9F, 
   0x29, 0xB8, 0xA1, 0x28, 0xB3, 0xA3, 0x26, 0xAF, 0xA5, 0x24, 0xAB, 0xA7, 0x22, 0xA8, 0xA8, 0x20, 
   0xA4, 0xAA, 0x1E, 0xA1, 0xAC, 0x1B, 0x9E, 0xAD, 0x19, 0x9B, 0xAE, 0x17, 0x99, 0xB0, 0x14, 0x96, 
   0xB1, 0x12, 0x94, 0xB2, 0x0F, 0x93, 0xB2, 0x0D, 0x91, 0xB3, 0x0A, 0x90, 0xB4, 0x07, 0x8F, 0xB4, 
   0x05, 0x8E, 0xB5, 0x02, 0x8E, 0xB5, 0x00, 0x8E, 0xB5, 0xFE, 0x8E, 0xB5, 0xFB, 0x8E, 0xB5, 0xF9, 
   0x8F, 0xB4, 0xF6, 0x90, 0xB4, 0xF3, 0x91, 0xB3, 0xF1, 0x93, 0xB2, 0xEE, 0x94, 0xB2, 0xEC, 0x96, 
   0xB1, 0xE9, 0x99, 0xB0, 0xE7, 0x9B, 0xAE, 0xE5, 0x9E, 0xAD, 0xE2, 0xA1, 0xAC, 0xE0, 0xA4, 0xAA, 
   0xDE, 0xA8, 0xA8, 0xDC, 0xAB, 0xA7, 0xDA, 0xAF, 0xA5, 0xD8, 0xB3, 0xA3, 0xD7, 0xB8, 0xA1, 0xD5, 
   0xBC, 0x9F, 0xD3, 0xC1, 0x9D, 0xD2, 0xC5, 0x9A, 0xD1, 0xCA, 0x98, 0xCF, 0xCF, 0x96, 0xCE, 0xD5, 
   0x93, 0xCD, 0xDA, 0x91, 0xCD, 0xDF, 0x8E, 0xCC, 0xE5, 0x8C, 0xCB, 0xEA, 0x89, 0xCB, 0xF0, 0x86, 
   0xCA, 0xF5, 0x84, 0xCA, 0xFB, 0x81, 0xCA, 0x00, 0x7F, 0xCA, 0x05, 0x7C, 0xCA, 0x0B, 0x79, 0xCB, 
   0x10, 0x77, 0xCB, 0x16, 0x74, 0xCC, 0x1B, 0x71, 0xCD, 0x21, 0x6F, 0xCD, 0x26, 0x6C, 0xCE, 0x2B, 
   0x6A, 0xCF, 0x31, 0x67, 0xD1, 0x36, 0x65, 0xD2, 0x3B, 0x63, 0xD3, 0x3F, 0x60, 0xD5, 0x44, 0x5E, 
   0xD7, 0x48, 0x5C, 0xD8, 0x4D, 0x5A, 0xDA, 0x51, 0x58, 0xDC, 0x55, 0x56, 0xDE, 0x58, 0x55, 0xE0, 
   0x5C, 0x53, 0xE2, 0x5F, 0x51, 0xE5, 0x62, 0x50, 0xE7, 0x65, 0x4F, 0xE9, 0x67, 0x4D, 0xEC, 0x6A, 
   0x4C, 0xEE, 0x6C, 0x4B, 0xF1, 0x6D, 0x4B, 0xF3, 0x6F, 0x4A, 0xF6, 0x70, 0x49, 0xF9, 0x71, 0x49, 
   0xFB, 0x72, 0x48, 0xFE, 0x72, 0x48, 0x00, 0x72, 0x48, 0x02, 0x72, 0x48, 0x05, 0x72, 0x48, 0x07, 
   0x71, 0x49, 0x0A, 0x70, 0x49, 0x0D, 0x6F, 0x4A, 0x0F, 0x6D, 0x4B, 0x12, 0x6C, 0x4B, 0x14, 0x6A, 
   0x4C, 0x17, 0x67, 0x4D, 0x19, 0x65, 0x4F, 0x1B, 0x62, 0x50, 0x1E, 0x5F, 0x51, 0x20, 0x5C, 0x53, 
   0x22, 0x58, 0x55, 0x24, 0x55, 0x56, 0x26, 0x51, 0x58, 0x28, 0x4D, 0x5A, 0x29, 0x48, 0x5C, 0x2B, 
   0x44, 0x5E, 0x2D, 0x3F, 0x60, 0x2E, 0x3B, 0x63, 0x2F, 0x36, 0x65, 0x31, 0x31, 0x67, 0x32, 0x2B, 
   0x6A, 0x33, 0x26, 0x6C, 0x33, 0x21, 0x6F, 0x34, 0x1B, 0x71, 0x35, 0x16, 0x74, 0x35, 0x10, 0x77, 
   0x36, 0x0B, 0x79, 0x36, 0x05, 0x7C, 0x30, 0x00, 0x7E, 0x30, 0xFB, 0x81, 0x30, 0xF5, 0x83, 0x30, 
   0xEF, 0x86, 0x2F, 0xEA, 0x88, 0x2F, 0xE4, 0x8A, 0x2E, 0xDE, 0x8D, 0x2D, 0xD9, 0x8F, 0x2C, 0xD4, 
   0x91, 0x2B, 0xCE, 0x93, 0x2A, 0xC9, 0x95, 0x29, 0xC4, 0x97, 0x28, 0xBF, 0x9A, 0x27, 0xBB, 0x9B, 
   0x25, 0xB6, 0x9D, 0x24, 0xB2, 0x9F, 0x22, 0xAE, 0xA1, 0x20, 0xAA, 0xA3, 0x1E, 0xA6, 0xA4, 0x1C, 
   0xA2, 0xA6, 0x1B, 0x9F, 0xA7, 0x18, 0x9C, 0xA8, 0x16, 0x99, 0xA9, 0x14, 0x96, 0xAA, 0x12, 0x94, 
   0xAB, 0x10, 0x92, 0xAC, 0x0E, 0x90, 0xAD, 0x0B, 0x8F, 0xAE, 0x09, 0x8D, 0xAE, 0x07, 0x8C, 0xAF, 
   0x04, 0x8C, 0xAF, 0x02, 0x8B, 0xAF, 0x00, 0x8B, 0xAF, 0xFE, 0x8B, 0xAF, 0xFC, 0x8C, 0xAF, 0xF9, 
   0x8C, 0xAF, 0xF7, 0x8D, 0xAE, 0xF5, 0x8F, 0xAE, 0xF2, 0x90, 0xAD, 0xF0, 0x92, 0xAC, 0xEE, 0x94, 
   0xAB, 0xEC, 0x96, 0xAA, 0xEA, 0x99, 0xA9, 0xE8, 0x9C, 0xA8, 0xE5, 0x9F, 0xA7, 0xE4, 0xA2, 0xA6, 
   0xE2, 0xA6, 0xA4, 0xE0, 0xAA, 0xA3, 0xDE, 0xAE, 0xA1, 0xDC, 0xB2, 0x9F, 0xDB, 0xB6, 0x9D, 0xD9, 
   0xBB, 0x9B, 0xD8, 0xBF, 0x9A, 0xD7, 0xC4, 0x97, 0xD6, 0xC9, 0x95, 0xD5, 0xCE, 0x93, 0xD4, 0xD4, 
   0x91, 0xD3, 0xD9, 0x8F, 0xD2, 0xDE, 0x8D, 0xD1, 0xE4, 0x8A, 0xD1, 0xEA, 0x88, 0xD0, 0xEF, 0x86, 
   0xD0, 0xF5, 0x83, 0xD0, 0xFB, 0x81, 0xD0, 0x00, 0x7F, 0xD0, 0x05, 0x7C, 0xD0, 0x0B, 0x7A, 0xD0, 
   0x11, 0x77, 0xD1, 0x16, 0x75, 0xD1, 0x1C, 0x73, 0xD2, 0x22, 0x70, 0xD3, 0x27, 0x6E, 0xD4, 0x2C, 
   0x6C, 0xD5, 0x32, 0x6A, 0xD6, 0x37, 0x68, 0xD7, 0x3C, 0x66, 0xD8, 0x41, 0x63, 0xD9, 0x45, 0x62, 
   0xDB, 0x4A, 0x60, 0xDC, 0x4E, 0x5E, 0xDE, 0x52, 0x5C, 0xE0, 0x56, 0x5A, 0xE2, 0x5A, 0x59, 0xE4, 
   0x5E, 0x57, 0xE5, 0x61, 0x56, 0xE8, 0x64, 0x55, 0xEA, 0x67, 0x54, 0xEC, 0x6A, 0x53, 0xEE, 0x6C, 
   0x52, 0xF0, 0x6E, 0x51, 0xF2, 0x70, 0x50, 0xF5, 0x71, 0x4F, 0xF7, 0x73, 0x4F, 0xF9, 0x74, 0x4E, 
   0xFC, 0x74, 0x4E, 0xFE, 0x75, 0x4E, 0x00, 0x75, 0x4E, 0x02, 0x75, 0x4E, 0x04, 0x74, 0x4E, 0x07, 
   0x74, 0x4E, 0x09, 0x73, 0x4F, 0x0B, 0x71, 0x4F, 0x0E, 0x70, 0x50, 0x10, 0x6E, 0x51, 0x12, 0x6C, 
   0x52, 0x14, 0x6A, 0x53, 0x16, 0x67, 0x54, 0x18, 0x64, 0x55, 0x1B, 0x61, 0x56, 0x1C, 0x5E, 0x57, 
   0x1E, 0x5A, 0x59, 0x20, 0x56, 0x5A, 0x22, 0x52, 0x5C, 0x24, 0x4E, 0x5E, 0x25, 0x4A, 0x60, 0x27, 
   0x45, 0x62, 0x28, 0x41, 0x63, 0x29, 0x3C, 0x66, 0x2A, 0x37, 0x68, 0x2B, 0x32, 0x6A, 0x2C, 0x2C, 
   0x6C, 0x2D, 0x27, 0x6E, 0x2E, 0x22, 0x70, 0x2F, 0x1C, 0x73, 0x2F, 0x16, 0x75, 0x30, 0x11, 0x77, 
   0x30, 0x0B, 0x7A, 0x30, 0x05, 0x7C, 0x2A, 0x00, 0x7E, 0x2A, 0xFB, 0x81, 0x2A, 0xF5, 0x83, 0x2A, 
   0xEF, 0x85, 0x29, 0xE9, 0x87, 0x29, 0xE3, 0x89, 0x28, 0xDE, 0x8B, 0x28, 0xD8, 0x8D, 0x27, 0xD3, 
   0x8F, 0x26, 0xCD, 0x91, 0x25, 0xC8, 0x93, 0x24, 0xC3, 0x94, 0x23, 0xBE, 0x96, 0x22, 0xB9, 0x98, 
   0x21, 0xB5, 0x9A, 0x1F, 0xB0, 0x9B, 0x1E, 0xAC, 0x9D, 0x1C, 0xA8, 0x9E, 0x1B, 0xA4, 0xA0, 0x19, 
   0xA0, 0xA1, 0x17, 0x9D, 0xA2, 0x15, 0x9A, 0xA3, 0x14, 0x97, 0xA4, 0x12, 0x94, 0xA5, 0x10, 0x92, 
   0xA6, 0x0E, 0x90, 0xA7, 0x0C, 0x8E, 0xA7, 0x0A, 0x8D, 0xA8, 0x08, 0x8B, 0xA8, 0x06, 0x8A, 0xA9, 
   0x04, 0x89, 0xA9, 0x02, 0x89, 0xA9, 0x00, 0x89, 0xA9, 0xFE, 0x89, 0xA9, 0xFC, 0x89, 0xA9, 0xFA, 
   0x8A, 0xA9, 0xF8, 0x8B, 0xA8, 0xF6, 0x8D, 0xA8, 0xF4, 0x8E, 0xA7, 0xF2, 0x90, 0xA7, 0xF0, 0x92, 
   0xA6, 0xEE, 0x94, 0xA5, 0xEC, 0x97, 0xA4, 0xEB, 0x9A, 0xA3, 0xE9, 0x9D, 0xA2, 0xE7, 0xA0, 0xA1, 
   0xE5, 0xA4, 0xA0, 0xE4, 0xA8, 0x9E, 0xE2, 0xAC, 0x9D, 0xE1, 0xB0, 0x9B, 0xDF, 0xB5, 0x9A, 0xDE, 
   0xB9, 0x98, 0xDD, 0xBE, 0x96, 0xDC, 0xC3, 0x94, 0xDB, 0xC8, 0x93, 0xDA, 0xCD, 0x91, 0xD9, 0xD3, 
   0x8F, 0xD8, 0xD8, 0x8D, 0xD8, 0xDE, 0x8B, 0xD7, 0xE3, 0x89, 0xD7, 0xE9, 0x87, 0xD6, 0xEF, 0x85, 
   0xD6, 0xF5, 0x83, 0xD6, 0xFB, 0x81, 0xD6, 0x00, 0x7F, 0xD6, 0x05, 0x7C, 0xD6, 0x0B, 0x7A, 0xD6, 
   0x11, 0x78, 0xD7, 0x17, 0x76, 0xD7, 0x1D, 0x74, 0xD8, 0x22, 0x72, 0xD8, 0x28, 0x70, 0xD9, 0x2D, 
   0x6E, 0xDA, 0x33, 0x6C, 0xDB, 0x38, 0x6A, 0xDC, 0x3D, 0x69, 0xDD, 0x42, 0x67, 0xDE, 0x47, 0x65, 
   0xDF, 0x4B, 0x63, 0xE1, 0x50, 0x62, 0xE2, 0x54, 0x60, 0xE4, 0x58, 0x5F, 0xE5, 0x5C, 0x5D, 0xE7, 
   0x60, 0x5C, 0xE9, 0x63, 0x5B, 0xEB, 0x66, 0x5A, 0xEC, 0x69, 0x59, 0xEE, 0x6C, 0x58, 0xF0, 0x6E, 
   0x57, 0xF2, 0x70, 0x56, 0xF4, 0x72, 0x56, 0xF6, 0x73, 0x55, 0xF8, 0x75, 0x55, 0xFA, 0x76, 0x54, 
   0xFC, 0x77, 0x54, 0xFE, 0x77, 0x54, 0x00, 0x77, 0x54, 0x02, 0x77, 0x54, 0x04, 0x77, 0x54, 0x06, 
   0x76, 0x54, 0x08, 0x75, 0x55, 0x0A, 0x73, 0x55, 0x0C, 0x72, 0x56, 0x0E, 0x70, 0x56, 0x10, 0x6E, 
   0x57, 0x12, 0x6C, 0x58, 0x14, 0x69, 0x59, 0x15, 0x66, 0x5A, 0x17, 0x63, 0x5B, 0x19, 0x60, 0x5C, 
   0x1B, 0x5C, 0x5D, 0x1C, 0x58, 0x5F, 0x1E, 0x54, 0x60, 0x1F, 0x50, 0x62, 0x21, 0x4B, 0x63, 0x22, 
   0x47, 0x65, 0x23, 0x42, 0x67, 0x24, 0x3D, 0x69, 0x25, 0x38, 0x6A, 0x26, 0x33, 0x6C, 0x27, 0x2D, 
   0x6E, 0x28, 0x28, 0x70, 0x28, 0x22, 0x72, 0x29, 0x1D, 0x74, 0x29, 0x17, 0x76, 0x2A, 0x11, 0x78, 
   0x2A, 0x0B, 0x7A, 0x2A, 0x05, 0x7C, 0x24, 0x00, 0x7E, 0x24, 0xFB, 0x80, 0x24, 0xF5, 0x82, 0x24, 
   0xEF, 0x84, 0x24, 0xE9, 0x86, 0x23, 0xE3, 0x87, 0x23, 0xDD, 0x89, 0x22, 0xD8, 0x8B, 0x22, 0xD2, 
   0x8D, 0x21, 0xCD, 0x8E, 0x20, 0xC7, 0x90, 0x1F, 0xC2, 0x91, 0x1E, 0xBD, 0x93, 0x1D, 0xB8, 0x94, 
   0x1C, 0xB3, 0x96, 0x1B, 0xAF, 0x97, 0x1A, 0xAB, 0x99, 0x18, 0xA6, 0x9A, 0x17, 0xA3, 0x9B, 0x15, 
   0x9F, 0x9C, 0x14, 0x9B, 0x9D, 0x12, 0x98, 0x9E, 0x11, 0x95, 0x9F, 0x0F, 0x93, 0xA0, 0x0E, 0x90, 
   0xA1, 0x0C, 0x8E, 0xA1, 0x0A, 0x8C, 0xA2, 0x08, 0x8B, 0xA2, 0x07, 0x89, 0xA3, 0x05, 0x88, 0xA3, 
   0x03, 0x88, 0xA3, 0x01, 0x87, 0xA3, 0x00, 0x87, 0xA3, 0xFF, 0x87, 0xA3, 0xFD, 0x88, 0xA3, 0xFB, 
   0x88, 0xA3, 0xF9, 0x89, 0xA3, 0xF8, 0x8B, 0xA2, 0xF6, 0x8C, 0xA2, 0xF4, 0x8E, 0xA1, 0xF2, 0x90, 
   0xA1, 0xF1, 0x93, 0xA0, 0xEF, 0x95, 0x9F, 0xEE, 0x98, 0x9E, 0xEC, 0x9B, 0x9D, 0xEB, 0x9F, 0x9C, 
   0xE9, 0xA3, 0x9B, 0xE8, 0xA6, 0x9A, 0xE6, 0xAB, 0x99, 0xE5, 0xAF, 0x97, 0xE4, 0xB3, 0x96, 0xE3, 
   0xB8, 0x94, 0xE2, 0xBD, 0x93, 0xE1, 0xC2, 0x91, 0xE0, 0xC7, 0x90, 0xDF, 0xCD, 0x8E, 0xDE, 0xD2, 
   0x8D, 0xDE, 0xD8, 0x8B, 0xDD, 0xDD, 0x89, 0xDD, 0xE3, 0x87, 0xDC, 0xE9, 0x86, 0xDC, 0xEF, 0x84, 
   0xDC, 0xF5, 0x82, 0xDC, 0xFB, 0x80, 0xDC, 0x00, 0x7F, 0xDC, 0x05, 0x7D, 0xDC, 0x0B, 0x7B, 0xDC, 
   0x11, 0x79, 0xDC, 0x17, 0x77, 0xDD, 0x1D, 0x76, 0xDD, 0x23, 0x74, 0xDE, 0x28, 0x72, 0xDE, 0x2E, 
   0x70, 0xDF, 0x33, 0x6F, 0xE0, 0x39, 0x6D, 0xE1, 0x3E, 0x6C, 0xE2, 0x43, 0x6A, 0xE3, 0x48, 0x69, 
   0xE4, 0x4D, 0x67, 0xE5, 0x51, 0x66, 0xE6, 0x55, 0x64, 0xE8, 0x5A, 0x63, 0xE9, 0x5D, 0x62, 0xEB, 
   0x61, 0x61, 0xEC, 0x65, 0x60, 0xEE, 0x68, 0x5F, 0xEF, 0x6B, 0x5E, 0xF1, 0x6D, 0x5D, 0xF2, 0x70, 
   0x5C, 0xF4, 0x72, 0x5C, 0xF6, 0x74, 0x5B, 0xF8, 0x75, 0x5B, 0xF9, 0x77, 0x5A, 0xFB, 0x78, 0x5A, 
   0xFD, 0x78, 0x5A, 0xFF, 0x79, 0x5A, 0x00, 0x79, 0x5A, 0x01, 0x79, 0x5A, 0x03, 0x78, 0x5A, 0x05, 
   0x78, 0x5A, 0x07, 0x77, 0x5A, 0x08, 0x75, 0x5B, 0x0A, 0x74, 0x5B, 0x0C, 0x72, 0x5C, 0x0E, 0x70, 
   0x5C, 0x0F, 0x6D, 0x5D, 0x11, 0x6B, 0x5E, 0x12, 0x68, 0x5F, 0x14, 0x65, 0x60, 0x15, 0x61, 0x61, 
   0x17, 0x5D, 0x62, 0x18, 0x5A, 0x63, 0x1A, 0x55, 0x64, 0x1B, 0x51, 0x66, 0x1C, 0x4D, 0x67, 0x1D, 
   0x48, 0x69, 0x1E, 0x43, 0x6A, 0x1F, 0x3E, 0x6C, 0x20, 0x39, 0x6D, 0x21, 0x33, 0x6F, 0x22, 0x2E, 
   0x70, 0x22, 0x28, 0x72, 0x23, 0x23, 0x74, 0x23, 0x1D, 0x76, 0x24, 0x17, 0x77, 0x24, 0x11, 0x79, 
   0x24, 0x0B, 0x7B, 0x24, 0x05, 0x7D, 0x1E, 0x00, 0x7E, 0x1E, 0xFA, 0x80, 0x1E, 0xF4, 0x82, 0x1E, 
   0xEE, 0x83, 0x1E, 0xE8, 0x85, 0x1D, 0xE3, 0x86, 0x1D, 0xDD, 0x87, 0x1D, 0xD7, 0x89, 0x1C, 0xD1, 
   0x8A, 0x1B, 0xCC, 0x8C, 0x1B, 0xC6, 0x8D, 0x1A, 0xC1, 0x8E, 0x19, 0xBC, 0x90, 0x18, 0xB7, 0x91, 
   0x17, 0xB2, 0x92, 0x16, 0xAE, 0x93, 0x15, 0xA9, 0x94, 0x14, 0xA5, 0x95, 0x13, 0xA1, 0x96, 0x12, 
   0x9E, 0x97, 0x11, 0x9A, 0x98, 0x0F, 0x97, 0x99, 0x0E, 0x94, 0x9A, 0x0D, 0x91, 0x9A, 0x0B, 0x8F, 
   0x9B, 0x0A, 0x8D, 0x9C, 0x08, 0x8B, 0x9C, 0x07, 0x89, 0x9C, 0x06, 0x88, 0x9D, 0x04, 0x87, 0x9D, 
   0x03, 0x86, 0x9D, 0x01, 0x85, 0x9D, 0x00, 0x85, 0x9D, 0xFF, 0x85, 0x9D, 0xFD, 0x86, 0x9D, 0xFC, 
   0x87, 0x9D, 0xFA, 0x88, 0x9D, 0xF9, 0x89, 0x9C, 0xF8, 0x8B, 0x9C, 0xF6, 0x8D, 0x9C, 0xF5, 0x8F, 
   0x9B, 0xF3, 0x91, 0x9A, 0xF2, 0x94, 0x9A, 0xF1, 0x97, 0x99, 0xEF, 0x9A, 0x98, 0xEE, 0x9E, 0x97, 
   0xED, 0xA1, 0x96, 0xEC, 0xA5, 0x95, 0xEB, 0xA9, 0x94, 0xEA, 0xAE, 0x93, 0xE9, 0xB2, 0x92, 0xE8, 
   0xB7, 0x91, 0xE7, 0xBC, 0x90, 0xE6, 0xC1, 0x8E, 0xE5, 0xC6, 0x8D, 0xE5, 0xCC, 0x8C, 0xE4, 0xD1, 
   0x8A, 0xE3, 0xD7, 0x89, 0xE3, 0xDD, 0x87, 0xE3, 0xE3, 0x86, 0xE2, 0xE8, 0x85, 0xE2, 0xEE, 0x83, 
   0xE2, 0xF4, 0x82, 0xE2, 0xFA, 0x80, 0xE2, 0x00, 0x7F, 0xE2, 0x06, 0x7D, 0xE2, 0x0C, 0x7B, 0xE2, 
   0x12, 0x7A, 0xE2, 0x18, 0x78, 0xE3, 0x1D, 0x77, 0xE3, 0x23, 0x76, 0xE3, 0x29, 0x74, 0xE4, 0x2F, 
   0x73, 0xE5, 0x34, 0x71, 0xE5, 0x3A, 0x70, 0xE6, 0x3F, 0x6F, 0xE7, 0x44, 0x6D, 0xE8, 0x49, 0x6C, 
   0xE9, 0x4E, 0x6B, 0xEA, 0x52, 0x6A, 0xEB, 0x57, 0x69, 0xEC, 0x5B, 0x68, 0xED, 0x5F, 0x67, 0xEE, 
   0x62, 0x66, 0xEF, 0x66, 0x65, 0xF1, 0x69, 0x64, 0xF2, 0x6C, 0x63, 0xF3, 0x6F, 0x63, 0xF5, 0x71, 
   0x62, 0xF6, 0x73, 0x61, 0xF8, 0x75, 0x61, 0xF9, 0x77, 0x61, 0xFA, 0x78, 0x60, 0xFC, 0x79, 0x60, 
   0xFD, 0x7A, 0x60, 0xFF, 0x7B, 0x60, 0x00, 0x7B, 0x60, 0x01, 0x7B, 0x60, 0x03, 0x7A, 0x60, 0x04, 
   0x79, 0x60, 0x06, 0x78, 0x60, 0x07, 0x77, 0x61, 0x08, 0x75, 0x61, 0x0A, 0x73, 0x61, 0x0B, 0x71, 
   0x62, 0x0D, 0x6F, 0x63, 0x0E, 0x6C, 0x63, 0x0F, 0x69, 0x64, 0x11, 0x66, 0x65, 0x12, 0x62, 0x66, 
   0x13, 0x5F, 0x67, 0x14, 0x5B, 0x68, 0x15, 0x57, 0x69, 0x16, 0x52, 0x6A, 0x17, 0x4E, 0x6B, 0x18, 
   0x49, 0x6C, 0x19, 0x44, 0x6D, 0x1A, 0x3F, 0x6F, 0x1B, 0x3A, 0x70, 0x1B, 0x34, 0x71, 0x1C, 0x2F, 
   0x73, 0x1D, 0x29, 0x74, 0x1D, 0x23, 0x76, 0x1D, 0x1D, 0x77, 0x1E, 0x18, 0x78, 0x1E, 0x12, 0x7A, 
   0x1E, 0x0C, 0x7B, 0x1E, 0x06, 0x7D, 0x18, 0x00, 0x7E, 0x18, 0xFA, 0x80, 0x18, 0xF4, 0x81, 0x18, 
   0xEE, 0x82, 0x18, 0xE8, 0x83, 0x18, 0xE2, 0x85, 0x17, 0xDC, 0x86, 0x17, 0xD7, 0x87, 0x16, 0xD1, 
   0x88, 0x16, 0xCB, 0x89, 0x15, 0xC6, 0x8A, 0x15, 0xC0, 0x8B, 0x14, 0xBB, 0x8C, 0x13, 0xB6, 0x8D, 
   0x13, 0xB1, 0x8E, 0x12, 0xAD, 0x8F, 0x11, 0xA8, 0x90, 0x10, 0xA4, 0x91, 0x0F, 0xA0, 0x92, 0x0E, 
   0x9C, 0x92, 0x0D, 0x99, 0x93, 0x0C, 0x96, 0x94, 0x0B, 0x93, 0x94, 0x0A, 0x90, 0x95, 0x09, 0x8D, 
   0x95, 0x08, 0x8B, 0x96, 0x07, 0x89, 0x96, 0x06, 0x88, 0x97, 0x04, 0x86, 0x97, 0x03, 0x85, 0x97, 
   0x02, 0x85, 0x97, 0x01, 0x84, 0x97, 0x00, 0x84, 0x97, 0xFF, 0x84, 0x97, 0xFE, 0x85, 0x97, 0xFD, 
   0x85, 0x97, 0xFC, 0x86, 0x97, 0xFA, 0x88, 0x97, 0xF9, 0x89, 0x96, 0xF8, 0x8B, 0x96, 0xF7, 0x8D, 
   0x95, 0xF6, 0x90, 0x95, 0xF5, 0x93, 0x94, 0xF4, 0x96, 0x94, 0xF3, 0x99, 0x93, 0xF2, 0x9C, 0x92, 
   0xF1, 0xA0, 0x92, 0xF0, 0xA4, 0x91, 0xEF, 0xA8, 0x90, 0xEE, 0xAD, 0x8F, 0xED, 0xB1, 0x8E, 0xED, 
   0xB6, 0x8D, 0xEC, 0xBB, 0x8C, 0xEB, 0xC0, 0x8B, 0xEB, 0xC6, 0x8A, 0xEA, 0xCB, 0x89, 0xEA, 0xD1, 
   0x88, 0xE9, 0xD7, 0x87, 0xE9, 0xDC, 0x86, 0xE8, 0xE2, 0x85, 0xE8, 0xE8, 0x83, 0xE8, 0xEE, 0x82, 
   0xE8, 0xF4, 0x81, 0xE8, 0xFA, 0x80, 0xE8, 0x00, 0x7F, 0xE8, 0x06, 0x7D, 0xE8, 0x0C, 0x7C, 0xE8, 
   0x12, 0x7B, 0xE8, 0x18, 0x7A, 0xE8, 0x1E, 0x78, 0xE9, 0x24, 0x77, 0xE9, 0x29, 0x76, 0xEA, 0x2F, 
   0x75, 0xEA, 0x35, 0x74, 0xEB, 0x3A, 0x73, 0xEB, 0x40, 0x72, 0xEC, 0x45, 0x71, 0xED, 0x4A, 0x70, 
   0xED, 0x4F, 0x6F, 0xEE, 0x53, 0x6E, 0xEF, 0x58, 0x6D, 0xF0, 0x5C, 0x6C, 0xF1, 0x60, 0x6B, 0xF2, 
   0x64, 0x6B, 0xF3, 0x67, 0x6A, 0xF4, 0x6A, 0x69, 0xF5, 0x6D, 0x69, 0xF6, 0x70, 0x68, 0xF7, 0x73, 
   0x68, 0xF8, 0x75, 0x67, 0xF9, 0x77, 0x67, 0xFA, 0x78, 0x66, 0xFC, 0x7A, 0x66, 0xFD, 0x7B, 0x66, 
   0xFE, 0x7B, 0x66, 0xFF, 0x7C, 0x66, 0x00, 0x7C, 0x66, 0x01, 0x7C, 0x66, 0x02, 0x7B, 0x66, 0x03, 
   0x7B, 0x66, 0x04, 0x7A, 0x66, 0x06, 0x78, 0x66, 0x07, 0x77, 0x67, 0x08, 0x75, 0x67, 0x09, 0x73, 
   0x68, 0x0A, 0x70, 0x68, 0x0B, 0x6D, 0x69, 0x0C, 0x6A, 0x69, 0x0D, 0x67, 0x6A, 0x0E, 0x64, 0x6B, 
   0x0F, 0x60, 0x6B, 0x10, 0x5C, 0x6C, 0x11, 0x58, 0x6D, 0x12, 0x53, 0x6E, 0x13, 0x4F, 0x6F, 0x13, 
   0x4A, 0x70, 0x14, 0x45, 0x71, 0x15, 0x40, 0x72, 0x15, 0x3A, 0x73, 0x16, 0x35, 0x74, 0x16, 0x2F, 
   0x75, 0x17, 0x29, 0x76, 0x17, 0x24, 0x77, 0x18, 0x1E, 0x78, 0x18, 0x18, 0x7A, 0x18, 0x12, 0x7B, 
   0x18, 0x0C, 0x7C, 0x18, 0x06, 0x7D, 0x12, 0x00, 0x7E, 0x12, 0xFA, 0x7F, 0x12, 0xF4, 0x80, 0x12, 
   0xEE, 0x81, 0x12, 0xE8, 0x82, 0x12, 0xE2, 0x83, 0x11, 0xDC, 0x84, 0x11, 0xD6, 0x85, 0x11, 0xD0, 
   0x86, 0x10, 0xCB, 0x86, 0x10, 0xC5, 0x87, 0x0F, 0xC0, 0x88, 0x0F, 0xBB, 0x89, 0x0E, 0xB6, 0x8A, 
   0x0E, 0xB1, 0x8A, 0x0D, 0xAC, 0x8B, 0x0D, 0xA8, 0x8C, 0x0C, 0xA3, 0x8C, 0x0B, 0x9F, 0x8D, 0x0B, 
   0x9C, 0x8D, 0x0A, 0x98, 0x8E, 0x09, 0x95, 0x8E, 0x08, 0x92, 0x8F, 0x07, 0x8F, 0x8F, 0x07, 0x8C, 
   0x90, 0x06, 0x8A, 0x90, 0x05, 0x88, 0x90, 0x04, 0x87, 0x91, 0x03, 0x85, 0x91, 0x02, 0x84, 0x91, 
   0x01, 0x83, 0x91, 0x00, 0x83, 0x91, 0x00, 0x83, 0x91, 0x00, 0x83, 0x91, 0xFF, 0x83, 0x91, 0xFE, 
   0x84, 0x91, 0xFD, 0x85, 0x91, 0xFC, 0x87, 0x91, 0xFB, 0x88, 0x90, 0xFA, 0x8A, 0x90, 0xF9, 0x8C, 
   0x90, 0xF9, 0x8F, 0x8F, 0xF8, 0x92, 0x8F, 0xF7, 0x95, 0x8E, 0xF6, 0x98, 0x8E, 0xF5, 0x9C, 0x8D, 
   0xF5, 0x9F, 0x8D, 0xF4, 0xA3, 0x8C, 0xF3, 0xA8, 0x8C, 0xF3, 0xAC, 0x8B, 0xF2, 0xB1, 0x8A, 0xF2, 
   0xB6, 0x8A, 0xF1, 0xBB, 0x89, 0xF1, 0xC0, 0x88, 0xF0, 0xC5, 0x87, 0xF0, 0xCB, 0x86, 0xEF, 0xD0, 
   0x86, 0xEF, 0xD6, 0x85, 0xEF, 0xDC, 0x84, 0xEE, 0xE2, 0x83, 0xEE, 0xE8, 0x82, 0xEE, 0xEE, 0x81, 
   0xEE, 0xF4, 0x80, 0xEE, 0xFA, 0x7F, 0xEE, 0x00, 0x7F, 0xEE, 0x06, 0x7E, 0xEE, 0x0C, 0x7D, 0xEE, 
   0x12, 0x7C, 0xEE, 0x18, 0x7B, 0xEE, 0x1E, 0x7A, 0xEF, 0x24, 0x79, 0xEF, 0x2A, 0x78, 0xEF, 0x30, 
   0x77, 0xF0, 0x35, 0x77, 0xF0, 0x3B, 0x76, 0xF1, 0x40, 0x75, 0xF1, 0x45, 0x74, 0xF2, 0x4A, 0x73, 
   0xF2, 0x4F, 0x73, 0xF3, 0x54, 0x72, 0xF3, 0x58, 0x71, 0xF4, 0x5D, 0x71, 0xF5, 0x61, 0x70, 0xF5, 
   0x64, 0x70, 0xF6, 0x68, 0x6F, 0xF7, 0x6B, 0x6F, 0xF8, 0x6E, 0x6E, 0xF9, 0x71, 0x6E, 0xF9, 0x74, 
   0x6D, 0xFA, 0x76, 0x6D, 0xFB, 0x78, 0x6D, 0xFC, 0x79, 0x6C, 0xFD, 0x7B, 0x6C, 0xFE, 0x7C, 0x6C, 
   0xFF, 0x7D, 0x6C, 0x00, 0x7D, 0x6C, 0x00, 0x7D, 0x6C, 0x00, 0x7D, 0x6C, 0x01, 0x7D, 0x6C, 0x02, 
   0x7C, 0x6C, 0x03, 0x7B, 0x6C, 0x04, 0x79, 0x6C, 0x05, 0x78, 0x6D, 0x06, 0x76, 0x6D, 0x07, 0x74, 
   0x6D, 0x07, 0x71, 0x6E, 0x08, 0x6E, 0x6E, 0x09, 0x6B, 0x6F, 0x0A, 0x68, 0x6F, 0x0B, 0x64, 0x70, 
   0x0B, 0x61, 0x70, 0x0C, 0x5D, 0x71, 0x0D, 0x58, 0x71, 0x0D, 0x54, 0x72, 0x0E, 0x4F, 0x73, 0x0E, 
   0x4A, 0x73, 0x0F, 0x45, 0x74, 0x0F, 0x40, 0x75, 0x10, 0x3B, 0x76, 0x10, 0x35, 0x77, 0x11, 0x30, 
   0x77, 0x11, 0x2A, 0x78, 0x11, 0x24, 0x79, 0x12, 0x1E, 0x7A, 0x12, 0x18, 0x7B, 0x12, 0x12, 0x7C, 
   0x12, 0x0C, 0x7D, 0x12, 0x06, 0x7E, 0x0C, 0x00, 0x7E, 0x0C, 0xFA, 0x7F, 0x0C, 0xF4, 0x80, 0x0C, 
   0xEE, 0x80, 0x0C, 0xE8, 0x81, 0x0C, 0xE2, 0x82, 0x0B, 0xDC, 0x82, 0x0B, 0xD6, 0x83, 0x0B, 0xD0, 
   0x83, 0x0B, 0xCA, 0x84, 0x0A, 0xC5, 0x84, 0x0A, 0xC0, 0x85, 0x0A, 0xBA, 0x85, 0x09, 0xB5, 0x86, 
   0x09, 0xB0, 0x86, 0x09, 0xAC, 0x87, 0x08, 0xA7, 0x87, 0x08, 0xA3, 0x88, 0x07, 0x9F, 0x88, 0x07, 
   0x9B, 0x88, 0x06, 0x97, 0x89, 0x06, 0x94, 0x89, 0x05, 0x91, 0x89, 0x05, 0x8E, 0x8A, 0x04, 0x8C, 
   0x8A, 0x04, 0x89, 0x8A, 0x03, 0x88, 0x8A, 0x03, 0x86, 0x8B, 0x02, 0x85, 0x8B, 0x01, 0x83, 0x8B, 
   0x01, 0x83, 0x8B, 0x00, 0x82, 0x8B, 0x00, 0x82, 0x8B, 0x00, 0x82, 0x8B, 0xFF, 0x83, 0x8B, 0xFF, 
   0x83, 0x8B, 0xFE, 0x85, 0x8B, 0xFD, 0x86, 0x8B, 0xFD, 0x88, 0x8A, 0xFC, 0x89, 0x8A, 0xFC, 0x8C, 
   0x8A, 0xFB, 0x8E, 0x8A, 0xFB, 0x91, 0x89, 0xFA, 0x94, 0x89, 0xFA, 0x97, 0x89, 0xF9, 0x9B, 0x88, 
   0xF9, 0x9F, 0x88, 0xF8, 0xA3, 0x88, 0xF8, 0xA7, 0x87, 0xF7, 0xAC, 0x87, 0xF7, 0xB0, 0x86, 0xF7, 
   0xB5, 0x86, 0xF6, 0xBA, 0x85, 0xF6, 0xC0, 0x85, 0xF6, 0xC5, 0x84, 0xF5, 0xCA, 0x84, 0xF5, 0xD0, 
   0x83, 0xF5, 0xD6, 0x83, 0xF5, 0xDC, 0x82, 0xF4, 0xE2, 0x82, 0xF4, 0xE8, 0x81, 0xF4, 0xEE, 0x80, 
   0xF4, 0xF4, 0x80, 0xF4, 0xFA, 0x7F, 0xF4, 0x00, 0x7F, 0xF4, 0x06, 0x7E, 0xF4, 0x0C, 0x7D, 0xF4, 
   0x12, 0x7D, 0xF4, 0x18, 0x7C, 0xF4, 0x1E, 0x7B, 0xF5, 0x24, 0x7B, 0xF5, 0x2A, 0x7A, 0xF5, 0x30, 
   0x7A, 0xF5, 0x36, 0x79, 0xF6, 0x3B, 0x79, 0xF6, 0x40, 0x78, 0xF6, 0x46, 0x78, 0xF7, 0x4B, 0x77, 
   0xF7, 0x50, 0x77, 0xF7, 0x54, 0x76, 0xF8, 0x59, 0x76, 0xF8, 0x5D, 0x75, 0xF9, 0x61, 0x75, 0xF9, 
   0x65, 0x75, 0xFA, 0x69, 0x74, 0xFA, 0x6C, 0x74, 0xFB, 0x6F, 0x74, 0xFB, 0x72, 0x73, 0xFC, 0x74, 
   0x73, 0xFC, 0x77, 0x73, 0xFD, 0x78, 0x73, 0xFD, 0x7A, 0x72, 0xFE, 0x7B, 0x72, 0xFF, 0x7D, 0x72, 
   0xFF, 0x7D, 0x72, 0x00, 0x7E, 0x72, 0x00, 0x7E, 0x72, 0x00, 0x7E, 0x72, 0x01, 0x7D, 0x72, 0x01, 
   0x7D, 0x72, 0x02, 0x7B, 0x72, 0x03, 0x7A, 0x72, 0x03, 0x78, 0x73, 0x04, 0x77, 0x73, 0x04, 0x74, 
   0x73, 0x05, 0x72, 0x73, 0x05, 0x6F, 0x74, 0x06, 0x6C, 0x74, 0x06, 0x69, 0x74, 0x07, 0x65, 0x75, 
   0x07, 0x61, 0x75, 0x08, 0x5D, 0x75, 0x08, 0x59, 0x76, 0x09, 0x54, 0x76, 0x09, 0x50, 0x77, 0x09, 
   0x4B, 0x77, 0x0A, 0x46, 0x78, 0x0A, 0x40, 0x78, 0x0A, 0x3B, 0x79, 0x0B, 0x36, 0x79, 0x0B, 0x30, 
   0x7A, 0x0B, 0x2A, 0x7A, 0x0B, 0x24, 0x7B, 0x0C, 0x1E, 0x7B, 0x0C, 0x18, 0x7C, 0x0C, 0x12, 0x7D, 
   0x0C, 0x0C, 0x7D, 0x0C, 0x06, 0x7E, 0x06, 0x00, 0x7E, 0x06, 0xFA, 0x7F, 0x06, 0xF4, 0x7F, 0x06, 
   0xEE, 0x7F, 0x06, 0xE8, 0x80, 0x06, 0xE2, 0x80, 0x05, 0xDC, 0x80, 0x05, 0xD6, 0x81, 0x05, 0xD0, 
   0x81, 0x05, 0xCA, 0x81, 0x05, 0xC5, 0x81, 0x05, 0xBF, 0x82, 0x05, 0xBA, 0x82, 0x05, 0xB5, 0x82, 
   0x04, 0xB0, 0x82, 0x04, 0xAB, 0x83, 0x04, 0xA7, 0x83, 0x04, 0xA3, 0x83, 0x03, 0x9E, 0x83, 0x03, 
   0x9B, 0x84, 0x03, 0x97, 0x84, 0x03, 0x94, 0x84, 0x02, 0x91, 0x84, 0x02, 0x8E, 0x84, 0x02, 0x8B, 
   0x84, 0x02, 0x89, 0x84, 0x01, 0x87, 0x84, 0x01, 0x85, 0x85, 0x01, 0x84, 0x85, 0x00, 0x83, 0x85, 
   0x00, 0x82, 0x85, 0x00, 0x82, 0x85, 0x00, 0x82, 0x85, 0x00, 0x82, 0x85, 0x00, 0x82, 0x85, 0x00, 
   0x83, 0x85, 0xFF, 0x84, 0x85, 0xFF, 0x85, 0x85, 0xFF, 0x87, 0x84, 0xFE, 0x89, 0x84, 0xFE, 0x8B, 
   0x84, 0xFE, 0x8E, 0x84, 0xFE, 0x91, 0x84, 0xFD, 0x94, 0x84, 0xFD, 0x97, 0x84, 0xFD, 0x9B, 0x84, 
   0xFD, 0x9E, 0x83, 0xFC, 0xA3, 0x83, 0xFC, 0xA7, 0x83, 0xFC, 0xAB, 0x83, 0xFC, 0xB0, 0x82, 0xFB, 
   0xB5, 0x82, 0xFB, 0xBA, 0x82, 0xFB, 0xBF, 0x82, 0xFB, 0xC5, 0x81, 0xFB, 0xCA, 0x81, 0xFB, 0xD0, 
   0x81, 0xFB, 0xD6, 0x81, 0xFB, 0xDC, 0x80, 0xFA, 0xE2, 0x80, 0xFA, 0xE8, 0x80, 0xFA, 0xEE, 0x7F, 
   0xFA, 0xF4, 0x7F, 0xFA, 0xFA, 0x7F, 0xFA, 0x00, 0x7F, 0xFA, 0x06, 0x7E, 0xFA, 0x0C, 0x7E, 0xFA, 
   0x12, 0x7E, 0xFA, 0x18, 0x7D, 0xFA, 0x1E, 0x7D, 0xFB, 0x24, 0x7D, 0xFB, 0x2A, 0x7C, 0xFB, 0x30, 
   0x7C, 0xFB, 0x36, 0x7C, 0xFB, 0x3B, 0x7C, 0xFB, 0x41, 0x7B, 0xFB, 0x46, 0x7B, 0xFB, 0x4B, 0x7B, 
   0xFC, 0x50, 0x7B, 0xFC, 0x55, 0x7A, 0xFC, 0x59, 0x7A, 0xFC, 0x5D, 0x7A, 0xFD, 0x62, 0x7A, 0xFD, 
   0x65, 0x79, 0xFD, 0x69, 0x79, 0xFD, 0x6C, 0x79, 0xFE, 0x6F, 0x79, 0xFE, 0x72, 0x79, 0xFE, 0x75, 
   0x79, 0xFE, 0x77, 0x79, 0xFF, 0x79, 0x79, 0xFF, 0x7B, 0x78, 0xFF, 0x7C, 0x78, 0x00, 0x7D, 0x78, 
   0x00, 0x7E, 0x78, 0x00, 0x7E, 0x78, 0x00, 0x7E, 0x78, 0x00, 0x7E, 0x78, 0x00, 0x7E, 0x78, 0x00, 
   0x7D, 0x78, 0x01, 0x7C, 0x78, 0x01, 0x7B, 0x78, 0x01, 0x79, 0x79, 0x02, 0x77, 0x79, 0x02, 0x75, 
   0x79, 0x02, 0x72, 0x79, 0x02, 0x6F, 0x79, 0x03, 0x6C, 0x79, 0x03, 0x69, 0x79, 0x03, 0x65, 0x79, 
   0x03, 0x62, 0x7A, 0x04, 0x5D, 0x7A, 0x04, 0x59, 0x7A, 0x04, 0x55, 0x7A, 0x04, 0x50, 0x7B, 0x05, 
   0x4B, 0x7B, 0x05, 0x46, 0x7B, 0x05, 0x41, 0x7B, 0x05, 0x3B, 0x7C, 0x05, 0x36, 0x7C, 0x05, 0x30, 
   0x7C, 0x05, 0x2A, 0x7C, 0x05, 0x24, 0x7D, 0x06, 0x1E, 0x7D, 0x06, 0x18, 0x7D, 0x06, 0x12, 0x7E, 
   0x06, 0x0C, 0x7E, 0x06, 0x06, 0x7E, 0x00, 0x00, 0x7F, 0x00, 0xFA, 0x7F, 0x00, 0xF4, 0x7F, 0x00, 
   0xEE, 0x7F, 0x00, 0xE8, 0x7F, 0x00, 0xE2, 0x7F, 0x00, 0xDC, 0x7F, 0x00, 0xD6, 0x7F, 0x00, 0xD0, 
   0x7F, 0x00, 0xCA, 0x7F, 0x00, 0xC5, 0x7F, 0x00, 0xBF, 0x7F, 0x00, 0xBA, 0x7F, 0x00, 0xB5, 0x7F, 
   0x00, 0xB0, 0x7F, 0x00, 0xAB, 0x7F, 0x00, 0xA7, 0x7F, 0x00, 0xA2, 0x7F, 0x00, 0x9E, 0x7F, 0x00, 
   0x9A, 0x7F, 0x00, 0x97, 0x7F, 0x00, 0x94, 0x7F, 0x00, 0x90, 0x7F, 0x00, 0x8E, 0x7F, 0x00, 0x8B, 
   0x7F, 0x00, 0x89, 0x7F, 0x00, 0x87, 0x7F, 0x00, 0x85, 0x7F, 0x00, 0x84, 0x7F, 0x00, 0x83, 0x7F, 
   0x00, 0x82, 0x7F, 0x00, 0x82, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x82, 0x7F, 0x00, 0x82, 0x7F, 0x00, 
   0x83, 0x7F, 0x00, 0x84, 0x7F, 0x00, 0x85, 0x7F, 0x00, 0x87, 0x7F, 0x00, 0x89, 0x7F, 0x00, 0x8B, 
   0x7F, 0x00, 0x8E, 0x7F, 0x00, 0x90, 0x7F, 0x00, 0x94, 0x7F, 0x00, 0x97, 0x7F, 0x00, 0x9A, 0x7F, 
   0x00, 0x9E, 0x7F, 0x00, 0xA2, 0x7F, 0x00, 0xA7, 0x7F, 0x00, 0xAB, 0x7F, 0x00, 0xB0, 0x7F, 0x00, 
   0xB5, 0x7F, 0x00, 0xBA, 0x7F, 0x00, 0xBF, 0x7F, 0x00, 0xC5, 0x7F, 0x00, 0xCA, 0x7F, 0x00, 0xD0, 
   0x7F, 0x00, 0xD6, 0x7F, 0x00, 0xDC, 0x7F, 0x00, 0xE2, 0x7F, 0x00, 0xE8, 0x7F, 0x00, 0xEE, 0x7F, 
   0x00, 0xF4, 0x7F, 0x00, 0xFA, 0x7F, 0x00, 0x00, 0x7F, 0x00, 0x06, 0x7F, 0x00, 0x0C, 0x7F, 0x00, 
   0x12, 0x7F, 0x00, 0x18, 0x7F, 0x00, 0x1E, 0x7F, 0x00, 0x24, 0x7F, 0x00, 0x2A, 0x7F, 0x00, 0x30, 
   0x7F, 0x00, 0x36, 0x7F, 0x00, 0x3B, 0x7F, 0x00, 0x41, 0x7F, 0x00, 0x46, 0x7F, 0x00, 0x4B, 0x7F, 
   0x00, 0x50, 0x7F, 0x00, 0x55, 0x7F, 0x00, 0x59, 0x7F, 0x00, 0x5E, 0x7F, 0x00, 0x62, 0x7F, 0x00, 
   0x66, 0x7F, 0x00, 0x69, 0x7F, 0x00, 0x6C, 0x7F, 0x00, 0x70, 0x7F, 0x00, 0x72, 0x7F, 0x00, 0x75, 
   0x7F, 0x00, 0x77, 0x7F, 0x00, 0x79, 0x7F, 0x00, 0x7B, 0x7F, 0x00, 0x7C, 0x7F, 0x00, 0x7D, 0x7F, 
   0x00, 0x7E, 0x7F, 0x00, 0x7E, 0x7F, 0x00, 0x7F, 0x7F, 0x00, 0x7E, 0x7F, 0x00, 0x7E, 0x7F, 0x00, 
   0x7D, 0x7F, 0x00, 0x7C, 0x7F, 0x00, 0x7B, 0x7F, 0x00, 0x79, 0x7F, 0x00, 0x77, 0x7F, 0x00, 0x75, 
   0x7F, 0x00, 0x72, 0x7F, 0x00, 0x70, 0x7F, 0x00, 0x6C, 0x7F, 0x00, 0x69, 0x7F, 0x00, 0x66, 0x7F, 
   0x00, 0x62, 0x7F, 0x00, 0x5E, 0x7F, 0x00, 0x59, 0x7F, 0x00, 0x55, 0x7F, 0x00, 0x50, 0x7F, 0x00, 
   0x4B, 0x7F, 0x00, 0x46, 0x7F, 0x00, 0x41, 0x7F, 0x00, 0x3B, 0x7F, 0x00, 0x36, 0x7F, 0x00, 0x30, 
   0x7F, 0x00, 0x2A, 0x7F, 0x00, 0x24, 0x7F, 0x00, 0x1E, 0x7F, 0x00, 0x18, 0x7F, 0x00, 0x12, 0x7F, 
   0x00, 0x0C, 0x7F, 0x00, 0x06, 0x7F, 0xFA, 0x00, 0x7F, 0xFA, 0xFA, 0x7E, 0xFA, 0xF4, 0x7E, 0xFA, 
   0xEE, 0x7E, 0xFA, 0xE8, 0x7D, 0xFA, 0xE2, 0x7D, 0xFB, 0xDC, 0x7D, 0xFB, 0xD6, 0x7C, 0xFB, 0xD0, 
   0x7C, 0xFB, 0xCA, 0x7C, 0xFB, 0xC5, 0x7C, 0xFB, 0xBF, 0x7B, 0xFB, 0xBA, 0x7B, 0xFB, 0xB5, 0x7B, 
   0xFC, 0xB0, 0x7B, 0xFC, 0xAB, 0x7A, 0xFC, 0xA7, 0x7A, 0xFC, 0xA3, 0x7A, 0xFD, 0x9E, 0x7A, 0xFD, 
   0x9B, 0x79, 0xFD, 0x97, 0x79, 0xFD, 0x94, 0x79, 0xFE, 0x91, 0x79, 0xFE, 0x8E, 0x79, 0xFE, 0x8B, 
   0x79, 0xFE, 0x89, 0x79, 0xFF, 0x87, 0x79, 0xFF, 0x85, 0x78, 0xFF, 0x84, 0x78, 0x00, 0x83, 0x78, 
   0x00, 0x82, 0x78, 0x00, 0x82, 0x78, 0x00, 0x82, 0x78, 0x00, 0x82, 0x78, 0x00, 0x82, 0x78, 0x00, 
   0x83, 0x78, 0x01, 0x84, 0x78, 0x01, 0x85, 0x78, 0x01, 0x87, 0x79, 0x02, 0x89, 0x79, 0x02, 0x8B, 
   0x79, 0x02, 0x8E, 0x79, 0x02, 0x91, 0x79, 0x03, 0x94, 0x79, 0x03, 0x97, 0x79, 0x03, 0x9B, 0x79, 
   0x03, 0x9E, 0x7A, 0x04, 0xA3, 0x7A, 0x04, 0xA7, 0x7A, 0x04, 0xAB, 0x7A, 0x04, 0xB0, 0x7B, 0x05, 
   0xB5, 0x7B, 0x05, 0xBA, 0x7B, 0x05, 0xBF, 0x7B, 0x05, 0xC5, 0x7C, 0x05, 0xCA, 0x7C, 0x05, 0xD0, 
   0x7C, 0x05, 0xD6, 0x7C, 0x05, 0xDC, 0x7D, 0x06, 0xE2, 0x7D, 0x06, 0xE8, 0x7D, 0x06, 0xEE, 0x7E, 
   0x06, 0xF4, 0x7E, 0x06, 0xFA, 0x7E, 0x06, 0x00, 0x7F, 0x06, 0x06, 0x7F, 0x06, 0x0C, 0x7F, 0x06, 
   0x12, 0x7F, 0x06, 0x18, 0x80, 0x06, 0x1E, 0x80, 0x05, 0x24, 0x80, 0x05, 0x2A, 0x81, 0x05, 0x30, 
   0x81, 0x05, 0x36, 0x81, 0x05, 0x3B, 0x81, 0x05, 0x41, 0x82, 0x05, 0x46, 0x82, 0x05, 0x4B, 0x82, 
   0x04, 0x50, 0x82, 0x04, 0x55, 0x83, 0x04, 0x59, 0x83, 0x04, 0x5D, 0x83, 0x03, 0x62, 0x83, 0x03, 
   0x65, 0x84, 0x03, 0x69, 0x84, 0x03, 0x6C, 0x84, 0x02, 0x6F, 0x84, 0x02, 0x72, 0x84, 0x02, 0x75, 
   0x84, 0x02, 0x77, 0x84, 0x01, 0x79, 0x84, 0x01, 0x7B, 0x85, 0x01, 0x7C, 0x85, 0x00, 0x7D, 0x85, 
   0x00, 0x7E, 0x85, 0x00, 0x7E, 0x85, 0x00, 0x7E, 0x85, 0x00, 0x7E, 0x85, 0x00, 0x7E, 0x85, 0x00, 
   0x7D, 0x85, 0xFF, 0x7C, 0x85, 0xFF, 0x7B, 0x85, 0xFF, 0x79, 0x84, 0xFE, 0x77, 0x84, 0xFE, 0x75, 
   0x84, 0xFE, 0x72, 0x84, 0xFE, 0x6F, 0x84, 0xFD, 0x6C, 0x84, 0xFD, 0x69, 0x84, 0xFD, 0x65, 0x84, 
   0xFD, 0x62, 0x83, 0xFC, 0x5D, 0x83, 0xFC, 0x59, 0x83, 0xFC, 0x55, 0x83, 0xFC, 0x50, 0x82, 0xFB, 
   0x4B, 0x82, 0xFB, 0x46, 0x82, 0xFB, 0x41, 0x82, 0xFB, 0x3B, 0x81, 0xFB, 0x36, 0x81, 0xFB, 0x30, 
   0x81, 0xFB, 0x2A, 0x81, 0xFB, 0x24, 0x80, 0xFA, 0x1E, 0x80, 0xFA, 0x18, 0x80, 0xFA, 0x12, 0x7F, 
   0xFA, 0x0C, 0x7F, 0xFA, 0x06, 0x7F, 0xF4, 0x00, 0x7F, 0xF4, 0xFA, 0x7E, 0xF4, 0xF4, 0x7D, 0xF4, 
   0xEE, 0x7D, 0xF4, 0xE8, 0x7C, 0xF4, 0xE2, 0x7B, 0xF5, 0xDC, 0x7B, 0xF5, 0xD6, 0x7A, 0xF5, 0xD0, 
   0x7A, 0xF5, 0xCA, 0x79, 0xF6, 0xC5, 0x79, 0xF6, 0xC0, 0x78, 0xF6, 0xBA, 0x78, 0xF7, 0xB5, 0x77, 
   0xF7, 0xB0, 0x77, 0xF7, 0xAC, 0x76, 0xF8, 0xA7, 0x76, 0xF8, 0xA3, 0x75, 0xF9, 0x9F, 0x75, 0xF9, 
   0x9B, 0x75, 0xFA, 0x97, 0x74, 0xFA, 0x94, 0x74, 0xFB, 0x91, 0x74, 0xFB, 0x8E, 0x73, 0xFC, 0x8C, 
   0x73, 0xFC, 0x89, 0x73, 0xFD, 0x88, 0x73, 0xFD, 0x86, 0x72, 0xFE, 0x85, 0x72, 0xFF, 0x83, 0x72, 
   0xFF, 0x83, 0x72, 0x00, 0x82, 0x72, 0x00, 0x82, 0x72, 0x00, 0x82, 0x72, 0x01, 0x83, 0x72, 0x01, 
   0x83, 0x72, 0x02, 0x85, 0x72, 0x03, 0x86, 0x72, 0x03, 0x88, 0x73, 0x04, 0x89, 0x73, 0x04, 0x8C, 
   0x73, 0x05, 0x8E, 0x73, 0x05, 0x91, 0x74, 0x06, 0x94, 0x74, 0x06, 0x97, 0x74, 0x07, 0x9B, 0x75, 
   0x07, 0x9F, 0x75, 0x08, 0xA3, 0x75, 0x08, 0xA7, 0x76, 0x09, 0xAC, 0x76, 0x09, 0xB0, 0x77, 0x09, 
   0xB5, 0x77, 0x0A, 0xBA, 0x78, 0x0A, 0xC0, 0x78, 0x0A, 0xC5, 0x79, 0x0B, 0xCA, 0x79, 0x0B, 0xD0, 
   0x7A, 0x0B, 0xD6, 0x7A, 0x0B, 0xDC, 0x7B, 0x0C, 0xE2, 0x7B, 0x0C, 0xE8, 0x7C, 0x0C, 0xEE, 0x7D, 
   0x0C, 0xF4, 0x7D, 0x0C, 0xFA, 0x7E, 0x0C, 0x00, 0x7F, 0x0C, 0x06, 0x7F, 0x0C, 0x0C, 0x80, 0x0C, 
   0x12, 0x80, 0x0C, 0x18, 0x81, 0x0C, 0x1E, 0x82, 0x0B, 0x24, 0x82, 0x0B, 0x2A, 0x83, 0x0B, 0x30, 
   0x83, 0x0B, 0x36, 0x84, 0x0A, 0x3B, 0x84, 0x0A, 0x40, 0x85, 0x0A, 0x46, 0x85, 0x09, 0x4B, 0x86, 
   0x09, 0x50, 0x86, 0x09, 0x54, 0x87, 0x08, 0x59, 0x87, 0x08, 0x5D, 0x88, 0x07, 0x61, 0x88, 0x07, 
   0x65, 0x88, 0x06, 0x69, 0x89, 0x06, 0x6C, 0x89, 0x05, 0x6F, 0x89, 0x05, 0x72, 0x8A, 0x04, 0x74, 
   0x8A, 0x04, 0x77, 0x8A, 0x03, 0x78, 0x8A, 0x03, 0x7A, 0x8B, 0x02, 0x7B, 0x8B, 0x01, 0x7D, 0x8B, 
   0x01, 0x7D, 0x8B, 0x00, 0x7E, 0x8B, 0x00, 0x7E, 0x8B, 0x00, 0x7E, 0x8B, 0xFF, 0x7D, 0x8B, 0xFF, 
   0x7D, 0x8B, 0xFE, 0x7B, 0x8B, 0xFD, 0x7A, 0x8B, 0xFD, 0x78, 0x8A, 0xFC, 0x77, 0x8A, 0xFC, 0x74, 
   0x8A, 0xFB, 0x72, 0x8A, 0xFB, 0x6F, 0x89, 0xFA, 0x6C, 0x89, 0xFA, 0x69, 0x89, 0xF9, 0x65, 0x88, 
   0xF9, 0x61, 0x88, 0xF8, 0x5D, 0x88, 0xF8, 0x59, 0x87, 0xF7, 0x54, 0x87, 0xF7, 0x50, 0x86, 0xF7, 
   0x4B, 0x86, 0xF6, 0x46, 0x85, 0xF6, 0x40, 0x85, 0xF6, 0x3B, 0x84, 0xF5, 0x36, 0x84, 0xF5, 0x30, 
   0x83, 0xF5, 0x2A, 0x83, 0xF5, 0x24, 0x82, 0xF4, 0x1E, 0x82, 0xF4, 0x18, 0x81, 0xF4, 0x12, 0x80, 
   0xF4, 0x0C, 0x80, 0xF4, 0x06, 0x7F, 0xEE, 0x00, 0x7F, 0xEE, 0xFA, 0x7E, 0xEE, 0xF4, 0x7D, 0xEE, 
   0xEE, 0x7C, 0xEE, 0xE8, 0x7B, 0xEE, 0xE2, 0x7A, 0xEF, 0xDC, 0x79, 0xEF, 0xD6, 0x78, 0xEF, 0xD0, 
   0x77, 0xF0, 0xCB, 0x77, 0xF0, 0xC5, 0x76, 0xF1, 0xC0, 0x75, 0xF1, 0xBB, 0x74, 0xF2, 0xB6, 0x73, 
   0xF2, 0xB1, 0x73, 0xF3, 0xAC, 0x72, 0xF3, 0xA8, 0x71, 0xF4, 0xA3, 0x71, 0xF5, 0x9F, 0x70, 0xF5, 
   0x9C, 0x70, 0xF6, 0x98, 0x6F, 0xF7, 0x95, 0x6F, 0xF8, 0x92, 0x6E, 0xF9, 0x8F, 0x6E, 0xF9, 0x8C, 
   0x6D, 0xFA, 0x8A, 0x6D, 0xFB, 0x88, 0x6D, 0xFC, 0x87, 0x6C, 0xFD, 0x85, 0x6C, 0xFE, 0x84, 0x6C, 
   0xFF, 0x83, 0x6C, 0x00, 0x83, 0x6C, 0x00, 0x83, 0x6C, 0x00, 0x83, 0x6C, 0x01, 0x83, 0x6C, 0x02, 
   0x84, 0x6C, 0x03, 0x85, 0x6C, 0x04, 0x87, 0x6C, 0x05, 0x88, 0x6D, 0x06, 0x8A, 0x6D, 0x07, 0x8C, 
   0x6D, 0x07, 0x8F, 0x6E, 0x08, 0x92, 0x6E, 0x09, 0x95, 0x6F, 0x0A, 0x98, 0x6F, 0x0B, 0x9C, 0x70, 
   0x0B, 0x9F, 0x70, 0x0C, 0xA3, 0x71, 0x0D, 0xA8, 0x71, 0x0D, 0xAC, 0x72, 0x0E, 0xB1, 0x73, 0x0E, 
   0xB6, 0x73, 0x0F, 0xBB, 0x74, 0x0F, 0xC0, 0x75, 0x10, 0xC5, 0x76, 0x10, 0xCB, 0x77, 0x11, 0xD0, 
   0x77, 0x11, 0xD6, 0x78, 0x11, 0xDC, 0x79, 0x12, 0xE2, 0x7A, 0x12, 0xE8, 0x7B, 0x12, 0xEE, 0x7C, 
   0x12, 0xF4, 0x7D, 0x12, 0xFA, 0x7E, 0x12, 0x00, 0x7F, 0x12, 0x06, 0x7F, 0x12, 0x0C, 0x80, 0x12, 
   0x12, 0x81, 0x12, 0x18, 0x82, 0x12, 0x1E, 0x83, 0x11, 0x24, 0x84, 0x11, 0x2A, 0x85, 0x11, 0x30, 
   0x86, 0x10, 0x35, 0x86, 0x10, 0x3B, 0x87, 0x0F, 0x40, 0x88, 0x0F, 0x45, 0x89, 0x0E, 0x4A, 0x8A, 
   0x0E, 0x4F, 0x8A, 0x0D, 0x54, 0x8B, 0x0D, 0x58, 0x8C, 0x0C, 0x5D, 0x8C, 0x0B, 0x61, 0x8D, 0x0B, 
   0x64, 0x8D, 0x0A, 0x68, 0x8E, 0x09, 0x6B, 0x8E, 0x08, 0x6E, 0x8F, 0x07, 0x71, 0x8F, 0x07, 0x74, 
   0x90, 0x06, 0x76, 0x90, 0x05, 0x78, 0x90, 0x04, 0x79, 0x91, 0x03, 0x7B, 0x91, 0x02, 0x7C, 0x91, 
   0x01, 0x7D, 0x91, 0x00, 0x7D, 0x91, 0x00, 0x7D, 0x91, 0x00, 0x7D, 0x91, 0xFF, 0x7D, 0x91, 0xFE, 
   0x7C, 0x91, 0xFD, 0x7B, 0x91, 0xFC, 0x79, 0x91, 0xFB, 0x78, 0x90, 0xFA, 0x76, 0x90, 0xF9, 0x74, 
   0x90, 0xF9, 0x71, 0x8F, 0xF8, 0x6E, 0x8F, 0xF7, 0x6B, 0x8E, 0xF6, 0x68, 0x8E, 0xF5, 0x64, 0x8D, 
   0xF5, 0x61, 0x8D, 0xF4, 0x5D, 0x8C, 0xF3, 0x58, 0x8C, 0xF3, 0x54, 0x8B, 0xF2, 0x4F, 0x8A, 0xF2, 
   0x4A, 0x8A, 0xF1, 0x45, 0x89, 0xF1, 0x40, 0x88, 0xF0, 0x3B, 0x87, 0xF0, 0x35, 0x86, 0xEF, 0x30, 
   0x86, 0xEF, 0x2A, 0x85, 0xEF, 0x24, 0x84, 0xEE, 0x1E, 0x83, 0xEE, 0x18, 0x82, 0xEE, 0x12, 0x81, 
   0xEE, 0x0C, 0x80, 0xEE, 0x06, 0x7F, 0xE8, 0x00, 0x7F, 0xE8, 0xFA, 0x7D, 0xE8, 0xF4, 0x7C, 0xE8, 
   0xEE, 0x7B, 0xE8, 0xE8, 0x7A, 0xE8, 0xE2, 0x78, 0xE9, 0xDC, 0x77, 0xE9, 0xD7, 0x76, 0xEA, 0xD1, 
   0x75, 0xEA, 0xCB, 0x74, 0xEB, 0xC6, 0x73, 0xEB, 0xC0, 0x72, 0xEC, 0xBB, 0x71, 0xED, 0xB6, 0x70, 
   0xED, 0xB1, 0x6F, 0xEE, 0xAD, 0x6E, 0xEF, 0xA8, 0x6D, 0xF0, 0xA4, 0x6C, 0xF1, 0xA0, 0x6B, 0xF2, 
   0x9C, 0x6B, 0xF3, 0x99, 0x6A, 0xF4, 0x96, 0x69, 0xF5, 0x93, 0x69, 0xF6, 0x90, 0x68, 0xF7, 0x8D, 
   0x68, 0xF8, 0x8B, 0x67, 0xF9, 0x89, 0x67, 0xFA, 0x88, 0x66, 0xFC, 0x86, 0x66, 0xFD, 0x85, 0x66, 
   0xFE, 0x85, 0x66, 0xFF, 0x84, 0x66, 0x00, 0x84, 0x66, 0x01, 0x84, 0x66, 0x02, 0x85, 0x66, 0x03, 
   0x85, 0x66, 0x04, 0x86, 0x66, 0x06, 0x88, 0x66, 0x07, 0x89, 0x67, 0x08, 0x8B, 0x67, 0x09, 0x8D, 
   0x68, 0x0A, 0x90, 0x68, 0x0B, 0x93, 0x69, 0x0C, 0x96, 0x69, 0x0D, 0x99, 0x6A, 0x0E, 0x9C, 0x6B, 
   0x0F, 0xA0, 0x6B, 0x10, 0xA4, 0x6C, 0x11, 0xA8, 0x6D, 0x12, 0xAD, 0x6E, 0x13, 0xB1, 0x6F, 0x13, 
   0xB6, 0x70, 0x14, 0xBB, 0x71, 0x15, 0xC0, 0x72, 0x15, 0xC6, 0x73, 0x16, 0xCB, 0x74, 0x16, 0xD1, 
   0x75, 0x17, 0xD7, 0x76, 0x17, 0xDC, 0x77, 0x18, 0xE2, 0x78, 0x18, 0xE8, 0x7A, 0x18, 0xEE, 0x7B, 
   0x18, 0xF4, 0x7C, 0x18, 0xFA, 0x7D, 0x18, 0x00, 0x7F, 0x18, 0x06, 0x80, 0x18, 0x0C, 0x81, 0x18, 
   0x12, 0x82, 0x18, 0x18, 0x83, 0x18, 0x1E, 0x85, 0x17, 0x24, 0x86, 0x17, 0x29, 0x87, 0x16, 0x2F, 
   0x88, 0x16, 0x35, 0x89, 0x15, 0x3A, 0x8A, 0x15, 0x40, 0x8B, 0x14, 0x45, 0x8C, 0x13, 0x4A, 0x8D, 
   0x13, 0x4F, 0x8E, 0x12, 0x53, 0x8F, 0x11, 0x58, 0x90, 0x10, 0x5C, 0x91, 0x0F, 0x60, 0x92, 0x0E, 
   0x64, 0x92, 0x0D, 0x67, 0x93, 0x0C, 0x6A, 0x94, 0x0B, 0x6D, 0x94, 0x0A, 0x70, 0x95, 0x09, 0x73, 
   0x95, 0x08, 0x75, 0x96, 0x07, 0x77, 0x96, 0x06, 0x78, 0x97, 0x04, 0x7A, 0x97, 0x03, 0x7B, 0x97, 
   0x02, 0x7B, 0x97, 0x01, 0x7C, 0x97, 0x00, 0x7C, 0x97, 0xFF, 0x7C, 0x97, 0xFE, 0x7B, 0x97, 0xFD, 
   0x7B, 0x97, 0xFC, 0x7A, 0x97, 0xFA, 0x78, 0x97, 0xF9, 0x77, 0x96, 0xF8, 0x75, 0x96, 0xF7, 0x73, 
   0x95, 0xF6, 0x70, 0x95, 0xF5, 0x6D, 0x94, 0xF4, 0x6A, 0x94, 0xF3, 0x67, 0x93, 0xF2, 0x64, 0x92, 
   0xF1, 0x60, 0x92, 0xF0, 0x5C, 0x91, 0xEF, 0x58, 0x90, 0xEE, 0x53, 0x8F, 0xED, 0x4F, 0x8E, 0xED, 
   0x4A, 0x8D, 0xEC, 0x45, 0x8C, 0xEB, 0x40, 0x8B, 0xEB, 0x3A, 0x8A, 0xEA, 0x35, 0x89, 0xEA, 0x2F, 
   0x88, 0xE9, 0x29, 0x87, 0xE9, 0x24, 0x86, 0xE8, 0x1E, 0x85, 0xE8, 0x18, 0x83, 0xE8, 0x12, 0x82, 
   0xE8, 0x0C, 0x81, 0xE8, 0x06, 0x80, 0xE2, 0x00, 0x7F, 0xE2, 0xFA, 0x7D, 0xE2, 0xF4, 0x7B, 0xE2, 
   0xEE, 0x7A, 0xE2, 0xE8, 0x78, 0xE3, 0xE3, 0x77, 0xE3, 0xDD, 0x76, 0xE3, 0xD7, 0x74, 0xE4, 0xD1, 
   0x73, 0xE5, 0xCC, 0x71, 0xE5, 0xC6, 0x70, 0xE6, 0xC1, 0x6F, 0xE7, 0xBC, 0x6D, 0xE8, 0xB7, 0x6C, 
   0xE9, 0xB2, 0x6B, 0xEA, 0xAE, 0x6A, 0xEB, 0xA9, 0x69, 0xEC, 0xA5, 0x68, 0xED, 0xA1, 0x67, 0xEE, 
   0x9E, 0x66, 0xEF, 0x9A, 0x65, 0xF1, 0x97, 0x64, 0xF2, 0x94, 0x63, 0xF3, 0x91, 0x63, 0xF5, 0x8F, 
   0x62, 0xF6, 0x8D, 0x61, 0xF8, 0x8B, 0x61, 0xF9, 0x89, 0x61, 0xFA, 0x88, 0x60, 0xFC, 0x87, 0x60, 
   0xFD, 0x86, 0x60, 0xFF, 0x85, 0x60, 0x00, 0x85, 0x60, 0x01, 0x85, 0x60, 0x03, 0x86, 0x60, 0x04, 
   0x87, 0x60, 0x06, 0x88, 0x60, 0x07, 0x89, 0x61, 0x08, 0x8B, 0x61, 0x0A, 0x8D, 0x61, 0x0B, 0x8F, 
   0x62, 0x0D, 0x91, 0x63, 0x0E, 0x94, 0x63, 0x0F, 0x97, 0x64, 0x11, 0x9A, 0x65, 0x12, 0x9E, 0x66, 
   0x13, 0xA1, 0x67, 0x14, 0xA5, 0x68, 0x15, 0xA9, 0x69, 0x16, 0xAE, 0x6A, 0x17, 0xB2, 0x6B, 0x18, 
   0xB7, 0x6C, 0x19, 0xBC, 0x6D, 0x1A, 0xC1, 0x6F, 0x1B, 0xC6, 0x70, 0x1B, 0xCC, 0x71, 0x1C, 0xD1, 
   0x73, 0x1D, 0xD7, 0x74, 0x1D, 0xDD, 0x76, 0x1D, 0xE3, 0x77, 0x1E, 0xE8, 0x78, 0x1E, 0xEE, 0x7A, 
   0x1E, 0xF4, 0x7B, 0x1E, 0xFA, 0x7D, 0x1E, 0x00, 0x7F, 0x1E, 0x06, 0x80, 0x1E, 0x0C, 0x82, 0x1E, 
   0x12, 0x83, 0x1E, 0x18, 0x85, 0x1D, 0x1D, 0x86, 0x1D, 0x23, 0x87, 0x1D, 0x29, 0x89, 0x1C, 0x2F, 
   0x8A, 0x1B, 0x34, 0x8C, 0x1B, 0x3A, 0x8D, 0x1A, 0x3F, 0x8E, 0x19, 0x44, 0x90, 0x18, 0x49, 0x91, 
   0x17, 0x4E, 0x92, 0x16, 0x52, 0x93, 0x15, 0x57, 0x94, 0x14, 0x5B, 0x95, 0x13, 0x5F, 0x96, 0x12, 
   0x62, 0x97, 0x11, 0x66, 0x98, 0x0F, 0x69, 0x99, 0x0E, 0x6C, 0x9A, 0x0D, 0x6F, 0x9A, 0x0B, 0x71, 
   0x9B, 0x0A, 0x73, 0x9C, 0x08, 0x75, 0x9C, 0x07, 0x77, 0x9C, 0x06, 0x78, 0x9D, 0x04, 0x79, 0x9D, 
   0x03, 0x7A, 0x9D, 0x01, 0x7B, 0x9D, 0x00, 0x7B, 0x9D, 0xFF, 0x7B, 0x9D, 0xFD, 0x7A, 0x9D, 0xFC, 
   0x79, 0x9D, 0xFA, 0x78, 0x9D, 0xF9, 0x77, 0x9C, 0xF8, 0x75, 0x9C, 0xF6, 0x73, 0x9C, 0xF5, 0x71, 
   0x9B, 0xF3, 0x6F, 0x9A, 0xF2, 0x6C, 0x9A, 0xF1, 0x69, 0x99, 0xEF, 0x66, 0x98, 0xEE, 0x62, 0x97, 
   0xED, 0x5F, 0x96, 0xEC, 0x5B, 0x95, 0xEB, 0x57, 0x94, 0xEA, 0x52, 0x93, 0xE9, 0x4E, 0x92, 0xE8, 
   0x49, 0x91, 0xE7, 0x44, 0x90, 0xE6, 0x3F, 0x8E, 0xE5, 0x3A, 0x8D, 0xE5, 0x34, 0x8C, 0xE4, 0x2F, 
   0x8A, 0xE3, 0x29, 0x89, 0xE3, 0x23, 0x87, 0xE3, 0x1D, 0x86, 0xE2, 0x18, 0x85, 0xE2, 0x12, 0x83, 
   0xE2, 0x0C, 0x82, 0xE2, 0x06, 0x80, 0xDC, 0x00, 0x7F, 0xDC, 0xFB, 0x7D, 0xDC, 0xF5, 0x7B, 0xDC, 
   0xEF, 0x79, 0xDC, 0xE9, 0x77, 0xDD, 0xE3, 0x76, 0xDD, 0xDD, 0x74, 0xDE, 0xD8, 0x72, 0xDE, 0xD2, 
   0x70, 0xDF, 0xCD, 0x6F, 0xE0, 0xC7, 0x6D, 0xE1, 0xC2, 0x6C, 0xE2, 0xBD, 0x6A, 0xE3, 0xB8, 0x69, 
   0xE4, 0xB3, 0x67, 0xE5, 0xAF, 0x66, 0xE6, 0xAB, 0x64, 0xE8, 0xA6, 0x63, 0xE9, 0xA3, 0x62, 0xEB, 
   0x9F, 0x61, 0xEC, 0x9B, 0x60, 0xEE, 0x98, 0x5F, 0xEF, 0x95, 0x5E, 0xF1, 0x93, 0x5D, 0xF2, 0x90, 
   0x5C, 0xF4, 0x8E, 0x5C, 0xF6, 0x8C, 0x5B, 0xF8, 0x8B, 0x5B, 0xF9, 0x89, 0x5A, 0xFB, 0x88, 0x5A, 
   0xFD, 0x88, 0x5A, 0xFF, 0x87, 0x5A, 0x00, 0x87, 0x5A, 0x01, 0x87, 0x5A, 0x03, 0x88, 0x5A, 0x05, 
   0x88, 0x5A, 0x07, 0x89, 0x5A, 0x08, 0x8B, 0x5B, 0x0A, 0x8C, 0x5B, 0x0C, 0x8E, 0x5C, 0x0E, 0x90, 
   0x5C, 0x0F, 0x93, 0x5D, 0x11, 0x95, 0x5E, 0x12, 0x98, 0x5F, 0x14, 0x9B, 0x60, 0x15, 0x9F, 0x61, 
   0x17, 0xA3, 0x62, 0x18, 0xA6, 0x63, 0x1A, 0xAB, 0x64, 0x1B, 0xAF, 0x66, 0x1C, 0xB3, 0x67, 0x1D, 
   0xB8, 0x69, 0x1E, 0xBD, 0x6A, 0x1F, 0xC2, 0x6C, 0x20, 0xC7, 0x6D, 0x21, 0xCD, 0x6F, 0x22, 0xD2, 
   0x70, 0x22, 0xD8, 0x72, 0x23, 0xDD, 0x74, 0x23, 0xE3, 0x76, 0x24, 0xE9, 0x77, 0x24, 0xEF, 0x79, 
   0x24, 0xF5, 0x7B, 0x24, 0xFB, 0x7D, 0x24, 0x00, 0x7F, 0x24, 0x05, 0x80, 0x24, 0x0B, 0x82, 0x24, 
   0x11, 0x84, 0x24, 0x17, 0x86, 0x23, 0x1D, 0x87, 0x23, 0x23, 0x89, 0x22, 0x28, 0x8B, 0x22, 0x2E, 
   0x8D, 0x21, 0x33, 0x8E, 0x20, 0x39, 0x90, 0x1F, 0x3E, 0x91, 0x1E, 0x43, 0x93, 0x1D, 0x48, 0x94, 
   0x1C, 0x4D, 0x96, 0x1B, 0x51, 0x97, 0x1A, 0x55, 0x99, 0x18, 0x5A, 0x9A, 0x17, 0x5D, 0x9B, 0x15, 
   0x61, 0x9C, 0x14, 0x65, 0x9D, 0x12, 0x68, 0x9E, 0x11, 0x6B, 0x9F, 0x0F, 0x6D, 0xA0, 0x0E, 0x70, 
   0xA1, 0x0C, 0x72, 0xA1, 0x0A, 0x74, 0xA2, 0x08, 0x75, 0xA2, 0x07, 0x77, 0xA3, 0x05, 0x78, 0xA3, 
   0x03, 0x78, 0xA3, 0x01, 0x79, 0xA3, 0x00, 0x79, 0xA3, 0xFF, 0x79, 0xA3, 0xFD, 0x78, 0xA3, 0xFB, 
   0x78, 0xA3, 0xF9, 0x77, 0xA3, 0xF8, 0x75, 0xA2, 0xF6, 0x74, 0xA2, 0xF4, 0x72, 0xA1, 0xF2, 0x70, 
   0xA1, 0xF1, 0x6D, 0xA0, 0xEF, 0x6B, 0x9F, 0xEE, 0x68, 0x9E, 0xEC, 0x65, 0x9D, 0xEB, 0x61, 0x9C, 
   0xE9, 0x5D, 0x9B, 0xE8, 0x5A, 0x9A, 0xE6, 0x55, 0x99, 0xE5, 0x51, 0x97, 0xE4, 0x4D, 0x96, 0xE3, 
   0x48, 0x94, 0xE2, 0x43, 0x93, 0xE1, 0x3E, 0x91, 0xE0, 0x39, 0x90, 0xDF, 0x33, 0x8E, 0xDE, 0x2E, 
   0x8D, 0xDE, 0x28, 0x8B, 0xDD, 0x23, 0x89, 0xDD, 0x1D, 0x87, 0xDC, 0x17, 0x86, 0xDC, 0x11, 0x84, 
   0xDC, 0x0B, 0x82, 0xDC, 0x05, 0x80, 0xD6, 0x00, 0x7F, 0xD6, 0xFB, 0x7C, 0xD6, 0xF5, 0x7A, 0xD6, 
   0xEF, 0x78, 0xD7, 0xE9, 0x76, 0xD7, 0xE3, 0x74, 0xD8, 0xDE, 0x72, 0xD8, 0xD8, 0x70, 0xD9, 0xD3, 
   0x6E, 0xDA, 0xCD, 0x6C, 0xDB, 0xC8, 0x6A, 0xDC, 0xC3, 0x69, 0xDD, 0xBE, 0x67, 0xDE, 0xB9, 0x65, 
   0xDF, 0xB5, 0x63, 0xE1, 0xB0, 0x62, 0xE2, 0xAC, 0x60, 0xE4, 0xA8, 0x5F, 0xE5, 0xA4, 0x5D, 0xE7, 
   0xA0, 0x5C, 0xE9, 0x9D, 0x5B, 0xEB, 0x9A, 0x5A, 0xEC, 0x97, 0x59, 0xEE, 0x94, 0x58, 0xF0, 0x92, 
   0x57, 0xF2, 0x90, 0x56, 0xF4, 0x8E, 0x56, 0xF6, 0x8D, 0x55, 0xF8, 0x8B, 0x55, 0xFA, 0x8A, 0x54, 
   0xFC, 0x89, 0x54, 0xFE, 0x89, 0x54, 0x00, 0x89, 0x54, 0x02, 0x89, 0x54, 0x04, 0x89, 0x54, 0x06, 
   0x8A, 0x54, 0x08, 0x8B, 0x55, 0x0A, 0x8D, 0x55, 0x0C, 0x8E, 0x56, 0x0E, 0x90, 0x56, 0x10, 0x92, 
   0x57, 0x12, 0x94, 0x58, 0x14, 0x97, 0x59, 0x15, 0x9A, 0x5A, 0x17, 0x9D, 0x5B, 0x19, 0xA0, 0x5C, 
   0x1B, 0xA4, 0x5D, 0x1C, 0xA8, 0x5F, 0x1E, 0xAC, 0x60, 0x1F, 0xB0, 0x62, 0x21, 0xB5, 0x63, 0x22, 
   0xB9, 0x65, 0x23, 0xBE, 0x67, 0x24, 0xC3, 0x69, 0x25, 0xC8, 0x6A, 0x26, 0xCD, 0x6C, 0x27, 0xD3, 
   0x6E, 0x28, 0xD8, 0x70, 0x28, 0xDE, 0x72, 0x29, 0xE3, 0x74, 0x29, 0xE9, 0x76, 0x2A, 0xEF, 0x78, 
   0x2A, 0xF5, 0x7A, 0x2A, 0xFB, 0x7C, 0x2A, 0x00, 0x7F, 0x2A, 0x05, 0x81, 0x2A, 0x0B, 0x83, 0x2A, 
   0x11, 0x85, 0x29, 0x17, 0x87, 0x29, 0x1D, 0x89, 0x28, 0x22, 0x8B, 0x28, 0x28, 0x8D, 0x27, 0x2D, 
   0x8F, 0x26, 0x33, 0x91, 0x25, 0x38, 0x93, 0x24, 0x3D, 0x94, 0x23, 0x42, 0x96, 0x22, 0x47, 0x98, 
   0x21, 0x4B, 0x9A, 0x1F, 0x50, 0x9B, 0x1E, 0x54, 0x9D, 0x1C, 0x58, 0x9E, 0x1B, 0x5C, 0xA0, 0x19, 
   0x60, 0xA1, 0x17, 0x63, 0xA2, 0x15, 0x66, 0xA3, 0x14, 0x69, 0xA4, 0x12, 0x6C, 0xA5, 0x10, 0x6E, 
   0xA6, 0x0E, 0x70, 0xA7, 0x0C, 0x72, 0xA7, 0x0A, 0x73, 0xA8, 0x08, 0x75, 0xA8, 0x06, 0x76, 0xA9, 
   0x04, 0x77, 0xA9, 0x02, 0x77, 0xA9, 0x00, 0x77, 0xA9, 0xFE, 0x77, 0xA9, 0xFC, 0x77, 0xA9, 0xFA, 
   0x76, 0xA9, 0xF8, 0x75, 0xA8, 0xF6, 0x73, 0xA8, 0xF4, 0x72, 0xA7, 0xF2, 0x70, 0xA7, 0xF0, 0x6E, 
   0xA6, 0xEE, 0x6C, 0xA5, 0xEC, 0x69, 0xA4, 0xEB, 0x66, 0xA3, 0xE9, 0x63, 0xA2, 0xE7, 0x60, 0xA1, 
   0xE5, 0x5C, 0xA0, 0xE4, 0x58, 0x9E, 0xE2, 0x54, 0x9D, 0xE1, 0x50, 0x9B, 0xDF, 0x4B, 0x9A, 0xDE, 
   0x47, 0x98, 0xDD, 0x42, 0x96, 0xDC, 0x3D, 0x94, 0xDB, 0x38, 0x93, 0xDA, 0x33, 0x91, 0xD9, 0x2D, 
   0x8F, 0xD8, 0x28, 0x8D, 0xD8, 0x22, 0x8B, 0xD7, 0x1D, 0x89, 0xD7, 0x17, 0x87, 0xD6, 0x11, 0x85, 
   0xD6, 0x0B, 0x83, 0xD6, 0x05, 0x81, 0xD0, 0x00, 0x7F, 0xD0, 0xFB, 0x7C, 0xD0, 0xF5, 0x7A, 0xD0, 
   0xEF, 0x77, 0xD1, 0xEA, 0x75, 0xD1, 0xE4, 0x73, 0xD2, 0xDE, 0x70, 0xD3, 0xD9, 0x6E, 0xD4, 0xD4, 
   0x6C, 0xD5, 0xCE, 0x6A, 0xD6, 0xC9, 0x68, 0xD7, 0xC4, 0x66, 0xD8, 0xBF, 0x63, 0xD9, 0xBB, 0x62, 
   0xDB, 0xB6, 0x60, 0xDC, 0xB2, 0x5E, 0xDE, 0xAE, 0x5C, 0xE0, 0xAA, 0x5A, 0xE2, 0xA6, 0x59, 0xE4, 
   0xA2, 0x57, 0xE5, 0x9F, 0x56, 0xE8, 0x9C, 0x55, 0xEA, 0x99, 0x54, 0xEC, 0x96, 0x53, 0xEE, 0x94, 
   0x52, 0xF0, 0x92, 0x51, 0xF2, 0x90, 0x50, 0xF5, 0x8F, 0x4F, 0xF7, 0x8D, 0x4F, 0xF9, 0x8C, 0x4E, 
   0xFC, 0x8C, 0x4E, 0xFE, 0x8B, 0x4E, 0x00, 0x8B, 0x4E, 0x02, 0x8B, 0x4E, 0x04, 0x8C, 0x4E, 0x07, 
   0x8C, 0x4E, 0x09, 0x8D, 0x4F, 0x0B, 0x8F, 0x4F, 0x0E, 0x90, 0x50, 0x10, 0x92, 0x51, 0x12, 0x94, 
   0x52, 0x14, 0x96, 0x53, 0x16, 0x99, 0x54, 0x18, 0x9C, 0x55, 0x1B, 0x9F, 0x56, 0x1C, 0xA2, 0x57, 
   0x1E, 0xA6, 0x59, 0x20, 0xAA, 0x5A, 0x22, 0xAE, 0x5C, 0x24, 0xB2, 0x5E, 0x25, 0xB6, 0x60, 0x27, 
   0xBB, 0x62, 0x28, 0xBF, 0x63, 0x29, 0xC4, 0x66, 0x2A, 0xC9, 0x68, 0x2B, 0xCE, 0x6A, 0x2C, 0xD4, 
   0x6C, 0x2D, 0xD9, 0x6E, 0x2E, 0xDE, 0x70, 0x2F, 0xE4, 0x73, 0x2F, 0xEA, 0x75, 0x30, 0xEF, 0x77, 
   0x30, 0xF5, 0x7A, 0x30, 0xFB, 0x7C, 0x30, 0x00, 0x7F, 0x30, 0x05, 0x81, 0x30, 0x0B, 0x83, 0x30, 
   0x11, 0x86, 0x2F, 0x16, 0x88, 0x2F, 0x1C, 0x8A, 0x2E, 0x22, 0x8D, 0x2D, 0x27, 0x8F, 0x2C, 0x2C, 
   0x91, 0x2B, 0x32, 0x93, 0x2A, 0x37, 0x95, 0x29, 0x3C, 0x97, 0x28, 0x41, 0x9A, 0x27, 0x45, 0x9B, 
   0x25, 0x4A, 0x9D, 0x24, 0x4E, 0x9F, 0x22, 0x52, 0xA1, 0x20, 0x56, 0xA3, 0x1E, 0x5A, 0xA4, 0x1C, 
   0x5E, 0xA6, 0x1B, 0x61, 0xA7, 0x18, 0x64, 0xA8, 0x16, 0x67, 0xA9, 0x14, 0x6A, 0xAA, 0x12, 0x6C, 
   0xAB, 0x10, 0x6E, 0xAC, 0x0E, 0x70, 0xAD, 0x0B, 0x71, 0xAE, 0x09, 0x73, 0xAE, 0x07, 0x74, 0xAF, 
   0x04, 0x74, 0xAF, 0x02, 0x75, 0xAF, 0x00, 0x75, 0xAF, 0xFE, 0x75, 0xAF, 0xFC, 0x74, 0xAF, 0xF9, 
   0x74, 0xAF, 0xF7, 0x73, 0xAE, 0xF5, 0x71, 0xAE, 0xF2, 0x70, 0xAD, 0xF0, 0x6E, 0xAC, 0xEE, 0x6C, 
   0xAB, 0xEC, 0x6A, 0xAA, 0xEA, 0x67, 0xA9, 0xE8, 0x64, 0xA8, 0xE5, 0x61, 0xA7, 0xE4, 0x5E, 0xA6, 
   0xE2, 0x5A, 0xA4, 0xE0, 0x56, 0xA3, 0xDE, 0x52, 0xA1, 0xDC, 0x4E, 0x9F, 0xDB, 0x4A, 0x9D, 0xD9, 
   0x45, 0x9B, 0xD8, 0x41, 0x9A, 0xD7, 0x3C, 0x97, 0xD6, 0x37, 0x95, 0xD5, 0x32, 0x93, 0xD4, 0x2C, 
   0x91, 0xD3, 0x27, 0x8F, 0xD2, 0x22, 0x8D, 0xD1, 0x1C, 0x8A, 0xD1, 0x16, 0x88, 0xD0, 0x11, 0x86, 
   0xD0, 0x0B, 0x83, 0xD0, 0x05, 0x81, 0xCA, 0x00, 0x7F, 0xCA, 0xFB, 0x7C, 0xCA, 0xF5, 0x79, 0xCB, 
   0xF0, 0x77, 0xCB, 0xEA, 0x74, 0xCC, 0xE5, 0x71, 0xCD, 0xDF, 0x6F, 0xCD, 0xDA, 0x6C, 0xCE, 0xD5, 
   0x6A, 0xCF, 0xCF, 0x67, 0xD1, 0xCA, 0x65, 0xD2, 0xC5, 0x63, 0xD3, 0xC1, 0x60, 0xD5, 0xBC, 0x5E, 
   0xD7, 0xB8, 0x5C, 0xD8, 0xB3, 0x5A, 0xDA, 0xAF, 0x58, 0xDC, 0xAB, 0x56, 0xDE, 0xA8, 0x55, 0xE0, 
   0xA4, 0x53, 0xE2, 0xA1, 0x51, 0xE5, 0x9E, 0x50, 0xE7, 0x9B, 0x4F, 0xE9, 0x99, 0x4D, 0xEC, 0x96, 
   0x4C, 0xEE, 0x94, 0x4B, 0xF1, 0x93, 0x4B, 0xF3, 0x91, 0x4A, 0xF6, 0x90, 0x49, 0xF9, 0x8F, 0x49, 
   0xFB, 0x8E, 0x48, 0xFE, 0x8E, 0x48, 0x00, 0x8E, 0x48, 0x02, 0x8E, 0x48, 0x05, 0x8E, 0x48, 0x07, 
   0x8F, 0x49, 0x0A, 0x90, 0x49, 0x0D, 0x91, 0x4A, 0x0F, 0x93, 0x4B, 0x12, 0x94, 0x4B, 0x14, 0x96, 
   0x4C, 0x17, 0x99, 0x4D, 0x19, 0x9B, 0x4F, 0x1B, 0x9E, 0x50, 0x1E, 0xA1, 0x51, 0x20, 0xA4, 0x53, 
   0x22, 0xA8, 0x55, 0x24, 0xAB, 0x56, 0x26, 0xAF, 0x58, 0x28, 0xB3, 0x5A, 0x29, 0xB8, 0x5C, 0x2B, 
   0xBC, 0x5E, 0x2D, 0xC1, 0x60, 0x2E, 0xC5, 0x63, 0x2F, 0xCA, 0x65, 0x31, 0xCF, 0x67, 0x32, 0xD5, 
   0x6A, 0x33, 0xDA, 0x6C, 0x33, 0xDF, 0x6F, 0x34, 0xE5, 0x71, 0x35, 0xEA, 0x74, 0x35, 0xF0, 0x77, 
   0x36, 0xF5, 0x79, 0x36, 0xFB, 0x7C, 0x36, 0x00, 0x7F, 0x36, 0x05, 0x81, 0x36, 0x0B, 0x84, 0x35, 
   0x10, 0x86, 0x35, 0x16, 0x89, 0x34, 0x1B, 0x8C, 0x33, 0x21, 0x8E, 0x33, 0x26, 0x91, 0x32, 0x2B, 
   0x93, 0x31, 0x31, 0x96, 0x2F, 0x36, 0x98, 0x2E, 0x3B, 0x9A, 0x2D, 0x3F, 0x9D, 0x2B, 0x44, 0x9F, 
   0x29, 0x48, 0xA1, 0x28, 0x4D, 0xA3, 0x26, 0x51, 0xA5, 0x24, 0x55, 0xA7, 0x22, 0x58, 0xA8, 0x20, 
   0x5C, 0xAA, 0x1E, 0x5F, 0xAC, 0x1B, 0x62, 0xAD, 0x19, 0x65, 0xAE, 0x17, 0x67, 0xB0, 0x14, 0x6A, 
   0xB1, 0x12, 0x6C, 0xB2, 0x0F, 0x6D, 0xB2, 0x0D, 0x6F, 0xB3, 0x0A, 0x70, 0xB4, 0x07, 0x71, 0xB4, 
   0x05, 0x72, 0xB5, 0x02, 0x72, 0xB5, 0x00, 0x72, 0xB5, 0xFE, 0x72, 0xB5, 0xFB, 0x72, 0xB5, 0xF9, 
   0x71, 0xB4, 0xF6, 0x70, 0xB4, 0xF3, 0x6F, 0xB3, 0xF1, 0x6D, 0xB2, 0xEE, 0x6C, 0xB2, 0xEC, 0x6A, 
   0xB1, 0xE9, 0x67, 0xB0, 0xE7, 0x65, 0xAE, 0xE5, 0x62, 0xAD, 0xE2, 0x5F, 0xAC, 0xE0, 0x5C, 0xAA, 
   0xDE, 0x58, 0xA8, 0xDC, 0x55, 0xA7, 0xDA, 0x51, 0xA5, 0xD8, 0x4D, 0xA3, 0xD7, 0x48, 0xA1, 0xD5, 
   0x44, 0x9F, 0xD3, 0x3F, 0x9D, 0xD2, 0x3B, 0x9A, 0xD1, 0x36, 0x98, 0xCF, 0x31, 0x96, 0xCE, 0x2B, 
   0x93, 0xCD, 0x26, 0x91, 0xCD, 0x21, 0x8E, 0xCC, 0x1B, 0x8C, 0xCB, 0x16, 0x89, 0xCB, 0x10, 0x86, 
   0xCA, 0x0B, 0x84, 0xCA, 0x05, 0x81, 0xC5, 0x00, 0x7F, 0xC5, 0xFB, 0x7C, 0xC5, 0xF6, 0x79, 0xC5, 
   0xF0, 0x76, 0xC6, 0xEB, 0x73, 0xC6, 0xE5, 0x70, 0xC7, 0xE0, 0x6D, 0xC8, 0xDB, 0x6A, 0xC9, 0xD6, 
   0x68, 0xCA, 0xD1, 0x65, 0xCC, 0xCC, 0x62, 0xCD, 0xC7, 0x60, 0xCF, 0xC2, 0x5D, 0xD0, 0xBE, 0x5B, 
   0xD2, 0xB9, 0x59, 0xD4, 0xB5, 0x56, 0xD6, 0xB1, 0x54, 0xD8, 0xAE, 0x52, 0xDB, 0xAA, 0x50, 0xDD, 
   0xA7, 0x4E, 0xDF, 0xA3, 0x4D, 0xE2, 0xA0, 0x4B, 0xE4, 0x9E, 0x4A, 0xE7, 0x9B, 0x48, 0xEA, 0x99, 
   0x47, 0xEC, 0x97, 0x46, 0xEF, 0x95, 0x45, 0xF2, 0x94, 0x44, 0xF5, 0x93, 0x44, 0xF8, 0x92, 0x43, 
   0xFB, 0x91, 0x43, 0xFE, 0x91, 0x43, 0x00, 0x90, 0x43, 0x02, 0x91, 0x43, 0x05, 0x91, 0x43, 0x08, 
   0x92, 0x43, 0x0B, 0x93, 0x44, 0x0E, 0x94, 0x44, 0x11, 0x95, 0x45, 0x14, 0x97, 0x46, 0x16, 0x99, 
   0x47, 0x19, 0x9B, 0x48, 0x1C, 0x9E, 0x4A, 0x1E, 0xA0, 0x4B, 0x21, 0xA3, 0x4D, 0x23, 0xA7, 0x4E, 
   0x25, 0xAA, 0x50, 0x28, 0xAE, 0x52, 0x2A, 0xB1, 0x54, 0x2C, 0xB5, 0x56, 0x2E, 0xB9, 0x59, 0x30, 
   0xBE, 0x5B, 0x31, 0xC2, 0x5D, 0x33, 0xC7, 0x60, 0x34, 0xCC, 0x62, 0x36, 0xD1, 0x65, 0x37, 0xD6, 
   0x68, 0x38, 0xDB, 0x6A, 0x39, 0xE0, 0x6D, 0x3A, 0xE5, 0x70, 0x3A, 0xEB, 0x73, 0x3B, 0xF0, 0x76, 
   0x3B, 0xF6, 0x79, 0x3B, 0xFB, 0x7C, 0x3B, 0x00, 0x7F, 0x3B, 0x05, 0x81, 0x3B, 0x0A, 0x84, 0x3B, 
   0x10, 0x87, 0x3A, 0x15, 0x8A, 0x3A, 0x1B, 0x8D, 0x39, 0x20, 0x90, 0x38, 0x25, 0x93, 0x37, 0x2A, 
   0x95, 0x36, 0x2F, 0x98, 0x34, 0x34, 0x9B, 0x33, 0x39, 0x9D, 0x31, 0x3E, 0xA0, 0x30, 0x42, 0xA2, 
   0x2E, 0x47, 0xA4, 0x2C, 0x4B, 0xA7, 0x2A, 0x4F, 0xA9, 0x28, 0x52, 0xAB, 0x25, 0x56, 0xAD, 0x23, 
   0x59, 0xAF, 0x21, 0x5D, 0xB0, 0x1E, 0x60, 0xB2, 0x1C, 0x62, 0xB3, 0x19, 0x65, 0xB5, 0x16, 0x67, 
   0xB6, 0x14, 0x69, 0xB7, 0x11, 0x6B, 0xB8, 0x0E, 0x6C, 0xB9, 0x0B, 0x6D, 0xB9, 0x08, 0x6E, 0xBA, 
   0x05, 0x6F, 0xBA, 0x02, 0x6F, 0xBA, 0x00, 0x70, 0xBA, 0xFE, 0x6F, 0xBA, 0xFB, 0x6F, 0xBA, 0xF8, 
   0x6E, 0xBA, 0xF5, 0x6D, 0xB9, 0xF2, 0x6C, 0xB9, 0xEF, 0x6B, 0xB8, 0xEC, 0x69, 0xB7, 0xEA, 0x67, 
   0xB6, 0xE7, 0x65, 0xB5, 0xE4, 0x62, 0xB3, 0xE2, 0x60, 0xB2, 0xDF, 0x5D, 0xB0, 0xDD, 0x59, 0xAF, 
   0xDB, 0x56, 0xAD, 0xD8, 0x52, 0xAB, 0xD6, 0x4F, 0xA9, 0xD4, 0x4B, 0xA7, 0xD2, 0x47, 0xA4, 0xD0, 
   0x42, 0xA2, 0xCF, 0x3E, 0xA0, 0xCD, 0x39, 0x9D, 0xCC, 0x34, 0x9B, 0xCA, 0x2F, 0x98, 0xC9, 0x2A, 
   0x95, 0xC8, 0x25, 0x93, 0xC7, 0x20, 0x90, 0xC6, 0x1B, 0x8D, 0xC6, 0x15, 0x8A, 0xC5, 0x10, 0x87, 
   0xC5, 0x0A, 0x84, 0xC5, 0x05, 0x81, 0xBF, 0x00, 0x7F, 0xBF, 0xFB, 0x7B, 0xC0, 0xF6, 0x78, 0xC0, 
   0xF1, 0x75, 0xC0, 0xEB, 0x72, 0xC1, 0xE6, 0x6F, 0xC2, 0xE1, 0x6C, 0xC3, 0xDC, 0x69, 0xC4, 0xD7, 
   0x66, 0xC5, 0xD2, 0x63, 0xC7, 0xCD, 0x60, 0xC8, 0xC8, 0x5D, 0xCA, 0xC4, 0x5A, 0xCC, 0xC0, 0x58, 
   0xCE, 0xBB, 0x55, 0xD0, 0xB7, 0x53, 0xD2, 0xB3, 0x50, 0xD5, 0xB0, 0x4E, 0xD7, 0xAC, 0x4C, 0xDA, 
   0xA9, 0x4A, 0xDC, 0xA6, 0x48, 0xDF, 0xA3, 0x46, 0xE2, 0xA0, 0x45, 0xE5, 0x9E, 0x43, 0xE8, 0x9C, 
   0x42, 0xEB, 0x9A, 0x41, 0xEE, 0x98, 0x40, 0xF1, 0x97, 0x3F, 0xF4, 0x96, 0x3E, 0xF7, 0x95, 0x3E, 
   0xFA, 0x94, 0x3E, 0xFD, 0x94, 0x3D, 0x00, 0x94, 0x3D, 0x03, 0x94, 0x3D, 0x06, 0x94, 0x3E, 0x09, 
   0x95, 0x3E, 0x0C, 0x96, 0x3E, 0x0F, 0x97, 0x3F, 0x12, 0x98, 0x40, 0x15, 0x9A, 0x41, 0x18, 0x9C, 
   0x42, 0x1B, 0x9E, 0x43, 0x1E, 0xA0, 0x45, 0x21, 0xA3, 0x46, 0x24, 0xA6, 0x48, 0x26, 0xA9, 0x4A, 
   0x29, 0xAC, 0x4C, 0x2B, 0xB0, 0x4E, 0x2E, 0xB3, 0x50, 0x30, 0xB7, 0x53, 0x32, 0xBB, 0x55, 0x34, 
   0xC0, 0x58, 0x36, 0xC4, 0x5A, 0x38, 0xC8, 0x5D, 0x39, 0xCD, 0x60, 0x3B, 0xD2, 0x63, 0x3C, 0xD7, 
   0x66, 0x3D, 0xDC, 0x69, 0x3E, 0xE1, 0x6C, 0x3F, 0xE6, 0x6F, 0x40, 0xEB, 0x72, 0x40, 0xF1, 0x75, 
   0x40, 0xF6, 0x78, 0x41, 0xFB, 0x7B, 0x41, 0x00, 0x7F, 0x41, 0x05, 0x82, 0x40, 0x0A, 0x85, 0x40, 
   0x0F, 0x88, 0x40, 0x15, 0x8B, 0x3F, 0x1A, 0x8E, 0x3E, 0x1F, 0x91, 0x3D, 0x24, 0x94, 0x3C, 0x29, 
   0x97, 0x3B, 0x2E, 0x9A, 0x39, 0x33, 0x9D, 0x38, 0x38, 0xA0, 0x36, 0x3C, 0xA3, 0x34, 0x40, 0xA5, 
   0x32, 0x45, 0xA8, 0x30, 0x49, 0xAA, 0x2E, 0x4D, 0xAD, 0x2B, 0x50, 0xAF, 0x29, 0x54, 0xB1, 0x26, 
   0x57, 0xB3, 0x24, 0x5A, 0xB5, 0x21, 0x5D, 0xB7, 0x1E, 0x60, 0xB8, 0x1B, 0x62, 0xBA, 0x18, 0x64, 
   0xBB, 0x15, 0x66, 0xBC, 0x12, 0x68, 0xBD, 0x0F, 0x69, 0xBE, 0x0C, 0x6A, 0xBF, 0x09, 0x6B, 0xBF, 
   0x06, 0x6C, 0xBF, 0x03, 0x6C, 0xC0, 0x00, 0x6C, 0xC0, 0xFD, 0x6C, 0xC0, 0xFA, 0x6C, 0xBF, 0xF7, 
   0x6B, 0xBF, 0xF4, 0x6A, 0xBF, 0xF1, 0x69, 0xBE, 0xEE, 0x68, 0xBD, 0xEB, 0x66, 0xBC, 0xE8, 0x64, 
   0xBB, 0xE5, 0x62, 0xBA, 0xE2, 0x60, 0xB8, 0xDF, 0x5D, 0xB7, 0xDC, 0x5A, 0xB5, 0xDA, 0x57, 0xB3, 
   0xD7, 0x54, 0xB1, 0xD5, 0x50, 0xAF, 0xD2, 0x4D, 0xAD, 0xD0, 0x49, 0xAA, 0xCE, 0x45, 0xA8, 0xCC, 
   0x40, 0xA5, 0xCA, 0x3C, 0xA3, 0xC8, 0x38, 0xA0, 0xC7, 0x33, 0x9D, 0xC5, 0x2E, 0x9A, 0xC4, 0x29, 
   0x97, 0xC3, 0x24, 0x94, 0xC2, 0x1F, 0x91, 0xC1, 0x1A, 0x8E, 0xC0, 0x15, 0x8B, 0xC0, 0x0F, 0x88, 
   0xC0, 0x0A, 0x85, 0xBF, 0x05, 0x82, 0xBA, 0x00, 0x7F, 0xBA, 0xFB, 0x7B, 0xBA, 0xF6, 0x78, 0xBB, 
   0xF1, 0x74, 0xBB, 0xEC, 0x71, 0xBC, 0xE7, 0x6D, 0xBD, 0xE2, 0x6A, 0xBE, 0xDD, 0x67, 0xBF, 0xD8, 
   0x63, 0xC1, 0xD3, 0x60, 0xC2, 0xCF, 0x5D, 0xC4, 0xCA, 0x5A, 0xC6, 0xC6, 0x57, 0xC8, 0xC2, 0x54, 
   0xCA, 0xBE, 0x52, 0xCC, 0xBA, 0x4F, 0xCF, 0xB6, 0x4D, 0xD1, 0xB2, 0x4A, 0xD4, 0xAF, 0x48, 0xD6, 
   0xAC, 0x46, 0xD9, 0xA9, 0x44, 0xDC, 0xA6, 0x42, 0xDF, 0xA3, 0x40, 0xE2, 0xA1, 0x3F, 0xE5, 0x9F, 
   0x3D, 0xE9, 0x9D, 0x3C, 0xEC, 0x9B, 0x3B, 0xEF, 0x9A, 0x3A, 0xF3, 0x99, 0x39, 0xF6, 0x98, 0x39, 
   0xFA, 0x97, 0x38, 0xFD, 0x97, 0x38, 0x00, 0x97, 0x38, 0x03, 0x97, 0x38, 0x06, 0x97, 0x38, 0x0A, 
   0x98, 0x39, 0x0D, 0x99, 0x39, 0x11, 0x9A, 0x3A, 0x14, 0x9B, 0x3B, 0x17, 0x9D, 0x3C, 0x1B, 0x9F, 
   0x3D, 0x1E, 0xA1, 0x3F, 0x21, 0xA3, 0x40, 0x24, 0xA6, 0x42, 0x27, 0xA9, 0x44, 0x2A, 0xAC, 0x46, 
   0x2C, 0xAF, 0x48, 0x2F, 0xB2, 0x4A, 0x31, 0xB6, 0x4D, 0x34, 0xBA, 0x4F, 0x36, 0xBE, 0x52, 0x38, 
   0xC2, 0x54, 0x3A, 0xC6, 0x57, 0x3C, 0xCA, 0x5A, 0x3E, 0xCF, 0x5D, 0x3F, 0xD3, 0x60, 0x41, 0xD8, 
   0x63, 0x42, 0xDD, 0x67, 0x43, 0xE2, 0x6A, 0x44, 0xE7, 0x6D, 0x45, 0xEC, 0x71, 0x45, 0xF1, 0x74, 
   0x46, 0xF6, 0x78, 0x46, 0xFB, 0x7B, 0x46, 0x00, 0x7F, 0x46, 0x05, 0x82, 0x46, 0x0A, 0x85, 0x45, 
   0x0F, 0x89, 0x45, 0x14, 0x8C, 0x44, 0x19, 0x90, 0x43, 0x1E, 0x93, 0x42, 0x23, 0x96, 0x41, 0x28, 
   0x9A, 0x3F, 0x2D, 0x9D, 0x3E, 0x31, 0xA0, 0x3C, 0x36, 0xA3, 0x3A, 0x3A, 0xA6, 0x38, 0x3E, 0xA9, 
   0x36, 0x42, 0xAB, 0x34, 0x46, 0xAE, 0x31, 0x4A, 0xB0, 0x2F, 0x4E, 0xB3, 0x2C, 0x51, 0xB5, 0x2A, 
   0x54, 0xB7, 0x27, 0x57, 0xB9, 0x24, 0x5A, 0xBB, 0x21, 0x5D, 0xBD, 0x1E, 0x5F, 0xBE, 0x1B, 0x61, 
   0xC0, 0x17, 0x63, 0xC1, 0x14, 0x65, 0xC2, 0x11, 0x66, 0xC3, 0x0D, 0x67, 0xC4, 0x0A, 0x68, 0xC4, 
   0x06, 0x69, 0xC5, 0x03, 0x69, 0xC5, 0x00, 0x69, 0xC5, 0xFD, 0x69, 0xC5, 0xFA, 0x69, 0xC5, 0xF6, 
   0x68, 0xC4, 0xF3, 0x67, 0xC4, 0xEF, 0x66, 0xC3, 0xEC, 0x65, 0xC2, 0xE9, 0x63, 0xC1, 0xE5, 0x61, 
   0xC0, 0xE2, 0x5F, 0xBE, 0xDF, 0x5D, 0xBD, 0xDC, 0x5A, 0xBB, 0xD9, 0x57, 0xB9, 0xD6, 0x54, 0xB7, 
   0xD4, 0x51, 0xB5, 0xD1, 0x4E, 0xB3, 0xCF, 0x4A, 0xB0, 0xCC, 0x46, 0xAE, 0xCA, 0x42, 0xAB, 0xC8, 
   0x3E, 0xA9, 0xC6, 0x3A, 0xA6, 0xC4, 0x36, 0xA3, 0xC2, 0x31, 0xA0, 0xC1, 0x2D, 0x9D, 0xBF, 0x28, 
   0x9A, 0xBE, 0x23, 0x96, 0xBD, 0x1E, 0x93, 0xBC, 0x19, 0x90, 0xBB, 0x14, 0x8C, 0xBB, 0x0F, 0x89, 
   0xBA, 0x0A, 0x85, 0xBA, 0x05, 0x82, 0xB5, 0x00, 0x7F, 0xB5, 0xFB, 0x7B, 0xB5, 0xF7, 0x77, 0xB6, 
   0xF2, 0x73, 0xB6, 0xED, 0x70, 0xB7, 0xE8, 0x6C, 0xB8, 0xE3, 0x69, 0xB9, 0xDE, 0x65, 0xBB, 0xD9, 
   0x62, 0xBC, 0xD5, 0x5E, 0xBE, 0xD0, 0x5B, 0xC0, 0xCC, 0x58, 0xC2, 0xC8, 0x54, 0xC4, 0xC4, 0x51, 
   0xC6, 0xC0, 0x4F, 0xC8, 0xBC, 0x4C, 0xCB, 0xB8, 0x49, 0xCE, 0xB5, 0x46, 0xD1, 0xB2, 0x44, 0xD3, 
   0xAF, 0x42, 0xD6, 0xAC, 0x40, 0xDA, 0xA9, 0x3E, 0xDD, 0xA7, 0x3C, 0xE0, 0xA4, 0x3A, 0xE4, 0xA2, 
   0x39, 0xE7, 0xA0, 0x37, 0xEB, 0x9F, 0x36, 0xEE, 0x9E, 0x35, 0xF2, 0x9C, 0x34, 0xF5, 0x9C, 0x34, 
   0xF9, 0x9B, 0x33, 0xFD, 0x9B, 0x33, 0x00, 0x9A, 0x33, 0x03, 0x9B, 0x33, 0x07, 0x9B, 0x33, 0x0B, 
   0x9C, 0x34, 0x0E, 0x9C, 0x34, 0x12, 0x9E, 0x35, 0x15, 0x9F, 0x36, 0x19, 0xA0, 0x37, 0x1C, 0xA2, 
   0x39, 0x20, 0xA4, 0x3A, 0x23, 0xA7, 0x3C, 0x26, 0xA9, 0x3E, 0x2A, 0xAC, 0x40, 0x2D, 0xAF, 0x42, 
   0x2F, 0xB2, 0x44, 0x32, 0xB5, 0x46, 0x35, 0xB8, 0x49, 0x38, 0xBC, 0x4C, 0x3A, 0xC0, 0x4F, 0x3C, 
   0xC4, 0x51, 0x3E, 0xC8, 0x54, 0x40, 0xCC, 0x58, 0x42, 0xD0, 0x5B, 0x44, 0xD5, 0x5E, 0x45, 0xD9, 
   0x62, 0x47, 0xDE, 0x65, 0x48, 0xE3, 0x69, 0x49, 0xE8, 0x6C, 0x4A, 0xED, 0x70, 0x4A, 0xF2, 0x73, 
   0x4B, 0xF7, 0x77, 0x4B, 0xFB, 0x7B, 0x4B, 0x00, 0x7F, 0x4B, 0x05, 0x82, 0x4B, 0x09, 0x86, 0x4A, 
   0x0E, 0x8A, 0x4A, 0x13, 0x8D, 0x49, 0x18, 0x91, 0x48, 0x1D, 0x94, 0x47, 0x22, 0x98, 0x45, 0x27, 
   0x9B, 0x44, 0x2B, 0x9F, 0x42, 0x30, 0xA2, 0x40, 0x34, 0xA5, 0x3E, 0x38, 0xA9, 0x3C, 0x3C, 0xAC, 
   0x3A, 0x40, 0xAE, 0x38, 0x44, 0xB1, 0x35, 0x48, 0xB4, 0x32, 0x4B, 0xB7, 0x2F, 0x4E, 0xB9, 0x2D, 
   0x51, 0xBB, 0x2A, 0x54, 0xBD, 0x26, 0x57, 0xBF, 0x23, 0x59, 0xC1, 0x20, 0x5C, 0xC3, 0x1C, 0x5E, 
   0xC4, 0x19, 0x60, 0xC6, 0x15, 0x61, 0xC7, 0x12, 0x62, 0xC8, 0x0E, 0x64, 0xC9, 0x0B, 0x64, 0xC9, 
   0x07, 0x65, 0xCA, 0x03, 0x65, 0xCA, 0x00, 0x66, 0xCA, 0xFD, 0x65, 0xCA, 0xF9, 0x65, 0xCA, 0xF5, 
   0x64, 0xC9, 0xF2, 0x64, 0xC9, 0xEE, 0x62, 0xC8, 0xEB, 0x61, 0xC7, 0xE7, 0x60, 0xC6, 0xE4, 0x5E, 
   0xC4, 0xE0, 0x5C, 0xC3, 0xDD, 0x59, 0xC1, 0xDA, 0x57, 0xBF, 0xD6, 0x54, 0xBD, 0xD3, 0x51, 0xBB, 
   0xD1, 0x4E, 0xB9, 0xCE, 0x4B, 0xB7, 0xCB, 0x48, 0xB4, 0xC8, 0x44, 0xB1, 0xC6, 0x40, 0xAE, 0xC4, 
   0x3C, 0xAC, 0xC2, 0x38, 0xA9, 0xC0, 0x34, 0xA5, 0xBE, 0x30, 0xA2, 0xBC, 0x2B, 0x9F, 0xBB, 0x27, 
   0x9B, 0xB9, 0x22, 0x98, 0xB8, 0x1D, 0x94, 0xB7, 0x18, 0x91, 0xB6, 0x13, 0x8D, 0xB6, 0x0E, 0x8A, 
   0xB5, 0x09, 0x86, 0xB5, 0x05, 0x82, 0xB0, 0x00, 0x7F, 0xB0, 0xFC, 0x7B, 0xB0, 0xF7, 0x77, 0xB1, 
   0xF2, 0x73, 0xB1, 0xED, 0x6F, 0xB2, 0xE9, 0x6B, 0xB3, 0xE4, 0x67, 0xB5, 0xDF, 0x63, 0xB6, 0xDB, 
   0x60, 0xB8, 0xD7, 0x5C, 0xB9, 0xD2, 0x59, 0xBB, 0xCE, 0x55, 0xBE, 0xCA, 0x52, 0xC0, 0xC6, 0x4F, 
   0xC2, 0xC2, 0x4B, 0xC5, 0xBF, 0x48, 0xC8, 0xBB, 0x46, 0xCA, 0xB8, 0x43, 0xCD, 0xB5, 0x40, 0xD1, 
   0xB2, 0x3E, 0xD4, 0xAF, 0x3C, 0xD7, 0xAC, 0x39, 0xDB, 0xAA, 0x37, 0xDE, 0xA8, 0x36, 0xE2, 0xA6, 
   0x34, 0xE5, 0xA4, 0x33, 0xE9, 0xA3, 0x31, 0xED, 0xA1, 0x30, 0xF1, 0xA0, 0x2F, 0xF5, 0x9F, 0x2F, 
   0xF9, 0x9F, 0x2E, 0xFD, 0x9E, 0x2E, 0x00, 0x9E, 0x2E, 0x03, 0x9E, 0x2E, 0x07, 0x9F, 0x2E, 0x0B, 
   0x9F, 0x2F, 0x0F, 0xA0, 0x2F, 0x13, 0xA1, 0x30, 0x17, 0xA3, 0x31, 0x1B, 0xA4, 0x33, 0x1E, 0xA6, 
   0x34, 0x22, 0xA8, 0x36, 0x25, 0xAA, 0x37, 0x29, 0xAC, 0x39, 0x2C, 0xAF, 0x3C, 0x2F, 0xB2, 0x3E, 
   0x33, 0xB5, 0x40, 0x36, 0xB8, 0x43, 0x38, 0xBB, 0x46, 0x3B, 0xBF, 0x48, 0x3E, 0xC2, 0x4B, 0x40, 
   0xC6, 0x4F, 0x42, 0xCA, 0x52, 0x45, 0xCE, 0x55, 0x47, 0xD2, 0x59, 0x48, 0xD7, 0x5C, 0x4A, 0xDB, 
   0x60, 0x4B, 0xDF, 0x63, 0x4D, 0xE4, 0x67, 0x4E, 0xE9, 0x6B, 0x4F, 0xED, 0x6F, 0x4F, 0xF2, 0x73, 
   0x50, 0xF7, 0x77, 0x50, 0xFC, 0x7B, 0x50, 0x00, 0x7F, 0x50, 0x04, 0x82, 0x50, 0x09, 0x86, 0x4F, 
   0x0E, 0x8A, 0x4F, 0x13, 0x8E, 0x4E, 0x17, 0x92, 0x4D, 0x1C, 0x96, 0x4B, 0x21, 0x9A, 0x4A, 0x25, 
   0x9D, 0x48, 0x29, 0xA1, 0x47, 0x2E, 0xA4, 0x45, 0x32, 0xA8, 0x42, 0x36, 0xAB, 0x40, 0x3A, 0xAE, 
   0x3E, 0x3E, 0xB2, 0x3B, 0x41, 0xB5, 0x38, 0x45, 0xB7, 0x36, 0x48, 0xBA, 0x33, 0x4B, 0xBD, 0x2F, 
   0x4E, 0xBF, 0x2C, 0x51, 0xC1, 0x29, 0x54, 0xC4, 0x25, 0x56, 0xC6, 0x22, 0x58, 0xC7, 0x1E, 0x5A, 
   0xC9, 0x1B, 0x5C, 0xCA, 0x17, 0x5D, 0xCC, 0x13, 0x5F, 0xCD, 0x0F, 0x60, 0xCE, 0x0B, 0x61, 0xCE, 
   0x07, 0x61, 0xCF, 0x03, 0x62, 0xCF, 0x00, 0x62, 0xCF, 0xFD, 0x62, 0xCF, 0xF9, 0x61, 0xCF, 0xF5, 
   0x61, 0xCE, 0xF1, 0x60, 0xCE, 0xED, 0x5F, 0xCD, 0xE9, 0x5D, 0xCC, 0xE5, 0x5C, 0xCA, 0xE2, 0x5A, 
   0xC9, 0xDE, 0x58, 0xC7, 0xDB, 0x56, 0xC6, 0xD7, 0x54, 0xC4, 0xD4, 0x51, 0xC1, 0xD1, 0x4E, 0xBF, 
   0xCD, 0x4B, 0xBD, 0xCA, 0x48, 0xBA, 0xC8, 0x45, 0xB7, 0xC5, 0x41, 0xB5, 0xC2, 0x3E, 0xB2, 0xC0, 
   0x3A, 0xAE, 0xBE, 0x36, 0xAB, 0xBB, 0x32, 0xA8, 0xB9, 0x2E, 0xA4, 0xB8, 0x29, 0xA1, 0xB6, 0x25, 
   0x9D, 0xB5, 0x21, 0x9A, 0xB3, 0x1C, 0x96, 0xB2, 0x17, 0x92, 0xB1, 0x13, 0x8E, 0xB1, 0x0E, 0x8A, 
   0xB0, 0x09, 0x86, 0xB0, 0x04, 0x82, 0xAB, 0x00, 0x7F, 0xAB, 0xFC, 0x7A, 0xAC, 0xF7, 0x76, 0xAC, 
   0xF3, 0x72, 0xAD, 0xEE, 0x6E, 0xAE, 0xEA, 0x6A, 0xAF, 0xE5, 0x66, 0xB0, 0xE1, 0x62, 0xB2, 0xDC, 
   0x5E, 0xB3, 0xD8, 0x5A, 0xB5, 0xD4, 0x56, 0xB7, 0xD0, 0x53, 0xBA, 0xCC, 0x4F, 0xBC, 0xC8, 0x4C, 
   0xBF, 0xC5, 0x48, 0xC1, 0xC1, 0x45, 0xC4, 0xBE, 0x42, 0xC7, 0xBB, 0x3F, 0xCA, 0xB8, 0x3D, 0xCE, 
   0xB5, 0x3A, 0xD1, 0xB2, 0x38, 0xD5, 0xB0, 0x35, 0xD8, 0xAE, 0x33, 0xDC, 0xAB, 0x31, 0xE0, 0xAA, 
   0x30, 0xE4, 0xA8, 0x2E, 0xE8, 0xA6, 0x2D, 0xEC, 0xA5, 0x2C, 0xF0, 0xA4, 0x2B, 0xF4, 0xA3, 0x2A, 
   0xF8, 0xA3, 0x2A, 0xFC, 0xA3, 0x29, 0x00, 0xA2, 0x29, 0x04, 0xA3, 0x29, 0x08, 0xA3, 0x2A, 0x0C, 
   0xA3, 0x2A, 0x10, 0xA4, 0x2B, 0x14, 0xA5, 0x2C, 0x18, 0xA6, 0x2D, 0x1C, 0xA8, 0x2E, 0x20, 0xAA, 
   0x30, 0x24, 0xAB, 0x31, 0x28, 0xAE, 0x33, 0x2B, 0xB0, 0x35, 0x2F, 0xB2, 0x38, 0x32, 0xB5, 0x3A, 
   0x36, 0xB8, 0x3D, 0x39, 0xBB, 0x3F, 0x3C, 0xBE, 0x42, 0x3F, 0xC1, 0x45, 0x41, 0xC5, 0x48, 0x44, 
   0xC8, 0x4C, 0x46, 0xCC, 0x4F, 0x49, 0xD0, 0x53, 0x4B, 0xD4, 0x56, 0x4D, 0xD8, 0x5A, 0x4E, 0xDC, 
   0x5E, 0x50, 0xE1, 0x62, 0x51, 0xE5, 0x66, 0x52, 0xEA, 0x6A, 0x53, 0xEE, 0x6E, 0x54, 0xF3, 0x72, 
   0x54, 0xF7, 0x76, 0x55, 0xFC, 0x7A, 0x55, 0x00, 0x7F, 0x55, 0x04, 0x83, 0x54, 0x09, 0x87, 0x54, 
   0x0D, 0x8B, 0x53, 0x12, 0x8F, 0x52, 0x16, 0x93, 0x51, 0x1B, 0x97, 0x50, 0x1F, 0x9B, 0x4E, 0x24, 
   0x9F, 0x4D, 0x28, 0xA3, 0x4B, 0x2C, 0xA7, 0x49, 0x30, 0xAA, 0x46, 0x34, 0xAE, 0x44, 0x38, 0xB1, 
   0x41, 0x3B, 0xB5, 0x3F, 0x3F, 0xB8, 0x3C, 0x42, 0xBB, 0x39, 0x45, 0xBE, 0x36, 0x48, 0xC0, 0x32, 
   0x4B, 0xC3, 0x2F, 0x4E, 0xC5, 0x2B, 0x50, 0xC8, 0x28, 0x52, 0xCA, 0x24, 0x55, 0xCC, 0x20, 0x56, 
   0xCD, 0x1C, 0x58, 0xCF, 0x18, 0x5A, 0xD0, 0x14, 0x5B, 0xD1, 0x10, 0x5C, 0xD2, 0x0C, 0x5D, 0xD3, 
   0x08, 0x5D, 0xD3, 0x04, 0x5D, 0xD4, 0x00, 0x5E, 0xD4, 0xFC, 0x5D, 0xD4, 0xF8, 0x5D, 0xD3, 0xF4, 
   0x5D, 0xD3, 0xF0, 0x5C, 0xD2, 0xEC, 0x5B, 0xD1, 0xE8, 0x5A, 0xD0, 0xE4, 0x58, 0xCF, 0xE0, 0x56, 
   0xCD, 0xDC, 0x55, 0xCC, 0xD8, 0x52, 0xCA, 0xD5, 0x50, 0xC8, 0xD1, 0x4E, 0xC5, 0xCE, 0x4B, 0xC3, 
   0xCA, 0x48, 0xC0, 0xC7, 0x45, 0xBE, 0xC4, 0x42, 0xBB, 0xC1, 0x3F, 0xB8, 0xBF, 0x3B, 0xB5, 0xBC, 
   0x38, 0xB1, 0xBA, 0x34, 0xAE, 0xB7, 0x30, 0xAA, 0xB5, 0x2C, 0xA7, 0xB3, 0x28, 0xA3, 0xB2, 0x24, 
   0x9F, 0xB0, 0x1F, 0x9B, 0xAF, 0x1B, 0x97, 0xAE, 0x16, 0x93, 0xAD, 0x12, 0x8F, 0xAC, 0x0D, 0x8B, 
   0xAC, 0x09, 0x87, 0xAB, 0x04, 0x83, 0xA7, 0x00, 0x7F, 0xA7, 0xFC, 0x7A, 0xA7, 0xF8, 0x76, 0xA8, 
   0xF3, 0x71, 0xA8, 0xEF, 0x6D, 0xA9, 0xEB, 0x69, 0xAB, 0xE6, 0x64, 0xAC, 0xE2, 0x60, 0xAE, 0xDE, 
   0x5C, 0xAF, 0xDA, 0x58, 0xB1, 0xD6, 0x54, 0xB3, 0xD2, 0x50, 0xB6, 0xCF, 0x4D, 0xB8, 0xCB, 0x49, 
   0xBB, 0xC8, 0x46, 0xBE, 0xC4, 0x42, 0xC1, 0xC1, 0x3F, 0xC4, 0xBE, 0x3C, 0xC8, 0xBB, 0x39, 0xCB, 
   0xB8, 0x36, 0xCF, 0xB6, 0x34, 0xD2, 0xB3, 0x31, 0xD6, 0xB1, 0x2F, 0xDA, 0xAF, 0x2D, 0xDE, 0xAE, 
   0x2C, 0xE2, 0xAC, 0x2A, 0xE6, 0xAB, 0x29, 0xEB, 0xA9, 0x27, 0xEF, 0xA8, 0x26, 0xF3, 0xA8, 0x26, 
   0xF8, 0xA7, 0x25, 0xFC, 0xA7, 0x25, 0x00, 0xA7, 0x25, 0x04, 0xA7, 0x25, 0x08, 0xA7, 0x25, 0x0D, 
   0xA8, 0x26, 0x11, 0xA8, 0x26, 0x15, 0xA9, 0x27, 0x1A, 0xAB, 0x29, 0x1E, 0xAC, 0x2A, 0x22, 0xAE, 
   0x2C, 0x26, 0xAF, 0x2D, 0x2A, 0xB1, 0x2F, 0x2E, 0xB3, 0x31, 0x31, 0xB6, 0x34, 0x35, 0xB8, 0x36, 
   0x38, 0xBB, 0x39, 0x3C, 0xBE, 0x3C, 0x3F, 0xC1, 0x3F, 0x42, 0xC4, 0x42, 0x45, 0xC8, 0x46, 0x48, 
   0xCB, 0x49, 0x4A, 0xCF, 0x4D, 0x4D, 0xD2, 0x50, 0x4F, 0xD6, 0x54, 0x51, 0xDA, 0x58, 0x52, 0xDE, 
   0x5C, 0x54, 0xE2, 0x60, 0x55, 0xE6, 0x64, 0x57, 0xEB, 0x69, 0x58, 0xEF, 0x6D, 0x58, 0xF3, 0x71, 
   0x59, 0xF8, 0x76, 0x59, 0xFC, 0x7A, 0x59, 0x00, 0x7F, 0x59, 0x04, 0x83, 0x59, 0x08, 0x87, 0x58, 
   0x0D, 0x8C, 0x58, 0x11, 0x90, 0x57, 0x15, 0x94, 0x55, 0x1A, 0x99, 0x54, 0x1E, 0x9D, 0x52, 0x22, 
   0xA1, 0x51, 0x26, 0xA5, 0x4F, 0x2A, 0xA9, 0x4D, 0x2E, 0xAD, 0x4A, 0x31, 0xB0, 0x48, 0x35, 0xB4, 
   0x45, 0x38, 0xB7, 0x42, 0x3C, 0xBB, 0x3F, 0x3F, 0xBE, 0x3C, 0x42, 0xC1, 0x38, 0x45, 0xC4, 0x35, 
   0x48, 0xC7, 0x31, 0x4A, 0xC9, 0x2E, 0x4D, 0xCC, 0x2A, 0x4F, 0xCE, 0x26, 0x51, 0xD0, 0x22, 0x52, 
   0xD1, 0x1E, 0x54, 0xD3, 0x1A, 0x55, 0xD4, 0x15, 0x57, 0xD6, 0x11, 0x58, 0xD7, 0x0D, 0x58, 0xD7, 
   0x08, 0x59, 0xD8, 0x04, 0x59, 0xD8, 0x00, 0x59, 0xD8, 0xFC, 0x59, 0xD8, 0xF8, 0x59, 0xD8, 0xF3, 
   0x58, 0xD7, 0xEF, 0x58, 0xD7, 0xEB, 0x57, 0xD6, 0xE6, 0x55, 0xD4, 0xE2, 0x54, 0xD3, 0xDE, 0x52, 
   0xD1, 0xDA, 0x51, 0xD0, 0xD6, 0x4F, 0xCE, 0xD2, 0x4D, 0xCC, 0xCF, 0x4A, 0xC9, 0xCB, 0x48, 0xC7, 
   0xC8, 0x45, 0xC4, 0xC4, 0x42, 0xC1, 0xC1, 0x3F, 0xBE, 0xBE, 0x3C, 0xBB, 0xBB, 0x38, 0xB7, 0xB8, 
   0x35, 0xB4, 0xB6, 0x31, 0xB0, 0xB3, 0x2E, 0xAD, 0xB1, 0x2A, 0xA9, 0xAF, 0x26, 0xA5, 0xAE, 0x22, 
   0xA1, 0xAC, 0x1E, 0x9D, 0xAB, 0x1A, 0x99, 0xA9, 0x15, 0x94, 0xA8, 0x11, 0x90, 0xA8, 0x0D, 0x8C, 
   0xA7, 0x08, 0x87, 0xA7, 0x04, 0x83, 0xA2, 0x00, 0x7F, 0xA3, 0xFC, 0x7A, 0xA3, 0xF8, 0x75, 0xA3, 
   0xF4, 0x71, 0xA4, 0xF0, 0x6C, 0xA5, 0xEC, 0x68, 0xA6, 0xE8, 0x63, 0xA8, 0xE4, 0x5F, 0xAA, 0xE0, 
   0x5A, 0xAB, 0xDC, 0x56, 0xAE, 0xD8, 0x52, 0xB0, 0xD5, 0x4E, 0xB2, 0xD1, 0x4A, 0xB5, 0xCE, 0x46, 
   0xB8, 0xCA, 0x43, 0xBB, 0xC7, 0x3F, 0xBE, 0xC4, 0x3C, 0xC1, 0xC1, 0x39, 0xC5, 0xBF, 0x36, 0xC8, 
   0xBC, 0x33, 0xCC, 0xBA, 0x30, 0xD0, 0xB7, 0x2E, 0xD4, 0xB5, 0x2C, 0xD8, 0xB3, 0x29, 0xDC, 0xB2, 
   0x28, 0xE1, 0xB0, 0x26, 0xE5, 0xAF, 0x24, 0xEA, 0xAE, 0x23, 0xEE, 0xAD, 0x22, 0xF3, 0xAC, 0x21, 
   0xF7, 0xAC, 0x21, 0xFC, 0xAB, 0x21, 0x00, 0xAB, 0x20, 0x04, 0xAB, 0x21, 0x09, 0xAC, 0x21, 0x0D, 
   0xAC, 0x21, 0x12, 0xAD, 0x22, 0x16, 0xAE, 0x23, 0x1B, 0xAF, 0x24, 0x1F, 0xB0, 0x26, 0x24, 0xB2, 
   0x28, 0x28, 0xB3, 0x29, 0x2C, 0xB5, 0x2C, 0x30, 0xB7, 0x2E, 0x34, 0xBA, 0x30, 0x38, 0xBC, 0x33, 
   0x3B, 0xBF, 0x36, 0x3F, 0xC1, 0x39, 0x42, 0xC4, 0x3C, 0x45, 0xC7, 0x3F, 0x48, 0xCA, 0x43, 0x4B, 
   0xCE, 0x46, 0x4E, 0xD1, 0x4A, 0x50, 0xD5, 0x4E, 0x52, 0xD8, 0x52, 0x55, 0xDC, 0x56, 0x56, 0xE0, 
   0x5A, 0x58, 0xE4, 0x5F, 0x5A, 0xE8, 0x63, 0x5B, 0xEC, 0x68, 0x5C, 0xF0, 0x6C, 0x5D, 0xF4, 0x71, 
   0x5D, 0xF8, 0x75, 0x5D, 0xFC, 0x7A, 0x5E, 0x00, 0x7F, 0x5D, 0x04, 0x83, 0x5D, 0x08, 0x88, 0x5D, 
   0x0C, 0x8C, 0x5C, 0x10, 0x91, 0x5B, 0x14, 0x95, 0x5A, 0x18, 0x9A, 0x58, 0x1C, 0x9E, 0x56, 0x20, 
   0xA3, 0x55, 0x24, 0xA7, 0x52, 0x28, 0xAB, 0x50, 0x2B, 0xAF, 0x4E, 0x2F, 0xB3, 0x4B, 0x32, 0xB7, 
   0x48, 0x36, 0xBA, 0x45, 0x39, 0xBE, 0x42, 0x3C, 0xC1, 0x3F, 0x3F, 0xC4, 0x3B, 0x41, 0xC7, 0x38, 
   0x44, 0xCA, 0x34, 0x46, 0xCD, 0x30, 0x49, 0xCF, 0x2C, 0x4B, 0xD1, 0x28, 0x4D, 0xD4, 0x24, 0x4E, 
   0xD5, 0x1F, 0x50, 0xD7, 0x1B, 0x51, 0xD9, 0x16, 0x52, 0xDA, 0x12, 0x53, 0xDB, 0x0D, 0x54, 0xDC, 
   0x09, 0x54, 0xDC, 0x04, 0x55, 0xDC, 0x00, 0x55, 0xDD, 0xFC, 0x55, 0xDC, 0xF7, 0x54, 0xDC, 0xF3, 
   0x54, 0xDC, 0xEE, 0x53, 0xDB, 0xEA, 0x52, 0xDA, 0xE5, 0x51, 0xD9, 0xE1, 0x50, 0xD7, 0xDC, 0x4E, 
   0xD5, 0xD8, 0x4D, 0xD4, 0xD4, 0x4B, 0xD1, 0xD0, 0x49, 0xCF, 0xCC, 0x46, 0xCD, 0xC8, 0x44, 0xCA, 
   0xC5, 0x41, 0xC7, 0xC1, 0x3F, 0xC4, 0xBE, 0x3C, 0xC1, 0xBB, 0x39, 0xBE, 0xB8, 0x36, 0xBA, 0xB5, 
   0x32, 0xB7, 0xB2, 0x2F, 0xB3, 0xB0, 0x2B, 0xAF, 0xAE, 0x28, 0xAB, 0xAB, 0x24, 0xA7, 0xAA, 0x20, 
   0xA3, 0xA8, 0x1C, 0x9E, 0xA6, 0x18, 0x9A, 0xA5, 0x14, 0x95, 0xA4, 0x10, 0x91, 0xA3, 0x0C, 0x8C, 
   0xA3, 0x08, 0x88, 0xA3, 0x04, 0x83, 0x9E, 0x00, 0x7F, 0x9E, 0xFD, 0x7A, 0x9F, 0xF9, 0x75, 0x9F, 
   0xF5, 0x70, 0xA0, 0xF1, 0x6B, 0xA1, 0xED, 0x67, 0xA3, 0xE9, 0x62, 0xA4, 0xE5, 0x5D, 0xA6, 0xE2, 
   0x59, 0xA8, 0xDE, 0x55, 0xAA, 0xDB, 0x50, 0xAC, 0xD7, 0x4C, 0xAF, 0xD4, 0x48, 0xB2, 0xD1, 0x44, 
   0xB5, 0xCD, 0x40, 0xB8, 0xCA, 0x3D, 0xBB, 0xC8, 0x39, 0xBF, 0xC5, 0x36, 0xC2, 0xC2, 0x33, 0xC6, 
   0xC0, 0x30, 0xCA, 0xBE, 0x2D, 0xCE, 0xBB, 0x2A, 0xD2, 0xB9, 0x28, 0xD7, 0xB8, 0x26, 0xDB, 0xB6, 
   0x24, 0xDF, 0xB5, 0x22, 0xE4, 0xB3, 0x21, 0xE9, 0xB2, 0x1F, 0xED, 0xB1, 0x1E, 0xF2, 0xB1, 0x1D, 
   0xF7, 0xB0, 0x1D, 0xFC, 0xB0, 0x1C, 0x00, 0xB0, 0x1C, 0x04, 0xB0, 0x1C, 0x09, 0xB0, 0x1D, 0x0E, 
   0xB1, 0x1D, 0x13, 0xB1, 0x1E, 0x17, 0xB2, 0x1F, 0x1C, 0xB3, 0x21, 0x21, 0xB5, 0x22, 0x25, 0xB6, 
   0x24, 0x29, 0xB8, 0x26, 0x2E, 0xB9, 0x28, 0x32, 0xBB, 0x2A, 0x36, 0xBE, 0x2D, 0x3A, 0xC0, 0x30, 
   0x3E, 0xC2, 0x33, 0x41, 0xC5, 0x36, 0x45, 0xC8, 0x39, 0x48, 0xCA, 0x3D, 0x4B, 0xCD, 0x40, 0x4E, 
   0xD1, 0x44, 0x51, 0xD4, 0x48, 0x54, 0xD7, 0x4C, 0x56, 0xDB, 0x50, 0x58, 0xDE, 0x55, 0x5A, 0xE2, 
   0x59, 0x5C, 0xE5, 0x5D, 0x5D, 0xE9, 0x62, 0x5F, 0xED, 0x67, 0x60, 0xF1, 0x6B, 0x61, 0xF5, 0x70, 
   0x61, 0xF9, 0x75, 0x62, 0xFD, 0x7A, 0x62, 0x00, 0x7F, 0x62, 0x03, 0x83, 0x61, 0x07, 0x88, 0x61, 
   0x0B, 0x8D, 0x60, 0x0F, 0x92, 0x5F, 0x13, 0x96, 0x5D, 0x17, 0x9B, 0x5C, 0x1B, 0xA0, 0x5A, 0x1E, 
   0xA4, 0x58, 0x22, 0xA8, 0x56, 0x25, 0xAD, 0x54, 0x29, 0xB1, 0x51, 0x2C, 0xB5, 0x4E, 0x2F, 0xB9, 
   0x4B, 0x33, 0xBD, 0x48, 0x36, 0xC0, 0x45, 0x38, 0xC4, 0x41, 0x3B, 0xC7, 0x3E, 0x3E, 0xCA, 0x3A, 
   0x40, 0xCD, 0x36, 0x42, 0xD0, 0x32, 0x45, 0xD3, 0x2E, 0x47, 0xD5, 0x29, 0x48, 0xD7, 0x25, 0x4A, 
   0xD9, 0x21, 0x4B, 0xDB, 0x1C, 0x4D, 0xDC, 0x17, 0x4E, 0xDE, 0x13, 0x4F, 0xDF, 0x0E, 0x4F, 0xE0, 
   0x09, 0x50, 0xE0, 0x04, 0x50, 0xE1, 0x00, 0x50, 0xE1, 0xFC, 0x50, 0xE1, 0xF7, 0x50, 0xE0, 0xF2, 
   0x4F, 0xE0, 0xED, 0x4F, 0xDF, 0xE9, 0x4E, 0xDE, 0xE4, 0x4D, 0xDC, 0xDF, 0x4B, 0xDB, 0xDB, 0x4A, 
   0xD9, 0xD7, 0x48, 0xD7, 0xD2, 0x47, 0xD5, 0xCE, 0x45, 0xD3, 0xCA, 0x42, 0xD0, 0xC6, 0x40, 0xCD, 
   0xC2, 0x3E, 0xCA, 0xBF, 0x3B, 0xC7, 0xBB, 0x38, 0xC4, 0xB8, 0x36, 0xC0, 0xB5, 0x33, 0xBD, 0xB2, 
   0x2F, 0xB9, 0xAF, 0x2C, 0xB5, 0xAC, 0x29, 0xB1, 0xAA, 0x25, 0xAD, 0xA8, 0x22, 0xA8, 0xA6, 0x1E, 
   0xA4, 0xA4, 0x1B, 0xA0, 0xA3, 0x17, 0x9B, 0xA1, 0x13, 0x96, 0xA0, 0x0F, 0x92, 0x9F, 0x0B, 0x8D, 
   0x9F, 0x07, 0x88, 0x9E, 0x03, 0x83, 0x9A, 0x00, 0x7F, 0x9B, 0xFD, 0x79, 0x9B, 0xF9, 0x75, 0x9C, 
   0xF5, 0x70, 0x9C, 0xF2, 0x6B, 0x9E, 0xEE, 0x66, 0x9F, 0xEB, 0x61, 0xA0, 0xE7, 0x5C, 0xA2, 0xE4, 
   0x57, 0xA4, 0xE0, 0x53, 0xA7, 0xDD, 0x4E, 0xA9, 0xDA, 0x4A, 0xAC, 0xD6, 0x46, 0xAF, 0xD3, 0x42, 
   0xB2, 0xD1, 0x3E, 0xB5, 0xCE, 0x3A, 0xB8, 0xCB, 0x36, 0xBC, 0xC8, 0x33, 0xC0, 0xC6, 0x30, 0xC4, 
   0xC4, 0x2D, 0xC8, 0xC2, 0x2A, 0xCC, 0xC0, 0x27, 0xD0, 0xBE, 0x25, 0xD5, 0xBC, 0x22, 0xD9, 0xBB, 
   0x20, 0xDE, 0xB9, 0x1E, 0xE3, 0xB8, 0x1D, 0xE8, 0xB7, 0x1C, 0xED, 0xB6, 0x1A, 0xF2, 0xB6, 0x1A, 
   0xF7, 0xB5, 0x19, 0xFB, 0xB5, 0x19, 0x00, 0xB5, 0x18, 0x05, 0xB5, 0x19, 0x09, 0xB5, 0x19, 0x0E, 
   0xB6, 0x1A, 0x13, 0xB6, 0x1A, 0x18, 0xB7, 0x1C, 0x1D, 0xB8, 0x1D, 0x22, 0xB9, 0x1E, 0x27, 0xBB, 
   0x20, 0x2B, 0xBC, 0x22, 0x30, 0xBE, 0x25, 0x34, 0xC0, 0x27, 0x38, 0xC2, 0x2A, 0x3C, 0xC4, 0x2D, 
   0x40, 0xC6, 0x30, 0x44, 0xC8, 0x33, 0x48, 0xCB, 0x36, 0x4B, 0xCE, 0x3A, 0x4E, 0xD1, 0x3E, 0x51, 
   0xD3, 0x42, 0x54, 0xD6, 0x46, 0x57, 0xDA, 0x4A, 0x59, 0xDD, 0x4E, 0x5C, 0xE0, 0x53, 0x5E, 0xE4, 
   0x57, 0x60, 0xE7, 0x5C, 0x61, 0xEB, 0x61, 0x62, 0xEE, 0x66, 0x64, 0xF2, 0x6B, 0x64, 0xF5, 0x70, 
   0x65, 0xF9, 0x75, 0x65, 0xFD, 0x79, 0x66, 0x00, 0x7F, 0x65, 0x03, 0x84, 0x65, 0x07, 0x88, 0x64, 
   0x0B, 0x8D, 0x64, 0x0E, 0x92, 0x62, 0x12, 0x97, 0x61, 0x15, 0x9C, 0x60, 0x19, 0xA1, 0x5E, 0x1C, 
   0xA6, 0x5C, 0x20, 0xAA, 0x59, 0x23, 0xAF, 0x57, 0x26, 0xB3, 0x54, 0x2A, 0xB7, 0x51, 0x2D, 0xBB, 
   0x4E, 0x2F, 0xBF, 0x4B, 0x32, 0xC3, 0x48, 0x35, 0xC7, 0x44, 0x38, 0xCA, 0x40, 0x3A, 0xCD, 0x3C, 
   0x3C, 0xD0, 0x38, 0x3E, 0xD3, 0x34, 0x40, 0xD6, 0x30, 0x42, 0xD8, 0x2B, 0x44, 0xDB, 0x27, 0x45, 
   0xDD, 0x22, 0x47, 0xDF, 0x1D, 0x48, 0xE0, 0x18, 0x49, 0xE1, 0x13, 0x4A, 0xE3, 0x0E, 0x4A, 0xE3, 
   0x09, 0x4B, 0xE4, 0x05, 0x4B, 0xE4, 0x00, 0x4B, 0xE5, 0xFB, 0x4B, 0xE4, 0xF7, 0x4B, 0xE4, 0xF2, 
   0x4A, 0xE3, 0xED, 0x4A, 0xE3, 0xE8, 0x49, 0xE1, 0xE3, 0x48, 0xE0, 0xDE, 0x47, 0xDF, 0xD9, 0x45, 
   0xDD, 0xD5, 0x44, 0xDB, 0xD0, 0x42, 0xD8, 0xCC, 0x40, 0xD6, 0xC8, 0x3E, 0xD3, 0xC4, 0x3C, 0xD0, 
   0xC0, 0x3A, 0xCD, 0xBC, 0x38, 0xCA, 0xB8, 0x35, 0xC7, 0xB5, 0x32, 0xC3, 0xB2, 0x2F, 0xBF, 0xAF, 
   0x2D, 0xBB, 0xAC, 0x2A, 0xB7, 0xA9, 0x26, 0xB3, 0xA7, 0x23, 0xAF, 0xA4, 0x20, 0xAA, 0xA2, 0x1C, 
   0xA6, 0xA0, 0x19, 0xA1, 0x9F, 0x15, 0x9C, 0x9E, 0x12, 0x97, 0x9C, 0x0E, 0x92, 0x9C, 0x0B, 0x8D, 
   0x9B, 0x07, 0x88, 0x9B, 0x03, 0x84, 0x97, 0x00, 0x7F, 0x97, 0xFD, 0x79, 0x97, 0xFA, 0x74, 0x98, 
   0xF6, 0x6F, 0x99, 0xF3, 0x6A, 0x9A, 0xEF, 0x65, 0x9B, 0xEC, 0x60, 0x9D, 0xE9, 0x5B, 0x9F, 0xE5, 
   0x56, 0xA1, 0xE2, 0x51, 0xA3, 0xDF, 0x4D, 0xA6, 0xDC, 0x48, 0xA9, 0xD9, 0x44, 0xAC, 0xD6, 0x40, 
   0xAF, 0xD4, 0x3C, 0xB2, 0xD1, 0x38, 0xB6, 0xCF, 0x34, 0xBA, 0xCC, 0x30, 0xBE, 0xCA, 0x2D, 0xC2, 
   0xC8, 0x2A, 0xC6, 0xC6, 0x27, 0xCA, 0xC4, 0x24, 0xCF, 0xC2, 0x21, 0xD3, 0xC1, 0x1F, 0xD8, 0xBF, 
   0x1D, 0xDD, 0xBE, 0x1B, 0xE2, 0xBD, 0x19, 0xE7, 0xBC, 0x18, 0xEC, 0xBB, 0x17, 0xF1, 0xBB, 0x16, 
   0xF6, 0xBA, 0x15, 0xFB, 0xBA, 0x15, 0x00, 0xBA, 0x15, 0x05, 0xBA, 0x15, 0x0A, 0xBA, 0x15, 0x0F, 
   0xBB, 0x16, 0x14, 0xBB, 0x17, 0x19, 0xBC, 0x18, 0x1E, 0xBD, 0x19, 0x23, 0xBE, 0x1B, 0x28, 0xBF, 
   0x1D, 0x2D, 0xC1, 0x1F, 0x31, 0xC2, 0x21, 0x36, 0xC4, 0x24, 0x3A, 0xC6, 0x27, 0x3E, 0xC8, 0x2A, 
   0x42, 0xCA, 0x2D, 0x46, 0xCC, 0x30, 0x4A, 0xCF, 0x34, 0x4E, 0xD1, 0x38, 0x51, 0xD4, 0x3C, 0x54, 
   0xD6, 0x40, 0x57, 0xD9, 0x44, 0x5A, 0xDC, 0x48, 0x5D, 0xDF, 0x4D, 0x5F, 0xE2, 0x51, 0x61, 0xE5, 
   0x56, 0x63, 0xE9, 0x5B, 0x65, 0xEC, 0x60, 0x66, 0xEF, 0x65, 0x67, 0xF3, 0x6A, 0x68, 0xF6, 0x6F, 
   0x69, 0xFA, 0x74, 0x69, 0xFD, 0x79, 0x69, 0x00, 0x7F, 0x69, 0x03, 0x84, 0x69, 0x06, 0x89, 0x68, 
   0x0A, 0x8E, 0x67, 0x0D, 0x93, 0x66, 0x11, 0x98, 0x65, 0x14, 0x9D, 0x63, 0x17, 0xA2, 0x61, 0x1B, 
   0xA7, 0x5F, 0x1E, 0xAC, 0x5D, 0x21, 0xB0, 0x5A, 0x24, 0xB5, 0x57, 0x27, 0xB9, 0x54, 0x2A, 0xBD, 
   0x51, 0x2C, 0xC1, 0x4E, 0x2F, 0xC5, 0x4A, 0x31, 0xC9, 0x46, 0x34, 0xCD, 0x42, 0x36, 0xD0, 0x3E, 
   0x38, 0xD3, 0x3A, 0x3A, 0xD6, 0x36, 0x3C, 0xD9, 0x31, 0x3E, 0xDC, 0x2D, 0x3F, 0xDE, 0x28, 0x41, 
   0xE0, 0x23, 0x42, 0xE2, 0x1E, 0x43, 0xE4, 0x19, 0x44, 0xE5, 0x14, 0x45, 0xE6, 0x0F, 0x45, 0xE7, 
   0x0A, 0x46, 0xE8, 0x05, 0x46, 0xE8, 0x00, 0x46, 0xE8, 0xFB, 0x46, 0xE8, 0xF6, 0x46, 0xE8, 0xF1, 
   0x45, 0xE7, 0xEC, 0x45, 0xE6, 0xE7, 0x44, 0xE5, 0xE2, 0x43, 0xE4, 0xDD, 0x42, 0xE2, 0xD8, 0x41, 
   0xE0, 0xD3, 0x3F, 0xDE, 0xCF, 0x3E, 0xDC, 0xCA, 0x3C, 0xD9, 0xC6, 0x3A, 0xD6, 0xC2, 0x38, 0xD3, 
   0xBE, 0x36, 0xD0, 0xBA, 0x34, 0xCD, 0xB6, 0x31, 0xC9, 0xB2, 0x2F, 0xC5, 0xAF, 0x2C, 0xC1, 0xAC, 
   0x2A, 0xBD, 0xA9, 0x27, 0xB9, 0xA6, 0x24, 0xB5, 0xA3, 0x21, 0xB0, 0xA1, 0x1E, 0xAC, 0x9F, 0x1B, 
   0xA7, 0x9D, 0x17, 0xA2, 0x9B, 0x14, 0x9D, 0x9A, 0x11, 0x98, 0x99, 0x0D, 0x93, 0x98, 0x0A, 0x8E, 
   0x97, 0x06, 0x89, 0x97, 0x03, 0x84, 0x94, 0x00, 0x7F, 0x94, 0xFD, 0x79, 0x94, 0xFA, 0x74, 0x95, 
   0xF7, 0x6F, 0x96, 0xF4, 0x69, 0x97, 0xF1, 0x64, 0x98, 0xEE, 0x5F, 0x9A, 0xEB, 0x5A, 0x9C, 0xE8, 
   0x55, 0x9E, 0xE5, 0x50, 0xA0, 0xE2, 0x4B, 0xA3, 0xDF, 0x46, 0xA6, 0xDC, 0x42, 0xA9, 0xDA, 0x3E, 
   0xAC, 0xD7, 0x39, 0xB0, 0xD5, 0x35, 0xB3, 0xD2, 0x31, 0xB7, 0xD0, 0x2E, 0xBB, 0xCE, 0x2A, 0xC0, 
   0xCC, 0x27, 0xC4, 0xCA, 0x24, 0xC8, 0xC8, 0x21, 0xCD, 0xC7, 0x1E, 0xD2, 0xC5, 0x1C, 0xD7, 0xC4, 
   0x1A, 0xDC, 0xC3, 0x18, 0xE1, 0xC2, 0x16, 0xE6, 0xC1, 0x15, 0xEB, 0xC0, 0x14, 0xF1, 0xC0, 0x13, 
   0xF6, 0xC0, 0x12, 0xFB, 0xBF, 0x12, 0x00, 0xBF, 0x12, 0x05, 0xBF, 0x12, 0x0A, 0xC0, 0x12, 0x0F, 
   0xC0, 0x13, 0x15, 0xC0, 0x14, 0x1A, 0xC1, 0x15, 0x1F, 0xC2, 0x16, 0x24, 0xC3, 0x18, 0x29, 0xC4, 
   0x1A, 0x2E, 0xC5, 0x1C, 0x33, 0xC7, 0x1E, 0x38, 0xC8, 0x21, 0x3C, 0xCA, 0x24, 0x40, 0xCC, 0x27, 
   0x45, 0xCE, 0x2A, 0x49, 0xD0, 0x2E, 0x4D, 0xD2, 0x31, 0x50, 0xD5, 0x35, 0x54, 0xD7, 0x39, 0x57, 
   0xDA, 0x3E, 0x5A, 0xDC, 0x42, 0x5D, 0xDF, 0x46, 0x60, 0xE2, 0x4B, 0x62, 0xE5, 0x50, 0x64, 0xE8, 
   0x55, 0x66, 0xEB, 0x5A, 0x68, 0xEE, 0x5F, 0x69, 0xF1, 0x64, 0x6A, 0xF4, 0x69, 0x6B, 0xF7, 0x6F, 
   0x6C, 0xFA, 0x74, 0x6C, 0xFD, 0x79, 0x6C, 0x00, 0x7F, 0x6C, 0x03, 0x84, 0x6C, 0x06, 0x89, 0x6B, 
   0x09, 0x8E, 0x6A, 0x0C, 0x94, 0x69, 0x0F, 0x99, 0x68, 0x12, 0x9E, 0x66, 0x15, 0xA3, 0x64, 0x18, 
   0xA8, 0x62, 0x1B, 0xAD, 0x60, 0x1E, 0xB2, 0x5D, 0x21, 0xB7, 0x5A, 0x24, 0xBB, 0x57, 0x26, 0xBF, 
   0x54, 0x29, 0xC4, 0x50, 0x2B, 0xC8, 0x4D, 0x2E, 0xCC, 0x49, 0x30, 0xCF, 0x45, 0x32, 0xD3, 0x40, 
   0x34, 0xD6, 0x3C, 0x36, 0xD9, 0x38, 0x38, 0xDC, 0x33, 0x39, 0xDF, 0x2E, 0x3B, 0xE1, 0x29, 0x3C, 
   0xE3, 0x24, 0x3D, 0xE5, 0x1F, 0x3E, 0xE7, 0x1A, 0x3F, 0xE8, 0x15, 0x40, 0xE9, 0x0F, 0x40, 0xEA, 
   0x0A, 0x40, 0xEB, 0x05, 0x41, 0xEB, 0x00, 0x41, 0xEB, 0xFB, 0x41, 0xEB, 0xF6, 0x40, 0xEB, 0xF1, 
   0x40, 0xEA, 0xEB, 0x40, 0xE9, 0xE6, 0x3F, 0xE8, 0xE1, 0x3E, 0xE7, 0xDC, 0x3D, 0xE5, 0xD7, 0x3C, 
   0xE3, 0xD2, 0x3B, 0xE1, 0xCD, 0x39, 0xDF, 0xC8, 0x38, 0xDC, 0xC4, 0x36, 0xD9, 0xC0, 0x34, 0xD6, 
   0xBB, 0x32, 0xD3, 0xB7, 0x30, 0xCF, 0xB3, 0x2E, 0xCC, 0xB0, 0x2B, 0xC8, 0xAC, 0x29, 0xC4, 0xA9, 
   0x26, 0xBF, 0xA6, 0x24, 0xBB, 0xA3, 0x21, 0xB7, 0xA0, 0x1E, 0xB2, 0x9E, 0x1B, 0xAD, 0x9C, 0x18, 
   0xA8, 0x9A, 0x15, 0xA3, 0x98, 0x12, 0x9E, 0x97, 0x0F, 0x99, 0x96, 0x0C, 0x94, 0x95, 0x09, 0x8E, 
   0x94, 0x06, 0x89, 0x94, 0x03, 0x84, 0x90, 0x00, 0x7F, 0x91, 0xFE, 0x79, 0x91, 0xFB, 0x74, 0x92, 
   0xF8, 0x6E, 0x93, 0xF5, 0x69, 0x94, 0xF2, 0x63, 0x95, 0xEF, 0x5E, 0x97, 0xEC, 0x59, 0x99, 0xEA, 
   0x54, 0x9B, 0xE7, 0x4F, 0x9E, 0xE4, 0x4A, 0xA0, 0xE2, 0x45, 0xA3, 0xDF, 0x40, 0xA7, 0xDD, 0x3C, 
   0xAA, 0xDB, 0x37, 0xAE, 0xD8, 0x33, 0xB1, 0xD6, 0x2F, 0xB5, 0xD4, 0x2C, 0xB9, 0xD2, 0x28, 0xBE, 
   0xD0, 0x25, 0xC2, 0xCF, 0x21, 0xC7, 0xCD, 0x1E, 0xCC, 0xCC, 0x1C, 0xD1, 0xCA, 0x19, 0xD6, 0xC9, 
   0x17, 0xDB, 0xC8, 0x15, 0xE0, 0xC7, 0x13, 0xE5, 0xC6, 0x12, 0xEB, 0xC6, 0x11, 0xF0, 0xC5, 0x10, 
   0xF6, 0xC5, 0x0F, 0xFB, 0xC5, 0x0F, 0x00, 0xC5, 0x0E, 0x05, 0xC5, 0x0F, 0x0A, 0xC5, 0x0F, 0x10, 
   0xC5, 0x10, 0x15, 0xC6, 0x11, 0x1B, 0xC6, 0x12, 0x20, 0xC7, 0x13, 0x25, 0xC8, 0x15, 0x2A, 0xC9, 
   0x17, 0x2F, 0xCA, 0x19, 0x34, 0xCC, 0x1C, 0x39, 0xCD, 0x1E, 0x3E, 0xCF, 0x21, 0x42, 0xD0, 0x25, 
   0x47, 0xD2, 0x28, 0x4B, 0xD4, 0x2C, 0x4F, 0xD6, 0x2F, 0x52, 0xD8, 0x33, 0x56, 0xDB, 0x37, 0x59, 
   0xDD, 0x3C, 0x5D, 0xDF, 0x40, 0x60, 0xE2, 0x45, 0x62, 0xE4, 0x4A, 0x65, 0xE7, 0x4F, 0x67, 0xEA, 
   0x54, 0x69, 0xEC, 0x59, 0x6B, 0xEF, 0x5E, 0x6C, 0xF2, 0x63, 0x6D, 0xF5, 0x69, 0x6E, 0xF8, 0x6E, 
   0x6F, 0xFB, 0x74, 0x6F, 0xFE, 0x79, 0x70, 0x00, 0x7F, 0x6F, 0x02, 0x84, 0x6F, 0x05, 0x89, 0x6E, 
   0x08, 0x8F, 0x6D, 0x0B, 0x94, 0x6C, 0x0E, 0x9A, 0x6B, 0x11, 0x9F, 0x69, 0x14, 0xA4, 0x67, 0x16, 
   0xA9, 0x65, 0x19, 0xAE, 0x62, 0x1C, 0xB3, 0x60, 0x1E, 0xB8, 0x5D, 0x21, 0xBD, 0x59, 0x23, 0xC1, 
   0x56, 0x25, 0xC6, 0x52, 0x28, 0xCA, 0x4F, 0x2A, 0xCE, 0x4B, 0x2C, 0xD1, 0x47, 0x2E, 0xD5, 0x42, 
   0x30, 0xD8, 0x3E, 0x31, 0xDC, 0x39, 0x33, 0xDF, 0x34, 0x34, 0xE1, 0x2F, 0x36, 0xE4, 0x2A, 0x37, 
   0xE6, 0x25, 0x38, 0xE8, 0x20, 0x39, 0xEA, 0x1B, 0x3A, 0xEB, 0x15, 0x3A, 0xEC, 0x10, 0x3B, 0xED, 
   0x0A, 0x3B, 0xEE, 0x05, 0x3B, 0xEE, 0x00, 0x3B, 0xEF, 0xFB, 0x3B, 0xEE, 0xF6, 0x3B, 0xEE, 0xF0, 
   0x3B, 0xED, 0xEB, 0x3A, 0xEC, 0xE5, 0x3A, 0xEB, 0xE0, 0x39, 0xEA, 0xDB, 0x38, 0xE8, 0xD6, 0x37, 
   0xE6, 0xD1, 0x36, 0xE4, 0xCC, 0x34, 0xE1, 0xC7, 0x33, 0xDF, 0xC2, 0x31, 0xDC, 0xBE, 0x30, 0xD8, 
   0xB9, 0x2E, 0xD5, 0xB5, 0x2C, 0xD1, 0xB1, 0x2A, 0xCE, 0xAE, 0x28, 0xCA, 0xAA, 0x25, 0xC6, 0xA7, 
   0x23, 0xC1, 0xA3, 0x21, 0xBD, 0xA0, 0x1E, 0xB8, 0x9E, 0x1C, 0xB3, 0x9B, 0x19, 0xAE, 0x99, 0x16, 
   0xA9, 0x97, 0x14, 0xA4, 0x95, 0x11, 0x9F, 0x94, 0x0E, 0x9A, 0x93, 0x0B, 0x94, 0x92, 0x08, 0x8F, 
   0x91, 0x05, 0x89, 0x91, 0x02, 0x84, 0x8E, 0x00, 0x7F, 0x8E, 0xFE, 0x79, 0x8E, 0xFB, 0x73, 0x8F, 
   0xF9, 0x6E, 0x90, 0xF6, 0x68, 0x91, 0xF3, 0x63, 0x93, 0xF1, 0x5D, 0x94, 0xEE, 0x58, 0x96, 0xEC, 
   0x53, 0x99, 0xE9, 0x4D, 0x9B, 0xE7, 0x48, 0x9E, 0xE5, 0x43, 0xA1, 0xE2, 0x3F, 0xA4, 0xE0, 0x3A, 
   0xA8, 0xDE, 0x36, 0xAB, 0xDC, 0x31, 0xAF, 0xDA, 0x2D, 0xB3, 0xD8, 0x29, 0xB8, 0xD7, 0x26, 0xBC, 
   0xD5, 0x22, 0xC1, 0xD3, 0x1F, 0xC5, 0xD2, 0x1C, 0xCA, 0xD1, 0x19, 0xCF, 0xCF, 0x17, 0xD5, 0xCE, 
   0x14, 0xDA, 0xCD, 0x12, 0xDF, 0xCD, 0x11, 0xE5, 0xCC, 0x0F, 0xEA, 0xCB, 0x0E, 0xF0, 0xCB, 0x0D, 
   0xF5, 0xCA, 0x0C, 0xFB, 0xCA, 0x0C, 0x00, 0xCA, 0x0C, 0x05, 0xCA, 0x0C, 0x0B, 0xCA, 0x0C, 0x10, 
   0xCB, 0x0D, 0x16, 0xCB, 0x0E, 0x1B, 0xCC, 0x0F, 0x21, 0xCD, 0x11, 0x26, 0xCD, 0x12, 0x2B, 0xCE, 
   0x14, 0x31, 0xCF, 0x17, 0x36, 0xD1, 0x19, 0x3B, 0xD2, 0x1C, 0x3F, 0xD3, 0x1F, 0x44, 0xD5, 0x22, 
   0x48, 0xD7, 0x26, 0x4D, 0xD8, 0x29, 0x51, 0xDA, 0x2D, 0x55, 0xDC, 0x31, 0x58, 0xDE, 0x36, 0x5C, 
   0xE0, 0x3A, 0x5F, 0xE2, 0x3F, 0x62, 0xE5, 0x43, 0x65, 0xE7, 0x48, 0x67, 0xE9, 0x4D, 0x6A, 0xEC, 
   0x53, 0x6C, 0xEE, 0x58, 0x6D, 0xF1, 0x5D, 0x6F, 0xF3, 0x63, 0x70, 0xF6, 0x68, 0x71, 0xF9, 0x6E, 
   0x72, 0xFB, 0x73, 0x72, 0xFE, 0x79, 0x72, 0x00, 0x7F, 0x72, 0x02, 0x84, 0x72, 0x05, 0x8A, 0x71, 
   0x07, 0x8F, 0x70, 0x0A, 0x95, 0x6F, 0x0D, 0x9A, 0x6D, 0x0F, 0xA0, 0x6C, 0x12, 0xA5, 0x6A, 0x14, 
   0xAA, 0x67, 0x17, 0xB0, 0x65, 0x19, 0xB5, 0x62, 0x1B, 0xBA, 0x5F, 0x1E, 0xBE, 0x5C, 0x20, 0xC3, 
   0x58, 0x22, 0xC7, 0x55, 0x24, 0xCC, 0x51, 0x26, 0xD0, 0x4D, 0x28, 0xD4, 0x48, 0x29, 0xD7, 0x44, 
   0x2B, 0xDB, 0x3F, 0x2D, 0xDE, 0x3B, 0x2E, 0xE1, 0x36, 0x2F, 0xE4, 0x31, 0x31, 0xE6, 0x2B, 0x32, 
   0xE9, 0x26, 0x33, 0xEB, 0x21, 0x33, 0xEC, 0x1B, 0x34, 0xEE, 0x16, 0x35, 0xEF, 0x10, 0x35, 0xF0, 
   0x0B, 0x36, 0xF1, 0x05, 0x36, 0xF1, 0x00, 0x36, 0xF1, 0xFB, 0x36, 0xF1, 0xF5, 0x36, 0xF1, 0xF0, 
   0x35, 0xF0, 0xEA, 0x35, 0xEF, 0xE5, 0x34, 0xEE, 0xDF, 0x33, 0xEC, 0xDA, 0x33, 0xEB, 0xD5, 0x32, 
   0xE9, 0xCF, 0x31, 0xE6, 0xCA, 0x2F, 0xE4, 0xC5, 0x2E, 0xE1, 0xC1, 0x2D, 0xDE, 0xBC, 0x2B, 0xDB, 
   0xB8, 0x29, 0xD7, 0xB3, 0x28, 0xD4, 0xAF, 0x26, 0xD0, 0xAB, 0x24, 0xCC, 0xA8, 0x22, 0xC7, 0xA4, 
   0x20, 0xC3, 0xA1, 0x1E, 0xBE, 0x9E, 0x1B, 0xBA, 0x9B, 0x19, 0xB5, 0x99, 0x17, 0xB0, 0x96, 0x14, 
   0xAA, 0x94, 0x12, 0xA5, 0x93, 0x0F, 0xA0, 0x91, 0x0D, 0x9A, 0x90, 0x0A, 0x95, 0x8F, 0x07, 0x8F, 
   0x8E, 0x05, 0x8A, 0x8E, 0x02, 0x84, 0x8B, 0x00, 0x7F, 0x8B, 0xFE, 0x79, 0x8C, 0xFC, 0x73, 0x8C, 
   0xF9, 0x6D, 0x8D, 0xF7, 0x68, 0x8F, 0xF5, 0x62, 0x90, 0xF2, 0x5C, 0x92, 0xF0, 0x57, 0x94, 0xEE, 
   0x52, 0x96, 0xEC, 0x4C, 0x99, 0xEA, 0x47, 0x9C, 0xE8, 0x42, 0x9F, 0xE5, 0x3D, 0xA2, 0xE4, 0x39, 
   0xA6, 0xE2, 0x34, 0xAA, 0xE0, 0x30, 0xAE, 0xDE, 0x2C, 0xB2, 0xDC, 0x28, 0xB6, 0xDB, 0x24, 0xBB, 
   0xD9, 0x20, 0xBF, 0xD8, 0x1D, 0xC4, 0xD7, 0x1A, 0xC9, 0xD6, 0x17, 0xCE, 0xD5, 0x14, 0xD4, 0xD4, 
   0x12, 0xD9, 0xD3, 0x10, 0xDE, 0xD2, 0x0E, 0xE4, 0xD1, 0x0D, 0xEA, 0xD1, 0x0B, 0xEF, 0xD0, 0x0A, 
   0xF5, 0xD0, 0x0A, 0xFB, 0xD0, 0x09, 0x00, 0xD0, 0x09, 0x05, 0xD0, 0x09, 0x0B, 0xD0, 0x0A, 0x11, 
   0xD0, 0x0A, 0x16, 0xD1, 0x0B, 0x1C, 0xD1, 0x0D, 0x22, 0xD2, 0x0E, 0x27, 0xD3, 0x10, 0x2C, 0xD4, 
   0x12, 0x32, 0xD5, 0x14, 0x37, 0xD6, 0x17, 0x3C, 0xD7, 0x1A, 0x41, 0xD8, 0x1D, 0x45, 0xD9, 0x20, 
   0x4A, 0xDB, 0x24, 0x4E, 0xDC, 0x28, 0x52, 0xDE, 0x2C, 0x56, 0xE0, 0x30, 0x5A, 0xE2, 0x34, 0x5E, 
   0xE4, 0x39, 0x61, 0xE5, 0x3D, 0x64, 0xE8, 0x42, 0x67, 0xEA, 0x47, 0x6A, 0xEC, 0x4C, 0x6C, 0xEE, 
   0x52, 0x6E, 0xF0, 0x57, 0x70, 0xF2, 0x5C, 0x71, 0xF5, 0x62, 0x73, 0xF7, 0x68, 0x74, 0xF9, 0x6D, 
   0x74, 0xFC, 0x73, 0x75, 0xFE, 0x79, 0x75, 0x00, 0x7F, 0x75, 0x02, 0x84, 0x74, 0x04, 0x8A, 0x74, 
   0x07, 0x90, 0x73, 0x09, 0x95, 0x71, 0x0B, 0x9B, 0x70, 0x0E, 0xA1, 0x6E, 0x10, 0xA6, 0x6C, 0x12, 
   0xAB, 0x6A, 0x14, 0xB1, 0x67, 0x16, 0xB6, 0x64, 0x18, 0xBB, 0x61, 0x1B, 0xC0, 0x5E, 0x1C, 0xC4, 
   0x5A, 0x1E, 0xC9, 0x56, 0x20, 0xCD, 0x52, 0x22, 0xD1, 0x4E, 0x24, 0xD5, 0x4A, 0x25, 0xD9, 0x45, 
   0x27, 0xDD, 0x41, 0x28, 0xE0, 0x3C, 0x29, 0xE3, 0x37, 0x2A, 0xE6, 0x32, 0x2B, 0xE9, 0x2C, 0x2C, 
   0xEB, 0x27, 0x2D, 0xED, 0x22, 0x2E, 0xEF, 0x1C, 0x2F, 0xF0, 0x16, 0x2F, 0xF2, 0x11, 0x30, 0xF3, 
   0x0B, 0x30, 0xF3, 0x05, 0x30, 0xF4, 0x00, 0x30, 0xF4, 0xFB, 0x30, 0xF4, 0xF5, 0x30, 0xF3, 0xEF, 
   0x30, 0xF3, 0xEA, 0x2F, 0xF2, 0xE4, 0x2F, 0xF0, 0xDE, 0x2E, 0xEF, 0xD9, 0x2D, 0xED, 0xD4, 0x2C, 
   0xEB, 0xCE, 0x2B, 0xE9, 0xC9, 0x2A, 0xE6, 0xC4, 0x29, 0xE3, 0xBF, 0x28, 0xE0, 0xBB, 0x27, 0xDD, 
   0xB6, 0x25, 0xD9, 0xB2, 0x24, 0xD5, 0xAE, 0x22, 0xD1, 0xAA, 0x20, 0xCD, 0xA6, 0x1E, 0xC9, 0xA2, 
   0x1C, 0xC4, 0x9F, 0x1B, 0xC0, 0x9C, 0x18, 0xBB, 0x99, 0x16, 0xB6, 0x96, 0x14, 0xB1, 0x94, 0x12, 
   0xAB, 0x92, 0x10, 0xA6, 0x90, 0x0E, 0xA1, 0x8F, 0x0B, 0x9B, 0x8D, 0x09, 0x95, 0x8C, 0x07, 0x90, 
   0x8C, 0x04, 0x8A, 0x8B, 0x02, 0x84, 0x89, 0x00, 0x7F, 0x89, 0xFE, 0x79, 0x89, 0xFC, 0x73, 0x8A, 
   0xFA, 0x6D, 0x8B, 0xF8, 0x67, 0x8D, 0xF6, 0x61, 0x8E, 0xF4, 0x5C, 0x90, 0xF2, 0x56, 0x92, 0xF0, 
   0x51, 0x94, 0xEE, 0x4B, 0x97, 0xEC, 0x46, 0x9A, 0xEB, 0x41, 0x9D, 0xE9, 0x3C, 0xA0, 0xE7, 0x37, 
   0xA4, 0xE5, 0x33, 0xA8, 0xE4, 0x2E, 0xAC, 0xE2, 0x2A, 0xB0, 0xE1, 0x26, 0xB5, 0xDF, 0x22, 0xB9, 
   0xDE, 0x1E, 0xBE, 0xDD, 0x1B, 0xC3, 0xDC, 0x18, 0xC8, 0xDB, 0x15, 0xCD, 0xDA, 0x12, 0xD3, 0xD9, 
   0x10, 0xD8, 0xD8, 0x0E, 0xDE, 0xD8, 0x0C, 0xE3, 0xD7, 0x0B, 0xE9, 0xD7, 0x09, 0xEF, 0xD6, 0x08, 
   0xF5, 0xD6, 0x07, 0xFB, 0xD6, 0x07, 0x00, 0xD6, 0x07, 0x05, 0xD6, 0x07, 0x0B, 0xD6, 0x07, 0x11, 
   0xD6, 0x08, 0x17, 0xD7, 0x09, 0x1D, 0xD7, 0x0B, 0x22, 0xD8, 0x0C, 0x28, 0xD8, 0x0E, 0x2D, 0xD9, 
   0x10, 0x33, 0xDA, 0x12, 0x38, 0xDB, 0x15, 0x3D, 0xDC, 0x18, 0x42, 0xDD, 0x1B, 0x47, 0xDE, 0x1E, 
   0x4B, 0xDF, 0x22, 0x50, 0xE1, 0x26, 0x54, 0xE2, 0x2A, 0x58, 0xE4, 0x2E, 0x5C, 0xE5, 0x33, 0x60, 
   0xE7, 0x37, 0x63, 0xE9, 0x3C, 0x66, 0xEB, 0x41, 0x69, 0xEC, 0x46, 0x6C, 0xEE, 0x4B, 0x6E, 0xF0, 
   0x51, 0x70, 0xF2, 0x56, 0x72, 0xF4, 0x5C, 0x73, 0xF6, 0x61, 0x75, 0xF8, 0x67, 0x76, 0xFA, 0x6D, 
   0x77, 0xFC, 0x73, 0x77, 0xFE, 0x79, 0x77, 0x00, 0x7F, 0x77, 0x02, 0x84, 0x77, 0x04, 0x8A, 0x76, 
   0x06, 0x90, 0x75, 0x08, 0x96, 0x73, 0x0A, 0x9C, 0x72, 0x0C, 0xA1, 0x70, 0x0E, 0xA7, 0x6E, 0x10, 
   0xAC, 0x6C, 0x12, 0xB2, 0x69, 0x14, 0xB7, 0x66, 0x15, 0xBC, 0x63, 0x17, 0xC1, 0x60, 0x19, 0xC6, 
   0x5C, 0x1B, 0xCA, 0x58, 0x1C, 0xCF, 0x54, 0x1E, 0xD3, 0x50, 0x1F, 0xD7, 0x4B, 0x21, 0xDB, 0x47, 
   0x22, 0xDF, 0x42, 0x23, 0xE2, 0x3D, 0x24, 0xE5, 0x38, 0x25, 0xE8, 0x33, 0x26, 0xEB, 0x2D, 0x27, 
   0xED, 0x28, 0x28, 0xEF, 0x22, 0x28, 0xF1, 0x1D, 0x29, 0xF2, 0x17, 0x29, 0xF4, 0x11, 0x2A, 0xF5, 
   0x0B, 0x2A, 0xF6, 0x05, 0x2A, 0xF6, 0x00, 0x2A, 0xF6, 0xFB, 0x2A, 0xF6, 0xF5, 0x2A, 0xF6, 0xEF, 
   0x2A, 0xF5, 0xE9, 0x29, 0xF4, 0xE3, 0x29, 0xF2, 0xDE, 0x28, 0xF1, 0xD8, 0x28, 0xEF, 0xD3, 0x27, 
   0xED, 0xCD, 0x26, 0xEB, 0xC8, 0x25, 0xE8, 0xC3, 0x24, 0xE5, 0xBE, 0x23, 0xE2, 0xB9, 0x22, 0xDF, 
   0xB5, 0x21, 0xDB, 0xB0, 0x1F, 0xD7, 0xAC, 0x1E, 0xD3, 0xA8, 0x1C, 0xCF, 0xA4, 0x1B, 0xCA, 0xA0, 
   0x19, 0xC6, 0x9D, 0x17, 0xC1, 0x9A, 0x15, 0xBC, 0x97, 0x14, 0xB7, 0x94, 0x12, 0xB2, 0x92, 0x10, 
   0xAC, 0x90, 0x0E, 0xA7, 0x8E, 0x0C, 0xA1, 0x8D, 0x0A, 0x9C, 0x8B, 0x08, 0x96, 0x8A, 0x06, 0x90, 
   0x89, 0x04, 0x8A, 0x89, 0x02, 0x84, 0x87, 0x00, 0x7F, 0x87, 0xFF, 0x79, 0x88, 0xFD, 0x73, 0x88, 
   0xFB, 0x6D, 0x89, 0xF9, 0x67, 0x8B, 0xF8, 0x61, 0x8C, 0xF6, 0x5B, 0x8E, 0xF4, 0x56, 0x90, 0xF2, 
   0x50, 0x93, 0xF1, 0x4B, 0x95, 0xEF, 0x45, 0x98, 0xEE, 0x40, 0x9B, 0xEC, 0x3B, 0x9F, 0xEB, 0x36, 
   0xA3, 0xE9, 0x31, 0xA6, 0xE8, 0x2D, 0xAB, 0xE6, 0x29, 0xAF, 0xE5, 0x24, 0xB3, 0xE4, 0x21, 0xB8, 
   0xE3, 0x1D, 0xBD, 0xE2, 0x19, 0xC2, 0xE1, 0x16, 0xC7, 0xE0, 0x13, 0xCD, 0xDF, 0x11, 0xD2, 0xDE, 
   0x0E, 0xD8, 0xDE, 0x0C, 0xDD, 0xDD, 0x0A, 0xE3, 0xDD, 0x09, 0xE9, 0xDC, 0x07, 0xEF, 0xDC, 0x06, 
   0xF5, 0xDC, 0x06, 0xFB, 0xDC, 0x05, 0x00, 0xDC, 0x05, 0x05, 0xDC, 0x05, 0x0B, 0xDC, 0x06, 0x11, 
   0xDC, 0x06, 0x17, 0xDC, 0x07, 0x1D, 0xDD, 0x09, 0x23, 0xDD, 0x0A, 0x28, 0xDE, 0x0C, 0x2E, 0xDE, 
   0x0E, 0x33, 0xDF, 0x11, 0x39, 0xE0, 0x13, 0x3E, 0xE1, 0x16, 0x43, 0xE2, 0x19, 0x48, 0xE3, 0x1D, 
   0x4D, 0xE4, 0x21, 0x51, 0xE5, 0x24, 0x55, 0xE6, 0x29, 0x5A, 0xE8, 0x2D, 0x5D, 0xE9, 0x31, 0x61, 
   0xEB, 0x36, 0x65, 0xEC, 0x3B, 0x68, 0xEE, 0x40, 0x6B, 0xEF, 0x45, 0x6D, 0xF1, 0x4B, 0x70, 0xF2, 
   0x50, 0x72, 0xF4, 0x56, 0x74, 0xF6, 0x5B, 0x75, 0xF8, 0x61, 0x77, 0xF9, 0x67, 0x78, 0xFB, 0x6D, 
   0x78, 0xFD, 0x73, 0x79, 0xFF, 0x79, 0x79, 0x00, 0x7F, 0x79, 0x01, 0x84, 0x78, 0x03, 0x8A, 0x78, 
   0x05, 0x90, 0x77, 0x07, 0x96, 0x75, 0x08, 0x9C, 0x74, 0x0A, 0xA2, 0x72, 0x0C, 0xA7, 0x70, 0x0E, 
   0xAD, 0x6D, 0x0F, 0xB2, 0x6B, 0x11, 0xB8, 0x68, 0x12, 0xBD, 0x65, 0x14, 0xC2, 0x61, 0x15, 0xC7, 
   0x5D, 0x17, 0xCC, 0x5A, 0x18, 0xD0, 0x55, 0x1A, 0xD4, 0x51, 0x1B, 0xD9, 0x4D, 0x1C, 0xDC, 0x48, 
   0x1D, 0xE0, 0x43, 0x1E, 0xE4, 0x3E, 0x1F, 0xE7, 0x39, 0x20, 0xEA, 0x33, 0x21, 0xEC, 0x2E, 0x22, 
   0xEF, 0x28, 0x22, 0xF1, 0x23, 0x23, 0xF3, 0x1D, 0x23, 0xF4, 0x17, 0x24, 0xF6, 0x11, 0x24, 0xF7, 
   0x0B, 0x24, 0xF7, 0x05, 0x24, 0xF8, 0x00, 0x24, 0xF8, 0xFB, 0x24, 0xF8, 0xF5, 0x24, 0xF7, 0xEF, 
   0x24, 0xF7, 0xE9, 0x24, 0xF6, 0xE3, 0x23, 0xF4, 0xDD, 0x23, 0xF3, 0xD8, 0x22, 0xF1, 0xD2, 0x22, 
   0xEF, 0xCD, 0x21, 0xEC, 0xC7, 0x20, 0xEA, 0xC2, 0x1F, 0xE7, 0xBD, 0x1E, 0xE4, 0xB8, 0x1D, 0xE0, 
   0xB3, 0x1C, 0xDC, 0xAF, 0x1B, 0xD9, 0xAB, 0x1A, 0xD4, 0xA6, 0x18, 0xD0, 0xA3, 0x17, 0xCC, 0x9F, 
   0x15, 0xC7, 0x9B, 0x14, 0xC2, 0x98, 0x12, 0xBD, 0x95, 0x11, 0xB8, 0x93, 0x0F, 0xB2, 0x90, 0x0E, 
   0xAD, 0x8E, 0x0C, 0xA7, 0x8C, 0x0A, 0xA2, 0x8B, 0x08, 0x9C, 0x89, 0x07, 0x96, 0x88, 0x05, 0x90, 
   0x88, 0x03, 0x8A, 0x87, 0x01, 0x84, 0x85, 0x00, 0x7F, 0x85, 0xFF, 0x78, 0x86, 0xFD, 0x72, 0x87, 
   0xFC, 0x6C, 0x88, 0xFA, 0x66, 0x89, 0xF9, 0x61, 0x8B, 0xF8, 0x5B, 0x8D, 0xF6, 0x55, 0x8F, 0xF5, 
   0x4F, 0x91, 0xF3, 0x4A, 0x94, 0xF2, 0x44, 0x97, 0xF1, 0x3F, 0x9A, 0xEF, 0x3A, 0x9E, 0xEE, 0x35, 
   0xA1, 0xED, 0x30, 0xA5, 0xEC, 0x2C, 0xA9, 0xEB, 0x27, 0xAE, 0xEA, 0x23, 0xB2, 0xE9, 0x1F, 0xB7, 
   0xE8, 0x1C, 0xBC, 0xE7, 0x18, 0xC1, 0xE6, 0x15, 0xC6, 0xE5, 0x12, 0xCC, 0xE5, 0x0F, 0xD1, 0xE4, 
   0x0D, 0xD7, 0xE3, 0x0B, 0xDD, 0xE3, 0x09, 0xE3, 0xE3, 0x07, 0xE8, 0xE2, 0x06, 0xEE, 0xE2, 0x05, 
   0xF4, 0xE2, 0x04, 0xFA, 0xE2, 0x03, 0x00, 0xE2, 0x03, 0x06, 0xE2, 0x03, 0x0C, 0xE2, 0x04, 0x12, 
   0xE2, 0x05, 0x18, 0xE2, 0x06, 0x1D, 0xE3, 0x07, 0x23, 0xE3, 0x09, 0x29, 0xE3, 0x0B, 0x2F, 0xE4, 
   0x0D, 0x34, 0xE5, 0x0F, 0x3A, 0xE5, 0x12, 0x3F, 0xE6, 0x15, 0x44, 0xE7, 0x18, 0x49, 0xE8, 0x1C, 
   0x4E, 0xE9, 0x1F, 0x52, 0xEA, 0x23, 0x57, 0xEB, 0x27, 0x5B, 0xEC, 0x2C, 0x5F, 0xED, 0x30, 0x62, 
   0xEE, 0x35, 0x66, 0xEF, 0x3A, 0x69, 0xF1, 0x3F, 0x6C, 0xF2, 0x44, 0x6F, 0xF3, 0x4A, 0x71, 0xF5, 
   0x4F, 0x73, 0xF6, 0x55, 0x75, 0xF8, 0x5B, 0x77, 0xF9, 0x61, 0x78, 0xFA, 0x66, 0x79, 0xFC, 0x6C, 
   0x7A, 0xFD, 0x72, 0x7B, 0xFF, 0x78, 0x7B, 0x00, 0x7F, 0x7B, 0x01, 0x85, 0x7A, 0x03, 0x8B, 0x79, 
   0x04, 0x91, 0x78, 0x06, 0x97, 0x77, 0x07, 0x9C, 0x75, 0x08, 0xA2, 0x73, 0x0A, 0xA8, 0x71, 0x0B, 
   0xAE, 0x6F, 0x0D, 0xB3, 0x6C, 0x0E, 0xB9, 0x69, 0x0F, 0xBE, 0x66, 0x11, 0xC3, 0x62, 0x12, 0xC8, 
   0x5F, 0x13, 0xCD, 0x5B, 0x14, 0xD1, 0x57, 0x15, 0xD6, 0x52, 0x16, 0xDA, 0x4E, 0x17, 0xDE, 0x49, 
   0x18, 0xE1, 0x44, 0x19, 0xE5, 0x3F, 0x1A, 0xE8, 0x3A, 0x1B, 0xEB, 0x34, 0x1B, 0xEE, 0x2F, 0x1C, 
   0xF0, 0x29, 0x1D, 0xF2, 0x23, 0x1D, 0xF4, 0x1D, 0x1D, 0xF6, 0x18, 0x1E, 0xF7, 0x12, 0x1E, 0xF8, 
   0x0C, 0x1E, 0xF9, 0x06, 0x1E, 0xFA, 0x00, 0x1E, 0xFA, 0xFA, 0x1E, 0xFA, 0xF4, 0x1E, 0xF9, 0xEE, 
   0x1E, 0xF8, 0xE8, 0x1E, 0xF7, 0xE3, 0x1D, 0xF6, 0xDD, 0x1D, 0xF4, 0xD7, 0x1D, 0xF2, 0xD1, 0x1C, 
   0xF0, 0xCC, 0x1B, 0xEE, 0xC6, 0x1B, 0xEB, 0xC1, 0x1A, 0xE8, 0xBC, 0x19, 0xE5, 0xB7, 0x18, 0xE1, 
   0xB2, 0x17, 0xDE, 0xAE, 0x16, 0xDA, 0xA9, 0x15, 0xD6, 0xA5, 0x14, 0xD1, 0xA1, 0x13, 0xCD, 0x9E, 
   0x12, 0xC8, 0x9A, 0x11, 0xC3, 0x97, 0x0F, 0xBE, 0x94, 0x0E, 0xB9, 0x91, 0x0D, 0xB3, 0x8F, 0x0B, 
   0xAE, 0x8D, 0x0A, 0xA8, 0x8B, 0x08, 0xA2, 0x89, 0x07, 0x9C, 0x88, 0x06, 0x97, 0x87, 0x04, 0x91, 
   0x86, 0x03, 0x8B, 0x85, 0x01, 0x85, 0x84, 0x00, 0x7F, 0x84, 0xFF, 0x78, 0x85, 0xFE, 0x72, 0x85, 
   0xFD, 0x6C, 0x86, 0xFC, 0x66, 0x88, 0xFA, 0x60, 0x89, 0xF9, 0x5A, 0x8B, 0xF8, 0x55, 0x8D, 0xF7, 
   0x4F, 0x90, 0xF6, 0x49, 0x93, 0xF5, 0x44, 0x96, 0xF4, 0x3E, 0x99, 0xF3, 0x39, 0x9C, 0xF2, 0x34, 
   0xA0, 0xF1, 0x2F, 0xA4, 0xF0, 0x2B, 0xA8, 0xEF, 0x26, 0xAD, 0xEE, 0x22, 0xB1, 0xED, 0x1E, 0xB6, 
   0xED, 0x1A, 0xBB, 0xEC, 0x17, 0xC0, 0xEB, 0x14, 0xC6, 0xEB, 0x11, 0xCB, 0xEA, 0x0E, 0xD1, 0xEA, 
   0x0B, 0xD7, 0xE9, 0x09, 0xDC, 0xE9, 0x07, 0xE2, 0xE8, 0x06, 0xE8, 0xE8, 0x04, 0xEE, 0xE8, 0x03, 
   0xF4, 0xE8, 0x03, 0xFA, 0xE8, 0x02, 0x00, 0xE8, 0x02, 0x06, 0xE8, 0x02, 0x0C, 0xE8, 0x03, 0x12, 
   0xE8, 0x03, 0x18, 0xE8, 0x04, 0x1E, 0xE8, 0x06, 0x24, 0xE9, 0x07, 0x29, 0xE9, 0x09, 0x2F, 0xEA, 
   0x0B, 0x35, 0xEA, 0x0E, 0x3A, 0xEB, 0x11, 0x40, 0xEB, 0x14, 0x45, 0xEC, 0x17, 0x4A, 0xED, 0x1A, 
   0x4F, 0xED, 0x1E, 0x53, 0xEE, 0x22, 0x58, 0xEF, 0x26, 0x5C, 0xF0, 0x2B, 0x60, 0xF1, 0x2F, 0x64, 
   0xF2, 0x34, 0x67, 0xF3, 0x39, 0x6A, 0xF4, 0x3E, 0x6D, 0xF5, 0x44, 0x70, 0xF6, 0x49, 0x73, 0xF7, 
   0x4F, 0x75, 0xF8, 0x55, 0x77, 0xF9, 0x5A, 0x78, 0xFA, 0x60, 0x7A, 0xFC, 0x66, 0x7B, 0xFD, 0x6C, 
   0x7B, 0xFE, 0x72, 0x7C, 0xFF, 0x78, 0x7C, 0x00, 0x7F, 0x7C, 0x01, 0x85, 0x7B, 0x02, 0x8B, 0x7B, 
   0x03, 0x91, 0x7A, 0x04, 0x97, 0x78, 0x06, 0x9D, 0x77, 0x07, 0xA3, 0x75, 0x08, 0xA8, 0x73, 0x09, 
   0xAE, 0x70, 0x0A, 0xB4, 0x6D, 0x0B, 0xB9, 0x6A, 0x0C, 0xBF, 0x67, 0x0D, 0xC4, 0x64, 0x0E, 0xC9, 
   0x60, 0x0F, 0xCE, 0x5C, 0x10, 0xD2, 0x58, 0x11, 0xD7, 0x53, 0x12, 0xDB, 0x4F, 0x13, 0xDF, 0x4A, 
   0x13, 0xE3, 0x45, 0x14, 0xE6, 0x40, 0x15, 0xE9, 0x3A, 0x15, 0xEC, 0x35, 0x16, 0xEF, 0x2F, 0x16, 
   0xF2, 0x29, 0x17, 0xF4, 0x24, 0x17, 0xF6, 0x1E, 0x18, 0xF7, 0x18, 0x18, 0xF9, 0x12, 0x18, 0xFA, 
   0x0C, 0x18, 0xFA, 0x06, 0x18, 0xFB, 0x00, 0x18, 0xFB, 0xFA, 0x18, 0xFB, 0xF4, 0x18, 0xFA, 0xEE, 
   0x18, 0xFA, 0xE8, 0x18, 0xF9, 0xE2, 0x18, 0xF7, 0xDC, 0x17, 0xF6, 0xD7, 0x17, 0xF4, 0xD1, 0x16, 
   0xF2, 0xCB, 0x16, 0xEF, 0xC6, 0x15, 0xEC, 0xC0, 0x15, 0xE9, 0xBB, 0x14, 0xE6, 0xB6, 0x13, 0xE3, 
   0xB1, 0x13, 0xDF, 0xAD, 0x12, 0xDB, 0xA8, 0x11, 0xD7, 0xA4, 0x10, 0xD2, 0xA0, 0x0F, 0xCE, 0x9C, 
   0x0E, 0xC9, 0x99, 0x0D, 0xC4, 0x96, 0x0C, 0xBF, 0x93, 0x0B, 0xB9, 0x90, 0x0A, 0xB4, 0x8D, 0x09, 
   0xAE, 0x8B, 0x08, 0xA8, 0x89, 0x07, 0xA3, 0x88, 0x06, 0x9D, 0x86, 0x04, 0x97, 0x85, 0x03, 0x91, 
   0x85, 0x02, 0x8B, 0x84, 0x01, 0x85, 0x83, 0x00, 0x7F, 0x83, 0x00, 0x78, 0x83, 0xFF, 0x72, 0x84, 
   0xFE, 0x6C, 0x85, 0xFD, 0x66, 0x87, 0xFC, 0x60, 0x88, 0xFB, 0x5A, 0x8A, 0xFA, 0x54, 0x8C, 0xF9, 
   0x4E, 0x8F, 0xF9, 0x49, 0x92, 0xF8, 0x43, 0x95, 0xF7, 0x3E, 0x98, 0xF6, 0x39, 0x9C, 0xF5, 0x34, 
   0x9F, 0xF5, 0x2F, 0xA3, 0xF4, 0x2A, 0xA8, 0xF3, 0x26, 0xAC, 0xF3, 0x21, 0xB1, 0xF2, 0x1D, 0xB6, 
   0xF2, 0x1A, 0xBB, 0xF1, 0x16, 0xC0, 0xF1, 0x13, 0xC5, 0xF0, 0x10, 0xCB, 0xF0, 0x0D, 0xD0, 0xEF, 
   0x0A, 0xD6, 0xEF, 0x08, 0xDC, 0xEF, 0x06, 0xE2, 0xEE, 0x05, 0xE8, 0xEE, 0x03, 0xEE, 0xEE, 0x02, 
   0xF4, 0xEE, 0x01, 0xFA, 0xEE, 0x01, 0x00, 0xEE, 0x01, 0x06, 0xEE, 0x01, 0x0C, 0xEE, 0x01, 0x12, 
   0xEE, 0x02, 0x18, 0xEE, 0x03, 0x1E, 0xEE, 0x05, 0x24, 0xEF, 0x06, 0x2A, 0xEF, 0x08, 0x30, 0xEF, 
   0x0A, 0x35, 0xF0, 0x0D, 0x3B, 0xF0, 0x10, 0x40, 0xF1, 0x13, 0x45, 0xF1, 0x16, 0x4A, 0xF2, 0x1A, 
   0x4F, 0xF2, 0x1D, 0x54, 0xF3, 0x21, 0x58, 0xF3, 0x26, 0x5D, 0xF4, 0x2A, 0x61, 0xF5, 0x2F, 0x64, 
   0xF5, 0x34, 0x68, 0xF6, 0x39, 0x6B, 0xF7, 0x3E, 0x6E, 0xF8, 0x43, 0x71, 0xF9, 0x49, 0x74, 0xF9, 
   0x4E, 0x76, 0xFA, 0x54, 0x78, 0xFB, 0x5A, 0x79, 0xFC, 0x60, 0x7B, 0xFD, 0x66, 0x7C, 0xFE, 0x6C, 
   0x7D, 0xFF, 0x72, 0x7D, 0x00, 0x78, 0x7D, 0x00, 0x7F, 0x7D, 0x00, 0x85, 0x7D, 0x01, 0x8B, 0x7C, 
   0x02, 0x91, 0x7B, 0x03, 0x97, 0x79, 0x04, 0x9D, 0x78, 0x05, 0xA3, 0x76, 0x06, 0xA9, 0x74, 0x07, 
   0xAF, 0x71, 0x07, 0xB4, 0x6E, 0x08, 0xBA, 0x6B, 0x09, 0xBF, 0x68, 0x0A, 0xC4, 0x64, 0x0B, 0xC9, 
   0x61, 0x0B, 0xCE, 0x5D, 0x0C, 0xD3, 0x58, 0x0D, 0xD7, 0x54, 0x0D, 0xDC, 0x4F, 0x0E, 0xE0, 0x4A, 
   0x0E, 0xE3, 0x45, 0x0F, 0xE7, 0x40, 0x0F, 0xEA, 0x3B, 0x10, 0xED, 0x35, 0x10, 0xF0, 0x30, 0x11, 
   0xF3, 0x2A, 0x11, 0xF5, 0x24, 0x11, 0xF7, 0x1E, 0x12, 0xF8, 0x18, 0x12, 0xFA, 0x12, 0x12, 0xFB, 
   0x0C, 0x12, 0xFC, 0x06, 0x12, 0xFC, 0x00, 0x12, 0xFC, 0xFA, 0x12, 0xFC, 0xF4, 0x12, 0xFC, 0xEE, 
   0x12, 0xFB, 0xE8, 0x12, 0xFA, 0xE2, 0x12, 0xF8, 0xDC, 0x11, 0xF7, 0xD6, 0x11, 0xF5, 0xD0, 0x11, 
   0xF3, 0xCB, 0x10, 0xF0, 0xC5, 0x10, 0xED, 0xC0, 0x0F, 0xEA, 0xBB, 0x0F, 0xE7, 0xB6, 0x0E, 0xE3, 
   0xB1, 0x0E, 0xE0, 0xAC, 0x0D, 0xDC, 0xA8, 0x0D, 0xD7, 0xA3, 0x0C, 0xD3, 0x9F, 0x0B, 0xCE, 0x9C, 
   0x0B, 0xC9, 0x98, 0x0A, 0xC4, 0x95, 0x09, 0xBF, 0x92, 0x08, 0xBA, 0x8F, 0x07, 0xB4, 0x8C, 0x07, 
   0xAF, 0x8A, 0x06, 0xA9, 0x88, 0x05, 0xA3, 0x87, 0x04, 0x9D, 0x85, 0x03, 0x97, 0x84, 0x02, 0x91, 
   0x83, 0x01, 0x8B, 0x83, 0x00, 0x85, 0x82, 0x00, 0x7F, 0x82, 0x00, 0x78, 0x83, 0xFF, 0x72, 0x83, 
   0xFF, 0x6C, 0x85, 0xFE, 0x66, 0x86, 0xFD, 0x60, 0x88, 0xFD, 0x5A, 0x89, 0xFC, 0x54, 0x8C, 0xFC, 
   0x4E, 0x8E, 0xFB, 0x48, 0x91, 0xFB, 0x43, 0x94, 0xFA, 0x3E, 0x97, 0xFA, 0x38, 0x9B, 0xF9, 0x33, 
   0x9F, 0xF9, 0x2E, 0xA3, 0xF8, 0x2A, 0xA7, 0xF8, 0x25, 0xAC, 0xF7, 0x21, 0xB0, 0xF7, 0x1D, 0xB5, 
   0xF7, 0x19, 0xBA, 0xF6, 0x15, 0xC0, 0xF6, 0x12, 0xC5, 0xF6, 0x0F, 0xCA, 0xF5, 0x0C, 0xD0, 0xF5, 
   0x0A, 0xD6, 0xF5, 0x07, 0xDC, 0xF5, 0x06, 0xE2, 0xF4, 0x04, 0xE8, 0xF4, 0x03, 0xEE, 0xF4, 0x01, 
   0xF4, 0xF4, 0x01, 0xFA, 0xF4, 0x00, 0x00, 0xF4, 0x00, 0x06, 0xF4, 0x00, 0x0C, 0xF4, 0x01, 0x12, 
   0xF4, 0x01, 0x18, 0xF4, 0x03, 0x1E, 0xF4, 0x04, 0x24, 0xF5, 0x06, 0x2A, 0xF5, 0x07, 0x30, 0xF5, 
   0x0A, 0x36, 0xF5, 0x0C, 0x3B, 0xF6, 0x0F, 0x40, 0xF6, 0x12, 0x46, 0xF6, 0x15, 0x4B, 0xF7, 0x19, 
   0x50, 0xF7, 0x1D, 0x54, 0xF7, 0x21, 0x59, 0xF8, 0x25, 0x5D, 0xF8, 0x2A, 0x61, 0xF9, 0x2E, 0x65, 
   0xF9, 0x33, 0x69, 0xFA, 0x38, 0x6C, 0xFA, 0x3E, 0x6F, 0xFB, 0x43, 0x72, 0xFB, 0x48, 0x74, 0xFC, 
   0x4E, 0x77, 0xFC, 0x54, 0x78, 0xFD, 0x5A, 0x7A, 0xFD, 0x60, 0x7B, 0xFE, 0x66, 0x7D, 0xFF, 0x6C, 
   0x7D, 0xFF, 0x72, 0x7E, 0x00, 0x78, 0x7E, 0x00, 0x7F, 0x7E, 0x00, 0x85, 0x7D, 0x01, 0x8B, 0x7D, 
   0x01, 0x91, 0x7B, 0x02, 0x97, 0x7A, 0x03, 0x9D, 0x78, 0x03, 0xA3, 0x77, 0x04, 0xA9, 0x74, 0x04, 
   0xAF, 0x72, 0x05, 0xB5, 0x6F, 0x05, 0xBA, 0x6C, 0x06, 0xBF, 0x69, 0x06, 0xC5, 0x65, 0x07, 0xCA, 
   0x61, 0x07, 0xCF, 0x5D, 0x08, 0xD3, 0x59, 0x08, 0xD8, 0x54, 0x09, 0xDC, 0x50, 0x09, 0xE0, 0x4B, 
   0x09, 0xE4, 0x46, 0x0A, 0xE8, 0x40, 0x0A, 0xEB, 0x3B, 0x0A, 0xEE, 0x36, 0x0B, 0xF1, 0x30, 0x0B, 
   0xF3, 0x2A, 0x0B, 0xF6, 0x24, 0x0B, 0xF7, 0x1E, 0x0C, 0xF9, 0x18, 0x0C, 0xFA, 0x12, 0x0C, 0xFC, 
   0x0C, 0x0C, 0xFC, 0x06, 0x0C, 0xFD, 0x00, 0x0C, 0xFD, 0xFA, 0x0C, 0xFD, 0xF4, 0x0C, 0xFC, 0xEE, 
   0x0C, 0xFC, 0xE8, 0x0C, 0xFA, 0xE2, 0x0C, 0xF9, 0xDC, 0x0B, 0xF7, 0xD6, 0x0B, 0xF6, 0xD0, 0x0B, 
   0xF3, 0xCA, 0x0B, 0xF1, 0xC5, 0x0A, 0xEE, 0xC0, 0x0A, 0xEB, 0xBA, 0x0A, 0xE8, 0xB5, 0x09, 0xE4, 
   0xB0, 0x09, 0xE0, 0xAC, 0x09, 0xDC, 0xA7, 0x08, 0xD8, 0xA3, 0x08, 0xD3, 0x9F, 0x07, 0xCF, 0x9B, 
   0x07, 0xCA, 0x97, 0x06, 0xC5, 0x94, 0x06, 0xBF, 0x91, 0x05, 0xBA, 0x8E, 0x05, 0xB5, 0x8C, 0x04, 
   0xAF, 0x89, 0x04, 0xA9, 0x88, 0x03, 0xA3, 0x86, 0x03, 0x9D, 0x85, 0x02, 0x97, 0x83, 0x01, 0x91, 
   0x83, 0x01, 0x8B, 0x82, 0x00, 0x85, 0x82, 0x00, 0x7F, 0x82, 0x00, 0x78, 0x82, 0x00, 0x72, 0x83, 
   0x00, 0x6C, 0x84, 0xFF, 0x66, 0x85, 0xFF, 0x60, 0x87, 0xFF, 0x5A, 0x89, 0xFE, 0x54, 0x8B, 0xFE, 
   0x4E, 0x8E, 0xFE, 0x48, 0x91, 0xFE, 0x43, 0x94, 0xFD, 0x3D, 0x97, 0xFD, 0x38, 0x9B, 0xFD, 0x33, 
   0x9E, 0xFD, 0x2E, 0xA3, 0xFC, 0x29, 0xA7, 0xFC, 0x25, 0xAB, 0xFC, 0x21, 0xB0, 0xFC, 0x1C, 0xB5, 
   0xFB, 0x19, 0xBA, 0xFB, 0x15, 0xBF, 0xFB, 0x12, 0xC5, 0xFB, 0x0F, 0xCA, 0xFB, 0x0C, 0xD0, 0xFB, 
   0x09, 0xD6, 0xFB, 0x07, 0xDC, 0xFB, 0x05, 0xE2, 0xFA, 0x03, 0xE8, 0xFA, 0x02, 0xEE, 0xFA, 0x01, 
   0xF4, 0xFA, 0x00, 0xFA, 0xFA, 0x00, 0x00, 0xFA, 0x00, 0x06, 0xFA, 0x00, 0x0C, 0xFA, 0x00, 0x12, 
   0xFA, 0x01, 0x18, 0xFA, 0x02, 0x1E, 0xFA, 0x03, 0x24, 0xFB, 0x05, 0x2A, 0xFB, 0x07, 0x30, 0xFB, 
   0x09, 0x36, 0xFB, 0x0C, 0x3B, 0xFB, 0x0F, 0x41, 0xFB, 0x12, 0x46, 0xFB, 0x15, 0x4B, 0xFB, 0x19, 
   0x50, 0xFC, 0x1C, 0x55, 0xFC, 0x21, 0x59, 0xFC, 0x25, 0x5D, 0xFC, 0x29, 0x62, 0xFD, 0x2E, 0x65, 
   0xFD, 0x33, 0x69, 0xFD, 0x38, 0x6C, 0xFD, 0x3D, 0x6F, 0xFE, 0x43, 0x72, 0xFE, 0x48, 0x75, 0xFE, 
   0x4E, 0x77, 0xFE, 0x54, 0x79, 0xFF, 0x5A, 0x7B, 0xFF, 0x60, 0x7C, 0xFF, 0x66, 0x7D, 0x00, 0x6C, 
   0x7E, 0x00, 0x72, 0x7E, 0x00, 0x78, 0x7E, 0x00, 0x7F, 0x7E, 0x00, 0x85, 0x7E, 0x00, 0x8B, 0x7D, 
   0x00, 0x91, 0x7C, 0x01, 0x97, 0x7B, 0x01, 0x9D, 0x79, 0x01, 0xA3, 0x77, 0x02, 0xA9, 0x75, 0x02, 
   0xAF, 0x72, 0x02, 0xB5, 0x6F, 0x02, 0xBA, 0x6C, 0x03, 0xC0, 0x69, 0x03, 0xC5, 0x65, 0x03, 0xCA, 
   0x62, 0x03, 0xCF, 0x5D, 0x04, 0xD4, 0x59, 0x04, 0xD8, 0x55, 0x04, 0xDC, 0x50, 0x04, 0xE1, 0x4B, 
   0x05, 0xE4, 0x46, 0x05, 0xE8, 0x41, 0x05, 0xEB, 0x3B, 0x05, 0xEE, 0x36, 0x05, 0xF1, 0x30, 0x05, 
   0xF4, 0x2A, 0x05, 0xF6, 0x24, 0x05, 0xF8, 0x1E, 0x06, 0xFA, 0x18, 0x06, 0xFB, 0x12, 0x06, 0xFC, 
   0x0C, 0x06, 0xFD, 0x06, 0x06, 0xFD, 0x00, 0x06, 0xFD, 0xFA, 0x06, 0xFD, 0xF4, 0x06, 0xFD, 0xEE, 
   0x06, 0xFC, 0xE8, 0x06, 0xFB, 0xE2, 0x06, 0xFA, 0xDC, 0x05, 0xF8, 0xD6, 0x05, 0xF6, 0xD0, 0x05, 
   0xF4, 0xCA, 0x05, 0xF1, 0xC5, 0x05, 0xEE, 0xBF, 0x05, 0xEB, 0xBA, 0x05, 0xE8, 0xB5, 0x05, 0xE4, 
   0xB0, 0x04, 0xE1, 0xAB, 0x04, 0xDC, 0xA7, 0x04, 0xD8, 0xA3, 0x04, 0xD4, 0x9E, 0x03, 0xCF, 0x9B, 
   0x03, 0xCA, 0x97, 0x03, 0xC5, 0x94, 0x03, 0xC0, 0x91, 0x02, 0xBA, 0x8E, 0x02, 0xB5, 0x8B, 0x02, 
   0xAF, 0x89, 0x02, 0xA9, 0x87, 0x01, 0xA3, 0x85, 0x01, 0x9D, 0x84, 0x01, 0x97, 0x83, 0x00, 0x91, 
   0x82, 0x00, 0x8B, 0x82, 0x00, 0x85, 0x81, 0x00, 0x7F, 0x82, 0x00, 0x78, 0x82, 0x00, 0x72, 0x83, 
   0x00, 0x6C, 0x84, 0x00, 0x66, 0x85, 0x00, 0x60, 0x87, 0x00, 0x5A, 0x89, 0x00, 0x54, 0x8B, 0x00, 
   0x4E, 0x8E, 0x00, 0x48, 0x90, 0x00, 0x43, 0x94, 0x00, 0x3D, 0x97, 0x00, 0x38, 0x9A, 0x00, 0x33, 
   0x9E, 0x00, 0x2E, 0xA2, 0x00, 0x29, 0xA7, 0x00, 0x25, 0xAB, 0x00, 0x20, 0xB0, 0x00, 0x1C, 0xB5, 
   0x00, 0x18, 0xBA, 0x00, 0x15, 0xBF, 0x00, 0x12, 0xC5, 0x00, 0x0E, 0xCA, 0x00, 0x0C, 0xD0, 0x00, 
   0x09, 0xD6, 0x00, 0x07, 0xDC, 0x00, 0x05, 0xE2, 0x00, 0x03, 0xE8, 0x00, 0x02, 0xEE, 0x00, 0x01, 
   0xF4, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x12, 
   0x00, 0x01, 0x18, 0x00, 0x02, 0x1E, 0x00, 0x03, 0x24, 0x00, 0x05, 0x2A, 0x00, 0x07, 0x30, 0x00, 
   0x09, 0x36, 0x00, 0x0C, 0x3B, 0x00, 0x0E, 0x41, 0x00, 0x12, 0x46, 0x00, 0x15, 0x4B, 0x00, 0x18, 
   0x50, 0x00, 0x1C, 0x55, 0x00, 0x20, 0x59, 0x00, 0x25, 0x5E, 0x00, 0x29, 0x62, 0x00, 0x2E, 0x66, 
   0x00, 0x33, 0x69, 0x00, 0x38, 0x6C, 0x00, 0x3D, 0x70, 0x00, 0x43, 0x72, 0x00, 0x48, 0x75, 0x00, 
   0x4E, 0x77, 0x00, 0x54, 0x79, 0x00, 0x5A, 0x7B, 0x00, 0x60, 0x7C, 0x00, 0x66, 0x7D, 0x00, 0x6C, 
   0x7E, 0x00, 0x72, 0x7E, 0x00, 0x78, 0x7F, 0x00, 0x7F, 0x7E, 0x00, 0x85, 0x7E, 0x00, 0x8B, 0x7D, 
   0x00, 0x91, 0x7C, 0x00, 0x97, 0x7B, 0x00, 0x9D, 0x79, 0x00, 0xA3, 0x77, 0x00, 0xA9, 0x75, 0x00, 
   0xAF, 0x72, 0x00, 0xB5, 0x70, 0x00, 0xBA, 0x6C, 0x00, 0xC0, 0x69, 0x00, 0xC5, 0x66, 0x00, 0xCA, 
   0x62, 0x00, 0xCF, 0x5E, 0x00, 0xD4, 0x59, 0x00, 0xD8, 0x55, 0x00, 0xDD, 0x50, 0x00, 0xE1, 0x4B, 
   0x00, 0xE5, 0x46, 0x00, 0xE8, 0x41, 0x00, 0xEB, 0x3B, 0x00, 0xEF, 0x36, 0x00, 0xF1, 0x30, 0x00, 
   0xF4, 0x2A, 0x00, 0xF6, 0x24, 0x00, 0xF8, 0x1E, 0x00, 0xFA, 0x18, 0x00, 0xFB, 0x12, 0x00, 0xFC, 
   0x0C, 0x00, 0xFD, 0x06, 0x00, 0xFD, 0x00, 0x00, 0xFE, 0xFA, 0x00, 0xFD, 0xF4, 0x00, 0xFD, 0xEE, 
   0x00, 0xFC, 0xE8, 0x00, 0xFB, 0xE2, 0x00, 0xFA, 0xDC, 0x00, 0xF8, 0xD6, 0x00, 0xF6, 0xD0, 0x00, 
   0xF4, 0xCA, 0x00, 0xF1, 0xC5, 0x00, 0xEF, 0xBF, 0x00, 0xEB, 0xBA, 0x00, 0xE8, 0xB5, 0x00, 0xE5, 
   0xB0, 0x00, 0xE1, 0xAB, 0x00, 0xDD, 0xA7, 0x00, 0xD8, 0xA2, 0x00, 0xD4, 0x9E, 0x00, 0xCF, 0x9A, 
   0x00, 0xCA, 0x97, 0x00, 0xC5, 0x94, 0x00, 0xC0, 0x90, 0x00, 0xBA, 0x8E, 0x00, 0xB5, 0x8B, 0x00, 
   0xAF, 0x89, 0x00, 0xA9, 0x87, 0x00, 0xA3, 0x85, 0x00, 0x9D, 0x84, 0x00, 0x97, 0x83, 0x00, 0x91, 
   0x82, 0x00, 0x8B, 0x82, 0x00, 0x85, 0x82, 0x00, 0x7F, 0x82, 0x00, 0x78, 0x82, 0x00, 0x72, 0x83, 
   0x00, 0x6C, 0x84, 0x01, 0x66, 0x85, 0x01, 0x60, 0x87, 0x01, 0x5A, 0x89, 0x02, 0x54, 0x8B, 0x02, 
   0x4E, 0x8E, 0x02, 0x48, 0x91, 0x02, 0x43, 0x94, 0x03, 0x3D, 0x97, 0x03, 0x38, 0x9B, 0x03, 0x33, 
   0x9E, 0x03, 0x2E, 0xA3, 0x04, 0x29, 0xA7, 0x04, 0x25, 0xAB, 0x04, 0x21, 0xB0, 0x04, 0x1C, 0xB5, 
   0x05, 0x19, 0xBA, 0x05, 0x15, 0xBF, 0x05, 0x12, 0xC5, 0x05, 0x0F, 0xCA, 0x05, 0x0C, 0xD0, 0x05, 
   0x09, 0xD6, 0x05, 0x07, 0xDC, 0x05, 0x05, 0xE2, 0x06, 0x03, 0xE8, 0x06, 0x02, 0xEE, 0x06, 0x01, 
   0xF4, 0x06, 0x00, 0xFA, 0x06, 0x00, 0x00, 0x06, 0x00, 0x06, 0x06, 0x00, 0x0C, 0x06, 0x00, 0x12, 
   0x06, 0x01, 0x18, 0x06, 0x02, 0x1E, 0x06, 0x03, 0x24, 0x05, 0x05, 0x2A, 0x05, 0x07, 0x30, 0x05, 
   0x09, 0x36, 0x05, 0x0C, 0x3B, 0x05, 0x0F, 0x41, 0x05, 0x12, 0x46, 0x05, 0x15, 0x4B, 0x05, 0x19, 
   0x50, 0x04, 0x1C, 0x55, 0x04, 0x21, 0x59, 0x04, 0x25, 0x5D, 0x04, 0x29, 0x62, 0x03, 0x2E, 0x65, 
   0x03, 0x33, 0x69, 0x03, 0x38, 0x6C, 0x03, 0x3D, 0x6F, 0x02, 0x43, 0x72, 0x02, 0x48, 0x75, 0x02, 
   0x4E, 0x77, 0x02, 0x54, 0x79, 0x01, 0x5A, 0x7B, 0x01, 0x60, 0x7C, 0x01, 0x66, 0x7D, 0x00, 0x6C, 
   0x7E, 0x00, 0x72, 0x7E, 0x00, 0x78, 0x7E, 0x00, 0x7F, 0x7E, 0x00, 0x85, 0x7E, 0x00, 0x8B, 0x7D, 
   0x00, 0x91, 0x7C, 0xFF, 0x97, 0x7B, 0xFF, 0x9D, 0x79, 0xFF, 0xA3, 0x77, 0xFE, 0xA9, 0x75, 0xFE, 
   0xAF, 0x72, 0xFE, 0xB5, 0x6F, 0xFE, 0xBA, 0x6C, 0xFD, 0xC0, 0x69, 0xFD, 0xC5, 0x65, 0xFD, 0xCA, 
   0x62, 0xFD, 0xCF, 0x5D, 0xFC, 0xD4, 0x59, 0xFC, 0xD8, 0x55, 0xFC, 0xDC, 0x50, 0xFC, 0xE1, 0x4B, 
   0xFB, 0xE4, 0x46, 0xFB, 0xE8, 0x41, 0xFB, 0xEB, 0x3B, 0xFB, 0xEE, 0x36, 0xFB, 0xF1, 0x30, 0xFB, 
   0xF4, 0x2A, 0xFB, 0xF6, 0x24, 0xFB, 0xF8, 0x1E, 0xFA, 0xFA, 0x18, 0xFA, 0xFB, 0x12, 0xFA, 0xFC, 
   0x0C, 0xFA, 0xFD, 0x06, 0xFA, 0xFD, 0x00, 0xFA, 0xFD, 0xFA, 0xFA, 0xFD, 0xF4, 0xFA, 0xFD, 0xEE, 
   0xFA, 0xFC, 0xE8, 0xFA, 0xFB, 0xE2, 0xFA, 0xFA, 0xDC, 0xFB, 0xF8, 0xD6, 0xFB, 0xF6, 0xD0, 0xFB, 
   0xF4, 0xCA, 0xFB, 0xF1, 0xC5, 0xFB, 0xEE, 0xBF, 0xFB, 0xEB, 0xBA, 0xFB, 0xE8, 0xB5, 0xFB, 0xE4, 
   0xB0, 0xFC, 0xE1, 0xAB, 0xFC, 0xDC, 0xA7, 0xFC, 0xD8, 0xA3, 0xFC, 0xD4, 0x9E, 0xFD, 0xCF, 0x9B, 
   0xFD, 0xCA, 0x97, 0xFD, 0xC5, 0x94, 0xFD, 0xC0, 0x91, 0xFE, 0xBA, 0x8E, 0xFE, 0xB5, 0x8B, 0xFE, 
   0xAF, 0x89, 0xFE, 0xA9, 0x87, 0xFF, 0xA3, 0x85, 0xFF, 0x9D, 0x84, 0xFF, 0x97, 0x83, 0x00, 0x91, 
   0x82, 0x00, 0x8B, 0x82, 0x00, 0x85, 0x82, 0x00, 0x7F, 0x82, 0x00, 0x78, 0x83, 0x01, 0x72, 0x83, 
   0x01, 0x6C, 0x85, 0x02, 0x66, 0x86, 0x03, 0x60, 0x88, 0x03, 0x5A, 0x89, 0x04, 0x54, 0x8C, 0x04, 
   0x4E, 0x8E, 0x05, 0x48, 0x91, 0x05, 0x43, 0x94, 0x06, 0x3E, 0x97, 0x06, 0x38, 0x9B, 0x07, 0x33, 
   0x9F, 0x07, 0x2E, 0xA3, 0x08, 0x2A, 0xA7, 0x08, 0x25, 0xAC, 0x09, 0x21, 0xB0, 0x09, 0x1D, 0xB5, 
   0x09, 0x19, 0xBA, 0x0A, 0x15, 0xC0, 0x0A, 0x12, 0xC5, 0x0A, 0x0F, 0xCA, 0x0B, 0x0C, 0xD0, 0x0B, 
   0x0A, 0xD6, 0x0B, 0x07, 0xDC, 0x0B, 0x06, 0xE2, 0x0C, 0x04, 0xE8, 0x0C, 0x03, 0xEE, 0x0C, 0x01, 
   0xF4, 0x0C, 0x01, 0xFA, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x06, 0x0C, 0x00, 0x0C, 0x0C, 0x01, 0x12, 
   0x0C, 0x01, 0x18, 0x0C, 0x03, 0x1E, 0x0C, 0x04, 0x24, 0x0B, 0x06, 0x2A, 0x0B, 0x07, 0x30, 0x0B, 
   0x0A, 0x36, 0x0B, 0x0C, 0x3B, 0x0A, 0x0F, 0x40, 0x0A, 0x12, 0x46, 0x0A, 0x15, 0x4B, 0x09, 0x19, 
   0x50, 0x09, 0x1D, 0x54, 0x09, 0x21, 0x59, 0x08, 0x25, 0x5D, 0x08, 0x2A, 0x61, 0x07, 0x2E, 0x65, 
   0x07, 0x33, 0x69, 0x06, 0x38, 0x6C, 0x06, 0x3E, 0x6F, 0x05, 0x43, 0x72, 0x05, 0x48, 0x74, 0x04, 
   0x4E, 0x77, 0x04, 0x54, 0x78, 0x03, 0x5A, 0x7A, 0x03, 0x60, 0x7B, 0x02, 0x66, 0x7D, 0x01, 0x6C, 
   0x7D, 0x01, 0x72, 0x7E, 0x00, 0x78, 0x7E, 0x00, 0x7F, 0x7E, 0x00, 0x85, 0x7D, 0xFF, 0x8B, 0x7D, 
   0xFF, 0x91, 0x7B, 0xFE, 0x97, 0x7A, 0xFD, 0x9D, 0x78, 0xFD, 0xA3, 0x77, 0xFC, 0xA9, 0x74, 0xFC, 
   0xAF, 0x72, 0xFB, 0xB5, 0x6F, 0xFB, 0xBA, 0x6C, 0xFA, 0xBF, 0x69, 0xFA, 0xC5, 0x65, 0xF9, 0xCA, 
   0x61, 0xF9, 0xCF, 0x5D, 0xF8, 0xD3, 0x59, 0xF8, 0xD8, 0x54, 0xF7, 0xDC, 0x50, 0xF7, 0xE0, 0x4B, 
   0xF7, 0xE4, 0x46, 0xF6, 0xE8, 0x40, 0xF6, 0xEB, 0x3B, 0xF6, 0xEE, 0x36, 0xF5, 0xF1, 0x30, 0xF5, 
   0xF3, 0x2A, 0xF5, 0xF6, 0x24, 0xF5, 0xF7, 0x1E, 0xF4, 0xF9, 0x18, 0xF4, 0xFA, 0x12, 0xF4, 0xFC, 
   0x0C, 0xF4, 0xFC, 0x06, 0xF4, 0xFD, 0x00, 0xF4, 0xFD, 0xFA, 0xF4, 0xFD, 0xF4, 0xF4, 0xFC, 0xEE, 
   0xF4, 0xFC, 0xE8, 0xF4, 0xFA, 0xE2, 0xF4, 0xF9, 0xDC, 0xF5, 0xF7, 0xD6, 0xF5, 0xF6, 0xD0, 0xF5, 
   0xF3, 0xCA, 0xF5, 0xF1, 0xC5, 0xF6, 0xEE, 0xC0, 0xF6, 0xEB, 0xBA, 0xF6, 0xE8, 0xB5, 0xF7, 0xE4, 
   0xB0, 0xF7, 0xE0, 0xAC, 0xF7, 0xDC, 0xA7, 0xF8, 0xD8, 0xA3, 0xF8, 0xD3, 0x9F, 0xF9, 0xCF, 0x9B, 
   0xF9, 0xCA, 0x97, 0xFA, 0xC5, 0x94, 0xFA, 0xBF, 0x91, 0xFB, 0xBA, 0x8E, 0xFB, 0xB5, 0x8C, 0xFC, 
   0xAF, 0x89, 0xFC, 0xA9, 0x88, 0xFD, 0xA3, 0x86, 0xFD, 0x9D, 0x85, 0xFE, 0x97, 0x83, 0xFF, 0x91, 
   0x83, 0xFF, 0x8B, 0x82, 0x00, 0x85, 0x83, 0x00, 0x7F, 0x83, 0x00, 0x78, 0x83, 0x01, 0x72, 0x84, 
   0x02, 0x6C, 0x85, 0x03, 0x66, 0x87, 0x04, 0x60, 0x88, 0x05, 0x5A, 0x8A, 0x06, 0x54, 0x8C, 0x07, 
   0x4E, 0x8F, 0x07, 0x49, 0x92, 0x08, 0x43, 0x95, 0x09, 0x3E, 0x98, 0x0A, 0x39, 0x9C, 0x0B, 0x34, 
   0x9F, 0x0B, 0x2F, 0xA3, 0x0C, 0x2A, 0xA8, 0x0D, 0x26, 0xAC, 0x0D, 0x21, 0xB1, 0x0E, 0x1D, 0xB6, 
   0x0E, 0x1A, 0xBB, 0x0F, 0x16, 0xC0, 0x0F, 0x13, 0xC5, 0x10, 0x10, 0xCB, 0x10, 0x0D, 0xD0, 0x11, 
   0x0A, 0xD6, 0x11, 0x08, 0xDC, 0x11, 0x06, 0xE2, 0x12, 0x05, 0xE8, 0x12, 0x03, 0xEE, 0x12, 0x02, 
   0xF4, 0x12, 0x01, 0xFA, 0x12, 0x01, 0x00, 0x12, 0x01, 0x06, 0x12, 0x01, 0x0C, 0x12, 0x01, 0x12, 
   0x12, 0x02, 0x18, 0x12, 0x03, 0x1E, 0x12, 0x05, 0x24, 0x11, 0x06, 0x2A, 0x11, 0x08, 0x30, 0x11, 
   0x0A, 0x35, 0x10, 0x0D, 0x3B, 0x10, 0x10, 0x40, 0x0F, 0x13, 0x45, 0x0F, 0x16, 0x4A, 0x0E, 0x1A, 
   0x4F, 0x0E, 0x1D, 0x54, 0x0D, 0x21, 0x58, 0x0D, 0x26, 0x5D, 0x0C, 0x2A, 0x61, 0x0B, 0x2F, 0x64, 
   0x0B, 0x34, 0x68, 0x0A, 0x39, 0x6B, 0x09, 0x3E, 0x6E, 0x08, 0x43, 0x71, 0x07, 0x49, 0x74, 0x07, 
   0x4E, 0x76, 0x06, 0x54, 0x78, 0x05, 0x5A, 0x79, 0x04, 0x60, 0x7B, 0x03, 0x66, 0x7C, 0x02, 0x6C, 
   0x7D, 0x01, 0x72, 0x7D, 0x00, 0x78, 0x7D, 0x00, 0x7F, 0x7D, 0x00, 0x85, 0x7D, 0xFF, 0x8B, 0x7C, 
   0xFE, 0x91, 0x7B, 0xFD, 0x97, 0x79, 0xFC, 0x9D, 0x78, 0xFB, 0xA3, 0x76, 0xFA, 0xA9, 0x74, 0xF9, 
   0xAF, 0x71, 0xF9, 0xB4, 0x6E, 0xF8, 0xBA, 0x6B, 0xF7, 0xBF, 0x68, 0xF6, 0xC4, 0x64, 0xF5, 0xC9, 
   0x61, 0xF5, 0xCE, 0x5D, 0xF4, 0xD3, 0x58, 0xF3, 0xD7, 0x54, 0xF3, 0xDC, 0x4F, 0xF2, 0xE0, 0x4A, 
   0xF2, 0xE3, 0x45, 0xF1, 0xE7, 0x40, 0xF1, 0xEA, 0x3B, 0xF0, 0xED, 0x35, 0xF0, 0xF0, 0x30, 0xEF, 
   0xF3, 0x2A, 0xEF, 0xF5, 0x24, 0xEF, 0xF7, 0x1E, 0xEE, 0xF8, 0x18, 0xEE, 0xFA, 0x12, 0xEE, 0xFB, 
   0x0C, 0xEE, 0xFC, 0x06, 0xEE, 0xFC, 0x00, 0xEE, 0xFC, 0xFA, 0xEE, 0xFC, 0xF4, 0xEE, 0xFC, 0xEE, 
   0xEE, 0xFB, 0xE8, 0xEE, 0xFA, 0xE2, 0xEE, 0xF8, 0xDC, 0xEF, 0xF7, 0xD6, 0xEF, 0xF5, 0xD0, 0xEF, 
   0xF3, 0xCB, 0xF0, 0xF0, 0xC5, 0xF0, 0xED, 0xC0, 0xF1, 0xEA, 0xBB, 0xF1, 0xE7, 0xB6, 0xF2, 0xE3, 
   0xB1, 0xF2, 0xE0, 0xAC, 0xF3, 0xDC, 0xA8, 0xF3, 0xD7, 0xA3, 0xF4, 0xD3, 0x9F, 0xF5, 0xCE, 0x9C, 
   0xF5, 0xC9, 0x98, 0xF6, 0xC4, 0x95, 0xF7, 0xBF, 0x92, 0xF8, 0xBA, 0x8F, 0xF9, 0xB4, 0x8C, 0xF9, 
   0xAF, 0x8A, 0xFA, 0xA9, 0x88, 0xFB, 0xA3, 0x87, 0xFC, 0x9D, 0x85, 0xFD, 0x97, 0x84, 0xFE, 0x91, 
   0x83, 0xFF, 0x8B, 0x83, 0x00, 0x85, 0x84, 0x00, 0x7F, 0x84, 0x01, 0x78, 0x85, 0x02, 0x72, 0x85, 
   0x03, 0x6C, 0x86, 0x04, 0x66, 0x88, 0x06, 0x60, 0x89, 0x07, 0x5A, 0x8B, 0x08, 0x55, 0x8D, 0x09, 
   0x4F, 0x90, 0x0A, 0x49, 0x93, 0x0B, 0x44, 0x96, 0x0C, 0x3E, 0x99, 0x0D, 0x39, 0x9C, 0x0E, 0x34, 
   0xA0, 0x0F, 0x2F, 0xA4, 0x10, 0x2B, 0xA8, 0x11, 0x26, 0xAD, 0x12, 0x22, 0xB1, 0x13, 0x1E, 0xB6, 
   0x13, 0x1A, 0xBB, 0x14, 0x17, 0xC0, 0x15, 0x14, 0xC6, 0x15, 0x11, 0xCB, 0x16, 0x0E, 0xD1, 0x16, 
   0x0B, 0xD7, 0x17, 0x09, 0xDC, 0x17, 0x07, 0xE2, 0x18, 0x06, 0xE8, 0x18, 0x04, 0xEE, 0x18, 0x03, 
   0xF4, 0x18, 0x03, 0xFA, 0x18, 0x02, 0x00, 0x18, 0x02, 0x06, 0x18, 0x02, 0x0C, 0x18, 0x03, 0x12, 
   0x18, 0x03, 0x18, 0x18, 0x04, 0x1E, 0x18, 0x06, 0x24, 0x17, 0x07, 0x29, 0x17, 0x09, 0x2F, 0x16, 
   0x0B, 0x35, 0x16, 0x0E, 0x3A, 0x15, 0x11, 0x40, 0x15, 0x14, 0x45, 0x14, 0x17, 0x4A, 0x13, 0x1A, 
   0x4F, 0x13, 0x1E, 0x53, 0x12, 0x22, 0x58, 0x11, 0x26, 0x5C, 0x10, 0x2B, 0x60, 0x0F, 0x2F, 0x64, 
   0x0E, 0x34, 0x67, 0x0D, 0x39, 0x6A, 0x0C, 0x3E, 0x6D, 0x0B, 0x44, 0x70, 0x0A, 0x49, 0x73, 0x09, 
   0x4F, 0x75, 0x08, 0x55, 0x77, 0x07, 0x5A, 0x78, 0x06, 0x60, 0x7A, 0x04, 0x66, 0x7B, 0x03, 0x6C, 
   0x7B, 0x02, 0x72, 0x7C, 0x01, 0x78, 0x7C, 0x00, 0x7F, 0x7C, 0xFF, 0x85, 0x7B, 0xFE, 0x8B, 0x7B, 
   0xFD, 0x91, 0x7A, 0xFC, 0x97, 0x78, 0xFA, 0x9D, 0x77, 0xF9, 0xA3, 0x75, 0xF8, 0xA8, 0x73, 0xF7, 
   0xAE, 0x70, 0xF6, 0xB4, 0x6D, 0xF5, 0xB9, 0x6A, 0xF4, 0xBF, 0x67, 0xF3, 0xC4, 0x64, 0xF2, 0xC9, 
   0x60, 0xF1, 0xCE, 0x5C, 0xF0, 0xD2, 0x58, 0xEF, 0xD7, 0x53, 0xEE, 0xDB, 0x4F, 0xED, 0xDF, 0x4A, 
   0xED, 0xE3, 0x45, 0xEC, 0xE6, 0x40, 0xEB, 0xE9, 0x3A, 0xEB, 0xEC, 0x35, 0xEA, 0xEF, 0x2F, 0xEA, 
   0xF2, 0x29, 0xE9, 0xF4, 0x24, 0xE9, 0xF6, 0x1E, 0xE8, 0xF7, 0x18, 0xE8, 0xF9, 0x12, 0xE8, 0xFA, 
   0x0C, 0xE8, 0xFA, 0x06, 0xE8, 0xFB, 0x00, 0xE8, 0xFB, 0xFA, 0xE8, 0xFB, 0xF4, 0xE8, 0xFA, 0xEE, 
   0xE8, 0xFA, 0xE8, 0xE8, 0xF9, 0xE2, 0xE8, 0xF7, 0xDC, 0xE9, 0xF6, 0xD7, 0xE9, 0xF4, 0xD1, 0xEA, 
   0xF2, 0xCB, 0xEA, 0xEF, 0xC6, 0xEB, 0xEC, 0xC0, 0xEB, 0xE9, 0xBB, 0xEC, 0xE6, 0xB6, 0xED, 0xE3, 
   0xB1, 0xED, 0xDF, 0xAD, 0xEE, 0xDB, 0xA8, 0xEF, 0xD7, 0xA4, 0xF0, 0xD2, 0xA0, 0xF1, 0xCE, 0x9C, 
   0xF2, 0xC9, 0x99, 0xF3, 0xC4, 0x96, 0xF4, 0xBF, 0x93, 0xF5, 0xB9, 0x90, 0xF6, 0xB4, 0x8D, 0xF7, 
   0xAE, 0x8B, 0xF8, 0xA8, 0x89, 0xF9, 0xA3, 0x88, 0xFA, 0x9D, 0x86, 0xFC, 0x97, 0x85, 0xFD, 0x91, 
   0x85, 0xFE, 0x8B, 0x84, 0xFF, 0x85, 0x85, 0x00, 0x7F, 0x85, 0x01, 0x78, 0x86, 0x03, 0x72, 0x87, 
   0x04, 0x6C, 0x88, 0x06, 0x66, 0x89, 0x07, 0x61, 0x8B, 0x08, 0x5B, 0x8D, 0x0A, 0x55, 0x8F, 0x0B, 
   0x4F, 0x91, 0x0D, 0x4A, 0x94, 0x0E, 0x44, 0x97, 0x0F, 0x3F, 0x9A, 0x11, 0x3A, 0x9E, 0x12, 0x35, 
   0xA1, 0x13, 0x30, 0xA5, 0x14, 0x2C, 0xA9, 0x15, 0x27, 0xAE, 0x16, 0x23, 0xB2, 0x17, 0x1F, 0xB7, 
   0x18, 0x1C, 0xBC, 0x19, 0x18, 0xC1, 0x1A, 0x15, 0xC6, 0x1B, 0x12, 0xCC, 0x1B, 0x0F, 0xD1, 0x1C, 
   0x0D, 0xD7, 0x1D, 0x0B, 0xDD, 0x1D, 0x09, 0xE3, 0x1D, 0x07, 0xE8, 0x1E, 0x06, 0xEE, 0x1E, 0x05, 
   0xF4, 0x1E, 0x04, 0xFA, 0x1E, 0x03, 0x00, 0x1E, 0x03, 0x06, 0x1E, 0x03, 0x0C, 0x1E, 0x04, 0x12, 
   0x1E, 0x05, 0x18, 0x1E, 0x06, 0x1D, 0x1D, 0x07, 0x23, 0x1D, 0x09, 0x29, 0x1D, 0x0B, 0x2F, 0x1C, 
   0x0D, 0x34, 0x1B, 0x0F, 0x3A, 0x1B, 0x12, 0x3F, 0x1A, 0x15, 0x44, 0x19, 0x18, 0x49, 0x18, 0x1C, 
   0x4E, 0x17, 0x1F, 0x52, 0x16, 0x23, 0x57, 0x15, 0x27, 0x5B, 0x14, 0x2C, 0x5F, 0x13, 0x30, 0x62, 
   0x12, 0x35, 0x66, 0x11, 0x3A, 0x69, 0x0F, 0x3F, 0x6C, 0x0E, 0x44, 0x6F, 0x0D, 0x4A, 0x71, 0x0B, 
   0x4F, 0x73, 0x0A, 0x55, 0x75, 0x08, 0x5B, 0x77, 0x07, 0x61, 0x78, 0x06, 0x66, 0x79, 0x04, 0x6C, 
   0x7A, 0x03, 0x72, 0x7B, 0x01, 0x78, 0x7B, 0x00, 0x7F, 0x7B, 0xFF, 0x85, 0x7A, 0xFD, 0x8B, 0x79, 
   0xFC, 0x91, 0x78, 0xFA, 0x97, 0x77, 0xF9, 0x9C, 0x75, 0xF8, 0xA2, 0x73, 0xF6, 0xA8, 0x71, 0xF5, 
   0xAE, 0x6F, 0xF3, 0xB3, 0x6C, 0xF2, 0xB9, 0x69, 0xF1, 0xBE, 0x66, 0xEF, 0xC3, 0x62, 0xEE, 0xC8, 
   0x5F, 0xED, 0xCD, 0x5B, 0xEC, 0xD1, 0x57, 0xEB, 0xD6, 0x52, 0xEA, 0xDA, 0x4E, 0xE9, 0xDE, 0x49, 
   0xE8, 0xE1, 0x44, 0xE7, 0xE5, 0x3F, 0xE6, 0xE8, 0x3A, 0xE5, 0xEB, 0x34, 0xE5, 0xEE, 0x2F, 0xE4, 
   0xF0, 0x29, 0xE3, 0xF2, 0x23, 0xE3, 0xF4, 0x1D, 0xE3, 0xF6, 0x18, 0xE2, 0xF7, 0x12, 0xE2, 0xF8, 
   0x0C, 0xE2, 0xF9, 0x06, 0xE2, 0xFA, 0x00, 0xE2, 0xFA, 0xFA, 0xE2, 0xFA, 0xF4, 0xE2, 0xF9, 0xEE, 
   0xE2, 0xF8, 0xE8, 0xE2, 0xF7, 0xE3, 0xE3, 0xF6, 0xDD, 0xE3, 0xF4, 0xD7, 0xE3, 0xF2, 0xD1, 0xE4, 
   0xF0, 0xCC, 0xE5, 0xEE, 0xC6, 0xE5, 0xEB, 0xC1, 0xE6, 0xE8, 0xBC, 0xE7, 0xE5, 0xB7, 0xE8, 0xE1, 
   0xB2, 0xE9, 0xDE, 0xAE, 0xEA, 0xDA, 0xA9, 0xEB, 0xD6, 0xA5, 0xEC, 0xD1, 0xA1, 0xED, 0xCD, 0x9E, 
   0xEE, 0xC8, 0x9A, 0xEF, 0xC3, 0x97, 0xF1, 0xBE, 0x94, 0xF2, 0xB9, 0x91, 0xF3, 0xB3, 0x8F, 0xF5, 
   0xAE, 0x8D, 0xF6, 0xA8, 0x8B, 0xF8, 0xA2, 0x89, 0xF9, 0x9C, 0x88, 0xFA, 0x97, 0x87, 0xFC, 0x91, 
   0x86, 0xFD, 0x8B, 0x85, 0xFF, 0x85, 0x87, 0x00, 0x7F, 0x87, 0x01, 0x79, 0x88, 0x03, 0x73, 0x88, 
   0x05, 0x6D, 0x89, 0x07, 0x67, 0x8B, 0x08, 0x61, 0x8C, 0x0A, 0x5B, 0x8E, 0x0C, 0x56, 0x90, 0x0E, 
   0x50, 0x93, 0x0F, 0x4B, 0x95, 0x11, 0x45, 0x98, 0x12, 0x40, 0x9B, 0x14, 0x3B, 0x9F, 0x15, 0x36, 
   0xA3, 0x17, 0x31, 0xA6, 0x18, 0x2D, 0xAB, 0x1A, 0x29, 0xAF, 0x1B, 0x24, 0xB3, 0x1C, 0x21, 0xB8, 
   0x1D, 0x1D, 0xBD, 0x1E, 0x19, 0xC2, 0x1F, 0x16, 0xC7, 0x20, 0x13, 0xCD, 0x21, 0x11, 0xD2, 0x22, 
   0x0E, 0xD8, 0x22, 0x0C, 0xDD, 0x23, 0x0A, 0xE3, 0x23, 0x09, 0xE9, 0x24, 0x07, 0xEF, 0x24, 0x06, 
   0xF5, 0x24, 0x06, 0xFB, 0x24, 0x05, 0x00, 0x24, 0x05, 0x05, 0x24, 0x05, 0x0B, 0x24, 0x06, 0x11, 
   0x24, 0x06, 0x17, 0x24, 0x07, 0x1D, 0x23, 0x09, 0x23, 0x23, 0x0A, 0x28, 0x22, 0x0C, 0x2E, 0x22, 
   0x0E, 0x33, 0x21, 0x11, 0x39, 0x20, 0x13, 0x3E, 0x1F, 0x16, 0x43, 0x1E, 0x19, 0x48, 0x1D, 0x1D, 
   0x4D, 0x1C, 0x21, 0x51, 0x1B, 0x24, 0x55, 0x1A, 0x29, 0x5A, 0x18, 0x2D, 0x5D, 0x17, 0x31, 0x61, 
   0x15, 0x36, 0x65, 0x14, 0x3B, 0x68, 0x12, 0x40, 0x6B, 0x11, 0x45, 0x6D, 0x0F, 0x4B, 0x70, 0x0E, 
   0x50, 0x72, 0x0C, 0x56, 0x74, 0x0A, 0x5B, 0x75, 0x08, 0x61, 0x77, 0x07, 0x67, 0x78, 0x05, 0x6D, 
   0x78, 0x03, 0x73, 0x79, 0x01, 0x79, 0x79, 0x00, 0x7F, 0x79, 0xFF, 0x84, 0x78, 0xFD, 0x8A, 0x78, 
   0xFB, 0x90, 0x77, 0xF9, 0x96, 0x75, 0xF8, 0x9C, 0x74, 0xF6, 0xA2, 0x72, 0xF4, 0xA7, 0x70, 0xF2, 
   0xAD, 0x6D, 0xF1, 0xB2, 0x6B, 0xEF, 0xB8, 0x68, 0xEE, 0xBD, 0x65, 0xEC, 0xC2, 0x61, 0xEB, 0xC7, 
   0x5D, 0xE9, 0xCC, 0x5A, 0xE8, 0xD0, 0x55, 0xE6, 0xD4, 0x51, 0xE5, 0xD9, 0x4D, 0xE4, 0xDC, 0x48, 
   0xE3, 0xE0, 0x43, 0xE2, 0xE4, 0x3E, 0xE1, 0xE7, 0x39, 0xE0, 0xEA, 0x33, 0xDF, 0xEC, 0x2E, 0xDE, 
   0xEF, 0x28, 0xDE, 0xF1, 0x23, 0xDD, 0xF3, 0x1D, 0xDD, 0xF4, 0x17, 0xDC, 0xF6, 0x11, 0xDC, 0xF7, 
   0x0B, 0xDC, 0xF7, 0x05, 0xDC, 0xF8, 0x00, 0xDC, 0xF8, 0xFB, 0xDC, 0xF8, 0xF5, 0xDC, 0xF7, 0xEF, 
   0xDC, 0xF7, 0xE9, 0xDC, 0xF6, 0xE3, 0xDD, 0xF4, 0xDD, 0xDD, 0xF3, 0xD8, 0xDE, 0xF1, 0xD2, 0xDE, 
   0xEF, 0xCD, 0xDF, 0xEC, 0xC7, 0xE0, 0xEA, 0xC2, 0xE1, 0xE7, 0xBD, 0xE2, 0xE4, 0xB8, 0xE3, 0xE0, 
   0xB3, 0xE4, 0xDC, 0xAF, 0xE5, 0xD9, 0xAB, 0xE6, 0xD4, 0xA6, 0xE8, 0xD0, 0xA3, 0xE9, 0xCC, 0x9F, 
   0xEB, 0xC7, 0x9B, 0xEC, 0xC2, 0x98, 0xEE, 0xBD, 0x95, 0xEF, 0xB8, 0x93, 0xF1, 0xB2, 0x90, 0xF2, 
   0xAD, 0x8E, 0xF4, 0xA7, 0x8C, 0xF6, 0xA2, 0x8B, 0xF8, 0x9C, 0x89, 0xF9, 0x96, 0x88, 0xFB, 0x90, 
   0x88, 0xFD, 0x8A, 0x87, 0xFF, 0x84, 0x89, 0x00, 0x7F, 0x89, 0x02, 0x79, 0x89, 0x04, 0x73, 0x8A, 
   0x06, 0x6D, 0x8B, 0x08, 0x67, 0x8D, 0x0A, 0x61, 0x8E, 0x0C, 0x5C, 0x90, 0x0E, 0x56, 0x92, 0x10, 
   0x51, 0x94, 0x12, 0x4B, 0x97, 0x14, 0x46, 0x9A, 0x15, 0x41, 0x9D, 0x17, 0x3C, 0xA0, 0x19, 0x37, 
   0xA4, 0x1B, 0x33, 0xA8, 0x1C, 0x2E, 0xAC, 0x1E, 0x2A, 0xB0, 0x1F, 0x26, 0xB5, 0x21, 0x22, 0xB9, 
   0x22, 0x1E, 0xBE, 0x23, 0x1B, 0xC3, 0x24, 0x18, 0xC8, 0x25, 0x15, 0xCD, 0x26, 0x12, 0xD3, 0x27, 
   0x10, 0xD8, 0x28, 0x0E, 0xDE, 0x28, 0x0C, 0xE3, 0x29, 0x0B, 0xE9, 0x29, 0x09, 0xEF, 0x2A, 0x08, 
   0xF5, 0x2A, 0x07, 0xFB, 0x2A, 0x07, 0x00, 0x2A, 0x07, 0x05, 0x2A, 0x07, 0x0B, 0x2A, 0x07, 0x11, 
   0x2A, 0x08, 0x17, 0x29, 0x09, 0x1D, 0x29, 0x0B, 0x22, 0x28, 0x0C, 0x28, 0x28, 0x0E, 0x2D, 0x27, 
   0x10, 0x33, 0x26, 0x12, 0x38, 0x25, 0x15, 0x3D, 0x24, 0x18, 0x42, 0x23, 0x1B, 0x47, 0x22, 0x1E, 
   0x4B, 0x21, 0x22, 0x50, 0x1F, 0x26, 0x54, 0x1E, 0x2A, 0x58, 0x1C, 0x2E, 0x5C, 0x1B, 0x33, 0x60, 
   0x19, 0x37, 0x63, 0x17, 0x3C, 0x66, 0x15, 0x41, 0x69, 0x14, 0x46, 0x6C, 0x12, 0x4B, 0x6E, 0x10, 
   0x51, 0x70, 0x0E, 0x56, 0x72, 0x0C, 0x5C, 0x73, 0x0A, 0x61, 0x75, 0x08, 0x67, 0x76, 0x06, 0x6D, 
   0x77, 0x04, 0x73, 0x77, 0x02, 0x79, 0x77, 0x00, 0x7F, 0x77, 0xFE, 0x84, 0x77, 0xFC, 0x8A, 0x76, 
   0xFA, 0x90, 0x75, 0xF8, 0x96, 0x73, 0xF6, 0x9C, 0x72, 0xF4, 0xA1, 0x70, 0xF2, 0xA7, 0x6E, 0xF0, 
   0xAC, 0x6C, 0xEE, 0xB2, 0x69, 0xEC, 0xB7, 0x66, 0xEB, 0xBC, 0x63, 0xE9, 0xC1, 0x60, 0xE7, 0xC6, 
   0x5C, 0xE5, 0xCA, 0x58, 0xE4, 0xCF, 0x54, 0xE2, 0xD3, 0x50, 0xE1, 0xD7, 0x4B, 0xDF, 0xDB, 0x47, 
   0xDE, 0xDF, 0x42, 0xDD, 0xE2, 0x3D, 0xDC, 0xE5, 0x38, 0xDB, 0xE8, 0x33, 0xDA, 0xEB, 0x2D, 0xD9, 
   0xED, 0x28, 0xD8, 0xEF, 0x22, 0xD8, 0xF1, 0x1D, 0xD7, 0xF2, 0x17, 0xD7, 0xF4, 0x11, 0xD6, 0xF5, 
   0x0B, 0xD6, 0xF6, 0x05, 0xD6, 0xF6, 0x00, 0xD6, 0xF6, 0xFB, 0xD6, 0xF6, 0xF5, 0xD6, 0xF6, 0xEF, 
   0xD6, 0xF5, 0xE9, 0xD7, 0xF4, 0xE3, 0xD7, 0xF2, 0xDE, 0xD8, 0xF1, 0xD8, 0xD8, 0xEF, 0xD3, 0xD9, 
   0xED, 0xCD, 0xDA, 0xEB, 0xC8, 0xDB, 0xE8, 0xC3, 0xDC, 0xE5, 0xBE, 0xDD, 0xE2, 0xB9, 0xDE, 0xDF, 
   0xB5, 0xDF, 0xDB, 0xB0, 0xE1, 0xD7, 0xAC, 0xE2, 0xD3, 0xA8, 0xE4, 0xCF, 0xA4, 0xE5, 0xCA, 0xA0, 
   0xE7, 0xC6, 0x9D, 0xE9, 0xC1, 0x9A, 0xEB, 0xBC, 0x97, 0xEC, 0xB7, 0x94, 0xEE, 0xB2, 0x92, 0xF0, 
   0xAC, 0x90, 0xF2, 0xA7, 0x8E, 0xF4, 0xA1, 0x8D, 0xF6, 0x9C, 0x8B, 0xF8, 0x96, 0x8A, 0xFA, 0x90, 
   0x89, 0xFC, 0x8A, 0x89, 0xFE, 0x84, 0x8B, 0x00, 0x7F, 0x8B, 0x02, 0x79, 0x8C, 0x04, 0x73, 0x8C, 
   0x07, 0x6D, 0x8D, 0x09, 0x68, 0x8F, 0x0B, 0x62, 0x90, 0x0E, 0x5C, 0x92, 0x10, 0x57, 0x94, 0x12, 
   0x52, 0x96, 0x14, 0x4C, 0x99, 0x16, 0x47, 0x9C, 0x18, 0x42, 0x9F, 0x1B, 0x3D, 0xA2, 0x1C, 0x39, 
   0xA6, 0x1E, 0x34, 0xAA, 0x20, 0x30, 0xAE, 0x22, 0x2C, 0xB2, 0x24, 0x28, 0xB6, 0x25, 0x24, 0xBB, 
   0x27, 0x20, 0xBF, 0x28, 0x1D, 0xC4, 0x29, 0x1A, 0xC9, 0x2A, 0x17, 0xCE, 0x2B, 0x14, 0xD4, 0x2C, 
   0x12, 0xD9, 0x2D, 0x10, 0xDE, 0x2E, 0x0E, 0xE4, 0x2F, 0x0D, 0xEA, 0x2F, 0x0B, 0xEF, 0x30, 0x0A, 
   0xF5, 0x30, 0x0A, 0xFB, 0x30, 0x09, 0x00, 0x30, 0x09, 0x05, 0x30, 0x09, 0x0B, 0x30, 0x0A, 0x11, 
   0x30, 0x0A, 0x16, 0x2F, 0x0B, 0x1C, 0x2F, 0x0D, 0x22, 0x2E, 0x0E, 0x27, 0x2D, 0x10, 0x2C, 0x2C, 
   0x12, 0x32, 0x2B, 0x14, 0x37, 0x2A, 0x17, 0x3C, 0x29, 0x1A, 0x41, 0x28, 0x1D, 0x45, 0x27, 0x20, 
   0x4A, 0x25, 0x24, 0x4E, 0x24, 0x28, 0x52, 0x22, 0x2C, 0x56, 0x20, 0x30, 0x5A, 0x1E, 0x34, 0x5E, 
   0x1C, 0x39, 0x61, 0x1B, 0x3D, 0x64, 0x18, 0x42, 0x67, 0x16, 0x47, 0x6A, 0x14, 0x4C, 0x6C, 0x12, 
   0x52, 0x6E, 0x10, 0x57, 0x70, 0x0E, 0x5C, 0x71, 0x0B, 0x62, 0x73, 0x09, 0x68, 0x74, 0x07, 0x6D, 
   0x74, 0x04, 0x73, 0x75, 0x02, 0x79, 0x75, 0x00, 0x7F, 0x75, 0xFE, 0x84, 0x74, 0xFC, 0x8A, 0x74, 
   0xF9, 0x90, 0x73, 0xF7, 0x95, 0x71, 0xF5, 0x9B, 0x70, 0xF2, 0xA1, 0x6E, 0xF0, 0xA6, 0x6C, 0xEE, 
   0xAB, 0x6A, 0xEC, 0xB1, 0x67, 0xEA, 0xB6, 0x64, 0xE8, 0xBB, 0x61, 0xE5, 0xC0, 0x5E, 0xE4, 0xC4, 
   0x5A, 0xE2, 0xC9, 0x56, 0xE0, 0xCD, 0x52, 0xDE, 0xD1, 0x4E, 0xDC, 0xD5, 0x4A, 0xDB, 0xD9, 0x45, 
   0xD9, 0xDD, 0x41, 0xD8, 0xE0, 0x3C, 0xD7, 0xE3, 0x37, 0xD6, 0xE6, 0x32, 0xD5, 0xE9, 0x2C, 0xD4, 
   0xEB, 0x27, 0xD3, 0xED, 0x22, 0xD2, 0xEF, 0x1C, 0xD1, 0xF0, 0x16, 0xD1, 0xF2, 0x11, 0xD0, 0xF3, 
   0x0B, 0xD0, 0xF3, 0x05, 0xD0, 0xF4, 0x00, 0xD0, 0xF4, 0xFB, 0xD0, 0xF4, 0xF5, 0xD0, 0xF3, 0xEF, 
   0xD0, 0xF3, 0xEA, 0xD1, 0xF2, 0xE4, 0xD1, 0xF0, 0xDE, 0xD2, 0xEF, 0xD9, 0xD3, 0xED, 0xD4, 0xD4, 
   0xEB, 0xCE, 0xD5, 0xE9, 0xC9, 0xD6, 0xE6, 0xC4, 0xD7, 0xE3, 0xBF, 0xD8, 0xE0, 0xBB, 0xD9, 0xDD, 
   0xB6, 0xDB, 0xD9, 0xB2, 0xDC, 0xD5, 0xAE, 0xDE, 0xD1, 0xAA, 0xE0, 0xCD, 0xA6, 0xE2, 0xC9, 0xA2, 
   0xE4, 0xC4, 0x9F, 0xE5, 0xC0, 0x9C, 0xE8, 0xBB, 0x99, 0xEA, 0xB6, 0x96, 0xEC, 0xB1, 0x94, 0xEE, 
   0xAB, 0x92, 0xF0, 0xA6, 0x90, 0xF2, 0xA1, 0x8F, 0xF5, 0x9B, 0x8D, 0xF7, 0x95, 0x8C, 0xF9, 0x90, 
   0x8C, 0xFC, 0x8A, 0x8B, 0xFE, 0x84, 0x8E, 0x00, 0x7F, 0x8E, 0x02, 0x79, 0x8E, 0x05, 0x73, 0x8F, 
   0x07, 0x6E, 0x90, 0x0A, 0x68, 0x91, 0x0D, 0x63, 0x93, 0x0F, 0x5D, 0x94, 0x12, 0x58, 0x96, 0x14, 
   0x53, 0x99, 0x17, 0x4D, 0x9B, 0x19, 0x48, 0x9E, 0x1B, 0x43, 0xA1, 0x1E, 0x3F, 0xA4, 0x20, 0x3A, 
   0xA8, 0x22, 0x36, 0xAB, 0x24, 0x31, 0xAF, 0x26, 0x2D, 0xB3, 0x28, 0x29, 0xB8, 0x29, 0x26, 0xBC, 
   0x2B, 0x22, 0xC1, 0x2D, 0x1F, 0xC5, 0x2E, 0x1C, 0xCA, 0x2F, 0x19, 0xCF, 0x31, 0x17, 0xD5, 0x32, 
   0x14, 0xDA, 0x33, 0x12, 0xDF, 0x33, 0x11, 0xE5, 0x34, 0x0F, 0xEA, 0x35, 0x0E, 0xF0, 0x35, 0x0D, 
   0xF5, 0x36, 0x0C, 0xFB, 0x36, 0x0C, 0x00, 0x36, 0x0C, 0x05, 0x36, 0x0C, 0x0B, 0x36, 0x0C, 0x10, 
   0x35, 0x0D, 0x16, 0x35, 0x0E, 0x1B, 0x34, 0x0F, 0x21, 0x33, 0x11, 0x26, 0x33, 0x12, 0x2B, 0x32, 
   0x14, 0x31, 0x31, 0x17, 0x36, 0x2F, 0x19, 0x3B, 0x2E, 0x1C, 0x3F, 0x2D, 0x1F, 0x44, 0x2B, 0x22, 
   0x48, 0x29, 0x26, 0x4D, 0x28, 0x29, 0x51, 0x26, 0x2D, 0x55, 0x24, 0x31, 0x58, 0x22, 0x36, 0x5C, 
   0x20, 0x3A, 0x5F, 0x1E, 0x3F, 0x62, 0x1B, 0x43, 0x65, 0x19, 0x48, 0x67, 0x17, 0x4D, 0x6A, 0x14, 
   0x53, 0x6C, 0x12, 0x58, 0x6D, 0x0F, 0x5D, 0x6F, 0x0D, 0x63, 0x70, 0x0A, 0x68, 0x71, 0x07, 0x6E, 
   0x72, 0x05, 0x73, 0x72, 0x02, 0x79, 0x72, 0x00, 0x7F, 0x72, 0xFE, 0x84, 0x72, 0xFB, 0x8A, 0x71, 
   0xF9, 0x8F, 0x70, 0xF6, 0x95, 0x6F, 0xF3, 0x9A, 0x6D, 0xF1, 0xA0, 0x6C, 0xEE, 0xA5, 0x6A, 0xEC, 
   0xAA, 0x67, 0xE9, 0xB0, 0x65, 0xE7, 0xB5, 0x62, 0xE5, 0xBA, 0x5F, 0xE2, 0xBE, 0x5C, 0xE0, 0xC3, 
   0x58, 0xDE, 0xC7, 0x55, 0xDC, 0xCC, 0x51, 0xDA, 0xD0, 0x4D, 0xD8, 0xD4, 0x48, 0xD7, 0xD7, 0x44, 
   0xD5, 0xDB, 0x3F, 0xD3, 0xDE, 0x3B, 0xD2, 0xE1, 0x36, 0xD1, 0xE4, 0x31, 0xCF, 0xE6, 0x2B, 0xCE, 
   0xE9, 0x26, 0xCD, 0xEB, 0x21, 0xCD, 0xEC, 0x1B, 0xCC, 0xEE, 0x16, 0xCB, 0xEF, 0x10, 0xCB, 0xF0, 
   0x0B, 0xCA, 0xF1, 0x05, 0xCA, 0xF1, 0x00, 0xCA, 0xF1, 0xFB, 0xCA, 0xF1, 0xF5, 0xCA, 0xF1, 0xF0, 
   0xCB, 0xF0, 0xEA, 0xCB, 0xEF, 0xE5, 0xCC, 0xEE, 0xDF, 0xCD, 0xEC, 0xDA, 0xCD, 0xEB, 0xD5, 0xCE, 
   0xE9, 0xCF, 0xCF, 0xE6, 0xCA, 0xD1, 0xE4, 0xC5, 0xD2, 0xE1, 0xC1, 0xD3, 0xDE, 0xBC, 0xD5, 0xDB, 
   0xB8, 0xD7, 0xD7, 0xB3, 0xD8, 0xD4, 0xAF, 0xDA, 0xD0, 0xAB, 0xDC, 0xCC, 0xA8, 0xDE, 0xC7, 0xA4, 
   0xE0, 0xC3, 0xA1, 0xE2, 0xBE, 0x9E, 0xE5, 0xBA, 0x9B, 0xE7, 0xB5, 0x99, 0xE9, 0xB0, 0x96, 0xEC, 
   0xAA, 0x94, 0xEE, 0xA5, 0x93, 0xF1, 0xA0, 0x91, 0xF3, 0x9A, 0x90, 0xF6, 0x95, 0x8F, 0xF9, 0x8F, 
   0x8E, 0xFB, 0x8A, 0x8E, 0xFE, 0x84, 0x90, 0x00, 0x7F, 0x91, 0x02, 0x79, 0x91, 0x05, 0x74, 0x92, 
   0x08, 0x6E, 0x93, 0x0B, 0x69, 0x94, 0x0E, 0x63, 0x95, 0x11, 0x5E, 0x97, 0x14, 0x59, 0x99, 0x16, 
   0x54, 0x9B, 0x19, 0x4F, 0x9E, 0x1C, 0x4A, 0xA0, 0x1E, 0x45, 0xA3, 0x21, 0x40, 0xA7, 0x23, 0x3C, 
   0xAA, 0x25, 0x37, 0xAE, 0x28, 0x33, 0xB1, 0x2A, 0x2F, 0xB5, 0x2C, 0x2C, 0xB9, 0x2E, 0x28, 0xBE, 
   0x30, 0x25, 0xC2, 0x31, 0x21, 0xC7, 0x33, 0x1E, 0xCC, 0x34, 0x1C, 0xD1, 0x36, 0x19, 0xD6, 0x37, 
   0x17, 0xDB, 0x38, 0x15, 0xE0, 0x39, 0x13, 0xE5, 0x3A, 0x12, 0xEB, 0x3A, 0x11, 0xF0, 0x3B, 0x10, 
   0xF6, 0x3B, 0x0F, 0xFB, 0x3B, 0x0F, 0x00, 0x3B, 0x0E, 0x05, 0x3B, 0x0F, 0x0A, 0x3B, 0x0F, 0x10, 
   0x3B, 0x10, 0x15, 0x3A, 0x11, 0x1B, 0x3A, 0x12, 0x20, 0x39, 0x13, 0x25, 0x38, 0x15, 0x2A, 0x37, 
   0x17, 0x2F, 0x36, 0x19, 0x34, 0x34, 0x1C, 0x39, 0x33, 0x1E, 0x3E, 0x31, 0x21, 0x42, 0x30, 0x25, 
   0x47, 0x2E, 0x28, 0x4B, 0x2C, 0x2C, 0x4F, 0x2A, 0x2F, 0x52, 0x28, 0x33, 0x56, 0x25, 0x37, 0x59, 
   0x23, 0x3C, 0x5D, 0x21, 0x40, 0x60, 0x1E, 0x45, 0x62, 0x1C, 0x4A, 0x65, 0x19, 0x4F, 0x67, 0x16, 
   0x54, 0x69, 0x14, 0x59, 0x6B, 0x11, 0x5E, 0x6C, 0x0E, 0x63, 0x6D, 0x0B, 0x69, 0x6E, 0x08, 0x6E, 
   0x6F, 0x05, 0x74, 0x6F, 0x02, 0x79, 0x70, 0x00, 0x7F, 0x6F, 0xFE, 0x84, 0x6F, 0xFB, 0x89, 0x6E, 
   0xF8, 0x8F, 0x6D, 0xF5, 0x94, 0x6C, 0xF2, 0x9A, 0x6B, 0xEF, 0x9F, 0x69, 0xEC, 0xA4, 0x67, 0xEA, 
   0xA9, 0x65, 0xE7, 0xAE, 0x62, 0xE4, 0xB3, 0x60, 0xE2, 0xB8, 0x5D, 0xDF, 0xBD, 0x59, 0xDD, 0xC1, 
   0x56, 0xDB, 0xC6, 0x52, 0xD8, 0xCA, 0x4F, 0xD6, 0xCE, 0x4B, 0xD4, 0xD1, 0x47, 0xD2, 0xD5, 0x42, 
   0xD0, 0xD8, 0x3E, 0xCF, 0xDC, 0x39, 0xCD, 0xDF, 0x34, 0xCC, 0xE1, 0x2F, 0xCA, 0xE4, 0x2A, 0xC9, 
   0xE6, 0x25, 0xC8, 0xE8, 0x20, 0xC7, 0xEA, 0x1B, 0xC6, 0xEB, 0x15, 0xC6, 0xEC, 0x10, 0xC5, 0xED, 
   0x0A, 0xC5, 0xEE, 0x05, 0xC5, 0xEE, 0x00, 0xC5, 0xEF, 0xFB, 0xC5, 0xEE, 0xF6, 0xC5, 0xEE, 0xF0, 
   0xC5, 0xED, 0xEB, 0xC6, 0xEC, 0xE5, 0xC6, 0xEB, 0xE0, 0xC7, 0xEA, 0xDB, 0xC8, 0xE8, 0xD6, 0xC9, 
   0xE6, 0xD1, 0xCA, 0xE4, 0xCC, 0xCC, 0xE1, 0xC7, 0xCD, 0xDF, 0xC2, 0xCF, 0xDC, 0xBE, 0xD0, 0xD8, 
   0xB9, 0xD2, 0xD5, 0xB5, 0xD4, 0xD1, 0xB1, 0xD6, 0xCE, 0xAE, 0xD8, 0xCA, 0xAA, 0xDB, 0xC6, 0xA7, 
   0xDD, 0xC1, 0xA3, 0xDF, 0xBD, 0xA0, 0xE2, 0xB8, 0x9E, 0xE4, 0xB3, 0x9B, 0xE7, 0xAE, 0x99, 0xEA, 
   0xA9, 0x97, 0xEC, 0xA4, 0x95, 0xEF, 0x9F, 0x94, 0xF2, 0x9A, 0x93, 0xF5, 0x94, 0x92, 0xF8, 0x8F, 
   0x91, 0xFB, 0x89, 0x91, 0xFE, 0x84, 0x94, 0x00, 0x7F, 0x94, 0x03, 0x79, 0x94, 0x06, 0x74, 0x95, 
   0x09, 0x6F, 0x96, 0x0C, 0x69, 0x97, 0x0F, 0x64, 0x98, 0x12, 0x5F, 0x9A, 0x15, 0x5A, 0x9C, 0x18, 
   0x55, 0x9E, 0x1B, 0x50, 0xA0, 0x1E, 0x4B, 0xA3, 0x21, 0x46, 0xA6, 0x24, 0x42, 0xA9, 0x26, 0x3E, 
   0xAC, 0x29, 0x39, 0xB0, 0x2B, 0x35, 0xB3, 0x2E, 0x31, 0xB7, 0x30, 0x2E, 0xBB, 0x32, 0x2A, 0xC0, 
   0x34, 0x27, 0xC4, 0x36, 0x24, 0xC8, 0x38, 0x21, 0xCD, 0x39, 0x1E, 0xD2, 0x3B, 0x1C, 0xD7, 0x3C, 
   0x1A, 0xDC, 0x3D, 0x18, 0xE1, 0x3E, 0x16, 0xE6, 0x3F, 0x15, 0xEB, 0x40, 0x14, 0xF1, 0x40, 0x13, 
   0xF6, 0x40, 0x12, 0xFB, 0x41, 0x12, 0x00, 0x41, 0x12, 0x05, 0x41, 0x12, 0x0A, 0x40, 0x12, 0x0F, 
   0x40, 0x13, 0x15, 0x40, 0x14, 0x1A, 0x3F, 0x15, 0x1F, 0x3E, 0x16, 0x24, 0x3D, 0x18, 0x29, 0x3C, 
   0x1A, 0x2E, 0x3B, 0x1C, 0x33, 0x39, 0x1E, 0x38, 0x38, 0x21, 0x3C, 0x36, 0x24, 0x40, 0x34, 0x27, 
   0x45, 0x32, 0x2A, 0x49, 0x30, 0x2E, 0x4D, 0x2E, 0x31, 0x50, 0x2B, 0x35, 0x54, 0x29, 0x39, 0x57, 
   0x26, 0x3E, 0x5A, 0x24, 0x42, 0x5D, 0x21, 0x46, 0x60, 0x1E, 0x4B, 0x62, 0x1B, 0x50, 0x64, 0x18, 
   0x55, 0x66, 0x15, 0x5A, 0x68, 0x12, 0x5F, 0x69, 0x0F, 0x64, 0x6A, 0x0C, 0x69, 0x6B, 0x09, 0x6F, 
   0x6C, 0x06, 0x74, 0x6C, 0x03, 0x79, 0x6C, 0x00, 0x7F, 0x6C, 0xFD, 0x84, 0x6C, 0xFA, 0x89, 0x6B, 
   0xF7, 0x8E, 0x6A, 0xF4, 0x94, 0x69, 0xF1, 0x99, 0x68, 0xEE, 0x9E, 0x66, 0xEB, 0xA3, 0x64, 0xE8, 
   0xA8, 0x62, 0xE5, 0xAD, 0x60, 0xE2, 0xB2, 0x5D, 0xDF, 0xB7, 0x5A, 0xDC, 0xBB, 0x57, 0xDA, 0xBF, 
   0x54, 0xD7, 0xC4, 0x50, 0xD5, 0xC8, 0x4D, 0xD2, 0xCC, 0x49, 0xD0, 0xCF, 0x45, 0xCE, 0xD3, 0x40, 
   0xCC, 0xD6, 0x3C, 0xCA, 0xD9, 0x38, 0xC8, 0xDC, 0x33, 0xC7, 0xDF, 0x2E, 0xC5, 0xE1, 0x29, 0xC4, 
   0xE3, 0x24, 0xC3, 0xE5, 0x1F, 0xC2, 0xE7, 0x1A, 0xC1, 0xE8, 0x15, 0xC0, 0xE9, 0x0F, 0xC0, 0xEA, 
   0x0A, 0xC0, 0xEB, 0x05, 0xBF, 0xEB, 0x00, 0xBF, 0xEB, 0xFB, 0xBF, 0xEB, 0xF6, 0xC0, 0xEB, 0xF1, 
   0xC0, 0xEA, 0xEB, 0xC0, 0xE9, 0xE6, 0xC1, 0xE8, 0xE1, 0xC2, 0xE7, 0xDC, 0xC3, 0xE5, 0xD7, 0xC4, 
   0xE3, 0xD2, 0xC5, 0xE1, 0xCD, 0xC7, 0xDF, 0xC8, 0xC8, 0xDC, 0xC4, 0xCA, 0xD9, 0xC0, 0xCC, 0xD6, 
   0xBB, 0xCE, 0xD3, 0xB7, 0xD0, 0xCF, 0xB3, 0xD2, 0xCC, 0xB0, 0xD5, 0xC8, 0xAC, 0xD7, 0xC4, 0xA9, 
   0xDA, 0xBF, 0xA6, 0xDC, 0xBB, 0xA3, 0xDF, 0xB7, 0xA0, 0xE2, 0xB2, 0x9E, 0xE5, 0xAD, 0x9C, 0xE8, 
   0xA8, 0x9A, 0xEB, 0xA3, 0x98, 0xEE, 0x9E, 0x97, 0xF1, 0x99, 0x96, 0xF4, 0x94, 0x95, 0xF7, 0x8E, 
   0x94, 0xFA, 0x89, 0x94, 0xFD, 0x84, 0x97, 0x00, 0x7F, 0x97, 0x03, 0x79, 0x97, 0x06, 0x74, 0x98, 
   0x0A, 0x6F, 0x99, 0x0D, 0x6A, 0x9A, 0x11, 0x65, 0x9B, 0x14, 0x60, 0x9D, 0x17, 0x5B, 0x9F, 0x1B, 
   0x56, 0xA1, 0x1E, 0x51, 0xA3, 0x21, 0x4D, 0xA6, 0x24, 0x48, 0xA9, 0x27, 0x44, 0xAC, 0x2A, 0x40, 
   0xAF, 0x2C, 0x3C, 0xB2, 0x2F, 0x38, 0xB6, 0x31, 0x34, 0xBA, 0x34, 0x30, 0xBE, 0x36, 0x2D, 0xC2, 
   0x38, 0x2A, 0xC6, 0x3A, 0x27, 0xCA, 0x3C, 0x24, 0xCF, 0x3E, 0x21, 0xD3, 0x3F, 0x1F, 0xD8, 0x41, 
   0x1D, 0xDD, 0x42, 0x1B, 0xE2, 0x43, 0x19, 0xE7, 0x44, 0x18, 0xEC, 0x45, 0x17, 0xF1, 0x45, 0x16, 
   0xF6, 0x46, 0x15, 0xFB, 0x46, 0x15, 0x00, 0x46, 0x15, 0x05, 0x46, 0x15, 0x0A, 0x46, 0x15, 0x0F, 
   0x45, 0x16, 0x14, 0x45, 0x17, 0x19, 0x44, 0x18, 0x1E, 0x43, 0x19, 0x23, 0x42, 0x1B, 0x28, 0x41, 
   0x1D, 0x2D, 0x3F, 0x1F, 0x31, 0x3E, 0x21, 0x36, 0x3C, 0x24, 0x3A, 0x3A, 0x27, 0x3E, 0x38, 0x2A, 
   0x42, 0x36, 0x2D, 0x46, 0x34, 0x30, 0x4A, 0x31, 0x34, 0x4E, 0x2F, 0x38, 0x51, 0x2C, 0x3C, 0x54, 
   0x2A, 0x40, 0x57, 0x27, 0x44, 0x5A, 0x24, 0x48, 0x5D, 0x21, 0x4D, 0x5F, 0x1E, 0x51, 0x61, 0x1B, 
   0x56, 0x63, 0x17, 0x5B, 0x65, 0x14, 0x60, 0x66, 0x11, 0x65, 0x67, 0x0D, 0x6A, 0x68, 0x0A, 0x6F, 
   0x69, 0x06, 0x74, 0x69, 0x03, 0x79, 0x69, 0x00, 0x7F, 0x69, 0xFD, 0x84, 0x69, 0xFA, 0x89, 0x68, 
   0xF6, 0x8E, 0x67, 0xF3, 0x93, 0x66, 0xEF, 0x98, 0x65, 0xEC, 0x9D, 0x63, 0xE9, 0xA2, 0x61, 0xE5, 
   0xA7, 0x5F, 0xE2, 0xAC, 0x5D, 0xDF, 0xB0, 0x5A, 0xDC, 0xB5, 0x57, 0xD9, 0xB9, 0x54, 0xD6, 0xBD, 
   0x51, 0xD4, 0xC1, 0x4E, 0xD1, 0xC5, 0x4A, 0xCF, 0xC9, 0x46, 0xCC, 0xCD, 0x42, 0xCA, 0xD0, 0x3E, 
   0xC8, 0xD3, 0x3A, 0xC6, 0xD6, 0x36, 0xC4, 0xD9, 0x31, 0xC2, 0xDC, 0x2D, 0xC1, 0xDE, 0x28, 0xBF, 
   0xE0, 0x23, 0xBE, 0xE2, 0x1E, 0xBD, 0xE4, 0x19, 0xBC, 0xE5, 0x14, 0xBB, 0xE6, 0x0F, 0xBB, 0xE7, 
   0x0A, 0xBA, 0xE8, 0x05, 0xBA, 0xE8, 0x00, 0xBA, 0xE8, 0xFB, 0xBA, 0xE8, 0xF6, 0xBA, 0xE8, 0xF1, 
   0xBB, 0xE7, 0xEC, 0xBB, 0xE6, 0xE7, 0xBC, 0xE5, 0xE2, 0xBD, 0xE4, 0xDD, 0xBE, 0xE2, 0xD8, 0xBF, 
   0xE0, 0xD3, 0xC1, 0xDE, 0xCF, 0xC2, 0xDC, 0xCA, 0xC4, 0xD9, 0xC6, 0xC6, 0xD6, 0xC2, 0xC8, 0xD3, 
   0xBE, 0xCA, 0xD0, 0xBA, 0xCC, 0xCD, 0xB6, 0xCF, 0xC9, 0xB2, 0xD1, 0xC5, 0xAF, 0xD4, 0xC1, 0xAC, 
   0xD6, 0xBD, 0xA9, 0xD9, 0xB9, 0xA6, 0xDC, 0xB5, 0xA3, 0xDF, 0xB0, 0xA1, 0xE2, 0xAC, 0x9F, 0xE5, 
   0xA7, 0x9D, 0xE9, 0xA2, 0x9B, 0xEC, 0x9D, 0x9A, 0xEF, 0x98, 0x99, 0xF3, 0x93, 0x98, 0xF6, 0x8E, 
   0x97, 0xFA, 0x89, 0x97, 0xFD, 0x84, 0x9A, 0x00, 0x7F, 0x9B, 0x03, 0x79, 0x9B, 0x07, 0x75, 0x9C, 
   0x0B, 0x70, 0x9C, 0x0E, 0x6B, 0x9E, 0x12, 0x66, 0x9F, 0x15, 0x61, 0xA0, 0x19, 0x5C, 0xA2, 0x1C, 
   0x57, 0xA4, 0x20, 0x53, 0xA7, 0x23, 0x4E, 0xA9, 0x26, 0x4A, 0xAC, 0x2A, 0x46, 0xAF, 0x2D, 0x42, 
   0xB2, 0x2F, 0x3E, 0xB5, 0x32, 0x3A, 0xB8, 0x35, 0x36, 0xBC, 0x38, 0x33, 0xC0, 0x3A, 0x30, 0xC4, 
   0x3C, 0x2D, 0xC8, 0x3E, 0x2A, 0xCC, 0x40, 0x27, 0xD0, 0x42, 0x25, 0xD5, 0x44, 0x22, 0xD9, 0x45, 
   0x20, 0xDE, 0x47, 0x1E, 0xE3, 0x48, 0x1D, 0xE8, 0x49, 0x1C, 0xED, 0x4A, 0x1A, 0xF2, 0x4A, 0x1A, 
   0xF7, 0x4B, 0x19, 0xFB, 0x4B, 0x19, 0x00, 0x4B, 0x18, 0x05, 0x4B, 0x19, 0x09, 0x4B, 0x19, 0x0E, 
   0x4A, 0x1A, 0x13, 0x4A, 0x1A, 0x18, 0x49, 0x1C, 0x1D, 0x48, 0x1D, 0x22, 0x47, 0x1E, 0x27, 0x45, 
   0x20, 0x2B, 0x44, 0x22, 0x30, 0x42, 0x25, 0x34, 0x40, 0x27, 0x38, 0x3E, 0x2A, 0x3C, 0x3C, 0x2D, 
   0x40, 0x3A, 0x30, 0x44, 0x38, 0x33, 0x48, 0x35, 0x36, 0x4B, 0x32, 0x3A, 0x4E, 0x2F, 0x3E, 0x51, 
   0x2D, 0x42, 0x54, 0x2A, 0x46, 0x57, 0x26, 0x4A, 0x59, 0x23, 0x4E, 0x5C, 0x20, 0x53, 0x5E, 0x1C, 
   0x57, 0x60, 0x19, 0x5C, 0x61, 0x15, 0x61, 0x62, 0x12, 0x66, 0x64, 0x0E, 0x6B, 0x64, 0x0B, 0x70, 
   0x65, 0x07, 0x75, 0x65, 0x03, 0x79, 0x66, 0x00, 0x7F, 0x65, 0xFD, 0x84, 0x65, 0xF9, 0x88, 0x64, 
   0xF5, 0x8D, 0x64, 0xF2, 0x92, 0x62, 0xEE, 0x97, 0x61, 0xEB, 0x9C, 0x60, 0xE7, 0xA1, 0x5E, 0xE4, 
   0xA6, 0x5C, 0xE0, 0xAA, 0x59, 0xDD, 0xAF, 0x57, 0xDA, 0xB3, 0x54, 0xD6, 0xB7, 0x51, 0xD3, 0xBB, 
   0x4E, 0xD1, 0xBF, 0x4B, 0xCE, 0xC3, 0x48, 0xCB, 0xC7, 0x44, 0xC8, 0xCA, 0x40, 0xC6, 0xCD, 0x3C, 
   0xC4, 0xD0, 0x38, 0xC2, 0xD3, 0x34, 0xC0, 0xD6, 0x30, 0xBE, 0xD8, 0x2B, 0xBC, 0xDB, 0x27, 0xBB, 
   0xDD, 0x22, 0xB9, 0xDF, 0x1D, 0xB8, 0xE0, 0x18, 0xB7, 0xE1, 0x13, 0xB6, 0xE3, 0x0E, 0xB6, 0xE3, 
   0x09, 0xB5, 0xE4, 0x05, 0xB5, 0xE4, 0x00, 0xB5, 0xE5, 0xFB, 0xB5, 0xE4, 0xF7, 0xB5, 0xE4, 0xF2, 
   0xB6, 0xE3, 0xED, 0xB6, 0xE3, 0xE8, 0xB7, 0xE1, 0xE3, 0xB8, 0xE0, 0xDE, 0xB9, 0xDF, 0xD9, 0xBB, 
   0xDD, 0xD5, 0xBC, 0xDB, 0xD0, 0xBE, 0xD8, 0xCC, 0xC0, 0xD6, 0xC8, 0xC2, 0xD3, 0xC4, 0xC4, 0xD0, 
   0xC0, 0xC6, 0xCD, 0xBC, 0xC8, 0xCA, 0xB8, 0xCB, 0xC7, 0xB5, 0xCE, 0xC3, 0xB2, 0xD1, 0xBF, 0xAF, 
   0xD3, 0xBB, 0xAC, 0xD6, 0xB7, 0xA9, 0xDA, 0xB3, 0xA7, 0xDD, 0xAF, 0xA4, 0xE0, 0xAA, 0xA2, 0xE4, 
   0xA6, 0xA0, 0xE7, 0xA1, 0x9F, 0xEB, 0x9C, 0x9E, 0xEE, 0x97, 0x9C, 0xF2, 0x92, 0x9C, 0xF5, 0x8D, 
   0x9B, 0xF9, 0x88, 0x9B, 0xFD, 0x84, 0x9E, 0x00, 0x7F, 0x9E, 0x03, 0x7A, 0x9F, 0x07, 0x75, 0x9F, 
   0x0B, 0x70, 0xA0, 0x0F, 0x6B, 0xA1, 0x13, 0x67, 0xA3, 0x17, 0x62, 0xA4, 0x1B, 0x5D, 0xA6, 0x1E, 
   0x59, 0xA8, 0x22, 0x55, 0xAA, 0x25, 0x50, 0xAC, 0x29, 0x4C, 0xAF, 0x2C, 0x48, 0xB2, 0x2F, 0x44, 
   0xB5, 0x33, 0x40, 0xB8, 0x36, 0x3D, 0xBB, 0x38, 0x39, 0xBF, 0x3B, 0x36, 0xC2, 0x3E, 0x33, 0xC6, 
   0x40, 0x30, 0xCA, 0x42, 0x2D, 0xCE, 0x45, 0x2A, 0xD2, 0x47, 0x28, 0xD7, 0x48, 0x26, 0xDB, 0x4A, 
   0x24, 0xDF, 0x4B, 0x22, 0xE4, 0x4D, 0x21, 0xE9, 0x4E, 0x1F, 0xED, 0x4F, 0x1E, 0xF2, 0x4F, 0x1D, 
   0xF7, 0x50, 0x1D, 0xFC, 0x50, 0x1C, 0x00, 0x50, 0x1C, 0x04, 0x50, 0x1C, 0x09, 0x50, 0x1D, 0x0E, 
   0x4F, 0x1D, 0x13, 0x4F, 0x1E, 0x17, 0x4E, 0x1F, 0x1C, 0x4D, 0x21, 0x21, 0x4B, 0x22, 0x25, 0x4A, 
   0x24, 0x29, 0x48, 0x26, 0x2E, 0x47, 0x28, 0x32, 0x45, 0x2A, 0x36, 0x42, 0x2D, 0x3A, 0x40, 0x30, 
   0x3E, 0x3E, 0x33, 0x41, 0x3B, 0x36, 0x45, 0x38, 0x39, 0x48, 0x36, 0x3D, 0x4B, 0x33, 0x40, 0x4E, 
   0x2F, 0x44, 0x51, 0x2C, 0x48, 0x54, 0x29, 0x4C, 0x56, 0x25, 0x50, 0x58, 0x22, 0x55, 0x5A, 0x1E, 
   0x59, 0x5C, 0x1B, 0x5D, 0x5D, 0x17, 0x62, 0x5F, 0x13, 0x67, 0x60, 0x0F, 0x6B, 0x61, 0x0B, 0x70, 
   0x61, 0x07, 0x75, 0x62, 0x03, 0x7A, 0x62, 0x00, 0x7F, 0x62, 0xFD, 0x83, 0x61, 0xF9, 0x88, 0x61, 
   0xF5, 0x8D, 0x60, 0xF1, 0x92, 0x5F, 0xED, 0x96, 0x5D, 0xE9, 0x9B, 0x5C, 0xE5, 0xA0, 0x5A, 0xE2, 
   0xA4, 0x58, 0xDE, 0xA8, 0x56, 0xDB, 0xAD, 0x54, 0xD7, 0xB1, 0x51, 0xD4, 0xB5, 0x4E, 0xD1, 0xB9, 
   0x4B, 0xCD, 0xBD, 0x48, 0xCA, 0xC0, 0x45, 0xC8, 0xC4, 0x41, 0xC5, 0xC7, 0x3E, 0xC2, 0xCA, 0x3A, 
   0xC0, 0xCD, 0x36, 0xBE, 0xD0, 0x32, 0xBB, 0xD3, 0x2E, 0xB9, 0xD5, 0x29, 0xB8, 0xD7, 0x25, 0xB6, 
   0xD9, 0x21, 0xB5, 0xDB, 0x1C, 0xB3, 0xDC, 0x17, 0xB2, 0xDE, 0x13, 0xB1, 0xDF, 0x0E, 0xB1, 0xE0, 
   0x09, 0xB0, 0xE0, 0x04, 0xB0, 0xE1, 0x00, 0xB0, 0xE1, 0xFC, 0xB0, 0xE1, 0xF7, 0xB0, 0xE0, 0xF2, 
   0xB1, 0xE0, 0xED, 0xB1, 0xDF, 0xE9, 0xB2, 0xDE, 0xE4, 0xB3, 0xDC, 0xDF, 0xB5, 0xDB, 0xDB, 0xB6, 
   0xD9, 0xD7, 0xB8, 0xD7, 0xD2, 0xB9, 0xD5, 0xCE, 0xBB, 0xD3, 0xCA, 0xBE, 0xD0, 0xC6, 0xC0, 0xCD, 
   0xC2, 0xC2, 0xCA, 0xBF, 0xC5, 0xC7, 0xBB, 0xC8, 0xC4, 0xB8, 0xCA, 0xC0, 0xB5, 0xCD, 0xBD, 0xB2, 
   0xD1, 0xB9, 0xAF, 0xD4, 0xB5, 0xAC, 0xD7, 0xB1, 0xAA, 0xDB, 0xAD, 0xA8, 0xDE, 0xA8, 0xA6, 0xE2, 
   0xA4, 0xA4, 0xE5, 0xA0, 0xA3, 0xE9, 0x9B, 0xA1, 0xED, 0x96, 0xA0, 0xF1, 0x92, 0x9F, 0xF5, 0x8D, 
   0x9F, 0xF9, 0x88, 0x9E, 0xFD, 0x83, 0xA2, 0x00, 0x7F, 0xA3, 0x04, 0x7A, 0xA3, 0x08, 0x75, 0xA3, 
   0x0C, 0x71, 0xA4, 0x10, 0x6C, 0xA5, 0x14, 0x68, 0xA6, 0x18, 0x63, 0xA8, 0x1C, 0x5F, 0xAA, 0x20, 
   0x5A, 0xAB, 0x24, 0x56, 0xAE, 0x28, 0x52, 0xB0, 0x2B, 0x4E, 0xB2, 0x2F, 0x4A, 0xB5, 0x32, 0x46, 
   0xB8, 0x36, 0x43, 0xBB, 0x39, 0x3F, 0xBE, 0x3C, 0x3C, 0xC1, 0x3F, 0x39, 0xC5, 0x41, 0x36, 0xC8, 
   0x44, 0x33, 0xCC, 0x46, 0x30, 0xD0, 0x49, 0x2E, 0xD4, 0x4B, 0x2C, 0xD8, 0x4D, 0x29, 0xDC, 0x4E, 
   0x28, 0xE1, 0x50, 0x26, 0xE5, 0x51, 0x24, 0xEA, 0x52, 0x23, 0xEE, 0x53, 0x22, 0xF3, 0x54, 0x21, 
   0xF7, 0x54, 0x21, 0xFC, 0x55, 0x21, 0x00, 0x55, 0x20, 0x04, 0x55, 0x21, 0x09, 0x54, 0x21, 0x0D, 
   0x54, 0x21, 0x12, 0x53, 0x22, 0x16, 0x52, 0x23, 0x1B, 0x51, 0x24, 0x1F, 0x50, 0x26, 0x24, 0x4E, 
   0x28, 0x28, 0x4D, 0x29, 0x2C, 0x4B, 0x2C, 0x30, 0x49, 0x2E, 0x34, 0x46, 0x30, 0x38, 0x44, 0x33, 
   0x3B, 0x41, 0x36, 0x3F, 0x3F, 0x39, 0x42, 0x3C, 0x3C, 0x45, 0x39, 0x3F, 0x48, 0x36, 0x43, 0x4B, 
   0x32, 0x46, 0x4E, 0x2F, 0x4A, 0x50, 0x2B, 0x4E, 0x52, 0x28, 0x52, 0x55, 0x24, 0x56, 0x56, 0x20, 
   0x5A, 0x58, 0x1C, 0x5F, 0x5A, 0x18, 0x63, 0x5B, 0x14, 0x68, 0x5C, 0x10, 0x6C, 0x5D, 0x0C, 0x71, 
   0x5D, 0x08, 0x75, 0x5D, 0x04, 0x7A, 0x5E, 0x00, 0x7F, 0x5D, 0xFC, 0x83, 0x5D, 0xF8, 0x88, 0x5D, 
   0xF4, 0x8C, 0x5C, 0xF0, 0x91, 0x5B, 0xEC, 0x95, 0x5A, 0xE8, 0x9A, 0x58, 0xE4, 0x9E, 0x56, 0xE0, 
   0xA3, 0x55, 0xDC, 0xA7, 0x52, 0xD8, 0xAB, 0x50, 0xD5, 0xAF, 0x4E, 0xD1, 0xB3, 0x4B, 0xCE, 0xB7, 
   0x48, 0xCA, 0xBA, 0x45, 0xC7, 0xBE, 0x42, 0xC4, 0xC1, 0x3F, 0xC1, 0xC4, 0x3B, 0xBF, 0xC7, 0x38, 
   0xBC, 0xCA, 0x34, 0xBA, 0xCD, 0x30, 0xB7, 0xCF, 0x2C, 0xB5, 0xD1, 0x28, 0xB3, 0xD4, 0x24, 0xB2, 
   0xD5, 0x1F, 0xB0, 0xD7, 0x1B, 0xAF, 0xD9, 0x16, 0xAE, 0xDA, 0x12, 0xAD, 0xDB, 0x0D, 0xAC, 0xDC, 
   0x09, 0xAC, 0xDC, 0x04, 0xAB, 0xDC, 0x00, 0xAB, 0xDD, 0xFC, 0xAB, 0xDC, 0xF7, 0xAC, 0xDC, 0xF3, 
   0xAC, 0xDC, 0xEE, 0xAD, 0xDB, 0xEA, 0xAE, 0xDA, 0xE5, 0xAF, 0xD9, 0xE1, 0xB0, 0xD7, 0xDC, 0xB2, 
   0xD5, 0xD8, 0xB3, 0xD4, 0xD4, 0xB5, 0xD1, 0xD0, 0xB7, 0xCF, 0xCC, 0xBA, 0xCD, 0xC8, 0xBC, 0xCA, 
   0xC5, 0xBF, 0xC7, 0xC1, 0xC1, 0xC4, 0xBE, 0xC4, 0xC1, 0xBB, 0xC7, 0xBE, 0xB8, 0xCA, 0xBA, 0xB5, 
   0xCE, 0xB7, 0xB2, 0xD1, 0xB3, 0xB0, 0xD5, 0xAF, 0xAE, 0xD8, 0xAB, 0xAB, 0xDC, 0xA7, 0xAA, 0xE0, 
   0xA3, 0xA8, 0xE4, 0x9E, 0xA6, 0xE8, 0x9A, 0xA5, 0xEC, 0x95, 0xA4, 0xF0, 0x91, 0xA3, 0xF4, 0x8C, 
   0xA3, 0xF8, 0x88, 0xA3, 0xFC, 0x83, 0xA7, 0x00, 0x7F, 0xA7, 0x04, 0x7A, 0xA7, 0x08, 0x76, 0xA8, 
   0x0D, 0x71, 0xA8, 0x11, 0x6D, 0xA9, 0x15, 0x69, 0xAB, 0x1A, 0x64, 0xAC, 0x1E, 0x60, 0xAE, 0x22, 
   0x5C, 0xAF, 0x26, 0x58, 0xB1, 0x2A, 0x54, 0xB3, 0x2E, 0x50, 0xB6, 0x31, 0x4D, 0xB8, 0x35, 0x49, 
   0xBB, 0x38, 0x46, 0xBE, 0x3C, 0x42, 0xC1, 0x3F, 0x3F, 0xC4, 0x42, 0x3C, 0xC8, 0x45, 0x39, 0xCB, 
   0x48, 0x36, 0xCF, 0x4A, 0x34, 0xD2, 0x4D, 0x31, 0xD6, 0x4F, 0x2F, 0xDA, 0x51, 0x2D, 0xDE, 0x52, 
   0x2C, 0xE2, 0x54, 0x2A, 0xE6, 0x55, 0x29, 0xEB, 0x57, 0x27, 0xEF, 0x58, 0x26, 0xF3, 0x58, 0x26, 
   0xF8, 0x59, 0x25, 0xFC, 0x59, 0x25, 0x00, 0x59, 0x25, 0x04, 0x59, 0x25, 0x08, 0x59, 0x25, 0x0D, 
   0x58, 0x26, 0x11, 0x58, 0x26, 0x15, 0x57, 0x27, 0x1A, 0x55, 0x29, 0x1E, 0x54, 0x2A, 0x22, 0x52, 
   0x2C, 0x26, 0x51, 0x2D, 0x2A, 0x4F, 0x2F, 0x2E, 0x4D, 0x31, 0x31, 0x4A, 0x34, 0x35, 0x48, 0x36, 
   0x38, 0x45, 0x39, 0x3C, 0x42, 0x3C, 0x3F, 0x3F, 0x3F, 0x42, 0x3C, 0x42, 0x45, 0x38, 0x46, 0x48, 
   0x35, 0x49, 0x4A, 0x31, 0x4D, 0x4D, 0x2E, 0x50, 0x4F, 0x2A, 0x54, 0x51, 0x26, 0x58, 0x52, 0x22, 
   0x5C, 0x54, 0x1E, 0x60, 0x55, 0x1A, 0x64, 0x57, 0x15, 0x69, 0x58, 0x11, 0x6D, 0x58, 0x0D, 0x71, 
   0x59, 0x08, 0x76, 0x59, 0x04, 0x7A, 0x59, 0x00, 0x7F, 0x59, 0xFC, 0x83, 0x59, 0xF8, 0x87, 0x58, 
   0xF3, 0x8C, 0x58, 0xEF, 0x90, 0x57, 0xEB, 0x94, 0x55, 0xE6, 0x99, 0x54, 0xE2, 0x9D, 0x52, 0xDE, 
   0xA1, 0x51, 0xDA, 0xA5, 0x4F, 0xD6, 0xA9, 0x4D, 0xD2, 0xAD, 0x4A, 0xCF, 0xB0, 0x48, 0xCB, 0xB4, 
   0x45, 0xC8, 0xB7, 0x42, 0xC4, 0xBB, 0x3F, 0xC1, 0xBE, 0x3C, 0xBE, 0xC1, 0x38, 0xBB, 0xC4, 0x35, 
   0xB8, 0xC7, 0x31, 0xB6, 0xC9, 0x2E, 0xB3, 0xCC, 0x2A, 0xB1, 0xCE, 0x26, 0xAF, 0xD0, 0x22, 0xAE, 
   0xD1, 0x1E, 0xAC, 0xD3, 0x1A, 0xAB, 0xD4, 0x15, 0xA9, 0xD6, 0x11, 0xA8, 0xD7, 0x0D, 0xA8, 0xD7, 
   0x08, 0xA7, 0xD8, 0x04, 0xA7, 0xD8, 0x00, 0xA7, 0xD8, 0xFC, 0xA7, 0xD8, 0xF8, 0xA7, 0xD8, 0xF3, 
   0xA8, 0xD7, 0xEF, 0xA8, 0xD7, 0xEB, 0xA9, 0xD6, 0xE6, 0xAB, 0xD4, 0xE2, 0xAC, 0xD3, 0xDE, 0xAE, 
   0xD1, 0xDA, 0xAF, 0xD0, 0xD6, 0xB1, 0xCE, 0xD2, 0xB3, 0xCC, 0xCF, 0xB6, 0xC9, 0xCB, 0xB8, 0xC7, 
   0xC8, 0xBB, 0xC4, 0xC4, 0xBE, 0xC1, 0xC1, 0xC1, 0xBE, 0xBE, 0xC4, 0xBB, 0xBB, 0xC8, 0xB7, 0xB8, 
   0xCB, 0xB4, 0xB6, 0xCF, 0xB0, 0xB3, 0xD2, 0xAD, 0xB1, 0xD6, 0xA9, 0xAF, 0xDA, 0xA5, 0xAE, 0xDE, 
   0xA1, 0xAC, 0xE2, 0x9D, 0xAB, 0xE6, 0x99, 0xA9, 0xEB, 0x94, 0xA8, 0xEF, 0x90, 0xA8, 0xF3, 0x8C, 
   0xA7, 0xF8, 0x87, 0xA7, 0xFC, 0x83, 0xAB, 0x00, 0x7F, 0xAB, 0x04, 0x7A, 0xAC, 0x09, 0x76, 0xAC, 
   0x0D, 0x72, 0xAD, 0x12, 0x6E, 0xAE, 0x16, 0x6A, 0xAF, 0x1B, 0x66, 0xB0, 0x1F, 0x62, 0xB2, 0x24, 
   0x5E, 0xB3, 0x28, 0x5A, 0xB5, 0x2C, 0x56, 0xB7, 0x30, 0x53, 0xBA, 0x34, 0x4F, 0xBC, 0x38, 0x4C, 
   0xBF, 0x3B, 0x48, 0xC1, 0x3F, 0x45, 0xC4, 0x42, 0x42, 0xC7, 0x45, 0x3F, 0xCA, 0x48, 0x3D, 0xCE, 
   0x4B, 0x3A, 0xD1, 0x4E, 0x38, 0xD5, 0x50, 0x35, 0xD8, 0x52, 0x33, 0xDC, 0x55, 0x31, 0xE0, 0x56, 
   0x30, 0xE4, 0x58, 0x2E, 0xE8, 0x5A, 0x2D, 0xEC, 0x5B, 0x2C, 0xF0, 0x5C, 0x2B, 0xF4, 0x5D, 0x2A, 
   0xF8, 0x5D, 0x2A, 0xFC, 0x5D, 0x29, 0x00, 0x5E, 0x29, 0x04, 0x5D, 0x29, 0x08, 0x5D, 0x2A, 0x0C, 
   0x5D, 0x2A, 0x10, 0x5C, 0x2B, 0x14, 0x5B, 0x2C, 0x18, 0x5A, 0x2D, 0x1C, 0x58, 0x2E, 0x20, 0x56, 
   0x30, 0x24, 0x55, 0x31, 0x28, 0x52, 0x33, 0x2B, 0x50, 0x35, 0x2F, 0x4E, 0x38, 0x32, 0x4B, 0x3A, 
   0x36, 0x48, 0x3D, 0x39, 0x45, 0x3F, 0x3C, 0x42, 0x42, 0x3F, 0x3F, 0x45, 0x41, 0x3B, 0x48, 0x44, 
   0x38, 0x4C, 0x46, 0x34, 0x4F, 0x49, 0x30, 0x53, 0x4B, 0x2C, 0x56, 0x4D, 0x28, 0x5A, 0x4E, 0x24, 
   0x5E, 0x50, 0x1F, 0x62, 0x51, 0x1B, 0x66, 0x52, 0x16, 0x6A, 0x53, 0x12, 0x6E, 0x54, 0x0D, 0x72, 
   0x54, 0x09, 0x76, 0x55, 0x04, 0x7A, 0x55, 0x00, 0x7F, 0x55, 0xFC, 0x83, 0x54, 0xF7, 0x87, 0x54, 
   0xF3, 0x8B, 0x53, 0xEE, 0x8F, 0x52, 0xEA, 0x93, 0x51, 0xE5, 0x97, 0x50, 0xE1, 0x9B, 0x4E, 0xDC, 
   0x9F, 0x4D, 0xD8, 0xA3, 0x4B, 0xD4, 0xA7, 0x49, 0xD0, 0xAA, 0x46, 0xCC, 0xAE, 0x44, 0xC8, 0xB1, 
   0x41, 0xC5, 0xB5, 0x3F, 0xC1, 0xB8, 0x3C, 0xBE, 0xBB, 0x39, 0xBB, 0xBE, 0x36, 0xB8, 0xC0, 0x32, 
   0xB5, 0xC3, 0x2F, 0xB2, 0xC5, 0x2B, 0xB0, 0xC8, 0x28, 0xAE, 0xCA, 0x24, 0xAB, 0xCC, 0x20, 0xAA, 
   0xCD, 0x1C, 0xA8, 0xCF, 0x18, 0xA6, 0xD0, 0x14, 0xA5, 0xD1, 0x10, 0xA4, 0xD2, 0x0C, 0xA3, 0xD3, 
   0x08, 0xA3, 0xD3, 0x04, 0xA3, 0xD4, 0x00, 0xA2, 0xD4, 0xFC, 0xA3, 0xD4, 0xF8, 0xA3, 0xD3, 0xF4, 
   0xA3, 0xD3, 0xF0, 0xA4, 0xD2, 0xEC, 0xA5, 0xD1, 0xE8, 0xA6, 0xD0, 0xE4, 0xA8, 0xCF, 0xE0, 0xAA, 
   0xCD, 0xDC, 0xAB, 0xCC, 0xD8, 0xAE, 0xCA, 0xD5, 0xB0, 0xC8, 0xD1, 0xB2, 0xC5, 0xCE, 0xB5, 0xC3, 
   0xCA, 0xB8, 0xC0, 0xC7, 0xBB, 0xBE, 0xC4, 0xBE, 0xBB, 0xC1, 0xC1, 0xB8, 0xBF, 0xC5, 0xB5, 0xBC, 
   0xC8, 0xB1, 0xBA, 0xCC, 0xAE, 0xB7, 0xD0, 0xAA, 0xB5, 0xD4, 0xA7, 0xB3, 0xD8, 0xA3, 0xB2, 0xDC, 
   0x9F, 0xB0, 0xE1, 0x9B, 0xAF, 0xE5, 0x97, 0xAE, 0xEA, 0x93, 0xAD, 0xEE, 0x8F, 0xAC, 0xF3, 0x8B, 
   0xAC, 0xF7, 0x87, 0xAB, 0xFC, 0x83, 0xB0, 0x00, 0x7F, 0xB0, 0x04, 0x7B, 0xB0, 0x09, 0x77, 0xB1, 
   0x0E, 0x73, 0xB1, 0x13, 0x6F, 0xB2, 0x17, 0x6B, 0xB3, 0x1C, 0x67, 0xB5, 0x21, 0x63, 0xB6, 0x25, 
   0x60, 0xB8, 0x29, 0x5C, 0xB9, 0x2E, 0x59, 0xBB, 0x32, 0x55, 0xBE, 0x36, 0x52, 0xC0, 0x3A, 0x4F, 
   0xC2, 0x3E, 0x4B, 0xC5, 0x41, 0x48, 0xC8, 0x45, 0x46, 0xCA, 0x48, 0x43, 0xCD, 0x4B, 0x40, 0xD1, 
   0x4E, 0x3E, 0xD4, 0x51, 0x3C, 0xD7, 0x54, 0x39, 0xDB, 0x56, 0x37, 0xDE, 0x58, 0x36, 0xE2, 0x5A, 
   0x34, 0xE5, 0x5C, 0x33, 0xE9, 0x5D, 0x31, 0xED, 0x5F, 0x30, 0xF1, 0x60, 0x2F, 0xF5, 0x61, 0x2F, 
   0xF9, 0x61, 0x2E, 0xFD, 0x62, 0x2E, 0x00, 0x62, 0x2E, 0x03, 0x62, 0x2E, 0x07, 0x61, 0x2E, 0x0B, 
   0x61, 0x2F, 0x0F, 0x60, 0x2F, 0x13, 0x5F, 0x30, 0x17, 0x5D, 0x31, 0x1B, 0x5C, 0x33, 0x1E, 0x5A, 
   0x34, 0x22, 0x58, 0x36, 0x25, 0x56, 0x37, 0x29, 0x54, 0x39, 0x2C, 0x51, 0x3C, 0x2F, 0x4E, 0x3E, 
   0x33, 0x4B, 0x40, 0x36, 0x48, 0x43, 0x38, 0x45, 0x46, 0x3B, 0x41, 0x48, 0x3E, 0x3E, 0x4B, 0x40, 
   0x3A, 0x4F, 0x42, 0x36, 0x52, 0x45, 0x32, 0x55, 0x47, 0x2E, 0x59, 0x48, 0x29, 0x5C, 0x4A, 0x25, 
   0x60, 0x4B, 0x21, 0x63, 0x4D, 0x1C, 0x67, 0x4E, 0x17, 0x6B, 0x4F, 0x13, 0x6F, 0x4F, 0x0E, 0x73, 
   0x50, 0x09, 0x77, 0x50, 0x04, 0x7B, 0x50, 0x00, 0x7F, 0x50, 0xFC, 0x82, 0x50, 0xF7, 0x86, 0x4F, 
   0xF2, 0x8A, 0x4F, 0xED, 0x8E, 0x4E, 0xE9, 0x92, 0x4D, 0xE4, 0x96, 0x4B, 0xDF, 0x9A, 0x4A, 0xDB, 
   0x9D, 0x48, 0xD7, 0xA1, 0x47, 0xD2, 0xA4, 0x45, 0xCE, 0xA8, 0x42, 0xCA, 0xAB, 0x40, 0xC6, 0xAE, 
   0x3E, 0xC2, 0xB2, 0x3B, 0xBF, 0xB5, 0x38, 0xBB, 0xB7, 0x36, 0xB8, 0xBA, 0x33, 0xB5, 0xBD, 0x2F, 
   0xB2, 0xBF, 0x2C, 0xAF, 0xC1, 0x29, 0xAC, 0xC4, 0x25, 0xAA, 0xC6, 0x22, 0xA8, 0xC7, 0x1E, 0xA6, 
   0xC9, 0x1B, 0xA4, 0xCA, 0x17, 0xA3, 0xCC, 0x13, 0xA1, 0xCD, 0x0F, 0xA0, 0xCE, 0x0B, 0x9F, 0xCE, 
   0x07, 0x9F, 0xCF, 0x03, 0x9E, 0xCF, 0x00, 0x9E, 0xCF, 0xFD, 0x9E, 0xCF, 0xF9, 0x9F, 0xCF, 0xF5, 
   0x9F, 0xCE, 0xF1, 0xA0, 0xCE, 0xED, 0xA1, 0xCD, 0xE9, 0xA3, 0xCC, 0xE5, 0xA4, 0xCA, 0xE2, 0xA6, 
   0xC9, 0xDE, 0xA8, 0xC7, 0xDB, 0xAA, 0xC6, 0xD7, 0xAC, 0xC4, 0xD4, 0xAF, 0xC1, 0xD1, 0xB2, 0xBF, 
   0xCD, 0xB5, 0xBD, 0xCA, 0xB8, 0xBA, 0xC8, 0xBB, 0xB7, 0xC5, 0xBF, 0xB5, 0xC2, 0xC2, 0xB2, 0xC0, 
   0xC6, 0xAE, 0xBE, 0xCA, 0xAB, 0xBB, 0xCE, 0xA8, 0xB9, 0xD2, 0xA4, 0xB8, 0xD7, 0xA1, 0xB6, 0xDB, 
   0x9D, 0xB5, 0xDF, 0x9A, 0xB3, 0xE4, 0x96, 0xB2, 0xE9, 0x92, 0xB1, 0xED, 0x8E, 0xB1, 0xF2, 0x8A, 
   0xB0, 0xF7, 0x86, 0xB0, 0xFC, 0x82, 0xB5, 0x00, 0x7F, 0xB5, 0x05, 0x7B, 0xB5, 0x09, 0x77, 0xB6, 
   0x0E, 0x73, 0xB6, 0x13, 0x70, 0xB7, 0x18, 0x6C, 0xB8, 0x1D, 0x69, 0xB9, 0x22, 0x65, 0xBB, 0x27, 
   0x62, 0xBC, 0x2B, 0x5E, 0xBE, 0x30, 0x5B, 0xC0, 0x34, 0x58, 0xC2, 0x38, 0x54, 0xC4, 0x3C, 0x51, 
   0xC6, 0x40, 0x4F, 0xC8, 0x44, 0x4C, 0xCB, 0x48, 0x49, 0xCE, 0x4B, 0x46, 0xD1, 0x4E, 0x44, 0xD3, 
   0x51, 0x42, 0xD6, 0x54, 0x40, 0xDA, 0x57, 0x3E, 0xDD, 0x59, 0x3C, 0xE0, 0x5C, 0x3A, 0xE4, 0x5E, 
   0x39, 0xE7, 0x60, 0x37, 0xEB, 0x61, 0x36, 0xEE, 0x62, 0x35, 0xF2, 0x64, 0x34, 0xF5, 0x64, 0x34, 
   0xF9, 0x65, 0x33, 0xFD, 0x65, 0x33, 0x00, 0x66, 0x33, 0x03, 0x65, 0x33, 0x07, 0x65, 0x33, 0x0B, 
   0x64, 0x34, 0x0E, 0x64, 0x34, 0x12, 0x62, 0x35, 0x15, 0x61, 0x36, 0x19, 0x60, 0x37, 0x1C, 0x5E, 
   0x39, 0x20, 0x5C, 0x3A, 0x23, 0x59, 0x3C, 0x26, 0x57, 0x3E, 0x2A, 0x54, 0x40, 0x2D, 0x51, 0x42, 
   0x2F, 0x4E, 0x44, 0x32, 0x4B, 0x46, 0x35, 0x48, 0x49, 0x38, 0x44, 0x4C, 0x3A, 0x40, 0x4F, 0x3C, 
   0x3C, 0x51, 0x3E, 0x38, 0x54, 0x40, 0x34, 0x58, 0x42, 0x30, 0x5B, 0x44, 0x2B, 0x5E, 0x45, 0x27, 
   0x62, 0x47, 0x22, 0x65, 0x48, 0x1D, 0x69, 0x49, 0x18, 0x6C, 0x4A, 0x13, 0x70, 0x4A, 0x0E, 0x73, 
   0x4B, 0x09, 0x77, 0x4B, 0x05, 0x7B, 0x4B, 0x00, 0x7F, 0x4B, 0xFB, 0x82, 0x4B, 0xF7, 0x86, 0x4A, 
   0xF2, 0x8A, 0x4A, 0xED, 0x8D, 0x49, 0xE8, 0x91, 0x48, 0xE3, 0x94, 0x47, 0xDE, 0x98, 0x45, 0xD9, 
   0x9B, 0x44, 0xD5, 0x9F, 0x42, 0xD0, 0xA2, 0x40, 0xCC, 0xA5, 0x3E, 0xC8, 0xA9, 0x3C, 0xC4, 0xAC, 
   0x3A, 0xC0, 0xAE, 0x38, 0xBC, 0xB1, 0x35, 0xB8, 0xB4, 0x32, 0xB5, 0xB7, 0x2F, 0xB2, 0xB9, 0x2D, 
   0xAF, 0xBB, 0x2A, 0xAC, 0xBD, 0x26, 0xA9, 0xBF, 0x23, 0xA7, 0xC1, 0x20, 0xA4, 0xC3, 0x1C, 0xA2, 
   0xC4, 0x19, 0xA0, 0xC6, 0x15, 0x9F, 0xC7, 0x12, 0x9E, 0xC8, 0x0E, 0x9C, 0xC9, 0x0B, 0x9C, 0xC9, 
   0x07, 0x9B, 0xCA, 0x03, 0x9B, 0xCA, 0x00, 0x9A, 0xCA, 0xFD, 0x9B, 0xCA, 0xF9, 0x9B, 0xCA, 0xF5, 
   0x9C, 0xC9, 0xF2, 0x9C, 0xC9, 0xEE, 0x9E, 0xC8, 0xEB, 0x9F, 0xC7, 0xE7, 0xA0, 0xC6, 0xE4, 0xA2, 
   0xC4, 0xE0, 0xA4, 0xC3, 0xDD, 0xA7, 0xC1, 0xDA, 0xA9, 0xBF, 0xD6, 0xAC, 0xBD, 0xD3, 0xAF, 0xBB, 
   0xD1, 0xB2, 0xB9, 0xCE, 0xB5, 0xB7, 0xCB, 0xB8, 0xB4, 0xC8, 0xBC, 0xB1, 0xC6, 0xC0, 0xAE, 0xC4, 
   0xC4, 0xAC, 0xC2, 0xC8, 0xA9, 0xC0, 0xCC, 0xA5, 0xBE, 0xD0, 0xA2, 0xBC, 0xD5, 0x9F, 0xBB, 0xD9, 
   0x9B, 0xB9, 0xDE, 0x98, 0xB8, 0xE3, 0x94, 0xB7, 0xE8, 0x91, 0xB6, 0xED, 0x8D, 0xB6, 0xF2, 0x8A, 
   0xB5, 0xF7, 0x86, 0xB5, 0xFB, 0x82, 0xBA, 0x00, 0x7F, 0xBA, 0x05, 0x7B, 0xBA, 0x0A, 0x78, 0xBB, 
   0x0F, 0x74, 0xBB, 0x14, 0x71, 0xBC, 0x19, 0x6D, 0xBD, 0x1E, 0x6A, 0xBE, 0x23, 0x67, 0xBF, 0x28, 
   0x63, 0xC1, 0x2D, 0x60, 0xC2, 0x31, 0x5D, 0xC4, 0x36, 0x5A, 0xC6, 0x3A, 0x57, 0xC8, 0x3E, 0x54, 
   0xCA, 0x42, 0x52, 0xCC, 0x46, 0x4F, 0xCF, 0x4A, 0x4D, 0xD1, 0x4E, 0x4A, 0xD4, 0x51, 0x48, 0xD6, 
   0x54, 0x46, 0xD9, 0x57, 0x44, 0xDC, 0x5A, 0x42, 0xDF, 0x5D, 0x40, 0xE2, 0x5F, 0x3F, 0xE5, 0x61, 
   0x3D, 0xE9, 0x63, 0x3C, 0xEC, 0x65, 0x3B, 0xEF, 0x66, 0x3A, 0xF3, 0x67, 0x39, 0xF6, 0x68, 0x39, 
   0xFA, 0x69, 0x38, 0xFD, 0x69, 0x38, 0x00, 0x69, 0x38, 0x03, 0x69, 0x38, 0x06, 0x69, 0x38, 0x0A, 
   0x68, 0x39, 0x0D, 0x67, 0x39, 0x11, 0x66, 0x3A, 0x14, 0x65, 0x3B, 0x17, 0x63, 0x3C, 0x1B, 0x61, 
   0x3D, 0x1E, 0x5F, 0x3F, 0x21, 0x5D, 0x40, 0x24, 0x5A, 0x42, 0x27, 0x57, 0x44, 0x2A, 0x54, 0x46, 
   0x2C, 0x51, 0x48, 0x2F, 0x4E, 0x4A, 0x31, 0x4A, 0x4D, 0x34, 0x46, 0x4F, 0x36, 0x42, 0x52, 0x38, 
   0x3E, 0x54, 0x3A, 0x3A, 0x57, 0x3C, 0x36, 0x5A, 0x3E, 0x31, 0x5D, 0x3F, 0x2D, 0x60, 0x41, 0x28, 
   0x63, 0x42, 0x23, 0x67, 0x43, 0x1E, 0x6A, 0x44, 0x19, 0x6D, 0x45, 0x14, 0x71, 0x45, 0x0F, 0x74, 
   0x46, 0x0A, 0x78, 0x46, 0x05, 0x7B, 0x46, 0x00, 0x7F, 0x46, 0xFB, 0x82, 0x46, 0xF6, 0x85, 0x45, 
   0xF1, 0x89, 0x45, 0xEC, 0x8C, 0x44, 0xE7, 0x90, 0x43, 0xE2, 0x93, 0x42, 0xDD, 0x96, 0x41, 0xD8, 
   0x9A, 0x3F, 0xD3, 0x9D, 0x3E, 0xCF, 0xA0, 0x3C, 0xCA, 0xA3, 0x3A, 0xC6, 0xA6, 0x38, 0xC2, 0xA9, 
   0x36, 0xBE, 0xAB, 0x34, 0xBA, 0xAE, 0x31, 0xB6, 0xB0, 0x2F, 0xB2, 0xB3, 0x2C, 0xAF, 0xB5, 0x2A, 
   0xAC, 0xB7, 0x27, 0xA9, 0xB9, 0x24, 0xA6, 0xBB, 0x21, 0xA3, 0xBD, 0x1E, 0xA1, 0xBE, 0x1B, 0x9F, 
   0xC0, 0x17, 0x9D, 0xC1, 0x14, 0x9B, 0xC2, 0x11, 0x9A, 0xC3, 0x0D, 0x99, 0xC4, 0x0A, 0x98, 0xC4, 
   0x06, 0x97, 0xC5, 0x03, 0x97, 0xC5, 0x00, 0x97, 0xC5, 0xFD, 0x97, 0xC5, 0xFA, 0x97, 0xC5, 0xF6, 
   0x98, 0xC4, 0xF3, 0x99, 0xC4, 0xEF, 0x9A, 0xC3, 0xEC, 0x9B, 0xC2, 0xE9, 0x9D, 0xC1, 0xE5, 0x9F, 
   0xC0, 0xE2, 0xA1, 0xBE, 0xDF, 0xA3, 0xBD, 0xDC, 0xA6, 0xBB, 0xD9, 0xA9, 0xB9, 0xD6, 0xAC, 0xB7, 
   0xD4, 0xAF, 0xB5, 0xD1, 0xB2, 0xB3, 0xCF, 0xB6, 0xB0, 0xCC, 0xBA, 0xAE, 0xCA, 0xBE, 0xAB, 0xC8, 
   0xC2, 0xA9, 0xC6, 0xC6, 0xA6, 0xC4, 0xCA, 0xA3, 0xC2, 0xCF, 0xA0, 0xC1, 0xD3, 0x9D, 0xBF, 0xD8, 
   0x9A, 0xBE, 0xDD, 0x96, 0xBD, 0xE2, 0x93, 0xBC, 0xE7, 0x90, 0xBB, 0xEC, 0x8C, 0xBB, 0xF1, 0x89, 
   0xBA, 0xF6, 0x85, 0xBA, 0xFB, 0x82, 0xBF, 0x00, 0x7F, 0xBF, 0x05, 0x7B, 0xC0, 0x0A, 0x78, 0xC0, 
   0x0F, 0x75, 0xC0, 0x15, 0x72, 0xC1, 0x1A, 0x6F, 0xC2, 0x1F, 0x6C, 0xC3, 0x24, 0x69, 0xC4, 0x29, 
   0x66, 0xC5, 0x2E, 0x63, 0xC7, 0x33, 0x60, 0xC8, 0x38, 0x5D, 0xCA, 0x3C, 0x5A, 0xCC, 0x40, 0x58, 
   0xCE, 0x45, 0x55, 0xD0, 0x49, 0x53, 0xD2, 0x4D, 0x50, 0xD5, 0x50, 0x4E, 0xD7, 0x54, 0x4C, 0xDA, 
   0x57, 0x4A, 0xDC, 0x5A, 0x48, 0xDF, 0x5D, 0x46, 0xE2, 0x60, 0x45, 0xE5, 0x62, 0x43, 0xE8, 0x64, 
   0x42, 0xEB, 0x66, 0x41, 0xEE, 0x68, 0x40, 0xF1, 0x69, 0x3F, 0xF4, 0x6A, 0x3E, 0xF7, 0x6B, 0x3E, 
   0xFA, 0x6C, 0x3E, 0xFD, 0x6C, 0x3D, 0x00, 0x6C, 0x3D, 0x03, 0x6C, 0x3D, 0x06, 0x6C, 0x3E, 0x09, 
   0x6B, 0x3E, 0x0C, 0x6A, 0x3E, 0x0F, 0x69, 0x3F, 0x12, 0x68, 0x40, 0x15, 0x66, 0x41, 0x18, 0x64, 
   0x42, 0x1B, 0x62, 0x43, 0x1E, 0x60, 0x45, 0x21, 0x5D, 0x46, 0x24, 0x5A, 0x48, 0x26, 0x57, 0x4A, 
   0x29, 0x54, 0x4C, 0x2B, 0x50, 0x4E, 0x2E, 0x4D, 0x50, 0x30, 0x49, 0x53, 0x32, 0x45, 0x55, 0x34, 
   0x40, 0x58, 0x36, 0x3C, 0x5A, 0x38, 0x38, 0x5D, 0x39, 0x33, 0x60, 0x3B, 0x2E, 0x63, 0x3C, 0x29, 
   0x66, 0x3D, 0x24, 0x69, 0x3E, 0x1F, 0x6C, 0x3F, 0x1A, 0x6F, 0x40, 0x15, 0x72, 0x40, 0x0F, 0x75, 
   0x40, 0x0A, 0x78, 0x41, 0x05, 0x7B, 0x41, 0x00, 0x7F, 0x41, 0xFB, 0x82, 0x40, 0xF6, 0x85, 0x40, 
   0xF1, 0x88, 0x40, 0xEB, 0x8B, 0x3F, 0xE6, 0x8E, 0x3E, 0xE1, 0x91, 0x3D, 0xDC, 0x94, 0x3C, 0xD7, 
   0x97, 0x3B, 0xD2, 0x9A, 0x39, 0xCD, 0x9D, 0x38, 0xC8, 0xA0, 0x36, 0xC4, 0xA3, 0x34, 0xC0, 0xA5, 
   0x32, 0xBB, 0xA8, 0x30, 0xB7, 0xAA, 0x2E, 0xB3, 0xAD, 0x2B, 0xB0, 0xAF, 0x29, 0xAC, 0xB1, 0x26, 
   0xA9, 0xB3, 0x24, 0xA6, 0xB5, 0x21, 0xA3, 0xB7, 0x1E, 0xA0, 0xB8, 0x1B, 0x9E, 0xBA, 0x18, 0x9C, 
   0xBB, 0x15, 0x9A, 0xBC, 0x12, 0x98, 0xBD, 0x0F, 0x97, 0xBE, 0x0C, 0x96, 0xBF, 0x09, 0x95, 0xBF, 
   0x06, 0x94, 0xBF, 0x03, 0x94, 0xC0, 0x00, 0x94, 0xC0, 0xFD, 0x94, 0xC0, 0xFA, 0x94, 0xBF, 0xF7, 
   0x95, 0xBF, 0xF4, 0x96, 0xBF, 0xF1, 0x97, 0xBE, 0xEE, 0x98, 0xBD, 0xEB, 0x9A, 0xBC, 0xE8, 0x9C, 
   0xBB, 0xE5, 0x9E, 0xBA, 0xE2, 0xA0, 0xB8, 0xDF, 0xA3, 0xB7, 0xDC, 0xA6, 0xB5, 0xDA, 0xA9, 0xB3, 
   0xD7, 0xAC, 0xB1, 0xD5, 0xB0, 0xAF, 0xD2, 0xB3, 0xAD, 0xD0, 0xB7, 0xAA, 0xCE, 0xBB, 0xA8, 0xCC, 
   0xC0, 0xA5, 0xCA, 0xC4, 0xA3, 0xC8, 0xC8, 0xA0, 0xC7, 0xCD, 0x9D, 0xC5, 0xD2, 0x9A, 0xC4, 0xD7, 
   0x97, 0xC3, 0xDC, 0x94, 0xC2, 0xE1, 0x91, 0xC1, 0xE6, 0x8E, 0xC0, 0xEB, 0x8B, 0xC0, 0xF1, 0x88, 
   0xC0, 0xF6, 0x85, 0xBF, 0xFB, 0x82, 0xC5, 0x00, 0x7F, 0xC5, 0x05, 0x7C, 0xC5, 0x0A, 0x79, 0xC5, 
   0x10, 0x76, 0xC6, 0x15, 0x73, 0xC6, 0x1B, 0x70, 0xC7, 0x20, 0x6D, 0xC8, 0x25, 0x6A, 0xC9, 0x2A, 
   0x68, 0xCA, 0x2F, 0x65, 0xCC, 0x34, 0x62, 0xCD, 0x39, 0x60, 0xCF, 0x3E, 0x5D, 0xD0, 0x42, 0x5B, 
   0xD2, 0x47, 0x59, 0xD4, 0x4B, 0x56, 0xD6, 0x4F, 0x54, 0xD8, 0x52, 0x52, 0xDB, 0x56, 0x50, 0xDD, 
   0x59, 0x4E, 0xDF, 0x5D, 0x4D, 0xE2, 0x60, 0x4B, 0xE4, 0x62, 0x4A, 0xE7, 0x65, 0x48, 0xEA, 0x67, 
   0x47, 0xEC, 0x69, 0x46, 0xEF, 0x6B, 0x45, 0xF2, 0x6C, 0x44, 0xF5, 0x6D, 0x44, 0xF8, 0x6E, 0x43, 
   0xFB, 0x6F, 0x43, 0xFE, 0x6F, 0x43, 0x00, 0x70, 0x43, 0x02, 0x6F, 0x43, 0x05, 0x6F, 0x43, 0x08, 
   0x6E, 0x43, 0x0B, 0x6D, 0x44, 0x0E, 0x6C, 0x44, 0x11, 0x6B, 0x45, 0x14, 0x69, 0x46, 0x16, 0x67, 
   0x47, 0x19, 0x65, 0x48, 0x1C, 0x62, 0x4A, 0x1E, 0x60, 0x4B, 0x21, 0x5D, 0x4D, 0x23, 0x59, 0x4E, 
   0x25, 0x56, 0x50, 0x28, 0x52, 0x52, 0x2A, 0x4F, 0x54, 0x2C, 0x4B, 0x56, 0x2E, 0x47, 0x59, 0x30, 
   0x42, 0x5B, 0x31, 0x3E, 0x5D, 0x33, 0x39, 0x60, 0x34, 0x34, 0x62, 0x36, 0x2F, 0x65, 0x37, 0x2A, 
   0x68, 0x38, 0x25, 0x6A, 0x39, 0x20, 0x6D, 0x3A, 0x1B, 0x70, 0x3A, 0x15, 0x73, 0x3B, 0x10, 0x76, 
   0x3B, 0x0A, 0x79, 0x3B, 0x05, 0x7C, 0x3B, 0x00, 0x7F, 0x3B, 0xFB, 0x81, 0x3B, 0xF6, 0x84, 0x3B, 
   0xF0, 0x87, 0x3A, 0xEB, 0x8A, 0x3A, 0xE5, 0x8D, 0x39, 0xE0, 0x90, 0x38, 0xDB, 0x93, 0x37, 0xD6, 
   0x95, 0x36, 0xD1, 0x98, 0x34, 0xCC, 0x9B, 0x33, 0xC7, 0x9D, 0x31, 0xC2, 0xA0, 0x30, 0xBE, 0xA2, 
   0x2E, 0xB9, 0xA4, 0x2C, 0xB5, 0xA7, 0x2A, 0xB1, 0xA9, 0x28, 0xAE, 0xAB, 0x25, 0xAA, 0xAD, 0x23, 
   0xA7, 0xAF, 0x21, 0xA3, 0xB0, 0x1E, 0xA0, 0xB2, 0x1C, 0x9E, 0xB3, 0x19, 0x9B, 0xB5, 0x16, 0x99, 
   0xB6, 0x14, 0x97, 0xB7, 0x11, 0x95, 0xB8, 0x0E, 0x94, 0xB9, 0x0B, 0x93, 0xB9, 0x08, 0x92, 0xBA, 
   0x05, 0x91, 0xBA, 0x02, 0x91, 0xBA, 0x00, 0x90, 0xBA, 0xFE, 0x91, 0xBA, 0xFB, 0x91, 0xBA, 0xF8, 
   0x92, 0xBA, 0xF5, 0x93, 0xB9, 0xF2, 0x94, 0xB9, 0xEF, 0x95, 0xB8, 0xEC, 0x97, 0xB7, 0xEA, 0x99, 
   0xB6, 0xE7, 0x9B, 0xB5, 0xE4, 0x9E, 0xB3, 0xE2, 0xA0, 0xB2, 0xDF, 0xA3, 0xB0, 0xDD, 0xA7, 0xAF, 
   0xDB, 0xAA, 0xAD, 0xD8, 0xAE, 0xAB, 0xD6, 0xB1, 0xA9, 0xD4, 0xB5, 0xA7, 0xD2, 0xB9, 0xA4, 0xD0, 
   0xBE, 0xA2, 0xCF, 0xC2, 0xA0, 0xCD, 0xC7, 0x9D, 0xCC, 0xCC, 0x9B, 0xCA, 0xD1, 0x98, 0xC9, 0xD6, 
   0x95, 0xC8, 0xDB, 0x93, 0xC7, 0xE0, 0x90, 0xC6, 0xE5, 0x8D, 0xC6, 0xEB, 0x8A, 0xC5, 0xF0, 0x87, 
   0xC5, 0xF6, 0x84, 0xC5, 0xFB, 0x81, 0xCA, 0x00, 0x7F, 0xCA, 0x05, 0x7C, 0xCA, 0x0B, 0x79, 0xCB, 
   0x10, 0x77, 0xCB, 0x16, 0x74, 0xCC, 0x1B, 0x71, 0xCD, 0x21, 0x6F, 0xCD, 0x26, 0x6C, 0xCE, 0x2B, 
   0x6A, 0xCF, 0x31, 0x67, 0xD1, 0x36, 0x65, 0xD2, 0x3B, 0x63, 0xD3, 0x3F, 0x60, 0xD5, 0x44, 0x5E, 
   0xD7, 0x48, 0x5C, 0xD8, 0x4D, 0x5A, 0xDA, 0x51, 0x58, 0xDC, 0x55, 0x56, 0xDE, 0x58, 0x55, 0xE0, 
   0x5C, 0x53, 0xE2, 0x5F, 0x51, 0xE5, 0x62, 0x50, 0xE7, 0x65, 0x4F, 0xE9, 0x67, 0x4D, 0xEC, 0x6A, 
   0x4C, 0xEE, 0x6C, 0x4B, 0xF1, 0x6D, 0x4B, 0xF3, 0x6F, 0x4A, 0xF6, 0x70, 0x49, 0xF9, 0x71, 0x49, 
   0xFB, 0x72, 0x48, 0xFE, 0x72, 0x48, 0x00, 0x72, 0x48, 0x02, 0x72, 0x48, 0x05, 0x72, 0x48, 0x07, 
   0x71, 0x49, 0x0A, 0x70, 0x49, 0x0D, 0x6F, 0x4A, 0x0F, 0x6D, 0x4B, 0x12, 0x6C, 0x4B, 0x14, 0x6A, 
   0x4C, 0x17, 0x67, 0x4D, 0x19, 0x65, 0x4F, 0x1B, 0x62, 0x50, 0x1E, 0x5F, 0x51, 0x20, 0x5C, 0x53, 
   0x22, 0x58, 0x55, 0x24, 0x55, 0x56, 0x26, 0x51, 0x58, 0x28, 0x4D, 0x5A, 0x29, 0x48, 0x5C, 0x2B, 
   0x44, 0x5E, 0x2D, 0x3F, 0x60, 0x2E, 0x3B, 0x63, 0x2F, 0x36, 0x65, 0x31, 0x31, 0x67, 0x32, 0x2B, 
   0x6A, 0x33, 0x26, 0x6C, 0x33, 0x21, 0x6F, 0x34, 0x1B, 0x71, 0x35, 0x16, 0x74, 0x35, 0x10, 0x77, 
   0x36, 0x0B, 0x79, 0x36, 0x05, 0x7C, 0x36, 0x00, 0x7F, 0x36, 0xFB, 0x81, 0x36, 0xF5, 0x84, 0x35, 
   0xF0, 0x86, 0x35, 0xEA, 0x89, 0x34, 0xE5, 0x8C, 0x33, 0xDF, 0x8E, 0x33, 0xDA, 0x91, 0x32, 0xD5, 
   0x93, 0x31, 0xCF, 0x96, 0x2F, 0xCA, 0x98, 0x2E, 0xC5, 0x9A, 0x2D, 0xC1, 0x9D, 0x2B, 0xBC, 0x9F, 
   0x29, 0xB8, 0xA1, 0x28, 0xB3, 0xA3, 0x26, 0xAF, 0xA5, 0x24, 0xAB, 0xA7, 0x22, 0xA8, 0xA8, 0x20, 
   0xA4, 0xAA, 0x1E, 0xA1, 0xAC, 0x1B, 0x9E, 0xAD, 0x19, 0x9B, 0xAE, 0x17, 0x99, 0xB0, 0x14, 0x96, 
   0xB1, 0x12, 0x94, 0xB2, 0x0F, 0x93, 0xB2, 0x0D, 0x91, 0xB3, 0x0A, 0x90, 0xB4, 0x07, 0x8F, 0xB4, 
   0x05, 0x8E, 0xB5, 0x02, 0x8E, 0xB5, 0x00, 0x8E, 0xB5, 0xFE, 0x8E, 0xB5, 0xFB, 0x8E, 0xB5, 0xF9, 
   0x8F, 0xB4, 0xF6, 0x90, 0xB4, 0xF3, 0x91, 0xB3, 0xF1, 0x93, 0xB2, 0xEE, 0x94, 0xB2, 0xEC, 0x96, 
   0xB1, 0xE9, 0x99, 0xB0, 0xE7, 0x9B, 0xAE, 0xE5, 0x9E, 0xAD, 0xE2, 0xA1, 0xAC, 0xE0, 0xA4, 0xAA, 
   0xDE, 0xA8, 0xA8, 0xDC, 0xAB, 0xA7, 0xDA, 0xAF, 0xA5, 0xD8, 0xB3, 0xA3, 0xD7, 0xB8, 0xA1, 0xD5, 
   0xBC, 0x9F, 0xD3, 0xC1, 0x9D, 0xD2, 0xC5, 0x9A, 0xD1, 0xCA, 0x98, 0xCF, 0xCF, 0x96, 0xCE, 0xD5, 
   0x93, 0xCD, 0xDA, 0x91, 0xCD, 0xDF, 0x8E, 0xCC, 0xE5, 0x8C, 0xCB, 0xEA, 0x89, 0xCB, 0xF0, 0x86, 
   0xCA, 0xF5, 0x84, 0xCA, 0xFB, 0x81, 0xD0, 0x00, 0x7F, 0xD0, 0x05, 0x7C, 0xD0, 0x0B, 0x7A, 0xD0, 
   0x11, 0x77, 0xD1, 0x16, 0x75, 0xD1, 0x1C, 0x73, 0xD2, 0x22, 0x70, 0xD3, 0x27, 0x6E, 0xD4, 0x2C, 
   0x6C, 0xD5, 0x32, 0x6A, 0xD6, 0x37, 0x68, 0xD7, 0x3C, 0x66, 0xD8, 0x41, 0x63, 0xD9, 0x45, 0x62, 
   0xDB, 0x4A, 0x60, 0xDC, 0x4E, 0x5E, 0xDE, 0x52, 0x5C, 0xE0, 0x56, 0x5A, 0xE2, 0x5A, 0x59, 0xE4, 
   0x5E, 0x57, 0xE5, 0x61, 0x56, 0xE8, 0x64, 0x55, 0xEA, 0x67, 0x54, 0xEC, 0x6A, 0x53, 0xEE, 0x6C, 
   0x52, 0xF0, 0x6E, 0x51, 0xF2, 0x70, 0x50, 0xF5, 0x71, 0x4F, 0xF7, 0x73, 0x4F, 0xF9, 0x74, 0x4E, 
   0xFC, 0x74, 0x4E, 0xFE, 0x75, 0x4E, 0x00, 0x75, 0x4E, 0x02, 0x75, 0x4E, 0x04, 0x74, 0x4E, 0x07, 
   0x74, 0x4E, 0x09, 0x73, 0x4F, 0x0B, 0x71, 0x4F, 0x0E, 0x70, 0x50, 0x10, 0x6E, 0x51, 0x12, 0x6C, 
   0x52, 0x14, 0x6A, 0x53, 0x16, 0x67, 0x54, 0x18, 0x64, 0x55, 0x1B, 0x61, 0x56, 0x1C, 0x5E, 0x57, 
   0x1E, 0x5A, 0x59, 0x20, 0x56, 0x5A, 0x22, 0x52, 0x5C, 0x24, 0x4E, 0x5E, 0x25, 0x4A, 0x60, 0x27, 
   0x45, 0x62, 0x28, 0x41, 0x63, 0x29, 0x3C, 0x66, 0x2A, 0x37, 0x68, 0x2B, 0x32, 0x6A, 0x2C, 0x2C, 
   0x6C, 0x2D, 0x27, 0x6E, 0x2E, 0x22, 0x70, 0x2F, 0x1C, 0x73, 0x2F, 0x16, 0x75, 0x30, 0x11, 0x77, 
   0x30, 0x0B, 0x7A, 0x30, 0x05, 0x7C, 0x30, 0x00, 0x7F, 0x30, 0xFB, 0x81, 0x30, 0xF5, 0x83, 0x30, 
   0xEF, 0x86, 0x2F, 0xEA, 0x88, 0x2F, 0xE4, 0x8A, 0x2E, 0xDE, 0x8D, 0x2D, 0xD9, 0x8F, 0x2C, 0xD4, 
   0x91, 0x2B, 0xCE, 0x93, 0x2A, 0xC9, 0x95, 0x29, 0xC4, 0x97, 0x28, 0xBF, 0x9A, 0x27, 0xBB, 0x9B, 
   0x25, 0xB6, 0x9D, 0x24, 0xB2, 0x9F, 0x22, 0xAE, 0xA1, 0x20, 0xAA, 0xA3, 0x1E, 0xA6, 0xA4, 0x1C, 
   0xA2, 0xA6, 0x1B, 0x9F, 0xA7, 0x18, 0x9C, 0xA8, 0x16, 0x99, 0xA9, 0x14, 0x96, 0xAA, 0x12, 0x94, 
   0xAB, 0x10, 0x92, 0xAC, 0x0E, 0x90, 0xAD, 0x0B, 0x8F, 0xAE, 0x09, 0x8D, 0xAE, 0x07, 0x8C, 0xAF, 
   0x04, 0x8C, 0xAF, 0x02, 0x8B, 0xAF, 0x00, 0x8B, 0xAF, 0xFE, 0x8B, 0xAF, 0xFC, 0x8C, 0xAF, 0xF9, 
   0x8C, 0xAF, 0xF7, 0x8D, 0xAE, 0xF5, 0x8F, 0xAE, 0xF2, 0x90, 0xAD, 0xF0, 0x92, 0xAC, 0xEE, 0x94, 
   0xAB, 0xEC, 0x96, 0xAA, 0xEA, 0x99, 0xA9, 0xE8, 0x9C, 0xA8, 0xE5, 0x9F, 0xA7, 0xE4, 0xA2, 0xA6, 
   0xE2, 0xA6, 0xA4, 0xE0, 0xAA, 0xA3, 0xDE, 0xAE, 0xA1, 0xDC, 0xB2, 0x9F, 0xDB, 0xB6, 0x9D, 0xD9, 
   0xBB, 0x9B, 0xD8, 0xBF, 0x9A, 0xD7, 0xC4, 0x97, 0xD6, 0xC9, 0x95, 0xD5, 0xCE, 0x93, 0xD4, 0xD4, 
   0x91, 0xD3, 0xD9, 0x8F, 0xD2, 0xDE, 0x8D, 0xD1, 0xE4, 0x8A, 0xD1, 0xEA, 0x88, 0xD0, 0xEF, 0x86, 
   0xD0, 0xF5, 0x83, 0xD0, 0xFB, 0x81, 0xD6, 0x00, 0x7F, 0xD6, 0x05, 0x7C, 0xD6, 0x0B, 0x7A, 0xD6, 
   0x11, 0x78, 0xD7, 0x17, 0x76, 0xD7, 0x1D, 0x74, 0xD8, 0x22, 0x72, 0xD8, 0x28, 0x70, 0xD9, 0x2D, 
   0x6E, 0xDA, 0x33, 0x6C, 0xDB, 0x38, 0x6A, 0xDC, 0x3D, 0x69, 0xDD, 0x42, 0x67, 0xDE, 0x47, 0x65, 
   0xDF, 0x4B, 0x63, 0xE1, 0x50, 0x62, 0xE2, 0x54, 0x60, 0xE4, 0x58, 0x5F, 0xE5, 0x5C, 0x5D, 0xE7, 
   0x60, 0x5C, 0xE9, 0x63, 0x5B, 0xEB, 0x66, 0x5A, 0xEC, 0x69, 0x59, 0xEE, 0x6C, 0x58, 0xF0, 0x6E, 
   0x57, 0xF2, 0x70, 0x56, 0xF4, 0x72, 0x56, 0xF6, 0x73, 0x55, 0xF8, 0x75, 0x55, 0xFA, 0x76, 0x54, 
   0xFC, 0x77, 0x54, 0xFE, 0x77, 0x54, 0x00, 0x77, 0x54, 0x02, 0x77, 0x54, 0x04, 0x77, 0x54, 0x06, 
   0x76, 0x54, 0x08, 0x75, 0x55, 0x0A, 0x73, 0x55, 0x0C, 0x72, 0x56, 0x0E, 0x70, 0x56, 0x10, 0x6E, 
   0x57, 0x12, 0x6C, 0x58, 0x14, 0x69, 0x59, 0x15, 0x66, 0x5A, 0x17, 0x63, 0x5B, 0x19, 0x60, 0x5C, 
   0x1B, 0x5C, 0x5D, 0x1C, 0x58, 0x5F, 0x1E, 0x54, 0x60, 0x1F, 0x50, 0x62, 0x21, 0x4B, 0x63, 0x22, 
   0x47, 0x65, 0x23, 0x42, 0x67, 0x24, 0x3D, 0x69, 0x25, 0x38, 0x6A, 0x26, 0x33, 0x6C, 0x27, 0x2D, 
   0x6E, 0x28, 0x28, 0x70, 0x28, 0x22, 0x72, 0x29, 0x1D, 0x74, 0x29, 0x17, 0x76, 0x2A, 0x11, 0x78, 
   0x2A, 0x0B, 0x7A, 0x2A, 0x05, 0x7C, 0x2A, 0x00, 0x7F, 0x2A, 0xFB, 0x81, 0x2A, 0xF5, 0x83, 0x2A, 
   0xEF, 0x85, 0x29, 0xE9, 0x87, 0x29, 0xE3, 0x89, 0x28, 0xDE, 0x8B, 0x28, 0xD8, 0x8D, 0x27, 0xD3, 
   0x8F, 0x26, 0xCD, 0x91, 0x25, 0xC8, 0x93, 0x24, 0xC3, 0x94, 0x23, 0xBE, 0x96, 0x22, 0xB9, 0x98, 
   0x21, 0xB5, 0x9A, 0x1F, 0xB0, 0x9B, 0x1E, 0xAC, 0x9D, 0x1C, 0xA8, 0x9E, 0x1B, 0xA4, 0xA0, 0x19, 
   0xA0, 0xA1, 0x17, 0x9D, 0xA2, 0x15, 0x9A, 0xA3, 0x14, 0x97, 0xA4, 0x12, 0x94, 0xA5, 0x10, 0x92, 
   0xA6, 0x0E, 0x90, 0xA7, 0x0C, 0x8E, 0xA7, 0x0A, 0x8D, 0xA8, 0x08, 0x8B, 0xA8, 0x06, 0x8A, 0xA9, 
   0x04, 0x89, 0xA9, 0x02, 0x89, 0xA9, 0x00, 0x89, 0xA9, 0xFE, 0x89, 0xA9, 0xFC, 0x89, 0xA9, 0xFA, 
   0x8A, 0xA9, 0xF8, 0x8B, 0xA8, 0xF6, 0x8D, 0xA8, 0xF4, 0x8E, 0xA7, 0xF2, 0x90, 0xA7, 0xF0, 0x92, 
   0xA6, 0xEE, 0x94, 0xA5, 0xEC, 0x97, 0xA4, 0xEB, 0x9A, 0xA3, 0xE9, 0x9D, 0xA2, 0xE7, 0xA0, 0xA1, 
   0xE5, 0xA4, 0xA0, 0xE4, 0xA8, 0x9E, 0xE2, 0xAC, 0x9D, 0xE1, 0xB0, 0x9B, 0xDF, 0xB5, 0x9A, 0xDE, 
   0xB9, 0x98, 0xDD, 0xBE, 0x96, 0xDC, 0xC3, 0x94, 0xDB, 0xC8, 0x93, 0xDA, 0xCD, 0x91, 0xD9, 0xD3, 
   0x8F, 0xD8, 0xD8, 0x8D, 0xD8, 0xDE, 0x8B, 0xD7, 0xE3, 0x89, 0xD7, 0xE9, 0x87, 0xD6, 0xEF, 0x85, 
   0xD6, 0xF5, 0x83, 0xD6, 0xFB, 0x81, 0xDC, 0x00, 0x7F, 0xDC, 0x05, 0x7D, 0xDC, 0x0B, 0x7B, 0xDC, 
   0x11, 0x79, 0xDC, 0x17, 0x77, 0xDD, 0x1D, 0x76, 0xDD, 0x23, 0x74, 0xDE, 0x28, 0x72, 0xDE, 0x2E, 
   0x70, 0xDF, 0x33, 0x6F, 0xE0, 0x39, 0x6D, 0xE1, 0x3E, 0x6C, 0xE2, 0x43, 0x6A, 0xE3, 0x48, 0x69, 
   0xE4, 0x4D, 0x67, 0xE5, 0x51, 0x66, 0xE6, 0x55, 0x64, 0xE8, 0x5A, 0x63, 0xE9, 0x5D, 0x62, 0xEB, 
   0x61, 0x61, 0xEC, 0x65, 0x60, 0xEE, 0x68, 0x5F, 0xEF, 0x6B, 0x5E, 0xF1, 0x6D, 0x5D, 0xF2, 0x70, 
   0x5C, 0xF4, 0x72, 0x5C, 0xF6, 0x74, 0x5B, 0xF8, 0x75, 0x5B, 0xF9, 0x77, 0x5A, 0xFB, 0x78, 0x5A, 
   0xFD, 0x78, 0x5A, 0xFF, 0x79, 0x5A, 0x00, 0x79, 0x5A, 0x01, 0x79, 0x5A, 0x03, 0x78, 0x5A, 0x05, 
   0x78, 0x5A, 0x07, 0x77, 0x5A, 0x08, 0x75, 0x5B, 0x0A, 0x74, 0x5B, 0x0C, 0x72, 0x5C, 0x0E, 0x70, 
   0x5C, 0x0F, 0x6D, 0x5D, 0x11, 0x6B, 0x5E, 0x12, 0x68, 0x5F, 0x14, 0x65, 0x60, 0x15, 0x61, 0x61, 
   0x17, 0x5D, 0x62, 0x18, 0x5A, 0x63, 0x1A, 0x55, 0x64, 0x1B, 0x51, 0x66, 0x1C, 0x4D, 0x67, 0x1D, 
   0x48, 0x69, 0x1E, 0x43, 0x6A, 0x1F, 0x3E, 0x6C, 0x20, 0x39, 0x6D, 0x21, 0x33, 0x6F, 0x22, 0x2E, 
   0x70, 0x22, 0x28, 0x72, 0x23, 0x23, 0x74, 0x23, 0x1D, 0x76, 0x24, 0x17, 0x77, 0x24, 0x11, 0x79, 
   0x24, 0x0B, 0x7B, 0x24, 0x05, 0x7D, 0x24, 0x00, 0x7F, 0x24, 0xFB, 0x80, 0x24, 0xF5, 0x82, 0x24, 
   0xEF, 0x84, 0x24, 0xE9, 0x86, 0x23, 0xE3, 0x87, 0x23, 0xDD, 0x89, 0x22, 0xD8, 0x8B, 0x22, 0xD2, 
   0x8D, 0x21, 0xCD, 0x8E, 0x20, 0xC7, 0x90, 0x1F, 0xC2, 0x91, 0x1E, 0xBD, 0x93, 0x1D, 0xB8, 0x94, 
   0x1C, 0xB3, 0x96, 0x1B, 0xAF, 0x97, 0x1A, 0xAB, 0x99, 0x18, 0xA6, 0x9A, 0x17, 0xA3, 0x9B, 0x15, 
   0x9F, 0x9C, 0x14, 0x9B, 0x9D, 0x12, 0x98, 0x9E, 0x11, 0x95, 0x9F, 0x0F, 0x93, 0xA0, 0x0E, 0x90, 
   0xA1, 0x0C, 0x8E, 0xA1, 0x0A, 0x8C, 0xA2, 0x08, 0x8B, 0xA2, 0x07, 0x89, 0xA3, 0x05, 0x88, 0xA3, 
   0x03, 0x88, 0xA3, 0x01, 0x87, 0xA3, 0x00, 0x87, 0xA3, 0xFF, 0x87, 0xA3, 0xFD, 0x88, 0xA3, 0xFB, 
   0x88, 0xA3, 0xF9, 0x89, 0xA3, 0xF8, 0x8B, 0xA2, 0xF6, 0x8C, 0xA2, 0xF4, 0x8E, 0xA1, 0xF2, 0x90, 
   0xA1, 0xF1, 0x93, 0xA0, 0xEF, 0x95, 0x9F, 0xEE, 0x98, 0x9E, 0xEC, 0x9B, 0x9D, 0xEB, 0x9F, 0x9C, 
   0xE9, 0xA3, 0x9B, 0xE8, 0xA6, 0x9A, 0xE6, 0xAB, 0x99, 0xE5, 0xAF, 0x97, 0xE4, 0xB3, 0x96, 0xE3, 
   0xB8, 0x94, 0xE2, 0xBD, 0x93, 0xE1, 0xC2, 0x91, 0xE0, 0xC7, 0x90, 0xDF, 0xCD, 0x8E, 0xDE, 0xD2, 
   0x8D, 0xDE, 0xD8, 0x8B, 0xDD, 0xDD, 0x89, 0xDD, 0xE3, 0x87, 0xDC, 0xE9, 0x86, 0xDC, 0xEF, 0x84, 
   0xDC, 0xF5, 0x82, 0xDC, 0xFB, 0x80, 0xE2, 0x00, 0x7F, 0xE2, 0x06, 0x7D, 0xE2, 0x0C, 0x7B, 0xE2, 
   0x12, 0x7A, 0xE2, 0x18, 0x78, 0xE3, 0x1D, 0x77, 0xE3, 0x23, 0x76, 0xE3, 0x29, 0x74, 0xE4, 0x2F, 
   0x73, 0xE5, 0x34, 0x71, 0xE5, 0x3A, 0x70, 0xE6, 0x3F, 0x6F, 0xE7, 0x44, 0x6D, 0xE8, 0x49, 0x6C, 
   0xE9, 0x4E, 0x6B, 0xEA, 0x52, 0x6A, 0xEB, 0x57, 0x69, 0xEC, 0x5B, 0x68, 0xED, 0x5F, 0x67, 0xEE, 
   0x62, 0x66, 0xEF, 0x66, 0x65, 0xF1, 0x69, 0x64, 0xF2, 0x6C, 0x63, 0xF3, 0x6F, 0x63, 0xF5, 0x71, 
   0x62, 0xF6, 0x73, 0x61, 0xF8, 0x75, 0x61, 0xF9, 0x77, 0x61, 0xFA, 0x78, 0x60, 0xFC, 0x79, 0x60, 
   0xFD, 0x7A, 0x60, 0xFF, 0x7B, 0x60, 0x00, 0x7B, 0x60, 0x01, 0x7B, 0x60, 0x03, 0x7A, 0x60, 0x04, 
   0x79, 0x60, 0x06, 0x78, 0x60, 0x07, 0x77, 0x61, 0x08, 0x75, 0x61, 0x0A, 0x73, 0x61, 0x0B, 0x71, 
   0x62, 0x0D, 0x6F, 0x63, 0x0E, 0x6C, 0x63, 0x0F, 0x69, 0x64, 0x11, 0x66, 0x65, 0x12, 0x62, 0x66, 
   0x13, 0x5F, 0x67, 0x14, 0x5B, 0x68, 0x15, 0x57, 0x69, 0x16, 0x52, 0x6A, 0x17, 0x4E, 0x6B, 0x18, 
   0x49, 0x6C, 0x19, 0x44, 0x6D, 0x1A, 0x3F, 0x6F, 0x1B, 0x3A, 0x70, 0x1B, 0x34, 0x71, 0x1C, 0x2F, 
   0x73, 0x1D, 0x29, 0x74, 0x1D, 0x23, 0x76, 0x1D, 0x1D, 0x77, 0x1E, 0x18, 0x78, 0x1E, 0x12, 0x7A, 
   0x1E, 0x0C, 0x7B, 0x1E, 0x06, 0x7D, 0x1E, 0x00, 0x7F, 0x1E, 0xFA, 0x80, 0x1E, 0xF4, 0x82, 0x1E, 
   0xEE, 0x83, 0x1E, 0xE8, 0x85, 0x1D, 0xE3, 0x86, 0x1D, 0xDD, 0x87, 0x1D, 0xD7, 0x89, 0x1C, 0xD1, 
   0x8A, 0x1B, 0xCC, 0x8C, 0x1B, 0xC6, 0x8D, 0x1A, 0xC1, 0x8E, 0x19, 0xBC, 0x90, 0x18, 0xB7, 0x91, 
   0x17, 0xB2, 0x92, 0x16, 0xAE, 0x93, 0x15, 0xA9, 0x94, 0x14, 0xA5, 0x95, 0x13, 0xA1, 0x96, 0x12, 
   0x9E, 0x97, 0x11, 0x9A, 0x98, 0x0F, 0x97, 0x99, 0x0E, 0x94, 0x9A, 0x0D, 0x91, 0x9A, 0x0B, 0x8F, 
   0x9B, 0x0A, 0x8D, 0x9C, 0x08, 0x8B, 0x9C, 0x07, 0x89, 0x9C, 0x06, 0x88, 0x9D, 0x04, 0x87, 0x9D, 
   0x03, 0x86, 0x9D, 0x01, 0x85, 0x9D, 0x00, 0x85, 0x9D, 0xFF, 0x85, 0x9D, 0xFD, 0x86, 0x9D, 0xFC, 
   0x87, 0x9D, 0xFA, 0x88, 0x9D, 0xF9, 0x89, 0x9C, 0xF8, 0x8B, 0x9C, 0xF6, 0x8D, 0x9C, 0xF5, 0x8F, 
   0x9B, 0xF3, 0x91, 0x9A, 0xF2, 0x94, 0x9A, 0xF1, 0x97, 0x99, 0xEF, 0x9A, 0x98, 0xEE, 0x9E, 0x97, 
   0xED, 0xA1, 0x96, 0xEC, 0xA5, 0x95, 0xEB, 0xA9, 0x94, 0xEA, 0xAE, 0x93, 0xE9, 0xB2, 0x92, 0xE8, 
   0xB7, 0x91, 0xE7, 0xBC, 0x90, 0xE6, 0xC1, 0x8E, 0xE5, 0xC6, 0x8D, 0xE5, 0xCC, 0x8C, 0xE4, 0xD1, 
   0x8A, 0xE3, 0xD7, 0x89, 0xE3, 0xDD, 0x87, 0xE3, 0xE3, 0x86, 0xE2, 0xE8, 0x85, 0xE2, 0xEE, 0x83, 
   0xE2, 0xF4, 0x82, 0xE2, 0xFA, 0x80, 0xE8, 0x00, 0x7F, 0xE8, 0x06, 0x7D, 0xE8, 0x0C, 0x7C, 0xE8, 
   0x12, 0x7B, 0xE8, 0x18, 0x7A, 0xE8, 0x1E, 0x78, 0xE9, 0x24, 0x77, 0xE9, 0x29, 0x76, 0xEA, 0x2F, 
   0x75, 0xEA, 0x35, 0x74, 0xEB, 0x3A, 0x73, 0xEB, 0x40, 0x72, 0xEC, 0x45, 0x71, 0xED, 0x4A, 0x70, 
   0xED, 0x4F, 0x6F, 0xEE, 0x53, 0x6E, 0xEF, 0x58, 0x6D, 0xF0, 0x5C, 0x6C, 0xF1, 0x60, 0x6B, 0xF2, 
   0x64, 0x6B, 0xF3, 0x67, 0x6A, 0xF4, 0x6A, 0x69, 0xF5, 0x6D, 0x69, 0xF6, 0x70, 0x68, 0xF7, 0x73, 
   0x68, 0xF8, 0x75, 0x67, 0xF9, 0x77, 0x67, 0xFA, 0x78, 0x66, 0xFC, 0x7A, 0x66, 0xFD, 0x7B, 0x66, 
   0xFE, 0x7B, 0x66, 0xFF, 0x7C, 0x66, 0x00, 0x7C, 0x66, 0x01, 0x7C, 0x66, 0x02, 0x7B, 0x66, 0x03, 
   0x7B, 0x66, 0x04, 0x7A, 0x66, 0x06, 0x78, 0x66, 0x07, 0x77, 0x67, 0x08, 0x75, 0x67, 0x09, 0x73, 
   0x68, 0x0A, 0x70, 0x68, 0x0B, 0x6D, 0x69, 0x0C, 0x6A, 0x69, 0x0D, 0x67, 0x6A, 0x0E, 0x64, 0x6B, 
   0x0F, 0x60, 0x6B, 0x10, 0x5C, 0x6C, 0x11, 0x58, 0x6D, 0x12, 0x53, 0x6E, 0x13, 0x4F, 0x6F, 0x13, 
   0x4A, 0x70, 0x14, 0x45, 0x71, 0x15, 0x40, 0x72, 0x15, 0x3A, 0x73, 0x16, 0x35, 0x74, 0x16, 0x2F, 
   0x75, 0x17, 0x29, 0x76, 0x17, 0x24, 0x77, 0x18, 0x1E, 0x78, 0x18, 0x18, 0x7A, 0x18, 0x12, 0x7B, 
   0x18, 0x0C, 0x7C, 0x18, 0x06, 0x7D, 0x18, 0x00, 0x7F, 0x18, 0xFA, 0x80, 0x18, 0xF4, 0x81, 0x18, 
   0xEE, 0x82, 0x18, 0xE8, 0x83, 0x18, 0xE2, 0x85, 0x17, 0xDC, 0x86, 0x17, 0xD7, 0x87, 0x16, 0xD1, 
   0x88, 0x16, 0xCB, 0x89, 0x15, 0xC6, 0x8A, 0x15, 0xC0, 0x8B, 0x14, 0xBB, 0x8C, 0x13, 0xB6, 0x8D, 
   0x13, 0xB1, 0x8E, 0x12, 0xAD, 0x8F, 0x11, 0xA8, 0x90, 0x10, 0xA4, 0x91, 0x0F, 0xA0, 0x92, 0x0E, 
   0x9C, 0x92, 0x0D, 0x99, 0x93, 0x0C, 0x96, 0x94, 0x0B, 0x93, 0x94, 0x0A, 0x90, 0x95, 0x09, 0x8D, 
   0x95, 0x08, 0x8B, 0x96, 0x07, 0x89, 0x96, 0x06, 0x88, 0x97, 0x04, 0x86, 0x97, 0x03, 0x85, 0x97, 
   0x02, 0x85, 0x97, 0x01, 0x84, 0x97, 0x00, 0x84, 0x97, 0xFF, 0x84, 0x97, 0xFE, 0x85, 0x97, 0xFD, 
   0x85, 0x97, 0xFC, 0x86, 0x97, 0xFA, 0x88, 0x97, 0xF9, 0x89, 0x96, 0xF8, 0x8B, 0x96, 0xF7, 0x8D, 
   0x95, 0xF6, 0x90, 0x95, 0xF5, 0x93, 0x94, 0xF4, 0x96, 0x94, 0xF3, 0x99, 0x93, 0xF2, 0x9C, 0x92, 
   0xF1, 0xA0, 0x92, 0xF0, 0xA4, 0x91, 0xEF, 0xA8, 0x90, 0xEE, 0xAD, 0x8F, 0xED, 0xB1, 0x8E, 0xED, 
   0xB6, 0x8D, 0xEC, 0xBB, 0x8C, 0xEB, 0xC0, 0x8B, 0xEB, 0xC6, 0x8A, 0xEA, 0xCB, 0x89, 0xEA, 0xD1, 
   0x88, 0xE9, 0xD7, 0x87, 0xE9, 0xDC, 0x86, 0xE8, 0xE2, 0x85, 0xE8, 0xE8, 0x83, 0xE8, 0xEE, 0x82, 
   0xE8, 0xF4, 0x81, 0xE8, 0xFA, 0x80, 0xEE, 0x00, 0x7F, 0xEE, 0x06, 0x7E, 0xEE, 0x0C, 0x7D, 0xEE, 
   0x12, 0x7C, 0xEE, 0x18, 0x7B, 0xEE, 0x1E, 0x7A, 0xEF, 0x24, 0x79, 0xEF, 0x2A, 0x78, 0xEF, 0x30, 
   0x77, 0xF0, 0x35, 0x77, 0xF0, 0x3B, 0x76, 0xF1, 0x40, 0x75, 0xF1, 0x45, 0x74, 0xF2, 0x4A, 0x73, 
   0xF2, 0x4F, 0x73, 0xF3, 0x54, 0x72, 0xF3, 0x58, 0x71, 0xF4, 0x5D, 0x71, 0xF5, 0x61, 0x70, 0xF5, 
   0x64, 0x70, 0xF6, 0x68, 0x6F, 0xF7, 0x6B, 0x6F, 0xF8, 0x6E, 0x6E, 0xF9, 0x71, 0x6E, 0xF9, 0x74, 
   0x6D, 0xFA, 0x76, 0x6D, 0xFB, 0x78, 0x6D, 0xFC, 0x79, 0x6C, 0xFD, 0x7B, 0x6C, 0xFE, 0x7C, 0x6C, 
   0xFF, 0x7D, 0x6C, 0x00, 0x7D, 0x6C, 0x00, 0x7D, 0x6C, 0x00, 0x7D, 0x6C, 0x01, 0x7D, 0x6C, 0x02, 
   0x7C, 0x6C, 0x03, 0x7B, 0x6C, 0x04, 0x79, 0x6C, 0x05, 0x78, 0x6D, 0x06, 0x76, 0x6D, 0x07, 0x74, 
   0x6D, 0x07, 0x71, 0x6E, 0x08, 0x6E, 0x6E, 0x09, 0x6B, 0x6F, 0x0A, 0x68, 0x6F, 0x0B, 0x64, 0x70, 
   0x0B, 0x61, 0x70, 0x0C, 0x5D, 0x71, 0x0D, 0x58, 0x71, 0x0D, 0x54, 0x72, 0x0E, 0x4F, 0x73, 0x0E, 
   0x4A, 0x73, 0x0F, 0x45, 0x74, 0x0F, 0x40, 0x75, 0x10, 0x3B, 0x76, 0x10, 0x35, 0x77, 0x11, 0x30, 
   0x77, 0x11, 0x2A, 0x78, 0x11, 0x24, 0x79, 0x12, 0x1E, 0x7A, 0x12, 0x18, 0x7B, 0x12, 0x12, 0x7C, 
   0x12, 0x0C, 0x7D, 0x12, 0x06, 0x7E, 0x12, 0x00, 0x7F, 0x12, 0xFA, 0x7F, 0x12, 0xF4, 0x80, 0x12, 
   0xEE, 0x81, 0x12, 0xE8, 0x82, 0x12, 0xE2, 0x83, 0x11, 0xDC, 0x84, 0x11, 0xD6, 0x85, 0x11, 0xD0, 
   0x86, 0x10, 0xCB, 0x86, 0x10, 0xC5, 0x87, 0x0F, 0xC0, 0x88, 0x0F, 0xBB, 0x89, 0x0E, 0xB6, 0x8A, 
   0x0E, 0xB1, 0x8A, 0x0D, 0xAC, 0x8B, 0x0D, 0xA8, 0x8C, 0x0C, 0xA3, 0x8C, 0x0B, 0x9F, 0x8D, 0x0B, 
   0x9C, 0x8D, 0x0A, 0x98, 0x8E, 0x09, 0x95, 0x8E, 0x08, 0x92, 0x8F, 0x07, 0x8F, 0x8F, 0x07, 0x8C, 
   0x90, 0x06, 0x8A, 0x90, 0x05, 0x88, 0x90, 0x04, 0x87, 0x91, 0x03, 0x85, 0x91, 0x02, 0x84, 0x91, 
   0x01, 0x83, 0x91, 0x00, 0x83, 0x91, 0x00, 0x83, 0x91, 0x00, 0x83, 0x91, 0xFF, 0x83, 0x91, 0xFE, 
   0x84, 0x91, 0xFD, 0x85, 0x91, 0xFC, 0x87, 0x91, 0xFB, 0x88, 0x90, 0xFA, 0x8A, 0x90, 0xF9, 0x8C, 
   0x90, 0xF9, 0x8F, 0x8F, 0xF8, 0x92, 0x8F, 0xF7, 0x95, 0x8E, 0xF6, 0x98, 0x8E, 0xF5, 0x9C, 0x8D, 
   0xF5, 0x9F, 0x8D, 0xF4, 0xA3, 0x8C, 0xF3, 0xA8, 0x8C, 0xF3, 0xAC, 0x8B, 0xF2, 0xB1, 0x8A, 0xF2, 
   0xB6, 0x8A, 0xF1, 0xBB, 0x89, 0xF1, 0xC0, 0x88, 0xF0, 0xC5, 0x87, 0xF0, 0xCB, 0x86, 0xEF, 0xD0, 
   0x86, 0xEF, 0xD6, 0x85, 0xEF, 0xDC, 0x84, 0xEE, 0xE2, 0x83, 0xEE, 0xE8, 0x82, 0xEE, 0xEE, 0x81, 
   0xEE, 0xF4, 0x80, 0xEE, 0xFA, 0x7F, 0xF4, 0x00, 0x7F, 0xF4, 0x06, 0x7E, 0xF4, 0x0C, 0x7D, 0xF4, 
   0x12, 0x7D, 0xF4, 0x18, 0x7C, 0xF4, 0x1E, 0x7B, 0xF5, 0x24, 0x7B, 0xF5, 0x2A, 0x7A, 0xF5, 0x30, 
   0x7A, 0xF5, 0x36, 0x79, 0xF6, 0x3B, 0x79, 0xF6, 0x40, 0x78, 0xF6, 0x46, 0x78, 0xF7, 0x4B, 0x77, 
   0xF7, 0x50, 0x77, 0xF7, 0x54, 0x76, 0xF8, 0x59, 0x76, 0xF8, 0x5D, 0x75, 0xF9, 0x61, 0x75, 0xF9, 
   0x65, 0x75, 0xFA, 0x69, 0x74, 0xFA, 0x6C, 0x74, 0xFB, 0x6F, 0x74, 0xFB, 0x72, 0x73, 0xFC, 0x74, 
   0x73, 0xFC, 0x77, 0x73, 0xFD, 0x78, 0x73, 0xFD, 0x7A, 0x72, 0xFE, 0x7B, 0x72, 0xFF, 0x7D, 0x72, 
   0xFF, 0x7D, 0x72, 0x00, 0x7E, 0x72, 0x00, 0x7E, 0x72, 0x00, 0x7E, 0x72, 0x01, 0x7D, 0x72, 0x01, 
   0x7D, 0x72, 0x02, 0x7B, 0x72, 0x03, 0x7A, 0x72, 0x03, 0x78, 0x73, 0x04, 0x77, 0x73, 0x04, 0x74, 
   0x73, 0x05, 0x72, 0x73, 0x05, 0x6F, 0x74, 0x06, 0x6C, 0x74, 0x06, 0x69, 0x74, 0x07, 0x65, 0x75, 
   0x07, 0x61, 0x75, 0x08, 0x5D, 0x75, 0x08, 0x59, 0x76, 0x09, 0x54, 0x76, 0x09, 0x50, 0x77, 0x09, 
   0x4B, 0x77, 0x0A, 0x46, 0x78, 0x0A, 0x40, 0x78, 0x0A, 0x3B, 0x79, 0x0B, 0x36, 0x79, 0x0B, 0x30, 
   0x7A, 0x0B, 0x2A, 0x7A, 0x0B, 0x24, 0x7B, 0x0C, 0x1E, 0x7B, 0x0C, 0x18, 0x7C, 0x0C, 0x12, 0x7D, 
   0x0C, 0x0C, 0x7D, 0x0C, 0x06, 0x7E, 0x0C, 0x00, 0x7F, 0x0C, 0xFA, 0x7F, 0x0C, 0xF4, 0x80, 0x0C, 
   0xEE, 0x80, 0x0C, 0xE8, 0x81, 0x0C, 0xE2, 0x82, 0x0B, 0xDC, 0x82, 0x0B, 0xD6, 0x83, 0x0B, 0xD0, 
   0x83, 0x0B, 0xCA, 0x84, 0x0A, 0xC5, 0x84, 0x0A, 0xC0, 0x85, 0x0A, 0xBA, 0x85, 0x09, 0xB5, 0x86, 
   0x09, 0xB0, 0x86, 0x09, 0xAC, 0x87, 0x08, 0xA7, 0x87, 0x08, 0xA3, 0x88, 0x07, 0x9F, 0x88, 0x07, 
   0x9B, 0x88, 0x06, 0x97, 0x89, 0x06, 0x94, 0x89, 0x05, 0x91, 0x89, 0x05, 0x8E, 0x8A, 0x04, 0x8C, 
   0x8A, 0x04, 0x89, 0x8A, 0x03, 0x88, 0x8A, 0x03, 0x86, 0x8B, 0x02, 0x85, 0x8B, 0x01, 0x83, 0x8B, 
   0x01, 0x83, 0x8B, 0x00, 0x82, 0x8B, 0x00, 0x82, 0x8B, 0x00, 0x82, 0x8B, 0xFF, 0x83, 0x8B, 0xFF, 
   0x83, 0x8B, 0xFE, 0x85, 0x8B, 0xFD, 0x86, 0x8B, 0xFD, 0x88, 0x8A, 0xFC, 0x89, 0x8A, 0xFC, 0x8C, 
   0x8A, 0xFB, 0x8E, 0x8A, 0xFB, 0x91, 0x89, 0xFA, 0x94, 0x89, 0xFA, 0x97, 0x89, 0xF9, 0x9B, 0x88, 
   0xF9, 0x9F, 0x88, 0xF8, 0xA3, 0x88, 0xF8, 0xA7, 0x87, 0xF7, 0xAC, 0x87, 0xF7, 0xB0, 0x86, 0xF7, 
   0xB5, 0x86, 0xF6, 0xBA, 0x85, 0xF6, 0xC0, 0x85, 0xF6, 0xC5, 0x84, 0xF5, 0xCA, 0x84, 0xF5, 0xD0, 
   0x83, 0xF5, 0xD6, 0x83, 0xF5, 0xDC, 0x82, 0xF4, 0xE2, 0x82, 0xF4, 0xE8, 0x81, 0xF4, 0xEE, 0x80, 
   0xF4, 0xF4, 0x80, 0xF4, 0xFA, 0x7F, 0xFA, 0x00, 0x7F, 0xFA, 0x06, 0x7E, 0xFA, 0x0C, 0x7E, 0xFA, 
   0x12, 0x7E, 0xFA, 0x18, 0x7D, 0xFA, 0x1E, 0x7D, 0xFB, 0x24, 0x7D, 0xFB, 0x2A, 0x7C, 0xFB, 0x30, 
   0x7C, 0xFB, 0x36, 0x7C, 0xFB, 0x3B, 0x7C, 0xFB, 0x41, 0x7B, 0xFB, 0x46, 0x7B, 0xFB, 0x4B, 0x7B, 
   0xFC, 0x50, 0x7B, 0xFC, 0x55, 0x7A, 0xFC, 0x59, 0x7A, 0xFC, 0x5D, 0x7A, 0xFD, 0x62, 0x7A, 0xFD, 
   0x65, 0x79, 0xFD, 0x69, 0x79, 0xFD, 0x6C, 0x79, 0xFE, 0x6F, 0x79, 0xFE, 0x72, 0x79, 0xFE, 0x75, 
   0x79, 0xFE, 0x77, 0x79, 0xFF, 0x79, 0x79, 0xFF, 0x7B, 0x78, 0xFF, 0x7C, 0x78, 0x00, 0x7D, 0x78, 
   0x00, 0x7E, 0x78, 0x00, 0x7E, 0x78, 0x00, 0x7E, 0x78, 0x00, 0x7E, 0x78, 0x00, 0x7E, 0x78, 0x00, 
   0x7D, 0x78, 0x01, 0x7C, 0x78, 0x01, 0x7B, 0x78, 0x01, 0x79, 0x79, 0x02, 0x77, 0x79, 0x02, 0x75, 
   0x79, 0x02, 0x72, 0x79, 0x02, 0x6F, 0x79, 0x03, 0x6C, 0x79, 0x03, 0x69, 0x79, 0x03, 0x65, 0x79, 
   0x03, 0x62, 0x7A, 0x04, 0x5D, 0x7A, 0x04, 0x59, 0x7A, 0x04, 0x55, 0x7A, 0x04, 0x50, 0x7B, 0x05, 
   0x4B, 0x7B, 0x05, 0x46, 0x7B, 0x05, 0x41, 0x7B, 0x05, 0x3B, 0x7C, 0x05, 0x36, 0x7C, 0x05, 0x30, 
   0x7C, 0x05, 0x2A, 0x7C, 0x05, 0x24, 0x7D, 0x06, 0x1E, 0x7D, 0x06, 0x18, 0x7D, 0x06, 0x12, 0x7E, 
   0x06, 0x0C, 0x7E, 0x06, 0x06, 0x7E, 0x06, 0x00, 0x7F, 0x06, 0xFA, 0x7F, 0x06, 0xF4, 0x7F, 0x06, 
   0xEE, 0x7F, 0x06, 0xE8, 0x80, 0x06, 0xE2, 0x80, 0x05, 0xDC, 0x80, 0x05, 0xD6, 0x81, 0x05, 0xD0, 
   0x81, 0x05, 0xCA, 0x81, 0x05, 0xC5, 0x81, 0x05, 0xBF, 0x82, 0x05, 0xBA, 0x82, 0x05, 0xB5, 0x82, 
   0x04, 0xB0, 0x82, 0x04, 0xAB, 0x83, 0x04, 0xA7, 0x83, 0x04, 0xA3, 0x83, 0x03, 0x9E, 0x83, 0x03, 
   0x9B, 0x84, 0x03, 0x97, 0x84, 0x03, 0x94, 0x84, 0x02, 0x91, 0x84, 0x02, 0x8E, 0x84, 0x02, 0x8B, 
   0x84, 0x02, 0x89, 0x84, 0x01, 0x87, 0x84, 0x01, 0x85, 0x85, 0x01, 0x84, 0x85, 0x00, 0x83, 0x85, 
   0x00, 0x82, 0x85, 0x00, 0x82, 0x85, 0x00, 0x82, 0x85, 0x00, 0x82, 0x85, 0x00, 0x82, 0x85, 0x00, 
   0x83, 0x85, 0xFF, 0x84, 0x85, 0xFF, 0x85, 0x85, 0xFF, 0x87, 0x84, 0xFE, 0x89, 0x84, 0xFE, 0x8B, 
   0x84, 0xFE, 0x8E, 0x84, 0xFE, 0x91, 0x84, 0xFD, 0x94, 0x84, 0xFD, 0x97, 0x84, 0xFD, 0x9B, 0x84, 
   0xFD, 0x9E, 0x83, 0xFC, 0xA3, 0x83, 0xFC, 0xA7, 0x83, 0xFC, 0xAB, 0x83, 0xFC, 0xB0, 0x82, 0xFB, 
   0xB5, 0x82, 0xFB, 0xBA, 0x82, 0xFB, 0xBF, 0x82, 0xFB, 0xC5, 0x81, 0xFB, 0xCA, 0x81, 0xFB, 0xD0, 
   0x81, 0xFB, 0xD6, 0x81, 0xFB, 0xDC, 0x80, 0xFA, 0xE2, 0x80, 0xFA, 0xE8, 0x80, 0xFA, 0xEE, 0x7F, 
   0xFA, 0xF4, 0x7F, 0xFA, 0xFA, 0x7F, 
};

static RESOURCEDATA g_rd_bem3(TEXT(MODULE_STRING), TEXT("bem3.bmp"), g_bem3, sizeof(g_bem3));

extern "C" LPVOID PREPEND_MODULE(_bem3) = (LPVOID)&g_rd_bem3;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\media\dp3.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    dp3.bmp.cpp

Description

    Data file for the resource dp3.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_dp3[] = {

   0x42, 0x4D, 0x36, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
   0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
   0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
   0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
   0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
   0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
   0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x8F, 
   0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
   0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
   0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
   0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
   0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
   0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
   0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
   0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
   0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 
   0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 
   0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 
   0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 
   0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 
   0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 
   0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 
   0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 
   0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
   0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
   0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
   0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
   0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 
   0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 
   0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 
   0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 
   0xB7, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 
   0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 
   0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 
   0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 
   0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 
   0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 
   0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xCF, 0xCF, 0xCF, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 
   0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 
   0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xCF, 0xCF, 0xCF, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xCF, 0xCF, 0xCF, 0xD7, 0xD7, 0xD7, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 
   0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 
   0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xD7, 0xD7, 0xD7, 0xCF, 0xCF, 0xCF, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xCF, 0xCF, 0xCF, 0xD7, 0xD7, 0xD7, 0xDF, 0xDF, 0xDF, 0xE7, 0xE7, 0xE7, 
   0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 
   0xE7, 0xE7, 0xDF, 0xDF, 0xDF, 0xD7, 0xD7, 0xD7, 0xCF, 0xCF, 0xCF, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xCF, 0xCF, 0xCF, 0xD7, 0xD7, 0xD7, 0xDF, 0xDF, 0xDF, 0xE7, 0xE7, 0xE7, 
   0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xE7, 
   0xE7, 0xE7, 0xDF, 0xDF, 0xDF, 0xD7, 0xD7, 0xD7, 0xCF, 0xCF, 0xCF, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xCF, 0xCF, 0xCF, 0xD7, 0xD7, 0xD7, 0xDF, 0xDF, 0xDF, 0xE7, 0xE7, 0xE7, 
   0xEF, 0xEF, 0xEF, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xEF, 0xEF, 0xEF, 0xE7, 
   0xE7, 0xE7, 0xDF, 0xDF, 0xDF, 0xD7, 0xD7, 0xD7, 0xCF, 0xCF, 0xCF, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xCF, 0xCF, 0xCF, 0xD7, 0xD7, 0xD7, 0xDF, 0xDF, 0xDF, 0xE7, 0xE7, 0xE7, 
   0xEF, 0xEF, 0xEF, 0xF7, 0xF7, 0xF7, 0xFF, 0xFF, 0xFF, 0xF7, 0xF7, 0xF7, 0xEF, 0xEF, 0xEF, 0xE7, 
   0xE7, 0xE7, 0xDF, 0xDF, 0xDF, 0xD7, 0xD7, 0xD7, 0xCF, 0xCF, 0xCF, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xCF, 0xCF, 0xCF, 0xD7, 0xD7, 0xD7, 0xDF, 0xDF, 0xDF, 0xE7, 0xE7, 0xE7, 
   0xEF, 0xEF, 0xEF, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xEF, 0xEF, 0xEF, 0xE7, 
   0xE7, 0xE7, 0xDF, 0xDF, 0xDF, 0xD7, 0xD7, 0xD7, 0xCF, 0xCF, 0xCF, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xCF, 0xCF, 0xCF, 0xD7, 0xD7, 0xD7, 0xDF, 0xDF, 0xDF, 0xE7, 0xE7, 0xE7, 
   0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xE7, 
   0xE7, 0xE7, 0xDF, 0xDF, 0xDF, 0xD7, 0xD7, 0xD7, 0xCF, 0xCF, 0xCF, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xCF, 0xCF, 0xCF, 0xD7, 0xD7, 0xD7, 0xDF, 0xDF, 0xDF, 0xE7, 0xE7, 0xE7, 
   0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 
   0xE7, 0xE7, 0xDF, 0xDF, 0xDF, 0xD7, 0xD7, 0xD7, 0xCF, 0xCF, 0xCF, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xCF, 0xCF, 0xCF, 0xD7, 0xD7, 0xD7, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 
   0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 
   0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xD7, 0xD7, 0xD7, 0xCF, 0xCF, 0xCF, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xCF, 0xCF, 0xCF, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 
   0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 
   0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xCF, 0xCF, 0xCF, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 
   0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 
   0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 
   0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 
   0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xBF, 0xBF, 
   0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 
   0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 
   0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 
   0xBF, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 
   0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 
   0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 
   0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 
   0xB7, 0xB7, 0xB7, 0xB7, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
   0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
   0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
   0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
   0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 
   0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 
   0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 
   0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 
   0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 
   0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 
   0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 
   0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 
   0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x97, 
   0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
   0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
   0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
   0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
   0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x8F, 
   0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
   0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
   0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
   0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
   0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
   0x8F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
   0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
   0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
   0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
   0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
   0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
   0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
   0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
   0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
   0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
};

static RESOURCEDATA g_rd_dp3(TEXT(MODULE_STRING), TEXT("dp3.bmp"), g_dp3, sizeof(g_dp3));

extern "C" LPVOID PREPEND_MODULE(_dp3) = (LPVOID)&g_rd_dp3;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\media\checker2.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    checker2.bmp.cpp

Description

    Data file for the resource checker2.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_checker2[] = {

   0x42, 0x4D, 0x36, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

static RESOURCEDATA g_rd_checker2(TEXT(MODULE_STRING), TEXT("checker2.bmp"), g_checker2, sizeof(g_checker2));

extern "C" LPVOID PREPEND_MODULE(_checker2) = (LPVOID)&g_rd_checker2;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\media\dxlogo.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    dxlogo.bmp.cpp

Description

    Data file for the resource dxlogo.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_dxlogo[] = {

   0x42, 0x4D, 0x36, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 
   0x00, 0x00, 0x05, 0x00, 0x02, 0x06, 0x00, 0x03, 0x08, 0x00, 0x05, 0x0C, 0x00, 0x06, 0x0D, 0x00, 
   0x08, 0x0B, 0x00, 0x09, 0x0D, 0x00, 0x09, 0x10, 0x00, 0x0B, 0x11, 0x01, 0x0D, 0x10, 0x00, 0x0D, 
   0x0F, 0x00, 0x0D, 0x0E, 0x01, 0x0C, 0x10, 0x00, 0x0C, 0x10, 0x00, 0x0B, 0x10, 0x00, 0x0B, 0x0F, 
   0x00, 0x0C, 0x0F, 0x00, 0x0C, 0x0E, 0x00, 0x0B, 0x0D, 0x00, 0x0A, 0x0C, 0x00, 0x08, 0x09, 0x00, 
   0x06, 0x08, 0x00, 0x05, 0x06, 0x00, 0x03, 0x05, 0x00, 0x02, 0x03, 0x00, 0x00, 0x01, 0x00, 0x01, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x06, 0x00, 0x02, 0x07, 
   0x00, 0x04, 0x09, 0x00, 0x06, 0x0C, 0x00, 0x08, 0x10, 0x00, 0x0A, 0x0E, 0x00, 0x0B, 0x0F, 0x01, 
   0x0D, 0x14, 0x00, 0x0E, 0x0E, 0x02, 0x0E, 0x0B, 0x0E, 0x1A, 0x0E, 0x19, 0x25, 0x10, 0x1B, 0x28, 
   0x0E, 0x21, 0x2C, 0x15, 0x09, 0x19, 0x15, 0x00, 0x11, 0x15, 0x00, 0x11, 0x15, 0x00, 0x11, 0x14, 
   0x00, 0x10, 0x14, 0x00, 0x10, 0x14, 0x00, 0x10, 0x13, 0x00, 0x0E, 0x11, 0x00, 0x0D, 0x0F, 0x00, 
   0x0B, 0x0E, 0x00, 0x0A, 0x0C, 0x00, 0x08, 0x09, 0x00, 0x06, 0x07, 0x00, 0x05, 0x06, 0x00, 0x02, 
   0x04, 0x00, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x01, 0x00, 0x00, 0x03, 0x00, 0x01, 0x06, 0x00, 0x02, 0x09, 0x00, 0x04, 0x0B, 0x00, 0x06, 0x0E, 
   0x00, 0x0A, 0x10, 0x00, 0x0C, 0x12, 0x00, 0x0E, 0x10, 0x01, 0x0F, 0x17, 0x00, 0x10, 0x14, 0x04, 
   0x14, 0x0F, 0x1A, 0x27, 0x12, 0x38, 0x41, 0x09, 0x4B, 0x51, 0x06, 0x57, 0x5D, 0x06, 0x62, 0x66, 
   0x07, 0x64, 0x68, 0x17, 0x1C, 0x2F, 0x1C, 0x00, 0x18, 0x1C, 0x00, 0x18, 0x1C, 0x00, 0x18, 0x1B, 
   0x00, 0x17, 0x1B, 0x00, 0x16, 0x1A, 0x00, 0x16, 0x19, 0x00, 0x14, 0x17, 0x00, 0x12, 0x15, 0x00, 
   0x10, 0x13, 0x00, 0x0F, 0x12, 0x00, 0x0E, 0x10, 0x00, 0x0C, 0x0E, 0x00, 0x0A, 0x0B, 0x00, 0x06, 
   0x09, 0x00, 0x04, 0x07, 0x00, 0x03, 0x04, 0x00, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 
   0x06, 0x00, 0x02, 0x0A, 0x00, 0x03, 0x0C, 0x00, 0x06, 0x0F, 0x00, 0x0A, 0x11, 0x00, 0x0E, 0x14, 
   0x00, 0x0F, 0x16, 0x00, 0x11, 0x18, 0x00, 0x13, 0x14, 0x02, 0x15, 0x13, 0x20, 0x2F, 0x0D, 0x42, 
   0x4D, 0x07, 0x52, 0x59, 0x04, 0x60, 0x65, 0x03, 0x6A, 0x6E, 0x06, 0x6C, 0x71, 0x03, 0x6B, 0x71, 
   0x05, 0x6A, 0x71, 0x16, 0x26, 0x3B, 0x21, 0x00, 0x1D, 0x21, 0x00, 0x1D, 0x21, 0x00, 0x1D, 0x21, 
   0x00, 0x1C, 0x21, 0x00, 0x1B, 0x20, 0x00, 0x1B, 0x1F, 0x00, 0x19, 0x1D, 0x00, 0x17, 0x1C, 0x00, 
   0x16, 0x1A, 0x00, 0x14, 0x18, 0x00, 0x13, 0x16, 0x00, 0x11, 0x14, 0x00, 0x0F, 0x11, 0x00, 0x0C, 
   0x0F, 0x00, 0x0B, 0x0D, 0x00, 0x09, 0x0A, 0x00, 0x04, 0x07, 0x00, 0x03, 0x03, 0x00, 0x02, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x03, 
   0x0C, 0x00, 0x06, 0x0F, 0x00, 0x09, 0x10, 0x00, 0x0B, 0x15, 0x00, 0x0F, 0x17, 0x00, 0x13, 0x19, 
   0x00, 0x15, 0x18, 0x00, 0x16, 0x16, 0x07, 0x1D, 0x11, 0x38, 0x44, 0x09, 0x53, 0x5A, 0x00, 0x5D, 
   0x61, 0x08, 0x6C, 0x71, 0x05, 0x73, 0x76, 0x01, 0x74, 0x77, 0x03, 0x75, 0x7B, 0x0A, 0x76, 0x7D, 
   0x03, 0x73, 0x78, 0x19, 0x30, 0x46, 0x29, 0x00, 0x23, 0x28, 0x00, 0x23, 0x28, 0x00, 0x23, 0x27, 
   0x00, 0x21, 0x26, 0x00, 0x21, 0x22, 0x00, 0x1F, 0x25, 0x01, 0x1F, 0x22, 0x0F, 0x29, 0x1D, 0x0F, 
   0x27, 0x18, 0x0F, 0x26, 0x1B, 0x06, 0x1E, 0x19, 0x00, 0x17, 0x18, 0x00, 0x15, 0x15, 0x00, 0x11, 
   0x12, 0x00, 0x0F, 0x11, 0x00, 0x0D, 0x10, 0x00, 0x0A, 0x0C, 0x00, 0x07, 0x07, 0x00, 0x04, 0x05, 
   0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x01, 0x08, 0x01, 0x03, 0x0C, 0x00, 0x07, 
   0x0F, 0x00, 0x0B, 0x13, 0x00, 0x0E, 0x17, 0x00, 0x0F, 0x17, 0x00, 0x13, 0x19, 0x00, 0x16, 0x1C, 
   0x00, 0x18, 0x18, 0x12, 0x27, 0x10, 0x48, 0x53, 0x05, 0x5A, 0x5F, 0x05, 0x64, 0x68, 0x08, 0x74, 
   0x78, 0x03, 0x78, 0x7A, 0x04, 0x7B, 0x7D, 0x08, 0x7E, 0x82, 0x05, 0x7C, 0x81, 0x08, 0x78, 0x7E, 
   0x07, 0x75, 0x7A, 0x1A, 0x3A, 0x51, 0x2C, 0x00, 0x26, 0x2D, 0x00, 0x27, 0x2D, 0x00, 0x27, 0x2C, 
   0x00, 0x26, 0x2C, 0x00, 0x25, 0x2A, 0x01, 0x23, 0x1D, 0x0D, 0x2B, 0x18, 0x2C, 0x43, 0x17, 0x32, 
   0x46, 0x17, 0x38, 0x4B, 0x17, 0x38, 0x4B, 0x16, 0x0C, 0x23, 0x1E, 0x00, 0x19, 0x1C, 0x00, 0x15, 
   0x18, 0x00, 0x14, 0x14, 0x00, 0x11, 0x14, 0x00, 0x0E, 0x10, 0x00, 0x0B, 0x0C, 0x00, 0x07, 0x09, 
   0x00, 0x04, 0x06, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
   0x00, 0x04, 0x00, 0x01, 0x05, 0x00, 0x03, 0x09, 0x00, 0x06, 0x0D, 0x00, 0x09, 0x10, 0x00, 0x0C, 
   0x14, 0x00, 0x10, 0x19, 0x00, 0x13, 0x19, 0x00, 0x15, 0x1F, 0x00, 0x18, 0x22, 0x00, 0x19, 0x18, 
   0x1C, 0x2F, 0x0C, 0x54, 0x5C, 0x01, 0x5F, 0x64, 0x03, 0x6D, 0x6F, 0x06, 0x7B, 0x7C, 0x01, 0x7C, 
   0x7E, 0x02, 0x80, 0x82, 0x05, 0x81, 0x84, 0x05, 0x7E, 0x83, 0x05, 0x7C, 0x82, 0x09, 0x79, 0x80, 
   0x09, 0x75, 0x7C, 0x16, 0x46, 0x5B, 0x32, 0x00, 0x2D, 0x34, 0x00, 0x2D, 0x34, 0x00, 0x2D, 0x32, 
   0x00, 0x2C, 0x32, 0x00, 0x2A, 0x30, 0x00, 0x29, 0x26, 0x1A, 0x3B, 0x1D, 0x2E, 0x49, 0x1D, 0x34, 
   0x4B, 0x15, 0x3E, 0x52, 0x13, 0x45, 0x58, 0x1A, 0x31, 0x46, 0x1C, 0x05, 0x20, 0x20, 0x00, 0x1A, 
   0x1F, 0x00, 0x18, 0x19, 0x00, 0x16, 0x19, 0x00, 0x13, 0x14, 0x00, 0x10, 0x11, 0x00, 0x0D, 0x0E, 
   0x00, 0x0A, 0x0B, 0x00, 0x07, 0x06, 0x00, 0x02, 0x04, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
   0x00, 0x07, 0x00, 0x02, 0x0A, 0x00, 0x06, 0x0E, 0x00, 0x0A, 0x12, 0x00, 0x0E, 0x15, 0x00, 0x12, 
   0x1A, 0x00, 0x16, 0x1D, 0x00, 0x18, 0x1D, 0x00, 0x1B, 0x24, 0x00, 0x1C, 0x15, 0x16, 0x2B, 0x0B, 
   0x56, 0x5E, 0x01, 0x61, 0x65, 0x07, 0x6D, 0x71, 0x01, 0x80, 0x80, 0x01, 0x81, 0x81, 0x02, 0x84, 
   0x87, 0x03, 0x84, 0x88, 0x05, 0x82, 0x86, 0x07, 0x7F, 0x85, 0x07, 0x7C, 0x83, 0x09, 0x79, 0x82, 
   0x0C, 0x75, 0x7E, 0x14, 0x52, 0x66, 0x37, 0x01, 0x32, 0x3A, 0x01, 0x33, 0x3A, 0x01, 0x33, 0x3A, 
   0x00, 0x32, 0x36, 0x01, 0x31, 0x31, 0x02, 0x2F, 0x27, 0x28, 0x4A, 0x1A, 0x33, 0x4E, 0x1A, 0x39, 
   0x51, 0x17, 0x44, 0x5A, 0x1C, 0x46, 0x5C, 0x17, 0x40, 0x54, 0x1E, 0x23, 0x3C, 0x1E, 0x02, 0x20, 
   0x24, 0x00, 0x1D, 0x20, 0x00, 0x1B, 0x1D, 0x00, 0x18, 0x19, 0x00, 0x15, 0x15, 0x00, 0x12, 0x12, 
   0x00, 0x0F, 0x0F, 0x00, 0x0B, 0x0B, 0x00, 0x06, 0x07, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x06, 0x00, 
   0x03, 0x0A, 0x00, 0x06, 0x0E, 0x00, 0x0A, 0x12, 0x00, 0x0E, 0x15, 0x00, 0x12, 0x1A, 0x00, 0x16, 
   0x1E, 0x00, 0x1A, 0x23, 0x00, 0x1C, 0x27, 0x00, 0x1F, 0x1C, 0x0E, 0x28, 0x11, 0x54, 0x5E, 0x04, 
   0x62, 0x67, 0x03, 0x6E, 0x71, 0x01, 0x82, 0x81, 0x01, 0x84, 0x85, 0x04, 0x88, 0x8B, 0x04, 0x87, 
   0x8B, 0x05, 0x85, 0x89, 0x06, 0x82, 0x87, 0x08, 0x7F, 0x86, 0x09, 0x7B, 0x85, 0x0B, 0x79, 0x83, 
   0x0C, 0x76, 0x80, 0x15, 0x5E, 0x70, 0x3C, 0x02, 0x38, 0x42, 0x00, 0x39, 0x3F, 0x00, 0x38, 0x3F, 
   0x01, 0x38, 0x3E, 0x00, 0x38, 0x34, 0x0C, 0x3B, 0x27, 0x30, 0x51, 0x22, 0x36, 0x53, 0x1F, 0x3D, 
   0x57, 0x1D, 0x48, 0x5F, 0x16, 0x48, 0x5E, 0x1A, 0x40, 0x57, 0x1C, 0x39, 0x50, 0x21, 0x17, 0x36, 
   0x28, 0x00, 0x22, 0x24, 0x00, 0x21, 0x22, 0x00, 0x1C, 0x1E, 0x00, 0x19, 0x1A, 0x00, 0x16, 0x17, 
   0x00, 0x13, 0x13, 0x00, 0x0E, 0x0F, 0x00, 0x0A, 0x0B, 0x00, 0x05, 0x07, 0x00, 0x03, 0x03, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x02, 0x0A, 0x00, 
   0x07, 0x0E, 0x00, 0x0B, 0x12, 0x00, 0x0E, 0x17, 0x00, 0x12, 0x1B, 0x00, 0x15, 0x1F, 0x00, 0x19, 
   0x20, 0x00, 0x1E, 0x24, 0x00, 0x20, 0x1D, 0x0A, 0x26, 0x14, 0x4E, 0x5B, 0x08, 0x63, 0x68, 0x01, 
   0x6E, 0x70, 0x06, 0x82, 0x82, 0x01, 0x86, 0x86, 0x02, 0x89, 0x8C, 0x04, 0x89, 0x8D, 0x05, 0x87, 
   0x8C, 0x05, 0x85, 0x89, 0x06, 0x82, 0x87, 0x09, 0x80, 0x87, 0x0A, 0x7C, 0x86, 0x0D, 0x79, 0x84, 
   0x0C, 0x77, 0x82, 0x17, 0x66, 0x76, 0x3F, 0x06, 0x3F, 0x48, 0x02, 0x3F, 0x44, 0x02, 0x3E, 0x44, 
   0x01, 0x3D, 0x44, 0x00, 0x3D, 0x35, 0x1C, 0x4A, 0x25, 0x35, 0x55, 0x25, 0x3A, 0x59, 0x1F, 0x42, 
   0x5D, 0x1D, 0x4B, 0x62, 0x1D, 0x47, 0x5F, 0x1C, 0x40, 0x59, 0x1C, 0x3A, 0x54, 0x23, 0x2F, 0x4B, 
   0x27, 0x05, 0x28, 0x2B, 0x00, 0x24, 0x27, 0x00, 0x21, 0x23, 0x00, 0x1D, 0x1E, 0x00, 0x1A, 0x1B, 
   0x00, 0x16, 0x17, 0x00, 0x12, 0x12, 0x00, 0x0E, 0x0F, 0x00, 0x0B, 0x0B, 0x00, 0x07, 0x07, 0x00, 
   0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x05, 0x00, 0x02, 0x09, 0x00, 0x06, 0x0F, 0x00, 
   0x0B, 0x13, 0x00, 0x0E, 0x17, 0x00, 0x12, 0x1C, 0x00, 0x16, 0x20, 0x00, 0x1A, 0x23, 0x00, 0x1D, 
   0x28, 0x00, 0x22, 0x24, 0x02, 0x22, 0x16, 0x41, 0x51, 0x03, 0x65, 0x6A, 0x03, 0x6D, 0x70, 0x03, 
   0x83, 0x82, 0x00, 0x88, 0x87, 0x01, 0x8B, 0x8C, 0x04, 0x8C, 0x8F, 0x04, 0x8A, 0x8E, 0x05, 0x88, 
   0x8D, 0x06, 0x85, 0x8A, 0x08, 0x83, 0x88, 0x0B, 0x80, 0x88, 0x0B, 0x7D, 0x87, 0x0F, 0x7A, 0x85, 
   0x0E, 0x77, 0x83, 0x16, 0x69, 0x79, 0x41, 0x10, 0x48, 0x4D, 0x03, 0x46, 0x4C, 0x02, 0x44, 0x4E, 
   0x01, 0x43, 0x43, 0x04, 0x42, 0x34, 0x2C, 0x57, 0x27, 0x38, 0x5B, 0x26, 0x3E, 0x5F, 0x24, 0x48, 
   0x65, 0x22, 0x4C, 0x67, 0x1F, 0x46, 0x61, 0x20, 0x3F, 0x5C, 0x22, 0x39, 0x57, 0x1F, 0x35, 0x52, 
   0x28, 0x1A, 0x3D, 0x2F, 0x00, 0x27, 0x2B, 0x00, 0x25, 0x27, 0x00, 0x21, 0x23, 0x00, 0x1E, 0x1F, 
   0x00, 0x1A, 0x1C, 0x00, 0x16, 0x17, 0x00, 0x12, 0x14, 0x00, 0x0E, 0x10, 0x00, 0x0B, 0x0B, 0x00, 
   0x07, 0x06, 0x00, 0x03, 0x03, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x03, 0x0A, 0x00, 0x07, 0x0E, 0x00, 0x0B, 0x13, 0x00, 
   0x0E, 0x17, 0x00, 0x12, 0x1B, 0x00, 0x16, 0x20, 0x00, 0x1A, 0x24, 0x00, 0x1E, 0x26, 0x00, 0x22, 
   0x2F, 0x00, 0x24, 0x1E, 0x1F, 0x39, 0x0B, 0x62, 0x69, 0x07, 0x6A, 0x6E, 0x04, 0x7E, 0x7E, 0x01, 
   0x8A, 0x88, 0x00, 0x8E, 0x8E, 0x01, 0x8E, 0x8F, 0x04, 0x8C, 0x8F, 0x05, 0x8B, 0x8F, 0x05, 0x88, 
   0x8D, 0x08, 0x86, 0x8B, 0x0A, 0x83, 0x89, 0x0C, 0x80, 0x88, 0x0D, 0x7E, 0x88, 0x11, 0x7A, 0x87, 
   0x10, 0x77, 0x84, 0x15, 0x6C, 0x7D, 0x42, 0x1A, 0x52, 0x51, 0x03, 0x4C, 0x54, 0x02, 0x4A, 0x53, 
   0x02, 0x4A, 0x44, 0x0F, 0x4C, 0x2E, 0x34, 0x5F, 0x2B, 0x3B, 0x60, 0x25, 0x41, 0x64, 0x26, 0x4C, 
   0x6C, 0x24, 0x4C, 0x69, 0x22, 0x44, 0x62, 0x23, 0x3E, 0x5E, 0x24, 0x39, 0x59, 0x22, 0x34, 0x54, 
   0x28, 0x2C, 0x4D, 0x2A, 0x06, 0x2F, 0x30, 0x00, 0x28, 0x2C, 0x00, 0x25, 0x28, 0x00, 0x22, 0x24, 
   0x00, 0x1E, 0x20, 0x00, 0x1A, 0x1C, 0x00, 0x17, 0x18, 0x00, 0x12, 0x14, 0x00, 0x0E, 0x10, 0x00, 
   0x0B, 0x0B, 0x00, 0x07, 0x06, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x02, 0x00, 0x01, 0x08, 0x00, 0x06, 0x0E, 0x00, 0x0A, 0x12, 0x00, 0x0E, 0x17, 0x00, 
   0x12, 0x1B, 0x00, 0x16, 0x1F, 0x00, 0x19, 0x25, 0x00, 0x1E, 0x28, 0x00, 0x22, 0x2D, 0x00, 0x26, 
   0x25, 0x07, 0x2A, 0x11, 0x54, 0x64, 0x04, 0x6A, 0x6D, 0x01, 0x76, 0x76, 0x02, 0x8B, 0x89, 0x02, 
   0x8D, 0x8C, 0x02, 0x91, 0x92, 0x03, 0x8E, 0x91, 0x04, 0x8C, 0x8F, 0x05, 0x8B, 0x8F, 0x06, 0x89, 
   0x8E, 0x09, 0x87, 0x8C, 0x0B, 0x84, 0x8A, 0x0E, 0x81, 0x8A, 0x0F, 0x7E, 0x89, 0x12, 0x7B, 0x88, 
   0x13, 0x78, 0x86, 0x16, 0x70, 0x80, 0x45, 0x24, 0x5B, 0x56, 0x04, 0x52, 0x5A, 0x03, 0x4F, 0x56, 
   0x03, 0x50, 0x47, 0x1E, 0x59, 0x2F, 0x39, 0x63, 0x2F, 0x3E, 0x65, 0x29, 0x47, 0x6A, 0x28, 0x50, 
   0x70, 0x26, 0x4B, 0x6C, 0x25, 0x44, 0x65, 0x26, 0x3E, 0x60, 0x24, 0x3A, 0x5C, 0x29, 0x33, 0x56, 
   0x26, 0x2E, 0x51, 0x2B, 0x17, 0x3F, 0x33, 0x00, 0x2C, 0x30, 0x00, 0x2A, 0x2B, 0x00, 0x25, 0x29, 
   0x00, 0x22, 0x25, 0x00, 0x1E, 0x20, 0x00, 0x1A, 0x1C, 0x00, 0x16, 0x18, 0x00, 0x12, 0x13, 0x00, 
   0x0E, 0x0E, 0x00, 0x0B, 0x09, 0x00, 0x07, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
   0x00, 0x00, 0x07, 0x00, 0x04, 0x0D, 0x00, 0x09, 0x11, 0x00, 0x0C, 0x15, 0x00, 0x10, 0x1B, 0x00, 
   0x15, 0x1E, 0x00, 0x19, 0x24, 0x00, 0x1D, 0x28, 0x00, 0x22, 0x2B, 0x00, 0x26, 0x2C, 0x01, 0x27, 
   0x1B, 0x34, 0x4C, 0x08, 0x68, 0x6E, 0x03, 0x70, 0x72, 0x03, 0x86, 0x85, 0x00, 0x8D, 0x8B, 0x00, 
   0x91, 0x91, 0x01, 0x90, 0x91, 0x03, 0x8F, 0x90, 0x03, 0x8D, 0x8F, 0x05, 0x8B, 0x8F, 0x08, 0x88, 
   0x8F, 0x0B, 0x87, 0x8E, 0x0C, 0x84, 0x8C, 0x0F, 0x81, 0x8C, 0x11, 0x7E, 0x8A, 0x13, 0x7B, 0x88, 
   0x16, 0x78, 0x87, 0x17, 0x72, 0x83, 0x41, 0x2E, 0x64, 0x5E, 0x04, 0x59, 0x62, 0x04, 0x57, 0x5A, 
   0x04, 0x55, 0x40, 0x2F, 0x66, 0x36, 0x3B, 0x67, 0x2E, 0x43, 0x6A, 0x2B, 0x4D, 0x70, 0x27, 0x51, 
   0x73, 0x28, 0x4A, 0x6C, 0x28, 0x44, 0x68, 0x29, 0x3F, 0x63, 0x28, 0x39, 0x5E, 0x29, 0x34, 0x59, 
   0x2C, 0x2E, 0x54, 0x2D, 0x23, 0x4C, 0x33, 0x02, 0x32, 0x34, 0x00, 0x30, 0x2F, 0x00, 0x2A, 0x2D, 
   0x00, 0x25, 0x28, 0x00, 0x22, 0x24, 0x00, 0x1E, 0x1E, 0x00, 0x1A, 0x1B, 0x00, 0x15, 0x16, 0x00, 
   0x10, 0x12, 0x00, 0x0D, 0x0E, 0x00, 0x09, 0x08, 0x00, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 
   0x00, 0x01, 0x0A, 0x00, 0x06, 0x10, 0x00, 0x0C, 0x15, 0x00, 0x10, 0x19, 0x00, 0x14, 0x1E, 0x00, 
   0x19, 0x22, 0x00, 0x1D, 0x27, 0x00, 0x21, 0x2B, 0x00, 0x26, 0x2F, 0x00, 0x2A, 0x24, 0x12, 0x35, 
   0x0C, 0x61, 0x6C, 0x02, 0x6F, 0x70, 0x02, 0x7E, 0x7D, 0x02, 0x8D, 0x8B, 0x01, 0x8F, 0x8F, 0x00, 
   0x91, 0x92, 0x02, 0x91, 0x92, 0x03, 0x90, 0x91, 0x05, 0x8F, 0x90, 0x07, 0x8C, 0x90, 0x0A, 0x89, 
   0x90, 0x0D, 0x88, 0x90, 0x0E, 0x84, 0x8D, 0x10, 0x81, 0x8D, 0x13, 0x7F, 0x8C, 0x14, 0x7C, 0x89, 
   0x18, 0x79, 0x89, 0x1B, 0x74, 0x88, 0x3E, 0x39, 0x6C, 0x66, 0x05, 0x5E, 0x66, 0x06, 0x5D, 0x5B, 
   0x10, 0x5D, 0x3E, 0x38, 0x6E, 0x33, 0x40, 0x6C, 0x34, 0x46, 0x6F, 0x2F, 0x52, 0x78, 0x2B, 0x51, 
   0x76, 0x2B, 0x49, 0x6E, 0x2C, 0x44, 0x69, 0x2D, 0x3F, 0x65, 0x2C, 0x38, 0x5F, 0x2C, 0x34, 0x5B, 
   0x2E, 0x2D, 0x56, 0x30, 0x27, 0x50, 0x35, 0x0A, 0x3A, 0x37, 0x00, 0x32, 0x33, 0x00, 0x2E, 0x30, 
   0x00, 0x29, 0x2B, 0x00, 0x25, 0x27, 0x00, 0x22, 0x22, 0x00, 0x1E, 0x1E, 0x00, 0x19, 0x1A, 0x00, 
   0x14, 0x16, 0x00, 0x10, 0x11, 0x00, 0x0C, 0x0B, 0x00, 0x06, 0x05, 0x00, 0x02, 0x01, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 
   0x00, 0x04, 0x0D, 0x00, 0x0A, 0x12, 0x00, 0x0E, 0x18, 0x00, 0x13, 0x1C, 0x00, 0x18, 0x21, 0x00, 
   0x1D, 0x25, 0x00, 0x21, 0x2A, 0x00, 0x24, 0x2F, 0x00, 0x2A, 0x33, 0x00, 0x2D, 0x19, 0x3E, 0x55, 
   0x06, 0x6B, 0x6F, 0x02, 0x76, 0x76, 0x01, 0x8B, 0x8A, 0x00, 0x8E, 0x8E, 0x00, 0x91, 0x92, 0x00, 
   0x92, 0x92, 0x02, 0x91, 0x92, 0x04, 0x90, 0x91, 0x06, 0x8E, 0x90, 0x08, 0x8C, 0x90, 0x0C, 0x8A, 
   0x91, 0x0E, 0x87, 0x90, 0x10, 0x84, 0x8F, 0x12, 0x82, 0x8F, 0x15, 0x7F, 0x8D, 0x16, 0x7C, 0x8B, 
   0x1B, 0x79, 0x8C, 0x1D, 0x75, 0x89, 0x38, 0x46, 0x74, 0x70, 0x06, 0x64, 0x6B, 0x07, 0x63, 0x55, 
   0x21, 0x68, 0x3B, 0x3D, 0x72, 0x37, 0x44, 0x72, 0x33, 0x4D, 0x76, 0x32, 0x56, 0x7D, 0x30, 0x50, 
   0x78, 0x2F, 0x48, 0x71, 0x30, 0x44, 0x6D, 0x31, 0x3E, 0x68, 0x31, 0x38, 0x63, 0x31, 0x33, 0x5E, 
   0x32, 0x2D, 0x59, 0x32, 0x27, 0x53, 0x37, 0x16, 0x45, 0x3B, 0x00, 0x36, 0x38, 0x00, 0x32, 0x33, 
   0x00, 0x2D, 0x2F, 0x00, 0x29, 0x2B, 0x00, 0x25, 0x26, 0x00, 0x21, 0x21, 0x00, 0x1D, 0x1C, 0x00, 
   0x17, 0x18, 0x00, 0x13, 0x13, 0x00, 0x0E, 0x0E, 0x00, 0x0A, 0x08, 0x00, 0x04, 0x04, 0x00, 0x00, 
   0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x01, 0x0A, 
   0x00, 0x06, 0x10, 0x00, 0x0C, 0x16, 0x00, 0x11, 0x1B, 0x00, 0x16, 0x1F, 0x00, 0x1B, 0x25, 0x00, 
   0x21, 0x29, 0x00, 0x24, 0x2D, 0x00, 0x28, 0x31, 0x00, 0x2C, 0x2A, 0x0A, 0x35, 0x13, 0x62, 0x6C, 
   0x03, 0x73, 0x72, 0x02, 0x7F, 0x83, 0x00, 0x8E, 0x8D, 0x02, 0x91, 0x92, 0x00, 0x91, 0x93, 0x00, 
   0x92, 0x93, 0x03, 0x92, 0x93, 0x08, 0x94, 0x95, 0x0C, 0x94, 0x96, 0x12, 0x93, 0x98, 0x12, 0x8E, 
   0x95, 0x10, 0x88, 0x92, 0x13, 0x86, 0x91, 0x14, 0x82, 0x90, 0x17, 0x80, 0x90, 0x18, 0x7D, 0x8D, 
   0x1D, 0x7B, 0x8E, 0x1F, 0x76, 0x8B, 0x36, 0x52, 0x7B, 0x77, 0x06, 0x69, 0x70, 0x09, 0x6A, 0x50, 
   0x32, 0x74, 0x3E, 0x41, 0x76, 0x41, 0x47, 0x77, 0x2E, 0x55, 0x7D, 0x32, 0x57, 0x80, 0x32, 0x4F, 
   0x79, 0x33, 0x48, 0x73, 0x34, 0x43, 0x6F, 0x35, 0x3E, 0x6A, 0x35, 0x39, 0x66, 0x35, 0x33, 0x60, 
   0x35, 0x2E, 0x5B, 0x32, 0x27, 0x55, 0x37, 0x1E, 0x4D, 0x3E, 0x01, 0x39, 0x3D, 0x00, 0x36, 0x37, 
   0x00, 0x31, 0x32, 0x00, 0x2D, 0x2E, 0x00, 0x29, 0x29, 0x00, 0x25, 0x25, 0x00, 0x21, 0x1F, 0x00, 
   0x1B, 0x1C, 0x00, 0x17, 0x17, 0x00, 0x11, 0x11, 0x00, 0x0C, 0x0B, 0x00, 0x06, 0x06, 0x00, 0x01, 
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x0A, 0x00, 0x05, 0x0E, 
   0x00, 0x0A, 0x13, 0x00, 0x0F, 0x19, 0x00, 0x14, 0x1E, 0x00, 0x18, 0x23, 0x00, 0x1C, 0x28, 0x00, 
   0x22, 0x2C, 0x00, 0x26, 0x33, 0x00, 0x2D, 0x35, 0x00, 0x30, 0x21, 0x30, 0x4C, 0x07, 0x6B, 0x70, 
   0x00, 0x75, 0x77, 0x02, 0x8A, 0x8C, 0x00, 0x90, 0x90, 0x02, 0x94, 0x94, 0x06, 0x98, 0x98, 0x03, 
   0x94, 0x94, 0x05, 0x93, 0x94, 0x17, 0x9F, 0xA3, 0x15, 0x99, 0x9D, 0x15, 0x95, 0x9A, 0x1B, 0x96, 
   0x9C, 0x13, 0x8A, 0x94, 0x15, 0x88, 0x93, 0x18, 0x83, 0x91, 0x1A, 0x81, 0x90, 0x1C, 0x7D, 0x90, 
   0x20, 0x7B, 0x90, 0x22, 0x76, 0x8E, 0x36, 0x5D, 0x84, 0x72, 0x0A, 0x70, 0x74, 0x13, 0x72, 0x49, 
   0x3E, 0x79, 0x41, 0x44, 0x7A, 0x3D, 0x4D, 0x7D, 0x38, 0x5A, 0x85, 0x36, 0x57, 0x82, 0x34, 0x4E, 
   0x7A, 0x37, 0x49, 0x77, 0x36, 0x43, 0x73, 0x38, 0x3E, 0x6E, 0x38, 0x38, 0x69, 0x38, 0x32, 0x64, 
   0x38, 0x2C, 0x5F, 0x37, 0x26, 0x58, 0x39, 0x1F, 0x52, 0x40, 0x05, 0x3E, 0x41, 0x00, 0x3A, 0x3A, 
   0x00, 0x35, 0x36, 0x00, 0x30, 0x31, 0x00, 0x2B, 0x2C, 0x00, 0x27, 0x28, 0x00, 0x23, 0x22, 0x00, 
   0x1D, 0x1E, 0x00, 0x19, 0x18, 0x00, 0x15, 0x13, 0x00, 0x10, 0x0F, 0x00, 0x0B, 0x0A, 0x00, 0x07, 
   0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x02, 0x0B, 0x00, 0x07, 0x10, 
   0x00, 0x0C, 0x16, 0x00, 0x11, 0x1C, 0x00, 0x16, 0x20, 0x00, 0x1A, 0x25, 0x00, 0x1F, 0x2A, 0x00, 
   0x24, 0x2B, 0x00, 0x29, 0x33, 0x00, 0x2F, 0x30, 0x04, 0x31, 0x14, 0x58, 0x68, 0x04, 0x6F, 0x73, 
   0x01, 0x7D, 0x7E, 0x02, 0x8E, 0x8F, 0x04, 0x96, 0x96, 0x05, 0x97, 0x97, 0x12, 0xA4, 0xA4, 0x10, 
   0xA1, 0xA2, 0x0C, 0x98, 0x9A, 0x19, 0x9F, 0xA3, 0x1B, 0x9F, 0xA3, 0x18, 0x98, 0x9D, 0x19, 0x93, 
   0x9B, 0x13, 0x89, 0x93, 0x16, 0x88, 0x94, 0x1A, 0x84, 0x93, 0x1D, 0x82, 0x93, 0x20, 0x7F, 0x93, 
   0x23, 0x7C, 0x92, 0x24, 0x78, 0x90, 0x39, 0x65, 0x8B, 0x75, 0x0F, 0x74, 0x69, 0x24, 0x7A, 0x4A, 
   0x42, 0x7E, 0x44, 0x49, 0x7F, 0x3F, 0x53, 0x84, 0x3C, 0x5C, 0x89, 0x39, 0x57, 0x84, 0x3A, 0x4F, 
   0x7D, 0x3A, 0x49, 0x79, 0x3B, 0x44, 0x75, 0x3B, 0x3E, 0x70, 0x3B, 0x37, 0x6B, 0x3C, 0x31, 0x67, 
   0x3C, 0x2C, 0x61, 0x3A, 0x25, 0x5A, 0x3C, 0x1E, 0x54, 0x43, 0x0A, 0x45, 0x44, 0x00, 0x3C, 0x3E, 
   0x00, 0x38, 0x3A, 0x00, 0x33, 0x34, 0x00, 0x2E, 0x2E, 0x00, 0x29, 0x2A, 0x00, 0x25, 0x25, 0x00, 
   0x20, 0x20, 0x00, 0x1B, 0x1B, 0x00, 0x17, 0x16, 0x00, 0x12, 0x11, 0x00, 0x0D, 0x0C, 0x00, 0x0A, 
   0x06, 0x00, 0x04, 0x01, 0x00, 0x00, 0x02, 0x00, 0x01, 0x07, 0x00, 0x04, 0x0E, 0x00, 0x09, 0x13, 
   0x00, 0x0E, 0x19, 0x00, 0x14, 0x1E, 0x00, 0x18, 0x24, 0x00, 0x1D, 0x28, 0x00, 0x21, 0x2D, 0x00, 
   0x26, 0x34, 0x00, 0x2C, 0x33, 0x01, 0x31, 0x2F, 0x1E, 0x44, 0x06, 0x6B, 0x72, 0x01, 0x74, 0x77, 
   0x02, 0x88, 0x88, 0x01, 0x90, 0x91, 0x17, 0xA9, 0xA9, 0x19, 0xAB, 0xAB, 0x17, 0xA9, 0xA9, 0x19, 
   0xA9, 0xA9, 0x13, 0x9E, 0xA0, 0x19, 0x9F, 0xA3, 0x1C, 0x9E, 0xA3, 0x1B, 0x99, 0x9F, 0x17, 0x8F, 
   0x98, 0x15, 0x89, 0x94, 0x19, 0x89, 0x97, 0x1D, 0x85, 0x96, 0x20, 0x82, 0x95, 0x23, 0x80, 0x95, 
   0x28, 0x7D, 0x95, 0x28, 0x78, 0x92, 0x36, 0x6C, 0x8F, 0x74, 0x18, 0x7B, 0x5D, 0x37, 0x81, 0x4A, 
   0x46, 0x83, 0x48, 0x50, 0x87, 0x42, 0x5A, 0x8B, 0x3F, 0x5D, 0x8C, 0x3B, 0x54, 0x84, 0x3D, 0x4E, 
   0x7F, 0x3E, 0x49, 0x7C, 0x3F, 0x43, 0x78, 0x40, 0x3D, 0x73, 0x40, 0x37, 0x6E, 0x41, 0x31, 0x6A, 
   0x40, 0x2B, 0x63, 0x3E, 0x25, 0x5C, 0x3E, 0x1D, 0x57, 0x43, 0x0F, 0x4B, 0x46, 0x00, 0x3F, 0x42, 
   0x00, 0x3B, 0x3D, 0x00, 0x36, 0x37, 0x00, 0x31, 0x32, 0x00, 0x2D, 0x2D, 0x00, 0x28, 0x29, 0x00, 
   0x23, 0x24, 0x00, 0x1E, 0x1E, 0x00, 0x1A, 0x19, 0x00, 0x15, 0x14, 0x00, 0x0F, 0x10, 0x00, 0x0B, 
   0x09, 0x00, 0x05, 0x04, 0x00, 0x00, 0x04, 0x00, 0x02, 0x08, 0x00, 0x06, 0x0F, 0x00, 0x0B, 0x15, 
   0x00, 0x10, 0x1B, 0x00, 0x16, 0x21, 0x00, 0x1B, 0x27, 0x00, 0x1F, 0x2B, 0x00, 0x24, 0x2F, 0x00, 
   0x29, 0x33, 0x00, 0x2E, 0x3A, 0x00, 0x32, 0x19, 0x46, 0x60, 0x04, 0x70, 0x73, 0x00, 0x7A, 0x7B, 
   0x02, 0x90, 0x8E, 0x0C, 0x9E, 0x9E, 0x26, 0xB8, 0xB8, 0x33, 0xC5, 0xC5, 0x21, 0xB3, 0xB3, 0x17, 
   0xA6, 0xA7, 0x16, 0xA0, 0xA2, 0x1C, 0xA1, 0xA5, 0x1E, 0x9F, 0xA5, 0x1C, 0x99, 0xA1, 0x16, 0x8D, 
   0x97, 0x16, 0x89, 0x95, 0x1B, 0x89, 0x98, 0x21, 0x89, 0x9A, 0x23, 0x84, 0x98, 0x27, 0x80, 0x98, 
   0x2B, 0x7E, 0x98, 0x2C, 0x79, 0x95, 0x31, 0x73, 0x93, 0x72, 0x27, 0x87, 0x5A, 0x45, 0x86, 0x4C, 
   0x49, 0x89, 0x4A, 0x55, 0x8D, 0x45, 0x61, 0x92, 0x42, 0x5E, 0x8F, 0x3F, 0x55, 0x87, 0x41, 0x4E, 
   0x82, 0x43, 0x49, 0x7F, 0x42, 0x43, 0x7A, 0x44, 0x3D, 0x76, 0x44, 0x37, 0x71, 0x43, 0x30, 0x6C, 
   0x43, 0x2A, 0x66, 0x43, 0x24, 0x5F, 0x41, 0x1D, 0x59, 0x44, 0x13, 0x51, 0x48, 0x00, 0x42, 0x45, 
   0x00, 0x3D, 0x41, 0x00, 0x38, 0x3A, 0x00, 0x33, 0x35, 0x00, 0x2F, 0x30, 0x00, 0x2A, 0x2B, 0x00, 
   0x25, 0x27, 0x00, 0x21, 0x20, 0x00, 0x1C, 0x1C, 0x00, 0x17, 0x17, 0x00, 0x12, 0x12, 0x00, 0x0D, 
   0x0C, 0x00, 0x08, 0x06, 0x00, 0x02, 0x06, 0x00, 0x04, 0x0C, 0x00, 0x09, 0x12, 0x00, 0x0D, 0x17, 
   0x00, 0x13, 0x1D, 0x00, 0x18, 0x23, 0x00, 0x1D, 0x28, 0x00, 0x22, 0x2C, 0x00, 0x26, 0x33, 0x00, 
   0x2C, 0x33, 0x00, 0x30, 0x32, 0x08, 0x36, 0x10, 0x62, 0x72, 0x08, 0x74, 0x74, 0x01, 0x83, 0x85, 
   0x00, 0x92, 0x8E, 0x26, 0xB9, 0xB6, 0x34, 0xC8, 0xC8, 0x26, 0xB9, 0xB9, 0x1C, 0xAF, 0xAF, 0x15, 
   0xA5, 0xA5, 0x16, 0x9F, 0xA2, 0x1D, 0xA1, 0xA6, 0x1F, 0x9E, 0xA6, 0x1D, 0x98, 0xA1, 0x1A, 0x8F, 
   0x9A, 0x19, 0x8B, 0x97, 0x1E, 0x89, 0x99, 0x24, 0x88, 0x9C, 0x26, 0x84, 0x9B, 0x2B, 0x83, 0x9A, 
   0x2D, 0x7F, 0x9A, 0x2E, 0x79, 0x97, 0x35, 0x76, 0x97, 0x5F, 0x42, 0x8E, 0x58, 0x47, 0x8D, 0x53, 
   0x50, 0x8D, 0x4D, 0x5C, 0x93, 0x46, 0x64, 0x96, 0x42, 0x5D, 0x8F, 0x42, 0x54, 0x89, 0x45, 0x4F, 
   0x85, 0x47, 0x49, 0x82, 0x46, 0x43, 0x7E, 0x49, 0x3E, 0x7B, 0x47, 0x36, 0x73, 0x47, 0x30, 0x6D, 
   0x47, 0x2A, 0x68, 0x46, 0x23, 0x62, 0x44, 0x1D, 0x5B, 0x48, 0x14, 0x54, 0x4B, 0x01, 0x44, 0x48, 
   0x00, 0x40, 0x43, 0x00, 0x3B, 0x3E, 0x00, 0x36, 0x38, 0x00, 0x31, 0x33, 0x00, 0x2C, 0x2D, 0x00, 
   0x27, 0x29, 0x00, 0x23, 0x23, 0x00, 0x1F, 0x1D, 0x00, 0x19, 0x19, 0x00, 0x14, 0x14, 0x00, 0x0E, 
   0x0E, 0x00, 0x0A, 0x08, 0x00, 0x04, 0x08, 0x00, 0x05, 0x0E, 0x00, 0x0A, 0x14, 0x00, 0x0F, 0x19, 
   0x00, 0x15, 0x1F, 0x00, 0x1A, 0x25, 0x00, 0x1F, 0x2A, 0x00, 0x24, 0x2D, 0x00, 0x28, 0x35, 0x00, 
   0x2E, 0x3C, 0x00, 0x33, 0x3B, 0x07, 0x39, 0x1E, 0x46, 0x63, 0x05, 0x75, 0x7A, 0x01, 0x8C, 0x8B, 
   0x03, 0x90, 0x91, 0x18, 0xAB, 0xAF, 0x2B, 0xBC, 0xBD, 0x11, 0xA0, 0xA1, 0x18, 0xA6, 0xA7, 0x17, 
   0xA3, 0xA4, 0x14, 0x9C, 0xA0, 0x1D, 0xA0, 0xA6, 0x1F, 0x9D, 0xA5, 0x1B, 0x95, 0x9F, 0x19, 0x8D, 
   0x99, 0x1C, 0x8B, 0x99, 0x20, 0x89, 0x9B, 0x28, 0x8A, 0x9F, 0x2A, 0x86, 0x9F, 0x2E, 0x84, 0x9D, 
   0x31, 0x81, 0x9E, 0x32, 0x7B, 0x9B, 0x38, 0x7A, 0x9C, 0x54, 0x54, 0x92, 0x55, 0x4D, 0x92, 0x56, 
   0x58, 0x93, 0x50, 0x62, 0x9A, 0x48, 0x65, 0x99, 0x45, 0x5D, 0x91, 0x45, 0x54, 0x8B, 0x49, 0x4F, 
   0x89, 0x4A, 0x4A, 0x86, 0x4B, 0x45, 0x82, 0x49, 0x3B, 0x7A, 0x4A, 0x35, 0x74, 0x4A, 0x30, 0x6F, 
   0x4A, 0x29, 0x6A, 0x4A, 0x24, 0x65, 0x49, 0x1E, 0x5D, 0x4B, 0x15, 0x56, 0x4D, 0x02, 0x46, 0x4A, 
   0x00, 0x42, 0x45, 0x00, 0x3D, 0x41, 0x00, 0x38, 0x3B, 0x00, 0x33, 0x35, 0x00, 0x2F, 0x2E, 0x00, 
   0x29, 0x2A, 0x00, 0x25, 0x25, 0x00, 0x21, 0x1F, 0x00, 0x1B, 0x1A, 0x00, 0x16, 0x16, 0x00, 0x10, 
   0x10, 0x00, 0x0B, 0x0A, 0x00, 0x06, 0x0A, 0x00, 0x07, 0x10, 0x00, 0x0C, 0x16, 0x00, 0x11, 0x1B, 
   0x00, 0x16, 0x20, 0x00, 0x1C, 0x27, 0x00, 0x21, 0x2B, 0x00, 0x25, 0x2F, 0x00, 0x2B, 0x36, 0x00, 
   0x30, 0x3C, 0x00, 0x36, 0x41, 0x00, 0x3A, 0x44, 0x03, 0x3C, 0x31, 0x2B, 0x54, 0x19, 0x77, 0x89, 
   0x02, 0x8A, 0x8D, 0x04, 0x8B, 0x88, 0x03, 0x91, 0x91, 0x07, 0x97, 0x98, 0x11, 0x9E, 0x9F, 0x16, 
   0xA2, 0xA3, 0x15, 0x9B, 0x9F, 0x13, 0x95, 0x9C, 0x15, 0x92, 0x9B, 0x16, 0x8E, 0x98, 0x18, 0x8A, 
   0x97, 0x1F, 0x8C, 0x9C, 0x24, 0x8B, 0x9D, 0x2A, 0x89, 0xA0, 0x31, 0x8B, 0xA4, 0x31, 0x84, 0xA0, 
   0x36, 0x81, 0xA3, 0x37, 0x7B, 0xA1, 0x3D, 0x7B, 0xA1, 0x55, 0x5B, 0x97, 0x5B, 0x51, 0x96, 0x5A, 
   0x5F, 0x9B, 0x52, 0x69, 0xA2, 0x4A, 0x64, 0x9B, 0x49, 0x5A, 0x92, 0x4B, 0x56, 0x8F, 0x4E, 0x50, 
   0x8D, 0x50, 0x4B, 0x8A, 0x4D, 0x42, 0x83, 0x4D, 0x3B, 0x7D, 0x4E, 0x35, 0x77, 0x4E, 0x2F, 0x71, 
   0x4F, 0x2A, 0x6D, 0x4D, 0x23, 0x67, 0x4C, 0x1C, 0x5F, 0x4E, 0x13, 0x58, 0x4F, 0x03, 0x4B, 0x4C, 
   0x00, 0x45, 0x47, 0x00, 0x3F, 0x43, 0x00, 0x3B, 0x3D, 0x00, 0x35, 0x36, 0x00, 0x30, 0x30, 0x00, 
   0x2B, 0x2B, 0x00, 0x26, 0x28, 0x00, 0x22, 0x20, 0x00, 0x1C, 0x1C, 0x00, 0x17, 0x17, 0x00, 0x11, 
   0x12, 0x00, 0x0C, 0x0B, 0x00, 0x07, 0x0C, 0x00, 0x08, 0x11, 0x00, 0x0D, 0x17, 0x00, 0x12, 0x1C, 
   0x00, 0x17, 0x23, 0x00, 0x1D, 0x28, 0x00, 0x22, 0x2D, 0x00, 0x28, 0x31, 0x00, 0x2D, 0x38, 0x00, 
   0x33, 0x3D, 0x00, 0x37, 0x40, 0x00, 0x3C, 0x4A, 0x00, 0x42, 0x4C, 0x02, 0x45, 0x46, 0x09, 0x49, 
   0x30, 0x40, 0x6A, 0x13, 0x7C, 0x8B, 0x0A, 0x88, 0x8C, 0x03, 0x8C, 0x8E, 0x06, 0x90, 0x91, 0x0E, 
   0x97, 0x99, 0x10, 0x95, 0x99, 0x0F, 0x8F, 0x96, 0x13, 0x8E, 0x97, 0x17, 0x8D, 0x99, 0x1B, 0x8C, 
   0x9B, 0x1F, 0x8A, 0x9C, 0x28, 0x8C, 0xA1, 0x2D, 0x89, 0xA2, 0x36, 0x8D, 0xA9, 0x36, 0x86, 0xA7, 
   0x3A, 0x82, 0xA7, 0x3D, 0x7E, 0xA7, 0x3E, 0x81, 0xAD, 0x57, 0x67, 0xA4, 0x63, 0x57, 0xA0, 0x5E, 
   0x66, 0xA5, 0x51, 0x6C, 0xA6, 0x4D, 0x64, 0x9D, 0x51, 0x5C, 0x97, 0x51, 0x57, 0x93, 0x55, 0x52, 
   0x91, 0x52, 0x48, 0x8A, 0x50, 0x41, 0x84, 0x51, 0x3A, 0x7F, 0x53, 0x35, 0x7B, 0x55, 0x31, 0x77, 
   0x52, 0x28, 0x6F, 0x4F, 0x20, 0x68, 0x4F, 0x1A, 0x60, 0x50, 0x13, 0x59, 0x52, 0x04, 0x4D, 0x4E, 
   0x00, 0x47, 0x48, 0x00, 0x42, 0x45, 0x00, 0x3D, 0x3E, 0x00, 0x38, 0x38, 0x00, 0x32, 0x31, 0x00, 
   0x2C, 0x2D, 0x00, 0x28, 0x29, 0x00, 0x23, 0x23, 0x00, 0x1E, 0x1D, 0x00, 0x18, 0x1A, 0x00, 0x13, 
   0x13, 0x00, 0x0D, 0x0D, 0x00, 0x08, 0x0E, 0x00, 0x0A, 0x13, 0x00, 0x0E, 0x19, 0x00, 0x13, 0x1F, 
   0x00, 0x19, 0x24, 0x00, 0x1E, 0x2A, 0x00, 0x23, 0x2E, 0x00, 0x29, 0x34, 0x00, 0x2F, 0x3B, 0x00, 
   0x35, 0x41, 0x00, 0x39, 0x4A, 0x00, 0x3E, 0x4B, 0x00, 0x44, 0x51, 0x00, 0x49, 0x56, 0x01, 0x4F, 
   0x5C, 0x02, 0x53, 0x50, 0x10, 0x5D, 0x30, 0x50, 0x76, 0x17, 0x7E, 0x8C, 0x0B, 0x87, 0x8F, 0x0A, 
   0x8D, 0x8E, 0x0E, 0x8D, 0x93, 0x14, 0x8F, 0x9A, 0x16, 0x8F, 0x99, 0x16, 0x8E, 0x99, 0x1F, 0x8B, 
   0x9C, 0x24, 0x8B, 0x9E, 0x2B, 0x8C, 0xA3, 0x31, 0x8B, 0xA5, 0x39, 0x8C, 0xAC, 0x3F, 0x8A, 0xAE, 
   0x3F, 0x84, 0xAC, 0x48, 0x88, 0xB9, 0x4F, 0x91, 0xC4, 0x59, 0x70, 0xB1, 0x64, 0x61, 0xAA, 0x61, 
   0x6C, 0xAC, 0x5E, 0x72, 0xB0, 0x52, 0x62, 0x9E, 0x54, 0x5D, 0x9B, 0x57, 0x59, 0x99, 0x54, 0x4F, 
   0x8F, 0x53, 0x47, 0x8A, 0x54, 0x41, 0x86, 0x59, 0x3C, 0x86, 0x58, 0x37, 0x80, 0x57, 0x2F, 0x75, 
   0x52, 0x28, 0x6D, 0x52, 0x20, 0x69, 0x52, 0x19, 0x61, 0x52, 0x10, 0x59, 0x54, 0x04, 0x50, 0x51, 
   0x00, 0x4B, 0x4C, 0x00, 0x45, 0x46, 0x00, 0x3E, 0x41, 0x00, 0x39, 0x3A, 0x00, 0x34, 0x34, 0x00, 
   0x2E, 0x2E, 0x00, 0x29, 0x2C, 0x00, 0x25, 0x25, 0x00, 0x20, 0x1E, 0x00, 0x19, 0x1A, 0x00, 0x13, 
   0x14, 0x00, 0x0E, 0x0F, 0x00, 0x0A, 0x0F, 0x00, 0x0B, 0x14, 0x00, 0x0F, 0x1A, 0x00, 0x15, 0x1F, 
   0x00, 0x19, 0x24, 0x01, 0x1E, 0x2A, 0x00, 0x23, 0x2F, 0x00, 0x29, 0x35, 0x00, 0x2F, 0x3C, 0x00, 
   0x34, 0x40, 0x01, 0x38, 0x46, 0x00, 0x40, 0x4E, 0x00, 0x42, 0x53, 0x01, 0x4A, 0x57, 0x02, 0x4F, 
   0x5D, 0x02, 0x54, 0x65, 0x03, 0x5B, 0x6C, 0x04, 0x63, 0x58, 0x20, 0x67, 0x3A, 0x55, 0x87, 0x15, 
   0x80, 0x92, 0x0D, 0x8B, 0x8C, 0x12, 0x8B, 0x91, 0x19, 0x8D, 0x99, 0x18, 0x90, 0x9C, 0x21, 0x8B, 
   0x9D, 0x24, 0x8B, 0xA1, 0x28, 0x8B, 0xA2, 0x34, 0x8F, 0xAA, 0x39, 0x8C, 0xB2, 0x40, 0x8D, 0xBB, 
   0x43, 0x8C, 0xC3, 0x4F, 0x8C, 0xCE, 0x53, 0x7E, 0xC7, 0x5B, 0x6F, 0xBA, 0x6A, 0x79, 0xC0, 0x61, 
   0x76, 0xBC, 0x57, 0x62, 0xAC, 0x63, 0x66, 0xAF, 0x5D, 0x5F, 0xA3, 0x58, 0x57, 0x96, 0x57, 0x4D, 
   0x90, 0x58, 0x47, 0x8F, 0x5C, 0x46, 0x8D, 0x5A, 0x3D, 0x86, 0x59, 0x33, 0x7D, 0x56, 0x2B, 0x79, 
   0x56, 0x24, 0x71, 0x56, 0x1B, 0x69, 0x5C, 0x10, 0x60, 0x59, 0x07, 0x57, 0x59, 0x01, 0x51, 0x53, 
   0x01, 0x4A, 0x4D, 0x00, 0x45, 0x47, 0x00, 0x3F, 0x42, 0x00, 0x3A, 0x3C, 0x00, 0x35, 0x35, 0x00, 
   0x2F, 0x2E, 0x00, 0x29, 0x2C, 0x00, 0x25, 0x25, 0x00, 0x20, 0x1F, 0x00, 0x1A, 0x1C, 0x00, 0x15, 
   0x15, 0x00, 0x10, 0x10, 0x00, 0x0B, 0x0F, 0x00, 0x0B, 0x15, 0x00, 0x10, 0x1C, 0x00, 0x17, 0x1F, 
   0x00, 0x1C, 0x27, 0x00, 0x21, 0x2E, 0x00, 0x26, 0x34, 0x00, 0x2C, 0x37, 0x00, 0x31, 0x3D, 0x00, 
   0x36, 0x43, 0x00, 0x3B, 0x46, 0x00, 0x42, 0x4D, 0x01, 0x45, 0x54, 0x00, 0x4D, 0x5D, 0x01, 0x54, 
   0x62, 0x01, 0x59, 0x66, 0x03, 0x5D, 0x6C, 0x03, 0x64, 0x74, 0x03, 0x6A, 0x73, 0x0A, 0x6D, 0x65, 
   0x28, 0x78, 0x3B, 0x61, 0x91, 0x1A, 0x83, 0x93, 0x1B, 0x86, 0x97, 0x25, 0x8A, 0x98, 0x28, 0x8E, 
   0x9F, 0x28, 0x8A, 0xA3, 0x2F, 0x8B, 0xA6, 0x39, 0x8B, 0xAE, 0x43, 0x8D, 0xBD, 0x4B, 0x95, 0xD3, 
   0x56, 0x94, 0xE0, 0x5C, 0x88, 0xD9, 0x60, 0x88, 0xDF, 0x5D, 0x7F, 0xD0, 0x62, 0x82, 0xD4, 0x60, 
   0x81, 0xCA, 0x64, 0x75, 0xBA, 0x68, 0x67, 0xAD, 0x63, 0x5C, 0xA4, 0x5B, 0x52, 0x9B, 0x5F, 0x51, 
   0x9B, 0x63, 0x4C, 0x97, 0x5A, 0x42, 0x8B, 0x58, 0x3A, 0x82, 0x5E, 0x31, 0x7E, 0x5E, 0x28, 0x76, 
   0x66, 0x1A, 0x70, 0x64, 0x0E, 0x62, 0x66, 0x04, 0x5D, 0x61, 0x01, 0x58, 0x5D, 0x00, 0x54, 0x56, 
   0x01, 0x4B, 0x4E, 0x01, 0x45, 0x49, 0x00, 0x42, 0x44, 0x00, 0x3D, 0x3D, 0x00, 0x36, 0x37, 0x00, 
   0x31, 0x34, 0x00, 0x2D, 0x2D, 0x01, 0x26, 0x27, 0x01, 0x20, 0x23, 0x00, 0x1D, 0x1C, 0x00, 0x16, 
   0x16, 0x00, 0x11, 0x10, 0x01, 0x0C, 0x10, 0x00, 0x0C, 0x24, 0x14, 0x21, 0x48, 0x37, 0x44, 0x4E, 
   0x35, 0x4A, 0x53, 0x35, 0x4E, 0x56, 0x35, 0x50, 0x49, 0x24, 0x44, 0x37, 0x0F, 0x33, 0x39, 0x04, 
   0x33, 0x46, 0x01, 0x3D, 0x4C, 0x06, 0x47, 0x68, 0x33, 0x61, 0x68, 0x34, 0x65, 0x65, 0x2B, 0x62, 
   0x68, 0x13, 0x61, 0x6F, 0x20, 0x68, 0x79, 0x32, 0x75, 0x82, 0x31, 0x7D, 0x87, 0x22, 0x7C, 0x7F, 
   0x07, 0x7A, 0x82, 0x1A, 0x81, 0x6C, 0x62, 0x8B, 0x48, 0x89, 0x95, 0x48, 0x8C, 0x97, 0x3A, 0x90, 
   0x9C, 0x50, 0x94, 0xA2, 0x52, 0x92, 0xA7, 0x59, 0x93, 0xB3, 0x6A, 0x9E, 0xC9, 0x70, 0xA4, 0xDA, 
   0x77, 0x9E, 0xDE, 0x6F, 0x97, 0xE6, 0x62, 0x8E, 0xE5, 0x65, 0x87, 0xE3, 0x6B, 0x83, 0xD7, 0x73, 
   0x86, 0xC7, 0x8A, 0x91, 0xC6, 0x84, 0x80, 0xB0, 0x78, 0x6D, 0xA4, 0x68, 0x5D, 0xA2, 0x63, 0x51, 
   0x9D, 0x60, 0x47, 0x8F, 0x61, 0x3E, 0x8B, 0x6C, 0x46, 0x8D, 0x75, 0x53, 0x8D, 0x73, 0x43, 0x7D, 
   0x79, 0x2E, 0x7A, 0x74, 0x02, 0x6A, 0x69, 0x02, 0x60, 0x61, 0x01, 0x5A, 0x5A, 0x01, 0x55, 0x59, 
   0x00, 0x4F, 0x5C, 0x11, 0x53, 0x6E, 0x3A, 0x6A, 0x61, 0x36, 0x5D, 0x5D, 0x35, 0x59, 0x56, 0x2C, 
   0x52, 0x33, 0x02, 0x2C, 0x3A, 0x14, 0x34, 0x3A, 0x1F, 0x36, 0x50, 0x35, 0x4C, 0x48, 0x38, 0x45, 
   0x42, 0x32, 0x3E, 0x10, 0x01, 0x0D, 0x11, 0x00, 0x0D, 0x4C, 0x3F, 0x49, 0xB7, 0xB3, 0xB5, 0xB6, 
   0xB4, 0xB4, 0xB6, 0xB4, 0xB4, 0xB3, 0xB4, 0xB3, 0xB1, 0xB0, 0xB2, 0x9F, 0x9B, 0x9F, 0x78, 0x60, 
   0x76, 0x54, 0x20, 0x4D, 0x4E, 0x17, 0x49, 0xAC, 0xA1, 0xA9, 0xA3, 0xA1, 0xA3, 0x8E, 0x8F, 0x8E, 
   0x98, 0x66, 0x91, 0x87, 0x5E, 0x82, 0x9D, 0x9B, 0x9D, 0x9E, 0x99, 0x9B, 0xA3, 0x8D, 0xA3, 0x89, 
   0x08, 0x79, 0x90, 0x5D, 0x8D, 0x9B, 0x9B, 0x98, 0x9F, 0x9D, 0xA0, 0x9E, 0x98, 0xAD, 0x7B, 0x89, 
   0xA0, 0xA6, 0xA7, 0xA9, 0xA5, 0xA8, 0xAE, 0xA8, 0xAA, 0xBC, 0xAD, 0xAE, 0xCD, 0xB5, 0xBA, 0xE3, 
   0xC9, 0xC4, 0xF0, 0xA1, 0xB3, 0xF8, 0x72, 0x9A, 0xFA, 0x7C, 0x95, 0xF6, 0x98, 0xA3, 0xDE, 0xB2, 
   0xB3, 0xD6, 0xAC, 0xAD, 0xBE, 0xA7, 0xA8, 0xAD, 0xA8, 0xAA, 0xAE, 0x88, 0x84, 0xA5, 0x60, 0x4E, 
   0x96, 0x65, 0x44, 0x96, 0x6B, 0x34, 0x8D, 0xA6, 0x77, 0xB0, 0xAE, 0xAD, 0xAE, 0x9B, 0x99, 0x99, 
   0x9D, 0x86, 0x9C, 0x6B, 0x08, 0x63, 0x6D, 0x03, 0x62, 0x66, 0x02, 0x5B, 0x5F, 0x02, 0x54, 0x58, 
   0x01, 0x4F, 0x5E, 0x21, 0x58, 0xF4, 0xE5, 0xF3, 0xB7, 0xB9, 0xB8, 0xAD, 0xAD, 0xAD, 0xB2, 0xA9, 
   0xB2, 0x3B, 0x1D, 0x37, 0x91, 0x7F, 0x8E, 0x8C, 0x8B, 0x8B, 0xB5, 0xB4, 0xB4, 0xB6, 0xB3, 0xB5, 
   0x76, 0x69, 0x73, 0x11, 0x01, 0x0E, 0x11, 0x00, 0x0D, 0x4E, 0x3F, 0x4A, 0xB3, 0xB4, 0xB3, 0xB2, 
   0xB4, 0xB2, 0xB7, 0xB2, 0xB5, 0xB1, 0xB4, 0xB0, 0xB5, 0xB3, 0xB4, 0xAF, 0xB3, 0xAF, 0x9F, 0x98, 
   0x9D, 0x8C, 0x7E, 0x8B, 0x55, 0x1F, 0x50, 0xAA, 0xA3, 0xA8, 0xA2, 0xA3, 0xA3, 0x8F, 0x90, 0x8F, 
   0x95, 0x68, 0x91, 0x88, 0x5D, 0x83, 0x99, 0x9D, 0x9B, 0xA0, 0x98, 0x9D, 0x9C, 0x8B, 0x9B, 0x84, 
   0x11, 0x7A, 0x9D, 0x91, 0x9C, 0x9D, 0x9C, 0x9C, 0x9A, 0x9C, 0x9B, 0xAB, 0x6A, 0xA9, 0xA3, 0x59, 
   0xA4, 0xA9, 0xA7, 0xAA, 0xAB, 0xAC, 0xB7, 0xAF, 0xB2, 0xCE, 0xAC, 0xAF, 0xD5, 0xBD, 0xC1, 0xF0, 
   0xD3, 0xD5, 0xFC, 0xBA, 0xCC, 0xFB, 0x8E, 0xAE, 0xFD, 0xA8, 0xB4, 0xFC, 0xC0, 0xC1, 0xF0, 0xB5, 
   0xB4, 0xD4, 0xAF, 0xB1, 0xD1, 0xAC, 0xA9, 0xB9, 0xA1, 0xA4, 0xA5, 0xA2, 0xA3, 0xA3, 0x7E, 0x66, 
   0x96, 0x78, 0x2A, 0x8F, 0x85, 0x14, 0x86, 0xB9, 0x6A, 0xB1, 0xAA, 0xAD, 0xAD, 0x9E, 0x9E, 0x9B, 
   0x9D, 0x8A, 0x9B, 0x70, 0x07, 0x67, 0x6C, 0x03, 0x63, 0x64, 0x02, 0x5C, 0x5E, 0x00, 0x56, 0x58, 
   0x00, 0x51, 0x50, 0x01, 0x48, 0xB3, 0x91, 0xAF, 0xD7, 0xDB, 0xD7, 0xB1, 0xAE, 0xB0, 0xAD, 0xB4, 
   0xAE, 0x9A, 0x8C, 0x98, 0x82, 0x7C, 0x81, 0xA5, 0xA5, 0xA5, 0xB4, 0xB3, 0xB4, 0xB1, 0xAE, 0xB1, 
   0x2B, 0x16, 0x26, 0x0F, 0x00, 0x0D, 0x11, 0x00, 0x0D, 0x4E, 0x3F, 0x4A, 0xB2, 0xB4, 0xB3, 0xB0, 
   0xB5, 0xB2, 0x95, 0x92, 0x96, 0x9E, 0x98, 0x9E, 0xA2, 0x96, 0xA1, 0xB0, 0xB4, 0xB1, 0xB1, 0xAE, 
   0xB1, 0x7E, 0x7E, 0x81, 0x7E, 0x5B, 0x7C, 0xA8, 0xA6, 0xA7, 0xA3, 0xA3, 0xA5, 0x8F, 0x91, 0x8F, 
   0x95, 0x69, 0x92, 0x8A, 0x60, 0x86, 0x9C, 0x9D, 0x9D, 0x99, 0x9D, 0x9B, 0x99, 0x82, 0x9B, 0x8A, 
   0x42, 0x85, 0xA1, 0x97, 0xA0, 0x9E, 0x9C, 0x9D, 0xA9, 0xA1, 0xA7, 0xAC, 0x34, 0xA3, 0xA8, 0x56, 
   0xA4, 0xA5, 0xA4, 0xA8, 0xAB, 0xAA, 0xBC, 0x9D, 0xA5, 0xD6, 0x82, 0x9F, 0xE9, 0x91, 0xAC, 0xF6, 
   0xB8, 0xD2, 0xF8, 0xC3, 0xE2, 0xFB, 0xBF, 0xD7, 0xFB, 0xDC, 0xDF, 0xFE, 0xCD, 0xCC, 0xF9, 0xB5, 
   0xB3, 0xE7, 0x86, 0x82, 0xCE, 0x8D, 0x92, 0xB9, 0xAD, 0xA6, 0xAE, 0x9B, 0xA5, 0xA0, 0xA5, 0x7C, 
   0x9F, 0xA6, 0x10, 0x9A, 0x9A, 0x10, 0x8D, 0xBA, 0x6D, 0xB5, 0xAC, 0xAD, 0xAE, 0x9B, 0x9C, 0x9B, 
   0x9A, 0x88, 0x9B, 0x6D, 0x06, 0x66, 0x6C, 0x03, 0x62, 0x64, 0x02, 0x5B, 0x5D, 0x01, 0x55, 0x59, 
   0x00, 0x4F, 0x52, 0x00, 0x49, 0x5D, 0x24, 0x56, 0xEB, 0xE7, 0xEB, 0xBC, 0xBB, 0xBD, 0xB1, 0xB3, 
   0xB2, 0xB2, 0xB0, 0xB3, 0x8A, 0x8A, 0x8A, 0xB1, 0xB5, 0xB2, 0xB4, 0xB3, 0xB4, 0x78, 0x6C, 0x76, 
   0x17, 0x01, 0x12, 0x10, 0x00, 0x0E, 0x11, 0x00, 0x0D, 0x4E, 0x3F, 0x4A, 0xB2, 0xB4, 0xB3, 0xB2, 
   0xB4, 0xB3, 0x89, 0x8A, 0x8B, 0x9A, 0x8F, 0x99, 0x5E, 0x45, 0x5C, 0xB3, 0xB3, 0xB2, 0xB1, 0xB0, 
   0xB1, 0x86, 0x8E, 0x88, 0x8C, 0x77, 0x89, 0xAA, 0xA7, 0xA7, 0xA7, 0xA4, 0xA5, 0x92, 0x91, 0x8E, 
   0x98, 0x6A, 0x91, 0x8C, 0x60, 0x84, 0xA0, 0x9D, 0x9D, 0x9E, 0x9F, 0x99, 0x99, 0x82, 0x94, 0x9F, 
   0x81, 0x9B, 0xA2, 0xA0, 0xA0, 0xA8, 0x9F, 0xA3, 0xBD, 0x87, 0xB3, 0xB2, 0x17, 0x9F, 0xB3, 0x5A, 
   0xA7, 0xAE, 0xAC, 0xAB, 0xB6, 0xB0, 0xC1, 0x9B, 0x9A, 0xD6, 0x75, 0x8B, 0xEC, 0xA5, 0xCC, 0xFD, 
   0xD5, 0xF2, 0xFC, 0xEF, 0xFE, 0xFD, 0xF3, 0xFC, 0xFE, 0xFA, 0xF9, 0xFD, 0xE1, 0xDB, 0xFB, 0xAC, 
   0xA1, 0xEE, 0x80, 0x73, 0xDC, 0x79, 0x6D, 0xC4, 0xC8, 0xB4, 0xC7, 0xB4, 0x95, 0xB2, 0xAB, 0x5D, 
   0x9F, 0xA2, 0x11, 0x94, 0x9A, 0x0F, 0x8C, 0xBC, 0x6F, 0xB4, 0xBF, 0xB5, 0xB8, 0xA1, 0x9E, 0x9C, 
   0xA1, 0x8A, 0x9C, 0x74, 0x08, 0x68, 0x71, 0x05, 0x63, 0x69, 0x03, 0x5C, 0x62, 0x02, 0x56, 0x5D, 
   0x02, 0x4F, 0x55, 0x01, 0x49, 0x4D, 0x01, 0x43, 0xAF, 0x91, 0xAB, 0xDB, 0xD8, 0xDA, 0xB5, 0xB2, 
   0xB5, 0xB2, 0xB4, 0xB3, 0xB0, 0xB2, 0xB0, 0xB1, 0xB5, 0xB2, 0xB3, 0xAD, 0xB2, 0x2C, 0x19, 0x29, 
   0x18, 0x01, 0x13, 0x11, 0x00, 0x0F, 0x11, 0x00, 0x0C, 0x4E, 0x3F, 0x4A, 0xB2, 0xB4, 0xB3, 0xB6, 
   0xB2, 0xB5, 0x89, 0x8C, 0x88, 0x9B, 0x93, 0x99, 0x4F, 0x2D, 0x49, 0xB8, 0xB3, 0xB5, 0xB4, 0xB1, 
   0xB1, 0x8E, 0x94, 0x8C, 0x99, 0x7F, 0x91, 0xB1, 0xA8, 0xA9, 0xAD, 0xA6, 0xA6, 0x98, 0x93, 0x90, 
   0x9E, 0x6A, 0x93, 0x92, 0x63, 0x87, 0xA9, 0xA1, 0x9F, 0xAD, 0xA0, 0x9D, 0xAA, 0x9C, 0x99, 0xB4, 
   0x9E, 0xA3, 0xB0, 0xA4, 0x9C, 0xBB, 0x97, 0xA3, 0xB3, 0x39, 0x94, 0xC4, 0x1D, 0x9F, 0xCF, 0x63, 
   0xAE, 0xCF, 0xB5, 0xB6, 0xDD, 0xBE, 0xCE, 0xD3, 0xB6, 0xDD, 0xCE, 0xB8, 0xF4, 0xE0, 0xDE, 0xFB, 
   0xF6, 0xFA, 0xFD, 0xFD, 0xFD, 0xFE, 0xFE, 0xFE, 0xFE, 0xFD, 0xFE, 0xFE, 0xF9, 0xEC, 0xFD, 0xC8, 
   0xAA, 0xF7, 0xA4, 0x80, 0xE2, 0xA4, 0x72, 0xD4, 0xD6, 0x4F, 0xC0, 0xD3, 0x2D, 0xAA, 0xCC, 0x1F, 
   0xA5, 0xC4, 0x19, 0x9C, 0xB1, 0x16, 0x91, 0xC9, 0x74, 0xB8, 0xC4, 0xBB, 0xBD, 0xAE, 0xA2, 0x9E, 
   0xAC, 0x8D, 0x9D, 0x7E, 0x0A, 0x67, 0x77, 0x05, 0x63, 0x70, 0x04, 0x5D, 0x69, 0x03, 0x56, 0x61, 
   0x02, 0x51, 0x57, 0x03, 0x49, 0x52, 0x01, 0x46, 0x5F, 0x24, 0x56, 0xEB, 0xE3, 0xE7, 0xC2, 0xBE, 
   0xBF, 0xB7, 0xB4, 0xB5, 0xB5, 0xB4, 0xB5, 0xB5, 0xB3, 0xB5, 0x7A, 0x6D, 0x78, 0x1D, 0x02, 0x18, 
   0x19, 0x00, 0x13, 0x12, 0x00, 0x0F, 0x0F, 0x00, 0x0B, 0x4C, 0x3F, 0x4A, 0xB3, 0xB4, 0xB3, 0xB6, 
   0xB2, 0xB5, 0x88, 0x8C, 0x89, 0x99, 0x92, 0x98, 0x4C, 0x2A, 0x45, 0xB9, 0xB4, 0xB5, 0xB4, 0xB1, 
   0xB1, 0x8E, 0x94, 0x8D, 0x9A, 0x7F, 0x94, 0xAE, 0xA7, 0xAA, 0xA9, 0xA6, 0xA5, 0x98, 0x92, 0x92, 
   0x9E, 0x6A, 0x93, 0x93, 0x62, 0x87, 0xA9, 0xA1, 0x9F, 0xAA, 0xA1, 0x9E, 0xB0, 0xA0, 0x9F, 0xB1, 
   0xA2, 0xA0, 0xAF, 0xA5, 0xA1, 0xBA, 0xA4, 0xA2, 0xCD, 0x96, 0xB2, 0xA0, 0x46, 0x9F, 0xAA, 0x84, 
   0xA6, 0xCF, 0xB4, 0xBB, 0xDD, 0xBD, 0xCD, 0xDE, 0xC0, 0xDC, 0xEB, 0xCD, 0xF5, 0xF9, 0xEE, 0xFC, 
   0xFD, 0xFE, 0xFB, 0xFB, 0xFD, 0xFE, 0xFE, 0xFE, 0xFE, 0xFD, 0xFE, 0xFE, 0xF6, 0xE9, 0xFC, 0xC2, 
   0xA4, 0xF4, 0xA1, 0x7D, 0xE0, 0xA8, 0x6F, 0xD2, 0xCB, 0x33, 0xB8, 0xD6, 0x26, 0xAF, 0xCA, 0x1E, 
   0xAA, 0xBF, 0x1B, 0x9E, 0xB4, 0x19, 0x90, 0xC8, 0x76, 0xB8, 0xC5, 0xBD, 0xBB, 0xB0, 0xA1, 0xA1, 
   0xAC, 0x8D, 0x9E, 0x7B, 0x0B, 0x67, 0x74, 0x07, 0x63, 0x6C, 0x05, 0x5C, 0x64, 0x04, 0x55, 0x62, 
   0x02, 0x51, 0x55, 0x04, 0x46, 0x51, 0x00, 0x44, 0x45, 0x04, 0x3B, 0xCC, 0xBC, 0xC9, 0xD2, 0xD2, 
   0xD1, 0xB6, 0xB5, 0xB4, 0xB5, 0xB5, 0xB3, 0xB6, 0xB3, 0xB7, 0x42, 0x2E, 0x41, 0x1E, 0x01, 0x19, 
   0x18, 0x00, 0x13, 0x11, 0x00, 0x0D, 0x0F, 0x01, 0x0B, 0x4C, 0x3F, 0x4A, 0xB3, 0xB4, 0xB3, 0xB5, 
   0xB3, 0xB4, 0x8A, 0x8B, 0x8A, 0x99, 0x8F, 0x98, 0x54, 0x36, 0x4F, 0xB4, 0xB2, 0xB2, 0xB3, 0xB0, 
   0xB0, 0x89, 0x90, 0x89, 0x90, 0x78, 0x8D, 0xAA, 0xA6, 0xA8, 0xA6, 0xA4, 0xA3, 0x92, 0x91, 0x90, 
   0x97, 0x68, 0x91, 0x8B, 0x5F, 0x84, 0xA2, 0x9E, 0x9B, 0xA0, 0x9B, 0xA0, 0xA8, 0x94, 0x9D, 0x91, 
   0x50, 0x87, 0xA7, 0x93, 0x9F, 0xA5, 0x9F, 0x9E, 0x9E, 0x9D, 0x9E, 0x80, 0x8B, 0xA9, 0x7D, 0x80, 
   0x9B, 0xA5, 0xA6, 0xAD, 0xB3, 0xAE, 0xC0, 0xAC, 0xAF, 0xD6, 0xB6, 0xBA, 0xF3, 0xD0, 0xD7, 0xFC, 
   0xE9, 0xF0, 0xFE, 0xF3, 0xFB, 0xFB, 0xF2, 0xF8, 0xFE, 0xFB, 0xFA, 0xFE, 0xE4, 0xDC, 0xFC, 0xA2, 
   0x97, 0xE7, 0x7B, 0x68, 0xD8, 0x7D, 0x60, 0xBD, 0x93, 0x5C, 0xAE, 0x94, 0x2B, 0x9D, 0xA7, 0x15, 
   0x93, 0xA0, 0x11, 0x90, 0x9A, 0x10, 0x87, 0xBE, 0x6D, 0xB5, 0xBB, 0xB7, 0xB7, 0xA6, 0x9E, 0x9E, 
   0xA0, 0x8C, 0x9B, 0x77, 0x07, 0x68, 0x73, 0x04, 0x65, 0x6A, 0x03, 0x5E, 0x60, 0x03, 0x55, 0x5C, 
   0x01, 0x4F, 0x53, 0x01, 0x48, 0x4F, 0x00, 0x45, 0x65, 0x33, 0x5F, 0xED, 0xE7, 0xEB, 0xC1, 0xC1, 
   0xC1, 0xB4, 0xB3, 0xB3, 0xB2, 0xB4, 0xB3, 0xB3, 0xB4, 0xB3, 0x7A, 0x6C, 0x78, 0x1C, 0x01, 0x17, 
   0x16, 0x00, 0x12, 0x11, 0x00, 0x0C, 0x0E, 0x00, 0x0B, 0x4B, 0x3F, 0x49, 0xB3, 0xB4, 0xB3, 0xB3, 
   0xB3, 0xB3, 0x8B, 0x8A, 0x8B, 0x93, 0x8B, 0x92, 0x7A, 0x67, 0x77, 0xB2, 0xB3, 0xB1, 0xB2, 0xAE, 
   0xB0, 0x84, 0x86, 0x85, 0x84, 0x65, 0x81, 0xA7, 0xA5, 0xA7, 0xA5, 0xA3, 0xA3, 0x8E, 0x90, 0x8F, 
   0x94, 0x69, 0x91, 0x86, 0x5F, 0x83, 0x9D, 0x9D, 0x99, 0x9B, 0x98, 0xA1, 0xA7, 0x98, 0xA4, 0x5D, 
   0x26, 0x7B, 0x80, 0x7B, 0x8F, 0x9D, 0x9E, 0x97, 0x9F, 0x9B, 0xA0, 0x7C, 0x90, 0xA0, 0x6E, 0x84, 
   0x9F, 0xB0, 0xAA, 0xAB, 0xB2, 0xAD, 0xBF, 0x85, 0xA3, 0xD8, 0x67, 0x99, 0xEB, 0x85, 0xAD, 0xFC, 
   0x9A, 0xB8, 0xFA, 0xB4, 0xD2, 0xFC, 0xBE, 0xCF, 0xF9, 0xE3, 0xE2, 0xFD, 0xD1, 0xD0, 0xF9, 0xAF, 
   0xAE, 0xEC, 0x7A, 0x6F, 0xD1, 0x79, 0x6F, 0xAF, 0xBE, 0xB2, 0xC1, 0x9A, 0x91, 0xA4, 0x90, 0x61, 
   0x98, 0x8D, 0x26, 0x8B, 0x8C, 0x1E, 0x81, 0xB0, 0x73, 0xA7, 0xB0, 0xB4, 0xAF, 0x9C, 0x9A, 0x9C, 
   0x94, 0x8D, 0x95, 0x67, 0x18, 0x60, 0x63, 0x14, 0x5B, 0x5C, 0x06, 0x54, 0x5B, 0x01, 0x54, 0x54, 
   0x01, 0x4D, 0x50, 0x00, 0x48, 0x47, 0x02, 0x40, 0xBE, 0xA5, 0xBB, 0xD9, 0xDE, 0xDA, 0xB5, 0xB2, 
   0xB4, 0xB3, 0xB3, 0xB4, 0xAB, 0xAD, 0xAD, 0xB2, 0xB5, 0xB1, 0xB2, 0xAE, 0xAF, 0x2A, 0x17, 0x26, 
   0x17, 0x00, 0x11, 0x10, 0x00, 0x0C, 0x0E, 0x00, 0x0A, 0x4B, 0x3F, 0x49, 0xB3, 0xB4, 0xB3, 0xB4, 
   0xB3, 0xB4, 0xA2, 0xA3, 0xA2, 0xA0, 0xA3, 0xA1, 0xB6, 0xB0, 0xB5, 0xAE, 0xB2, 0xAF, 0xAC, 0xA7, 
   0xAB, 0x8A, 0x84, 0x8B, 0x5C, 0x2F, 0x59, 0xA7, 0xA3, 0xA8, 0xA1, 0xA2, 0xA2, 0x8D, 0x90, 0x8E, 
   0x93, 0x68, 0x90, 0x86, 0x5E, 0x81, 0x99, 0x9C, 0x9B, 0x9A, 0x99, 0x9C, 0x98, 0x94, 0x99, 0x71, 
   0x74, 0x87, 0x8B, 0x95, 0x98, 0x9E, 0x9C, 0x9F, 0xA0, 0x9D, 0xA2, 0x66, 0x8F, 0xA4, 0x6A, 0x8E, 
   0xA2, 0xA3, 0xA6, 0xA7, 0xA7, 0xAA, 0xB4, 0xA2, 0xAE, 0xCF, 0x9D, 0xAC, 0xE1, 0xAA, 0xB6, 0xF0, 
   0xB3, 0xBD, 0xF8, 0xAD, 0xC0, 0xFB, 0x92, 0xA6, 0xFC, 0xB6, 0xB8, 0xFA, 0xBE, 0xBE, 0xEA, 0xB6, 
   0xB8, 0xDC, 0xA8, 0xA6, 0xD4, 0xB0, 0xAD, 0xC0, 0xA5, 0xA5, 0xA9, 0xA1, 0xA0, 0x9C, 0x87, 0x76, 
   0x96, 0x9C, 0x92, 0x9D, 0x98, 0x93, 0x9A, 0x9B, 0x97, 0x97, 0x9E, 0x9C, 0x9E, 0x9D, 0x98, 0x9E, 
   0x99, 0x9A, 0x9A, 0x9D, 0x8C, 0x9D, 0x9D, 0x8E, 0x9C, 0x80, 0x4A, 0x7C, 0x5A, 0x00, 0x54, 0x51, 
   0x02, 0x4B, 0x4D, 0x00, 0x46, 0x63, 0x32, 0x5F, 0xEB, 0xE5, 0xEB, 0xBD, 0xC2, 0xBE, 0xB5, 0xB0, 
   0xB5, 0xB0, 0xB3, 0xB2, 0x85, 0x83, 0x85, 0xB4, 0xB3, 0xB3, 0xB5, 0xB4, 0xB3, 0x72, 0x66, 0x6E, 
   0x16, 0x01, 0x12, 0x0F, 0x00, 0x0C, 0x0F, 0x00, 0x0B, 0x49, 0x40, 0x48, 0xB2, 0xB4, 0xB4, 0xB2, 
   0xB5, 0xB3, 0xB0, 0xB5, 0xB2, 0xAE, 0xB5, 0xB0, 0xB0, 0xB3, 0xB1, 0xAC, 0xB1, 0xAD, 0x92, 0x88, 
   0x91, 0x65, 0x47, 0x67, 0x50, 0x16, 0x46, 0xA6, 0xA1, 0xA8, 0xA1, 0xA1, 0xA3, 0x8E, 0x90, 0x8D, 
   0x93, 0x69, 0x8D, 0x7E, 0x64, 0x7F, 0x9A, 0x9B, 0x9A, 0x9C, 0x9B, 0x98, 0x9C, 0x9A, 0x99, 0x99, 
   0x9D, 0x99, 0x9F, 0x9C, 0x9A, 0x9A, 0x9C, 0x9B, 0x85, 0x9B, 0x9D, 0x3D, 0x88, 0x9E, 0x66, 0x8F, 
   0xA0, 0xA6, 0xA8, 0xA9, 0xAB, 0xA7, 0xB0, 0xB0, 0xB1, 0xC1, 0xB7, 0xB7, 0xD3, 0xAF, 0xB0, 0xDA, 
   0xBB, 0xC0, 0xEA, 0x9F, 0xAD, 0xF9, 0x7D, 0x8D, 0xFA, 0x86, 0x8E, 0xEA, 0xAD, 0xAF, 0xDC, 0xAF, 
   0xB0, 0xCB, 0xAF, 0xB2, 0xBF, 0xAF, 0xB1, 0xB1, 0xAB, 0xB0, 0xAD, 0xA8, 0xA0, 0xAC, 0x6D, 0x4D, 
   0x91, 0xA2, 0x9B, 0xA1, 0x9B, 0x9B, 0x9A, 0x99, 0x9D, 0x97, 0x99, 0x9A, 0x9B, 0x9D, 0x9A, 0x9C, 
   0x9B, 0x9C, 0x9B, 0x97, 0x9C, 0x99, 0x96, 0xA1, 0x97, 0x7C, 0x58, 0x79, 0x58, 0x00, 0x53, 0x51, 
   0x01, 0x4A, 0x46, 0x03, 0x40, 0xBA, 0xA1, 0xB8, 0xA7, 0xAB, 0xA9, 0xA9, 0xB1, 0xAC, 0xB0, 0xB1, 
   0xB1, 0x87, 0x7E, 0x85, 0x8B, 0x83, 0x8A, 0xA1, 0xA3, 0xA2, 0xB2, 0xB4, 0xB3, 0xAE, 0xAC, 0xAE, 
   0x1E, 0x12, 0x1C, 0x0F, 0x00, 0x0C, 0x0D, 0x00, 0x0A, 0x46, 0x3B, 0x44, 0xAE, 0xA7, 0xAE, 0xAD, 
   0xA6, 0xAD, 0xAE, 0xA6, 0xAE, 0xAD, 0xA3, 0xAC, 0x9F, 0x8E, 0x9D, 0x6D, 0x57, 0x6A, 0x43, 0x1E, 
   0x3E, 0x3C, 0x04, 0x36, 0x4B, 0x15, 0x40, 0x9E, 0x96, 0xA5, 0x9C, 0x95, 0x9C, 0x80, 0x87, 0x8D, 
   0x4C, 0x70, 0x89, 0x6A, 0x79, 0x8C, 0x90, 0x95, 0x9D, 0x8D, 0x96, 0x9D, 0x8A, 0x96, 0x9D, 0x90, 
   0x95, 0x9D, 0x89, 0x98, 0x9E, 0x6C, 0x93, 0x9C, 0x3E, 0x83, 0x93, 0x26, 0x83, 0x9B, 0x65, 0x93, 
   0xA8, 0x99, 0x9F, 0xA7, 0x9C, 0xA6, 0xAC, 0xA5, 0xAE, 0xBD, 0xA4, 0xAC, 0xC8, 0xA0, 0xA9, 0xD1, 
   0xB1, 0xAF, 0xDA, 0x94, 0x9C, 0xE4, 0x6B, 0x7D, 0xDE, 0x6B, 0x77, 0xD8, 0x80, 0x82, 0xCC, 0xA2, 
   0xA0, 0xC8, 0xA3, 0xA4, 0xB4, 0xA8, 0xA7, 0xB0, 0xA0, 0x99, 0xB1, 0x80, 0x67, 0x9A, 0x6E, 0x47, 
   0x96, 0x98, 0x87, 0xA8, 0x98, 0x92, 0x9D, 0x98, 0x91, 0x9C, 0x99, 0x90, 0x9B, 0x9A, 0x8E, 0x9A, 
   0x9B, 0x8E, 0x9B, 0x9C, 0x8F, 0x9B, 0xA3, 0x8D, 0xA2, 0x82, 0x4E, 0x7E, 0x57, 0x00, 0x50, 0x4F, 
   0x01, 0x48, 0x4B, 0x08, 0x45, 0xB1, 0x91, 0xAE, 0x9C, 0x8C, 0x9B, 0xAA, 0x9F, 0xAA, 0xAF, 0x9F, 
   0xAD, 0x3B, 0x1E, 0x37, 0x5E, 0x48, 0x5B, 0x7D, 0x74, 0x7B, 0xB0, 0xA6, 0xAE, 0xAF, 0xA8, 0xAE, 
   0x60, 0x55, 0x5E, 0x0E, 0x01, 0x0A, 0x0B, 0x00, 0x07, 0x10, 0x00, 0x0C, 0x15, 0x01, 0x11, 0x19, 
   0x00, 0x15, 0x1E, 0x01, 0x1A, 0x22, 0x02, 0x1E, 0x2A, 0x01, 0x24, 0x2F, 0x01, 0x29, 0x38, 0x00, 
   0x30, 0x3E, 0x00, 0x38, 0x3F, 0x01, 0x3C, 0x32, 0x14, 0x46, 0x27, 0x3F, 0x5B, 0x1E, 0x5A, 0x68, 
   0x1A, 0x5A, 0x71, 0x19, 0x61, 0x70, 0x1C, 0x63, 0x72, 0x19, 0x69, 0x76, 0x1C, 0x75, 0x81, 0x1E, 
   0x81, 0x8E, 0x23, 0x81, 0x8F, 0x25, 0x80, 0x93, 0x2B, 0x81, 0x9B, 0x2D, 0x83, 0x9B, 0x31, 0x7E, 
   0x97, 0x3E, 0x7F, 0x9E, 0x48, 0x85, 0xA8, 0x46, 0x7C, 0xA8, 0x49, 0x7B, 0xB1, 0x5F, 0x8C, 0xD1, 
   0x64, 0x79, 0xCC, 0x67, 0x7C, 0xD7, 0x6F, 0x6C, 0xCC, 0x74, 0x73, 0xD6, 0x69, 0x64, 0xC0, 0x66, 
   0x58, 0xAC, 0x6F, 0x5F, 0xA7, 0x6D, 0x57, 0x9D, 0x6A, 0x4E, 0x96, 0x6C, 0x44, 0x9A, 0x6D, 0x41, 
   0x8F, 0x6B, 0x3A, 0x8C, 0x6C, 0x33, 0x84, 0x67, 0x27, 0x79, 0x64, 0x1D, 0x70, 0x62, 0x16, 0x68, 
   0x5E, 0x13, 0x62, 0x5A, 0x0F, 0x5D, 0x53, 0x09, 0x4E, 0x54, 0x04, 0x4D, 0x55, 0x01, 0x4A, 0x4C, 
   0x01, 0x45, 0x48, 0x00, 0x41, 0x3F, 0x02, 0x37, 0x36, 0x03, 0x31, 0x30, 0x03, 0x2B, 0x2D, 0x02, 
   0x27, 0x2F, 0x01, 0x28, 0x28, 0x01, 0x22, 0x1E, 0x02, 0x1A, 0x1B, 0x01, 0x17, 0x15, 0x01, 0x12, 
   0x11, 0x01, 0x0D, 0x0C, 0x01, 0x08, 0x0A, 0x00, 0x04, 0x0F, 0x00, 0x0A, 0x14, 0x00, 0x10, 0x1A, 
   0x00, 0x16, 0x1F, 0x00, 0x1B, 0x26, 0x00, 0x20, 0x2A, 0x00, 0x24, 0x2E, 0x00, 0x28, 0x35, 0x00, 
   0x2E, 0x36, 0x0A, 0x35, 0x22, 0x3A, 0x54, 0x18, 0x57, 0x69, 0x0E, 0x5E, 0x6B, 0x0E, 0x61, 0x70, 
   0x0F, 0x63, 0x72, 0x10, 0x66, 0x76, 0x11, 0x71, 0x81, 0x19, 0x7D, 0x8C, 0x18, 0x80, 0x8E, 0x19, 
   0x7F, 0x92, 0x1D, 0x80, 0x92, 0x22, 0x82, 0x97, 0x1F, 0x7F, 0x96, 0x2A, 0x7C, 0x95, 0x2C, 0x7C, 
   0x9A, 0x3E, 0x80, 0xA4, 0x3C, 0x7A, 0x9E, 0x40, 0x78, 0xA0, 0x42, 0x74, 0xA4, 0x4A, 0x74, 0xAC, 
   0x60, 0x81, 0xC6, 0x68, 0x70, 0xC1, 0x74, 0x53, 0xB5, 0x6E, 0x5C, 0xB5, 0x66, 0x5D, 0xAC, 0x63, 
   0x59, 0xA5, 0x64, 0x55, 0x9D, 0x62, 0x4C, 0x95, 0x63, 0x44, 0x90, 0x67, 0x41, 0x91, 0x68, 0x3B, 
   0x89, 0x67, 0x35, 0x88, 0x63, 0x2E, 0x81, 0x66, 0x28, 0x7C, 0x65, 0x1F, 0x74, 0x5E, 0x15, 0x69, 
   0x5A, 0x12, 0x63, 0x58, 0x0F, 0x5D, 0x5C, 0x02, 0x55, 0x59, 0x00, 0x50, 0x50, 0x02, 0x47, 0x4B, 
   0x00, 0x44, 0x46, 0x00, 0x3F, 0x41, 0x00, 0x3A, 0x3C, 0x00, 0x35, 0x36, 0x00, 0x30, 0x31, 0x00, 
   0x2B, 0x2D, 0x00, 0x25, 0x28, 0x00, 0x21, 0x21, 0x00, 0x1B, 0x1C, 0x00, 0x16, 0x15, 0x00, 0x11, 
   0x10, 0x00, 0x0B, 0x0A, 0x00, 0x05, 0x09, 0x00, 0x04, 0x0D, 0x00, 0x08, 0x12, 0x00, 0x0D, 0x16, 
   0x00, 0x12, 0x1D, 0x00, 0x18, 0x23, 0x00, 0x1D, 0x29, 0x00, 0x23, 0x2E, 0x00, 0x28, 0x33, 0x00, 
   0x2D, 0x2C, 0x10, 0x39, 0x13, 0x5B, 0x6C, 0x10, 0x60, 0x6C, 0x0C, 0x63, 0x71, 0x0D, 0x67, 0x73, 
   0x0E, 0x70, 0x7A, 0x12, 0x7C, 0x89, 0x0F, 0x81, 0x8D, 0x12, 0x82, 0x8E, 0x15, 0x81, 0x8E, 0x17, 
   0x80, 0x8F, 0x1D, 0x81, 0x90, 0x20, 0x7C, 0x8E, 0x25, 0x7B, 0x90, 0x2D, 0x79, 0x93, 0x33, 0x7E, 
   0x9C, 0x39, 0x79, 0x9B, 0x39, 0x74, 0x9B, 0x3C, 0x72, 0x9B, 0x42, 0x72, 0xA0, 0x4B, 0x71, 0xA2, 
   0x4E, 0x77, 0xAD, 0x66, 0x63, 0xB1, 0x73, 0x49, 0x9F, 0x69, 0x54, 0x9F, 0x63, 0x5A, 0xA3, 0x5F, 
   0x58, 0x9E, 0x5C, 0x4D, 0x95, 0x61, 0x49, 0x94, 0x5F, 0x41, 0x8B, 0x5E, 0x3C, 0x84, 0x65, 0x36, 
   0x89, 0x66, 0x2F, 0x7F, 0x68, 0x29, 0x7B, 0x68, 0x22, 0x74, 0x67, 0x1B, 0x6F, 0x64, 0x16, 0x69, 
   0x5E, 0x12, 0x62, 0x5A, 0x0C, 0x59, 0x57, 0x01, 0x50, 0x55, 0x00, 0x4D, 0x4C, 0x01, 0x45, 0x4A, 
   0x00, 0x42, 0x43, 0x00, 0x3C, 0x3D, 0x00, 0x36, 0x38, 0x00, 0x32, 0x34, 0x00, 0x2E, 0x2D, 0x00, 
   0x27, 0x28, 0x01, 0x21, 0x24, 0x00, 0x1D, 0x1E, 0x00, 0x18, 0x18, 0x00, 0x13, 0x13, 0x00, 0x0E, 
   0x0E, 0x00, 0x09, 0x09, 0x00, 0x04, 0x06, 0x00, 0x01, 0x0C, 0x00, 0x06, 0x12, 0x00, 0x0C, 0x16, 
   0x00, 0x12, 0x1B, 0x00, 0x17, 0x21, 0x00, 0x1C, 0x27, 0x00, 0x20, 0x2B, 0x00, 0x25, 0x30, 0x00, 
   0x2A, 0x2E, 0x03, 0x2E, 0x16, 0x52, 0x64, 0x0A, 0x67, 0x70, 0x06, 0x6F, 0x77, 0x0E, 0x7B, 0x85, 
   0x0D, 0x81, 0x8B, 0x0D, 0x82, 0x8D, 0x0D, 0x82, 0x8B, 0x10, 0x80, 0x8C, 0x15, 0x80, 0x8D, 0x19, 
   0x7F, 0x8E, 0x19, 0x7A, 0x8C, 0x1E, 0x7A, 0x8E, 0x22, 0x78, 0x8F, 0x2B, 0x7B, 0x95, 0x31, 0x79, 
   0x96, 0x31, 0x73, 0x94, 0x36, 0x72, 0x96, 0x3A, 0x6E, 0x96, 0x40, 0x70, 0x9A, 0x4B, 0x6B, 0x9C, 
   0x4C, 0x6A, 0x9C, 0x6C, 0x44, 0x97, 0x72, 0x41, 0x96, 0x65, 0x4C, 0x96, 0x62, 0x58, 0x9E, 0x5C, 
   0x52, 0x96, 0x5B, 0x4B, 0x91, 0x5D, 0x44, 0x8D, 0x5E, 0x3F, 0x89, 0x5C, 0x37, 0x83, 0x5F, 0x30, 
   0x7E, 0x63, 0x2D, 0x7C, 0x62, 0x24, 0x75, 0x63, 0x1F, 0x70, 0x61, 0x18, 0x69, 0x5D, 0x14, 0x62, 
   0x5A, 0x13, 0x60, 0x5A, 0x09, 0x56, 0x55, 0x02, 0x4F, 0x4F, 0x00, 0x49, 0x4A, 0x00, 0x44, 0x46, 
   0x00, 0x3E, 0x41, 0x00, 0x39, 0x3B, 0x00, 0x34, 0x35, 0x00, 0x2F, 0x30, 0x00, 0x2A, 0x2B, 0x00, 
   0x25, 0x27, 0x00, 0x21, 0x21, 0x00, 0x1C, 0x1B, 0x00, 0x17, 0x16, 0x00, 0x12, 0x12, 0x00, 0x0D, 
   0x0C, 0x00, 0x08, 0x06, 0x00, 0x02, 0x04, 0x00, 0x00, 0x09, 0x00, 0x05, 0x10, 0x00, 0x0B, 0x13, 
   0x00, 0x0F, 0x19, 0x00, 0x15, 0x1E, 0x00, 0x19, 0x24, 0x00, 0x1E, 0x29, 0x00, 0x23, 0x2D, 0x00, 
   0x28, 0x30, 0x01, 0x2C, 0x1D, 0x36, 0x4F, 0x08, 0x6B, 0x74, 0x0C, 0x82, 0x88, 0x09, 0x83, 0x8A, 
   0x08, 0x83, 0x8B, 0x0B, 0x81, 0x8B, 0x0D, 0x7F, 0x89, 0x11, 0x7F, 0x8B, 0x14, 0x7C, 0x8A, 0x16, 
   0x79, 0x89, 0x1A, 0x79, 0x8B, 0x1E, 0x77, 0x8C, 0x25, 0x79, 0x8F, 0x2A, 0x78, 0x92, 0x2B, 0x71, 
   0x8F, 0x31, 0x71, 0x92, 0x33, 0x6D, 0x90, 0x38, 0x6B, 0x93, 0x3D, 0x6A, 0x95, 0x46, 0x68, 0x95, 
   0x4F, 0x5E, 0x98, 0x7F, 0x2B, 0x89, 0x6E, 0x3A, 0x8E, 0x61, 0x45, 0x8D, 0x60, 0x54, 0x98, 0x56, 
   0x4D, 0x8F, 0x59, 0x49, 0x8D, 0x59, 0x40, 0x87, 0x5C, 0x3C, 0x85, 0x5A, 0x34, 0x7F, 0x5C, 0x2E, 
   0x7A, 0x5D, 0x27, 0x74, 0x60, 0x23, 0x71, 0x5D, 0x1A, 0x6A, 0x5D, 0x15, 0x64, 0x59, 0x14, 0x5F, 
   0x57, 0x10, 0x5A, 0x56, 0x05, 0x4F, 0x53, 0x02, 0x4C, 0x4D, 0x01, 0x46, 0x47, 0x00, 0x40, 0x43, 
   0x00, 0x3B, 0x3D, 0x00, 0x37, 0x38, 0x00, 0x31, 0x32, 0x00, 0x2D, 0x2D, 0x00, 0x28, 0x29, 0x00, 
   0x23, 0x24, 0x00, 0x1E, 0x1F, 0x00, 0x1A, 0x19, 0x00, 0x14, 0x13, 0x00, 0x0F, 0x10, 0x00, 0x0B, 
   0x09, 0x00, 0x05, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x02, 0x0C, 0x00, 0x08, 0x10, 
   0x00, 0x0D, 0x16, 0x00, 0x12, 0x1C, 0x00, 0x17, 0x21, 0x00, 0x1B, 0x25, 0x00, 0x20, 0x2A, 0x00, 
   0x25, 0x2E, 0x00, 0x29, 0x28, 0x1A, 0x3C, 0x0A, 0x61, 0x6C, 0x05, 0x7A, 0x7F, 0x06, 0x82, 0x88, 
   0x06, 0x81, 0x87, 0x0B, 0x7E, 0x88, 0x0E, 0x7E, 0x88, 0x10, 0x7B, 0x87, 0x13, 0x79, 0x87, 0x17, 
   0x78, 0x88, 0x19, 0x76, 0x88, 0x1F, 0x76, 0x8B, 0x25, 0x76, 0x8E, 0x26, 0x71, 0x8C, 0x2B, 0x6E, 
   0x8C, 0x2F, 0x6C, 0x8D, 0x33, 0x6B, 0x8C, 0x39, 0x6A, 0x90, 0x3B, 0x65, 0x8F, 0x40, 0x66, 0x90, 
   0x58, 0x49, 0x8D, 0x83, 0x1D, 0x81, 0x6C, 0x34, 0x87, 0x5E, 0x3F, 0x85, 0x5D, 0x4E, 0x90, 0x54, 
   0x4A, 0x89, 0x56, 0x45, 0x87, 0x57, 0x3D, 0x82, 0x57, 0x37, 0x7D, 0x59, 0x32, 0x7A, 0x5A, 0x2B, 
   0x74, 0x5B, 0x25, 0x6F, 0x5A, 0x1F, 0x6A, 0x5C, 0x1A, 0x66, 0x59, 0x13, 0x5F, 0x54, 0x11, 0x5A, 
   0x56, 0x0C, 0x54, 0x52, 0x02, 0x4A, 0x4F, 0x02, 0x48, 0x49, 0x02, 0x42, 0x45, 0x01, 0x3D, 0x40, 
   0x01, 0x38, 0x3A, 0x00, 0x33, 0x34, 0x00, 0x2E, 0x2E, 0x00, 0x29, 0x2A, 0x00, 0x25, 0x26, 0x00, 
   0x21, 0x21, 0x00, 0x1B, 0x1C, 0x00, 0x17, 0x16, 0x00, 0x12, 0x10, 0x00, 0x0D, 0x0C, 0x00, 0x0A, 
   0x06, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x0A, 0x00, 0x06, 0x0E, 
   0x00, 0x0B, 0x13, 0x00, 0x10, 0x19, 0x00, 0x15, 0x1E, 0x00, 0x19, 0x22, 0x00, 0x1D, 0x28, 0x00, 
   0x23, 0x2C, 0x00, 0x28, 0x2B, 0x05, 0x2C, 0x12, 0x53, 0x62, 0x09, 0x73, 0x7A, 0x06, 0x7B, 0x80, 
   0x09, 0x7E, 0x85, 0x0C, 0x7C, 0x86, 0x0C, 0x7A, 0x85, 0x0F, 0x79, 0x85, 0x13, 0x77, 0x86, 0x15, 
   0x75, 0x85, 0x1A, 0x74, 0x87, 0x20, 0x75, 0x8A, 0x21, 0x71, 0x88, 0x24, 0x6D, 0x88, 0x2A, 0x6C, 
   0x8B, 0x2D, 0x69, 0x89, 0x31, 0x68, 0x89, 0x38, 0x66, 0x8C, 0x3B, 0x62, 0x8D, 0x40, 0x60, 0x89, 
   0x6A, 0x2E, 0x7E, 0x81, 0x14, 0x7C, 0x68, 0x2E, 0x7F, 0x5C, 0x3A, 0x7F, 0x58, 0x47, 0x87, 0x54, 
   0x48, 0x86, 0x51, 0x40, 0x80, 0x54, 0x3B, 0x7E, 0x54, 0x34, 0x79, 0x55, 0x2E, 0x74, 0x58, 0x29, 
   0x70, 0x57, 0x22, 0x6A, 0x56, 0x1B, 0x64, 0x56, 0x15, 0x5F, 0x56, 0x12, 0x5C, 0x52, 0x10, 0x57, 
   0x51, 0x05, 0x4D, 0x51, 0x03, 0x49, 0x4B, 0x01, 0x43, 0x46, 0x01, 0x3E, 0x41, 0x01, 0x39, 0x3C, 
   0x00, 0x35, 0x37, 0x00, 0x30, 0x31, 0x00, 0x2B, 0x2C, 0x00, 0x27, 0x28, 0x00, 0x23, 0x23, 0x00, 
   0x1E, 0x1F, 0x00, 0x19, 0x19, 0x00, 0x15, 0x13, 0x00, 0x10, 0x0E, 0x00, 0x0B, 0x0A, 0x00, 0x07, 
   0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x01, 0x0B, 
   0x00, 0x06, 0x12, 0x00, 0x0C, 0x18, 0x00, 0x11, 0x1C, 0x00, 0x16, 0x1F, 0x00, 0x1B, 0x25, 0x00, 
   0x21, 0x27, 0x00, 0x25, 0x2F, 0x01, 0x28, 0x18, 0x37, 0x4F, 0x09, 0x6A, 0x72, 0x09, 0x76, 0x7C, 
   0x0B, 0x7D, 0x83, 0x09, 0x7B, 0x82, 0x0C, 0x78, 0x83, 0x0F, 0x77, 0x83, 0x13, 0x75, 0x83, 0x15, 
   0x74, 0x84, 0x1A, 0x74, 0x87, 0x1C, 0x71, 0x86, 0x1E, 0x6D, 0x86, 0x22, 0x6D, 0x87, 0x25, 0x68, 
   0x85, 0x2A, 0x66, 0x85, 0x30, 0x65, 0x87, 0x34, 0x62, 0x87, 0x3B, 0x61, 0x89, 0x3E, 0x57, 0x83, 
   0x71, 0x17, 0x72, 0x7B, 0x10, 0x74, 0x67, 0x27, 0x78, 0x5A, 0x35, 0x79, 0x55, 0x3F, 0x7F, 0x53, 
   0x45, 0x84, 0x4D, 0x3C, 0x7B, 0x51, 0x39, 0x79, 0x51, 0x31, 0x72, 0x51, 0x2B, 0x6D, 0x55, 0x26, 
   0x6A, 0x53, 0x1F, 0x64, 0x53, 0x18, 0x5F, 0x54, 0x12, 0x5A, 0x50, 0x10, 0x56, 0x51, 0x0B, 0x51, 
   0x50, 0x03, 0x47, 0x49, 0x02, 0x42, 0x47, 0x01, 0x3F, 0x43, 0x01, 0x3B, 0x3D, 0x00, 0x36, 0x38, 
   0x00, 0x31, 0x32, 0x00, 0x2D, 0x2D, 0x00, 0x29, 0x29, 0x00, 0x24, 0x25, 0x00, 0x21, 0x1F, 0x00, 
   0x1B, 0x1C, 0x00, 0x17, 0x18, 0x00, 0x12, 0x12, 0x00, 0x0D, 0x0B, 0x00, 0x07, 0x06, 0x00, 0x01, 
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x08, 
   0x00, 0x04, 0x0E, 0x00, 0x0A, 0x13, 0x00, 0x0E, 0x18, 0x00, 0x13, 0x1C, 0x00, 0x17, 0x21, 0x00, 
   0x1D, 0x27, 0x00, 0x21, 0x26, 0x01, 0x25, 0x25, 0x15, 0x35, 0x0C, 0x5E, 0x69, 0x07, 0x72, 0x79, 
   0x08, 0x7A, 0x80, 0x0B, 0x79, 0x81, 0x0D, 0x76, 0x81, 0x0F, 0x74, 0x81, 0x13, 0x73, 0x82, 0x16, 
   0x72, 0x83, 0x18, 0x70, 0x82, 0x1B, 0x6D, 0x82, 0x1E, 0x6B, 0x82, 0x21, 0x69, 0x83, 0x25, 0x66, 
   0x82, 0x29, 0x63, 0x82, 0x2E, 0x62, 0x84, 0x30, 0x5D, 0x82, 0x35, 0x5E, 0x84, 0x45, 0x46, 0x7A, 
   0x6E, 0x0D, 0x68, 0x76, 0x0D, 0x6C, 0x63, 0x20, 0x70, 0x58, 0x30, 0x73, 0x51, 0x3A, 0x79, 0x4F, 
   0x41, 0x7E, 0x4B, 0x39, 0x75, 0x4D, 0x35, 0x72, 0x4D, 0x2F, 0x6E, 0x4E, 0x28, 0x69, 0x50, 0x22, 
   0x65, 0x52, 0x1C, 0x60, 0x51, 0x14, 0x59, 0x4F, 0x11, 0x55, 0x4C, 0x0E, 0x52, 0x4A, 0x04, 0x48, 
   0x4C, 0x02, 0x43, 0x46, 0x02, 0x3F, 0x42, 0x00, 0x3A, 0x3E, 0x00, 0x37, 0x39, 0x00, 0x32, 0x33, 
   0x00, 0x2E, 0x2F, 0x00, 0x2A, 0x2B, 0x00, 0x26, 0x26, 0x00, 0x21, 0x21, 0x00, 0x1D, 0x1C, 0x00, 
   0x17, 0x19, 0x00, 0x13, 0x15, 0x00, 0x0F, 0x0F, 0x00, 0x0B, 0x09, 0x00, 0x05, 0x04, 0x00, 0x00, 
   0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 
   0x00, 0x01, 0x0B, 0x00, 0x06, 0x11, 0x00, 0x0C, 0x16, 0x00, 0x10, 0x19, 0x00, 0x14, 0x1E, 0x00, 
   0x19, 0x22, 0x00, 0x1D, 0x27, 0x00, 0x21, 0x2B, 0x01, 0x24, 0x16, 0x40, 0x53, 0x0E, 0x6D, 0x75, 
   0x08, 0x74, 0x7C, 0x0C, 0x76, 0x7E, 0x0D, 0x75, 0x80, 0x10, 0x72, 0x7F, 0x14, 0x71, 0x80, 0x16, 
   0x6F, 0x7F, 0x17, 0x6C, 0x7E, 0x1A, 0x6A, 0x7E, 0x1E, 0x69, 0x80, 0x20, 0x66, 0x7E, 0x24, 0x63, 
   0x7F, 0x28, 0x61, 0x7F, 0x2C, 0x5F, 0x80, 0x2F, 0x5B, 0x7E, 0x34, 0x59, 0x7F, 0x4F, 0x2E, 0x6C, 
   0x6C, 0x0A, 0x61, 0x6E, 0x0C, 0x64, 0x61, 0x19, 0x67, 0x55, 0x2A, 0x6C, 0x4E, 0x35, 0x72, 0x4C, 
   0x3D, 0x77, 0x49, 0x37, 0x71, 0x48, 0x30, 0x6B, 0x4B, 0x2D, 0x69, 0x4A, 0x25, 0x63, 0x4C, 0x1F, 
   0x5E, 0x4F, 0x19, 0x5A, 0x4E, 0x13, 0x54, 0x4A, 0x10, 0x4F, 0x48, 0x0A, 0x4A, 0x48, 0x02, 0x42, 
   0x46, 0x02, 0x3E, 0x43, 0x02, 0x3B, 0x3E, 0x01, 0x37, 0x38, 0x00, 0x32, 0x35, 0x00, 0x2F, 0x2F, 
   0x00, 0x29, 0x2B, 0x00, 0x25, 0x27, 0x00, 0x22, 0x23, 0x00, 0x1E, 0x1E, 0x00, 0x1A, 0x1A, 0x00, 
   0x14, 0x16, 0x00, 0x10, 0x11, 0x00, 0x0C, 0x0B, 0x00, 0x06, 0x05, 0x00, 0x02, 0x01, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
   0x00, 0x00, 0x08, 0x00, 0x04, 0x0E, 0x00, 0x09, 0x12, 0x00, 0x0D, 0x16, 0x00, 0x10, 0x1B, 0x00, 
   0x15, 0x20, 0x00, 0x18, 0x21, 0x00, 0x1D, 0x29, 0x01, 0x23, 0x1D, 0x15, 0x32, 0x14, 0x61, 0x6D, 
   0x08, 0x6E, 0x76, 0x0B, 0x74, 0x7D, 0x0C, 0x72, 0x7E, 0x10, 0x71, 0x7E, 0x13, 0x6F, 0x7E, 0x14, 
   0x6C, 0x7C, 0x15, 0x6A, 0x7A, 0x1A, 0x68, 0x7B, 0x1C, 0x66, 0x7B, 0x1F, 0x63, 0x7B, 0x24, 0x61, 
   0x7B, 0x28, 0x5F, 0x7D, 0x28, 0x5B, 0x7B, 0x2C, 0x58, 0x7B, 0x34, 0x53, 0x78, 0x58, 0x17, 0x5E, 
   0x65, 0x08, 0x5C, 0x64, 0x0B, 0x5D, 0x5D, 0x13, 0x5F, 0x53, 0x26, 0x66, 0x49, 0x2F, 0x6A, 0x46, 
   0x38, 0x70, 0x47, 0x34, 0x6D, 0x46, 0x2D, 0x66, 0x47, 0x29, 0x64, 0x46, 0x22, 0x5E, 0x48, 0x1C, 
   0x59, 0x4A, 0x16, 0x54, 0x48, 0x12, 0x4F, 0x48, 0x0E, 0x4A, 0x46, 0x04, 0x41, 0x46, 0x01, 0x3D, 
   0x41, 0x01, 0x3A, 0x3E, 0x01, 0x36, 0x39, 0x00, 0x32, 0x35, 0x00, 0x2F, 0x30, 0x00, 0x2B, 0x2C, 
   0x00, 0x26, 0x28, 0x00, 0x22, 0x24, 0x00, 0x1E, 0x1F, 0x00, 0x1A, 0x1B, 0x00, 0x16, 0x16, 0x00, 
   0x10, 0x12, 0x00, 0x0D, 0x0E, 0x00, 0x09, 0x08, 0x00, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x03, 0x00, 0x01, 0x08, 0x00, 0x07, 0x0E, 0x00, 0x0B, 0x13, 0x00, 0x0E, 0x18, 0x00, 
   0x12, 0x1D, 0x00, 0x16, 0x1E, 0x00, 0x1A, 0x24, 0x00, 0x1F, 0x25, 0x01, 0x23, 0x14, 0x3E, 0x52, 
   0x07, 0x69, 0x70, 0x0A, 0x70, 0x79, 0x0C, 0x71, 0x7B, 0x0F, 0x6E, 0x7B, 0x10, 0x6C, 0x7B, 0x12, 
   0x6A, 0x7A, 0x15, 0x68, 0x79, 0x18, 0x65, 0x79, 0x1A, 0x63, 0x78, 0x1D, 0x60, 0x77, 0x22, 0x5E, 
   0x77, 0x26, 0x5D, 0x78, 0x26, 0x59, 0x77, 0x2D, 0x55, 0x77, 0x34, 0x43, 0x6D, 0x58, 0x09, 0x55, 
   0x5C, 0x07, 0x55, 0x5F, 0x08, 0x56, 0x58, 0x0F, 0x57, 0x4F, 0x1F, 0x60, 0x47, 0x29, 0x63, 0x43, 
   0x32, 0x68, 0x43, 0x32, 0x68, 0x42, 0x2A, 0x61, 0x44, 0x24, 0x5D, 0x45, 0x1F, 0x59, 0x44, 0x19, 
   0x53, 0x42, 0x13, 0x4E, 0x43, 0x10, 0x4A, 0x44, 0x08, 0x43, 0x43, 0x02, 0x3D, 0x41, 0x00, 0x3A, 
   0x3C, 0x00, 0x36, 0x38, 0x00, 0x32, 0x35, 0x00, 0x2E, 0x30, 0x00, 0x2A, 0x2C, 0x00, 0x26, 0x29, 
   0x00, 0x22, 0x25, 0x00, 0x1E, 0x20, 0x00, 0x1B, 0x1C, 0x00, 0x17, 0x18, 0x00, 0x13, 0x13, 0x00, 
   0x0E, 0x0E, 0x00, 0x0B, 0x09, 0x00, 0x07, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x0A, 0x00, 0x07, 0x10, 0x00, 0x0B, 0x14, 0x00, 
   0x0E, 0x18, 0x00, 0x13, 0x1C, 0x00, 0x17, 0x20, 0x00, 0x1B, 0x24, 0x00, 0x1E, 0x1F, 0x0E, 0x2A, 
   0x0D, 0x5B, 0x65, 0x0C, 0x67, 0x71, 0x0D, 0x6E, 0x78, 0x0D, 0x6C, 0x77, 0x0F, 0x6A, 0x77, 0x11, 
   0x67, 0x77, 0x14, 0x65, 0x76, 0x17, 0x63, 0x76, 0x19, 0x60, 0x74, 0x1B, 0x5D, 0x73, 0x20, 0x5C, 
   0x74, 0x20, 0x59, 0x73, 0x27, 0x55, 0x72, 0x25, 0x53, 0x73, 0x3A, 0x2B, 0x5B, 0x53, 0x06, 0x4F, 
   0x56, 0x06, 0x4F, 0x59, 0x07, 0x50, 0x53, 0x0B, 0x51, 0x4A, 0x1B, 0x59, 0x43, 0x24, 0x5C, 0x40, 
   0x2D, 0x62, 0x40, 0x2F, 0x63, 0x3E, 0x26, 0x5C, 0x3F, 0x20, 0x57, 0x41, 0x1C, 0x53, 0x41, 0x15, 
   0x4E, 0x41, 0x10, 0x49, 0x42, 0x0B, 0x44, 0x40, 0x02, 0x3B, 0x40, 0x01, 0x38, 0x3B, 0x00, 0x35, 
   0x37, 0x00, 0x31, 0x33, 0x00, 0x2E, 0x30, 0x00, 0x2A, 0x2C, 0x00, 0x26, 0x28, 0x00, 0x23, 0x24, 
   0x00, 0x1F, 0x20, 0x00, 0x1B, 0x1C, 0x00, 0x17, 0x19, 0x00, 0x13, 0x14, 0x00, 0x0F, 0x10, 0x00, 
   0x0B, 0x0B, 0x00, 0x07, 0x06, 0x00, 0x04, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x06, 0x00, 0x03, 0x0B, 0x00, 0x07, 0x10, 0x00, 
   0x0B, 0x14, 0x00, 0x0F, 0x17, 0x00, 0x13, 0x1C, 0x00, 0x17, 0x20, 0x00, 0x1A, 0x21, 0x00, 0x1C, 
   0x1C, 0x29, 0x3F, 0x0B, 0x61, 0x6B, 0x0E, 0x69, 0x73, 0x0C, 0x6A, 0x74, 0x0F, 0x67, 0x74, 0x11, 
   0x65, 0x74, 0x14, 0x63, 0x73, 0x16, 0x60, 0x73, 0x18, 0x5E, 0x71, 0x19, 0x5C, 0x70, 0x1F, 0x59, 
   0x71, 0x1D, 0x56, 0x6F, 0x26, 0x51, 0x6E, 0x24, 0x4D, 0x6C, 0x44, 0x15, 0x4C, 0x4E, 0x05, 0x48, 
   0x50, 0x05, 0x48, 0x51, 0x06, 0x49, 0x4E, 0x08, 0x49, 0x46, 0x16, 0x51, 0x41, 0x1F, 0x55, 0x3C, 
   0x2A, 0x5B, 0x3C, 0x2B, 0x5B, 0x3B, 0x24, 0x56, 0x3C, 0x1E, 0x51, 0x3D, 0x19, 0x4D, 0x3F, 0x12, 
   0x48, 0x40, 0x0D, 0x43, 0x3D, 0x03, 0x39, 0x3E, 0x01, 0x36, 0x3A, 0x00, 0x33, 0x36, 0x00, 0x30, 
   0x32, 0x00, 0x2C, 0x2E, 0x00, 0x28, 0x2B, 0x00, 0x26, 0x28, 0x00, 0x22, 0x23, 0x00, 0x1E, 0x1F, 
   0x00, 0x1A, 0x1C, 0x00, 0x17, 0x18, 0x00, 0x13, 0x14, 0x00, 0x0F, 0x10, 0x00, 0x0B, 0x0B, 0x00, 
   0x07, 0x06, 0x00, 0x03, 0x03, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x07, 0x00, 0x03, 0x0B, 0x00, 
   0x07, 0x0F, 0x00, 0x0B, 0x12, 0x00, 0x0F, 0x17, 0x00, 0x13, 0x1A, 0x00, 0x16, 0x1E, 0x00, 0x19, 
   0x21, 0x02, 0x1F, 0x14, 0x47, 0x55, 0x0C, 0x60, 0x6B, 0x0C, 0x68, 0x72, 0x0E, 0x65, 0x71, 0x11, 
   0x63, 0x71, 0x13, 0x60, 0x70, 0x16, 0x5D, 0x6F, 0x16, 0x5B, 0x6E, 0x18, 0x59, 0x6C, 0x1C, 0x56, 
   0x6C, 0x1E, 0x52, 0x6B, 0x21, 0x50, 0x69, 0x2D, 0x40, 0x62, 0x43, 0x06, 0x41, 0x4A, 0x04, 0x42, 
   0x4A, 0x04, 0x42, 0x4B, 0x05, 0x43, 0x49, 0x05, 0x42, 0x42, 0x12, 0x4A, 0x3E, 0x1B, 0x4D, 0x39, 
   0x26, 0x54, 0x38, 0x26, 0x53, 0x39, 0x21, 0x50, 0x38, 0x1B, 0x4B, 0x38, 0x15, 0x46, 0x3D, 0x0F, 
   0x41, 0x39, 0x04, 0x37, 0x39, 0x01, 0x33, 0x38, 0x00, 0x30, 0x34, 0x00, 0x2F, 0x31, 0x00, 0x2B, 
   0x2D, 0x00, 0x27, 0x29, 0x00, 0x24, 0x27, 0x00, 0x22, 0x23, 0x00, 0x1E, 0x1E, 0x00, 0x1A, 0x1B, 
   0x00, 0x17, 0x17, 0x00, 0x13, 0x13, 0x00, 0x10, 0x10, 0x00, 0x0B, 0x0B, 0x00, 0x07, 0x07, 0x00, 
   0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x07, 0x00, 
   0x03, 0x0B, 0x00, 0x05, 0x0F, 0x00, 0x0A, 0x13, 0x00, 0x0F, 0x18, 0x00, 0x13, 0x1C, 0x00, 0x16, 
   0x1C, 0x00, 0x1A, 0x18, 0x0E, 0x25, 0x14, 0x50, 0x5D, 0x08, 0x61, 0x6A, 0x0D, 0x62, 0x6E, 0x0F, 
   0x61, 0x6D, 0x10, 0x5E, 0x6D, 0x11, 0x5B, 0x6C, 0x14, 0x59, 0x6B, 0x17, 0x56, 0x69, 0x1A, 0x53, 
   0x68, 0x1E, 0x4F, 0x67, 0x1C, 0x4D, 0x66, 0x30, 0x29, 0x51, 0x41, 0x03, 0x3C, 0x44, 0x03, 0x3C, 
   0x44, 0x03, 0x3C, 0x44, 0x03, 0x3C, 0x42, 0x04, 0x3D, 0x3F, 0x0F, 0x44, 0x39, 0x17, 0x48, 0x36, 
   0x21, 0x4C, 0x34, 0x22, 0x4C, 0x34, 0x1F, 0x4A, 0x33, 0x18, 0x45, 0x37, 0x11, 0x40, 0x38, 0x06, 
   0x36, 0x35, 0x02, 0x30, 0x34, 0x00, 0x2E, 0x32, 0x00, 0x2C, 0x2D, 0x00, 0x29, 0x2C, 0x00, 0x25, 
   0x29, 0x00, 0x23, 0x25, 0x00, 0x20, 0x22, 0x00, 0x1D, 0x1E, 0x00, 0x19, 0x1A, 0x00, 0x16, 0x17, 
   0x00, 0x13, 0x13, 0x00, 0x0F, 0x0F, 0x00, 0x0C, 0x0C, 0x00, 0x06, 0x07, 0x00, 0x03, 0x03, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
   0x00, 0x07, 0x00, 0x02, 0x0B, 0x00, 0x06, 0x0F, 0x00, 0x0B, 0x12, 0x00, 0x0F, 0x15, 0x00, 0x12, 
   0x1A, 0x00, 0x16, 0x1C, 0x00, 0x18, 0x12, 0x19, 0x2C, 0x10, 0x52, 0x5D, 0x0E, 0x5E, 0x68, 0x0E, 
   0x5E, 0x69, 0x10, 0x5B, 0x69, 0x12, 0x57, 0x68, 0x14, 0x56, 0x66, 0x16, 0x53, 0x65, 0x18, 0x50, 
   0x64, 0x1A, 0x4D, 0x62, 0x1D, 0x46, 0x5F, 0x2F, 0x15, 0x40, 0x3C, 0x02, 0x36, 0x3C, 0x02, 0x36, 
   0x3D, 0x02, 0x36, 0x3D, 0x02, 0x37, 0x3B, 0x03, 0x35, 0x3C, 0x0C, 0x3D, 0x34, 0x11, 0x3F, 0x30, 
   0x1C, 0x45, 0x30, 0x1F, 0x46, 0x30, 0x1C, 0x44, 0x31, 0x13, 0x3D, 0x32, 0x07, 0x33, 0x34, 0x01, 
   0x2C, 0x30, 0x01, 0x2B, 0x2E, 0x00, 0x29, 0x2C, 0x00, 0x27, 0x29, 0x00, 0x24, 0x26, 0x00, 0x21, 
   0x24, 0x00, 0x1E, 0x21, 0x00, 0x1A, 0x1D, 0x00, 0x18, 0x19, 0x00, 0x15, 0x15, 0x00, 0x12, 0x13, 
   0x00, 0x0F, 0x10, 0x00, 0x0C, 0x0B, 0x00, 0x08, 0x07, 0x00, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
   0x00, 0x04, 0x00, 0x00, 0x06, 0x00, 0x02, 0x0B, 0x00, 0x06, 0x0E, 0x00, 0x0A, 0x11, 0x00, 0x0D, 
   0x14, 0x00, 0x10, 0x18, 0x00, 0x13, 0x1B, 0x00, 0x15, 0x18, 0x25, 0x36, 0x09, 0x52, 0x5A, 0x0E, 
   0x5B, 0x64, 0x0C, 0x5A, 0x65, 0x10, 0x56, 0x64, 0x13, 0x53, 0x62, 0x14, 0x51, 0x60, 0x16, 0x4D, 
   0x60, 0x14, 0x4A, 0x5E, 0x22, 0x3C, 0x55, 0x2E, 0x06, 0x2E, 0x34, 0x02, 0x30, 0x35, 0x01, 0x30, 
   0x36, 0x02, 0x30, 0x36, 0x02, 0x30, 0x35, 0x02, 0x2F, 0x34, 0x05, 0x31, 0x33, 0x0D, 0x38, 0x29, 
   0x18, 0x3D, 0x2B, 0x1B, 0x3F, 0x2F, 0x16, 0x3B, 0x2C, 0x07, 0x2E, 0x2E, 0x01, 0x28, 0x2E, 0x01, 
   0x27, 0x2B, 0x01, 0x25, 0x29, 0x00, 0x24, 0x26, 0x00, 0x21, 0x24, 0x00, 0x1F, 0x21, 0x00, 0x1C, 
   0x1F, 0x00, 0x19, 0x1C, 0x00, 0x16, 0x19, 0x00, 0x13, 0x15, 0x00, 0x10, 0x11, 0x00, 0x0D, 0x0F, 
   0x00, 0x0A, 0x0B, 0x00, 0x07, 0x07, 0x00, 0x04, 0x04, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x02, 0x09, 0x00, 0x04, 0x0C, 0x00, 0x08, 
   0x10, 0x00, 0x0B, 0x14, 0x00, 0x0E, 0x16, 0x00, 0x11, 0x16, 0x02, 0x14, 0x12, 0x2A, 0x37, 0x11, 
   0x4B, 0x55, 0x0E, 0x54, 0x5D, 0x0B, 0x54, 0x5F, 0x0F, 0x52, 0x5D, 0x12, 0x4E, 0x5C, 0x14, 0x4B, 
   0x5B, 0x14, 0x47, 0x58, 0x21, 0x2A, 0x43, 0x2D, 0x01, 0x27, 0x2E, 0x01, 0x29, 0x2E, 0x01, 0x2A, 
   0x2E, 0x01, 0x2A, 0x2E, 0x01, 0x2A, 0x2E, 0x02, 0x29, 0x30, 0x02, 0x29, 0x2E, 0x04, 0x2A, 0x2B, 
   0x11, 0x33, 0x2C, 0x13, 0x35, 0x28, 0x06, 0x2A, 0x2B, 0x01, 0x26, 0x29, 0x01, 0x23, 0x28, 0x01, 
   0x21, 0x26, 0x00, 0x20, 0x23, 0x00, 0x1E, 0x21, 0x00, 0x1C, 0x1F, 0x00, 0x1A, 0x1C, 0x00, 0x17, 
   0x1A, 0x00, 0x14, 0x17, 0x00, 0x10, 0x14, 0x00, 0x0E, 0x10, 0x00, 0x0B, 0x0C, 0x00, 0x08, 0x09, 
   0x00, 0x04, 0x06, 0x00, 0x02, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x05, 0x00, 0x01, 0x08, 0x00, 0x04, 
   0x0C, 0x00, 0x07, 0x10, 0x00, 0x0A, 0x14, 0x00, 0x0D, 0x13, 0x00, 0x0F, 0x16, 0x01, 0x12, 0x0F, 
   0x19, 0x28, 0x17, 0x40, 0x4C, 0x0C, 0x4B, 0x55, 0x0C, 0x4F, 0x59, 0x0D, 0x4C, 0x57, 0x11, 0x47, 
   0x56, 0x17, 0x41, 0x53, 0x1C, 0x17, 0x30, 0x27, 0x01, 0x22, 0x2A, 0x00, 0x24, 0x2A, 0x01, 0x24, 
   0x2A, 0x01, 0x24, 0x2A, 0x00, 0x24, 0x2A, 0x01, 0x24, 0x2C, 0x00, 0x24, 0x2B, 0x00, 0x24, 0x28, 
   0x03, 0x25, 0x24, 0x02, 0x23, 0x28, 0x00, 0x21, 0x26, 0x00, 0x20, 0x23, 0x00, 0x1E, 0x21, 0x00, 
   0x1C, 0x21, 0x00, 0x1A, 0x1E, 0x00, 0x19, 0x1C, 0x00, 0x17, 0x1A, 0x00, 0x15, 0x18, 0x00, 0x13, 
   0x15, 0x00, 0x0F, 0x13, 0x00, 0x0C, 0x10, 0x00, 0x0A, 0x0C, 0x00, 0x07, 0x08, 0x00, 0x04, 0x05, 
   0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 
   0x07, 0x00, 0x03, 0x0A, 0x00, 0x04, 0x0D, 0x00, 0x07, 0x0F, 0x00, 0x0A, 0x12, 0x00, 0x0E, 0x13, 
   0x01, 0x10, 0x0C, 0x0C, 0x19, 0x11, 0x2D, 0x38, 0x12, 0x3F, 0x4A, 0x0E, 0x45, 0x50, 0x0F, 0x45, 
   0x52, 0x15, 0x3A, 0x49, 0x1A, 0x06, 0x1E, 0x21, 0x00, 0x1C, 0x25, 0x00, 0x1E, 0x24, 0x01, 0x1E, 
   0x24, 0x01, 0x1E, 0x24, 0x01, 0x1E, 0x24, 0x01, 0x1E, 0x24, 0x01, 0x1E, 0x24, 0x01, 0x1E, 0x22, 
   0x00, 0x1D, 0x22, 0x00, 0x1C, 0x21, 0x01, 0x1B, 0x21, 0x00, 0x1A, 0x1E, 0x00, 0x18, 0x1C, 0x00, 
   0x17, 0x1A, 0x00, 0x15, 0x18, 0x00, 0x13, 0x16, 0x00, 0x11, 0x14, 0x00, 0x0F, 0x12, 0x00, 0x0E, 
   0x10, 0x00, 0x0A, 0x0D, 0x00, 0x07, 0x0A, 0x00, 0x04, 0x07, 0x00, 0x03, 0x03, 0x00, 0x02, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x02, 0x00, 0x01, 0x04, 0x00, 0x01, 0x07, 0x00, 0x03, 0x09, 0x00, 0x06, 0x0C, 0x00, 0x08, 0x10, 
   0x00, 0x0B, 0x10, 0x00, 0x0C, 0x0F, 0x01, 0x0E, 0x0F, 0x0B, 0x18, 0x11, 0x1F, 0x2C, 0x13, 0x30, 
   0x3D, 0x14, 0x28, 0x36, 0x18, 0x01, 0x15, 0x1D, 0x00, 0x16, 0x1D, 0x00, 0x18, 0x1D, 0x00, 0x18, 
   0x1E, 0x00, 0x18, 0x1E, 0x00, 0x18, 0x1E, 0x00, 0x18, 0x1D, 0x00, 0x18, 0x1D, 0x00, 0x18, 0x1C, 
   0x00, 0x18, 0x1C, 0x00, 0x17, 0x1C, 0x00, 0x16, 0x1B, 0x00, 0x15, 0x19, 0x00, 0x13, 0x17, 0x00, 
   0x12, 0x14, 0x00, 0x10, 0x12, 0x00, 0x0E, 0x10, 0x00, 0x0C, 0x0E, 0x00, 0x0A, 0x0C, 0x00, 0x08, 
   0x09, 0x00, 0x06, 0x07, 0x00, 0x03, 0x04, 0x00, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x04, 0x00, 0x01, 0x06, 0x00, 0x02, 0x0C, 
   0x00, 0x05, 0x0D, 0x00, 0x07, 0x0C, 0x00, 0x09, 0x0E, 0x00, 0x0A, 0x0D, 0x00, 0x0C, 0x0C, 0x03, 
   0x0F, 0x10, 0x05, 0x12, 0x16, 0x00, 0x10, 0x19, 0x00, 0x11, 0x15, 0x00, 0x12, 0x16, 0x00, 0x12, 
   0x17, 0x00, 0x12, 0x16, 0x00, 0x12, 0x17, 0x00, 0x12, 0x16, 0x00, 0x12, 0x17, 0x00, 0x12, 0x15, 
   0x00, 0x12, 0x15, 0x00, 0x11, 0x14, 0x00, 0x0F, 0x14, 0x00, 0x0F, 0x12, 0x00, 0x0E, 0x11, 0x00, 
   0x0D, 0x0F, 0x00, 0x0B, 0x0C, 0x00, 0x09, 0x0A, 0x00, 0x07, 0x08, 0x00, 0x05, 0x06, 0x00, 0x02, 
   0x04, 0x00, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 
   0x00, 0x01, 0x04, 0x00, 0x02, 0x08, 0x00, 0x04, 0x0A, 0x00, 0x05, 0x0B, 0x00, 0x06, 0x0D, 0x00, 
   0x08, 0x0E, 0x00, 0x09, 0x0F, 0x00, 0x0B, 0x13, 0x00, 0x0C, 0x11, 0x00, 0x0D, 0x12, 0x00, 0x0D, 
   0x12, 0x00, 0x0D, 0x12, 0x00, 0x0D, 0x12, 0x00, 0x0D, 0x12, 0x00, 0x0D, 0x12, 0x00, 0x0D, 0x10, 
   0x00, 0x0D, 0x10, 0x00, 0x0C, 0x0F, 0x00, 0x0B, 0x0F, 0x00, 0x0A, 0x0D, 0x00, 0x09, 0x0B, 0x00, 
   0x08, 0x09, 0x00, 0x06, 0x07, 0x00, 0x04, 0x06, 0x00, 0x02, 0x03, 0x00, 0x01, 0x01, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

static RESOURCEDATA g_rd_dxlogo(TEXT(MODULE_STRING), TEXT("dxlogo.bmp"), g_dxlogo, sizeof(g_dxlogo));

extern "C" LPVOID PREPEND_MODULE(_dxlogo) = (LPVOID)&g_rd_dxlogo;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\PShader\media\sky1.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    sky1.bmp.cpp

Description

    Data file for the resource sky1.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_sky1[] = {

   0x42, 0x4D, 0x36, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x6D, 0x0B, 0x00, 0x00, 0x6D, 0x0B, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x67, 0x5A, 0x52, 0x65, 0x5A, 0x51, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x66, 0x5A, 0x53, 0x67, 0x5A, 0x53, 0x66, 0x59, 0x53, 0x62, 
   0x57, 0x51, 0x61, 0x58, 0x4F, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x65, 0x5A, 0x52, 0x66, 0x5A, 0x53, 0x67, 0x5A, 0x54, 0x66, 
   0x59, 0x53, 0x65, 0x57, 0x51, 0x64, 0x56, 0x52, 0x62, 0x55, 0x51, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x63, 0x57, 0x50, 0x65, 0x59, 0x51, 0x66, 0x5A, 0x54, 0x66, 
   0x5A, 0x53, 0x65, 0x58, 0x51, 0x63, 0x57, 0x51, 0x63, 0x58, 0x50, 0x61, 0x55, 0x50, 0x60, 0x51, 
   0x4E, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x63, 0x57, 0x51, 0x63, 0x57, 0x51, 0x64, 0x59, 0x53, 0x64, 
   0x59, 0x53, 0x64, 0x58, 0x52, 0x64, 0x58, 0x52, 0x63, 0x58, 0x51, 0x63, 0x57, 0x52, 0x60, 0x53, 
   0x4F, 0x5E, 0x52, 0x52, 0x5E, 0x51, 0x53, 0x5E, 0x4D, 0x4D, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x63, 0x58, 0x53, 0x63, 0x57, 0x52, 0x63, 0x57, 0x52, 0x64, 
   0x59, 0x53, 0x65, 0x59, 0x54, 0x65, 0x59, 0x53, 0x64, 0x59, 0x53, 0x64, 0x59, 0x53, 0x63, 0x57, 
   0x53, 0x61, 0x55, 0x51, 0x5E, 0x51, 0x52, 0x5F, 0x51, 0x50, 0x61, 0x51, 0x4F, 0x5F, 0x4E, 0x4E, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x64, 0x59, 0x56, 0x64, 0x59, 0x55, 0x64, 0x58, 0x53, 0x64, 
   0x58, 0x53, 0x65, 0x59, 0x55, 0x66, 0x59, 0x54, 0x66, 0x5A, 0x54, 0x66, 0x5A, 0x55, 0x65, 0x59, 
   0x56, 0x63, 0x57, 0x53, 0x62, 0x56, 0x52, 0x62, 0x54, 0x50, 0x60, 0x52, 0x4F, 0x60, 0x50, 0x4F, 
   0x5F, 0x51, 0x4E, 0x5D, 0x4E, 0x4B, 0x55, 0x55, 0x55, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x65, 0x5B, 0x58, 0x66, 0x5B, 0x57, 0x65, 0x5A, 0x54, 0x64, 
   0x59, 0x54, 0x65, 0x59, 0x56, 0x66, 0x5A, 0x55, 0x66, 0x5A, 0x54, 0x65, 0x5A, 0x55, 0x66, 0x5A, 
   0x57, 0x65, 0x59, 0x55, 0x64, 0x58, 0x54, 0x64, 0x57, 0x52, 0x63, 0x55, 0x50, 0x61, 0x52, 0x4F, 
   0x5F, 0x51, 0x4D, 0x5D, 0x4F, 0x4B, 0x5E, 0x50, 0x4B, 0x5E, 0x51, 0x4A, 0x60, 0x50, 0x50, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x64, 0x5A, 0x57, 0x66, 0x5C, 0x58, 0x66, 0x5D, 0x56, 0x65, 
   0x5B, 0x55, 0x64, 0x5A, 0x55, 0x66, 0x5A, 0x55, 0x67, 0x5C, 0x55, 0x65, 0x5B, 0x55, 0x64, 0x5A, 
   0x57, 0x64, 0x5B, 0x58, 0x64, 0x5A, 0x56, 0x65, 0x59, 0x54, 0x63, 0x56, 0x51, 0x61, 0x54, 0x4F, 
   0x62, 0x54, 0x50, 0x5F, 0x51, 0x4D, 0x5F, 0x51, 0x4C, 0x5F, 0x51, 0x4B, 0x5E, 0x51, 0x4D, 0x5F, 
   0x53, 0x4D, 0x60, 0x54, 0x4F, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x3F, 0x37, 0x3F, 0x65, 0x5A, 0x57, 0x64, 0x5A, 0x56, 0x66, 0x5B, 0x56, 0x66, 
   0x5C, 0x57, 0x64, 0x5B, 0x56, 0x65, 0x5B, 0x55, 0x66, 0x5A, 0x54, 0x65, 0x5B, 0x54, 0x64, 0x5B, 
   0x55, 0x64, 0x5B, 0x57, 0x64, 0x5C, 0x59, 0x65, 0x5B, 0x57, 0x64, 0x59, 0x54, 0x63, 0x56, 0x50, 
   0x62, 0x56, 0x51, 0x62, 0x56, 0x52, 0x62, 0x55, 0x50, 0x61, 0x53, 0x4D, 0x5F, 0x52, 0x4D, 0x5E, 
   0x52, 0x4E, 0x60, 0x53, 0x50, 0x61, 0x54, 0x52, 0x63, 0x55, 0x52, 0x80, 0x40, 0x40, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x41, 0x3C, 0x41, 
   0x43, 0x3E, 0x3C, 0x3E, 0x39, 0x3E, 0x67, 0x5B, 0x57, 0x66, 0x5A, 0x55, 0x65, 0x5A, 0x54, 0x64, 
   0x5A, 0x55, 0x65, 0x5B, 0x57, 0x66, 0x5C, 0x56, 0x67, 0x5B, 0x55, 0x66, 0x5B, 0x53, 0x64, 0x5B, 
   0x54, 0x64, 0x5B, 0x56, 0x63, 0x5C, 0x58, 0x65, 0x5C, 0x59, 0x66, 0x5C, 0x57, 0x65, 0x59, 0x54, 
   0x62, 0x56, 0x51, 0x62, 0x56, 0x52, 0x65, 0x58, 0x54, 0x65, 0x58, 0x53, 0x62, 0x55, 0x51, 0x5F, 
   0x53, 0x4F, 0x5E, 0x52, 0x4F, 0x60, 0x53, 0x51, 0x63, 0x55, 0x52, 0x62, 0x55, 0x55, 0x60, 0x53, 
   0x53, 0x5D, 0x55, 0x4D, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x3E, 0x37, 0x3E, 0x42, 0x3D, 0x42, 0x42, 0x3D, 0x40, 
   0x55, 0x4C, 0x4A, 0x51, 0x49, 0x4A, 0x66, 0x5A, 0x54, 0x67, 0x5B, 0x54, 0x66, 0x5A, 0x54, 0x64, 
   0x5A, 0x54, 0x64, 0x59, 0x55, 0x66, 0x5A, 0x56, 0x68, 0x5C, 0x56, 0x68, 0x5C, 0x55, 0x67, 0x5C, 
   0x54, 0x65, 0x5B, 0x55, 0x64, 0x5B, 0x57, 0x64, 0x5C, 0x59, 0x66, 0x5C, 0x59, 0x67, 0x5B, 0x58, 
   0x66, 0x5A, 0x54, 0x63, 0x57, 0x53, 0x63, 0x57, 0x52, 0x65, 0x59, 0x53, 0x65, 0x59, 0x54, 0x64, 
   0x57, 0x54, 0x60, 0x54, 0x51, 0x5F, 0x53, 0x4F, 0x61, 0x53, 0x4F, 0x61, 0x53, 0x52, 0x60, 0x53, 
   0x53, 0x61, 0x54, 0x51, 0x5F, 0x53, 0x4E, 0x5D, 0x51, 0x4D, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x46, 0x3A, 0x3A, 0x41, 0x39, 0x3D, 0x53, 0x4A, 0x4E, 0x55, 0x4B, 0x50, 0x55, 0x4C, 0x4D, 
   0x54, 0x4A, 0x49, 0x53, 0x4A, 0x4B, 0x68, 0x5B, 0x54, 0x67, 0x5B, 0x55, 0x68, 0x5C, 0x55, 0x67, 
   0x5B, 0x55, 0x66, 0x5B, 0x56, 0x66, 0x5A, 0x57, 0x67, 0x5B, 0x57, 0x68, 0x5C, 0x56, 0x69, 0x5D, 
   0x56, 0x68, 0x5D, 0x57, 0x67, 0x5C, 0x57, 0x65, 0x5C, 0x58, 0x66, 0x5C, 0x59, 0x67, 0x5C, 0x58, 
   0x67, 0x5B, 0x56, 0x67, 0x5A, 0x54, 0x65, 0x5A, 0x54, 0x65, 0x59, 0x53, 0x64, 0x58, 0x54, 0x64, 
   0x58, 0x55, 0x64, 0x57, 0x54, 0x62, 0x56, 0x50, 0x60, 0x54, 0x4D, 0x60, 0x53, 0x4F, 0x5F, 0x53, 
   0x51, 0x5F, 0x53, 0x50, 0x5F, 0x53, 0x4E, 0x5E, 0x53, 0x4D, 0x5F, 0x55, 0x4D, 0x5E, 0x53, 0x4E, 
   0x66, 0x66, 0x33, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x40, 0x40, 0x40, 0x42, 0x3B, 
   0x40, 0x52, 0x47, 0x4A, 0x52, 0x49, 0x4B, 0x53, 0x4A, 0x4D, 0x54, 0x4C, 0x4F, 0x55, 0x4B, 0x4B, 
   0x54, 0x4A, 0x47, 0x54, 0x4B, 0x4C, 0x68, 0x5B, 0x56, 0x69, 0x5B, 0x56, 0x68, 0x5C, 0x56, 0x68, 
   0x5B, 0x56, 0x67, 0x5B, 0x56, 0x67, 0x5B, 0x57, 0x67, 0x5C, 0x57, 0x68, 0x5B, 0x57, 0x69, 0x5D, 
   0x57, 0x68, 0x5C, 0x57, 0x68, 0x5D, 0x57, 0x67, 0x5D, 0x58, 0x67, 0x5D, 0x58, 0x67, 0x5C, 0x58, 
   0x67, 0x5B, 0x56, 0x67, 0x5B, 0x55, 0x66, 0x5A, 0x53, 0x66, 0x5B, 0x53, 0x66, 0x5A, 0x53, 0x65, 
   0x59, 0x54, 0x64, 0x58, 0x54, 0x64, 0x58, 0x53, 0x64, 0x57, 0x52, 0x61, 0x56, 0x51, 0x5E, 0x54, 
   0x4F, 0x5F, 0x54, 0x4F, 0x5F, 0x53, 0x4F, 0x60, 0x54, 0x4F, 0x60, 0x55, 0x4E, 0x5E, 0x54, 0x4D, 
   0x5D, 0x51, 0x4A, 0x5C, 0x4F, 0x49, 0x57, 0x49, 0x49, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x56, 0x4D, 0x4B, 0x52, 0x49, 0x49, 0x51, 0x48, 
   0x49, 0x52, 0x48, 0x4A, 0x53, 0x4A, 0x4C, 0x54, 0x4B, 0x4D, 0x55, 0x4B, 0x4C, 0x55, 0x4B, 0x4A, 
   0x53, 0x4B, 0x4A, 0x52, 0x4C, 0x4C, 0x67, 0x5B, 0x57, 0x68, 0x5B, 0x57, 0x68, 0x5D, 0x58, 0x66, 
   0x5A, 0x55, 0x65, 0x5A, 0x54, 0x66, 0x5A, 0x56, 0x66, 0x5B, 0x56, 0x66, 0x5B, 0x58, 0x67, 0x5C, 
   0x58, 0x66, 0x5B, 0x58, 0x67, 0x5C, 0x56, 0x67, 0x5B, 0x55, 0x67, 0x5C, 0x56, 0x67, 0x5C, 0x56, 
   0x68, 0x5C, 0x57, 0x67, 0x5C, 0x56, 0x66, 0x5A, 0x54, 0x65, 0x5A, 0x53, 0x66, 0x5A, 0x53, 0x67, 
   0x5B, 0x53, 0x66, 0x5A, 0x54, 0x65, 0x59, 0x53, 0x64, 0x59, 0x53, 0x63, 0x59, 0x55, 0x62, 0x59, 
   0x55, 0x61, 0x57, 0x51, 0x60, 0x55, 0x50, 0x61, 0x55, 0x52, 0x61, 0x56, 0x4F, 0x61, 0x56, 0x4D, 
   0x5F, 0x52, 0x4B, 0x5D, 0x50, 0x49, 0x5B, 0x4C, 0x49, 0x5D, 0x4F, 0x4C, 0x5E, 0x52, 0x4E, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x5D, 0x53, 0x4F, 0x56, 0x4C, 0x4C, 0x53, 0x49, 0x4A, 0x53, 0x4A, 0x4A, 0x53, 0x4A, 
   0x4C, 0x54, 0x4B, 0x4E, 0x55, 0x4C, 0x4E, 0x55, 0x4C, 0x4D, 0x56, 0x4C, 0x4D, 0x55, 0x4D, 0x4D, 
   0x53, 0x4E, 0x4F, 0x54, 0x4F, 0x50, 0x65, 0x59, 0x58, 0x67, 0x5B, 0x58, 0x69, 0x5D, 0x59, 0x68, 
   0x5D, 0x58, 0x68, 0x5D, 0x56, 0x65, 0x5A, 0x53, 0x64, 0x59, 0x53, 0x64, 0x5A, 0x57, 0x65, 0x5A, 
   0x58, 0x65, 0x5A, 0x58, 0x66, 0x5B, 0x56, 0x66, 0x5B, 0x54, 0x66, 0x5B, 0x54, 0x66, 0x5B, 0x55, 
   0x66, 0x5C, 0x57, 0x66, 0x5C, 0x57, 0x67, 0x5C, 0x56, 0x66, 0x5B, 0x55, 0x66, 0x59, 0x54, 0x67, 
   0x59, 0x52, 0x67, 0x5A, 0x53, 0x67, 0x5A, 0x53, 0x65, 0x5A, 0x53, 0x65, 0x5B, 0x57, 0x64, 0x5B, 
   0x57, 0x64, 0x5B, 0x56, 0x65, 0x59, 0x55, 0x61, 0x56, 0x53, 0x62, 0x57, 0x51, 0x62, 0x57, 0x4F, 
   0x61, 0x54, 0x4C, 0x5E, 0x51, 0x4A, 0x5C, 0x4E, 0x4A, 0x5E, 0x50, 0x4C, 0x5F, 0x53, 0x4F, 0x61, 
   0x55, 0x51, 0x61, 0x59, 0x51, 0x6D, 0x49, 0x49, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x6D, 0x5F, 0x5C, 0x64, 0x58, 0x56, 0x5B, 
   0x51, 0x4D, 0x56, 0x4D, 0x4B, 0x55, 0x4C, 0x4D, 0x56, 0x4C, 0x4E, 0x55, 0x4D, 0x4F, 0x53, 0x4C, 
   0x4F, 0x54, 0x4B, 0x4E, 0x55, 0x4B, 0x4D, 0x56, 0x4C, 0x4D, 0x57, 0x4D, 0x4E, 0x55, 0x4F, 0x51, 
   0x54, 0x52, 0x55, 0x56, 0x50, 0x53, 0x65, 0x59, 0x57, 0x66, 0x5A, 0x58, 0x67, 0x5D, 0x59, 0x68, 
   0x5D, 0x58, 0x69, 0x5D, 0x57, 0x67, 0x5C, 0x54, 0x65, 0x5A, 0x53, 0x64, 0x59, 0x53, 0x63, 0x59, 
   0x56, 0x63, 0x59, 0x57, 0x65, 0x5A, 0x57, 0x66, 0x5B, 0x54, 0x66, 0x5A, 0x53, 0x66, 0x5A, 0x53, 
   0x65, 0x5B, 0x55, 0x65, 0x5C, 0x58, 0x65, 0x5C, 0x57, 0x65, 0x5C, 0x57, 0x66, 0x5B, 0x58, 0x66, 
   0x5A, 0x54, 0x67, 0x58, 0x52, 0x67, 0x59, 0x51, 0x66, 0x5A, 0x51, 0x63, 0x5B, 0x55, 0x64, 0x5C, 
   0x58, 0x65, 0x5C, 0x58, 0x65, 0x5A, 0x56, 0x64, 0x59, 0x55, 0x63, 0x57, 0x52, 0x62, 0x56, 0x4F, 
   0x63, 0x56, 0x4E, 0x62, 0x55, 0x4E, 0x5F, 0x52, 0x4D, 0x60, 0x52, 0x4E, 0x60, 0x54, 0x4F, 0x62, 
   0x56, 0x51, 0x62, 0x58, 0x51, 0x63, 0x59, 0x51, 0x62, 0x5A, 0x54, 0x60, 0x5A, 0x53, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x6B, 0x5F, 0x5B, 0x6D, 0x60, 0x5C, 0x66, 0x58, 0x56, 0x5F, 0x53, 0x51, 0x5C, 0x50, 0x50, 0x5A, 
   0x50, 0x4D, 0x58, 0x4F, 0x4E, 0x57, 0x4F, 0x51, 0x57, 0x4E, 0x4E, 0x54, 0x4C, 0x4C, 0x53, 0x4B, 
   0x4C, 0x53, 0x4A, 0x4B, 0x55, 0x4B, 0x4B, 0x56, 0x4C, 0x4C, 0x56, 0x4E, 0x4F, 0x57, 0x51, 0x52, 
   0x57, 0x52, 0x56, 0x57, 0x4F, 0x52, 0x65, 0x59, 0x57, 0x66, 0x59, 0x56, 0x66, 0x5C, 0x58, 0x67, 
   0x5C, 0x58, 0x68, 0x5B, 0x57, 0x68, 0x5B, 0x55, 0x67, 0x5B, 0x53, 0x66, 0x5A, 0x54, 0x65, 0x5A, 
   0x56, 0x65, 0x5A, 0x56, 0x64, 0x5A, 0x55, 0x65, 0x58, 0x52, 0x67, 0x59, 0x52, 0x68, 0x5A, 0x52, 
   0x65, 0x5A, 0x54, 0x64, 0x5B, 0x56, 0x65, 0x5C, 0x58, 0x65, 0x5C, 0x58, 0x64, 0x5B, 0x5A, 0x66, 
   0x5B, 0x56, 0x65, 0x59, 0x51, 0x65, 0x58, 0x4F, 0x64, 0x58, 0x4F, 0x62, 0x59, 0x52, 0x62, 0x5A, 
   0x55, 0x63, 0x5A, 0x55, 0x63, 0x59, 0x55, 0x63, 0x58, 0x54, 0x63, 0x58, 0x52, 0x63, 0x57, 0x50, 
   0x63, 0x56, 0x4E, 0x62, 0x56, 0x4F, 0x61, 0x55, 0x50, 0x62, 0x54, 0x51, 0x61, 0x54, 0x51, 0x62, 
   0x56, 0x51, 0x63, 0x57, 0x51, 0x62, 0x58, 0x4F, 0x62, 0x59, 0x54, 0x63, 0x5A, 0x56, 0x65, 0x59, 
   0x58, 0x63, 0x58, 0x58, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x65, 0x5D, 0x5E, 0x67, 0x5E, 0x5A, 
   0x64, 0x5A, 0x58, 0x5E, 0x53, 0x51, 0x5A, 0x4F, 0x4E, 0x5C, 0x50, 0x50, 0x5B, 0x52, 0x50, 0x59, 
   0x52, 0x4F, 0x59, 0x51, 0x4F, 0x58, 0x50, 0x4F, 0x57, 0x4E, 0x4C, 0x54, 0x4D, 0x4B, 0x54, 0x4C, 
   0x4B, 0x54, 0x4C, 0x4B, 0x56, 0x4C, 0x4B, 0x56, 0x4D, 0x4D, 0x56, 0x4F, 0x4E, 0x56, 0x4F, 0x50, 
   0x55, 0x4E, 0x50, 0x55, 0x4D, 0x4D, 0x66, 0x5B, 0x57, 0x64, 0x59, 0x55, 0x65, 0x5B, 0x57, 0x65, 
   0x5B, 0x57, 0x66, 0x5B, 0x56, 0x67, 0x5A, 0x55, 0x67, 0x5A, 0x53, 0x66, 0x5A, 0x53, 0x65, 0x59, 
   0x53, 0x65, 0x5A, 0x56, 0x66, 0x5C, 0x57, 0x66, 0x5A, 0x53, 0x64, 0x57, 0x51, 0x65, 0x56, 0x50, 
   0x65, 0x58, 0x52, 0x65, 0x5A, 0x56, 0x65, 0x5C, 0x57, 0x65, 0x5D, 0x58, 0x64, 0x5C, 0x59, 0x64, 
   0x5B, 0x58, 0x65, 0x5A, 0x53, 0x64, 0x58, 0x50, 0x63, 0x57, 0x4E, 0x63, 0x58, 0x50, 0x62, 0x58, 
   0x52, 0x62, 0x59, 0x54, 0x62, 0x58, 0x53, 0x62, 0x58, 0x53, 0x61, 0x56, 0x51, 0x62, 0x57, 0x50, 
   0x63, 0x57, 0x50, 0x63, 0x56, 0x50, 0x62, 0x58, 0x52, 0x62, 0x56, 0x52, 0x62, 0x54, 0x52, 0x62, 
   0x55, 0x51, 0x62, 0x55, 0x50, 0x62, 0x56, 0x4F, 0x62, 0x58, 0x53, 0x62, 0x59, 0x55, 0x65, 0x59, 
   0x57, 0x65, 0x59, 0x57, 0x65, 0x58, 0x57, 0x67, 0x59, 0x54, 0x60, 0x60, 0x60, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x6B, 0x60, 0x63, 0x6A, 0x5F, 0x63, 0x66, 0x5F, 0x62, 0x62, 0x5B, 0x5B, 0x5C, 0x55, 0x53, 
   0x57, 0x4E, 0x4F, 0x59, 0x4E, 0x4E, 0x5A, 0x50, 0x50, 0x5A, 0x52, 0x52, 0x5A, 0x54, 0x53, 0x5A, 
   0x54, 0x50, 0x59, 0x53, 0x4F, 0x58, 0x52, 0x4F, 0x57, 0x50, 0x4D, 0x56, 0x4E, 0x4D, 0x55, 0x4E, 
   0x4D, 0x55, 0x4D, 0x4D, 0x55, 0x4C, 0x4C, 0x55, 0x4C, 0x4C, 0x55, 0x4D, 0x4C, 0x55, 0x4C, 0x4C, 
   0x55, 0x4C, 0x4D, 0x56, 0x4D, 0x4D, 0x68, 0x5E, 0x5B, 0x67, 0x5D, 0x58, 0x66, 0x5C, 0x57, 0x64, 
   0x5B, 0x55, 0x65, 0x5C, 0x56, 0x66, 0x5B, 0x56, 0x66, 0x5B, 0x55, 0x66, 0x5A, 0x54, 0x65, 0x5A, 
   0x54, 0x65, 0x59, 0x54, 0x64, 0x5A, 0x56, 0x67, 0x5B, 0x56, 0x65, 0x58, 0x51, 0x64, 0x56, 0x4F, 
   0x63, 0x55, 0x50, 0x63, 0x57, 0x53, 0x63, 0x5A, 0x55, 0x64, 0x5B, 0x57, 0x63, 0x5B, 0x57, 0x65, 
   0x5B, 0x57, 0x67, 0x5A, 0x54, 0x66, 0x5A, 0x53, 0x64, 0x58, 0x51, 0x65, 0x58, 0x52, 0x65, 0x59, 
   0x54, 0x64, 0x58, 0x54, 0x63, 0x57, 0x52, 0x63, 0x57, 0x53, 0x63, 0x58, 0x53, 0x63, 0x58, 0x52, 
   0x63, 0x58, 0x50, 0x63, 0x57, 0x51, 0x63, 0x58, 0x53, 0x63, 0x57, 0x54, 0x62, 0x55, 0x53, 0x63, 
   0x54, 0x51, 0x62, 0x54, 0x50, 0x61, 0x54, 0x4E, 0x60, 0x55, 0x50, 0x61, 0x57, 0x53, 0x64, 0x58, 
   0x55, 0x64, 0x58, 0x56, 0x64, 0x57, 0x56, 0x66, 0x5A, 0x55, 0x66, 0x5C, 0x53, 0x66, 0x5C, 0x52, 
   0x65, 0x57, 0x51, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x67, 0x5C, 0x5C, 0x68, 0x60, 
   0x5F, 0x69, 0x5E, 0x61, 0x66, 0x5B, 0x5F, 0x5C, 0x55, 0x57, 0x58, 0x53, 0x52, 0x58, 0x51, 0x50, 
   0x58, 0x4F, 0x50, 0x59, 0x50, 0x51, 0x59, 0x52, 0x53, 0x59, 0x53, 0x53, 0x59, 0x53, 0x52, 0x59, 
   0x54, 0x4F, 0x59, 0x54, 0x4F, 0x59, 0x53, 0x50, 0x58, 0x51, 0x4F, 0x57, 0x4E, 0x4E, 0x54, 0x4D, 
   0x4C, 0x52, 0x4B, 0x4A, 0x53, 0x4A, 0x4A, 0x53, 0x4B, 0x49, 0x53, 0x4B, 0x4B, 0x53, 0x4B, 0x4B, 
   0x54, 0x4B, 0x4C, 0x54, 0x4B, 0x49, 0x67, 0x5C, 0x59, 0x67, 0x5D, 0x59, 0x68, 0x5E, 0x58, 0x67, 
   0x5D, 0x57, 0x65, 0x5B, 0x56, 0x65, 0x5B, 0x55, 0x66, 0x5A, 0x54, 0x67, 0x5B, 0x56, 0x66, 0x5A, 
   0x55, 0x65, 0x59, 0x54, 0x64, 0x59, 0x55, 0x66, 0x5B, 0x57, 0x67, 0x5A, 0x55, 0x65, 0x57, 0x51, 
   0x64, 0x55, 0x4F, 0x62, 0x56, 0x51, 0x62, 0x58, 0x52, 0x63, 0x59, 0x54, 0x61, 0x59, 0x54, 0x64, 
   0x59, 0x55, 0x66, 0x5A, 0x53, 0x68, 0x5A, 0x55, 0x66, 0x5A, 0x54, 0x65, 0x5A, 0x55, 0x66, 0x5A, 
   0x56, 0x66, 0x5B, 0x56, 0x64, 0x59, 0x53, 0x64, 0x57, 0x52, 0x62, 0x58, 0x53, 0x64, 0x59, 0x54, 
   0x64, 0x59, 0x52, 0x63, 0x58, 0x50, 0x62, 0x57, 0x51, 0x63, 0x58, 0x54, 0x63, 0x59, 0x56, 0x63, 
   0x57, 0x54, 0x62, 0x55, 0x51, 0x61, 0x55, 0x4E, 0x61, 0x54, 0x4F, 0x61, 0x55, 0x50, 0x62, 0x56, 
   0x52, 0x63, 0x57, 0x53, 0x64, 0x57, 0x54, 0x65, 0x58, 0x53, 0x65, 0x5A, 0x52, 0x65, 0x5B, 0x52, 
   0x63, 0x58, 0x52, 0x62, 0x56, 0x52, 0x60, 0x55, 0x51, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x6A, 0x5A, 0x5C, 0x69, 0x5A, 0x5A, 0x69, 0x5A, 0x5A, 0x68, 0x5E, 0x5C, 0x66, 0x60, 
   0x5F, 0x5C, 0x51, 0x55, 0x56, 0x4D, 0x50, 0x57, 0x50, 0x50, 0x57, 0x52, 0x4F, 0x57, 0x51, 0x4F, 
   0x58, 0x50, 0x50, 0x59, 0x50, 0x53, 0x57, 0x51, 0x52, 0x57, 0x52, 0x51, 0x59, 0x53, 0x4F, 0x59, 
   0x54, 0x4E, 0x59, 0x54, 0x4F, 0x59, 0x53, 0x51, 0x57, 0x51, 0x50, 0x54, 0x4D, 0x4C, 0x51, 0x4B, 
   0x4A, 0x50, 0x49, 0x49, 0x51, 0x49, 0x49, 0x52, 0x4A, 0x48, 0x52, 0x4A, 0x49, 0x53, 0x4A, 0x49, 
   0x52, 0x49, 0x48, 0x51, 0x48, 0x46, 0x68, 0x5C, 0x58, 0x67, 0x5B, 0x58, 0x68, 0x5D, 0x58, 0x68, 
   0x5D, 0x58, 0x68, 0x5C, 0x57, 0x66, 0x5B, 0x56, 0x66, 0x5A, 0x56, 0x65, 0x5A, 0x55, 0x65, 0x5A, 
   0x56, 0x66, 0x5B, 0x56, 0x65, 0x5A, 0x56, 0x65, 0x5B, 0x56, 0x66, 0x5B, 0x56, 0x67, 0x5A, 0x54, 
   0x66, 0x58, 0x51, 0x64, 0x57, 0x51, 0x63, 0x57, 0x52, 0x62, 0x59, 0x53, 0x63, 0x59, 0x53, 0x64, 
   0x59, 0x53, 0x64, 0x59, 0x52, 0x66, 0x59, 0x54, 0x67, 0x5A, 0x56, 0x64, 0x59, 0x55, 0x64, 0x5A, 
   0x56, 0x64, 0x5A, 0x55, 0x64, 0x59, 0x54, 0x65, 0x59, 0x53, 0x63, 0x57, 0x53, 0x63, 0x58, 0x54, 
   0x65, 0x59, 0x54, 0x65, 0x59, 0x51, 0x64, 0x58, 0x51, 0x63, 0x58, 0x54, 0x63, 0x59, 0x56, 0x63, 
   0x59, 0x56, 0x64, 0x58, 0x55, 0x63, 0x57, 0x53, 0x62, 0x56, 0x51, 0x62, 0x55, 0x4F, 0x64, 0x55, 
   0x4F, 0x64, 0x55, 0x50, 0x64, 0x57, 0x53, 0x63, 0x56, 0x51, 0x64, 0x58, 0x51, 0x64, 0x5A, 0x52, 
   0x63, 0x59, 0x53, 0x62, 0x57, 0x53, 0x62, 0x55, 0x53, 0x62, 0x56, 0x52, 0x63, 0x57, 0x52, 0x55, 
   0x55, 0x55, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x6C, 0x62, 0x63, 0x6A, 0x60, 0x61, 0x69, 
   0x5E, 0x5E, 0x6B, 0x5C, 0x5D, 0x6B, 0x5C, 0x5D, 0x6A, 0x5E, 0x5F, 0x5D, 0x57, 0x57, 0x56, 0x50, 
   0x51, 0x56, 0x4B, 0x4F, 0x57, 0x4E, 0x4E, 0x57, 0x51, 0x4F, 0x58, 0x51, 0x4F, 0x58, 0x50, 0x50, 
   0x57, 0x50, 0x52, 0x57, 0x4F, 0x52, 0x56, 0x4F, 0x51, 0x57, 0x51, 0x50, 0x58, 0x51, 0x4D, 0x58, 
   0x52, 0x4D, 0x58, 0x53, 0x4F, 0x58, 0x52, 0x51, 0x56, 0x4F, 0x4E, 0x53, 0x4B, 0x4B, 0x51, 0x49, 
   0x49, 0x50, 0x48, 0x49, 0x50, 0x48, 0x48, 0x51, 0x49, 0x47, 0x52, 0x4A, 0x47, 0x50, 0x48, 0x46, 
   0x4F, 0x47, 0x47, 0x4A, 0x43, 0x43, 0x69, 0x5C, 0x58, 0x68, 0x5C, 0x56, 0x67, 0x5C, 0x57, 0x68, 
   0x5C, 0x57, 0x69, 0x5C, 0x57, 0x68, 0x5C, 0x56, 0x68, 0x5B, 0x56, 0x66, 0x5A, 0x56, 0x64, 0x59, 
   0x55, 0x64, 0x5A, 0x54, 0x65, 0x5B, 0x55, 0x64, 0x5B, 0x56, 0x66, 0x5B, 0x56, 0x68, 0x5B, 0x55, 
   0x67, 0x5A, 0x53, 0x66, 0x59, 0x52, 0x64, 0x58, 0x52, 0x64, 0x59, 0x53, 0x64, 0x59, 0x53, 0x65, 
   0x5B, 0x54, 0x66, 0x5B, 0x56, 0x65, 0x5B, 0x56, 0x64, 0x59, 0x57, 0x64, 0x58, 0x55, 0x63, 0x58, 
   0x54, 0x63, 0x58, 0x54, 0x63, 0x58, 0x54, 0x64, 0x57, 0x53, 0x65, 0x58, 0x53, 0x64, 0x57, 0x53, 
   0x64, 0x58, 0x53, 0x65, 0x59, 0x53, 0x64, 0x58, 0x51, 0x65, 0x59, 0x54, 0x64, 0x59, 0x56, 0x64, 
   0x5A, 0x57, 0x64, 0x59, 0x56, 0x63, 0x58, 0x55, 0x63, 0x58, 0x55, 0x64, 0x58, 0x53, 0x65, 0x56, 
   0x4F, 0x64, 0x55, 0x4F, 0x63, 0x56, 0x51, 0x62, 0x56, 0x51, 0x62, 0x57, 0x51, 0x64, 0x59, 0x52, 
   0x64, 0x5A, 0x54, 0x63, 0x59, 0x55, 0x62, 0x57, 0x55, 0x63, 0x57, 0x53, 0x63, 0x56, 0x51, 0x63, 
   0x56, 0x50, 0x62, 0x56, 0x4E, 0x60, 0x53, 0x4D, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x6A, 0x62, 0x62, 0x6C, 0x63, 0x63, 0x6D, 0x62, 0x63, 0x6B, 0x60, 0x61, 0x6B, 
   0x60, 0x60, 0x6D, 0x5F, 0x60, 0x63, 0x57, 0x59, 0x59, 0x50, 0x52, 0x56, 0x4F, 0x4F, 0x56, 0x4E, 
   0x4F, 0x57, 0x4C, 0x4E, 0x58, 0x4F, 0x4E, 0x59, 0x50, 0x4F, 0x58, 0x51, 0x50, 0x59, 0x51, 0x52, 
   0x58, 0x50, 0x52, 0x57, 0x50, 0x51, 0x55, 0x4F, 0x50, 0x57, 0x50, 0x4E, 0x56, 0x4F, 0x4B, 0x57, 
   0x50, 0x4C, 0x56, 0x50, 0x4E, 0x55, 0x4E, 0x4E, 0x54, 0x4B, 0x4C, 0x52, 0x49, 0x4A, 0x50, 0x47, 
   0x49, 0x50, 0x47, 0x48, 0x4F, 0x48, 0x47, 0x50, 0x48, 0x46, 0x4F, 0x47, 0x45, 0x50, 0x49, 0x48, 
   0x52, 0x4A, 0x4B, 0x54, 0x4B, 0x4C, 0x6A, 0x5D, 0x59, 0x6A, 0x5D, 0x58, 0x69, 0x5D, 0x57, 0x68, 
   0x5C, 0x54, 0x68, 0x5B, 0x56, 0x69, 0x5C, 0x56, 0x68, 0x5C, 0x56, 0x67, 0x5B, 0x56, 0x65, 0x5A, 
   0x56, 0x65, 0x5A, 0x56, 0x66, 0x5A, 0x55, 0x66, 0x5B, 0x56, 0x66, 0x5B, 0x56, 0x66, 0x5A, 0x54, 
   0x67, 0x5A, 0x53, 0x66, 0x5A, 0x52, 0x66, 0x59, 0x53, 0x65, 0x59, 0x53, 0x65, 0x59, 0x54, 0x66, 
   0x5B, 0x56, 0x66, 0x5B, 0x57, 0x65, 0x5C, 0x58, 0x64, 0x5B, 0x59, 0x64, 0x59, 0x57, 0x63, 0x57, 
   0x55, 0x62, 0x56, 0x53, 0x63, 0x56, 0x52, 0x65, 0x58, 0x52, 0x64, 0x58, 0x52, 0x65, 0x58, 0x53, 
   0x63, 0x57, 0x52, 0x64, 0x58, 0x52, 0x64, 0x59, 0x52, 0x64, 0x59, 0x54, 0x65, 0x5A, 0x56, 0x64, 
   0x5A, 0x57, 0x64, 0x5A, 0x56, 0x64, 0x59, 0x55, 0x63, 0x57, 0x54, 0x63, 0x57, 0x53, 0x65, 0x57, 
   0x50, 0x64, 0x56, 0x4F, 0x62, 0x54, 0x4F, 0x62, 0x56, 0x51, 0x61, 0x56, 0x52, 0x62, 0x57, 0x53, 
   0x63, 0x59, 0x54, 0x63, 0x5A, 0x58, 0x61, 0x58, 0x58, 0x63, 0x57, 0x56, 0x63, 0x57, 0x52, 0x62, 
   0x56, 0x51, 0x62, 0x56, 0x4F, 0x61, 0x56, 0x4E, 0x61, 0x54, 0x4C, 0x61, 0x53, 0x4B, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x69, 0x60, 0x61, 0x69, 0x61, 0x61, 
   0x6A, 0x63, 0x60, 0x6B, 0x63, 0x62, 0x6C, 0x63, 0x63, 0x6D, 0x63, 0x64, 0x6D, 0x62, 0x63, 0x65, 
   0x5B, 0x5B, 0x5C, 0x52, 0x52, 0x57, 0x4E, 0x4F, 0x57, 0x4E, 0x50, 0x58, 0x50, 0x4F, 0x58, 0x4F, 
   0x4E, 0x59, 0x4E, 0x4D, 0x59, 0x4F, 0x4E, 0x59, 0x50, 0x50, 0x59, 0x51, 0x52, 0x59, 0x51, 0x52, 
   0x57, 0x50, 0x52, 0x57, 0x50, 0x50, 0x57, 0x51, 0x50, 0x58, 0x50, 0x4E, 0x58, 0x50, 0x4E, 0x57, 
   0x4F, 0x4D, 0x56, 0x4D, 0x4C, 0x54, 0x4C, 0x4C, 0x53, 0x4A, 0x4B, 0x51, 0x48, 0x49, 0x50, 0x46, 
   0x47, 0x50, 0x47, 0x46, 0x55, 0x4C, 0x4B, 0x50, 0x48, 0x47, 0x51, 0x4A, 0x4A, 0x53, 0x4C, 0x4D, 
   0x54, 0x4C, 0x4E, 0x54, 0x4B, 0x4C, 0x6A, 0x5E, 0x5C, 0x6A, 0x5E, 0x59, 0x6A, 0x5F, 0x58, 0x6B, 
   0x5E, 0x57, 0x69, 0x5D, 0x56, 0x69, 0x5C, 0x56, 0x68, 0x5B, 0x56, 0x67, 0x5A, 0x56, 0x66, 0x5A, 
   0x56, 0x66, 0x5C, 0x56, 0x67, 0x5C, 0x57, 0x68, 0x5E, 0x58, 0x69, 0x5D, 0x57, 0x68, 0x5B, 0x56, 
   0x67, 0x5A, 0x54, 0x65, 0x59, 0x53, 0x66, 0x59, 0x53, 0x66, 0x5A, 0x53, 0x65, 0x59, 0x54, 0x66, 
   0x5B, 0x55, 0x66, 0x5C, 0x57, 0x67, 0x5C, 0x5A, 0x64, 0x5C, 0x5A, 0x65, 0x5B, 0x58, 0x64, 0x59, 
   0x56, 0x63, 0x57, 0x53, 0x63, 0x57, 0x52, 0x63, 0x57, 0x50, 0x64, 0x58, 0x52, 0x65, 0x59, 0x54, 
   0x65, 0x59, 0x53, 0x64, 0x58, 0x53, 0x63, 0x58, 0x53, 0x64, 0x59, 0x54, 0x64, 0x59, 0x56, 0x64, 
   0x59, 0x56, 0x64, 0x59, 0x55, 0x63, 0x58, 0x53, 0x62, 0x56, 0x52, 0x62, 0x56, 0x51, 0x64, 0x56, 
   0x50, 0x65, 0x58, 0x51, 0x65, 0x58, 0x53, 0x62, 0x56, 0x50, 0x60, 0x55, 0x50, 0x61, 0x55, 0x51, 
   0x62, 0x57, 0x52, 0x61, 0x57, 0x53, 0x60, 0x58, 0x57, 0x62, 0x58, 0x58, 0x62, 0x58, 0x56, 0x63, 
   0x57, 0x53, 0x62, 0x56, 0x50, 0x62, 0x57, 0x4E, 0x62, 0x54, 0x4C, 0x61, 0x53, 0x4D, 0x60, 0x55, 
   0x51, 0x5F, 0x55, 0x53, 0x5D, 0x5D, 0x46, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x67, 0x5D, 0x5E, 0x68, 0x5C, 0x5D, 0x69, 0x5E, 0x5E, 0x6A, 0x61, 0x61, 0x6A, 0x63, 0x62, 
   0x69, 0x64, 0x62, 0x6B, 0x63, 0x64, 0x6C, 0x62, 0x64, 0x66, 0x5C, 0x5C, 0x5E, 0x55, 0x55, 0x5A, 
   0x51, 0x51, 0x58, 0x50, 0x50, 0x58, 0x4F, 0x50, 0x5A, 0x4F, 0x50, 0x59, 0x51, 0x50, 0x59, 0x50, 
   0x4F, 0x59, 0x50, 0x4E, 0x59, 0x50, 0x4F, 0x59, 0x50, 0x51, 0x59, 0x51, 0x52, 0x59, 0x50, 0x52, 
   0x56, 0x50, 0x4F, 0x57, 0x50, 0x50, 0x58, 0x52, 0x53, 0x5A, 0x50, 0x51, 0x58, 0x4E, 0x4F, 0x58, 
   0x4D, 0x4C, 0x56, 0x4C, 0x4C, 0x55, 0x4C, 0x4C, 0x54, 0x49, 0x4A, 0x57, 0x4C, 0x4B, 0x56, 0x4C, 
   0x4B, 0x52, 0x48, 0x48, 0x53, 0x49, 0x49, 0x53, 0x4A, 0x4B, 0x52, 0x4B, 0x4C, 0x53, 0x4B, 0x4B, 
   0x53, 0x4A, 0x4C, 0x53, 0x4A, 0x4A, 0x66, 0x5B, 0x58, 0x68, 0x5D, 0x59, 0x69, 0x5E, 0x58, 0x6A, 
   0x5E, 0x58, 0x6B, 0x5F, 0x58, 0x6B, 0x5F, 0x57, 0x6A, 0x5E, 0x57, 0x69, 0x5D, 0x57, 0x67, 0x5B, 
   0x57, 0x66, 0x5B, 0x56, 0x67, 0x5C, 0x56, 0x69, 0x5E, 0x5A, 0x69, 0x5E, 0x5A, 0x6A, 0x5E, 0x59, 
   0x67, 0x5B, 0x56, 0x66, 0x5A, 0x54, 0x65, 0x59, 0x54, 0x65, 0x59, 0x53, 0x65, 0x59, 0x53, 0x65, 
   0x5A, 0x53, 0x66, 0x5B, 0x55, 0x67, 0x5C, 0x57, 0x67, 0x5C, 0x59, 0x65, 0x5B, 0x56, 0x64, 0x5A, 
   0x56, 0x64, 0x59, 0x54, 0x64, 0x58, 0x52, 0x63, 0x57, 0x50, 0x64, 0x58, 0x51, 0x65, 0x59, 0x54, 
   0x66, 0x5A, 0x55, 0x65, 0x5A, 0x55, 0x66, 0x5A, 0x56, 0x66, 0x5A, 0x56, 0x65, 0x5A, 0x54, 0x65, 
   0x59, 0x55, 0x65, 0x59, 0x55, 0x64, 0x59, 0x54, 0x62, 0x57, 0x51, 0x62, 0x55, 0x4F, 0x63, 0x56, 
   0x4F, 0x64, 0x58, 0x52, 0x66, 0x5B, 0x56, 0x65, 0x5A, 0x55, 0x63, 0x58, 0x52, 0x61, 0x56, 0x50, 
   0x62, 0x56, 0x51, 0x62, 0x58, 0x52, 0x62, 0x58, 0x55, 0x62, 0x58, 0x56, 0x63, 0x59, 0x56, 0x64, 
   0x58, 0x55, 0x64, 0x58, 0x53, 0x64, 0x58, 0x51, 0x64, 0x56, 0x4E, 0x62, 0x54, 0x4E, 0x61, 0x55, 
   0x50, 0x60, 0x56, 0x53, 0x60, 0x56, 0x52, 0x62, 0x54, 0x4D, 0x61, 0x55, 0x49, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x6F, 0x62, 0x62, 0x6B, 0x5F, 
   0x60, 0x66, 0x5C, 0x5D, 0x69, 0x5D, 0x5C, 0x6B, 0x5F, 0x5F, 0x6C, 0x63, 0x64, 0x6B, 0x64, 0x64, 
   0x69, 0x63, 0x62, 0x65, 0x5E, 0x5F, 0x5D, 0x56, 0x56, 0x5A, 0x52, 0x51, 0x5B, 0x51, 0x51, 0x5A, 
   0x51, 0x50, 0x58, 0x50, 0x51, 0x5A, 0x50, 0x51, 0x5B, 0x50, 0x51, 0x59, 0x52, 0x50, 0x59, 0x51, 
   0x4F, 0x5A, 0x51, 0x50, 0x5A, 0x51, 0x50, 0x59, 0x51, 0x52, 0x59, 0x51, 0x53, 0x57, 0x50, 0x50, 
   0x56, 0x50, 0x50, 0x58, 0x52, 0x53, 0x58, 0x52, 0x52, 0x58, 0x4F, 0x50, 0x59, 0x4D, 0x4E, 0x58, 
   0x4E, 0x4E, 0x58, 0x4E, 0x4D, 0x5B, 0x51, 0x50, 0x5A, 0x4E, 0x4E, 0x54, 0x49, 0x49, 0x53, 0x49, 
   0x4A, 0x54, 0x4A, 0x4B, 0x55, 0x4C, 0x4D, 0x55, 0x4E, 0x4F, 0x52, 0x4C, 0x4B, 0x52, 0x4B, 0x49, 
   0x53, 0x49, 0x48, 0x53, 0x49, 0x48, 0x65, 0x5A, 0x56, 0x64, 0x59, 0x56, 0x66, 0x5B, 0x56, 0x68, 
   0x5D, 0x56, 0x6A, 0x5E, 0x57, 0x6A, 0x5F, 0x58, 0x6A, 0x5F, 0x58, 0x6A, 0x5E, 0x59, 0x69, 0x5E, 
   0x58, 0x68, 0x5C, 0x56, 0x68, 0x5C, 0x56, 0x69, 0x5D, 0x58, 0x6A, 0x5F, 0x59, 0x69, 0x5F, 0x5A, 
   0x68, 0x5D, 0x59, 0x68, 0x5D, 0x57, 0x66, 0x5A, 0x55, 0x65, 0x59, 0x53, 0x64, 0x58, 0x51, 0x64, 
   0x58, 0x51, 0x64, 0x58, 0x52, 0x64, 0x59, 0x53, 0x65, 0x5B, 0x55, 0x65, 0x5A, 0x54, 0x66, 0x5B, 
   0x54, 0x65, 0x59, 0x54, 0x64, 0x59, 0x53, 0x64, 0x58, 0x52, 0x65, 0x59, 0x52, 0x65, 0x59, 0x53, 
   0x66, 0x5B, 0x56, 0x67, 0x5B, 0x57, 0x65, 0x5A, 0x56, 0x66, 0x5A, 0x56, 0x68, 0x5C, 0x57, 0x66, 
   0x5B, 0x56, 0x66, 0x5A, 0x56, 0x65, 0x5A, 0x56, 0x65, 0x5A, 0x53, 0x63, 0x57, 0x50, 0x62, 0x55, 
   0x4E, 0x62, 0x56, 0x51, 0x64, 0x5A, 0x55, 0x66, 0x5C, 0x57, 0x66, 0x5C, 0x55, 0x65, 0x59, 0x52, 
   0x61, 0x58, 0x51, 0x62, 0x58, 0x52, 0x64, 0x59, 0x53, 0x63, 0x59, 0x55, 0x63, 0x59, 0x56, 0x65, 
   0x59, 0x55, 0x65, 0x59, 0x54, 0x65, 0x59, 0x52, 0x67, 0x59, 0x51, 0x66, 0x58, 0x51, 0x63, 0x56, 
   0x52, 0x60, 0x56, 0x53, 0x60, 0x56, 0x51, 0x61, 0x55, 0x4C, 0x63, 0x54, 0x49, 0x63, 0x53, 0x4C, 
   0x64, 0x56, 0x53, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x6B, 0x60, 0x5E, 0x6D, 0x62, 0x5F, 0x6E, 0x63, 0x5F, 0x6D, 0x60, 0x60, 0x69, 0x5C, 
   0x5E, 0x67, 0x5B, 0x5D, 0x6C, 0x5E, 0x5E, 0x6E, 0x60, 0x60, 0x6C, 0x61, 0x62, 0x67, 0x5F, 0x5E, 
   0x5E, 0x58, 0x58, 0x58, 0x52, 0x54, 0x58, 0x52, 0x52, 0x59, 0x51, 0x50, 0x5A, 0x52, 0x51, 0x59, 
   0x51, 0x51, 0x59, 0x50, 0x52, 0x59, 0x50, 0x52, 0x5A, 0x51, 0x51, 0x59, 0x51, 0x50, 0x5B, 0x51, 
   0x52, 0x5C, 0x52, 0x53, 0x5B, 0x52, 0x52, 0x59, 0x52, 0x52, 0x58, 0x51, 0x52, 0x57, 0x51, 0x50, 
   0x57, 0x52, 0x51, 0x57, 0x51, 0x52, 0x57, 0x50, 0x51, 0x58, 0x4E, 0x4E, 0x5D, 0x53, 0x53, 0x5D, 
   0x54, 0x53, 0x5D, 0x53, 0x52, 0x57, 0x4D, 0x4D, 0x56, 0x4C, 0x4C, 0x56, 0x4D, 0x4E, 0x55, 0x4C, 
   0x4D, 0x56, 0x4E, 0x4E, 0x57, 0x4F, 0x50, 0x54, 0x4D, 0x4C, 0x51, 0x4B, 0x48, 0x52, 0x4A, 0x49, 
   0x53, 0x49, 0x4A, 0x4F, 0x46, 0x47, 0x65, 0x5A, 0x54, 0x65, 0x59, 0x54, 0x64, 0x59, 0x54, 0x65, 
   0x59, 0x54, 0x69, 0x5C, 0x55, 0x6A, 0x5E, 0x57, 0x6A, 0x5F, 0x59, 0x69, 0x5F, 0x59, 0x69, 0x5E, 
   0x5A, 0x69, 0x5E, 0x58, 0x69, 0x5D, 0x56, 0x69, 0x5D, 0x57, 0x69, 0x5E, 0x58, 0x68, 0x5F, 0x59, 
   0x69, 0x5E, 0x59, 0x68, 0x5D, 0x58, 0x68, 0x5D, 0x58, 0x67, 0x5B, 0x55, 0x63, 0x57, 0x50, 0x63, 
   0x57, 0x50, 0x63, 0x58, 0x51, 0x63, 0x58, 0x51, 0x63, 0x58, 0x52, 0x63, 0x59, 0x52, 0x64, 0x59, 
   0x52, 0x65, 0x59, 0x54, 0x66, 0x5A, 0x56, 0x66, 0x5A, 0x56, 0x66, 0x59, 0x55, 0x66, 0x59, 0x54, 
   0x65, 0x59, 0x54, 0x64, 0x59, 0x55, 0x64, 0x59, 0x55, 0x64, 0x59, 0x54, 0x65, 0x5A, 0x54, 0x66, 
   0x5B, 0x55, 0x66, 0x5A, 0x56, 0x65, 0x5A, 0x57, 0x65, 0x5A, 0x55, 0x65, 0x5A, 0x53, 0x64, 0x58, 
   0x50, 0x62, 0x57, 0x51, 0x61, 0x56, 0x52, 0x64, 0x59, 0x55, 0x64, 0x5B, 0x56, 0x65, 0x5B, 0x54, 
   0x63, 0x58, 0x52, 0x62, 0x57, 0x50, 0x63, 0x58, 0x51, 0x62, 0x57, 0x53, 0x62, 0x58, 0x55, 0x63, 
   0x59, 0x54, 0x64, 0x59, 0x54, 0x65, 0x59, 0x53, 0x64, 0x59, 0x53, 0x66, 0x59, 0x54, 0x66, 0x58, 
   0x55, 0x62, 0x57, 0x55, 0x61, 0x57, 0x53, 0x61, 0x55, 0x4E, 0x63, 0x53, 0x49, 0x63, 0x54, 0x4C, 
   0x63, 0x55, 0x52, 0x64, 0x57, 0x56, 0x64, 0x57, 0x55, 0x6A, 0x55, 0x55, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x6B, 0x60, 0x65, 0x69, 
   0x5F, 0x61, 0x6B, 0x61, 0x5E, 0x6B, 0x61, 0x5D, 0x69, 0x5D, 0x5C, 0x66, 0x59, 0x5A, 0x66, 0x5A, 
   0x5C, 0x68, 0x5D, 0x5F, 0x6C, 0x60, 0x60, 0x6C, 0x5F, 0x5F, 0x62, 0x58, 0x58, 0x5C, 0x56, 0x54, 
   0x5B, 0x55, 0x53, 0x59, 0x52, 0x52, 0x58, 0x52, 0x51, 0x58, 0x51, 0x50, 0x58, 0x51, 0x51, 0x58, 
   0x52, 0x51, 0x58, 0x51, 0x52, 0x59, 0x51, 0x52, 0x5A, 0x52, 0x53, 0x5B, 0x52, 0x53, 0x5D, 0x52, 
   0x54, 0x5D, 0x53, 0x53, 0x59, 0x51, 0x51, 0x56, 0x51, 0x51, 0x57, 0x50, 0x50, 0x57, 0x50, 0x4F, 
   0x58, 0x52, 0x50, 0x5D, 0x55, 0x54, 0x5C, 0x54, 0x53, 0x5D, 0x53, 0x52, 0x5E, 0x55, 0x54, 0x58, 
   0x50, 0x4F, 0x58, 0x50, 0x4F, 0x58, 0x50, 0x50, 0x58, 0x4F, 0x4F, 0x57, 0x4E, 0x4F, 0x57, 0x4E, 
   0x4F, 0x58, 0x50, 0x50, 0x56, 0x4F, 0x4F, 0x54, 0x4C, 0x4A, 0x52, 0x4A, 0x47, 0x53, 0x49, 0x49, 
   0x53, 0x48, 0x4A, 0x51, 0x47, 0x48, 0x64, 0x59, 0x54, 0x65, 0x5A, 0x55, 0x65, 0x5A, 0x55, 0x65, 
   0x5A, 0x55, 0x67, 0x5A, 0x54, 0x68, 0x5C, 0x55, 0x68, 0x5E, 0x58, 0x67, 0x5E, 0x58, 0x67, 0x5D, 
   0x58, 0x68, 0x5D, 0x58, 0x6A, 0x5E, 0x59, 0x6A, 0x5E, 0x58, 0x69, 0x5D, 0x58, 0x68, 0x5E, 0x59, 
   0x69, 0x5F, 0x5A, 0x69, 0x5E, 0x59, 0x69, 0x5E, 0x5A, 0x69, 0x5E, 0x59, 0x67, 0x5B, 0x55, 0x65, 
   0x58, 0x51, 0x64, 0x57, 0x51, 0x64, 0x58, 0x52, 0x62, 0x58, 0x52, 0x63, 0x59, 0x54, 0x63, 0x5A, 
   0x54, 0x63, 0x58, 0x54, 0x63, 0x58, 0x54, 0x65, 0x59, 0x56, 0x66, 0x5A, 0x57, 0x66, 0x59, 0x55, 
   0x64, 0x58, 0x54, 0x63, 0x57, 0x54, 0x62, 0x56, 0x53, 0x61, 0x56, 0x51, 0x62, 0x57, 0x50, 0x64, 
   0x58, 0x53, 0x64, 0x59, 0x54, 0x63, 0x58, 0x54, 0x64, 0x58, 0x54, 0x64, 0x59, 0x53, 0x64, 0x59, 
   0x51, 0x64, 0x58, 0x52, 0x63, 0x59, 0x54, 0x62, 0x57, 0x52, 0x63, 0x58, 0x54, 0x63, 0x5A, 0x55, 
   0x62, 0x59, 0x53, 0x61, 0x56, 0x50, 0x61, 0x54, 0x4D, 0x60, 0x54, 0x4E, 0x5F, 0x55, 0x51, 0x5F, 
   0x55, 0x51, 0x62, 0x57, 0x53, 0x63, 0x58, 0x54, 0x63, 0x57, 0x52, 0x64, 0x58, 0x54, 0x67, 0x59, 
   0x58, 0x64, 0x59, 0x57, 0x62, 0x58, 0x55, 0x62, 0x56, 0x52, 0x62, 0x54, 0x4C, 0x61, 0x53, 0x4D, 
   0x61, 0x54, 0x51, 0x62, 0x56, 0x55, 0x63, 0x57, 0x55, 0x65, 0x58, 0x55, 0x63, 0x5A, 0x53, 0x63, 
   0x57, 0x51, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x66, 0x5F, 0x63, 0x6A, 0x61, 0x67, 0x6F, 0x64, 0x69, 0x6B, 0x61, 0x65, 0x6A, 
   0x60, 0x61, 0x6A, 0x60, 0x5C, 0x68, 0x5D, 0x5A, 0x64, 0x5A, 0x5C, 0x66, 0x5B, 0x5D, 0x68, 0x5D, 
   0x60, 0x69, 0x5F, 0x62, 0x63, 0x58, 0x5A, 0x5E, 0x54, 0x55, 0x5E, 0x56, 0x53, 0x5C, 0x56, 0x54, 
   0x5B, 0x55, 0x53, 0x59, 0x52, 0x52, 0x58, 0x52, 0x50, 0x56, 0x50, 0x4F, 0x57, 0x51, 0x50, 0x57, 
   0x52, 0x51, 0x57, 0x51, 0x52, 0x59, 0x52, 0x53, 0x5B, 0x52, 0x53, 0x5C, 0x52, 0x53, 0x5D, 0x52, 
   0x53, 0x5B, 0x51, 0x51, 0x58, 0x50, 0x4F, 0x56, 0x50, 0x4F, 0x5B, 0x54, 0x52, 0x5D, 0x56, 0x54, 
   0x5F, 0x58, 0x56, 0x5E, 0x56, 0x56, 0x5E, 0x55, 0x54, 0x5A, 0x50, 0x4E, 0x59, 0x51, 0x4E, 0x57, 
   0x51, 0x4D, 0x59, 0x52, 0x51, 0x5A, 0x52, 0x52, 0x59, 0x51, 0x50, 0x59, 0x50, 0x50, 0x5A, 0x51, 
   0x50, 0x59, 0x50, 0x50, 0x59, 0x4F, 0x4D, 0x55, 0x4C, 0x49, 0x54, 0x4B, 0x49, 0x54, 0x49, 0x48, 
   0x53, 0x49, 0x4A, 0x51, 0x49, 0x4A, 0x64, 0x59, 0x54, 0x65, 0x5A, 0x55, 0x65, 0x5B, 0x57, 0x66, 
   0x5B, 0x55, 0x66, 0x5B, 0x54, 0x66, 0x5A, 0x54, 0x65, 0x5B, 0x55, 0x66, 0x5C, 0x56, 0x64, 0x5B, 
   0x56, 0x65, 0x5A, 0x56, 0x68, 0x5C, 0x58, 0x6A, 0x5F, 0x59, 0x6A, 0x5E, 0x5A, 0x68, 0x5D, 0x5A, 
   0x68, 0x5E, 0x5A, 0x6A, 0x5F, 0x5B, 0x69, 0x5F, 0x5C, 0x68, 0x5E, 0x5A, 0x68, 0x5C, 0x57, 0x68, 
   0x5B, 0x54, 0x66, 0x59, 0x52, 0x64, 0x59, 0x53, 0x64, 0x59, 0x54, 0x65, 0x5A, 0x57, 0x65, 0x5C, 
   0x58, 0x64, 0x5B, 0x56, 0x61, 0x57, 0x54, 0x61, 0x57, 0x53, 0x61, 0x57, 0x54, 0x63, 0x58, 0x54, 
   0x65, 0x59, 0x55, 0x64, 0x57, 0x54, 0x62, 0x56, 0x54, 0x61, 0x55, 0x51, 0x60, 0x55, 0x4E, 0x62, 
   0x56, 0x4F, 0x62, 0x58, 0x51, 0x62, 0x58, 0x52, 0x62, 0x57, 0x53, 0x63, 0x57, 0x52, 0x63, 0x57, 
   0x50, 0x62, 0x57, 0x51, 0x63, 0x59, 0x53, 0x64, 0x59, 0x53, 0x63, 0x58, 0x53, 0x63, 0x58, 0x54, 
   0x62, 0x5A, 0x56, 0x62, 0x58, 0x54, 0x62, 0x56, 0x4F, 0x62, 0x54, 0x4E, 0x61, 0x53, 0x4E, 0x5E, 
   0x55, 0x50, 0x5F, 0x55, 0x50, 0x61, 0x56, 0x52, 0x63, 0x58, 0x53, 0x63, 0x58, 0x54, 0x63, 0x57, 
   0x54, 0x64, 0x58, 0x56, 0x64, 0x59, 0x56, 0x63, 0x59, 0x55, 0x62, 0x56, 0x51, 0x61, 0x55, 0x4F, 
   0x5F, 0x55, 0x50, 0x5F, 0x55, 0x53, 0x60, 0x56, 0x54, 0x63, 0x57, 0x54, 0x62, 0x58, 0x52, 0x62, 
   0x58, 0x53, 0x63, 0x58, 0x53, 0x65, 0x57, 0x54, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 
   0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 
   0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 
   0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x51, 0x4A, 0x47, 0x67, 0x62, 0x60, 0x67, 0x62, 0x60, 
   0x66, 0x61, 0x61, 0x68, 0x61, 0x64, 0x6C, 0x63, 0x66, 0x6C, 0x64, 0x66, 0x6C, 0x63, 0x63, 0x6A, 
   0x60, 0x60, 0x69, 0x5E, 0x5C, 0x64, 0x5B, 0x5D, 0x63, 0x5C, 0x5F, 0x67, 0x5E, 0x61, 0x5E, 0x56, 
   0x59, 0x5A, 0x52, 0x56, 0x5B, 0x52, 0x55, 0x5D, 0x55, 0x55, 0x5E, 0x57, 0x54, 0x5C, 0x55, 0x52, 
   0x5A, 0x53, 0x51, 0x59, 0x51, 0x50, 0x58, 0x50, 0x4F, 0x56, 0x4F, 0x4E, 0x57, 0x50, 0x51, 0x57, 
   0x51, 0x52, 0x58, 0x51, 0x52, 0x59, 0x51, 0x52, 0x5B, 0x52, 0x53, 0x5D, 0x54, 0x54, 0x5C, 0x52, 
   0x52, 0x5B, 0x50, 0x4F, 0x5E, 0x55, 0x53, 0x5E, 0x56, 0x56, 0x5F, 0x58, 0x56, 0x60, 0x58, 0x56, 
   0x5F, 0x57, 0x58, 0x5A, 0x52, 0x53, 0x5B, 0x51, 0x52, 0x5B, 0x52, 0x4F, 0x5B, 0x52, 0x50, 0x5B, 
   0x54, 0x52, 0x5B, 0x54, 0x53, 0x5B, 0x53, 0x53, 0x5B, 0x53, 0x52, 0x5C, 0x53, 0x52, 0x5F, 0x55, 
   0x55, 0x5A, 0x50, 0x50, 0x5A, 0x50, 0x4E, 0x58, 0x4F, 0x4D, 0x58, 0x4E