amework\FSAA.cpp ===
/*--
Copyright (c) 1999 - 2000 Microsoft Corporation - Xbox SDK

Module Name:

    Main.cpp

Abstract:

    Illustrates effects of various FSAA modes

Revision History:

    Derived from a DX8 sample.
--*/

//#include "SDKCommon.h"
#include <xtl.h>
#include <xdbg.h>
#include <xtestlib.h>
#include <xlog.h>
#include <macros.h>
#include <xgraphics.h>
#include <TCHAR.h>
#include <WCHAR.h>
#include <stdio.h>

#include "Fsaa.h"

INT AddModulus(INT Value, INT Increment, INT Max);

CFsaa::CFsaa()
{
	m_pD3D = NULL;
	m_pDevice = NULL;                  // our device
	m_pVB = NULL;                   // our vertex buffer
	
	m_wLoops = GetPrivateProfileIntA( "FSAA", "Loops", 1, FSAA_INI_PATH );;
	m_wLoop = 0;
	m_dwStartLoopTime = 0;
	m_dwFrames;
	ReadIni();

	m_dwFVF = D3DFVF_XYZRHW|D3DFVF_DIFFUSE;
	
	m_hDevice = 0;      // handle of the gamepad
	m_bPause = FALSE;
	m_bUseReset = TRUE;  // Use Reset API instead of CreateDevice/Release
	m_bUpdate = FALSE;

	StateDescription AntialiasTypes[] =
	{
		D3DMULTISAMPLE_NONE,                                    L"NONE", 
			D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR,            L"2_SAMPLES_MULTISAMPLE_LINEAR",
			D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX,          L"2_SAMPELS_MULTISAMPLE_QUINCUNX",
			D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR, L"2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR",
			D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR,   L"2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR",
			D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR,            L"4_SAMPLES_MULTISAMPLE_LINEAR",
			D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_GAUSSIAN,          L"4_SAMPLES_MULTISAMPLE_GAUSSIAN",
			D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_LINEAR,            L"4_SAMPLES_SUPERSAMPLE_LINEAR",
			D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_GAUSSIAN,          L"4_SAMPLES_SUPERSAMPLE_GAUSSIAN",
			D3DMULTISAMPLE_9_SAMPLES_MULTISAMPLE_GAUSSIAN,          L"9_SAMPLES_MULTISAMPLE_GAUSSIAN",
			D3DMULTISAMPLE_9_SAMPLES_SUPERSAMPLE_GAUSSIAN,          L"9_SAMPLES_SUPERSAMPLE_GAUSSIAN",
	};
	
	StateDescription AntialiasFormats[] =
	{
		D3DMULTISAMPLE_PREFILTER_FORMAT_X1R5G5B5,   L"PREFILTER_FORMAT_X1R5G5B5",
			D3DMULTISAMPLE_PREFILTER_FORMAT_R5G6B5,     L"PREFILTER_FORMAT_R5G6B5",
			D3DMULTISAMPLE_PREFILTER_FORMAT_X8R8G8B8,   L"PREFILTER_FORMAT_X8R8G8B8",
			D3DMULTISAMPLE_PREFILTER_FORMAT_A8R8G8B8,   L"PREFILTER_FORMAT_A8R8G8B8",
	};

	memcpy( &m_AntialiasTypes, AntialiasTypes, sizeof(m_AntialiasTypes) );
	memcpy( &m_AntialiasFormats, AntialiasFormats, sizeof(m_AntialiasFormats) );

//	m_AntialiasTypesCount = sizeof(m_AntialiasTypes) / sizeof(m_AntialiasTypes[0]);
//	m_AntialiasFormatsCount = sizeof(m_AntialiasFormats) / sizeof(m_AntialiasFormats[0]);
}

//------------------------------------------------------------------------------
HRESULT CFsaa::InitGraphics()
{
	HRESULT hr = S_OK;

    // Create D3D 8.
    if(m_pD3D == NULL)
    {
        m_pD3D = Direct3DCreate8(D3D_SDK_VERSION);
        if ( NULL == m_pD3D )
		{
            return E_FAIL;
		}
    }

    // Set the screen mode.
    D3DPRESENT_PARAMETERS d3dpp;
    InitPresentationParameters(&d3dpp);

    // Create the device.
    EXECUTE( m_pD3D->CreateDevice(D3DADAPTER_DEFAULT,
                             D3DDEVTYPE_HAL,
                             0,
                             D3DCREATE_HARDWARE_VERTEXPROCESSING,
                             &d3dpp,
                             &m_pDevice) )
    if ( FAILED ( hr ) )
	{
		return hr;
	}

    m_pDevice->SetFlickerFilter(m_iFlicker);

	if ( !InitGammaRamp() )
	{
		return E_FAIL;
	}

	m_dwStartLoopTime = timeGetTime();
	m_dwFrames = 0;

    return hr;
}

//------------------------------------------------------------------------------
VOID CFsaa::InitPresentationParameters(D3DPRESENT_PARAMETERS *ppp)
{
    ZeroMemory(ppp, sizeof(*ppp));

    ppp->BackBufferWidth           = 640;
    ppp->BackBufferHeight          = 480;
    ppp->BackBufferFormat          = D3DFMT_X8R8G8B8;
    ppp->BackBufferCount           = 2;
    ppp->Windowed                  = false;   // Must be false for Xbox.
    ppp->EnableAutoDepthStencil    = true;
    ppp->AutoDepthStencilFormat    = D3DFMT_D24S8;
    ppp->SwapEffect                = D3DSWAPEFFECT_DISCARD;
    ppp->FullScreen_PresentationInterval = D3DPRESENT_INTERVAL_IMMEDIATE;
    if (m_iType != 0)
        ppp->MultiSampleType       = m_AntialiasTypes[m_iType].MultisampleFormat
                                    | m_AntialiasFormats[m_iFormat].MultisampleFormat;

/*    DbgPrint("Flicker: %li  FSAA type: %s | %s\n", 
             m_iFlicker,
             m_AntialiasTypes[m_iType].Text,
             m_AntialiasFormats[m_iFormat].Text);*/
}

//------------------------------------------------------------------------------
BOOL CFsaa::InitGammaRamp()
{
    D3DGAMMARAMP ramp;
    DWORD i;

    for (i = 0; i <= 255; i++)
    {
        FLOAT f = i / 255.0f;

        // sRGB is a gamma of 2.2, but we'll approximate with 2:

        f = (FLOAT) sqrt(f);

        // Normalize and round:

        BYTE b = (BYTE) (f * 255.0f + 0.5f);

        ramp.red[i] = b;
        ramp.green[i] = b;
        ramp.blue[i] = b;
    }

    m_pDevice->SetGammaRamp(0, &ramp);

	// only need to do this once as we are no longer taking input
	m_pDevice->SetFlickerFilter(m_iFlicker);

    return true;
}

//------------------------------------------------------------------------------
HRESULT CFsaa::DestroyGraphics()
{
	HRESULT hr = S_OK;

	DumpStats();

    RELEASE( m_pDevice )

    RELEASE( m_pD3D )

	return hr;
}

//------------------------------------------------------------------------------
HRESULT CFsaa::InitResources()
{
	HRESULT hr = S_OK;

	// Create the vertex buffer.
    void* pVerts;

    UINT v = 0;
    for(UINT i=0; i<NUMPRIMS; i++)
    {
        Verts[v].x = 320.0f;
        Verts[v].y = 240.0f;
        Verts[v].z = 0.5f;
        Verts[v].w = 1.0f;
        Verts[v].color = 0xffffffff;
        v++;

        Verts[v].x = (FLOAT)(320. + 320.*(cos(i*2.0*DR)));
        Verts[v].y = (FLOAT)(240. + 320.*(sin(i*2.0*DR)));
        Verts[v].z = 0.5f;
        Verts[v].w = 1.0f;
        Verts[v].color = 0xffffffff;
        v++;

        Verts[v].x = (FLOAT)(320. + 320.*(cos((i*2.0+1.0)*DR)));
        Verts[v].y = (FLOAT)(240. + 320.*(sin((i*2.0+1.0)*DR)));
        Verts[v].z = 0.5f;
        Verts[v].w = 1.0f;
        Verts[v].color = 0xffffffff;
        v++;
    }
    EXECUTE( m_pDevice->CreateVertexBuffer( sizeof(Verts), D3DUSAGE_WRITEONLY, m_dwFVF, D3DPOOL_MANAGED, &m_pVB ) )
    if ( FAILED ( hr ) )
	{
		return hr;
	}

    m_pVB->Lock( 0, sizeof(Verts), (BYTE **)(&pVerts), 0 );
    memcpy( (void*)pVerts, (void*)Verts, sizeof(Verts) );
    m_pVB->Unlock();

	return hr;
}

//------------------------------------------------------------------------------
HRESULT CFsaa::DestroyResources()
{
	HRESULT hr = S_OK;

	RELEASE( m_pVB );

	return hr;
}

//------------------------------------------------------------------------------
HRESULT CFsaa::ReadIni()
{
	HRESULT hr = S_OK;

	CHAR szSectionName[256];

	sprintf( szSectionName, "LOOP%d", m_wLoop );

	m_iType = GetPrivateProfileIntA( szSectionName, "Type", 0, FSAA_INI_PATH );
	m_iFormat = GetPrivateProfileIntA( szSectionName, "Format", 0, FSAA_INI_PATH );
	m_iFlicker = GetPrivateProfileIntA( szSectionName, "Flicker", 4, FSAA_INI_PATH );
	m_dwTime = GetPrivateProfileIntA( szSectionName, "Time", 60000, FSAA_INI_PATH );

	return hr;
}

//------------------------------------------------------------------------------
HRESULT CFsaa::ProcessInput()
{
	HRESULT hr = S_OK;

    DWORD dwInsertions, dwRemovals;
    //INT key = -1;
    
    //
    //  Check to see if a port 0 gamepad has come or gone.
    //
    if(XGetDeviceChanges(XDEVICE_TYPE_GAMEPAD, &dwInsertions, &dwRemovals))
    {
        if(dwRemovals&XDEVICE_PORT0_MASK)
        {
            if(m_hDevice)
            {
                XInputClose(m_hDevice);
                m_hDevice = NULL;
            }
        }
        if(dwInsertions&XDEVICE_PORT0_MASK)
        {
            m_hDevice = XInputOpen(XDEVICE_TYPE_GAMEPAD, XDEVICE_PORT0, XDEVICE_NO_SLOT, NULL);
        }
    }

#if 0
    // If we have a device, get its state.
    if (m_hDevice)
    {
        XINPUT_STATE InputState;

        XInputGetState(m_hDevice, &InputState);
        // check to see if we need to change modes
        for (UINT i = 0; i < 6; i++)
        {
            if ((InputState.Gamepad.bAnalogButtons[i] == 0) != 
                (m_PreviousState[i] == 0))
            {
                m_bKeyDown[i] = !m_bKeyDown[i];
                if (m_bKeyDown[i])
                    key = i;
            }
            m_PreviousState[i] = InputState.Gamepad.bAnalogButtons[i];
        }

		if (key == XINPUT_GAMEPAD_BLACK)
		{
			m_bPause = !m_bPause;
			m_bUpdate = TRUE;
		}
		else if (key == XINPUT_GAMEPAD_A)
		{
			m_iType = AddModulus(m_iType, 1, FSAA_NUM_AA_TYPES);
			m_bUpdate = FALSE;
		}
		else if (key == XINPUT_GAMEPAD_B)
		{
			m_iType = AddModulus(m_iType, -1, FSAA_NUM_AA_TYPES);
			m_bUpdate = FALSE;
		}
		else if (key == XINPUT_GAMEPAD_X)
		{
			m_iFlicker = AddModulus(m_iFlicker, 1, 5);
			m_bUpdate = FALSE;
		}
		else if (key == XINPUT_GAMEPAD_Y)
		{
			m_iFlicker = AddModulus(m_iFlicker, -1, 5);
			m_bUpdate = FALSE;
		}
    }
#endif 0

	return hr;
}


//------------------------------------------------------------------------------
HRESULT CFsaa::Update()
{
	HRESULT hr = S_OK;

#if 0
	D3DPRESENT_PARAMETERS pp;

	if ( m_bUpdate )
	{
		
		m_pDevice->PersistDisplay();
		
		if (m_bUseReset)
		{
			InitPresentationParameters(&pp);
			if (m_pDevice->Reset(&pp) != S_OK)
			{
				DbgPrint( "Could not Reset\n");
				_asm int 3;
			}
		}
		else
		{
			DestroyGraphics();
			if ( FAILED( InitGraphics() ) )
			{
				DbgPrint( "Could not initialize\n");
				_asm int 3;
			}
		}
		
		m_pDevice->SetFlickerFilter(m_iFlicker);
	}
#endif 0

	if ( m_dwCurrentTime-m_dwStartLoopTime > m_dwTime ) // run for time specified in ini file
	{
		m_wLoop++;
		if ( m_wLoop >= m_wLoops )
		{
			m_bQuit = TRUE;
		}
		else
		{
			EXECUTE( DestroyGraphics() );
			EXECUTE( ReadIni() );
			EXECUTE( InitGraphics() );
			if ( FAILED( hr ) )
			{
				return hr;
			}
		}
	}
	
	return hr;
}


//------------------------------------------------------------------------------
HRESULT CFsaa::Render()
{
	HRESULT hr = S_OK;

    DWORD minFilter;
    DWORD magFilter;

    // Exercise the synchornization code.
    TheVerts* pVerts;
    
    m_pVB->Lock( 0, sizeof(Verts), (BYTE **)(&pVerts), 0 );

    // Transform the verticies to make the triangle spin so we can verify that
    // this actually works over a period of time.
    //
    static DWORD Time = GetTickCount();
    static DWORD CurrentTime;
     
    // If paused, just use the same time as last time:
    if (!m_bPause)
        CurrentTime = GetTickCount();

    // 180 seconds per rotation
    float spin = 2 * 3.14159f * (float)(CurrentTime - Time) / 180000.0f;

    DWORD i;

    for (i = 0; i < NUMPRIMS*3; i++)
    {

        float x = Verts[i].x;
        float y = Verts[i].y;

        x = x - 320.0f;
        y = y - 240.0f;

        pVerts[i].x = x * (float)cos(spin) - y * (float)sin(spin);
        pVerts[i].y = x * (float)sin(spin) + y * (float)cos(spin);

        pVerts[i].x += 320.0f;
        pVerts[i].y += 240.0f;
    }

    m_pVB->Unlock();

    // Clear the frame buffer, Zbuffer.
    m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER|D3DCLEAR_STENCIL, 0X00000000, 1.0, 0);

    // Draw the vertex streamsetup in stream 0.
    m_pDevice->BeginScene();

    m_pDevice->SetStreamSource( 0, m_pVB, sizeof(Verts[0]) );
    m_pDevice->SetVertexShader( m_dwFVF );
    m_pDevice->DrawPrimitive( D3DPT_TRIANGLELIST, 0, NUMPRIMS );      // Draw a single triangle.

    m_pDevice->EndScene();

    // Flip the buffers.
    m_pDevice->SetTextureStageState(0, D3DTSS_MINFILTER, D3DTEXF_POINT);
    m_pDevice->SetTextureStageState(0, D3DTSS_MAGFILTER, D3DTEXF_POINT);
    m_pDevice->SetShaderConstantMode(D3DSCM_192CONSTANTS);
    m_pDevice->Present(NULL, NULL, NULL, NULL);
    m_pDevice->SetShaderConstantMode(D3DSCM_96CONSTANTS);
    m_pDevice->GetTextureStageState(0, D3DTSS_MINFILTER, &minFilter);
    m_pDevice->GetTextureStageState(0, D3DTSS_MAGFILTER, &magFilter);

    if ((minFilter != D3DTEXF_POINT) || (magFilter != D3DTEXF_POINT))
        _asm int 3;

	m_dwFrames++;

	return hr;
}


//------------------------------------------------------------------------------
VOID CFsaa::DumpStats()
{
	WCHAR str[512];
	CHAR  szBuf[512];

	swprintf( str, L"\nType: %s\tFormat: %s\tFlicker: %d\n=>\tFPS: %f\n\n", m_AntialiasTypes[m_iType].Text, m_AntialiasFormats[m_iFormat].Text, m_iFlicker, (FLOAT)m_dwFrames*1000.0f/(FLOAT)(m_dwCurrentTime-m_dwStartLoopTime) );
	wcstombs( szBuf, str, 512 );
	DbgPrint( szBuf );
}


//-----------------------------------------------------------------------------
// Name: AddModulus()
//-----------------------------------------------------------------------------
INT AddModulus(INT Value, INT Increment, INT Max)
{
    Value += Increment;
    if (Value >= Max)
        Value -= Max;
    if (Value < 0)
        Value += Max;

    return Value;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\Ini.cpp ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

	Ini.cpp

Abstract:

	abstract-for-module

Author:

	Jeff Sullivan (jeffsul) 11-Jul-2001

[Environment:]

	optional-environment-info (e.g. kernel mode only...)

[Notes:]

	optional-notes

Revision History:

	11-Jul-2001 jeffsul
		Initial Version

--*/

#include "Ini.h"
#include "utils.h"
#include <xtl.h>
#include <xdbg.h>
#include <xtestlib.h>
#include <xlog.h>
#include <macros.h>
#include <stdio.h>
#include <assert.h>

#include <d3d8perf.h>
#include <d3d8types.h>

BOOL GetIniConst(const char *szStr, int cchStr, DWORD *pval);

FLOAT GetPrivateProfileFloat( LPCTSTR lpAppName,  // section name
  LPCTSTR lpKeyName,  // key name
  FLOAT fDefault,       // return value if key name not found
  LPCTSTR lpFileName  // initialization file name
)
{
	CHAR szBuf[256];
	CHAR szDefault[256];

	FLOAT fVal = 0.0f;

	sprintf( szDefault, "%f", fDefault );

	GetPrivateProfileStringA( (LPCSTR)lpAppName, (LPCSTR)lpKeyName, szDefault, szBuf, 256, (LPCSTR)lpFileName );

	fVal = (FLOAT)atof( szBuf );

	return fVal;
}

DWORD GetPrivateProfileConst( LPCTSTR lpAppName,  // section name
  LPCTSTR lpKeyName,  // key name
  DWORD dwDefault,       // return value if key name not found
  LPCTSTR lpFileName  // initialization file name
)
{
	CHAR szBuf[256];
	//CHAR szDefault[256];

	DWORD dwVal = 0L;
	INT	nNumChars = 0;
	BOOL bFound = FALSE;

	//sprintf( szDefault, "%d", fDefault );

	nNumChars = GetPrivateProfileStringA( (LPCSTR)lpAppName, (LPCSTR)lpKeyName, "", szBuf, 256, (LPCSTR)lpFileName );
	if ( 0 == nNumChars )
	{
		return dwDefault;
	}

	bFound = GetIniConst( szBuf, 256, &dwVal );
	if ( FALSE == bFound )
	{
		return dwDefault;
	}

	return dwVal;
}

// macros to help us define the size of our texcoords in fillrate.ini
static const DWORD T0_SIZE1 = D3DFVF_TEXCOORDSIZE1(0);
static const DWORD T0_SIZE2 = D3DFVF_TEXCOORDSIZE2(0);
static const DWORD T0_SIZE3 = D3DFVF_TEXCOORDSIZE3(0);
static const DWORD T0_SIZE4 = D3DFVF_TEXCOORDSIZE4(0);

static const DWORD T1_SIZE1 = D3DFVF_TEXCOORDSIZE1(1);
static const DWORD T1_SIZE2 = D3DFVF_TEXCOORDSIZE2(1);
static const DWORD T1_SIZE3 = D3DFVF_TEXCOORDSIZE3(1);
static const DWORD T1_SIZE4 = D3DFVF_TEXCOORDSIZE4(1);

static const DWORD T2_SIZE1 = D3DFVF_TEXCOORDSIZE1(2);
static const DWORD T2_SIZE2 = D3DFVF_TEXCOORDSIZE2(2);
static const DWORD T2_SIZE3 = D3DFVF_TEXCOORDSIZE3(2);
static const DWORD T2_SIZE4 = D3DFVF_TEXCOORDSIZE4(2);

static const DWORD T3_SIZE1 = D3DFVF_TEXCOORDSIZE1(3);
static const DWORD T3_SIZE2 = D3DFVF_TEXCOORDSIZE2(3);
static const DWORD T3_SIZE3 = D3DFVF_TEXCOORDSIZE3(3);
static const DWORD T3_SIZE4 = D3DFVF_TEXCOORDSIZE4(3);

enum { TEX_None, TEX_2d, TEX_Cubemap, TEX_Volume, TEX_Max };
enum { TIME_Present = 0x1, TIME_Render = 0x2 };

//=========================================================================
// Callback from inifile.cpp to get int string value
//=========================================================================
BOOL GetIniConst(const char *szStr, int cchStr, DWORD *pval)
{
    #undef XTAG
    #define XTAG(_tag) { _tag, #_tag }
    static const struct
    {
        int Val;
        const char *szStr;
    } rgszConsts[] =
    {
        // Pixel Shaders
        XTAG(PS_TEXTUREMODES_NONE), XTAG(PS_TEXTUREMODES_PROJECT2D), XTAG(PS_TEXTUREMODES_PROJECT3D),
        XTAG(PS_TEXTUREMODES_CUBEMAP), XTAG(PS_TEXTUREMODES_PASSTHRU), XTAG(PS_TEXTUREMODES_CLIPPLANE),
        XTAG(PS_TEXTUREMODES_BUMPENVMAP), XTAG(PS_TEXTUREMODES_BUMPENVMAP_LUM), XTAG(PS_TEXTUREMODES_BRDF),
        XTAG(PS_TEXTUREMODES_DOT_ST), XTAG(PS_TEXTUREMODES_DOT_ZW), XTAG(PS_TEXTUREMODES_DOT_RFLCT_DIFF),
        XTAG(PS_TEXTUREMODES_DOT_RFLCT_SPEC), XTAG(PS_TEXTUREMODES_DOT_STR_3D), XTAG(PS_TEXTUREMODES_DOT_STR_CUBE),
        XTAG(PS_TEXTUREMODES_DPNDNT_AR), XTAG(PS_TEXTUREMODES_DPNDNT_GB), XTAG(PS_TEXTUREMODES_DOTPRODUCT),
        XTAG(PS_TEXTUREMODES_DOT_RFLCT_SPEC_CONST), XTAG(PS_COMPAREMODE_S_LT), XTAG(PS_COMPAREMODE_S_GE),
        XTAG(PS_COMPAREMODE_T_LT), XTAG(PS_COMPAREMODE_T_GE), XTAG(PS_COMPAREMODE_R_LT),
        XTAG(PS_COMPAREMODE_R_GE), XTAG(PS_COMPAREMODE_Q_LT), XTAG(PS_COMPAREMODE_Q_GE),
        XTAG(PS_COMBINERCOUNT_MUX_LSB), XTAG(PS_COMBINERCOUNT_MUX_MSB), XTAG(PS_COMBINERCOUNT_SAME_C0),
        XTAG(PS_COMBINERCOUNT_UNIQUE_C0), XTAG(PS_COMBINERCOUNT_SAME_C1), XTAG(PS_COMBINERCOUNT_UNIQUE_C1),
        XTAG(PS_INPUTMAPPING_UNSIGNED_IDENTITY), XTAG(PS_INPUTMAPPING_UNSIGNED_INVERT), XTAG(PS_INPUTMAPPING_EXPAND_NORMAL),
        XTAG(PS_INPUTMAPPING_EXPAND_NEGATE), XTAG(PS_INPUTMAPPING_HALFBIAS_NORMAL), XTAG(PS_INPUTMAPPING_HALFBIAS_NEGATE),
        XTAG(PS_INPUTMAPPING_SIGNED_IDENTITY), XTAG(PS_INPUTMAPPING_SIGNED_NEGATE), XTAG(PS_REGISTER_ZERO),
        XTAG(PS_REGISTER_DISCARD), XTAG(PS_REGISTER_C0), XTAG(PS_REGISTER_C1),
        XTAG(PS_REGISTER_FOG), XTAG(PS_REGISTER_V0), XTAG(PS_REGISTER_V1),
        XTAG(PS_REGISTER_T0), XTAG(PS_REGISTER_T1), XTAG(PS_REGISTER_T2),
        XTAG(PS_REGISTER_T3), XTAG(PS_REGISTER_R0), XTAG(PS_REGISTER_R1),
        XTAG(PS_REGISTER_V1R0_SUM), XTAG(PS_REGISTER_EF_PROD), XTAG(PS_REGISTER_ONE),
        XTAG(PS_REGISTER_NEGATIVE_ONE), XTAG(PS_REGISTER_ONE_HALF), XTAG(PS_REGISTER_NEGATIVE_ONE_HALF),
        XTAG(PS_CHANNEL_RGB), XTAG(PS_CHANNEL_BLUE), XTAG(PS_CHANNEL_ALPHA),
        XTAG(PS_FINALCOMBINERSETTING_CLAMP_SUM), XTAG(PS_FINALCOMBINERSETTING_COMPLEMENT_V1), XTAG(PS_FINALCOMBINERSETTING_COMPLEMENT_R0),
        XTAG(PS_COMBINEROUTPUT_IDENTITY), XTAG(PS_COMBINEROUTPUT_BIAS), XTAG(PS_COMBINEROUTPUT_SHIFTLEFT_1),
        XTAG(PS_COMBINEROUTPUT_SHIFTLEFT_1_BIAS), XTAG(PS_COMBINEROUTPUT_SHIFTLEFT_2), XTAG(PS_COMBINEROUTPUT_SHIFTRIGHT_1),
        XTAG(PS_COMBINEROUTPUT_AB_BLUE_TO_ALPHA), XTAG(PS_COMBINEROUTPUT_CD_BLUE_TO_ALPHA), XTAG(PS_COMBINEROUTPUT_AB_MULTIPLY),
        XTAG(PS_COMBINEROUTPUT_AB_DOT_PRODUCT), XTAG(PS_COMBINEROUTPUT_CD_MULTIPLY), XTAG(PS_COMBINEROUTPUT_CD_DOT_PRODUCT),
        XTAG(PS_COMBINEROUTPUT_AB_CD_SUM), XTAG(PS_COMBINEROUTPUT_AB_CD_MUX),
        XTAG(PS_DOTMAPPING_ZERO_TO_ONE), XTAG(PS_DOTMAPPING_MINUS1_TO_1_D3D), XTAG(PS_DOTMAPPING_MINUS1_TO_1_GL),
        XTAG(PS_DOTMAPPING_MINUS1_TO_1), XTAG(PS_DOTMAPPING_HILO_1), XTAG(PS_DOTMAPPING_HILO_HEMISPHERE_D3D), XTAG(PS_DOTMAPPING_HILO_HEMISPHERE_GL),
        XTAG(PS_DOTMAPPING_HILO_HEMISPHERE),

        // D3DFORMATs
        XTAG(D3DFMT_A8R8G8B8), XTAG(D3DFMT_X8R8G8B8), XTAG(D3DFMT_R5G6B5), XTAG(D3DFMT_R6G5B5),
        XTAG(D3DFMT_X1R5G5B5), XTAG(D3DFMT_A1R5G5B5), XTAG(D3DFMT_A4R4G4B4), XTAG(D3DFMT_A8),
        XTAG(D3DFMT_A8B8G8R8), XTAG(D3DFMT_B8G8R8A8), XTAG(D3DFMT_R4G4B4A4), XTAG(D3DFMT_R5G5B5A1),
        XTAG(D3DFMT_R8G8B8A8), XTAG(D3DFMT_R8B8), XTAG(D3DFMT_G8B8), XTAG(D3DFMT_P8),
        XTAG(D3DFMT_L8), XTAG(D3DFMT_A8L8), XTAG(D3DFMT_AL8), XTAG(D3DFMT_L16),
        XTAG(D3DFMT_V8U8), XTAG(D3DFMT_L6V5U5), XTAG(D3DFMT_X8L8V8U8), XTAG(D3DFMT_Q8W8V8U8),
        XTAG(D3DFMT_V16U16), XTAG(D3DFMT_D16_LOCKABLE), XTAG(D3DFMT_D16), XTAG(D3DFMT_D24S8),
        XTAG(D3DFMT_F16), XTAG(D3DFMT_F24S8), XTAG(D3DFMT_UYVY), XTAG(D3DFMT_YUY2),
        XTAG(D3DFMT_DXT1), XTAG(D3DFMT_DXT2), XTAG(D3DFMT_DXT3), XTAG(D3DFMT_DXT4),
        XTAG(D3DFMT_DXT5), XTAG(D3DFMT_LIN_A1R5G5B5), XTAG(D3DFMT_LIN_A4R4G4B4), XTAG(D3DFMT_LIN_A8),
        XTAG(D3DFMT_LIN_A8B8G8R8), XTAG(D3DFMT_LIN_A8R8G8B8), XTAG(D3DFMT_LIN_B8G8R8A8), XTAG(D3DFMT_LIN_G8B8),
        XTAG(D3DFMT_LIN_R4G4B4A4), XTAG(D3DFMT_LIN_R5G5B5A1), XTAG(D3DFMT_LIN_R5G6B5), XTAG(D3DFMT_LIN_R6G5B5),
        XTAG(D3DFMT_LIN_R8B8), XTAG(D3DFMT_LIN_R8G8B8A8), XTAG(D3DFMT_LIN_X1R5G5B5), XTAG(D3DFMT_LIN_X8R8G8B8),
        XTAG(D3DFMT_LIN_A8L8), XTAG(D3DFMT_LIN_AL8), XTAG(D3DFMT_LIN_L16), XTAG(D3DFMT_LIN_L8),
        XTAG(D3DFMT_LIN_D24S8), XTAG(D3DFMT_LIN_F24S8), XTAG(D3DFMT_LIN_D16), XTAG(D3DFMT_LIN_F16),

        XTAG(D3DMULTISAMPLE_NONE), XTAG(D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX), XTAG(D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR),
        XTAG(D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR), XTAG(D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_GAUSSIAN), XTAG(D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_LINEAR),
        XTAG(D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMULTISAMPLE_9_SAMPLES_MULTISAMPLE_GAUSSIAN),
        XTAG(D3DMULTISAMPLE_9_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_DEFAULT),
        XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_X1R5G5B5), XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_R5G6B5),
        XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_X8R8G8B8), XTAG(D3DMULTISAMPLE_PREFILTER_FORMAT_A8R8G8B8),

        XTAG(D3DMS_NONE), XTAG(D3DMS_2_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMS_2_SAMPLES_MULTISAMPLE_QUINCUNX), XTAG(D3DMS_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR),
        XTAG(D3DMS_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR), XTAG(D3DMS_4_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMS_4_SAMPLES_MULTISAMPLE_GAUSSIAN), XTAG(D3DMS_4_SAMPLES_SUPERSAMPLE_LINEAR),
        XTAG(D3DMS_4_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMS_9_SAMPLES_MULTISAMPLE_GAUSSIAN),
        XTAG(D3DMS_9_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMS_PREFILTER_FORMAT_DEFAULT),
        XTAG(D3DMS_PREFILTER_FORMAT_X1R5G5B5), XTAG(D3DMS_PREFILTER_FORMAT_R5G6B5),
        XTAG(D3DMS_PREFILTER_FORMAT_X8R8G8B8), XTAG(D3DMS_PREFILTER_FORMAT_A8R8G8B8),

        XTAG(D3DCLEAR_TARGET), XTAG(D3DCLEAR_ZBUFFER), XTAG(D3DCLEAR_STENCIL),

        // FVFs
        XTAG(D3DFVF_XYZ), XTAG(D3DFVF_XYZRHW), XTAG(D3DFVF_NORMAL), XTAG(D3DFVF_DIFFUSE),
        XTAG(D3DFVF_SPECULAR), XTAG(D3DFVF_TEX0), XTAG(D3DFVF_TEX1), XTAG(D3DFVF_TEX2),
        XTAG(D3DFVF_TEX3), XTAG(D3DFVF_TEX4),

        // textcoord sizes
        XTAG(T0_SIZE1), XTAG(T0_SIZE2), XTAG(T0_SIZE3), XTAG(T0_SIZE4),
        XTAG(T1_SIZE1), XTAG(T1_SIZE2), XTAG(T1_SIZE3), XTAG(T1_SIZE4),
        XTAG(T2_SIZE1), XTAG(T2_SIZE2), XTAG(T2_SIZE3), XTAG(T2_SIZE4),
        XTAG(T3_SIZE1), XTAG(T3_SIZE2), XTAG(T3_SIZE3), XTAG(T3_SIZE4),

        // D3DCMPs
        XTAG(D3DCMP_NEVER), XTAG(D3DCMP_LESS), XTAG(D3DCMP_EQUAL), XTAG(D3DCMP_LESSEQUAL),
        XTAG(D3DCMP_GREATER), XTAG(D3DCMP_NOTEQUAL), XTAG(D3DCMP_GREATEREQUAL), XTAG(D3DCMP_ALWAYS),

        XTAG(D3DTEXF_NONE), XTAG(D3DTEXF_POINT), XTAG(D3DTEXF_LINEAR), XTAG(D3DTEXF_ANISOTROPIC),
        XTAG(D3DTEXF_QUINCUNX), XTAG(D3DTEXF_GAUSSIANCUBIC),

        XTAG(TEX_None), XTAG(TEX_2d), XTAG(TEX_Cubemap), XTAG(TEX_Volume),

        XTAG(TIME_Present), XTAG(TIME_Render),

        // swaths
        XTAG(D3DSWATH_8), XTAG(D3DSWATH_16), XTAG(D3DSWATH_32),
        XTAG(D3DSWATH_64), XTAG(D3DSWATH_128), XTAG(D3DSWATH_OFF),

        XTAG(D3DCOLORWRITEENABLE_RED), XTAG(D3DCOLORWRITEENABLE_GREEN), XTAG(D3DCOLORWRITEENABLE_BLUE),
        XTAG(D3DCOLORWRITEENABLE_ALPHA), XTAG(D3DCOLORWRITEENABLE_ALL),

        // misc
        XTAG(FALSE), XTAG(TRUE)
    };

    for(int ifmt = 0; ifmt < ARRAYSIZE(rgszConsts); ifmt++)
    {
        if(!_strnicmp(rgszConsts[ifmt].szStr, szStr, cchStr))
        {
            // set val
            *pval = (DWORD)rgszConsts[ifmt].Val;
            return true;
        }
    }

    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtdead1\dtypes.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    dtypes.h

Author:

    Matt Bronder

Description:

    Various type definitions.

*******************************************************************************/

#ifndef __DTYPES_H__
#define __DTYPES_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FVF_VERTEX              (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1)
#define FVF_BVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3)
#define FVF_BVERTEX2            (D3DFVF_XYZ | D3DFVF_TEX2)
#define FVF_NVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3 | \
                                              D3DFVF_TEXCOORDSIZE2(0) | \
                                              D3DFVF_TEXCOORDSIZE2(1) | \
                                              D3DFVF_TEXCOORDSIZE3(2))
#define FVF_LVERTEX             (D3DFVF_XYZ | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLVERTEX            (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLBVERTEX           (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX2)
#define FVF_CVERTEX             (D3DFVF_XYZ | D3DFVF_NORMAL)
#define FVF_CVERTEX1_3          (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 | \
                                 D3DFVF_TEXCOORDSIZE3(0))

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _TCOORD {
    float               u;
    float               v;
} TCOORD, *PTCOORD;

//******************************************************************************
typedef struct _TCOORD2 {
    float               u;
    float               v;
} TCOORD2, *PTCOORD2;

//******************************************************************************
typedef struct _TCOORD3 {
    float               u;
    float               v;
    float               t;
} TCOORD3, *PTCOORD3;

//******************************************************************************
typedef struct _MATRIX3X3 {
    union {
        struct {
            float _11, _12, _13;
            float _21, _22, _23;
            float _31, _32, _33;
        };
        float m[3][3];
        struct {
            D3DXVECTOR3 r1;
            D3DXVECTOR3 r2;
            D3DXVECTOR3 r3;
        };
    };
} MATRIX3X3, *PMATRIX3X3;

//******************************************************************************
typedef struct _VERTEX {
    D3DXVECTOR3 vPosition;
    D3DXVECTOR3 vNormal;
    float       u0, v0;

    _VERTEX() {}
    _VERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0;
    }
} VERTEX, *PVERTEX;

//******************************************************************************
typedef struct _BVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (bump) map coordinates
    float       u2, v2;         // Diffuse light map coordinates

    _BVERTEX() {}
    _BVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2;
    }
} BVERTEX, *PBVERTEX;

//******************************************************************************
typedef struct _BVERTEX2 {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates and height (bump) map coordinates
    float       u1, v1;         // Diffuse light map coordinates

    _BVERTEX2() {}
    _BVERTEX2(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} BVERTEX2, *PBVERTEX2;

//******************************************************************************
typedef struct _NVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (normal) map coordinates
    float       u2, v2, t2;     // Light direction in tangent space

    _NVERTEX() {}
    _NVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2, float _t2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2; t2 = _t2;
    }
} NVERTEX, *PNVERTEX;

//******************************************************************************
typedef struct _LVERTEX {
    D3DXVECTOR3 vPosition;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _LVERTEX() { }
    _LVERTEX(const D3DVECTOR& v, D3DCOLOR _cDiffuse, D3DCOLOR _cSpecular, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} LVERTEX, *PLVERTEX;

//******************************************************************************
typedef struct _TLVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _TLVERTEX() {}
    _TLVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} TLVERTEX, *PTLVERTEX;

//******************************************************************************
typedef struct _TLBVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;
    float       u1, v1;

    _TLBVERTEX() {}
    _TLBVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0, float _u1, float _v1) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} TLBVERTEX, *PTLBVERTEX;

//******************************************************************************
typedef struct _CVERTEX {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;

    _CVERTEX() { }
    _CVERTEX(const D3DVECTOR& v, const D3DVECTOR& n) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
    }
} CVERTEX, *PCVERTEX;

//******************************************************************************
typedef struct _VERTEX1_3 {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;
    float         u0, v0, t0;

    _VERTEX1_3() { }
    _VERTEX1_3(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0, float _t0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0; t0 = _t0;
    }
} VERTEX1_3, *PVERTEX1_3;

#endif //__DTYPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\Ini.h ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

	Ini.h

Abstract:

	abstract-for-module

Author:

	Jeff Sullivan (jeffsul) 11-Jul-2001

[Environment:]

	optional-environment-info (e.g. kernel mode only...)

[Notes:]

	optional-notes

Revision History:

	11-Jul-2001 jeffsul
		Initial Version

--*/

#ifndef __INI_H__
#define __INI_H__

#include <xtl.h>

FLOAT GetPrivateProfileFloat( LPCTSTR lpAppName,  // section name
  LPCTSTR lpKeyName,  // key name
  FLOAT fDefault,       // return value if key name not found
  LPCTSTR lpFileName  // initialization file name
);

DWORD GetPrivateProfileConst( LPCTSTR lpAppName,  // section name
  LPCTSTR lpKeyName,  // key name
  DWORD dwDefault,       // return value if key name not found
  LPCTSTR lpFileName  // initialization file name
);
	
#endif // #ifndef __INI_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\Test.h ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

	Test.h

Abstract:

	Abstract class to inherit from for individual tests

Author:

	Jeff Sullivan (jeffsul) 14-Jun-2001

Revision History:

	14-Jun-2001 jeffsul
		Initial Version

--*/

#ifndef __TEST_H__
#define __TEST_H__

#include <xtl.h>

/****************************************************************************
 *
 * The Global Logging Handle
 *
 ****************************************************************************/

extern HANDLE g_hLog;

class CTest
{
public:

	CTest();												//	constructor: for now only sets m_bQuit to FALSE
	virtual ~CTest();										//	virtually destroy class (and inherited class)
	HRESULT Run();											//	the test's main loop

protected:

	//------------------------------------------------------------------------------
	//	Overridable functions to do the test's initialization/cleanup (before and
	//	after main loop)
	//------------------------------------------------------------------------------

	virtual HRESULT InitGraphics() { return S_OK; }			//	init d3d here (i.e., create a device, etc.)
	virtual HRESULT DestroyGraphics() { return S_OK; }		//	cleanup anything created in InitGraphics() here
	virtual HRESULT InitInput() { return S_OK; }			//	init input devices (i.e., call XInputOpen(), not XInitDevices())
	virtual HRESULT DestroyInput() { return S_OK; }			//	cleanup anything created in InitInput() here
	virtual HRESULT InitAudio() { return S_OK; }			//	init audio devices here
	virtual HRESULT DestroyAudio() { return S_OK; }			//	cleanup anything created in InitAudio() here
	virtual HRESULT InitResources() { return S_OK; }		//	init resources (models, textures, sound files, etc.) here
	virtual HRESULT DestroyResources() { return S_OK; }		//	cleanup anything created in InitResources() here


	//------------------------------------------------------------------------------
	//	Overidable functions to do the test's real work (inside the main loop)
	//------------------------------------------------------------------------------

	virtual HRESULT ProcessInput() { return S_OK; }			//	should be used to get any input from devices and process it
	virtual HRESULT Update() { return S_OK; }				//	any updates that need to be performed each frame are done here
	virtual HRESULT Render() { return S_OK; }				//	draw everything to the screen here


	//------------------------------------------------------------------------------
	//	Protected data members that are useful to the inherited classes
	//------------------------------------------------------------------------------

	BOOL				m_bQuit;							//	loop continues while FALSE
	DWORD				m_dwStartTime;						//	start time of test
	DWORD				m_dwCurrentTime;					//	current time of test
	DWORD				m_dwDeltaTime;						//	time between current frame and previous

private:

	//------------------------------------------------------------------------------
	//	Private data member that should not be visible to inherited classes
	//------------------------------------------------------------------------------

	HRESULT Init();											//	calls overridable functions to do all initialization
	HRESULT Destroy();										//	calls overridable functions to do all cleanup

	static BOOL			m_bInitDevicesCalled;				//	keeps track of whether XInitDevices() has been called
};
	
#endif // #ifndef __TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\Test.cpp ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

	Test.cpp

Abstract:

	Abstract class implementation to inherit from for individual tests

Author:

	Jeff Sullivan (jeffsul) 14-Jun-2001

Revision History:

	14-Jun-2001 jeffsul
		Initial Version

--*/

#include "Test.h"

#include <xdbg.h>
#include <xlog.h>
#include <macros.h>

#include <stdio.h>


//------------------------------------------------------------------------------
//	Inititialize static variable to FALSE so that XInitDevices() is called
//------------------------------------------------------------------------------

BOOL CTest::m_bInitDevicesCalled = FALSE;


/*++

	CTest constructor

Routine Description:

	constructor

Arguments:

	None

Return Value:

	None

--*/

CTest::CTest()
{
	m_bQuit = FALSE;
}


/*++

	CTest destructor

Routine Description:

	destructor

Arguments:

	None

Return Value:

	None

--*/

CTest::~CTest()
{
}


/*++

	Run

Routine Description:

	The test's main loop: initialize, enter loop, destroy

Arguments:

	None

Return Value:

	None

--*/

HRESULT CTest::Run()
{
	HRESULT hr = S_OK;

	// initialize all resources/devices
	EXECUTE( Init() );
	if ( FAILED( hr ) )
	{
		Destroy();
		return hr;
	}

	// loop for as long as test needs to run
	while ( !m_bQuit )
	{
		// calculate time change since last frame and update time variables
		DWORD dwTempTime = timeGetTime();
		m_dwDeltaTime = dwTempTime - m_dwCurrentTime;
		m_dwCurrentTime = dwTempTime;

		// do the real work of the test inside these functions
		EXECUTE( ProcessInput() )
		EXECUTE( Update() )
		EXECUTE( Render() )
	}

	// clean up 
	EXECUTE( Destroy() )

	return hr;
}


/*++

	Init

Routine Description:

	Common initialization function for all tests, calls inheritable functions to do
	initialization and starts timers

Arguments:

	None

Return Value:

	None

--*/

HRESULT CTest::Init()
{
	HRESULT hr = S_OK;

	EXECUTE( InitGraphics() )
	if ( FAILED ( hr ) )
	{
		return hr;
	}

	EXECUTE( InitAudio() )
	if ( FAILED ( hr ) )
	{
		DestroyGraphics();
		return hr;
	}

	if ( !m_bInitDevicesCalled )
	{
		// we only need to call this once for all tests, hence static declaration of m_bInitDevicesCalled
		XInitDevices( 0, NULL );
		m_bInitDevicesCalled = TRUE;
	}

	EXECUTE( InitInput() )
	if ( FAILED ( hr ) )
	{
		DestroyGraphics();
		DestroyAudio();
		return hr;
	}

	EXECUTE( InitResources() )
	if ( FAILED ( hr ) )
	{
		DestroyGraphics();
		DestroyAudio();
		DestroyInput();
		return hr;
	}

	m_dwStartTime = m_dwCurrentTime = timeGetTime(); 

	return hr;
}


/*++

	Destroy

Routine Description:

	Common de-allocation function for all tests, calls inheritable functions to do
	un-initialization/deletion

Arguments:

	None

Return Value:

	None

--*/

HRESULT CTest::Destroy()
{
	HRESULT hr = S_OK;

	EXECUTE( DestroyGraphics() )
	EXECUTE( DestroyAudio() )
	EXECUTE( DestroyInput() )
	EXECUTE( DestroyResources() )

	return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\utils.cpp ===
//-----------------------------------------------------------------------------
// FILE: FILLRATE.CPP
//
// Desc: a stupid fillrate test
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include <xtl.h>
#include <xdbg.h>
#include <xlog.h>
#include <macros.h>
#include <stdio.h>

#include "bitfont.h"
#include "utils.h"

// CScrText font class
BitFont g_bitfont;

//=========================================================================
// Stringtize PS_TEXTUREMODES_*
//=========================================================================
LPCSTR GetTextureModeStr(DWORD TextureMode)
{
    #undef XTAG
    #define XTAG(_tag) { PS_TEXTUREMODES##_tag, "PS_TM" #_tag }
    static const struct
    {
        DWORD texturemode;
        const char *szD3DMSStr;
    } rgszTMStr[] =
    {
        XTAG(_NONE), XTAG(_PROJECT2D), XTAG(_PROJECT3D),
        XTAG(_CUBEMAP), XTAG(_PASSTHRU), XTAG(_CLIPPLANE),
        XTAG(_BUMPENVMAP), XTAG(_BUMPENVMAP_LUM), XTAG(_BRDF),
        XTAG(_DOT_ST), XTAG(_DOT_ZW), XTAG(_DOT_RFLCT_DIFF),
        XTAG(_DOT_RFLCT_SPEC), XTAG(_DOT_STR_3D), XTAG(_DOT_STR_CUBE),
        XTAG(_DPNDNT_AR), XTAG(_DPNDNT_GB), XTAG(_DOTPRODUCT),
        XTAG(_DOT_RFLCT_SPEC_CONST),
    };
    static const int cFmts = sizeof(rgszTMStr) / sizeof(rgszTMStr[0]);

    for(int ifmt = 0; ifmt < cFmts; ifmt++)
    {
        if(rgszTMStr[ifmt].texturemode == TextureMode)
            return rgszTMStr[ifmt].szD3DMSStr;
    }

    return rgszTMStr[cFmts - 1].szD3DMSStr;
}

//=========================================================================
// Stringtize D3DMS_*
//=========================================================================
LPCSTR GetMultiSampleStr(DWORD mstype)
{
    #undef XTAG
    #define XTAG(_tag) { _tag, #_tag }
    static const struct
    {
        DWORD mstype;
        const char *szD3DMSStr;
    } rgszMSStr[] =
    {
        XTAG(D3DMS_NONE), XTAG(D3DMS_2_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMS_2_SAMPLES_MULTISAMPLE_QUINCUNX), XTAG(D3DMS_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR),
        XTAG(D3DMS_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR), XTAG(D3DMS_4_SAMPLES_MULTISAMPLE_LINEAR),
        XTAG(D3DMS_4_SAMPLES_MULTISAMPLE_GAUSSIAN), XTAG(D3DMS_4_SAMPLES_SUPERSAMPLE_LINEAR),
        XTAG(D3DMS_4_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMS_9_SAMPLES_MULTISAMPLE_GAUSSIAN),
        XTAG(D3DMS_9_SAMPLES_SUPERSAMPLE_GAUSSIAN), XTAG(D3DMS_PREFILTER_FORMAT_DEFAULT),
        XTAG(D3DMS_PREFILTER_FORMAT_X1R5G5B5), XTAG(D3DMS_PREFILTER_FORMAT_R5G6B5),
        XTAG(D3DMS_PREFILTER_FORMAT_X8R8G8B8), XTAG(D3DMS_PREFILTER_FORMAT_A8R8G8B8),
    };
    static const int cFmts = sizeof(rgszMSStr) / sizeof(rgszMSStr[0]);

    for(int ifmt = 0; ifmt < cFmts; ifmt++)
    {
        if(rgszMSStr[ifmt].mstype == mstype)
            return rgszMSStr[ifmt].szD3DMSStr;
    }

    return rgszMSStr[cFmts - 1].szD3DMSStr;
}

//=========================================================================
// Stringtize D3DCMP_*
//=========================================================================
LPCSTR GetD3DCMPStr(D3DCMPFUNC d3dcmpfunc)
{
    static const char *rgszD3DCmp[] =
    {
        "D3DCMP_NEVER",         // 0x200,
        "D3DCMP_LESS",          // 0x201,
        "D3DCMP_EQUAL",         // 0x202,
        "D3DCMP_LESSEQUAL",     // 0x203,
        "D3DCMP_GREATER",       // 0x204,
        "D3DCMP_NOTEQUAL",      // 0x205,
        "D3DCMP_GREATEREQUAL",  // 0x206,
        "D3DCMP_ALWAYS",        // 0x207,
        "??",
    };

    DWORD id3dcmp = min(d3dcmpfunc & 0xf, sizeof(rgszD3DCmp) / sizeof(rgszD3DCmp[0]));
    return rgszD3DCmp[id3dcmp];
}

//=========================================================================
// Stringtize D3DFMT_*
//=========================================================================
LPCSTR GetD3DFormatStr(D3DFORMAT d3dformat)
{
    #undef XTAG
    #define XTAG(_tag) { _tag, #_tag }
    static const struct
    {
        D3DFORMAT d3dformat;
        const char *szD3DFormat;
    } rgszD3DFmt[] =
    {
        XTAG(D3DFMT_A8R8G8B8), XTAG(D3DFMT_X8R8G8B8), XTAG(D3DFMT_R5G6B5),
        XTAG(D3DFMT_R6G5B5), XTAG(D3DFMT_X1R5G5B5), XTAG(D3DFMT_A1R5G5B5),
        XTAG(D3DFMT_A4R4G4B4), XTAG(D3DFMT_A8), XTAG(D3DFMT_A8B8G8R8),
        XTAG(D3DFMT_B8G8R8A8), XTAG(D3DFMT_R4G4B4A4), XTAG(D3DFMT_R5G5B5A1),
        XTAG(D3DFMT_R8G8B8A8), XTAG(D3DFMT_R8B8), XTAG(D3DFMT_G8B8),
        XTAG(D3DFMT_P8), XTAG(D3DFMT_L8), XTAG(D3DFMT_A8L8),
        XTAG(D3DFMT_AL8), XTAG(D3DFMT_L16), XTAG(D3DFMT_V8U8),
        XTAG(D3DFMT_L6V5U5), XTAG(D3DFMT_X8L8V8U8), XTAG(D3DFMT_Q8W8V8U8),
        XTAG(D3DFMT_V16U16), XTAG(D3DFMT_D16_LOCKABLE), XTAG(D3DFMT_D16),
        XTAG(D3DFMT_D24S8), XTAG(D3DFMT_F16), XTAG(D3DFMT_F24S8),
        XTAG(D3DFMT_UYVY), XTAG(D3DFMT_YUY2), XTAG(D3DFMT_DXT1),
        XTAG(D3DFMT_DXT2), XTAG(D3DFMT_DXT3), XTAG(D3DFMT_DXT4),
        XTAG(D3DFMT_DXT5), XTAG(D3DFMT_LIN_A1R5G5B5), XTAG(D3DFMT_LIN_A4R4G4B4),
        XTAG(D3DFMT_LIN_A8), XTAG(D3DFMT_LIN_A8B8G8R8), XTAG(D3DFMT_LIN_A8R8G8B8),
        XTAG(D3DFMT_LIN_B8G8R8A8), XTAG(D3DFMT_LIN_G8B8), XTAG(D3DFMT_LIN_R4G4B4A4),
        XTAG(D3DFMT_LIN_R5G5B5A1), XTAG(D3DFMT_LIN_R5G6B5), XTAG(D3DFMT_LIN_R6G5B5),
        XTAG(D3DFMT_LIN_R8B8), XTAG(D3DFMT_LIN_R8G8B8A8), XTAG(D3DFMT_LIN_X1R5G5B5),
        XTAG(D3DFMT_LIN_X8R8G8B8), XTAG(D3DFMT_LIN_A8L8), XTAG(D3DFMT_LIN_AL8),
        XTAG(D3DFMT_LIN_L16), XTAG(D3DFMT_LIN_L8), XTAG(D3DFMT_LIN_D24S8),
        XTAG(D3DFMT_LIN_F24S8), XTAG(D3DFMT_LIN_D16), XTAG(D3DFMT_LIN_F16),
        XTAG(D3DFMT_UNKNOWN),
    };
    static const int cFmts = sizeof(rgszD3DFmt) / sizeof(rgszD3DFmt[0]);

    for(int ifmt = 0; ifmt < cFmts; ifmt++)
    {
        if(rgszD3DFmt[ifmt].d3dformat == d3dformat)
            return rgszD3DFmt[ifmt].szD3DFormat;
    }

    return rgszD3DFmt[cFmts - 1].szD3DFormat;
}

//=========================================================================
// Check whether specified format is linear
//=========================================================================
bool IsLinearFormat(DWORD Format)
{
    switch(Format)
    {
    case D3DFMT_LIN_A1R5G5B5:
    case D3DFMT_LIN_A4R4G4B4:
    case D3DFMT_LIN_A8:
    case D3DFMT_LIN_A8B8G8R8:
    case D3DFMT_LIN_A8R8G8B8:
    case D3DFMT_LIN_B8G8R8A8:
    case D3DFMT_LIN_G8B8:
    case D3DFMT_LIN_R4G4B4A4:
    case D3DFMT_LIN_R5G5B5A1:
    case D3DFMT_LIN_R5G6B5:
    case D3DFMT_LIN_R6G5B5:
    case D3DFMT_LIN_R8B8:
    case D3DFMT_LIN_R8G8B8A8:
    case D3DFMT_LIN_X1R5G5B5:
    case D3DFMT_LIN_X8R8G8B8:

    case D3DFMT_LIN_A8L8:
    case D3DFMT_LIN_AL8:
    case D3DFMT_LIN_L16:
    case D3DFMT_LIN_L8:

    case D3DFMT_LIN_D24S8:
    case D3DFMT_LIN_F24S8:
    case D3DFMT_LIN_D16:
    case D3DFMT_LIN_F16:
        return true;
    }

    return false;
}

//=========================================================================
// Return number of bits per pixel/texel.
//=========================================================================
DWORD BitsPerPixelOfD3DFORMAT(DWORD Format)
{
    DWORD retval = 0;

    switch(Format)
    {
    case D3DFMT_A8R8G8B8:   // Q8W8V8U8
    case D3DFMT_X8R8G8B8:   // X8L8V8U8
    case D3DFMT_A8B8G8R8:
    case D3DFMT_B8G8R8A8:
    case D3DFMT_R8G8B8A8:
    case D3DFMT_V16U16:
    case D3DFMT_D24S8:
    case D3DFMT_F24S8:
    case D3DFMT_UYVY:
    case D3DFMT_YUY2:
    case D3DFMT_LIN_A8B8G8R8:
    case D3DFMT_LIN_A8R8G8B8:
    case D3DFMT_LIN_B8G8R8A8:
    case D3DFMT_LIN_R8G8B8A8:
    case D3DFMT_LIN_X8R8G8B8:
    case D3DFMT_LIN_D24S8:
    case D3DFMT_LIN_F24S8:
        retval = 32;
        break;

    case D3DFMT_R5G6B5:
    case D3DFMT_X1R5G5B5:
    case D3DFMT_A1R5G5B5:
    case D3DFMT_A4R4G4B4:
    case D3DFMT_R4G4B4A4:
    case D3DFMT_R5G5B5A1:
    case D3DFMT_R8B8:
    case D3DFMT_G8B8:   // V8U8
    case D3DFMT_A8L8:
    case D3DFMT_L16:
    case D3DFMT_L6V5U5:
    case D3DFMT_D16_LOCKABLE:  // D16
    case D3DFMT_F16:
    case D3DFMT_LIN_A1R5G5B5:
    case D3DFMT_LIN_A4R4G4B4:
    case D3DFMT_LIN_G8B8:
    case D3DFMT_LIN_R4G4B4A4:
    case D3DFMT_LIN_R5G5B5A1:
    case D3DFMT_LIN_R5G6B5:
    case D3DFMT_LIN_R6G5B5:
    case D3DFMT_LIN_R8B8:
    case D3DFMT_LIN_X1R5G5B5:
    case D3DFMT_LIN_A8L8:
    case D3DFMT_LIN_L16:
    case D3DFMT_LIN_D16:
    case D3DFMT_LIN_F16:
        retval = 16;
        break;

    case D3DFMT_A8:
    case D3DFMT_P8:
    case D3DFMT_L8:
    case D3DFMT_AL8:
    case D3DFMT_LIN_A8:
    case D3DFMT_LIN_AL8:
    case D3DFMT_LIN_L8:
        retval = 8;
        break;

    case D3DFMT_DXT1:
        retval = 4;
        break;

    case D3DFMT_DXT2: // DXT3
    case D3DFMT_DXT4: // DXT5
        retval = 8;
        break;

    default:
        CheckHR(E_FAIL);
        retval = 0;
        break;
    }

    return retval;
}

//=========================================================================
// Return file's last write time
//=========================================================================
UINT64 GetFileTime(LPCSTR lpFileName)
{
    WIN32_FILE_ATTRIBUTE_DATA fad;

    GetFileAttributesExA(lpFileName, GetFileExInfoStandard, &fad);
    return *(UINT64 *)&fad.ftLastWriteTime;
}

//=========================================================================
// Display d3d error then break into debugger
//=========================================================================
void DisplayError(const char *szCall, HRESULT hr)
{
    char szErr[512];

    if(hr)
    {
        UINT cch = _snprintf(szErr, sizeof(szErr), "FATAL: %s failed 0x%08lX: ", szCall, hr);

        D3DXGetErrorStringA(hr, &szErr[cch], sizeof(szErr) - cch - 1);
    }
    else
    {
        lstrcpynA(szErr, szCall, sizeof(szErr) - 1);
    }

    lstrcatA(szErr, "\n");
    OutputDebugStringA(szErr);

    _asm int 3;
}

//=========================================================================
// Formatted debug squirty
//=========================================================================
void _cdecl dprintf(LPCSTR lpFmt, ...)
{
    va_list arglist;
    char lpOutput[256];

    va_start(arglist, lpFmt);
    _vsnprintf(lpOutput, sizeof(lpOutput), lpFmt, arglist);
    va_end(arglist);

    OutputDebugStringA(lpOutput);
}

//=========================================================================
// Draw CScrText text buffer to front buffer
//=========================================================================
void CScrText::drawtext(bool fDebugSquirty)
{
    IDirect3DSurface8 *pFrontBuffer = NULL;

    D3DDevice_GetBackBuffer(-1, D3DBACKBUFFER_TYPE_MONO, &pFrontBuffer);
    if(pFrontBuffer)
    {
        // render results to the frontbuffer
        DWORD dx = 40;
        DWORD dy = 20;
        DWORD dwHeight;

        g_bitfont.GetTextStringLength(NULL, &dwHeight, NULL);
        dwHeight += 2;

        for(int iBuf = 0; iBuf < m_iLine; iBuf++)
        {
            if(fDebugSquirty)
                dprintf("%s\n", m_rgText[iBuf]);

            if(m_rgText[iBuf][0])
//                g_bitfont.DrawText(pFrontBuffer, m_rgText[iBuf], dx, dy, 0, 0xff9f9f9f, 0);

            dy += dwHeight;
        }

        RELEASE(pFrontBuffer);
    }
}

//=========================================================================
// Add a string to the CScrText string buffer
//=========================================================================
void _cdecl CScrText::printf(LPCSTR lpFmt, ...)
{
    va_list arglist;

    va_start(arglist, lpFmt);
    _vsnprintf(m_rgText[m_iLine], LINE_WIDTH, lpFmt, arglist);
    va_end(arglist);

    m_iLine = (m_iLine + 1) % NUM_LINES;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtdead2\dtypes.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    dtypes.h

Author:

    Matt Bronder

Description:

    Various type definitions.

*******************************************************************************/

#ifndef __DTYPES_H__
#define __DTYPES_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FVF_VERTEX              (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1)
#define FVF_BVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3)
#define FVF_BVERTEX2            (D3DFVF_XYZ | D3DFVF_TEX2)
#define FVF_NVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3 | \
                                              D3DFVF_TEXCOORDSIZE2(0) | \
                                              D3DFVF_TEXCOORDSIZE2(1) | \
                                              D3DFVF_TEXCOORDSIZE3(2))
#define FVF_LVERTEX             (D3DFVF_XYZ | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLVERTEX            (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLBVERTEX           (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX2)
#define FVF_CVERTEX             (D3DFVF_XYZ | D3DFVF_NORMAL)
#define FVF_CVERTEX1_3          (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 | \
                                 D3DFVF_TEXCOORDSIZE3(0))

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _TCOORD {
    float               u;
    float               v;
} TCOORD, *PTCOORD;

//******************************************************************************
typedef struct _TCOORD2 {
    float               u;
    float               v;
} TCOORD2, *PTCOORD2;

//******************************************************************************
typedef struct _TCOORD3 {
    float               u;
    float               v;
    float               t;
} TCOORD3, *PTCOORD3;

//******************************************************************************
typedef struct _MATRIX3X3 {
    union {
        struct {
            float _11, _12, _13;
            float _21, _22, _23;
            float _31, _32, _33;
        };
        float m[3][3];
        struct {
            D3DXVECTOR3 r1;
            D3DXVECTOR3 r2;
            D3DXVECTOR3 r3;
        };
    };
} MATRIX3X3, *PMATRIX3X3;

//******************************************************************************
typedef struct _VERTEX {
    D3DXVECTOR3 vPosition;
    D3DXVECTOR3 vNormal;
    float       u0, v0;

    _VERTEX() {}
    _VERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0;
    }
} VERTEX, *PVERTEX;

//******************************************************************************
typedef struct _BVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (bump) map coordinates
    float       u2, v2;         // Diffuse light map coordinates

    _BVERTEX() {}
    _BVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2;
    }
} BVERTEX, *PBVERTEX;

//******************************************************************************
typedef struct _BVERTEX2 {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates and height (bump) map coordinates
    float       u1, v1;         // Diffuse light map coordinates

    _BVERTEX2() {}
    _BVERTEX2(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} BVERTEX2, *PBVERTEX2;

//******************************************************************************
typedef struct _NVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (normal) map coordinates
    float       u2, v2, t2;     // Light direction in tangent space

    _NVERTEX() {}
    _NVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2, float _t2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2; t2 = _t2;
    }
} NVERTEX, *PNVERTEX;

//******************************************************************************
typedef struct _LVERTEX {
    D3DXVECTOR3 vPosition;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _LVERTEX() { }
    _LVERTEX(const D3DVECTOR& v, D3DCOLOR _cDiffuse, D3DCOLOR _cSpecular, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} LVERTEX, *PLVERTEX;

//******************************************************************************
typedef struct _TLVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _TLVERTEX() {}
    _TLVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} TLVERTEX, *PTLVERTEX;

//******************************************************************************
typedef struct _TLBVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;
    float       u1, v1;

    _TLBVERTEX() {}
    _TLBVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0, float _u1, float _v1) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} TLBVERTEX, *PTLBVERTEX;

//******************************************************************************
typedef struct _CVERTEX {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;

    _CVERTEX() { }
    _CVERTEX(const D3DVECTOR& v, const D3DVECTOR& n) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
    }
} CVERTEX, *PCVERTEX;

//******************************************************************************
typedef struct _VERTEX1_3 {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;
    float         u0, v0, t0;

    _VERTEX1_3() { }
    _VERTEX1_3(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0, float _t0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0; t0 = _t0;
    }
} VERTEX1_3, *PVERTEX1_3;

#endif //__DTYPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\perf\framework\utils.h ===
//-----------------------------------------------------------------------------
// FILE: UTILS.H
//
// Desc: utils header file
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#ifndef __UTILS_H__
#define __UTILS_H__

#define ARRAYSIZE(_a)     (sizeof(_a) / sizeof((_a)[0]))

//=========================================================================
// Release helper function
//=========================================================================
#if 0
template <class T> inline void RELEASE(T& punk)
{
    if(punk)
    {
        punk->Release();
        punk = NULL;
    }
}
#endif


//=========================================================================
// Class to help time things
//=========================================================================
class CTimer
{
public:
    // constructor
    CTimer()
    {
        QueryPerformanceFrequency((LARGE_INTEGER*)&ticksPerSecond);
        ticksPerSecond /= 1000;
    }

    ~CTimer() {};

    void Start()
        { frunning = true; QueryPerformanceCounter((LARGE_INTEGER *)&ticksstart); }

    void Stop()
        { frunning = false; QueryPerformanceCounter((LARGE_INTEGER *)&ticksend); }

    float getTime()
        {
            if(frunning)
                QueryPerformanceCounter((LARGE_INTEGER *)&ticksend);
            return ((ticksend - ticksstart) * 1.0f / ticksPerSecond);
        }

    bool frunning;
    _int64 ticksstart;
    _int64 ticksend;
    _int64 ticksPerSecond;
};

//=========================================================================
// Screen Text helper class
//=========================================================================
class CScrText
{
public:
    CScrText()
        { cls(); }

    ~CScrText() {}

    void cls()
    {
        m_iLine = 0;
        for(int i = 0; i < NUM_LINES; i++)
            m_rgText[i][0] = 0;
    }
    void _cdecl printf(LPCSTR lpFmt, ...);
    void drawtext(bool fDebugSquirty);

private:
    enum { LINE_WIDTH = 80, NUM_LINES = 40 };
    char m_rgText[NUM_LINES][LINE_WIDTH];
    int m_iLine;
};

// redefine these guys to make them shorter and remove the misleading D3DMULTISAMPLE_ part
#define D3DMS_NONE                                         D3DMULTISAMPLE_NONE
#define D3DMS_2_SAMPLES_MULTISAMPLE_LINEAR                 D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR
#define D3DMS_2_SAMPLES_MULTISAMPLE_QUINCUNX               D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX
#define D3DMS_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR      D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR
#define D3DMS_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR        D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR
#define D3DMS_4_SAMPLES_MULTISAMPLE_LINEAR                 D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR
#define D3DMS_4_SAMPLES_MULTISAMPLE_GAUSSIAN               D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_GAUSSIAN
#define D3DMS_4_SAMPLES_SUPERSAMPLE_LINEAR                 D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_LINEAR
#define D3DMS_4_SAMPLES_SUPERSAMPLE_GAUSSIAN               D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_GAUSSIAN
#define D3DMS_9_SAMPLES_MULTISAMPLE_GAUSSIAN               D3DMULTISAMPLE_9_SAMPLES_MULTISAMPLE_GAUSSIAN
#define D3DMS_9_SAMPLES_SUPERSAMPLE_GAUSSIAN               D3DMULTISAMPLE_9_SAMPLES_SUPERSAMPLE_GAUSSIAN
#define D3DMS_PREFILTER_FORMAT_DEFAULT                     D3DMULTISAMPLE_PREFILTER_FORMAT_DEFAULT
#define D3DMS_PREFILTER_FORMAT_X1R5G5B5                    D3DMULTISAMPLE_PREFILTER_FORMAT_X1R5G5B5
#define D3DMS_PREFILTER_FORMAT_R5G6B5                      D3DMULTISAMPLE_PREFILTER_FORMAT_R5G6B5
#define D3DMS_PREFILTER_FORMAT_X8R8G8B8                    D3DMULTISAMPLE_PREFILTER_FORMAT_X8R8G8B8
#define D3DMS_PREFILTER_FORMAT_A8R8G8B8                    D3DMULTISAMPLE_PREFILTER_FORMAT_A8R8G8B8

// utils.cpp
bool IsLinearFormat(DWORD Format);
DWORD BitsPerPixelOfD3DFORMAT(DWORD Format);
LPCSTR GetD3DCMPStr(D3DCMPFUNC d3dcmpfunc);
LPCSTR GetD3DFormatStr(D3DFORMAT d3dformat);
LPCSTR GetMultiSampleStr(DWORD mstype);
LPCSTR GetTextureModeStr(DWORD TextureMode);
UINT64 GetFileTime(LPCSTR lpFileName);

void DisplayError(const char *szCall, HRESULT hr);
#define CheckHR(x) { HRESULT _hr = (x); if (FAILED(_hr)) { DisplayError(#x, _hr); } }
void _cdecl dprintf(LPCSTR lpFmt, ...);

#endif // #ifndef __UTILS_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtdead1\test.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.h

Author:

    Matt Bronder

Description:

    Direct3D repro test functions.

*******************************************************************************/

#ifndef __TEST_H__
#define __TEST_H__

//******************************************************************************
class CReproTest {

protected:

    HINSTANCE                       m_hInstance;
    HWND                            m_hWnd;

    LPDIRECT3D8                     m_pd3d;
    LPDIRECT3DDEVICE8               m_pDevice;

    LPDIRECT3DVERTEXBUFFER8         m_pd3dr;

    DWORD                           m_dwVShader;

public:

                                    CReproTest();
                                    ~CReproTest();

    virtual BOOL                    Create(HINSTANCE hInstance);
    virtual BOOL                    Run();

protected:

    virtual BOOL                    InitDeviceState();
    virtual BOOL                    SetViewport(DWORD dwWidth, DWORD dwHeight);
};

//******************************************************************************
LRESULT CALLBACK    WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

void                InitMatrix(D3DMATRIX* pd3dm,
                        float _11, float _12, float _13, float _14,
                        float _21, float _22, float _23, float _24,
                        float _31, float _32, float _33, float _34,
                        float _41, float _42, float _43, float _44);

void                SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, 
                        LPD3DXVECTOR3 pvAt, LPD3DXVECTOR3 pvUp);

void                SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, 
                        float fBack, float fFieldOfView, float fAspect);

#endif //__TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtdead1\main.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#include <xtl.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <d3dx8.h>
#include <xgraphics.h>

//******************************************************************************
#define FVF_LVERTEX (D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1)

#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

//******************************************************************************
typedef struct _LVERTEX {
    D3DXVECTOR3 vPosition;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _LVERTEX() { }
    _LVERTEX(const D3DVECTOR& v, D3DCOLOR _cDiffuse, D3DCOLOR _cSpecular, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} LVERTEX, *PLVERTEX;

//******************************************************************************
class CReproTest {

protected:

    LPDIRECT3D8                     m_pd3d;
    LPDIRECT3DDEVICE8               m_pDevice;
    LPDIRECT3DVERTEXBUFFER8         m_pd3dr;
    DWORD                           m_dwVShader;

public:

                                    CReproTest();
                                    ~CReproTest();

    virtual BOOL                    Create();
    virtual BOOL                    Run();

protected:

    virtual BOOL                    InitDeviceState();
    virtual BOOL                    SetViewport(DWORD dwWidth, DWORD dwHeight);
};

//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
         float _11, float _12, float _13, float _14,
         float _21, float _22, float _23, float _24,
         float _31, float _32, float _33, float _34,
         float _41, float _42, float _43, float _44);

void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, 
         LPD3DXVECTOR3 pvAt, LPD3DXVECTOR3 pvUp);

void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, 
         float fBack, float fFieldOfView, float fAspect);

void DebugString(LPCTSTR szFormat, ...);

//******************************************************************************
// WinMain
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WinMain
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     HINSTANCE hInstance      - Application instance handle
//
//     HINSTANCE hPrevInstance  - Previous instance of the application (always
//                                NULL for Win32 applications)
//
//     LPSTR szCmdLine          - Pointer to a string specifying the command
//                                line used in launching the application
//                                (excluding the program name)
//
//     int nCmdShow             - State specifying how the window is to be 
//                                displayed on creation
//
// Return Value:
//
//     0 on success, -1 on failure.
//
//******************************************************************************
void __cdecl main()
{
    CReproTest* pRTest;

    // Create the display
    pRTest = new CReproTest();
    if (!pRTest) {
        return;
    }

    // Initialize the display
    if (!pRTest->Create()) {
        DebugString(TEXT("CDisplay::Create failed"));
        delete pRTest;
        return;
    }

    // Render the scene
    pRTest->Run();

    // Clean up
    delete pRTest;
}

//******************************************************************************
CReproTest::CReproTest() {

    m_pd3d = NULL;
    m_pDevice = NULL;
    m_pd3dr = NULL;
    m_dwVShader = 0xFFFFFFFF;
}

//******************************************************************************
CReproTest::~CReproTest() {

    if (m_dwVShader != 0xFFFFFFFF) {
        m_pDevice->SetVertexShader(D3DFVF_XYZ);
        m_pDevice->DeleteVertexShader(m_dwVShader);
    }

    if (m_pd3dr) {
        m_pd3dr->Release();
        m_pd3dr = NULL;
    }

    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }

    if (m_pd3d) {
        m_pd3d->Release();
        m_pd3d = NULL;
    }
}

//******************************************************************************
BOOL CReproTest::Create() {

    D3DPRESENT_PARAMETERS   d3dpp;
    LVERTEX                 plrVertices[3];
    LPBYTE                  pData;
    HRESULT                 hr;
    UINT                    i;
    LPXGBUFFER              pxgbufShader;
    DWORD                   dwSDecl[] = {
                                D3DVSD_STREAM(0),
                                D3DVSD_REG(0, D3DVSDT_FLOAT3),
                                D3DVSD_REG(1, D3DVSDT_D3DCOLOR),
                                D3DVSD_REG(2, D3DVSDT_D3DCOLOR),
                                D3DVSD_REG(3, D3DVSDT_FLOAT2),
                                D3DVSD_END()
                            };
    char                    szVShader[] = {
                                "vs.1.0\n"
                                "dp4 oPos.x, v0, c0\n"
                                "dp4 oPos.y, v0, c1\n"
                                "dp4 oPos.z, v0, c2\n"
                                "dp4 oPos.w, v0, c3\n"
                                "mov oD0, v1\n"
                            };

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pd3d) {
        DebugString(TEXT("Direct3DCreate8 failed"));
    }

    // Initialize the presentation parameters
    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_LIN_A8R8G8B8; 
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_LIN_D24S8;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = NULL;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = FALSE; // Set this to TRUE and the triangle is rendered correctly

    // Create the device
    m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, NULL, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice);

    plrVertices[0] = LVERTEX(D3DXVECTOR3(-1.0f, -1.0f, 0.0f), RGBA_MAKE(255, 0, 0, 255), 0, 0.0f, 0.0f);
    plrVertices[1] = LVERTEX(D3DXVECTOR3( 0.0f,  1.0f, 0.0f), RGBA_MAKE(0, 0, 255, 255), 0, 0.0f, 0.0f);
    plrVertices[2] = LVERTEX(D3DXVECTOR3( 1.0f, -1.0f, 0.0f), RGBA_MAKE(0, 255, 0, 255), 0, 0.0f, 0.0f);

    m_pDevice->CreateVertexBuffer(3 * sizeof(LVERTEX), 0, FVF_LVERTEX, D3DPOOL_DEFAULT, &m_pd3dr);

    m_pd3dr->Lock(0, 0, &pData, 0);
    memcpy(pData, plrVertices, 3 * sizeof(LVERTEX));
    m_pd3dr->Unlock();

    AssembleShader("", szVShader, strlen(szVShader), 0, NULL, 
                        &pxgbufShader, NULL, NULL, NULL, NULL, NULL);

    m_pDevice->CreateVertexShader(dwSDecl, (LPDWORD)pxgbufShader->GetBufferPointer(), &m_dwVShader, 0);

    pxgbufShader->Release();

    return InitDeviceState();
}

//******************************************************************************
BOOL CReproTest::Run() {

    D3DXMATRIX  mView, mProj, mTransform;
    HRESULT     hr;
    UINT        i;
    static UINT uFrame = 0;

    do {

        DebugString(TEXT("Rendering frame %d"), ++uFrame);

        // Clear the rendering target
        m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, 0, 1.0f, 0);

        // Begin the scene
        m_pDevice->BeginScene();

        m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);
        m_pDevice->SetRenderState(D3DRS_ZENABLE, D3DZB_FALSE);
        m_pDevice->SetRenderState(D3DRS_ZWRITEENABLE, FALSE);

        SetView(&mView, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
                &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

        SetPerspectiveProjection(&mProj, 0.1f, 1000.0f, 
                3.14159f / 4.0f, 480.0f / 640.0f);

        D3DXMatrixMultiply(&mTransform, &mView, &mProj);
        D3DXMatrixTranspose(&mTransform, &mTransform);

        m_pDevice->SetVertexShaderConstant(0, &mTransform, 4);

        m_pDevice->SetVertexShader(m_dwVShader);

        m_pDevice->SetStreamSource(0, m_pd3dr, sizeof(LVERTEX));

        // Draw a triangle
        m_pDevice->DrawPrimitive(D3DPT_TRIANGLELIST, 0, 1);

        // End the scene
        m_pDevice->EndScene();

        // Update the screen
        m_pDevice->Present(NULL, NULL, NULL, NULL);

    } while (TRUE);

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::InitDeviceState() {

    D3DXMATRIX mTransform;
    UINT       i;
    HRESULT    hr;

    // Initialize the viewport
    if (!SetViewport(640, 480)) {
        DebugString(TEXT("SetViewport failed"));
    }

    // Initialize the view matrix
    SetView(&mTransform, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
            &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

    m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);

    // Initialize the projection matrix
    SetPerspectiveProjection(&mTransform, 0.1f, 1000.0f, 
            3.14159f / 4.0f, 480.0f / 640.0f);

    m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);

    m_pDevice->SetRenderState(D3DRS_AMBIENT, 0x20202020);
    m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)TRUE);
    m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::SetViewport(DWORD dwWidth, DWORD dwHeight) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    // Set a viewport for the device
    viewport.X = 0;
    viewport.Y = 0;
    viewport.Width = dwWidth;
    viewport.Height = dwHeight;
    viewport.MinZ = 0.0f;
    viewport.MaxZ = 1.0f;

    m_pDevice->SetViewport(&viewport);

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     InitMatrix
//
// Description:
//
//     Initialize the given matrix with the given values.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Matrix to initialize
//
//     float _11 to _44         - Initialization values
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
                float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44) 
{
    if (pd3dm) {

        pd3dm->_11 = _11;
        pd3dm->_12 = _12;
        pd3dm->_13 = _13;
        pd3dm->_14 = _14;
        pd3dm->_21 = _21;
        pd3dm->_22 = _22;
        pd3dm->_23 = _23;
        pd3dm->_24 = _24;
        pd3dm->_31 = _31;
        pd3dm->_32 = _32;
        pd3dm->_33 = _33;
        pd3dm->_34 = _34;
        pd3dm->_41 = _41;
        pd3dm->_42 = _42;
        pd3dm->_43 = _43;
        pd3dm->_44 = _44;
    }
}

//******************************************************************************
//
// Function:
//
//     SetView
//
// Description:
//
//     Align the given view matrix along the given direction and up vectors with
//     the position vector as the origin.
//
// Arguments:
//
//     LPD3DXMATRIX pd3dm       - View matrix to initialize
//
//     LPD3DXVECTOR3 pvPos      - View origin
//
//     LPD3DXVECTOR3 pvAt       - View interest vector
//
//     LPD3DXVECTOR3 pvUp       - View up vector
//
// Return Value:
//
//     Initialized view matrix.
//
//******************************************************************************
void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, LPD3DXVECTOR3 pvAt, 
                                                      LPD3DXVECTOR3 pvUp) 
{
    D3DXVECTOR3  d, u, r;

    if (pd3dm && pvPos && pvAt && pvUp && !(*pvPos == *pvAt) 
                                 && !(*pvUp == D3DXVECTOR3(0.0f, 0.0f, 0.0f))) {

        D3DXVec3Normalize(&d, &(*pvAt - *pvPos));
        u = *pvUp;

        // Project the up vector into the plane of the direction vector
        D3DXVec3Normalize(&u, &(u - (d * D3DXVec3Dot(&u, &d))));

        // Get the cross product
        D3DXVec3Cross(&r, &u, &d);

        // Initialize the view transform
        InitMatrix(pd3dm,
            r.x, u.x, d.x, 0.0f,
            r.y, u.y, d.y, 0.0f,
            r.z, u.z, d.z, 0.0f,
            -(pvPos->x * r.x + pvPos->y * r.y + pvPos->z * r.z), 
            -(pvPos->x * u.x + pvPos->y * u.y + pvPos->z * u.z), 
            -(pvPos->x * d.x + pvPos->y * d.y + pvPos->z * d.z), 
            1.0f
        );
    }
}

//******************************************************************************
//
// Function:
//
//     SetPerspectiveProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fFieldOfView, float fAspect) {

    float fTanHalfFOV = (float)tan((double)fFieldOfView / 2.0);
    float fFar = fBack / (fBack - fFront);

    InitMatrix(pd3dm,
        1.0f, 0.0f,           0.0f,                         0.0f,
        0.0f, 1.0f / fAspect, 0.0f,                         0.0f,
        0.0f, 0.0f,           fTanHalfFOV * fFar,           fTanHalfFOV,
        0.0f, 0.0f,           -fFront * fTanHalfFOV * fFar, 0.0f
    );
}

//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
    TCHAR* szBuffer = new TCHAR[2304];
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }

    va_start(vl, szFormat);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

    delete [] szBuffer;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtdead1\test.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#include <xtl.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <d3dx8.h>
#include <xgraphics.h>
#include "util.h"
#include "dtypes.h"
#include "test.h"

//******************************************************************************
// WinMain
//******************************************************************************

#define RETURN(x)   return

//******************************************************************************
//
// Function:
//
//     WinMain
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     HINSTANCE hInstance      - Application instance handle
//
//     HINSTANCE hPrevInstance  - Previous instance of the application (always
//                                NULL for Win32 applications)
//
//     LPSTR szCmdLine          - Pointer to a string specifying the command
//                                line used in launching the application
//                                (excluding the program name)
//
//     int nCmdShow             - State specifying how the window is to be 
//                                displayed on creation
//
// Return Value:
//
//     0 on success, -1 on failure.
//
//******************************************************************************
void __cdecl main()
{
    CReproTest*     pRTest;
    int             ret = 0;

    // Seed the pseudo-random number generator
    srand(GetTickCount());

    // Create a heap for the application
    if (!CreateHeap()) {
        RETURN(0);
    }

    // Create the display
    pRTest = new CReproTest();
    if (!pRTest) {
        ReleaseHeap();
        RETURN(0);
    }

    // Initialize the display
    if (!pRTest->Create(NULL)) {
        DebugString(TEXT("CDisplay::Create failed"));
        delete pRTest;
        ReleaseHeap();
        RETURN(0);
    }

    // Render the scene
    pRTest->Run();

    // Clean up
    delete pRTest;
    ReleaseHeap();

    RETURN(ret);
}

//******************************************************************************
CReproTest::CReproTest() {

    m_hWnd = NULL;
    m_pd3d = NULL;
    m_pDevice = NULL;
    m_pd3dr = NULL;
    m_dwVShader = 0xFFFFFFFF;
}

//******************************************************************************
CReproTest::~CReproTest() {

    if (m_dwVShader != 0xFFFFFFFF) {
        m_pDevice->SetVertexShader(D3DFVF_XYZ);
        m_pDevice->DeleteVertexShader(m_dwVShader);
    }

    if (m_pd3dr) {
        m_pd3dr->Release();
        m_pd3dr = NULL;
    }

    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }

    if (m_pd3d) {
        m_pd3d->Release();
        m_pd3d = NULL;
    }
}

//******************************************************************************
BOOL CReproTest::Create(HINSTANCE hInstance) {

    D3DPRESENT_PARAMETERS   d3dpp;
    LVERTEX                 plrVertices[3];
    LPBYTE                  pData;
    HRESULT                 hr;
    UINT                    i;
    LPXGBUFFER              pxgbufShader;
    DWORD                   dwSDecl[] = {
                                D3DVSD_STREAM(0),
                                D3DVSD_REG(0, D3DVSDT_FLOAT3),
                                D3DVSD_REG(1, D3DVSDT_D3DCOLOR),
                                D3DVSD_REG(2, D3DVSDT_D3DCOLOR),
                                D3DVSD_REG(3, D3DVSDT_FLOAT2),
                                D3DVSD_END()
                            };
    char                    szVShader[] = {
                                "vs.1.0\n"
                                "dp4 oPos.x, v0, c0\n"
                                "dp4 oPos.y, v0, c1\n"
                                "dp4 oPos.z, v0, c2\n"
                                "dp4 oPos.w, v0, c3\n"
                                "mov oD0, v1\n"
                            };

    m_hInstance = hInstance;

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pd3d) {
        DebugString(TEXT("Direct3DCreate8 failed"));
    }

    // Initialize the presentation parameters
    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_A8R8G8B8;
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_D24S8;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = m_hWnd;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = FALSE; // Set this to TRUE and the triangle is rendered correctly

    // Create the device
    hr = m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, m_hWnd, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice);
    if (ResultFailed(hr, TEXT("IDirect3D8::CreateDevice failed"))) {
        return FALSE;
    }

    plrVertices[0] = LVERTEX(D3DXVECTOR3(-1.0f, -1.0f, 0.0f), RGBA_MAKE(255, 0, 0, 255), 0, 0.0f, 0.0f);
    plrVertices[1] = LVERTEX(D3DXVECTOR3( 0.0f,  1.0f, 0.0f), RGBA_MAKE(0, 0, 255, 255), 0, 0.0f, 0.0f);
    plrVertices[2] = LVERTEX(D3DXVECTOR3( 1.0f, -1.0f, 0.0f), RGBA_MAKE(0, 255, 0, 255), 0, 0.0f, 0.0f);

    hr = m_pDevice->CreateVertexBuffer(3 * sizeof(LVERTEX), 0, FVF_LVERTEX, D3DPOOL_DEFAULT, &m_pd3dr);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        return FALSE;
    }

    hr = m_pd3dr->Lock(0, 0, &pData, 0);
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"))) {
        return FALSE;
    }

    memcpy(pData, plrVertices, 3 * sizeof(LVERTEX));

    hr = m_pd3dr->Unlock();
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"))) {
        return FALSE;
    }

    AssembleShader("", szVShader, strlen(szVShader), 0, NULL, 
                        &pxgbufShader, NULL, NULL, NULL, NULL, NULL);

    m_pDevice->CreateVertexShader(dwSDecl, (LPDWORD)pxgbufShader->GetBufferPointer(), &m_dwVShader, 0);

    pxgbufShader->Release();

    return InitDeviceState();
}

//******************************************************************************
BOOL CReproTest::Run() {

    D3DXMATRIX  mView, mProj, mTransform;
    HRESULT     hr;
    UINT        i;
    static UINT uFrame = 0;

    do {

        DebugString(TEXT("Rendering frame %d"), ++uFrame);

        // Clear the rendering target
        m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(0, 0, 0), 1.0f, 0);

        // Begin the scene
        m_pDevice->BeginScene();

        // Disable lighting
        m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);
        m_pDevice->SetRenderState(D3DRS_ZENABLE, D3DZB_FALSE);
        m_pDevice->SetRenderState(D3DRS_ZWRITEENABLE, FALSE);

        SetView(&mView, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
                &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

        SetPerspectiveProjection(&mProj, 0.1f, 1000.0f, 
                M_PI / 4.0f, 480.0f / 640.0f);

        D3DXMatrixMultiply(&mTransform, &mView, &mProj);
        D3DXMatrixTranspose(&mTransform, &mTransform);

        m_pDevice->SetVertexShaderConstant(0, &mTransform, 4);

        // Use a fixed function shader
        m_pDevice->SetVertexShader(m_dwVShader);

        m_pDevice->SetStreamSource(0, m_pd3dr, sizeof(LVERTEX));

        // Draw a triangle
        m_pDevice->DrawPrimitive(D3DPT_TRIANGLELIST, 0, 1);

        // End the scene
        m_pDevice->EndScene();

        // Update the screen
        m_pDevice->Present(NULL, NULL, NULL, NULL);

    } while (TRUE);

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::InitDeviceState() {

    D3DXMATRIX mTransform;
    UINT       i;
    HRESULT    hr;

    // Initialize the viewport
    if (!SetViewport(640, 480)) {
        DebugString(TEXT("SetViewport failed"));
    }

    // Initialize the view matrix
    SetView(&mTransform, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
            &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

    hr = m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Initialize the projection matrix
    SetPerspectiveProjection(&mTransform, 0.1f, 1000.0f, 
            M_PI / 4.0f, 480.0f / 640.0f);

    hr = m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Set ambient lighting
    hr = m_pDevice->SetRenderState(D3DRS_AMBIENT, 0x20202020);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the texture filters
    for (i = 0; i < 2; i++) {
        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }
    }

    // Set blend modes
    hr = m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    hr = m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Modulate color and alpha texture stages
    hr = m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    // Set the alpha comparison function
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAFUNC, (DWORD)D3DCMP_GREATEREQUAL);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the alpha reference value to opaque
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAREF, 0xFF);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Turn on specular highlights
    hr = m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Enable dithering
    hr = m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Disable per-vertex color
    hr = m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::SetViewport(DWORD dwWidth, DWORD dwHeight) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    // Set a viewport for the device
    viewport.X = 0;
    viewport.Y = 0;
    viewport.Width = dwWidth;
    viewport.Height = dwHeight;
    viewport.MinZ = 0.0f;
    viewport.MaxZ = 1.0f;

    hr = m_pDevice->SetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetViewport"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     InitMatrix
//
// Description:
//
//     Initialize the given matrix with the given values.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Matrix to initialize
//
//     float _11 to _44         - Initialization values
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
                float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44) 
{
    if (pd3dm) {

        pd3dm->_11 = _11;
        pd3dm->_12 = _12;
        pd3dm->_13 = _13;
        pd3dm->_14 = _14;
        pd3dm->_21 = _21;
        pd3dm->_22 = _22;
        pd3dm->_23 = _23;
        pd3dm->_24 = _24;
        pd3dm->_31 = _31;
        pd3dm->_32 = _32;
        pd3dm->_33 = _33;
        pd3dm->_34 = _34;
        pd3dm->_41 = _41;
        pd3dm->_42 = _42;
        pd3dm->_43 = _43;
        pd3dm->_44 = _44;
    }
}

//******************************************************************************
//
// Function:
//
//     SetView
//
// Description:
//
//     Align the given view matrix along the given direction and up vectors with
//     the position vector as the origin.
//
// Arguments:
//
//     LPD3DXMATRIX pd3dm       - View matrix to initialize
//
//     LPD3DXVECTOR3 pvPos      - View origin
//
//     LPD3DXVECTOR3 pvAt       - View interest vector
//
//     LPD3DXVECTOR3 pvUp       - View up vector
//
// Return Value:
//
//     Initialized view matrix.
//
//******************************************************************************
void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, LPD3DXVECTOR3 pvAt, 
                                                      LPD3DXVECTOR3 pvUp) 
{
    D3DXVECTOR3  d, u, r;

    if (pd3dm && pvPos && pvAt && pvUp && !(*pvPos == *pvAt) 
                                 && !(*pvUp == D3DXVECTOR3(0.0f, 0.0f, 0.0f))) {

        D3DXVec3Normalize(&d, &(*pvAt - *pvPos));
        u = *pvUp;

        // Project the up vector into the plane of the direction vector
        D3DXVec3Normalize(&u, &(u - (d * D3DXVec3Dot(&u, &d))));

        // Get the cross product
        D3DXVec3Cross(&r, &u, &d);

        // Initialize the view transform
        InitMatrix(pd3dm,
            r.x, u.x, d.x, 0.0f,
            r.y, u.y, d.y, 0.0f,
            r.z, u.z, d.z, 0.0f,
            -(pvPos->x * r.x + pvPos->y * r.y + pvPos->z * r.z), 
            -(pvPos->x * u.x + pvPos->y * u.y + pvPos->z * u.z), 
            -(pvPos->x * d.x + pvPos->y * d.y + pvPos->z * d.z), 
            1.0f
        );
    }
}

//******************************************************************************
//
// Function:
//
//     SetPerspectiveProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fFieldOfView, float fAspect) {

    float fTanHalfFOV = (float)tan((double)fFieldOfView / 2.0);
    float fFar = fBack / (fBack - fFront);

    InitMatrix(pd3dm,
        1.0f, 0.0f,           0.0f,                         0.0f,
        0.0f, 1.0f / fAspect, 0.0f,                         0.0f,
        0.0f, 0.0f,           fTanHalfFOV * fFar,           fTanHalfFOV,
        0.0f, 0.0f,           -fFront * fTanHalfFOV * fFar, 0.0f
    );
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtdead1\util.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.h

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef __UTIL_H__
#define __UTIL_H__

//******************************************************************************
// Precomputed fractions of pi
//******************************************************************************

#define M_PI        3.14159265359f
#define M_2PI       6.28318530718f
#define M_PIDIV2    1.57079632680f
#define M_3PIDIV2   4.71238898039f
#define M_PIDIV4    0.78539816340f
#define M_3PIDIV4   2.35619449019f
#define M_5PIDIV4   3.92699081699f
#define M_7PIDIV4   5.49778714378f

#ifndef RGB_MAKE
/*
 * Format of CI colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |         color index           |   fraction    |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define CI_GETALPHA(ci)    ((ci) >> 24)
#define CI_GETINDEX(ci)    (((ci) >> 8) & 0xffff)
#define CI_GETFRACTION(ci) ((ci) & 0xff)
#define CI_ROUNDINDEX(ci)  CI_GETINDEX((ci) + 0x80)
#define CI_MASKALPHA(ci)   ((ci) & 0xffffff)
#define CI_MAKE(a, i, f)    (((a) << 24) | ((i) << 8) | (f))

/*
 * Format of RGBA colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGBA_GETALPHA(rgb)      ((rgb) >> 24)
#define RGBA_GETRED(rgb)        (((rgb) >> 16) & 0xff)
#define RGBA_GETGREEN(rgb)      (((rgb) >> 8) & 0xff)
#define RGBA_GETBLUE(rgb)       ((rgb) & 0xff)
#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

/* D3DRGB and D3DRGBA may be used as initialisers for D3DCOLORs
 * The float values must be in the range 0..1
 */
#define D3DRGB(r, g, b) \
    (0xff000000L | ( ((long)((r) * 255)) << 16) | (((long)((g) * 255)) << 8) | (long)((b) * 255))
#define D3DRGBA(r, g, b, a) \
    (   (((long)((a) * 255)) << 24) | (((long)((r) * 255)) << 16) \
    |   (((long)((g) * 255)) << 8) | (long)((b) * 255) \
    )

/*
 * Format of RGB colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    ignored    |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGB_GETRED(rgb)         (((rgb) >> 16) & 0xff)
#define RGB_GETGREEN(rgb)       (((rgb) >> 8) & 0xff)
#define RGB_GETBLUE(rgb)        ((rgb) & 0xff)
#define RGBA_SETALPHA(rgba, x) (((x) << 24) | ((rgba) & 0x00ffffff))
#define RGB_MAKE(r, g, b)       ((D3DCOLOR) (((r) << 16) | ((g) << 8) | (b)))
#define RGBA_TORGB(rgba)       ((D3DCOLOR) ((rgba) & 0xffffff))
#define RGB_TORGBA(rgb)        ((D3DCOLOR) ((rgb) | 0xff000000))

#endif

//******************************************************************************
// Debugging function prototypes
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
void                DebugString(LPCTSTR szFormat, ...);
BOOL                ResultFailed(HRESULT hr, LPCTSTR sz);
#else
inline void         DebugString(LPCTSTR szFormat, ...) {}
inline BOOL         ResultFailed(HRESULT hr, LPCTSTR sz) {return FALSE;};
#endif

//******************************************************************************
// Memory allocation prototypes
//******************************************************************************

BOOL                CreateHeap();
void                ReleaseHeap();
LPVOID              MemAlloc(UINT uNumBytes);
void                MemFree(LPVOID pvMem);
LPVOID              MemAlloc32(UINT uNumBytes);
void                MemFree32(LPVOID pvMem);

#endif // __UTIL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtdead2\util.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.h

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef __UTIL_H__
#define __UTIL_H__

//******************************************************************************
// Precomputed fractions of pi
//******************************************************************************

#define M_PI        3.14159265359f
#define M_2PI       6.28318530718f
#define M_PIDIV2    1.57079632680f
#define M_3PIDIV2   4.71238898039f
#define M_PIDIV4    0.78539816340f
#define M_3PIDIV4   2.35619449019f
#define M_5PIDIV4   3.92699081699f
#define M_7PIDIV4   5.49778714378f

#ifndef RGB_MAKE
/*
 * Format of CI colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |         color index           |   fraction    |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define CI_GETALPHA(ci)    ((ci) >> 24)
#define CI_GETINDEX(ci)    (((ci) >> 8) & 0xffff)
#define CI_GETFRACTION(ci) ((ci) & 0xff)
#define CI_ROUNDINDEX(ci)  CI_GETINDEX((ci) + 0x80)
#define CI_MASKALPHA(ci)   ((ci) & 0xffffff)
#define CI_MAKE(a, i, f)    (((a) << 24) | ((i) << 8) | (f))

/*
 * Format of RGBA colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGBA_GETALPHA(rgb)      ((rgb) >> 24)
#define RGBA_GETRED(rgb)        (((rgb) >> 16) & 0xff)
#define RGBA_GETGREEN(rgb)      (((rgb) >> 8) & 0xff)
#define RGBA_GETBLUE(rgb)       ((rgb) & 0xff)
#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

/* D3DRGB and D3DRGBA may be used as initialisers for D3DCOLORs
 * The float values must be in the range 0..1
 */
#define D3DRGB(r, g, b) \
    (0xff000000L | ( ((long)((r) * 255)) << 16) | (((long)((g) * 255)) << 8) | (long)((b) * 255))
#define D3DRGBA(r, g, b, a) \
    (   (((long)((a) * 255)) << 24) | (((long)((r) * 255)) << 16) \
    |   (((long)((g) * 255)) << 8) | (long)((b) * 255) \
    )

/*
 * Format of RGB colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    ignored    |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGB_GETRED(rgb)         (((rgb) >> 16) & 0xff)
#define RGB_GETGREEN(rgb)       (((rgb) >> 8) & 0xff)
#define RGB_GETBLUE(rgb)        ((rgb) & 0xff)
#define RGBA_SETALPHA(rgba, x) (((x) << 24) | ((rgba) & 0x00ffffff))
#define RGB_MAKE(r, g, b)       ((D3DCOLOR) (((r) << 16) | ((g) << 8) | (b)))
#define RGBA_TORGB(rgba)       ((D3DCOLOR) ((rgba) & 0xffffff))
#define RGB_TORGBA(rgb)        ((D3DCOLOR) ((rgb) | 0xff000000))

#endif

//******************************************************************************
// Debugging function prototypes
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
void                DebugString(LPCTSTR szFormat, ...);
BOOL                ResultFailed(HRESULT hr, LPCTSTR sz);
#else
inline void         DebugString(LPCTSTR szFormat, ...) {}
inline BOOL         ResultFailed(HRESULT hr, LPCTSTR sz) {return FALSE;};
#endif

//******************************************************************************
// Memory allocation prototypes
//******************************************************************************

BOOL                CreateHeap();
void                ReleaseHeap();
LPVOID              MemAlloc(UINT uNumBytes);
void                MemFree(LPVOID pvMem);
LPVOID              MemAlloc32(UINT uNumBytes);
void                MemFree32(LPVOID pvMem);

#endif // __UTIL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtfog\dtypes.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    dtypes.h

Author:

    Matt Bronder

Description:

    Various type definitions.

*******************************************************************************/

#ifndef __DTYPES_H__
#define __DTYPES_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FVF_VERTEX              (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1)
#define FVF_BVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3)
#define FVF_BVERTEX2            (D3DFVF_XYZ | D3DFVF_TEX2)
#define FVF_NVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3 | \
                                              D3DFVF_TEXCOORDSIZE2(0) | \
                                              D3DFVF_TEXCOORDSIZE2(1) | \
                                              D3DFVF_TEXCOORDSIZE3(2))
#define FVF_LVERTEX             (D3DFVF_XYZ | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLVERTEX            (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLBVERTEX           (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX2)
#define FVF_CVERTEX             (D3DFVF_XYZ | D3DFVF_NORMAL)
#define FVF_CVERTEX1_3          (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 | \
                                 D3DFVF_TEXCOORDSIZE3(0))

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _TCOORD {
    float               u;
    float               v;
} TCOORD, *PTCOORD;

//******************************************************************************
typedef struct _TCOORD2 {
    float               u;
    float               v;
} TCOORD2, *PTCOORD2;

//******************************************************************************
typedef struct _TCOORD3 {
    float               u;
    float               v;
    float               t;
} TCOORD3, *PTCOORD3;

//******************************************************************************
typedef struct _MATRIX3X3 {
    union {
        struct {
            float _11, _12, _13;
            float _21, _22, _23;
            float _31, _32, _33;
        };
        float m[3][3];
        struct {
            D3DXVECTOR3 r1;
            D3DXVECTOR3 r2;
            D3DXVECTOR3 r3;
        };
    };
} MATRIX3X3, *PMATRIX3X3;

//******************************************************************************
typedef struct _VERTEX {
    D3DXVECTOR3 vPosition;
    D3DXVECTOR3 vNormal;
    float       u0, v0;

    _VERTEX() {}
    _VERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0;
    }
} VERTEX, *PVERTEX;

//******************************************************************************
typedef struct _BVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (bump) map coordinates
    float       u2, v2;         // Diffuse light map coordinates

    _BVERTEX() {}
    _BVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2;
    }
} BVERTEX, *PBVERTEX;

//******************************************************************************
typedef struct _BVERTEX2 {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates and height (bump) map coordinates
    float       u1, v1;         // Diffuse light map coordinates

    _BVERTEX2() {}
    _BVERTEX2(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} BVERTEX2, *PBVERTEX2;

//******************************************************************************
typedef struct _NVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (normal) map coordinates
    float       u2, v2, t2;     // Light direction in tangent space

    _NVERTEX() {}
    _NVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2, float _t2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2; t2 = _t2;
    }
} NVERTEX, *PNVERTEX;

//******************************************************************************
typedef struct _LVERTEX {
    D3DXVECTOR3 vPosition;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _LVERTEX() { }
    _LVERTEX(const D3DVECTOR& v, D3DCOLOR _cDiffuse, D3DCOLOR _cSpecular, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} LVERTEX, *PLVERTEX;

//******************************************************************************
typedef struct _TLVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _TLVERTEX() {}
    _TLVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} TLVERTEX, *PTLVERTEX;

//******************************************************************************
typedef struct _TLBVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;
    float       u1, v1;

    _TLBVERTEX() {}
    _TLBVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0, float _u1, float _v1) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} TLBVERTEX, *PTLBVERTEX;

//******************************************************************************
typedef struct _CVERTEX {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;

    _CVERTEX() { }
    _CVERTEX(const D3DVECTOR& v, const D3DVECTOR& n) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
    }
} CVERTEX, *PCVERTEX;

//******************************************************************************
typedef struct _VERTEX1_3 {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;
    float         u0, v0, t0;

    _VERTEX1_3() { }
    _VERTEX1_3(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0, float _t0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0; t0 = _t0;
    }
} VERTEX1_3, *PVERTEX1_3;

#endif //__DTYPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtdead2\main.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#include <xtl.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <d3dx8.h>
#include <xgraphics.h>

//******************************************************************************
#define FVF_LVERTEX (D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1)

#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

//******************************************************************************
typedef struct _LVERTEX {
    D3DXVECTOR3 vPosition;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _LVERTEX() { }
    _LVERTEX(const D3DVECTOR& v, D3DCOLOR _cDiffuse, D3DCOLOR _cSpecular, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} LVERTEX, *PLVERTEX;

//******************************************************************************
class CReproTest {

protected:

    LPDIRECT3D8                     m_pd3d;
    LPDIRECT3DDEVICE8               m_pDevice;
    LPDIRECT3DVERTEXBUFFER8         m_pd3dr;
    DWORD                           m_dwVShader;

public:

                                    CReproTest();
                                    ~CReproTest();

    virtual BOOL                    Create();
    virtual BOOL                    Run();

protected:

    virtual BOOL                    InitDeviceState();
    virtual BOOL                    SetViewport(DWORD dwWidth, DWORD dwHeight);
};

//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
         float _11, float _12, float _13, float _14,
         float _21, float _22, float _23, float _24,
         float _31, float _32, float _33, float _34,
         float _41, float _42, float _43, float _44);

void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, 
         LPD3DXVECTOR3 pvAt, LPD3DXVECTOR3 pvUp);

void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, 
         float fBack, float fFieldOfView, float fAspect);

void DebugString(LPCTSTR szFormat, ...);

//******************************************************************************
// WinMain
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WinMain
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     HINSTANCE hInstance      - Application instance handle
//
//     HINSTANCE hPrevInstance  - Previous instance of the application (always
//                                NULL for Win32 applications)
//
//     LPSTR szCmdLine          - Pointer to a string specifying the command
//                                line used in launching the application
//                                (excluding the program name)
//
//     int nCmdShow             - State specifying how the window is to be 
//                                displayed on creation
//
// Return Value:
//
//     0 on success, -1 on failure.
//
//******************************************************************************
void __cdecl main()
{
    CReproTest* pRTest;

    // Create the display
    pRTest = new CReproTest();
    if (!pRTest) {
        return;
    }

    // Initialize the display
    if (!pRTest->Create()) {
        DebugString(TEXT("CDisplay::Create failed"));
        delete pRTest;
        return;
    }

    // Render the scene
    pRTest->Run();

    // Clean up
    delete pRTest;
}

//******************************************************************************
CReproTest::CReproTest() {

    m_pd3d = NULL;
    m_pDevice = NULL;
    m_pd3dr = NULL;
    m_dwVShader = 0xFFFFFFFF;
}

//******************************************************************************
CReproTest::~CReproTest() {

    if (m_dwVShader != 0xFFFFFFFF) {
        m_pDevice->SetVertexShader(D3DFVF_XYZ);
        m_pDevice->DeleteVertexShader(m_dwVShader);
    }

    if (m_pd3dr) {
        m_pd3dr->Release();
        m_pd3dr = NULL;
    }

    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }

    if (m_pd3d) {
        m_pd3d->Release();
        m_pd3d = NULL;
    }
}

//******************************************************************************
BOOL CReproTest::Create() {

    D3DPRESENT_PARAMETERS   d3dpp;
    LVERTEX                 plrVertices[3];
    LPBYTE                  pData;
    HRESULT                 hr;
    UINT                    i;
    LPXGBUFFER              pxgbufShader;
    DWORD                   dwSDecl[] = {
                                D3DVSD_STREAM(0),
                                D3DVSD_REG(0, D3DVSDT_FLOAT3),
                                D3DVSD_REG(1, D3DVSDT_D3DCOLOR),
                                D3DVSD_REG(2, D3DVSDT_D3DCOLOR),
                                D3DVSD_REG(3, D3DVSDT_FLOAT2),
                                D3DVSD_END()
                            };
    char                    szVShader[] = {
                                "vs.1.0\n"
                                "dp4 oPos.x, v0, c0\n"
                                "dp4 oPos.y, v0, c1\n"
                                "dp4 oPos.z, v0, c2\n"
                                "dp4 oPos.w, v0, c3\n"
                                "mov oD0, v1\n"
                            };

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pd3d) {
        DebugString(TEXT("Direct3DCreate8 failed"));
    }

    // Initialize the presentation parameters
    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_LIN_A8R8G8B8;
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_LIN_D24S8;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = NULL;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = TRUE;

    // Create the device
    m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, NULL, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice);

    plrVertices[0] = LVERTEX(D3DXVECTOR3(-0.25f, -0.25f, 0.0f), RGBA_MAKE(255, 0, 0, 255), 0, 0.0f, 0.0f);
    plrVertices[1] = LVERTEX(D3DXVECTOR3( 0.0f,  0.25f, 0.0f), RGBA_MAKE(0, 0, 255, 255), 0, 0.0f, 0.0f);
    plrVertices[2] = LVERTEX(D3DXVECTOR3( 0.25f, -0.25f, 0.0f), RGBA_MAKE(0, 255, 0, 255), 0, 0.0f, 0.0f);

    m_pDevice->CreateVertexBuffer(60000 * sizeof(LVERTEX), 0, FVF_LVERTEX, D3DPOOL_DEFAULT, &m_pd3dr);

    m_pd3dr->Lock(0, 0, &pData, 0);

    for (i = 0; i < 20000; i++) {
        memcpy(pData, plrVertices, 3 * sizeof(LVERTEX));
        pData += 3 * sizeof(LVERTEX);
    }

    m_pd3dr->Unlock();

    AssembleShader("", szVShader, strlen(szVShader), 0, NULL, 
                        &pxgbufShader, NULL, NULL, NULL, NULL, NULL);

    m_pDevice->CreateVertexShader(dwSDecl, (LPDWORD)pxgbufShader->GetBufferPointer(), &m_dwVShader, 0);

    pxgbufShader->Release();

    return InitDeviceState();
}

//******************************************************************************
BOOL CReproTest::Run() {

    D3DXMATRIX  mView, mProj, mTransform;
    HRESULT     hr;
    UINT        i;
    static UINT uFrame = 0;

    do {

        if (++uFrame % 100 == 0) {
            DebugString(TEXT("Rendering frame %d"), uFrame);
        }

        // Clear the rendering target
        m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL, 0, 1.0f, 0);

        // Begin the scene
        m_pDevice->BeginScene();

        m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);
        m_pDevice->SetRenderState(D3DRS_ZENABLE, D3DZB_FALSE);
        m_pDevice->SetRenderState(D3DRS_ZWRITEENABLE, FALSE);
        m_pDevice->SetRenderState(D3DRS_ZFUNC, D3DCMP_ALWAYS);

        SetView(&mView, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
                &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

        SetPerspectiveProjection(&mProj, 0.1f, 1000.0f, 
                3.14159f / 4.0f, 480.0f / 640.0f);

        D3DXMatrixMultiply(&mTransform, &mView, &mProj);
        D3DXMatrixTranspose(&mTransform, &mTransform);

        m_pDevice->SetVertexShaderConstant(0, &mTransform, 4);

        m_pDevice->SetVertexShader(m_dwVShader);

        m_pDevice->SetStreamSource(0, m_pd3dr, sizeof(LVERTEX));

        m_pDevice->DrawPrimitive(D3DPT_TRIANGLELIST, 0, 20000);

        // End the scene
        m_pDevice->EndScene();

        // Update the screen
        m_pDevice->Present(NULL, NULL, NULL, NULL);

    } while (TRUE);

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::InitDeviceState() {

    D3DXMATRIX mTransform;
    UINT       i;
    HRESULT    hr;

    // Initialize the viewport
    if (!SetViewport(640, 480)) {
        DebugString(TEXT("SetViewport failed"));
    }

    // Initialize the view matrix
    SetView(&mTransform, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
            &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

    m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);

    // Initialize the projection matrix
    SetPerspectiveProjection(&mTransform, 0.1f, 1000.0f, 
            3.14159f / 4.0f, 480.0f / 640.0f);

    m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);

    m_pDevice->SetRenderState(D3DRS_AMBIENT, 0x20202020);
    m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)TRUE);
    m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::SetViewport(DWORD dwWidth, DWORD dwHeight) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    // Set a viewport for the device
    viewport.X = 0;
    viewport.Y = 0;
    viewport.Width = dwWidth;
    viewport.Height = dwHeight;
    viewport.MinZ = 0.0f;
    viewport.MaxZ = 1.0f;

    m_pDevice->SetViewport(&viewport);

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     InitMatrix
//
// Description:
//
//     Initialize the given matrix with the given values.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Matrix to initialize
//
//     float _11 to _44         - Initialization values
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
                float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44) 
{
    if (pd3dm) {

        pd3dm->_11 = _11;
        pd3dm->_12 = _12;
        pd3dm->_13 = _13;
        pd3dm->_14 = _14;
        pd3dm->_21 = _21;
        pd3dm->_22 = _22;
        pd3dm->_23 = _23;
        pd3dm->_24 = _24;
        pd3dm->_31 = _31;
        pd3dm->_32 = _32;
        pd3dm->_33 = _33;
        pd3dm->_34 = _34;
        pd3dm->_41 = _41;
        pd3dm->_42 = _42;
        pd3dm->_43 = _43;
        pd3dm->_44 = _44;
    }
}

//******************************************************************************
//
// Function:
//
//     SetView
//
// Description:
//
//     Align the given view matrix along the given direction and up vectors with
//     the position vector as the origin.
//
// Arguments:
//
//     LPD3DXMATRIX pd3dm       - View matrix to initialize
//
//     LPD3DXVECTOR3 pvPos      - View origin
//
//     LPD3DXVECTOR3 pvAt       - View interest vector
//
//     LPD3DXVECTOR3 pvUp       - View up vector
//
// Return Value:
//
//     Initialized view matrix.
//
//******************************************************************************
void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, LPD3DXVECTOR3 pvAt, 
                                                      LPD3DXVECTOR3 pvUp) 
{
    D3DXVECTOR3  d, u, r;

    if (pd3dm && pvPos && pvAt && pvUp && !(*pvPos == *pvAt) 
                                 && !(*pvUp == D3DXVECTOR3(0.0f, 0.0f, 0.0f))) {

        D3DXVec3Normalize(&d, &(*pvAt - *pvPos));
        u = *pvUp;

        // Project the up vector into the plane of the direction vector
        D3DXVec3Normalize(&u, &(u - (d * D3DXVec3Dot(&u, &d))));

        // Get the cross product
        D3DXVec3Cross(&r, &u, &d);

        // Initialize the view transform
        InitMatrix(pd3dm,
            r.x, u.x, d.x, 0.0f,
            r.y, u.y, d.y, 0.0f,
            r.z, u.z, d.z, 0.0f,
            -(pvPos->x * r.x + pvPos->y * r.y + pvPos->z * r.z), 
            -(pvPos->x * u.x + pvPos->y * u.y + pvPos->z * u.z), 
            -(pvPos->x * d.x + pvPos->y * d.y + pvPos->z * d.z), 
            1.0f
        );
    }
}

//******************************************************************************
//
// Function:
//
//     SetPerspectiveProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fFieldOfView, float fAspect) {

    float fTanHalfFOV = (float)tan((double)fFieldOfView / 2.0);
    float fFar = fBack / (fBack - fFront);

    InitMatrix(pd3dm,
        1.0f, 0.0f,           0.0f,                         0.0f,
        0.0f, 1.0f / fAspect, 0.0f,                         0.0f,
        0.0f, 0.0f,           fTanHalfFOV * fFar,           fTanHalfFOV,
        0.0f, 0.0f,           -fFront * fTanHalfFOV * fFar, 0.0f
    );
}

//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
    TCHAR* szBuffer = new TCHAR[2304];
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }

    va_start(vl, szFormat);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

    delete [] szBuffer;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtdead1\util.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.cpp

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#include <xtl.h>
#include <d3dx8.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include "util.h"

//******************************************************************************
// Globals
//******************************************************************************

static HANDLE               g_hHeap = NULL;

//******************************************************************************
// Debugging functions
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
    TCHAR*  szBuffer = (LPTSTR)MemAlloc32(2304 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }

    va_start(vl, szFormat);
//    wvsprintf(szBuffer, szFormat, vl);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

    MemFree32(szBuffer);
}

//******************************************************************************
//
// Function:
//
//     ResultFailed
//
// Description:
//
//     Test a given return code: if the code is an error, output a debug 
//     message with the error value.  If the code is a warning, output
//     a debug message with the warning value.
//
// Arguments:
//
//     HRESULT hr               - Return code to test for an error
//
//     LPCTSTR sz               - String describing the method that produced 
//                                the return code
//
// Return Value:
//
//     TRUE if the given return code is an error, FALSE otherwise.
//
//******************************************************************************
BOOL ResultFailed(HRESULT hr, LPCTSTR sz) {

    TCHAR szError[256];

    if (SUCCEEDED(hr)) {
        return FALSE;
    }

    D3DXGetErrorString(hr, szError, 256);

    if (FAILED(hr)) {
        DebugString(TEXT("%s failed with %s [0x%X]"), sz, szError, hr);
        return TRUE;
    }
    else {
        DebugString(TEXT("%s returned %s [0x%X]"), sz, szError, hr);
    }

    return FALSE;
}
#endif // DEBUG || _DEBUG

//******************************************************************************
// Memory allocation routines
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateHeap
//
// Description:
//
//     Create a heap for the application.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateHeap() {

    if (g_hHeap) {
        return FALSE;
    }

    g_hHeap = HeapCreate(0, 0, 0);
    if (!g_hHeap) {
        DebugString(TEXT("HeapCreate failed [%d]"), GetLastError());
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseHeap
//
// Description:
//
//     Destroy the application heap.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseHeap() {

    if (g_hHeap) {
        if (!HeapDestroy(g_hHeap)) {
            DebugString(TEXT("HeapDestroy failed [%d]"), GetLastError());
        }
        g_hHeap = NULL;
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc
//
// Description:
//
//     Allocate the given amount of memory from the application heap.  This 
//     memory should later be freed using the MemFree function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc(UINT uNumBytes) {

    LPVOID pvMem = NULL;
    if (g_hHeap) {
        pvMem = HeapAlloc(g_hHeap, 0, uNumBytes);
    }
    return pvMem;
}

//******************************************************************************
//
// Function:
//
//     MemFree
//
// Description:
//
//     Free a block of memory that was allocated using the MemAlloc function.
//
// Arguments:
//
//     LPVOID pvMem             - Base address of the memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree(LPVOID pvMem) {

    if (g_hHeap) {
        if (!HeapFree(g_hHeap, 0, pvMem)) {
            DebugString(TEXT("HeapFree failed [%d]"), GetLastError());
        }
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc32
//
// Description:
//
//     Allocate a given amount of memory whose base address is
//     aligned along a 32 byte boundary.  This memory must later be freed
//     using the MemFree32 function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc32(UINT uNumBytes)
{
	LPBYTE pbyAllocated, pbyAligned = NULL;

	pbyAllocated = (LPBYTE)MemAlloc(uNumBytes + 32);
    if (pbyAllocated) {
	    pbyAligned   = (LPBYTE)((((DWORD)pbyAllocated) + 32) & ~31);
	    *(((LPDWORD)pbyAligned)-1) = (DWORD)pbyAllocated;
    }
	return pbyAligned;
}

//******************************************************************************
//
// Function:
//
//     MemFree32
//
// Description:
//
//     Free an aligned block of memory that was allocated using the MemAlloc32
//     function.
//
// Arguments:
//
//     LPVOID pvAligned         - Base address of the aligned memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree32(LPVOID pvMem)
{
	LPBYTE pbyFree;

    if (pvMem) {
	    pbyFree = (LPBYTE)*(((LPDWORD)pvMem)-1);
	    MemFree(pbyFree);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtdead2\test.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#include <xtl.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <d3dx8.h>
#include <xgraphics.h>
#include "util.h"
#include "dtypes.h"
#include "test.h"

//******************************************************************************
// WinMain
//******************************************************************************

#define RETURN(x)   return

//******************************************************************************
//
// Function:
//
//     WinMain
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     HINSTANCE hInstance      - Application instance handle
//
//     HINSTANCE hPrevInstance  - Previous instance of the application (always
//                                NULL for Win32 applications)
//
//     LPSTR szCmdLine          - Pointer to a string specifying the command
//                                line used in launching the application
//                                (excluding the program name)
//
//     int nCmdShow             - State specifying how the window is to be 
//                                displayed on creation
//
// Return Value:
//
//     0 on success, -1 on failure.
//
//******************************************************************************
void __cdecl main()
{
    CReproTest*     pRTest;
    int             ret = 0;

    // Seed the pseudo-random number generator
    srand(GetTickCount());

    // Create a heap for the application
    if (!CreateHeap()) {
        RETURN(0);
    }

    // Create the display
    pRTest = new CReproTest();
    if (!pRTest) {
        ReleaseHeap();
        RETURN(0);
    }

    // Initialize the display
    if (!pRTest->Create(NULL)) {
        DebugString(TEXT("CDisplay::Create failed"));
        delete pRTest;
        ReleaseHeap();
        RETURN(0);
    }

    // Render the scene
    pRTest->Run();

    // Clean up
    delete pRTest;
    ReleaseHeap();

    RETURN(ret);
}

//******************************************************************************
CReproTest::CReproTest() {

    m_hWnd = NULL;
    m_pd3d = NULL;
    m_pDevice = NULL;
    m_pd3dr = NULL;
    m_dwVShader = 0xFFFFFFFF;
}

//******************************************************************************
CReproTest::~CReproTest() {

    if (m_dwVShader != 0xFFFFFFFF) {
        m_pDevice->SetVertexShader(D3DFVF_XYZ);
        m_pDevice->DeleteVertexShader(m_dwVShader);
    }

    if (m_pd3dr) {
        m_pd3dr->Release();
        m_pd3dr = NULL;
    }

    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }

    if (m_pd3d) {
        m_pd3d->Release();
        m_pd3d = NULL;
    }
}

//******************************************************************************
BOOL CReproTest::Create(HINSTANCE hInstance) {

    D3DPRESENT_PARAMETERS   d3dpp;
    LVERTEX                 plrVertices[3];
    LPBYTE                  pData;
    HRESULT                 hr;
    UINT                    i;
    LPXGBUFFER              pxgbufShader;
    DWORD                   dwSDecl[] = {
                                D3DVSD_STREAM(0),
                                D3DVSD_REG(0, D3DVSDT_FLOAT3),
                                D3DVSD_REG(1, D3DVSDT_D3DCOLOR),
                                D3DVSD_REG(2, D3DVSDT_D3DCOLOR),
                                D3DVSD_REG(3, D3DVSDT_FLOAT2),
                                D3DVSD_END()
                            };
    char                    szVShader[] = {
                                "vs.1.0\n"
                                "dp4 oPos.x, v0, c0\n"
                                "dp4 oPos.y, v0, c1\n"
                                "dp4 oPos.z, v0, c2\n"
                                "dp4 oPos.w, v0, c3\n"
                                "mov oD0, v1\n"
                            };

    m_hInstance = hInstance;

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pd3d) {
        DebugString(TEXT("Direct3DCreate8 failed"));
    }

    // Initialize the presentation parameters
    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_A8R8G8B8;
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_D24S8;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = m_hWnd;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = TRUE;

    // Create the device
    hr = m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, m_hWnd, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice);
    if (ResultFailed(hr, TEXT("IDirect3D8::CreateDevice failed"))) {
        return FALSE;
    }

    plrVertices[0] = LVERTEX(D3DXVECTOR3(-0.25f, -0.25f, 0.0f), RGBA_MAKE(255, 0, 0, 255), 0, 0.0f, 0.0f);
    plrVertices[1] = LVERTEX(D3DXVECTOR3( 0.0f,  0.25f, 0.0f), RGBA_MAKE(0, 0, 255, 255), 0, 0.0f, 0.0f);
    plrVertices[2] = LVERTEX(D3DXVECTOR3( 0.25f, -0.25f, 0.0f), RGBA_MAKE(0, 255, 0, 255), 0, 0.0f, 0.0f);

    hr = m_pDevice->CreateVertexBuffer(60000 * sizeof(LVERTEX), 0, FVF_LVERTEX, D3DPOOL_DEFAULT, &m_pd3dr);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        return FALSE;
    }

    hr = m_pd3dr->Lock(0, 0, &pData, 0);
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"))) {
        return FALSE;
    }

    for (i = 0; i < 20000; i++) {
        memcpy(pData, plrVertices, 3 * sizeof(LVERTEX));
        pData += 3 * sizeof(LVERTEX);
    }

    hr = m_pd3dr->Unlock();
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"))) {
        return FALSE;
    }

    AssembleShader("", szVShader, strlen(szVShader), 0, NULL, 
                        &pxgbufShader, NULL, NULL, NULL, NULL, NULL);

    m_pDevice->CreateVertexShader(dwSDecl, (LPDWORD)pxgbufShader->GetBufferPointer(), &m_dwVShader, 0);

    pxgbufShader->Release();

    return InitDeviceState();
}

//******************************************************************************
BOOL CReproTest::Run() {

    D3DXMATRIX  mView, mProj, mTransform;
    HRESULT     hr;
    UINT        i;
    static UINT uFrame = 0;

    do {

        if (++uFrame % 100 == 0) {
            DebugString(TEXT("Rendering frame %d"), uFrame);
        }

        // Clear the rendering target
        m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL, RGB_MAKE(0, 0, 0), 1.0f, 0);

        // Begin the scene
        m_pDevice->BeginScene();

        // Disable lighting
        m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);
        m_pDevice->SetRenderState(D3DRS_ZENABLE, D3DZB_FALSE);
        m_pDevice->SetRenderState(D3DRS_ZWRITEENABLE, FALSE);
        m_pDevice->SetRenderState(D3DRS_ZFUNC, D3DCMP_ALWAYS);

        SetView(&mView, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
                &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

        SetPerspectiveProjection(&mProj, 0.1f, 1000.0f, 
                M_PI / 4.0f, 480.0f / 640.0f);

        D3DXMatrixMultiply(&mTransform, &mView, &mProj);
        D3DXMatrixTranspose(&mTransform, &mTransform);

        m_pDevice->SetVertexShaderConstant(0, &mTransform, 4);

        // Use a fixed function shader
        m_pDevice->SetVertexShader(m_dwVShader);

        m_pDevice->SetStreamSource(0, m_pd3dr, sizeof(LVERTEX));

        // Draw a triangle
        m_pDevice->DrawPrimitive(D3DPT_TRIANGLELIST, 0, 20000);

        // End the scene
        m_pDevice->EndScene();

        // Update the screen
        m_pDevice->Present(NULL, NULL, NULL, NULL);

    } while (TRUE);

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::InitDeviceState() {

    D3DXMATRIX mTransform;
    UINT       i;
    HRESULT    hr;

    // Initialize the viewport
    if (!SetViewport(640, 480)) {
        DebugString(TEXT("SetViewport failed"));
    }

    // Initialize the view matrix
    SetView(&mTransform, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
            &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

    hr = m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Initialize the projection matrix
    SetPerspectiveProjection(&mTransform, 0.1f, 1000.0f, 
            M_PI / 4.0f, 480.0f / 640.0f);

    hr = m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Set ambient lighting
    hr = m_pDevice->SetRenderState(D3DRS_AMBIENT, 0x20202020);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the texture filters
    for (i = 0; i < 2; i++) {
        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }
    }

    // Set blend modes
    hr = m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    hr = m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Modulate color and alpha texture stages
    hr = m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    // Set the alpha comparison function
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAFUNC, (DWORD)D3DCMP_GREATEREQUAL);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the alpha reference value to opaque
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAREF, 0xFF);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Turn on specular highlights
    hr = m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Enable dithering
    hr = m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Disable per-vertex color
    hr = m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::SetViewport(DWORD dwWidth, DWORD dwHeight) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    // Set a viewport for the device
    viewport.X = 0;
    viewport.Y = 0;
    viewport.Width = dwWidth;
    viewport.Height = dwHeight;
    viewport.MinZ = 0.0f;
    viewport.MaxZ = 1.0f;

    hr = m_pDevice->SetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetViewport"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     InitMatrix
//
// Description:
//
//     Initialize the given matrix with the given values.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Matrix to initialize
//
//     float _11 to _44         - Initialization values
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
                float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44) 
{
    if (pd3dm) {

        pd3dm->_11 = _11;
        pd3dm->_12 = _12;
        pd3dm->_13 = _13;
        pd3dm->_14 = _14;
        pd3dm->_21 = _21;
        pd3dm->_22 = _22;
        pd3dm->_23 = _23;
        pd3dm->_24 = _24;
        pd3dm->_31 = _31;
        pd3dm->_32 = _32;
        pd3dm->_33 = _33;
        pd3dm->_34 = _34;
        pd3dm->_41 = _41;
        pd3dm->_42 = _42;
        pd3dm->_43 = _43;
        pd3dm->_44 = _44;
    }
}

//******************************************************************************
//
// Function:
//
//     SetView
//
// Description:
//
//     Align the given view matrix along the given direction and up vectors with
//     the position vector as the origin.
//
// Arguments:
//
//     LPD3DXMATRIX pd3dm       - View matrix to initialize
//
//     LPD3DXVECTOR3 pvPos      - View origin
//
//     LPD3DXVECTOR3 pvAt       - View interest vector
//
//     LPD3DXVECTOR3 pvUp       - View up vector
//
// Return Value:
//
//     Initialized view matrix.
//
//******************************************************************************
void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, LPD3DXVECTOR3 pvAt, 
                                                      LPD3DXVECTOR3 pvUp) 
{
    D3DXVECTOR3  d, u, r;

    if (pd3dm && pvPos && pvAt && pvUp && !(*pvPos == *pvAt) 
                                 && !(*pvUp == D3DXVECTOR3(0.0f, 0.0f, 0.0f))) {

        D3DXVec3Normalize(&d, &(*pvAt - *pvPos));
        u = *pvUp;

        // Project the up vector into the plane of the direction vector
        D3DXVec3Normalize(&u, &(u - (d * D3DXVec3Dot(&u, &d))));

        // Get the cross product
        D3DXVec3Cross(&r, &u, &d);

        // Initialize the view transform
        InitMatrix(pd3dm,
            r.x, u.x, d.x, 0.0f,
            r.y, u.y, d.y, 0.0f,
            r.z, u.z, d.z, 0.0f,
            -(pvPos->x * r.x + pvPos->y * r.y + pvPos->z * r.z), 
            -(pvPos->x * u.x + pvPos->y * u.y + pvPos->z * u.z), 
            -(pvPos->x * d.x + pvPos->y * d.y + pvPos->z * d.z), 
            1.0f
        );
    }
}

//******************************************************************************
//
// Function:
//
//     SetPerspectiveProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fFieldOfView, float fAspect) {

    float fTanHalfFOV = (float)tan((double)fFieldOfView / 2.0);
    float fFar = fBack / (fBack - fFront);

    InitMatrix(pd3dm,
        1.0f, 0.0f,           0.0f,                         0.0f,
        0.0f, 1.0f / fAspect, 0.0f,                         0.0f,
        0.0f, 0.0f,           fTanHalfFOV * fFar,           fTanHalfFOV,
        0.0f, 0.0f,           -fFront * fTanHalfFOV * fFar, 0.0f
    );
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtfog\util.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.h

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef __UTIL_H__
#define __UTIL_H__

//******************************************************************************
// Precomputed fractions of pi
//******************************************************************************

#define M_PI        3.14159265359f
#define M_2PI       6.28318530718f
#define M_PIDIV2    1.57079632680f
#define M_3PIDIV2   4.71238898039f
#define M_PIDIV4    0.78539816340f
#define M_3PIDIV4   2.35619449019f
#define M_5PIDIV4   3.92699081699f
#define M_7PIDIV4   5.49778714378f

#ifndef RGB_MAKE
/*
 * Format of CI colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |         color index           |   fraction    |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define CI_GETALPHA(ci)    ((ci) >> 24)
#define CI_GETINDEX(ci)    (((ci) >> 8) & 0xffff)
#define CI_GETFRACTION(ci) ((ci) & 0xff)
#define CI_ROUNDINDEX(ci)  CI_GETINDEX((ci) + 0x80)
#define CI_MASKALPHA(ci)   ((ci) & 0xffffff)
#define CI_MAKE(a, i, f)    (((a) << 24) | ((i) << 8) | (f))

/*
 * Format of RGBA colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGBA_GETALPHA(rgb)      ((rgb) >> 24)
#define RGBA_GETRED(rgb)        (((rgb) >> 16) & 0xff)
#define RGBA_GETGREEN(rgb)      (((rgb) >> 8) & 0xff)
#define RGBA_GETBLUE(rgb)       ((rgb) & 0xff)
#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

/* D3DRGB and D3DRGBA may be used as initialisers for D3DCOLORs
 * The float values must be in the range 0..1
 */
#define D3DRGB(r, g, b) \
    (0xff000000L | ( ((long)((r) * 255)) << 16) | (((long)((g) * 255)) << 8) | (long)((b) * 255))
#define D3DRGBA(r, g, b, a) \
    (   (((long)((a) * 255)) << 24) | (((long)((r) * 255)) << 16) \
    |   (((long)((g) * 255)) << 8) | (long)((b) * 255) \
    )

/*
 * Format of RGB colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    ignored    |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGB_GETRED(rgb)         (((rgb) >> 16) & 0xff)
#define RGB_GETGREEN(rgb)       (((rgb) >> 8) & 0xff)
#define RGB_GETBLUE(rgb)        ((rgb) & 0xff)
#define RGBA_SETALPHA(rgba, x) (((x) << 24) | ((rgba) & 0x00ffffff))
#define RGB_MAKE(r, g, b)       ((D3DCOLOR) (((r) << 16) | ((g) << 8) | (b)))
#define RGBA_TORGB(rgba)       ((D3DCOLOR) ((rgba) & 0xffffff))
#define RGB_TORGBA(rgb)        ((D3DCOLOR) ((rgb) | 0xff000000))

#endif

//******************************************************************************
// Debugging function prototypes
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
void                DebugString(LPCTSTR szFormat, ...);
BOOL                ResultFailed(HRESULT hr, LPCTSTR sz);
#else
inline void         DebugString(LPCTSTR szFormat, ...) {}
inline BOOL         ResultFailed(HRESULT hr, LPCTSTR sz) {return FALSE;};
#endif

//******************************************************************************
// Memory allocation prototypes
//******************************************************************************

BOOL                CreateHeap();
void                ReleaseHeap();
LPVOID              MemAlloc(UINT uNumBytes);
void                MemFree(LPVOID pvMem);
LPVOID              MemAlloc32(UINT uNumBytes);
void                MemFree32(LPVOID pvMem);

#endif // __UTIL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtrange\dtypes.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    dtypes.h

Author:

    Matt Bronder

Description:

    Various type definitions.

*******************************************************************************/

#ifndef __DTYPES_H__
#define __DTYPES_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FVF_VERTEX              (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1)
#define FVF_BVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3)
#define FVF_BVERTEX2            (D3DFVF_XYZ | D3DFVF_TEX2)
#define FVF_NVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3 | \
                                              D3DFVF_TEXCOORDSIZE2(0) | \
                                              D3DFVF_TEXCOORDSIZE2(1) | \
                                              D3DFVF_TEXCOORDSIZE3(2))
#define FVF_LVERTEX             (D3DFVF_XYZ | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLVERTEX            (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLBVERTEX           (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX2)
#define FVF_CVERTEX             (D3DFVF_XYZ | D3DFVF_NORMAL)
#define FVF_CVERTEX1_3          (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 | \
                                 D3DFVF_TEXCOORDSIZE3(0))

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _TCOORD {
    float               u;
    float               v;
} TCOORD, *PTCOORD;

//******************************************************************************
typedef struct _TCOORD2 {
    float               u;
    float               v;
} TCOORD2, *PTCOORD2;

//******************************************************************************
typedef struct _TCOORD3 {
    float               u;
    float               v;
    float               t;
} TCOORD3, *PTCOORD3;

//******************************************************************************
typedef struct _MATRIX3X3 {
    union {
        struct {
            float _11, _12, _13;
            float _21, _22, _23;
            float _31, _32, _33;
        };
        float m[3][3];
        struct {
            D3DXVECTOR3 r1;
            D3DXVECTOR3 r2;
            D3DXVECTOR3 r3;
        };
    };
} MATRIX3X3, *PMATRIX3X3;

//******************************************************************************
typedef struct _VERTEX {
    D3DXVECTOR3 vPosition;
    D3DXVECTOR3 vNormal;
    float       u0, v0;

    _VERTEX() {}
    _VERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0;
    }
} VERTEX, *PVERTEX;

//******************************************************************************
typedef struct _BVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (bump) map coordinates
    float       u2, v2;         // Diffuse light map coordinates

    _BVERTEX() {}
    _BVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2;
    }
} BVERTEX, *PBVERTEX;

//******************************************************************************
typedef struct _BVERTEX2 {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates and height (bump) map coordinates
    float       u1, v1;         // Diffuse light map coordinates

    _BVERTEX2() {}
    _BVERTEX2(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} BVERTEX2, *PBVERTEX2;

//******************************************************************************
typedef struct _NVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (normal) map coordinates
    float       u2, v2, t2;     // Light direction in tangent space

    _NVERTEX() {}
    _NVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2, float _t2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2; t2 = _t2;
    }
} NVERTEX, *PNVERTEX;

//******************************************************************************
typedef struct _LVERTEX {
    D3DXVECTOR3 vPosition;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _LVERTEX() { }
    _LVERTEX(const D3DVECTOR& v, D3DCOLOR _cDiffuse, D3DCOLOR _cSpecular, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} LVERTEX, *PLVERTEX;

//******************************************************************************
typedef struct _TLVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _TLVERTEX() {}
    _TLVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} TLVERTEX, *PTLVERTEX;

//******************************************************************************
typedef struct _TLBVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;
    float       u1, v1;

    _TLBVERTEX() {}
    _TLBVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0, float _u1, float _v1) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} TLBVERTEX, *PTLBVERTEX;

//******************************************************************************
typedef struct _CVERTEX {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;

    _CVERTEX() { }
    _CVERTEX(const D3DVECTOR& v, const D3DVECTOR& n) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
    }
} CVERTEX, *PCVERTEX;

//******************************************************************************
typedef struct _VERTEX1_3 {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;
    float         u0, v0, t0;

    _VERTEX1_3() { }
    _VERTEX1_3(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0, float _t0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0; t0 = _t0;
    }
} VERTEX1_3, *PVERTEX1_3;

#endif //__DTYPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtdead2\util.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.cpp

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#include <xtl.h>
#include <d3dx8.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include "util.h"

//******************************************************************************
// Globals
//******************************************************************************

static HANDLE               g_hHeap = NULL;

//******************************************************************************
// Debugging functions
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
    TCHAR*  szBuffer = (LPTSTR)MemAlloc32(2304 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }

    va_start(vl, szFormat);
//    wvsprintf(szBuffer, szFormat, vl);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

    MemFree32(szBuffer);
}

//******************************************************************************
//
// Function:
//
//     ResultFailed
//
// Description:
//
//     Test a given return code: if the code is an error, output a debug 
//     message with the error value.  If the code is a warning, output
//     a debug message with the warning value.
//
// Arguments:
//
//     HRESULT hr               - Return code to test for an error
//
//     LPCTSTR sz               - String describing the method that produced 
//                                the return code
//
// Return Value:
//
//     TRUE if the given return code is an error, FALSE otherwise.
//
//******************************************************************************
BOOL ResultFailed(HRESULT hr, LPCTSTR sz) {

    TCHAR szError[256];

    if (SUCCEEDED(hr)) {
        return FALSE;
    }

    D3DXGetErrorString(hr, szError, 256);

    if (FAILED(hr)) {
        DebugString(TEXT("%s failed with %s [0x%X]"), sz, szError, hr);
        return TRUE;
    }
    else {
        DebugString(TEXT("%s returned %s [0x%X]"), sz, szError, hr);
    }

    return FALSE;
}
#endif // DEBUG || _DEBUG

//******************************************************************************
// Memory allocation routines
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateHeap
//
// Description:
//
//     Create a heap for the application.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateHeap() {

    if (g_hHeap) {
        return FALSE;
    }

    g_hHeap = HeapCreate(0, 0, 0);
    if (!g_hHeap) {
        DebugString(TEXT("HeapCreate failed [%d]"), GetLastError());
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseHeap
//
// Description:
//
//     Destroy the application heap.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseHeap() {

    if (g_hHeap) {
        if (!HeapDestroy(g_hHeap)) {
            DebugString(TEXT("HeapDestroy failed [%d]"), GetLastError());
        }
        g_hHeap = NULL;
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc
//
// Description:
//
//     Allocate the given amount of memory from the application heap.  This 
//     memory should later be freed using the MemFree function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc(UINT uNumBytes) {

    LPVOID pvMem = NULL;
    if (g_hHeap) {
        pvMem = HeapAlloc(g_hHeap, 0, uNumBytes);
    }
    return pvMem;
}

//******************************************************************************
//
// Function:
//
//     MemFree
//
// Description:
//
//     Free a block of memory that was allocated using the MemAlloc function.
//
// Arguments:
//
//     LPVOID pvMem             - Base address of the memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree(LPVOID pvMem) {

    if (g_hHeap) {
        if (!HeapFree(g_hHeap, 0, pvMem)) {
            DebugString(TEXT("HeapFree failed [%d]"), GetLastError());
        }
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc32
//
// Description:
//
//     Allocate a given amount of memory whose base address is
//     aligned along a 32 byte boundary.  This memory must later be freed
//     using the MemFree32 function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc32(UINT uNumBytes)
{
	LPBYTE pbyAllocated, pbyAligned = NULL;

	pbyAllocated = (LPBYTE)MemAlloc(uNumBytes + 32);
    if (pbyAllocated) {
	    pbyAligned   = (LPBYTE)((((DWORD)pbyAllocated) + 32) & ~31);
	    *(((LPDWORD)pbyAligned)-1) = (DWORD)pbyAllocated;
    }
	return pbyAligned;
}

//******************************************************************************
//
// Function:
//
//     MemFree32
//
// Description:
//
//     Free an aligned block of memory that was allocated using the MemAlloc32
//     function.
//
// Arguments:
//
//     LPVOID pvAligned         - Base address of the aligned memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree32(LPVOID pvMem)
{
	LPBYTE pbyFree;

    if (pvMem) {
	    pbyFree = (LPBYTE)*(((LPDWORD)pvMem)-1);
	    MemFree(pbyFree);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtdead2\test.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.h

Author:

    Matt Bronder

Description:

    Direct3D repro test functions.

*******************************************************************************/

#ifndef __TEST_H__
#define __TEST_H__

//******************************************************************************
class CReproTest {

protected:

    HINSTANCE                       m_hInstance;
    HWND                            m_hWnd;

    LPDIRECT3D8                     m_pd3d;
    LPDIRECT3DDEVICE8               m_pDevice;

    LPDIRECT3DVERTEXBUFFER8         m_pd3dr;

    DWORD                           m_dwVShader;

public:

                                    CReproTest();
                                    ~CReproTest();

    virtual BOOL                    Create(HINSTANCE hInstance);
    virtual BOOL                    Run();

protected:

    virtual BOOL                    InitDeviceState();
    virtual BOOL                    SetViewport(DWORD dwWidth, DWORD dwHeight);
};

//******************************************************************************
LRESULT CALLBACK    WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

void                InitMatrix(D3DMATRIX* pd3dm,
                        float _11, float _12, float _13, float _14,
                        float _21, float _22, float _23, float _24,
                        float _31, float _32, float _33, float _34,
                        float _41, float _42, float _43, float _44);

void                SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, 
                        LPD3DXVECTOR3 pvAt, LPD3DXVECTOR3 pvUp);

void                SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, 
                        float fBack, float fFieldOfView, float fAspect);

#endif //__TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtrange\util.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.h

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef __UTIL_H__
#define __UTIL_H__

//******************************************************************************
// Precomputed fractions of pi
//******************************************************************************

#define M_PI        3.14159265359f
#define M_2PI       6.28318530718f
#define M_PIDIV2    1.57079632680f
#define M_3PIDIV2   4.71238898039f
#define M_PIDIV4    0.78539816340f
#define M_3PIDIV4   2.35619449019f
#define M_5PIDIV4   3.92699081699f
#define M_7PIDIV4   5.49778714378f

#ifndef RGB_MAKE
/*
 * Format of CI colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |         color index           |   fraction    |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define CI_GETALPHA(ci)    ((ci) >> 24)
#define CI_GETINDEX(ci)    (((ci) >> 8) & 0xffff)
#define CI_GETFRACTION(ci) ((ci) & 0xff)
#define CI_ROUNDINDEX(ci)  CI_GETINDEX((ci) + 0x80)
#define CI_MASKALPHA(ci)   ((ci) & 0xffffff)
#define CI_MAKE(a, i, f)    (((a) << 24) | ((i) << 8) | (f))

/*
 * Format of RGBA colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGBA_GETALPHA(rgb)      ((rgb) >> 24)
#define RGBA_GETRED(rgb)        (((rgb) >> 16) & 0xff)
#define RGBA_GETGREEN(rgb)      (((rgb) >> 8) & 0xff)
#define RGBA_GETBLUE(rgb)       ((rgb) & 0xff)
#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

/* D3DRGB and D3DRGBA may be used as initialisers for D3DCOLORs
 * The float values must be in the range 0..1
 */
#define D3DRGB(r, g, b) \
    (0xff000000L | ( ((long)((r) * 255)) << 16) | (((long)((g) * 255)) << 8) | (long)((b) * 255))
#define D3DRGBA(r, g, b, a) \
    (   (((long)((a) * 255)) << 24) | (((long)((r) * 255)) << 16) \
    |   (((long)((g) * 255)) << 8) | (long)((b) * 255) \
    )

/*
 * Format of RGB colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    ignored    |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGB_GETRED(rgb)         (((rgb) >> 16) & 0xff)
#define RGB_GETGREEN(rgb)       (((rgb) >> 8) & 0xff)
#define RGB_GETBLUE(rgb)        ((rgb) & 0xff)
#define RGBA_SETALPHA(rgba, x) (((x) << 24) | ((rgba) & 0x00ffffff))
#define RGB_MAKE(r, g, b)       ((D3DCOLOR) (((r) << 16) | ((g) << 8) | (b)))
#define RGBA_TORGB(rgba)       ((D3DCOLOR) ((rgba) & 0xffffff))
#define RGB_TORGBA(rgb)        ((D3DCOLOR) ((rgb) | 0xff000000))

#endif

//******************************************************************************
// Debugging function prototypes
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
void                DebugString(LPCTSTR szFormat, ...);
BOOL                ResultFailed(HRESULT hr, LPCTSTR sz);
#else
inline void         DebugString(LPCTSTR szFormat, ...) {}
inline BOOL         ResultFailed(HRESULT hr, LPCTSTR sz) {return FALSE;};
#endif

//******************************************************************************
// Memory allocation prototypes
//******************************************************************************

BOOL                CreateHeap();
void                ReleaseHeap();
LPVOID              MemAlloc(UINT uNumBytes);
void                MemFree(LPVOID pvMem);
LPVOID              MemAlloc32(UINT uNumBytes);
void                MemFree32(LPVOID pvMem);

#endif // __UTIL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtfog\util.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.cpp

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef UNDER_XBOX
#include <windows.h>
#else
#include <xtl.h>
#endif // UNDER_XBOX
#include <d3dx8.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include "util.h"

//******************************************************************************
// Globals
//******************************************************************************

static HANDLE               g_hHeap = NULL;

//******************************************************************************
// Debugging functions
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
#ifndef UNDER_XBOX
    TCHAR   szBuffer[2304];
#else
    TCHAR*  szBuffer = (LPTSTR)MemAlloc32(2304 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }
#endif // UNDER_XBOX

    va_start(vl, szFormat);
//    wvsprintf(szBuffer, szFormat, vl);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

#ifdef UNDER_XBOX
    MemFree32(szBuffer);
#endif // UNDER_XBOX
}

//******************************************************************************
//
// Function:
//
//     ResultFailed
//
// Description:
//
//     Test a given return code: if the code is an error, output a debug 
//     message with the error value.  If the code is a warning, output
//     a debug message with the warning value.
//
// Arguments:
//
//     HRESULT hr               - Return code to test for an error
//
//     LPCTSTR sz               - String describing the method that produced 
//                                the return code
//
// Return Value:
//
//     TRUE if the given return code is an error, FALSE otherwise.
//
//******************************************************************************
BOOL ResultFailed(HRESULT hr, LPCTSTR sz) {

    TCHAR szError[256];

    if (SUCCEEDED(hr)) {
        return FALSE;
    }

    D3DXGetErrorString(hr, szError, 256);

    if (FAILED(hr)) {
        DebugString(TEXT("%s failed with %s [0x%X]"), sz, szError, hr);
        return TRUE;
    }
    else {
        DebugString(TEXT("%s returned %s [0x%X]"), sz, szError, hr);
    }

    return FALSE;
}
#endif // DEBUG || _DEBUG

//******************************************************************************
// Memory allocation routines
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateHeap
//
// Description:
//
//     Create a heap for the application.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateHeap() {

    if (g_hHeap) {
        return FALSE;
    }

    g_hHeap = HeapCreate(0, 0, 0);
    if (!g_hHeap) {
        DebugString(TEXT("HeapCreate failed [%d]"), GetLastError());
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseHeap
//
// Description:
//
//     Destroy the application heap.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseHeap() {

    if (g_hHeap) {
        if (!HeapDestroy(g_hHeap)) {
            DebugString(TEXT("HeapDestroy failed [%d]"), GetLastError());
        }
        g_hHeap = NULL;
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc
//
// Description:
//
//     Allocate the given amount of memory from the application heap.  This 
//     memory should later be freed using the MemFree function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc(UINT uNumBytes) {

    LPVOID pvMem = NULL;
    if (g_hHeap) {
        pvMem = HeapAlloc(g_hHeap, 0, uNumBytes);
    }
    return pvMem;
}

//******************************************************************************
//
// Function:
//
//     MemFree
//
// Description:
//
//     Free a block of memory that was allocated using the MemAlloc function.
//
// Arguments:
//
//     LPVOID pvMem             - Base address of the memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree(LPVOID pvMem) {

    if (g_hHeap) {
        if (!HeapFree(g_hHeap, 0, pvMem)) {
            DebugString(TEXT("HeapFree failed [%d]"), GetLastError());
        }
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc32
//
// Description:
//
//     Allocate a given amount of memory whose base address is
//     aligned along a 32 byte boundary.  This memory must later be freed
//     using the MemFree32 function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc32(UINT uNumBytes)
{
	LPBYTE pbyAllocated, pbyAligned = NULL;

	pbyAllocated = (LPBYTE)MemAlloc(uNumBytes + 32);
    if (pbyAllocated) {
	    pbyAligned   = (LPBYTE)((((DWORD)pbyAllocated) + 32) & ~31);
	    *(((LPDWORD)pbyAligned)-1) = (DWORD)pbyAllocated;
    }
	return pbyAligned;
}

//******************************************************************************
//
// Function:
//
//     MemFree32
//
// Description:
//
//     Free an aligned block of memory that was allocated using the MemAlloc32
//     function.
//
// Arguments:
//
//     LPVOID pvAligned         - Base address of the aligned memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree32(LPVOID pvMem)
{
	LPBYTE pbyFree;

    if (pvMem) {
	    pbyFree = (LPBYTE)*(((LPDWORD)pvMem)-1);
	    MemFree(pbyFree);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtfog\test.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.h

Author:

    Matt Bronder

Description:

    Direct3D repro test functions.

*******************************************************************************/

#ifndef __TEST_H__
#define __TEST_H__

//******************************************************************************
class CReproTest {

protected:

    HINSTANCE                       m_hInstance;
    HWND                            m_hWnd;

    LPDIRECT3D8                     m_pd3d;
    LPDIRECT3DDEVICE8               m_pDevice;

    LPDIRECT3DVERTEXBUFFER8         m_pd3dr;

public:

                                    CReproTest();
                                    ~CReproTest();

    virtual BOOL                    Create(HINSTANCE hInstance);
    virtual BOOL                    Run();

protected:

    virtual BOOL                    SetPixelFog(D3DCOLOR c, float fStart, float fEnd, float fDensity, D3DFOGMODE d3dfm);

    virtual BOOL                    InitDeviceState();
    virtual BOOL                    SetViewport(DWORD dwWidth, DWORD dwHeight);
};

//******************************************************************************
LRESULT CALLBACK    WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

void                InitMatrix(D3DMATRIX* pd3dm,
                        float _11, float _12, float _13, float _14,
                        float _21, float _22, float _23, float _24,
                        float _31, float _32, float _33, float _34,
                        float _41, float _42, float _43, float _44);

void                SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, 
                        LPD3DXVECTOR3 pvAt, LPD3DXVECTOR3 pvUp);

void                SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, 
                        float fBack, float fFieldOfView, float fAspect);

#endif //__TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtfog\test.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#ifndef UNDER_XBOX
#include <windows.h>
#else
#include <xtl.h>
#endif // UNDER_XBOX
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <d3dx8.h>
#include "util.h"
#include "dtypes.h"
#include "test.h"

//******************************************************************************
// WinMain
//******************************************************************************

#ifndef UNDER_XBOX
#define RETURN(x)   return x
#else
#define RETURN(x)   return
#endif // UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     WinMain
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     HINSTANCE hInstance      - Application instance handle
//
//     HINSTANCE hPrevInstance  - Previous instance of the application (always
//                                NULL for Win32 applications)
//
//     LPSTR szCmdLine          - Pointer to a string specifying the command
//                                line used in launching the application
//                                (excluding the program name)
//
//     int nCmdShow             - State specifying how the window is to be 
//                                displayed on creation
//
// Return Value:
//
//     0 on success, -1 on failure.
//
//******************************************************************************
#ifndef UNDER_XBOX
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR szCmdLine, int nCmdShow) 
#else
void __cdecl main()
#endif // UNDER_XBOX
{
    CReproTest*     pRTest;
    int             ret = 0;

    // Seed the pseudo-random number generator
    srand(GetTickCount());

    // Create a heap for the application
    if (!CreateHeap()) {
        RETURN(0);
    }

    // Create the display
    pRTest = new CReproTest();
    if (!pRTest) {
        ReleaseHeap();
        RETURN(0);
    }

    // Initialize the display
#ifndef UNDER_XBOX
    if (!pRTest->Create(hInstance)) {
#else
    if (!pRTest->Create(NULL)) {
#endif // UNDER_XBOX
        DebugString(TEXT("CDisplay::Create failed"));
        delete pRTest;
        ReleaseHeap();
        RETURN(0);
    }

    // Render the 3D scene
    pRTest->Run();

    // Clean up
    delete pRTest;
    ReleaseHeap();

    RETURN(ret);
}

//******************************************************************************
CReproTest::CReproTest() {

    m_hWnd = NULL;
    m_pd3d = NULL;
    m_pDevice = NULL;
    m_pd3dr = NULL;
}

//******************************************************************************
CReproTest::~CReproTest() {

    if (m_pd3dr) {
        m_pd3dr->Release();
        m_pd3dr = NULL;
    }

    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }

    if (m_pd3d) {
        m_pd3d->Release();
        m_pd3d = NULL;
    }

#ifndef UNDER_XBOX
    // Unregister the window class
    UnregisterClass(TEXT("Direct3D Repro Test"), m_hInstance);
#endif // !UNDER_XBOX
}

//******************************************************************************
BOOL CReproTest::Create(HINSTANCE hInstance) {

    D3DPRESENT_PARAMETERS   d3dpp;
    LVERTEX                 plrVertices[3];
    LPBYTE                  pData;
    HRESULT                 hr;
#ifndef UNDER_XBOX
    WNDCLASS                wc;
    MSG                     msg;
#endif // !UNDER_XBOX

    m_hInstance = hInstance;

#ifndef UNDER_XBOX

    // Register the window class
    memset(&wc, 0, sizeof(WNDCLASS));
    wc.style            = 0;
    wc.lpfnWndProc      = WndProc;
    wc.cbClsExtra       = 0;
    wc.cbWndExtra       = 0;
    wc.hInstance        = m_hInstance;
    wc.hIcon            = NULL;
    wc.hbrBackground    = NULL;
    wc.hCursor          = LoadCursor(NULL, IDC_ARROW);
    wc.lpszMenuName     = NULL;
    wc.lpszClassName    = TEXT("Direct3D Repro Test");

    if (!RegisterClass(&wc)) {
        DebugString(TEXT("RegisterClass failed"));
		return FALSE;
    }

    // Create the main application window
    m_hWnd = CreateWindowEx(0, TEXT("Direct3D Repro Test"), 
                            TEXT("Direct3D Repro Test"), 
                            WS_OVERLAPPEDWINDOW | WS_VISIBLE, 0, 0,
                            GetSystemMetrics(SM_CXSCREEN), 
                            GetSystemMetrics(SM_CYSCREEN),
                            NULL, NULL, m_hInstance, NULL);

    if (!m_hWnd) {
        DebugString(TEXT("CreateWindowEx failed"));
		return FALSE;
    }

    UpdateWindow(m_hWnd);

    // Pump any messages
    while(PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

#endif

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pd3d) {
        DebugString(TEXT("Direct3DCreate8 failed"));
    }

    // Initialize the presentation parameters
    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_A8R8G8B8;
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_D24S8;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_ONE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = m_hWnd;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = TRUE;

    // Create the device
    hr = m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, m_hWnd, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice);
    if (ResultFailed(hr, TEXT("IDirect3D8::CreateDevice failed"))) {
        return FALSE;
    }

    plrVertices[0] = LVERTEX(D3DXVECTOR3(-12.0f, -10.0f, 10.0f), RGBA_MAKE(255, 255, 255, 255), 0, 0.0f, 0.0f);
    plrVertices[1] = LVERTEX(D3DXVECTOR3( 0.0f,  10.0f, 0.0f), RGBA_MAKE(255, 255, 255, 255), 0, 0.0f, 0.0f);
    plrVertices[2] = LVERTEX(D3DXVECTOR3( 12.0f, -10.0f, 10.0f), RGBA_MAKE(255, 255, 255, 255), 0, 0.0f, 0.0f);

    hr = m_pDevice->CreateVertexBuffer(3 * sizeof(LVERTEX), 0, FVF_LVERTEX, D3DPOOL_DEFAULT, &m_pd3dr);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        return FALSE;
    }

    hr = m_pd3dr->Lock(0, 3 * sizeof(LVERTEX), &pData, 0);
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"))) {
        return FALSE;
    }

    memcpy(pData, plrVertices, 3 * sizeof(LVERTEX));

    hr = m_pd3dr->Unlock();
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"))) {
        return FALSE;
    }

    return InitDeviceState();
}

//******************************************************************************
BOOL CReproTest::SetPixelFog(D3DCOLOR c, float fStart, float fEnd, float fDensity, D3DFOGMODE d3dfm)
{
    HRESULT hr;

    hr = m_pDevice->SetRenderState(D3DRS_FOGCOLOR, (DWORD)c);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        return FALSE;
    }

    hr = m_pDevice->SetRenderState(D3DRS_FOGSTART, *((LPDWORD)&fStart));
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        return FALSE;
    }

    hr = m_pDevice->SetRenderState(D3DRS_FOGEND, *((LPDWORD)&fEnd));
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        return FALSE;
    }

    hr = m_pDevice->SetRenderState(D3DRS_FOGDENSITY, *((LPDWORD)&fDensity));
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        return FALSE;
    }

    hr = m_pDevice->SetRenderState(D3DRS_FOGTABLEMODE, (DWORD)d3dfm);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::Run() {

#ifndef UNDER_XBOX
    MSG      msg;
#endif // !UNDER_XBOX
    HRESULT  hr;

    do {

#ifndef UNDER_XBOX
        if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
        else if (msg.message != WM_QUIT) {

            hr = m_pDevice->TestCooperativeLevel();
            if (FAILED(hr)) {
                return FALSE;
            }

#endif // !UNDER_XBOX

            // Clear the rendering target
            m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, RGB_MAKE(0, 0, 0), 1.0f, 0);

            // Begin the scene
            m_pDevice->BeginScene();

            // Disable lighting
            m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

            SetPixelFog(D3DCOLOR_ARGB(255, 0, 255, 0), 50.0f, 60.0f, 1.0f, D3DFOG_LINEAR);

            m_pDevice->SetRenderState(D3DRS_FOGENABLE, TRUE);

            // Use a fixed function shader
            m_pDevice->SetVertexShader(FVF_LVERTEX);

            m_pDevice->SetStreamSource(0, m_pd3dr, sizeof(LVERTEX));

            // Draw a triangle
            m_pDevice->DrawPrimitive(D3DPT_TRIANGLELIST, 0, 1);
//            m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 1, plrVertices, sizeof(LVERTEX));

            // End the scene
            m_pDevice->EndScene();

            // Update the screen
            m_pDevice->Present(NULL, NULL, NULL, NULL);

#ifndef UNDER_XBOX
        }
    } while (msg.message != WM_QUIT);
#else
    } while (TRUE);
#endif

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::InitDeviceState() {

    D3DXMATRIX mTransform;
    UINT       i;
    HRESULT    hr;

    // Initialize the viewport
    if (!SetViewport(640, 480)) {
        DebugString(TEXT("SetViewport failed"));
    }

    // Initialize the view matrix
    SetView(&mTransform, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
            &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

    hr = m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Initialize the projection matrix
    SetPerspectiveProjection(&mTransform, 0.1f, 1000.0f, 
            M_PI / 4.0f, 480.0f / 640.0f);

    hr = m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Set ambient lighting
    hr = m_pDevice->SetRenderState(D3DRS_AMBIENT, 0x20202020);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the texture filters
    for (i = 0; i < 2; i++) {
        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }
    }

    // Set blend modes
    hr = m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    hr = m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Modulate color and alpha texture stages
    hr = m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    // Set the alpha comparison function
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAFUNC, (DWORD)D3DCMP_GREATEREQUAL);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the alpha reference value to opaque
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAREF, 0xFF);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Turn on specular highlights
    hr = m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Enable dithering
    hr = m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Disable per-vertex color
    hr = m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::SetViewport(DWORD dwWidth, DWORD dwHeight) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    // Set a viewport for the device
    viewport.X = 0;
    viewport.Y = 0;
    viewport.Width = dwWidth;
    viewport.Height = dwHeight;
    viewport.MinZ = 0.0f;
    viewport.MaxZ = 1.0f;

    hr = m_pDevice->SetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetViewport"))) {
        return FALSE;
    }

    return TRUE;
}

#ifndef UNDER_XBOX

//******************************************************************************
// WndProc
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Window procedure to process messages for the main application window
//
// Arguments:
//
//     HWND hWnd                - Application window
//
//     UINT message             - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     0 if the message was handled, the return of DefWindowProc otherwise.
//
//******************************************************************************
LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    switch (uMsg) {

        case WM_SETCURSOR:
            SetCursor(NULL);
            return TRUE;

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    SendMessage(hWnd, WM_CLOSE, 0, 0);
                    return 0;
            }
            break;

        case WM_CLOSE:
            DestroyWindow(hWnd);
            return 0;

        case WM_DESTROY:
            PostQuitMessage(0);
            return 0;
    }

    return DefWindowProc(hWnd, uMsg, wParam, lParam);
}

#endif // UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     InitMatrix
//
// Description:
//
//     Initialize the given matrix with the given values.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Matrix to initialize
//
//     float _11 to _44         - Initialization values
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
                float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44) 
{
    if (pd3dm) {

        pd3dm->_11 = _11;
        pd3dm->_12 = _12;
        pd3dm->_13 = _13;
        pd3dm->_14 = _14;
        pd3dm->_21 = _21;
        pd3dm->_22 = _22;
        pd3dm->_23 = _23;
        pd3dm->_24 = _24;
        pd3dm->_31 = _31;
        pd3dm->_32 = _32;
        pd3dm->_33 = _33;
        pd3dm->_34 = _34;
        pd3dm->_41 = _41;
        pd3dm->_42 = _42;
        pd3dm->_43 = _43;
        pd3dm->_44 = _44;
    }
}

//******************************************************************************
//
// Function:
//
//     SetView
//
// Description:
//
//     Align the given view matrix along the given direction and up vectors with
//     the position vector as the origin.
//
// Arguments:
//
//     LPD3DXMATRIX pd3dm       - View matrix to initialize
//
//     LPD3DXVECTOR3 pvPos      - View origin
//
//     LPD3DXVECTOR3 pvAt       - View interest vector
//
//     LPD3DXVECTOR3 pvUp       - View up vector
//
// Return Value:
//
//     Initialized view matrix.
//
//******************************************************************************
void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, LPD3DXVECTOR3 pvAt, 
                                                      LPD3DXVECTOR3 pvUp) 
{
    D3DXVECTOR3  d, u, r;

    if (pd3dm && pvPos && pvAt && pvUp && !(*pvPos == *pvAt) 
                                 && !(*pvUp == D3DXVECTOR3(0.0f, 0.0f, 0.0f))) {

        D3DXVec3Normalize(&d, &(*pvAt - *pvPos));
        u = *pvUp;

        // Project the up vector into the plane of the direction vector
        D3DXVec3Normalize(&u, &(u - (d * D3DXVec3Dot(&u, &d))));

        // Get the cross product
        D3DXVec3Cross(&r, &u, &d);

        // Initialize the view transform
        InitMatrix(pd3dm,
            r.x, u.x, d.x, 0.0f,
            r.y, u.y, d.y, 0.0f,
            r.z, u.z, d.z, 0.0f,
            -(pvPos->x * r.x + pvPos->y * r.y + pvPos->z * r.z), 
            -(pvPos->x * u.x + pvPos->y * u.y + pvPos->z * u.z), 
            -(pvPos->x * d.x + pvPos->y * d.y + pvPos->z * d.z), 
            1.0f
        );
    }
}

//******************************************************************************
//
// Function:
//
//     SetPerspectiveProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fFieldOfView, float fAspect) {

    float fTanHalfFOV = (float)tan((double)fFieldOfView / 2.0);
    float fFar = fBack / (fBack - fFront);

    InitMatrix(pd3dm,
        1.0f, 0.0f,           0.0f,                         0.0f,
        0.0f, 1.0f / fAspect, 0.0f,                         0.0f,
        0.0f, 0.0f,           fTanHalfFOV * fFar,           fTanHalfFOV,
        0.0f, 0.0f,           -fFront * fTanHalfFOV * fFar, 0.0f
    );
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\rtmplate\dtypes.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    dtypes.h

Author:

    Matt Bronder

Description:

    Various type definitions.

*******************************************************************************/

#ifndef __DTYPES_H__
#define __DTYPES_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FVF_VERTEX              (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1)
#define FVF_BVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3)
#define FVF_BVERTEX2            (D3DFVF_XYZ | D3DFVF_TEX2)
#define FVF_NVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3 | \
                                              D3DFVF_TEXCOORDSIZE2(0) | \
                                              D3DFVF_TEXCOORDSIZE2(1) | \
                                              D3DFVF_TEXCOORDSIZE3(2))
#define FVF_LVERTEX             (D3DFVF_XYZ | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLVERTEX            (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLBVERTEX           (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX2)
#define FVF_CVERTEX             (D3DFVF_XYZ | D3DFVF_NORMAL)
#define FVF_CVERTEX1_3          (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 | \
                                 D3DFVF_TEXCOORDSIZE3(0))

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _TCOORD {
    float               u;
    float               v;
} TCOORD, *PTCOORD;

//******************************************************************************
typedef struct _TCOORD2 {
    float               u;
    float               v;
} TCOORD2, *PTCOORD2;

//******************************************************************************
typedef struct _TCOORD3 {
    float               u;
    float               v;
    float               t;
} TCOORD3, *PTCOORD3;

//******************************************************************************
typedef struct _MATRIX3X3 {
    union {
        struct {
            float _11, _12, _13;
            float _21, _22, _23;
            float _31, _32, _33;
        };
        float m[3][3];
        struct {
            D3DXVECTOR3 r1;
            D3DXVECTOR3 r2;
            D3DXVECTOR3 r3;
        };
    };
} MATRIX3X3, *PMATRIX3X3;

//******************************************************************************
typedef struct _VERTEX {
    D3DXVECTOR3 vPosition;
    D3DXVECTOR3 vNormal;
    float       u0, v0;

    _VERTEX() {}
    _VERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0;
    }
} VERTEX, *PVERTEX;

//******************************************************************************
typedef struct _BVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (bump) map coordinates
    float       u2, v2;         // Diffuse light map coordinates

    _BVERTEX() {}
    _BVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2;
    }
} BVERTEX, *PBVERTEX;

//******************************************************************************
typedef struct _BVERTEX2 {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates and height (bump) map coordinates
    float       u1, v1;         // Diffuse light map coordinates

    _BVERTEX2() {}
    _BVERTEX2(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} BVERTEX2, *PBVERTEX2;

//******************************************************************************
typedef struct _NVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (normal) map coordinates
    float       u2, v2, t2;     // Light direction in tangent space

    _NVERTEX() {}
    _NVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2, float _t2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2; t2 = _t2;
    }
} NVERTEX, *PNVERTEX;

//******************************************************************************
typedef struct _LVERTEX {
    D3DXVECTOR3 vPosition;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _LVERTEX() { }
    _LVERTEX(const D3DVECTOR& v, D3DCOLOR _cDiffuse, D3DCOLOR _cSpecular, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} LVERTEX, *PLVERTEX;

//******************************************************************************
typedef struct _TLVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _TLVERTEX() {}
    _TLVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} TLVERTEX, *PTLVERTEX;

//******************************************************************************
typedef struct _TLBVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;
    float       u1, v1;

    _TLBVERTEX() {}
    _TLBVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0, float _u1, float _v1) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} TLBVERTEX, *PTLBVERTEX;

//******************************************************************************
typedef struct _CVERTEX {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;

    _CVERTEX() { }
    _CVERTEX(const D3DVECTOR& v, const D3DVECTOR& n) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
    }
} CVERTEX, *PCVERTEX;

//******************************************************************************
typedef struct _VERTEX1_3 {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;
    float         u0, v0, t0;

    _VERTEX1_3() { }
    _VERTEX1_3(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0, float _t0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0; t0 = _t0;
    }
} VERTEX1_3, *PVERTEX1_3;

#endif //__DTYPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtrange\test.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.h

Author:

    Matt Bronder

Description:

    Direct3D repro test functions.

*******************************************************************************/

#ifndef __TEST_H__
#define __TEST_H__

#define SCREEN_DIM 20
#define LIGHT_RANGE 10.0f

//******************************************************************************
class CReproTest {

protected:

    HINSTANCE                       m_hInstance;
    HWND                            m_hWnd;

    LPDIRECT3D8                     m_pd3d;
    LPDIRECT3DDEVICE8               m_pDevice;

    LPDIRECT3DVERTEXBUFFER8         m_pd3dr;

    UINT                            m_uNumVertices;
    UINT                            m_uNumIndices;

    LPWORD                          m_pwScreen;

public:

                                    CReproTest();
                                    ~CReproTest();

    virtual BOOL                    Create(HINSTANCE hInstance);
    virtual BOOL                    Run();

protected:

    virtual BOOL                    InitDeviceState();
    virtual BOOL                    SetViewport(DWORD dwWidth, DWORD dwHeight);
};

//******************************************************************************
LRESULT CALLBACK    WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

void                InitMatrix(D3DMATRIX* pd3dm,
                        float _11, float _12, float _13, float _14,
                        float _21, float _22, float _23, float _24,
                        float _31, float _32, float _33, float _34,
                        float _41, float _42, float _43, float _44);

void                SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, 
                        LPD3DXVECTOR3 pvAt, LPD3DXVECTOR3 pvUp);

void                SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, 
                        float fBack, float fFieldOfView, float fAspect);

#endif //__TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtrange\test.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#ifndef UNDER_XBOX
#include <windows.h>
#else
#include <xtl.h>
#endif // UNDER_XBOX
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <d3dx8.h>
#include "util.h"
#include "dtypes.h"
#include "test.h"

//******************************************************************************
// WinMain
//******************************************************************************

#ifndef UNDER_XBOX
#define RETURN(x)   return x
#else
#define RETURN(x)   return
#endif // UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     WinMain
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     HINSTANCE hInstance      - Application instance handle
//
//     HINSTANCE hPrevInstance  - Previous instance of the application (always
//                                NULL for Win32 applications)
//
//     LPSTR szCmdLine          - Pointer to a string specifying the command
//                                line used in launching the application
//                                (excluding the program name)
//
//     int nCmdShow             - State specifying how the window is to be 
//                                displayed on creation
//
// Return Value:
//
//     0 on success, -1 on failure.
//
//******************************************************************************
#ifndef UNDER_XBOX
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR szCmdLine, int nCmdShow) 
#else
void __cdecl main()
#endif // UNDER_XBOX
{
    CReproTest*     pRTest;
    int             ret = 0;

    // Seed the pseudo-random number generator
    srand(GetTickCount());

    // Create a heap for the application
    if (!CreateHeap()) {
        RETURN(0);
    }

    // Create the display
    pRTest = new CReproTest();
    if (!pRTest) {
        ReleaseHeap();
        RETURN(0);
    }

    // Initialize the display
#ifndef UNDER_XBOX
    if (!pRTest->Create(hInstance)) {
#else
    if (!pRTest->Create(NULL)) {
#endif // UNDER_XBOX
        DebugString(TEXT("CDisplay::Create failed"));
        delete pRTest;
        ReleaseHeap();
        RETURN(0);
    }

    // Render the 3D scene
    pRTest->Run();

    // Clean up
    delete pRTest;
    ReleaseHeap();

    RETURN(ret);
}

//******************************************************************************
CReproTest::CReproTest() {

    m_hWnd = NULL;
    m_pd3d = NULL;
    m_pDevice = NULL;
    m_pd3dr = NULL;
}

//******************************************************************************
CReproTest::~CReproTest() {

    delete [] m_pwScreen;

    if (m_pd3dr) {
        m_pd3dr->Release();
        m_pd3dr = NULL;
    }

    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }

    if (m_pd3d) {
        m_pd3d->Release();
        m_pd3d = NULL;
    }

#ifndef UNDER_XBOX
    // Unregister the window class
    UnregisterClass(TEXT("Direct3D Repro Test"), m_hInstance);
#endif // !UNDER_XBOX
}

//******************************************************************************
BOOL CReproTest::Create(HINSTANCE hInstance) {

    D3DPRESENT_PARAMETERS   d3dpp;
    D3DLIGHT8               light;
    D3DMATERIAL8            material;
    PVERTEX                 pr;
    LPBYTE                  pData;
    HRESULT                 hr;
#ifndef UNDER_XBOX
    WNDCLASS                wc;
    MSG                     msg;
#endif // !UNDER_XBOX

    m_hInstance = hInstance;

#ifndef UNDER_XBOX

    // Register the window class
    memset(&wc, 0, sizeof(WNDCLASS));
    wc.style            = 0;
    wc.lpfnWndProc      = WndProc;
    wc.cbClsExtra       = 0;
    wc.cbWndExtra       = 0;
    wc.hInstance        = m_hInstance;
    wc.hIcon            = NULL;
    wc.hbrBackground    = NULL;
    wc.hCursor          = LoadCursor(NULL, IDC_ARROW);
    wc.lpszMenuName     = NULL;
    wc.lpszClassName    = TEXT("Direct3D Repro Test");

    if (!RegisterClass(&wc)) {
        DebugString(TEXT("RegisterClass failed"));
		return FALSE;
    }

    // Create the main application window
    m_hWnd = CreateWindowEx(0, TEXT("Direct3D Repro Test"), 
                            TEXT("Direct3D Repro Test"), 
                            WS_OVERLAPPEDWINDOW | WS_VISIBLE, 0, 0,
                            GetSystemMetrics(SM_CXSCREEN), 
                            GetSystemMetrics(SM_CYSCREEN),
                            NULL, NULL, m_hInstance, NULL);

    if (!m_hWnd) {
        DebugString(TEXT("CreateWindowEx failed"));
		return FALSE;
    }

    UpdateWindow(m_hWnd);

    // Pump any messages
    while(PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

#endif

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pd3d) {
        DebugString(TEXT("Direct3DCreate8 failed"));
    }

    // Initialize the presentation parameters
    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_A8R8G8B8;
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_D24S8;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_ONE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = m_hWnd;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = TRUE;

    // Create the device
    hr = m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, m_hWnd, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice);
    if (ResultFailed(hr, TEXT("IDirect3D8::CreateDevice failed"))) {
        return FALSE;
    }

    float fCell, x, y;
    UINT j, k;
    D3DXVECTOR3 vN, vLightPos;

    vLightPos = D3DXVECTOR3(0.0f, 0.0f, -LIGHT_RANGE / 2.0f);
    fCell = 2.0f * LIGHT_RANGE / SCREEN_DIM;
    m_uNumVertices = (SCREEN_DIM+1)*(SCREEN_DIM+1);
    m_uNumIndices = SCREEN_DIM * SCREEN_DIM * 6;

    // Initialize the screen vertices
    hr = m_pDevice->CreateVertexBuffer(m_uNumVertices * sizeof(VERTEX), 0, FVF_VERTEX, D3DPOOL_DEFAULT, &m_pd3dr);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        return FALSE;
    }

    hr = m_pd3dr->Lock(0, 0, (LPBYTE*)&pr, 0);
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"))) {
        return FALSE;
    }

    for (j = 0, y = LIGHT_RANGE; j <= SCREEN_DIM; j++, y -= fCell) {

        // XY plane
        for (k = 0, x = -LIGHT_RANGE; k <= SCREEN_DIM; k++, x += fCell) {

            pr[j*(SCREEN_DIM+1)+k] = VERTEX(D3DXVECTOR3(x, y, 0.0f), *D3DXVec3Normalize(&vN, &(vLightPos - D3DXVECTOR3(x, y, 0.0f))), (float)k / (float)SCREEN_DIM, (float)j / (float)SCREEN_DIM);
        }
    }

    hr = m_pd3dr->Unlock();
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"))) {
        return FALSE;
    }

    // Initialize the screen indices
    m_pwScreen = new WORD[m_uNumIndices];
    if (!m_pwScreen) {
        return FALSE;
    }

    for (j = 0; j < SCREEN_DIM; j++) {

        for (k = 0; k < SCREEN_DIM; k++) {

            m_pwScreen[j*SCREEN_DIM*6+k*6+0] = (j + 1) * (SCREEN_DIM + 1) + k;
            m_pwScreen[j*SCREEN_DIM*6+k*6+1] = (j    ) * (SCREEN_DIM + 1) + k;
            m_pwScreen[j*SCREEN_DIM*6+k*6+2] = (j    ) * (SCREEN_DIM + 1) + k + 1;
            m_pwScreen[j*SCREEN_DIM*6+k*6+3] = (j + 1) * (SCREEN_DIM + 1) + k;
            m_pwScreen[j*SCREEN_DIM*6+k*6+4] = (j    ) * (SCREEN_DIM + 1) + k + 1;
            m_pwScreen[j*SCREEN_DIM*6+k*6+5] = (j + 1) * (SCREEN_DIM + 1) + k + 1;
        }
    }

    // Create a point light
    memset(&light, 0, sizeof(D3DLIGHT8));
    light.Type = D3DLIGHT_POINT;
    light.Diffuse.r = 1.0f;
    light.Diffuse.g = 1.0f;
    light.Diffuse.b = 1.0f;
    light.Diffuse.a = 1.0f;
    light.Specular.r = 1.0f;
    light.Specular.g = 1.0f;
    light.Specular.b = 1.0f;
    light.Specular.a = 1.0f;
    light.Ambient.r = 1.0f;
    light.Ambient.g = 1.0f;
    light.Ambient.b = 1.0f;
    light.Ambient.a = 1.0f;
    light.Position = vLightPos;
    light.Range = LIGHT_RANGE;
    light.Attenuation0 = 1.0f;
    light.Attenuation1 = 0.15f;
    light.Attenuation2 = 0.0f;

    hr = m_pDevice->SetLight(0, &light);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetLight"))) {
        return FALSE;
    }

    hr = m_pDevice->LightEnable(0, TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::LightEnable"))) {
        return FALSE;
    }

    // Set a material
    memset(&material, 0, sizeof(D3DMATERIAL8));
    material.Ambient.r  = 0.0f;
    material.Ambient.g  = 0.0f;
    material.Ambient.b  = 0.0f;
    material.Ambient.a  = 0.0f;
    material.Diffuse.r  = 1.0f;
    material.Diffuse.g  = 1.0f;
    material.Diffuse.b  = 1.0f;
    material.Diffuse.a  = 1.0f;
    material.Specular.r = 0.0f;
    material.Specular.g = 0.0f;
    material.Specular.b = 0.0f;
    material.Specular.a = 0.0f;
    material.Emissive.r = 0.0f;
    material.Emissive.g = 0.0f;
    material.Emissive.b = 0.0f;
    material.Emissive.a = 0.0f;
    material.Power = 20.0f;

    m_pDevice->SetMaterial(&material);

    return InitDeviceState();
}

//******************************************************************************
BOOL CReproTest::Run() {

#ifndef UNDER_XBOX
    MSG      msg;
#endif // !UNDER_XBOX
    HRESULT  hr;

    do {

#ifndef UNDER_XBOX
        if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
        else if (msg.message != WM_QUIT) {

            hr = m_pDevice->TestCooperativeLevel();
            if (FAILED(hr)) {
                return FALSE;
            }

#endif // !UNDER_XBOX

            // Clear the rendering target
            m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, RGB_MAKE(0, 0, 0), 1.0f, 0);

            // Begin the scene
            m_pDevice->BeginScene();

            // Use a fixed function shader
            m_pDevice->SetVertexShader(FVF_VERTEX);

            m_pDevice->SetStreamSource(0, m_pd3dr, sizeof(VERTEX));

            // Draw a triangle
            m_pDevice->DrawIndexedVertices(D3DPT_TRIANGLELIST, SCREEN_DIM * SCREEN_DIM * 6, m_pwScreen);

            // End the scene
            m_pDevice->EndScene();

            // Update the screen
            m_pDevice->Present(NULL, NULL, NULL, NULL);

#ifndef UNDER_XBOX
        }
    } while (msg.message != WM_QUIT);
#else
    } while (TRUE);
#endif

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::InitDeviceState() {

    D3DXMATRIX mTransform;
    UINT       i;
    HRESULT    hr;

    // Initialize the viewport
    if (!SetViewport(640, 480)) {
        DebugString(TEXT("SetViewport failed"));
    }

    // Initialize the view matrix
    SetView(&mTransform, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
            &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

    hr = m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Initialize the projection matrix
    SetPerspectiveProjection(&mTransform, 0.1f, 1000.0f, 
            M_PI / 4.0f, 480.0f / 640.0f);

    hr = m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Set ambient lighting
    hr = m_pDevice->SetRenderState(D3DRS_AMBIENT, 0x20202020);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the texture filters
    for (i = 0; i < 2; i++) {
        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }
    }

    // Set blend modes
    hr = m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    hr = m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Modulate color and alpha texture stages
    hr = m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    // Set the alpha comparison function
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAFUNC, (DWORD)D3DCMP_GREATEREQUAL);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the alpha reference value to opaque
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAREF, 0xFF);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Turn on specular highlights
    hr = m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Enable dithering
    hr = m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Disable per-vertex color
    hr = m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::SetViewport(DWORD dwWidth, DWORD dwHeight) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    // Set a viewport for the device
    viewport.X = 0;
    viewport.Y = 0;
    viewport.Width = dwWidth;
    viewport.Height = dwHeight;
    viewport.MinZ = 0.0f;
    viewport.MaxZ = 1.0f;

    hr = m_pDevice->SetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetViewport"))) {
        return FALSE;
    }

    return TRUE;
}

#ifndef UNDER_XBOX

//******************************************************************************
// WndProc
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Window procedure to process messages for the main application window
//
// Arguments:
//
//     HWND hWnd                - Application window
//
//     UINT message             - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     0 if the message was handled, the return of DefWindowProc otherwise.
//
//******************************************************************************
LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    switch (uMsg) {

        case WM_SETCURSOR:
            SetCursor(NULL);
            return TRUE;

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    SendMessage(hWnd, WM_CLOSE, 0, 0);
                    return 0;
            }
            break;

        case WM_CLOSE:
            DestroyWindow(hWnd);
            return 0;

        case WM_DESTROY:
            PostQuitMessage(0);
            return 0;
    }

    return DefWindowProc(hWnd, uMsg, wParam, lParam);
}

#endif // UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     InitMatrix
//
// Description:
//
//     Initialize the given matrix with the given values.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Matrix to initialize
//
//     float _11 to _44         - Initialization values
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
                float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44) 
{
    if (pd3dm) {

        pd3dm->_11 = _11;
        pd3dm->_12 = _12;
        pd3dm->_13 = _13;
        pd3dm->_14 = _14;
        pd3dm->_21 = _21;
        pd3dm->_22 = _22;
        pd3dm->_23 = _23;
        pd3dm->_24 = _24;
        pd3dm->_31 = _31;
        pd3dm->_32 = _32;
        pd3dm->_33 = _33;
        pd3dm->_34 = _34;
        pd3dm->_41 = _41;
        pd3dm->_42 = _42;
        pd3dm->_43 = _43;
        pd3dm->_44 = _44;
    }
}

//******************************************************************************
//
// Function:
//
//     SetView
//
// Description:
//
//     Align the given view matrix along the given direction and up vectors with
//     the position vector as the origin.
//
// Arguments:
//
//     LPD3DXMATRIX pd3dm       - View matrix to initialize
//
//     LPD3DXVECTOR3 pvPos      - View origin
//
//     LPD3DXVECTOR3 pvAt       - View interest vector
//
//     LPD3DXVECTOR3 pvUp       - View up vector
//
// Return Value:
//
//     Initialized view matrix.
//
//******************************************************************************
void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, LPD3DXVECTOR3 pvAt, 
                                                      LPD3DXVECTOR3 pvUp) 
{
    D3DXVECTOR3  d, u, r;

    if (pd3dm && pvPos && pvAt && pvUp && !(*pvPos == *pvAt) 
                                 && !(*pvUp == D3DXVECTOR3(0.0f, 0.0f, 0.0f))) {

        D3DXVec3Normalize(&d, &(*pvAt - *pvPos));
        u = *pvUp;

        // Project the up vector into the plane of the direction vector
        D3DXVec3Normalize(&u, &(u - (d * D3DXVec3Dot(&u, &d))));

        // Get the cross product
        D3DXVec3Cross(&r, &u, &d);

        // Initialize the view transform
        InitMatrix(pd3dm,
            r.x, u.x, d.x, 0.0f,
            r.y, u.y, d.y, 0.0f,
            r.z, u.z, d.z, 0.0f,
            -(pvPos->x * r.x + pvPos->y * r.y + pvPos->z * r.z), 
            -(pvPos->x * u.x + pvPos->y * u.y + pvPos->z * u.z), 
            -(pvPos->x * d.x + pvPos->y * d.y + pvPos->z * d.z), 
            1.0f
        );
    }
}

//******************************************************************************
//
// Function:
//
//     SetPerspectiveProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fFieldOfView, float fAspect) {

    float fTanHalfFOV = (float)tan((double)fFieldOfView / 2.0);
    float fFar = fBack / (fBack - fFront);

    InitMatrix(pd3dm,
        1.0f, 0.0f,           0.0f,                         0.0f,
        0.0f, 1.0f / fAspect, 0.0f,                         0.0f,
        0.0f, 0.0f,           fTanHalfFOV * fFar,           fTanHalfFOV,
        0.0f, 0.0f,           -fFront * fTanHalfFOV * fFar, 0.0f
    );
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\rtmplate\util.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.cpp

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef UNDER_XBOX
#include <windows.h>
#else
#include <xtl.h>
#endif // UNDER_XBOX
#include <d3dx8.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include "util.h"

//******************************************************************************
// Globals
//******************************************************************************

static HANDLE               g_hHeap = NULL;

//******************************************************************************
// Debugging functions
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
#ifndef UNDER_XBOX
    TCHAR   szBuffer[2304];
#else
    TCHAR*  szBuffer = (LPTSTR)MemAlloc32(2304 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }
#endif // UNDER_XBOX

    va_start(vl, szFormat);
//    wvsprintf(szBuffer, szFormat, vl);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

#ifdef UNDER_XBOX
    MemFree32(szBuffer);
#endif // UNDER_XBOX
}

//******************************************************************************
//
// Function:
//
//     ResultFailed
//
// Description:
//
//     Test a given return code: if the code is an error, output a debug 
//     message with the error value.  If the code is a warning, output
//     a debug message with the warning value.
//
// Arguments:
//
//     HRESULT hr               - Return code to test for an error
//
//     LPCTSTR sz               - String describing the method that produced 
//                                the return code
//
// Return Value:
//
//     TRUE if the given return code is an error, FALSE otherwise.
//
//******************************************************************************
BOOL ResultFailed(HRESULT hr, LPCTSTR sz) {

    TCHAR szError[256];

    if (SUCCEEDED(hr)) {
        return FALSE;
    }

    D3DXGetErrorString(hr, szError, 256);

    if (FAILED(hr)) {
        DebugString(TEXT("%s failed with %s [0x%X]"), sz, szError, hr);
        return TRUE;
    }
    else {
        DebugString(TEXT("%s returned %s [0x%X]"), sz, szError, hr);
    }

    return FALSE;
}
#endif // DEBUG || _DEBUG

//******************************************************************************
// Memory allocation routines
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateHeap
//
// Description:
//
//     Create a heap for the application.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateHeap() {

    if (g_hHeap) {
        return FALSE;
    }

    g_hHeap = HeapCreate(0, 0, 0);
    if (!g_hHeap) {
        DebugString(TEXT("HeapCreate failed [%d]"), GetLastError());
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseHeap
//
// Description:
//
//     Destroy the application heap.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseHeap() {

    if (g_hHeap) {
        if (!HeapDestroy(g_hHeap)) {
            DebugString(TEXT("HeapDestroy failed [%d]"), GetLastError());
        }
        g_hHeap = NULL;
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc
//
// Description:
//
//     Allocate the given amount of memory from the application heap.  This 
//     memory should later be freed using the MemFree function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc(UINT uNumBytes) {

    LPVOID pvMem = NULL;
    if (g_hHeap) {
        pvMem = HeapAlloc(g_hHeap, 0, uNumBytes);
    }
    return pvMem;
}

//******************************************************************************
//
// Function:
//
//     MemFree
//
// Description:
//
//     Free a block of memory that was allocated using the MemAlloc function.
//
// Arguments:
//
//     LPVOID pvMem             - Base address of the memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree(LPVOID pvMem) {

    if (g_hHeap) {
        if (!HeapFree(g_hHeap, 0, pvMem)) {
            DebugString(TEXT("HeapFree failed [%d]"), GetLastError());
        }
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc32
//
// Description:
//
//     Allocate a given amount of memory whose base address is
//     aligned along a 32 byte boundary.  This memory must later be freed
//     using the MemFree32 function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc32(UINT uNumBytes)
{
	LPBYTE pbyAllocated, pbyAligned = NULL;

	pbyAllocated = (LPBYTE)MemAlloc(uNumBytes + 32);
    if (pbyAllocated) {
	    pbyAligned   = (LPBYTE)((((DWORD)pbyAllocated) + 32) & ~31);
	    *(((LPDWORD)pbyAligned)-1) = (DWORD)pbyAllocated;
    }
	return pbyAligned;
}

//******************************************************************************
//
// Function:
//
//     MemFree32
//
// Description:
//
//     Free an aligned block of memory that was allocated using the MemAlloc32
//     function.
//
// Arguments:
//
//     LPVOID pvAligned         - Base address of the aligned memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree32(LPVOID pvMem)
{
	LPBYTE pbyFree;

    if (pvMem) {
	    pbyFree = (LPBYTE)*(((LPDWORD)pvMem)-1);
	    MemFree(pbyFree);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\hang\test.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Description:

    Test functions.

*******************************************************************************/

#include <xtl.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <xgraphics.h>
#include <xgmath.h>
#include "test.h"

//******************************************************************************
_MVERTEX::_MVERTEX(const D3DXVECTOR3& v, const D3DXVECTOR3& n, float _u0, 
                   float _v0, float _u1, float _v1)
{
    vPosition = v;
    vNormal = n;
    u0 = _u0;
    v0 = _v0;
    u1 = _u1;
    v1 = _v1;
}

//******************************************************************************
// main
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     main
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void __cdecl main()
{
    CTest* pTest;

    // Seed the pseudo-random number generator
    srand(GetTickCount());

    pTest = new CTest();
    if (!pTest) {
        return;
    }

    if (!pTest->Create()) {
        DebugString(TEXT("CTest::Create failed"));
        delete pTest;
        return;
    }

    pTest->Run();

    delete pTest;
}

//******************************************************************************
CTest::CTest() {

    m_pd3d = NULL;
    m_pDevice = NULL;
    m_pd3dr = NULL;

    m_pd3dt1 = NULL;
    m_pd3dt2 = NULL;

    m_prVertices[0] = MVERTEX(D3DXVECTOR3(-10.0f,-10.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, -1.0f), 0.0f, 1.0f, 0.0f, 1.0f);
    m_prVertices[1] = MVERTEX(D3DXVECTOR3(-10.0f, 10.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, -1.0f), 0.0f, 0.0f, 0.0f, 0.0f);
    m_prVertices[2] = MVERTEX(D3DXVECTOR3( 10.0f, 10.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, -1.0f), 1.0f, 0.0f, 1.0f, 0.0f);
    m_prVertices[3] = MVERTEX(D3DXVECTOR3( 10.0f,-10.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, -1.0f), 1.0f, 1.0f, 1.0f, 1.0f);

    D3DXMatrixIdentity(&m_mTexture0);
    D3DXMatrixIdentity(&m_mTexture1);
    m_mTexture0._32 += 0.005f;
    m_mTexture1._31 += 0.005f;
}

//******************************************************************************
CTest::~CTest() {

    if (m_pd3d) {
        m_pd3d->Release();
        m_pd3d = NULL;
    }
}

//******************************************************************************
BOOL CTest::Create() {

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pd3d) {
        DebugString(TEXT("Direct3DCreate8 failed"));
        return FALSE;
    }

    // Initialize the presentation parameters
    memset(&m_d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    m_d3dpp.BackBufferWidth                   = 640;
    m_d3dpp.BackBufferHeight                  = 480;
    m_d3dpp.BackBufferFormat                  = D3DFMT_A8R8G8B8;
    m_d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    m_d3dpp.AutoDepthStencilFormat            = D3DFMT_D24S8;
    m_d3dpp.FullScreen_RefreshRateInHz        = 0;
    m_d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_ONE;
    m_d3dpp.BackBufferCount                   = 1;
    m_d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    m_d3dpp.hDeviceWindow                     = NULL;
    m_d3dpp.Windowed                          = FALSE;
    m_d3dpp.EnableAutoDepthStencil            = TRUE;

    // Initialize a directional light
    memset(&m_light, 0, sizeof(D3DLIGHT8));
    m_light.Type = D3DLIGHT_DIRECTIONAL;
    m_light.Diffuse.r = 1.0f;
    m_light.Diffuse.g = 1.0f;
    m_light.Diffuse.b = 1.0f;
    m_light.Diffuse.a = 1.0f;
    m_light.Specular.r = 1.0f;
    m_light.Specular.g = 1.0f;
    m_light.Specular.b = 1.0f;
    m_light.Specular.a = 1.0f;
    m_light.Ambient.r = 1.0f;
    m_light.Ambient.g = 1.0f;
    m_light.Ambient.b = 1.0f;
    m_light.Ambient.a = 1.0f;
    m_light.Direction = D3DXVECTOR3(0.0f, -1.0f, 1.0f);

    // Initialize a material
    memset(&m_material, 0, sizeof(D3DMATERIAL8));
    m_material.Diffuse.r = 1.0f;
    m_material.Diffuse.g = 1.0f;
    m_material.Diffuse.b = 1.0f;
    m_material.Diffuse.a = 1.0f;
    m_material.Specular.r = 1.0f;
    m_material.Specular.g = 1.0f;
    m_material.Specular.b = 1.0f;
    m_material.Specular.a = 1.0f;
    m_material.Ambient.r = 0.2f;
    m_material.Ambient.g = 0.2f;
    m_material.Ambient.b = 0.2f;
    m_material.Ambient.a = 0.2f;

    return TRUE;
}

//******************************************************************************
BOOL CTest::StartGraphics() {

    static D3DVIEWPORT8     viewport = {0, 0, 640, 480, 0.0f, 1.0f};
    XGMATRIX                mTransform;
    HRESULT                 hr;

    // Create the device
    hr = m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, NULL, D3DCREATE_HARDWARE_VERTEXPROCESSING, &m_d3dpp, &m_pDevice);
    if (ResultFailed(hr, TEXT("IDirect3D8::CreateDevice failed"))) {
        return FALSE;
    }

    // Set a viewport
    hr = m_pDevice->SetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetViewport"))) {
        return FALSE;
    }

    // Initialize the view matrix
    XGMatrixLookAtLH(&mTransform, &XGVECTOR3(0.0f, 0.0f, -50.0f), &XGVECTOR3(0.0f, 0.0f, 0.0f), &XGVECTOR3(0.0f, 1.0f, 0.0f));
    hr = m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Initialize the projection matrix
    XGMatrixPerspectiveFovLH(&mTransform, 3.14159f / 4.0f, 640.0f / 480.0f, 0.1f, 1000.0f);
    hr = m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    hr = m_pDevice->CreateTexture(256, 256, 1, 0, D3DFMT_A1R5G5B5, 0, &m_pd3dt1);
    if (FAILED(hr)) {
        return FALSE;
    }

    hr = m_pDevice->CreateTexture(256, 256, 1, 0, D3DFMT_A1R5G5B5, 0, &m_pd3dt2);
    if (FAILED(hr)) {
        return FALSE;
    }

    hr = m_pDevice->SetLight(0, &m_light);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetLight"))) {
        return FALSE;
    }

    hr = m_pDevice->LightEnable(0, TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::LightEnable"))) {
        return FALSE;
    }

    hr = m_pDevice->SetMaterial(&m_material);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetMaterial"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
void CTest::StopGraphics() {

    if (m_pd3dt1) {
        m_pd3dt1->Release();
        m_pd3dt1 = NULL;
    }
    if (m_pd3dt2) {
        m_pd3dt2->Release();
        m_pd3dt2 = NULL;
    }
    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }
}

//******************************************************************************
BOOL CTest::Run() {

    float fRunningTime = 0.0f, fTime, fLastTime, fTimeFreq, fFPS, fPPS;
    LARGE_INTEGER qwCounter;

    QueryPerformanceFrequency(&qwCounter);
    fTimeFreq = 1.0f / (float)qwCounter.QuadPart;
    QueryPerformanceCounter(&qwCounter);
    fLastTime = (float)qwCounter.QuadPart * fTimeFreq;

    do {

        StartGraphics();

        // Clear the rendering target
        m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, 0, 1.0f, 0);

        // Begin the scene
        m_pDevice->BeginScene();

        // Disable lighting
        m_pDevice->SetRenderState(D3DRS_LIGHTING, TRUE);

	    m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);
	    m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);
	    m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
	    m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_MODULATE);
	    m_pDevice->SetTextureStageState(1, D3DTSS_COLORARG1, D3DTA_TEXTURE);
	    m_pDevice->SetTextureStageState(1, D3DTSS_COLORARG2, D3DTA_CURRENT);

        m_pDevice->SetTexture(0, m_pd3dt1);
        m_pDevice->SetTexture(1, m_pd3dt2);

	    m_pDevice->SetTextureStageState(0, D3DTSS_TEXCOORDINDEX, 0);
	    m_pDevice->SetTextureStageState(1, D3DTSS_TEXCOORDINDEX, 1);

        m_pDevice->SetTextureStageState(0, D3DTSS_TEXTURETRANSFORMFLAGS, D3DTTFF_COUNT2);
        m_pDevice->SetTextureStageState(1, D3DTSS_TEXTURETRANSFORMFLAGS, D3DTTFF_COUNT2);

        m_pDevice->SetVertexShader(FVF_MVERTEX);

        m_pDevice->SetTransform(D3DTS_TEXTURE0, &m_mTexture0);
        m_pDevice->SetTransform(D3DTS_TEXTURE1, &m_mTexture1);

        m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, m_prVertices, sizeof(MVERTEX));

        // End the scene
        m_pDevice->EndScene();

        // Update the screen
        m_pDevice->Present(NULL, NULL, NULL, NULL);

        QueryPerformanceCounter(&qwCounter);
        fTime = (float)qwCounter.QuadPart * fTimeFreq;

        if (fTime - fLastTime > 1.0f) {
            fRunningTime += (fTime - fLastTime);
            DebugString(TEXT("The system has been running for %3.3f seconds"), fRunningTime);
            QueryPerformanceCounter(&qwCounter);
            fLastTime = (float)qwCounter.QuadPart * fTimeFreq;
        }

        StopGraphics();

    } while (TRUE);

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
    TCHAR*  szBuffer = (LPTSTR)HeapAlloc(GetProcessHeap(), 0, 2304 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }

    va_start(vl, szFormat);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

    HeapFree(GetProcessHeap(), 0, szBuffer);
}

//******************************************************************************
//
// Function:
//
//     ResultFailed
//
// Description:
//
//     Test a given return code: if the code is an error, output a debug 
//     message with the error value.  If the code is a warning, output
//     a debug message with the warning value.
//
// Arguments:
//
//     HRESULT hr               - Return code to test for an error
//
//     LPCTSTR sz               - String describing the method that produced 
//                                the return code
//
// Return Value:
//
//     TRUE if the given return code is an error, FALSE otherwise.
//
//******************************************************************************
BOOL ResultFailed(HRESULT hr, LPCTSTR sz) {

    TCHAR szError[256];

    if (SUCCEEDED(hr)) {
        return FALSE;
    }

//    XGGetErrorString(hr, szError, 256);

    if (FAILED(hr)) {
        DebugString(TEXT("%s failed with %s [0x%X]"), sz, szError, hr);
        return TRUE;
    }
    else {
        DebugString(TEXT("%s returned %s [0x%X]"), sz, szError, hr);
    }

    return FALSE;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\rtmplate\util.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.h

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef __UTIL_H__
#define __UTIL_H__

//******************************************************************************
// Precomputed fractions of pi
//******************************************************************************

#define M_PI        3.14159265359f
#define M_2PI       6.28318530718f
#define M_PIDIV2    1.57079632680f
#define M_3PIDIV2   4.71238898039f
#define M_PIDIV4    0.78539816340f
#define M_3PIDIV4   2.35619449019f
#define M_5PIDIV4   3.92699081699f
#define M_7PIDIV4   5.49778714378f

#ifndef RGB_MAKE
/*
 * Format of CI colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |         color index           |   fraction    |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define CI_GETALPHA(ci)    ((ci) >> 24)
#define CI_GETINDEX(ci)    (((ci) >> 8) & 0xffff)
#define CI_GETFRACTION(ci) ((ci) & 0xff)
#define CI_ROUNDINDEX(ci)  CI_GETINDEX((ci) + 0x80)
#define CI_MASKALPHA(ci)   ((ci) & 0xffffff)
#define CI_MAKE(a, i, f)    (((a) << 24) | ((i) << 8) | (f))

/*
 * Format of RGBA colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGBA_GETALPHA(rgb)      ((rgb) >> 24)
#define RGBA_GETRED(rgb)        (((rgb) >> 16) & 0xff)
#define RGBA_GETGREEN(rgb)      (((rgb) >> 8) & 0xff)
#define RGBA_GETBLUE(rgb)       ((rgb) & 0xff)
#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

/* D3DRGB and D3DRGBA may be used as initialisers for D3DCOLORs
 * The float values must be in the range 0..1
 */
#define D3DRGB(r, g, b) \
    (0xff000000L | ( ((long)((r) * 255)) << 16) | (((long)((g) * 255)) << 8) | (long)((b) * 255))
#define D3DRGBA(r, g, b, a) \
    (   (((long)((a) * 255)) << 24) | (((long)((r) * 255)) << 16) \
    |   (((long)((g) * 255)) << 8) | (long)((b) * 255) \
    )

/*
 * Format of RGB colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    ignored    |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGB_GETRED(rgb)         (((rgb) >> 16) & 0xff)
#define RGB_GETGREEN(rgb)       (((rgb) >> 8) & 0xff)
#define RGB_GETBLUE(rgb)        ((rgb) & 0xff)
#define RGBA_SETALPHA(rgba, x) (((x) << 24) | ((rgba) & 0x00ffffff))
#define RGB_MAKE(r, g, b)       ((D3DCOLOR) (((r) << 16) | ((g) << 8) | (b)))
#define RGBA_TORGB(rgba)       ((D3DCOLOR) ((rgba) & 0xffffff))
#define RGB_TORGBA(rgb)        ((D3DCOLOR) ((rgb) | 0xff000000))

#endif

//******************************************************************************
// Debugging function prototypes
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
void                DebugString(LPCTSTR szFormat, ...);
BOOL                ResultFailed(HRESULT hr, LPCTSTR sz);
#else
inline void         DebugString(LPCTSTR szFormat, ...) {}
inline BOOL         ResultFailed(HRESULT hr, LPCTSTR sz) {return FALSE;};
#endif

//******************************************************************************
// Memory allocation prototypes
//******************************************************************************

BOOL                CreateHeap();
void                ReleaseHeap();
LPVOID              MemAlloc(UINT uNumBytes);
void                MemFree(LPVOID pvMem);
LPVOID              MemAlloc32(UINT uNumBytes);
void                MemFree32(LPVOID pvMem);

#endif // __UTIL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\dvtrange\util.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.cpp

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef UNDER_XBOX
#include <windows.h>
#else
#include <xtl.h>
#endif // UNDER_XBOX
#include <d3dx8.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include "util.h"

//******************************************************************************
// Globals
//******************************************************************************

static HANDLE               g_hHeap = NULL;

//******************************************************************************
// Debugging functions
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
#ifndef UNDER_XBOX
    TCHAR   szBuffer[2304];
#else
    TCHAR*  szBuffer = (LPTSTR)MemAlloc32(2304 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }
#endif // UNDER_XBOX

    va_start(vl, szFormat);
//    wvsprintf(szBuffer, szFormat, vl);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

#ifdef UNDER_XBOX
    MemFree32(szBuffer);
#endif // UNDER_XBOX
}

//******************************************************************************
//
// Function:
//
//     ResultFailed
//
// Description:
//
//     Test a given return code: if the code is an error, output a debug 
//     message with the error value.  If the code is a warning, output
//     a debug message with the warning value.
//
// Arguments:
//
//     HRESULT hr               - Return code to test for an error
//
//     LPCTSTR sz               - String describing the method that produced 
//                                the return code
//
// Return Value:
//
//     TRUE if the given return code is an error, FALSE otherwise.
//
//******************************************************************************
BOOL ResultFailed(HRESULT hr, LPCTSTR sz) {

    TCHAR szError[256];

    if (SUCCEEDED(hr)) {
        return FALSE;
    }

    D3DXGetErrorString(hr, szError, 256);

    if (FAILED(hr)) {
        DebugString(TEXT("%s failed with %s [0x%X]"), sz, szError, hr);
        return TRUE;
    }
    else {
        DebugString(TEXT("%s returned %s [0x%X]"), sz, szError, hr);
    }

    return FALSE;
}
#endif // DEBUG || _DEBUG

//******************************************************************************
// Memory allocation routines
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateHeap
//
// Description:
//
//     Create a heap for the application.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateHeap() {

    if (g_hHeap) {
        return FALSE;
    }

    g_hHeap = HeapCreate(0, 0, 0);
    if (!g_hHeap) {
        DebugString(TEXT("HeapCreate failed [%d]"), GetLastError());
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseHeap
//
// Description:
//
//     Destroy the application heap.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseHeap() {

    if (g_hHeap) {
        if (!HeapDestroy(g_hHeap)) {
            DebugString(TEXT("HeapDestroy failed [%d]"), GetLastError());
        }
        g_hHeap = NULL;
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc
//
// Description:
//
//     Allocate the given amount of memory from the application heap.  This 
//     memory should later be freed using the MemFree function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc(UINT uNumBytes) {

    LPVOID pvMem = NULL;
    if (g_hHeap) {
        pvMem = HeapAlloc(g_hHeap, 0, uNumBytes);
    }
    return pvMem;
}

//******************************************************************************
//
// Function:
//
//     MemFree
//
// Description:
//
//     Free a block of memory that was allocated using the MemAlloc function.
//
// Arguments:
//
//     LPVOID pvMem             - Base address of the memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree(LPVOID pvMem) {

    if (g_hHeap) {
        if (!HeapFree(g_hHeap, 0, pvMem)) {
            DebugString(TEXT("HeapFree failed [%d]"), GetLastError());
        }
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc32
//
// Description:
//
//     Allocate a given amount of memory whose base address is
//     aligned along a 32 byte boundary.  This memory must later be freed
//     using the MemFree32 function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc32(UINT uNumBytes)
{
	LPBYTE pbyAllocated, pbyAligned = NULL;

	pbyAllocated = (LPBYTE)MemAlloc(uNumBytes + 32);
    if (pbyAllocated) {
	    pbyAligned   = (LPBYTE)((((DWORD)pbyAllocated) + 32) & ~31);
	    *(((LPDWORD)pbyAligned)-1) = (DWORD)pbyAllocated;
    }
	return pbyAligned;
}

//******************************************************************************
//
// Function:
//
//     MemFree32
//
// Description:
//
//     Free an aligned block of memory that was allocated using the MemAlloc32
//     function.
//
// Arguments:
//
//     LPVOID pvAligned         - Base address of the aligned memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree32(LPVOID pvMem)
{
	LPBYTE pbyFree;

    if (pvMem) {
	    pbyFree = (LPBYTE)*(((LPDWORD)pvMem)-1);
	    MemFree(pbyFree);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\ndbreset\main.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#include <xtl.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <d3dx8.h>
#include <xgraphics.h>

//******************************************************************************
#define FVF_LVERTEX (D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1)

#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

//******************************************************************************
typedef struct _LVERTEX {
    D3DXVECTOR3 vPosition;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _LVERTEX() { }
    _LVERTEX(const D3DVECTOR& v, D3DCOLOR _cDiffuse, D3DCOLOR _cSpecular, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} LVERTEX, *PLVERTEX;

//******************************************************************************
class CReproTest {

protected:

    LPDIRECT3D8                     m_pd3d;
    LPDIRECT3DDEVICE8               m_pDevice;
    LPDIRECT3DVERTEXBUFFER8         m_pd3dr;
    DWORD                           m_dwVShader;

public:

                                    CReproTest();
                                    ~CReproTest();

    virtual BOOL                    Create();
    virtual BOOL                    Run();

protected:

    virtual BOOL                    InitDeviceState();
    virtual BOOL                    SetViewport(DWORD dwWidth, DWORD dwHeight);
};

//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
         float _11, float _12, float _13, float _14,
         float _21, float _22, float _23, float _24,
         float _31, float _32, float _33, float _34,
         float _41, float _42, float _43, float _44);

void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, 
         LPD3DXVECTOR3 pvAt, LPD3DXVECTOR3 pvUp);

void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, 
         float fBack, float fFieldOfView, float fAspect);

void DebugString(LPCTSTR szFormat, ...);

//******************************************************************************
// WinMain
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WinMain
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     HINSTANCE hInstance      - Application instance handle
//
//     HINSTANCE hPrevInstance  - Previous instance of the application (always
//                                NULL for Win32 applications)
//
//     LPSTR szCmdLine          - Pointer to a string specifying the command
//                                line used in launching the application
//                                (excluding the program name)
//
//     int nCmdShow             - State specifying how the window is to be 
//                                displayed on creation
//
// Return Value:
//
//     0 on success, -1 on failure.
//
//******************************************************************************
void __cdecl main()
{
    CReproTest* pRTest;

    // Create the display
    pRTest = new CReproTest();
    if (!pRTest) {
        return;
    }

    // Initialize the display
    if (!pRTest->Create()) {
        DebugString(TEXT("CDisplay::Create failed"));
        delete pRTest;
        return;
    }

    // Render the scene
    pRTest->Run();

    // Clean up
    delete pRTest;
}

//******************************************************************************
CReproTest::CReproTest() {

    m_pd3d = NULL;
    m_pDevice = NULL;
    m_pd3dr = NULL;
    m_dwVShader = 0xFFFFFFFF;
}

//******************************************************************************
CReproTest::~CReproTest() {

    if (m_dwVShader != 0xFFFFFFFF) {
        m_pDevice->SetVertexShader(D3DFVF_XYZ);
        m_pDevice->DeleteVertexShader(m_dwVShader);
    }

    if (m_pd3dr) {
        m_pd3dr->Release();
        m_pd3dr = NULL;
    }

    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }

    if (m_pd3d) {
        m_pd3d->Release();
        m_pd3d = NULL;
    }
}

//******************************************************************************
BOOL CReproTest::Create() {

    D3DPRESENT_PARAMETERS   d3dpp;
    LVERTEX                 plrVertices[3];
    LPBYTE                  pData;
    HRESULT                 hr;
    UINT                    i;
    LPXGBUFFER              pxgbufShader;
    DWORD                   dwSDecl[] = {
                                D3DVSD_STREAM(0),
                                D3DVSD_REG(0, D3DVSDT_FLOAT3),
                                D3DVSD_REG(1, D3DVSDT_D3DCOLOR),
                                D3DVSD_REG(2, D3DVSDT_D3DCOLOR),
                                D3DVSD_REG(3, D3DVSDT_FLOAT2),
                                D3DVSD_END()
                            };
    char                    szVShader[] = {
                                "vs.1.0\n"
                                "dp4 oPos.x, v0, c0\n"
                                "dp4 oPos.y, v0, c1\n"
                                "dp4 oPos.z, v0, c2\n"
                                "dp4 oPos.w, v0, c3\n"
                                "mov oD0, v1\n"
                            };

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pd3d) {
        DebugString(TEXT("Direct3DCreate8 failed"));
    }

    // Initialize the presentation parameters
    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_LIN_A8R8G8B8; 
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_LIN_D24S8;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = NULL;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = FALSE; // Set this to TRUE and the triangle is rendered correctly

    // Create the device
    m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, NULL, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice);

    plrVertices[0] = LVERTEX(D3DXVECTOR3(-10.0f, -10.0f, 0.0f), RGBA_MAKE(255, 0, 0, 255), 0, 0.0f, 0.0f);
    plrVertices[1] = LVERTEX(D3DXVECTOR3( 0.0f,  10.0f, 0.0f), RGBA_MAKE(0, 0, 255, 255), 0, 0.0f, 0.0f);
    plrVertices[2] = LVERTEX(D3DXVECTOR3( 10.0f, -10.0f, 0.0f), RGBA_MAKE(0, 255, 0, 255), 0, 0.0f, 0.0f);

    m_pDevice->CreateVertexBuffer(3 * sizeof(LVERTEX), 0, FVF_LVERTEX, D3DPOOL_DEFAULT, &m_pd3dr);

    m_pd3dr->Lock(0, 0, &pData, 0);
    memcpy(pData, plrVertices, 3 * sizeof(LVERTEX));
    m_pd3dr->Unlock();

    AssembleShader("", szVShader, strlen(szVShader), 0, NULL, 
                        &pxgbufShader, NULL, NULL, NULL, NULL, NULL);

    m_pDevice->CreateVertexShader(dwSDecl, (LPDWORD)pxgbufShader->GetBufferPointer(), &m_dwVShader, 0);

    pxgbufShader->Release();

    return InitDeviceState();
}

//******************************************************************************
BOOL CReproTest::Run() {

    D3DXMATRIX  mView, mProj, mTransform;
    HRESULT     hr;
    UINT        i;
    static UINT uFrame = 0;

    do {

        DebugString(TEXT("Rendering frame %d"), ++uFrame);

        // Clear the rendering target
        m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, 0, 1.0f, 0);

        // Begin the scene
        m_pDevice->BeginScene();

        m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);
        m_pDevice->SetRenderState(D3DRS_ZENABLE, D3DZB_FALSE);
        m_pDevice->SetRenderState(D3DRS_ZWRITEENABLE, FALSE);

        SetView(&mView, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
                &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

        SetPerspectiveProjection(&mProj, 0.1f, 1000.0f, 
                3.14159f / 4.0f, 480.0f / 640.0f);

        D3DXMatrixMultiply(&mTransform, &mView, &mProj);
        D3DXMatrixTranspose(&mTransform, &mTransform);

        m_pDevice->SetVertexShaderConstant(0, &mTransform, 4);

        m_pDevice->SetVertexShader(m_dwVShader);

        m_pDevice->SetStreamSource(0, m_pd3dr, sizeof(LVERTEX));

        // Draw a triangle
        m_pDevice->DrawPrimitive(D3DPT_TRIANGLELIST, 0, 1);

        // End the scene
        m_pDevice->EndScene();

        // Update the screen
        m_pDevice->Present(NULL, NULL, NULL, NULL);

    } while (TRUE);

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::InitDeviceState() {

    D3DXMATRIX mTransform;
    UINT       i;
    HRESULT    hr;

    // Initialize the viewport
    if (!SetViewport(640, 480)) {
        DebugString(TEXT("SetViewport failed"));
    }

    // Initialize the view matrix
    SetView(&mTransform, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
            &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

    m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);

    // Initialize the projection matrix
    SetPerspectiveProjection(&mTransform, 0.1f, 1000.0f, 
            3.14159f / 4.0f, 480.0f / 640.0f);

    m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);

    m_pDevice->SetRenderState(D3DRS_AMBIENT, 0x20202020);
    m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)TRUE);
    m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::SetViewport(DWORD dwWidth, DWORD dwHeight) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    // Set a viewport for the device
    viewport.X = 0;
    viewport.Y = 0;
    viewport.Width = dwWidth;
    viewport.Height = dwHeight;
    viewport.MinZ = 0.0f;
    viewport.MaxZ = 1.0f;

    m_pDevice->SetViewport(&viewport);

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     InitMatrix
//
// Description:
//
//     Initialize the given matrix with the given values.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Matrix to initialize
//
//     float _11 to _44         - Initialization values
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
                float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44) 
{
    if (pd3dm) {

        pd3dm->_11 = _11;
        pd3dm->_12 = _12;
        pd3dm->_13 = _13;
        pd3dm->_14 = _14;
        pd3dm->_21 = _21;
        pd3dm->_22 = _22;
        pd3dm->_23 = _23;
        pd3dm->_24 = _24;
        pd3dm->_31 = _31;
        pd3dm->_32 = _32;
        pd3dm->_33 = _33;
        pd3dm->_34 = _34;
        pd3dm->_41 = _41;
        pd3dm->_42 = _42;
        pd3dm->_43 = _43;
        pd3dm->_44 = _44;
    }
}

//******************************************************************************
//
// Function:
//
//     SetView
//
// Description:
//
//     Align the given view matrix along the given direction and up vectors with
//     the position vector as the origin.
//
// Arguments:
//
//     LPD3DXMATRIX pd3dm       - View matrix to initialize
//
//     LPD3DXVECTOR3 pvPos      - View origin
//
//     LPD3DXVECTOR3 pvAt       - View interest vector
//
//     LPD3DXVECTOR3 pvUp       - View up vector
//
// Return Value:
//
//     Initialized view matrix.
//
//******************************************************************************
void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, LPD3DXVECTOR3 pvAt, 
                                                      LPD3DXVECTOR3 pvUp) 
{
    D3DXVECTOR3  d, u, r;

    if (pd3dm && pvPos && pvAt && pvUp && !(*pvPos == *pvAt) 
                                 && !(*pvUp == D3DXVECTOR3(0.0f, 0.0f, 0.0f))) {

        D3DXVec3Normalize(&d, &(*pvAt - *pvPos));
        u = *pvUp;

        // Project the up vector into the plane of the direction vector
        D3DXVec3Normalize(&u, &(u - (d * D3DXVec3Dot(&u, &d))));

        // Get the cross product
        D3DXVec3Cross(&r, &u, &d);

        // Initialize the view transform
        InitMatrix(pd3dm,
            r.x, u.x, d.x, 0.0f,
            r.y, u.y, d.y, 0.0f,
            r.z, u.z, d.z, 0.0f,
            -(pvPos->x * r.x + pvPos->y * r.y + pvPos->z * r.z), 
            -(pvPos->x * u.x + pvPos->y * u.y + pvPos->z * u.z), 
            -(pvPos->x * d.x + pvPos->y * d.y + pvPos->z * d.z), 
            1.0f
        );
    }
}

//******************************************************************************
//
// Function:
//
//     SetPerspectiveProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fFieldOfView, float fAspect) {

    float fTanHalfFOV = (float)tan((double)fFieldOfView / 2.0);
    float fFar = fBack / (fBack - fFront);

    InitMatrix(pd3dm,
        1.0f, 0.0f,           0.0f,                         0.0f,
        0.0f, 1.0f / fAspect, 0.0f,                         0.0f,
        0.0f, 0.0f,           fTanHalfFOV * fFar,           fTanHalfFOV,
        0.0f, 0.0f,           -fFront * fTanHalfFOV * fFar, 0.0f
    );
}

//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
    TCHAR* szBuffer = new TCHAR[2304];
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }

    va_start(vl, szFormat);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

    delete [] szBuffer;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\rtmplate\test.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#ifndef UNDER_XBOX
#include <windows.h>
#else
#include <xtl.h>
#endif // UNDER_XBOX
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <d3dx8.h>
#include "util.h"
#include "dtypes.h"
#include "test.h"

//******************************************************************************
// WinMain
//******************************************************************************

#ifndef UNDER_XBOX
#define RETURN(x)   return x
#else
#define RETURN(x)   return
#endif // UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     WinMain
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     HINSTANCE hInstance      - Application instance handle
//
//     HINSTANCE hPrevInstance  - Previous instance of the application (always
//                                NULL for Win32 applications)
//
//     LPSTR szCmdLine          - Pointer to a string specifying the command
//                                line used in launching the application
//                                (excluding the program name)
//
//     int nCmdShow             - State specifying how the window is to be 
//                                displayed on creation
//
// Return Value:
//
//     0 on success, -1 on failure.
//
//******************************************************************************
#ifndef UNDER_XBOX
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR szCmdLine, int nCmdShow) 
#else
void __cdecl main()
#endif // UNDER_XBOX
{
    CReproTest*     pRTest;
    int             ret = 0;

    // Seed the pseudo-random number generator
    srand(GetTickCount());

    // Create a heap for the application
    if (!CreateHeap()) {
        RETURN(0);
    }

    // Create the display
    pRTest = new CReproTest();
    if (!pRTest) {
        ReleaseHeap();
        RETURN(0);
    }

    // Initialize the display
#ifndef UNDER_XBOX
    if (!pRTest->Create(hInstance)) {
#else
    if (!pRTest->Create(NULL)) {
#endif // UNDER_XBOX
        DebugString(TEXT("CDisplay::Create failed"));
        delete pRTest;
        ReleaseHeap();
        RETURN(0);
    }

    // Render the 3D scene
    pRTest->Run();

    // Clean up
    delete pRTest;
    ReleaseHeap();

    RETURN(ret);
}

//******************************************************************************
CReproTest::CReproTest() {

    m_hWnd = NULL;
    m_pd3d = NULL;
    m_pDevice = NULL;
    m_pd3dr = NULL;
}

//******************************************************************************
CReproTest::~CReproTest() {

    if (m_pd3dr) {
        m_pd3dr->Release();
        m_pd3dr = NULL;
    }

    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }

    if (m_pd3d) {
        m_pd3d->Release();
        m_pd3d = NULL;
    }

#ifndef UNDER_XBOX
    // Unregister the window class
    UnregisterClass(TEXT("Direct3D Repro Test"), m_hInstance);
#endif // !UNDER_XBOX
}

//******************************************************************************
BOOL CReproTest::Create(HINSTANCE hInstance) {

    D3DPRESENT_PARAMETERS   d3dpp;
    LVERTEX                 plrVertices[3];
    LPBYTE                  pData;
    HRESULT                 hr;
#ifndef UNDER_XBOX
    WNDCLASS                wc;
    MSG                     msg;
#endif // !UNDER_XBOX

    m_hInstance = hInstance;

#ifndef UNDER_XBOX

    // Register the window class
    memset(&wc, 0, sizeof(WNDCLASS));
    wc.style            = 0;
    wc.lpfnWndProc      = WndProc;
    wc.cbClsExtra       = 0;
    wc.cbWndExtra       = 0;
    wc.hInstance        = m_hInstance;
    wc.hIcon            = NULL;
    wc.hbrBackground    = NULL;
    wc.hCursor          = LoadCursor(NULL, IDC_ARROW);
    wc.lpszMenuName     = NULL;
    wc.lpszClassName    = TEXT("Direct3D Repro Test");

    if (!RegisterClass(&wc)) {
        DebugString(TEXT("RegisterClass failed"));
		return FALSE;
    }

    // Create the main application window
    m_hWnd = CreateWindowEx(0, TEXT("Direct3D Repro Test"), 
                            TEXT("Direct3D Repro Test"), 
                            WS_OVERLAPPEDWINDOW | WS_VISIBLE, 0, 0,
                            GetSystemMetrics(SM_CXSCREEN), 
                            GetSystemMetrics(SM_CYSCREEN),
                            NULL, NULL, m_hInstance, NULL);

    if (!m_hWnd) {
        DebugString(TEXT("CreateWindowEx failed"));
		return FALSE;
    }

    UpdateWindow(m_hWnd);

    // Pump any messages
    while(PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

#endif

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pd3d) {
        DebugString(TEXT("Direct3DCreate8 failed"));
    }

    // Initialize the presentation parameters
    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_A8R8G8B8;
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_D24S8;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_ONE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = m_hWnd;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = TRUE;

    // Create the device
    hr = m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, m_hWnd, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice);
    if (ResultFailed(hr, TEXT("IDirect3D8::CreateDevice failed"))) {
        return FALSE;
    }

    plrVertices[0] = LVERTEX(D3DXVECTOR3(-10.0f, -10.0f, 0.0f), RGBA_MAKE(255, 0, 0, 255), 0, 0.0f, 0.0f);
    plrVertices[1] = LVERTEX(D3DXVECTOR3( 0.0f,  10.0f, 0.0f), RGBA_MAKE(0, 0, 255, 255), 0, 0.0f, 0.0f);
    plrVertices[2] = LVERTEX(D3DXVECTOR3( 10.0f, -10.0f, 0.0f), RGBA_MAKE(0, 255, 0, 255), 0, 0.0f, 0.0f);

    hr = m_pDevice->CreateVertexBuffer(3 * sizeof(LVERTEX), 0, FVF_LVERTEX, D3DPOOL_DEFAULT, &m_pd3dr);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        return FALSE;
    }

    hr = m_pd3dr->Lock(0, 3 * sizeof(LVERTEX), &pData, 0);
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"))) {
        return FALSE;
    }

    memcpy(pData, plrVertices, 3 * sizeof(LVERTEX));

    hr = m_pd3dr->Unlock();
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"))) {
        return FALSE;
    }

    return InitDeviceState();
}

//******************************************************************************
BOOL CReproTest::Run() {

#ifndef UNDER_XBOX
    MSG      msg;
#endif // !UNDER_XBOX
    HRESULT  hr;

    do {

#ifndef UNDER_XBOX
        if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
        else if (msg.message != WM_QUIT) {

            hr = m_pDevice->TestCooperativeLevel();
            if (FAILED(hr)) {
                return FALSE;
            }

#endif // !UNDER_XBOX

            // Clear the rendering target
            m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, RGB_MAKE(0, 0, 0), 1.0f, 0);

            // Begin the scene
            m_pDevice->BeginScene();

            // Disable lighting
            m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

            // Use a fixed function shader
            m_pDevice->SetVertexShader(FVF_LVERTEX);

            m_pDevice->SetStreamSource(0, m_pd3dr, sizeof(LVERTEX));

            // Draw a triangle
            m_pDevice->DrawPrimitive(D3DPT_TRIANGLELIST, 0, 1);
//            m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 1, plrVertices, sizeof(LVERTEX));

            // End the scene
            m_pDevice->EndScene();

            // Update the screen
            m_pDevice->Present(NULL, NULL, NULL, NULL);

#ifndef UNDER_XBOX
        }
    } while (msg.message != WM_QUIT);
#else
    } while (TRUE);
#endif

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::InitDeviceState() {

    D3DXMATRIX mTransform;
    UINT       i;
    HRESULT    hr;

    // Initialize the viewport
    if (!SetViewport(640, 480)) {
        DebugString(TEXT("SetViewport failed"));
    }

    // Initialize the view matrix
    SetView(&mTransform, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
            &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

    hr = m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Initialize the projection matrix
    SetPerspectiveProjection(&mTransform, 0.1f, 1000.0f, 
            M_PI / 4.0f, 480.0f / 640.0f);

    hr = m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Set ambient lighting
    hr = m_pDevice->SetRenderState(D3DRS_AMBIENT, 0x20202020);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the texture filters
    for (i = 0; i < 2; i++) {
        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }
    }

    // Set blend modes
    hr = m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    hr = m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Modulate color and alpha texture stages
    hr = m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    // Set the alpha comparison function
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAFUNC, (DWORD)D3DCMP_GREATEREQUAL);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the alpha reference value to opaque
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAREF, 0xFF);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Turn on specular highlights
    hr = m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Enable dithering
    hr = m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Disable per-vertex color
    hr = m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::SetViewport(DWORD dwWidth, DWORD dwHeight) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    // Set a viewport for the device
    viewport.X = 0;
    viewport.Y = 0;
    viewport.Width = dwWidth;
    viewport.Height = dwHeight;
    viewport.MinZ = 0.0f;
    viewport.MaxZ = 1.0f;

    hr = m_pDevice->SetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetViewport"))) {
        return FALSE;
    }

    return TRUE;
}

#ifndef UNDER_XBOX

//******************************************************************************
// WndProc
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Window procedure to process messages for the main application window
//
// Arguments:
//
//     HWND hWnd                - Application window
//
//     UINT message             - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     0 if the message was handled, the return of DefWindowProc otherwise.
//
//******************************************************************************
LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    switch (uMsg) {

        case WM_SETCURSOR:
            SetCursor(NULL);
            return TRUE;

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    SendMessage(hWnd, WM_CLOSE, 0, 0);
                    return 0;
            }
            break;

        case WM_CLOSE:
            DestroyWindow(hWnd);
            return 0;

        case WM_DESTROY:
            PostQuitMessage(0);
            return 0;
    }

    return DefWindowProc(hWnd, uMsg, wParam, lParam);
}

#endif // UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     InitMatrix
//
// Description:
//
//     Initialize the given matrix with the given values.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Matrix to initialize
//
//     float _11 to _44         - Initialization values
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
                float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44) 
{
    if (pd3dm) {

        pd3dm->_11 = _11;
        pd3dm->_12 = _12;
        pd3dm->_13 = _13;
        pd3dm->_14 = _14;
        pd3dm->_21 = _21;
        pd3dm->_22 = _22;
        pd3dm->_23 = _23;
        pd3dm->_24 = _24;
        pd3dm->_31 = _31;
        pd3dm->_32 = _32;
        pd3dm->_33 = _33;
        pd3dm->_34 = _34;
        pd3dm->_41 = _41;
        pd3dm->_42 = _42;
        pd3dm->_43 = _43;
        pd3dm->_44 = _44;
    }
}

//******************************************************************************
//
// Function:
//
//     SetView
//
// Description:
//
//     Align the given view matrix along the given direction and up vectors with
//     the position vector as the origin.
//
// Arguments:
//
//     LPD3DXMATRIX pd3dm       - View matrix to initialize
//
//     LPD3DXVECTOR3 pvPos      - View origin
//
//     LPD3DXVECTOR3 pvAt       - View interest vector
//
//     LPD3DXVECTOR3 pvUp       - View up vector
//
// Return Value:
//
//     Initialized view matrix.
//
//******************************************************************************
void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, LPD3DXVECTOR3 pvAt, 
                                                      LPD3DXVECTOR3 pvUp) 
{
    D3DXVECTOR3  d, u, r;

    if (pd3dm && pvPos && pvAt && pvUp && !(*pvPos == *pvAt) 
                                 && !(*pvUp == D3DXVECTOR3(0.0f, 0.0f, 0.0f))) {

        D3DXVec3Normalize(&d, &(*pvAt - *pvPos));
        u = *pvUp;

        // Project the up vector into the plane of the direction vector
        D3DXVec3Normalize(&u, &(u - (d * D3DXVec3Dot(&u, &d))));

        // Get the cross product
        D3DXVec3Cross(&r, &u, &d);

        // Initialize the view transform
        InitMatrix(pd3dm,
            r.x, u.x, d.x, 0.0f,
            r.y, u.y, d.y, 0.0f,
            r.z, u.z, d.z, 0.0f,
            -(pvPos->x * r.x + pvPos->y * r.y + pvPos->z * r.z), 
            -(pvPos->x * u.x + pvPos->y * u.y + pvPos->z * u.z), 
            -(pvPos->x * d.x + pvPos->y * d.y + pvPos->z * d.z), 
            1.0f
        );
    }
}

//******************************************************************************
//
// Function:
//
//     SetPerspectiveProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fFieldOfView, float fAspect) {

    float fTanHalfFOV = (float)tan((double)fFieldOfView / 2.0);
    float fFar = fBack / (fBack - fFront);

    InitMatrix(pd3dm,
        1.0f, 0.0f,           0.0f,                         0.0f,
        0.0f, 1.0f / fAspect, 0.0f,                         0.0f,
        0.0f, 0.0f,           fTanHalfFOV * fFar,           fTanHalfFOV,
        0.0f, 0.0f,           -fFront * fTanHalfFOV * fFar, 0.0f
    );
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\rtmplate\test.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.h

Author:

    Matt Bronder

Description:

    Direct3D repro test functions.

*******************************************************************************/

#ifndef __TEST_H__
#define __TEST_H__

//******************************************************************************
class CReproTest {

protected:

    HINSTANCE                       m_hInstance;
    HWND                            m_hWnd;

    LPDIRECT3D8                     m_pd3d;
    LPDIRECT3DDEVICE8               m_pDevice;

    LPDIRECT3DVERTEXBUFFER8         m_pd3dr;

public:

                                    CReproTest();
                                    ~CReproTest();

    virtual BOOL                    Create(HINSTANCE hInstance);
    virtual BOOL                    Run();

protected:

    virtual BOOL                    InitDeviceState();
    virtual BOOL                    SetViewport(DWORD dwWidth, DWORD dwHeight);
};

//******************************************************************************
LRESULT CALLBACK    WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

void                InitMatrix(D3DMATRIX* pd3dm,
                        float _11, float _12, float _13, float _14,
                        float _21, float _22, float _23, float _24,
                        float _31, float _32, float _33, float _34,
                        float _41, float _42, float _43, float _44);

void                SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, 
                        LPD3DXVECTOR3 pvAt, LPD3DXVECTOR3 pvUp);

void                SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, 
                        float fBack, float fFieldOfView, float fAspect);

#endif //__TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\hang\test.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.h

Description:

    Test functions.

*******************************************************************************/

#ifndef __TEST_H__
#define __TEST_H__

#define FVF_MVERTEX        (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX2)

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _MVERTEX {

    D3DXVECTOR3 vPosition;
    D3DXVECTOR3 vNormal;
    float       u0, v0;
    float       u1, v1;

    _MVERTEX() {};
    _MVERTEX(const D3DXVECTOR3& v, const D3DXVECTOR3& n, float _u0, float _v0,
             float _u1, float _v1);

} MVERTEX, *PMVERTEX;

//******************************************************************************
class CTest {

protected:

    LPDIRECT3D8                     m_pd3d;
    LPDIRECT3DDEVICE8               m_pDevice;

    LPDIRECT3DVERTEXBUFFER8         m_pd3dr;

    D3DPRESENT_PARAMETERS           m_d3dpp;

    D3DLIGHT8                       m_light;
    D3DMATERIAL8                    m_material;

    MVERTEX                         m_prVertices[4];
    LPDIRECT3DTEXTURE8              m_pd3dt1;
    LPDIRECT3DTEXTURE8              m_pd3dt2;
    D3DXMATRIX                      m_mTexture0;
    D3DXMATRIX                      m_mTexture1;

public:

                                    CTest();
                                    ~CTest();

    virtual BOOL                    Create();
    virtual BOOL                    StartGraphics();
    virtual void                    StopGraphics();
    virtual BOOL                    Run();
};

//******************************************************************************
void DebugString(LPCTSTR szFormat, ...);
BOOL ResultFailed(HRESULT hr, LPCTSTR sz);

#endif //__TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\CubeMap.cpp ===
#define COUNTOF(x) (sizeof(x) / sizeof(x[0]))
#define TheSize 65536*3*5*7

//-----------------------------------------------------------------------------
// File: CubeMap.cpp
//
// Desc: Sample code showing how to do environment cube-mapping.
//
// Hist: 11.01.00 - New for November XDK release
//       12.15.00 - Changes for December XDK release
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include <XBApp.h>
#include <XBFont.h>
#include <XBHelp.h>
#include <XBMesh.h>
#include <XBUtil.h>
#include <XBResource.h>
#include <xgraphics.h>

// The following header file is generated from "Resource.rdf" file using the
// Bundler tool. In addition to the header, the tool outputs a binary file
// (Resource.xpr) which contains compiled (i.e. bundled) resources and is
// loaded at runtime using the CXBPackedResource class.
#include "Resource.h"


BOOL gLightingEnabled = TRUE;

//-----------------------------------------------------------------------------
// ASCII names for the resources used by the app
//-----------------------------------------------------------------------------
XBRESOURCE g_ResourceNames[] = 
{
    { "LobbyXP.bmp",    resource_LobbyXP_OFFSET },
    { "LobbyXN.bmp",    resource_LobbyXN_OFFSET },
    { "LobbyYP.bmp",    resource_LobbyYP_OFFSET },
    { "LobbyYN.bmp",    resource_LobbyYN_OFFSET },
    { "LobbyZP.bmp",    resource_LobbyZP_OFFSET },
    { "LobbyZN.bmp",    resource_LobbyZN_OFFSET },
    { "BiHull.bmp",     resource_BiHull_OFFSET },
    { "Wings.bmp",      resource_Wings_OFFSET },
    { NULL, 0 },
};


   

//-----------------------------------------------------------------------------
// Callouts for labelling the gamepad on the help screen
//-----------------------------------------------------------------------------
XBHELP_CALLOUT g_HelpCallouts[] = 
{
    { XBHELP_LEFTSTICK,    XBHELP_PLACEMENT_2, L"Rotate\nscene" },
    { XBHELP_START_BUTTON, XBHELP_PLACEMENT_1, L"Pause" },
    { XBHELP_BACK_BUTTON,  XBHELP_PLACEMENT_1, L"Display\nhelp" },
    { XBHELP_X_BUTTON,  XBHELP_PLACEMENT_1, L"Pitch++" },
    { XBHELP_Y_BUTTON,  XBHELP_PLACEMENT_1, L"Pitch--" },
    { XBHELP_A_BUTTON,  XBHELP_PLACEMENT_1, L"Flags++" },
    { XBHELP_B_BUTTON,  XBHELP_PLACEMENT_1, L"Flags--" },
    { XBHELP_BLACK_BUTTON,  XBHELP_PLACEMENT_1, L"Tex Src/Copy" },
	{ XBHELP_LEFT_BUTTON, XBHELP_PLACEMENT_1, L"Dest Flags++" },
	{ XBHELP_RIGHT_BUTTON, XBHELP_PLACEMENT_1, L"Dest Flags--" },
	{ XBHELP_DPAD, XBHELP_PLACEMENT_1, L"Dest Pitch+-" },
};

#define NUM_HELP_CALLOUTS COUNTOF(g_HelpCallouts)




// CUBEMAP_RESOLUTION indicates how big to make the cubemap texture.
#define CUBEMAP_RESOLUTION 256

int gPitches[] = {
	D3DTILE_PITCH_0200,
	D3DTILE_PITCH_0400,
	D3DTILE_PITCH_0600,
	D3DTILE_PITCH_0800,
	D3DTILE_PITCH_0A00,
	D3DTILE_PITCH_0C00,
	D3DTILE_PITCH_0E00,
	D3DTILE_PITCH_1000,
	D3DTILE_PITCH_1400,
	D3DTILE_PITCH_1800,
	D3DTILE_PITCH_1C00,
	D3DTILE_PITCH_2800,
	D3DTILE_PITCH_3000,
	D3DTILE_PITCH_3800,
	D3DTILE_PITCH_5000,
	D3DTILE_PITCH_7000,
};
int gPitchCount = 0;
int gPitchCount2 = 0;




//-----------------------------------------------------------------------------
// Name: class CXBoxSample
// Desc: Application class. The base class provides just about all the
//       functionality we want, so we're just supplying stubs to interface with
//       the non-C++ functions of the app.
//-----------------------------------------------------------------------------
class CXBoxSample : public CXBApplication
{
    CXBPackedResource m_xprResource;      // Packed resources for the app
    CXBFont           m_Font;             // Font class
    CXBHelp           m_Help;             // Help class
    int            m_bUseCopyRects;  //
    BOOL              m_bDrawHelp;        // Whether to draw help

    CXBMesh       m_ShinyTeapot;       // A teapot (made shiny with the envmap)
    CXBMesh       m_SkyBox;            // A skybox of a lobby
    CXBMesh       m_Object;            // An object to fly around the scene
    D3DXMATRIX    m_matObject;          // Matrix to position object

    LPDIRECT3DCUBETEXTURE8 m_pCubeMap;  // The cubemap, and access to its surfaces
    LPDIRECT3DCUBETEXTURE8 m_pCubeMap2;  // The cubemap, and access to its surfaces
    LPDIRECT3DSURFACE8     m_pCubeMapFaces[6];
    LPDIRECT3DSURFACE8     m_pCubeMapFaces2[6];

    D3DXMATRIX    m_matIdentity;        // Transform matrices
    D3DXMATRIX    m_matView;
    D3DXMATRIX    m_matProj;

protected:
    BOOL          m_bRenderTeapot;      // To toggle the teapot (so it doesn't render
	int   m_TileType;
	int   m_TileType2;
                                        // its own reflection)
    HRESULT RenderSceneIntoCubeMap();   // Functions to render the scene
    HRESULT RenderScene();

public:
    HRESULT Initialize();
    HRESULT FrameMove();
    HRESULT Render();

    CXBoxSample();
};




//-----------------------------------------------------------------------------
// Name: main()
// Desc: Entry point to the program.
//-----------------------------------------------------------------------------
VOID __cdecl main()
{
    CXBoxSample xbApp;
    if( FAILED( xbApp.Create() ) )
        return;
    xbApp.Run();
}




//-----------------------------------------------------------------------------
// Name: CXBoxSample()
// Desc: Application constructor. Sets attributes for the app.
//-----------------------------------------------------------------------------
CXBoxSample::CXBoxSample()
            :CXBApplication()
{
    m_bDrawHelp         = FALSE;
    m_pCubeMap          = NULL;
    m_pCubeMap2          = NULL;
	m_TileType= 0;
	m_TileType2= 0;
    m_bUseCopyRects=0;
    m_d3dpp.FullScreen_PresentationInterval = D3DPRESENT_INTERVAL_TWO;
}




//-----------------------------------------------------------------------------
// Name: Initialize()
// Desc: Initialize scene objects.
//-----------------------------------------------------------------------------
HRESULT CXBoxSample::Initialize()
{

    // Create the font
    if( FAILED( m_Font.Create( m_pd3dDevice, "Font.xpr" ) ) )
        return XBAPPERR_MEDIANOTFOUND;

    // Create the help
    if( FAILED( m_Help.Create( m_pd3dDevice, "Gamepad.xpr" ) ) )
        return XBAPPERR_MEDIANOTFOUND;

    // Create the resources
    if( FAILED( m_xprResource.Create( m_pd3dDevice, "Resource.xpr", 
                                      resource_NUM_RESOURCES, g_ResourceNames ) ) )
        return XBAPPERR_MEDIANOTFOUND;

    // Load the file objects
    if( FAILED( m_SkyBox.Create( m_pd3dDevice, "Models\\Lobby.xbg", &m_xprResource ) ) )
        return XBAPPERR_MEDIANOTFOUND;
    if( FAILED( m_ShinyTeapot.Create( m_pd3dDevice, "Models\\Teapot.xbg", &m_xprResource ) ) )
        return XBAPPERR_MEDIANOTFOUND;
    if( FAILED( m_Object.Create( m_pd3dDevice, "Models\\Airplane.xbg", &m_xprResource ) ) )
        return XBAPPERR_MEDIANOTFOUND;


DWORD mem;


	D3DTILE tile;
	m_pCubeMap = new IDirect3DCubeTexture8;
    // Create the cubemap, with a format that matches the backbuffer, since
    // we'll be rendering into it
    mem = (DWORD)D3D_AllocContiguousMemory(tile.Size = TheSize,
        D3DTILE_ALIGNMENT);
	m_pCubeMap->Common = 0x0840001;
	m_pCubeMap->Format = 0x881072e;
	m_pCubeMap->Data = mem;
	m_pCubeMap->Size = 0;
	m_pCubeMap->Register(0);
	D3D_CopyContiguousMemoryToVideo((void *)mem);


	D3DTILE lastReservedTile; // tiles 0 and 1 are reserved
	D3DDevice_GetTile( 1, &lastReservedTile );
	tile.ZStartTag = D3DTILE_ZENDTAG( &lastReservedTile );
	tile.Flags = D3DTILE_FLAGS_ZBUFFER |D3DTILE_FLAGS_ZCOMPRESS | D3DTILE_FLAGS_Z32BITS;
	tile.Pitch = gPitches[gPitchCount];
	tile.pMemory = (void *)mem/* m_pCubeMap->Data*/;
	tile.Size = TheSize;
	tile.ZOffset = 0;
    D3DDevice_SetTile(2, &tile);


//*
    m_pCubeMap2 = new IDirect3DCubeTexture8;
    mem = (DWORD)D3D_AllocContiguousMemory(TheSize, D3DTILE_ALIGNMENT);
    m_pCubeMap2->Common = 0x0840001;
    m_pCubeMap2->Format = 0x881072e;
    m_pCubeMap2->Data = mem;
    m_pCubeMap2->Size = 0;
    m_pCubeMap2->Register(0);
	D3D_CopyContiguousMemoryToVideo((void *)mem);
/*/
    if( FAILED( m_pd3dDevice->CreateCubeTexture( CUBEMAP_RESOLUTION, 1, 
                                         D3DUSAGE_RENDERTARGET, D3DFMT_X8R8G8B8, 
                                         D3DPOOL_DEFAULT, &m_pCubeMap2 ) ) )

        return E_FAIL;
/**/

	D3DDevice_GetTile( 2, &lastReservedTile );
	tile.ZStartTag = 0;
	tile.Flags = D3DTILE_FLAGS_ZBUFFER;
	tile.Pitch = gPitches[gPitchCount2];
	tile.pMemory = (void *)mem/* m_pCubeMap->Data*/;
	tile.Size = TheSize;
	tile.ZOffset = 0;
    D3DDevice_SetTile(3, &tile);

    // Get access the the cube map's surfaces (so we can render into them)
    for( DWORD i=0; i<6; i++ )
        m_pCubeMap->GetCubeMapSurface( (D3DCUBEMAP_FACES)i, 0, &m_pCubeMapFaces[i] );
    for( DWORD i=0; i<6; i++ )
        m_pCubeMap2->GetCubeMapSurface( (D3DCUBEMAP_FACES)i, 0, &m_pCubeMapFaces2[i] );

    // Set default render states
    m_pd3dDevice->SetRenderState( D3DRS_ZENABLE,  TRUE );
    m_pd3dDevice->SetRenderState( D3DRS_AMBIENT,  0x00aaaaaa );
    m_pd3dDevice->SetRenderState( D3DRS_LIGHTING, gLightingEnabled );

    // Set the transform matrices
    D3DXMatrixIdentity( &m_matIdentity );
    D3DXMatrixPerspectiveFovLH( &m_matProj, D3DX_PI/4, 4.0f/3.0f, 0.5f, 100.0f );
    m_pd3dDevice->SetTransform( D3DTS_WORLD,      &m_matIdentity );
    m_pd3dDevice->SetTransform( D3DTS_PROJECTION, &m_matProj );

    // Setup a material
    D3DMATERIAL8 mtrl;
    XBUtil_InitMaterial( mtrl, 1.0f, 1.0f, 1.0f, 1.0f );
    m_pd3dDevice->SetMaterial( &mtrl );

    // Set up a light
    D3DLIGHT8 light;
    XBUtil_InitLight( light, D3DLIGHT_DIRECTIONAL, 0.0f, 0.0f, 1.0f );
    light.Ambient.r = 0.3f;
    light.Ambient.g = 0.3f;
    light.Ambient.b = 0.3f;

    m_pd3dDevice->SetLight( 0, &light );
    m_pd3dDevice->LightEnable( 0, TRUE );

    m_pd3dDevice->SetRenderState( D3DRS_LIGHTING, gLightingEnabled );

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: FrameMove()
// Desc: Called once per frame, the call is the entry point for animating
//       the scene.
//-----------------------------------------------------------------------------
HRESULT CXBoxSample::FrameMove()
{
    // Toggle help
    if( m_DefaultGamepad.wPressedButtons & XINPUT_GAMEPAD_BACK )
        m_bDrawHelp = !m_bDrawHelp;

    if( m_DefaultGamepad.wPressedButtons & XINPUT_GAMEPAD_LEFT_THUMB )
        gLightingEnabled = !gLightingEnabled;

	bool bTileChanged = false;
	bool bTileChanged2 = false;

    if( m_DefaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_BLACK] )
	{
        m_bUseCopyRects = (m_bUseCopyRects + 1) % 3;
	}
	if( m_DefaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_A] )
	{
		m_TileType = (m_TileType+1)&3;
		bTileChanged = true;
	}
	if( m_DefaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_B] )
	{
		m_TileType = (m_TileType-1)&3;
		bTileChanged = true;
	}
	if( m_DefaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_X] )
	{
		gPitchCount = (gPitchCount+1) % COUNTOF(gPitches);
		bTileChanged = true;
	}
	if( m_DefaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_Y] )
	{
		gPitchCount = (gPitchCount+COUNTOF(gPitches)-1) % COUNTOF(gPitches);
		bTileChanged = true;
	}

	if( m_DefaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_LEFT_TRIGGER] )
	{
		m_TileType2 = (m_TileType2+1)&3;
		bTileChanged2 = true;
	}
	if( m_DefaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_RIGHT_TRIGGER] )
	{
		m_TileType2 = (m_TileType2-1)&3;
		bTileChanged2 = true;
	}
    if( m_DefaultGamepad.wPressedButtons & XINPUT_GAMEPAD_DPAD_RIGHT )
	{
		gPitchCount2 = (gPitchCount2+1) % COUNTOF(gPitches);
		bTileChanged2 = true;
	}
    if( m_DefaultGamepad.wPressedButtons & XINPUT_GAMEPAD_DPAD_LEFT )
	{
		gPitchCount2 = (gPitchCount2+COUNTOF(gPitches)-1) % COUNTOF(gPitches);
		bTileChanged2 = true;
	}

//	bTileChanged = true;
	if(bTileChanged) 
	{
		D3DTILE tile;
		D3DTILE lastReservedTile; // tiles 0 and 1 are reserved
		D3DDevice_GetTile( 1, &lastReservedTile );
		D3DDevice_GetTile( 2, &tile );
        D3DDevice_SetTile( 2, NULL) ;
		tile.ZStartTag = D3DTILE_ZENDTAG( &lastReservedTile );

		switch (m_TileType) {
		case 0:
			tile.pMemory = (void*)(0x80000000|m_pCubeMap->Data);
			tile.ZStartTag = D3DTILE_ZENDTAG( &lastReservedTile );
			tile.Pitch = gPitches[gPitchCount];
			tile.Size = TheSize;
			tile.ZOffset = 0;
			tile.Flags = D3DTILE_FLAGS_ZBUFFER;
			break;
		case 1:
			tile.pMemory = (void*)(0x80000000|m_pCubeMap->Data);
			tile.ZStartTag = D3DTILE_ZENDTAG( &lastReservedTile );
			tile.Pitch = gPitches[gPitchCount];
			tile.Size = TheSize;
			tile.ZOffset = 0;
			tile.Flags = D3DTILE_FLAGS_ZBUFFER |D3DTILE_FLAGS_ZCOMPRESS | D3DTILE_FLAGS_Z32BITS;
			break;
		case 2:
			tile.pMemory = (void*)(0x80000000|m_pCubeMap->Data);
			tile.ZStartTag = D3DTILE_ZENDTAG( &lastReservedTile );
			tile.Pitch = gPitches[gPitchCount];
			tile.Size = TheSize;
			tile.ZOffset = 0;
			tile.Flags = 0;
			break;
		case 3:
			tile.pMemory = 0;
			break;
		}
        if(tile.pMemory) D3DDevice_SetTile( 2, &tile);
//        D3DDevice_BlockUntilIdle();
	}

	if(bTileChanged2) 
	{
		D3DTILE tile;
		D3DTILE lastReservedTile; // tiles 0 and 1 are reserved
		D3DDevice_GetTile( 2, &lastReservedTile );
		D3DDevice_GetTile( 3, &tile );
//            D3DDevice_BlockUntilIdle();
        D3DDevice_SetTile( 3, NULL) ;
		tile.ZStartTag = D3DTILE_ZENDTAG( &lastReservedTile );

		switch (m_TileType2) {
		case 0:
			tile.pMemory = (void*)(0x80000000|m_pCubeMap2->Data);
			tile.ZStartTag = D3DTILE_ZENDTAG( &lastReservedTile );
			tile.Pitch = gPitches[gPitchCount2];
			tile.Size = TheSize;
			tile.ZOffset = 0;
			tile.Flags = D3DTILE_FLAGS_ZBUFFER;
			break;
		case 1:
/*			tile.pMemory = (void*)(0x80000000|m_pCubeMap2->Data);
			tile.ZStartTag = D3DTILE_ZENDTAG( &lastReservedTile );
			tile.Pitch = gPitches[gPitchCount];
			tile.Size = TheSize;
			tile.ZOffset = 0;
			tile.Flags = D3DTILE_FLAGS_ZBUFFER |D3DTILE_FLAGS_ZCOMPRESS | D3DTILE_FLAGS_Z32BITS;
			break;
*/
		case 2:
			tile.pMemory = (void*)(0x80000000|m_pCubeMap2->Data);
			tile.ZStartTag = D3DTILE_ZENDTAG( &lastReservedTile );
			tile.Pitch = gPitches[gPitchCount2];
			tile.Size = TheSize;
			tile.ZOffset = 0;
			tile.Flags = 0;
			break;
		case 3:
			tile.pMemory = 0;
			break;
		}
        if(tile.pMemory) D3DDevice_SetTile( 3, &tile);
//        D3DDevice_BlockUntilIdle();
	}	

    // Animate the object
    D3DXMATRIX  mat1;
    D3DXMatrixScaling( &m_matObject, 0.2f, 0.2f, 0.2f );
    D3DXMatrixTranslation( &mat1, 0.0f, 2.0f, 0.0f );
    D3DXMatrixMultiply( &m_matObject, &m_matObject, &mat1 );
    D3DXMatrixRotationX( &mat1, -2.9f*m_fAppTime );
    D3DXMatrixMultiply( &m_matObject, &m_matObject, &mat1 );
    D3DXMatrixRotationY( &mat1, 1.055f*m_fAppTime );
    D3DXMatrixMultiply( &m_matObject, &m_matObject, &mat1 );

    // Rotate the camera with the gamepad
    static D3DXMATRIX matTrackBall( 1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1 );
    D3DXMATRIX matRotate, matTrans;
    FLOAT fXRotate = m_DefaultGamepad.fX1*m_fElapsedTime*D3DX_PI*0.5f;
    FLOAT fYRotate = m_DefaultGamepad.fY1*m_fElapsedTime*D3DX_PI*0.5f;
    D3DXMatrixRotationYawPitchRoll( &matRotate, fXRotate, fYRotate, 0.0f );
    D3DXMatrixMultiply( &matTrackBall, &matTrackBall, &matRotate );
    D3DXMatrixTranslation( &matTrans, 0.0f, 0.0f, 5.0f );
    D3DXMatrixMultiply( &m_matView, &matTrackBall, &matTrans );
    m_pd3dDevice->SetTransform( D3DTS_VIEW, &m_matView );

    // Render the scene into the surfaces of the cubemap. Note: don' render the
    // teapot, since it won't reflect into itself
    m_bRenderTeapot = FALSE;
    RenderSceneIntoCubeMap();
    m_bRenderTeapot = TRUE;

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: RenderSceneIntoCubeMap()
// Desc: Renders the scene to each of the 6 faces of the cube map
//-----------------------------------------------------------------------------
HRESULT CXBoxSample::RenderSceneIntoCubeMap()
{
    // Save the transforms that will be overwritten
    D3DXMATRIX matViewSave = m_matView;
    D3DXMATRIX matProjSave = m_matProj;

    // Get the current view matrix rotations, to concat it with the view matrix
    // for rendering into the cubemap's surfaces
    D3DXMATRIX matViewDir = m_matView;
    matViewDir._41 = 0.0f; matViewDir._42 = 0.0f; matViewDir._43 = 0.0f;

    // Set the projection matrix for a field of view of 90 degrees
    D3DXMatrixPerspectiveFovLH( &m_matProj, D3DX_PI/2, 1.0f, 0.5f, 100.0f );

    // Get the current backbuffer and zbuffer
    LPDIRECT3DSURFACE8 pBackBuffer, pZBuffer;
    m_pd3dDevice->GetRenderTarget( &pBackBuffer );
    m_pd3dDevice->GetDepthStencilSurface( &pZBuffer );

    // Render to the six faces of the cube map
    for( DWORD i=0; i<6; i++ )
    {
        // Set the i'th cubemap surface as the rendertarget
        m_pd3dDevice->SetRenderTarget( m_pCubeMapFaces[i], pZBuffer );

        // Set the viewport to be the correct size
        D3DVIEWPORT8 vpCubeMap = { 0, 0, CUBEMAP_RESOLUTION, CUBEMAP_RESOLUTION, 0.0f, 1.0f };
        m_pd3dDevice->SetViewport( &vpCubeMap );

        // Set the view transform for this cubemap surface
        m_matView = XBUtil_GetCubeMapViewMatrix( (D3DCUBEMAP_FACES)i );
        D3DXMatrixMultiply( &m_matView, &matViewDir, &m_matView );

        // Render the scene
        m_pd3dDevice->BeginScene();
        RenderScene();
        m_pd3dDevice->EndScene();
    }

    // Change the rendertarget back to the main backbuffer
    m_pd3dDevice->SetRenderTarget( pBackBuffer, pZBuffer );
    pBackBuffer->Release();
    pZBuffer->Release();

    D3DLOCKED_RECT lr[2][6];
    for( DWORD i=0; i<6; i++ )
        m_pCubeMapFaces2[i]->LockRect(&lr[1][i],0,D3DLOCK_TILED);
    for( DWORD i=0; i<6; i++ )
        m_pCubeMapFaces[i]->LockRect(&lr[0][i],0,D3DLOCK_TILED);
    if(m_bUseCopyRects == 1) {
        for( DWORD i=0; i<6; i++ ) {
            D3DDevice_CopyRects(m_pCubeMapFaces[i],0,0,m_pCubeMapFaces2[i],0);
        }
    } else if (m_bUseCopyRects == 2) {
        for( DWORD i=0; i<6; i++ ) {
            memcpy(lr[1][i].pBits, lr[0][i].pBits, 256*256*4);
        }
    }
    for( DWORD i=0; i<6; i++ )
        m_pCubeMapFaces2[i]->UnlockRect();
    for( DWORD i=0; i<6; i++ )
        m_pCubeMapFaces[i]->UnlockRect();

    // Restore the viewport to the backbuffer's dimensions
    D3DVIEWPORT8 vpBackBuffer = { 0, 0, 640, 480, 0.0f, 1.0f };
    m_pd3dDevice->SetViewport( &vpBackBuffer );

    // Restore the modified transforms
    m_matView = matViewSave;
    m_matProj = matProjSave;

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: RenderScene()
// Desc: Renders the scene.
//-----------------------------------------------------------------------------
HRESULT CXBoxSample::RenderScene()
{
    // Clear the viewport
    m_pd3dDevice->Clear( 0L, NULL, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER, 
                         0x000000ff, 1.0f, 0L );





    // Set default render states
    m_pd3dDevice->SetRenderState( D3DRS_ZENABLE,  TRUE );
    m_pd3dDevice->SetRenderState( D3DRS_AMBIENT,  0x00aaaaaa );
    m_pd3dDevice->SetRenderState( D3DRS_LIGHTING, gLightingEnabled );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_TEXTURE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP,   D3DTOP_SELECTARG1 );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_LINEAR );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ADDRESSU,  D3DTADDRESS_CLAMP );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ADDRESSV,  D3DTADDRESS_CLAMP );

    // Render the Skybox
    {
        // Disable zbuffer
        m_pd3dDevice->SetRenderState( D3DRS_ZENABLE, FALSE );

        // Center view matrix, and set FOV to 90 degrees
        D3DXMATRIX matView, matProj;
        matView = m_matView; matView._41 = matView._42 = matView._43 = 0.0f;
        D3DXMatrixPerspectiveFovLH( &matProj, D3DX_PI/2, 1.0f, 0.5f, 10000.0f );
        m_pd3dDevice->SetTransform( D3DTS_WORLD,      &m_matIdentity );
        m_pd3dDevice->SetTransform( D3DTS_VIEW,       &matView );
        m_pd3dDevice->SetTransform( D3DTS_PROJECTION, &matProj );

        // Render the skybox
        m_SkyBox.Render( m_pd3dDevice );

        // Restore the render states
        m_pd3dDevice->SetTransform( D3DTS_VIEW,       &m_matView );
        m_pd3dDevice->SetTransform( D3DTS_PROJECTION, &m_matProj );
        m_pd3dDevice->SetRenderState( D3DRS_ZENABLE,  TRUE );
    }

    // Render the Object
    {
        m_pd3dDevice->SetTransform( D3DTS_WORLD, &m_matObject );
        m_Object.Render( m_pd3dDevice );
    }

    // Render the object with the environment-mapped body
    if( m_bRenderTeapot )
    {
        // Turn on texture-coord generation for cubemapping
        m_pd3dDevice->SetTextureStageState( 0, D3DTSS_TEXCOORDINDEX, D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR );

//test for bug5370 (if lighting affects teapot, try removing this line)
        m_pd3dDevice->SetTextureStageState( 1, D3DTSS_TEXCOORDINDEX, D3DTSS_TCI_PASSTHRU );

        m_pd3dDevice->SetTextureStageState( 0, D3DTSS_TEXTURETRANSFORMFLAGS, D3DTTFF_COUNT3 );
        m_pd3dDevice->SetTexture( 0, m_bUseCopyRects?m_pCubeMap2:m_pCubeMap );

        m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP,   D3DTOP_SELECTARG1 );
        m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_TEXTURE );
        m_pd3dDevice->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_DISABLE );

        // Render the object with the environment-mapped body
        m_pd3dDevice->SetTransform( D3DTS_WORLD, &m_matIdentity );
        m_ShinyTeapot.Render( m_pd3dDevice, XBMESH_NOMATERIALS|XBMESH_NOTEXTURES );

        // Restore the render states
        m_pd3dDevice->SetTextureStageState( 0, D3DTSS_TEXCOORDINDEX, D3DTSS_TCI_PASSTHRU );
        m_pd3dDevice->SetTextureStageState( 0, D3DTSS_TEXTURETRANSFORMFLAGS, D3DTTFF_DISABLE );
    }

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: Render()
// Desc: Called once per frame, this call renders the scene.
//-----------------------------------------------------------------------------
HRESULT CXBoxSample::Render()
{
    // Begin the scene
    m_pd3dDevice->BeginScene();

    // Render the scene
    RenderScene();

    // Show title, frame rate, and help
    if( m_bDrawHelp )
        m_Help.Render( &m_Font, g_HelpCallouts, NUM_HELP_CALLOUTS );
    else
    {
        m_Font.Begin();
        m_Font.DrawText(  64, 50, 0xffffffff, L"CubeMap" );
        m_Font.DrawText( 450, 50, 0xffffff00, m_strFrameRate );

		WCHAR blah[60];
		WCHAR *tiletitles[4] = {
			L"zbuffer",
			L"all flags",
			L"no flags",
			L"no tile"};
		swprintf(blah, L"Tile: %s", tiletitles[m_TileType]);
		m_Font.DrawText(  64, 70, 0xffff00ff, blah);
		swprintf(blah, L"pitch: %d", gPitches[gPitchCount]);
		m_Font.DrawText(  64, 90, 0xffff0000, blah);
        WCHAR *CopyTypes[] = {
            L"FromTiled",
            L"CopyRects",
            L"CpuCopy"};
        swprintf(blah, L"Copy:%s", CopyTypes[m_bUseCopyRects]);
        m_Font.DrawText(  64, 110, 0xff0000ff, blah);

		swprintf(blah, L"Dest: %s", tiletitles[m_TileType2==1?2:m_TileType2]);
		m_Font.DrawText(  64, 130, 0xff00ffff, blah);
		swprintf(blah, L"dpitch: %d", gPitches[gPitchCount2]);
		m_Font.DrawText(  64, 150, 0xffffff00, blah);

        swprintf(blah, L"Lights: %s", gLightingEnabled?L"TRUE":L"FALSE");
        m_Font.DrawText(  64, 170, 0xffffffff, blah);

        m_Font.End();

    }

    // End the scene
    m_pd3dDevice->EndScene();

    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\xbhelp.cpp ===
//-----------------------------------------------------------------------------
// File: XBHelp.cpp
//
// Desc: Support class for rendering a help image, which is an image of an Xbox
//       gamepad, with labelled callouts to each of the gamepad's controls.
//
// Hist: 11.01.00 - New for November XDK release
//       12.15.00 - Changes for December XDK release
//       03.06.01 - Changes for April XDK release
//       04.15.01 - Using packed resources for May XDK
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include <xtl.h>
#include <xgraphics.h>
#include "XBHelp.h"
#include "XBResource.h"




//-----------------------------------------------------------------------------
// Constants for rendering callouts on the help screen. The order of these
// callouts is in agreement with the enum structure in XBHelp.h
//-----------------------------------------------------------------------------
static D3DXVECTOR2 g_vHelpCallouts[] = 
{
    // Order:
    // Button position (start of line),
    // End of line for placement one, Start of text for placement one
    // End of line for placement two, Start of text for placement two

    // Left thumbstick
    D3DXVECTOR2( 255.0f, 149.0f ),
    D3DXVECTOR2( 141.0f,  99.0f ), D3DXVECTOR2( 108.0f,  77.0f ),
    D3DXVECTOR2( 145.0f, 124.0f ), D3DXVECTOR2( 108.0f,  77.0f ),
    
    // Right thumbstick 
    D3DXVECTOR2( 370.0f, 191.0f ),
    D3DXVECTOR2( 370.0f, 363.0f ), D3DXVECTOR2( 352.0f, 364.0f ),
    D3DXVECTOR2( 370.0f, 363.0f ), D3DXVECTOR2( 352.0f, 364.0f ),

    // D-pad
    D3DXVECTOR2( 254.0f, 194.0f ),
    D3DXVECTOR2( 117.0f, 223.0f ), D3DXVECTOR2(  78.0f, 222.0f ),
    D3DXVECTOR2( 117.0f, 223.0f ), D3DXVECTOR2(  78.0f, 222.0f ),
    
    // Back button
    D3DXVECTOR2( 288.0f, 221.0f ),
    D3DXVECTOR2( 185.0f, 284.0f ), D3DXVECTOR2( 145.0f, 282.0f ),
    D3DXVECTOR2( 185.0f, 284.0f ), D3DXVECTOR2( 145.0f, 282.0f ),

    // Start button
    D3DXVECTOR2( 322.0f, 223.0f ),
    D3DXVECTOR2( 262.0f, 343.0f ), D3DXVECTOR2( 217.0f, 340.0f ),
    D3DXVECTOR2( 262.0f, 343.0f ), D3DXVECTOR2( 217.0f, 340.0f ),

    // X button
    D3DXVECTOR2( 394.0f, 176.0f ),
    D3DXVECTOR2( 295.0f, 124.0f ), D3DXVECTOR2( 268.0f, 101.0f ),
    D3DXVECTOR2( 300.0f, 149.0f ), D3DXVECTOR2( 268.0f, 101.0f ),

    // Y button
    D3DXVECTOR2( 405.0f, 164.0f ),
    D3DXVECTOR2( 416.0f,  99.0f ), D3DXVECTOR2( 404.0f, 76.0f ),
    D3DXVECTOR2( 416.0f,  99.0f ), D3DXVECTOR2( 404.0f, 51.0f ),

    // A button
    D3DXVECTOR2( 411.0f, 189.0f ),
    D3DXVECTOR2( 431.0f, 298.0f ), D3DXVECTOR2( 424.0f, 298.0f ),
    D3DXVECTOR2( 431.0f, 298.0f ), D3DXVECTOR2( 424.0f, 298.0f ),

    // B button
    D3DXVECTOR2( 422.0f, 175.0f ),
    D3DXVECTOR2( 443.0f, 244.0f ), D3DXVECTOR2( 435.0f, 243.0f ),
    D3DXVECTOR2( 443.0f, 244.0f ), D3DXVECTOR2( 435.0f, 243.0f ),

    // White button
    D3DXVECTOR2( 424.0f, 158.0f ),
    D3DXVECTOR2( 458.0f, 124.0f ), D3DXVECTOR2( 444.0f, 102.0f ),
    D3DXVECTOR2( 448.0f, 148.0f ), D3DXVECTOR2( 444.0f, 102.0f ),
    
    // Black button
    D3DXVECTOR2( 443.0f, 170.0f ),
    D3DXVECTOR2( 456.0f, 183.0f ), D3DXVECTOR2( 442.0f, 182.0f ),
    D3DXVECTOR2( 456.0f, 183.0f ), D3DXVECTOR2( 442.0f, 182.0f ),

    // Left trigger button
    D3DXVECTOR2( 230.0f, 173.0f ),
    D3DXVECTOR2( 164.0f, 160.0f ), D3DXVECTOR2( 66.0f, 150.0f ),
    D3DXVECTOR2( 164.0f, 160.0f ), D3DXVECTOR2( 66.0f, 150.0f ),

    // Right trigger button
    D3DXVECTOR2( 462.0f, 172.0f ),
    D3DXVECTOR2( 480.0f, 170.0f ), D3DXVECTOR2( 482.0f, 158.0f ),
    D3DXVECTOR2( 480.0f, 170.0f ), D3DXVECTOR2( 482.0f, 158.0f ),

    // Misc callout
    D3DXVECTOR2(  64.0f, 380.0f ),
    D3DXVECTOR2(  64.0f, 380.0f ), D3DXVECTOR2( 64.0f, 405.0f ),
    D3DXVECTOR2(  64.0f, 380.0f ), D3DXVECTOR2( 64.0f, 380.0f ),
};




//-----------------------------------------------------------------------------
// Name: CXBHelp()
// Desc: Help class constructor
//-----------------------------------------------------------------------------
CXBHelp::CXBHelp()
{
    m_pd3dDevice      = NULL;
    m_pGamepadTexture = NULL;
    m_pVB             = NULL;
}




//-----------------------------------------------------------------------------
// Name: ~CXBHelp()
// Desc: Help class destructor
//-----------------------------------------------------------------------------
CXBHelp::~CXBHelp()
{
    Destroy();
}




//-----------------------------------------------------------------------------
// Name: Create()
// Desc: Creates the help class' internal objects
//-----------------------------------------------------------------------------
HRESULT CXBHelp::Create( LPDIRECT3DDEVICE8 pd3dDevice, CHAR* strResource )
{
    // Keep track of the device
    m_pd3dDevice = pd3dDevice;

    // Create the gamepad resource
    if( FAILED( m_xprResource.Create( pd3dDevice, strResource, 1 ) ) )
        return E_FAIL;

    // Store access to the 640x480, linear gamepad texture
    m_pGamepadTexture = m_xprResource.GetTexture( 0UL );

    // Create a vertex buffer for rendering the help screen
    m_pd3dDevice->CreateVertexBuffer( 4*6*sizeof(FLOAT), D3DUSAGE_WRITEONLY, 
                                      0L, D3DPOOL_DEFAULT, &m_pVB );
    struct VERTEX { D3DXVECTOR4 p; FLOAT tu, tv; };
    VERTEX* v;
    m_pVB->Lock( 0, 0, (BYTE**)&v, 0L );
    v[0].p = D3DXVECTOR4(   0,   0, 0, 0 ); v[0].tu =   0; v[0].tv =   0;
    v[1].p = D3DXVECTOR4( 640,   0, 0, 0 ); v[1].tu = 639; v[1].tv =   0;
    v[2].p = D3DXVECTOR4( 640, 480, 0, 0 ); v[2].tu = 639; v[2].tv = 479;
    v[3].p = D3DXVECTOR4(   0, 480, 0, 0 ); v[3].tu =   0; v[3].tv = 479;
    m_pVB->Unlock();

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: Destroy()
// Desc: Destroys the help class' internal objects/
//-----------------------------------------------------------------------------
HRESULT CXBHelp::Destroy()
{
    SAFE_RELEASE( m_pVB );
    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: Render()
// Desc: Renders the gamepad help image, and it's labelled callouts.
//-----------------------------------------------------------------------------
HRESULT CXBHelp::Render( CXBFont* pFont, XBHELP_CALLOUT* tags, 
                         DWORD dwNumCallouts )
{
    // Set state to render the gamepad image
    m_pd3dDevice->SetTexture( 0, m_pGamepadTexture );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP,   D3DTOP_MODULATE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_TEXTURE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG2, D3DTA_DIFFUSE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP,   D3DTOP_MODULATE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE );
    m_pd3dDevice->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_DISABLE );
    m_pd3dDevice->SetTextureStageState( 1, D3DTSS_ALPHAOP,   D3DTOP_DISABLE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ADDRESSU,  D3DTADDRESS_CLAMP );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ADDRESSV,  D3DTADDRESS_CLAMP );
    m_pd3dDevice->SetRenderState( D3DRS_ZENABLE,   FALSE );
    m_pd3dDevice->SetRenderState( D3DRS_FOGENABLE, FALSE );
    m_pd3dDevice->SetRenderState( D3DRS_FILLMODE,  D3DFILL_SOLID );
    m_pd3dDevice->SetRenderState( D3DRS_CULLMODE,  D3DCULL_CCW );
    m_pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    m_pd3dDevice->SetRenderState( D3DRS_SRCBLEND,  D3DBLEND_SRCALPHA );
    m_pd3dDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA );
    m_pd3dDevice->SetVertexShader( D3DFVF_XYZRHW|D3DFVF_TEX1 );

    // Render the gamepad image
    m_pd3dDevice->SetStreamSource( 0, m_pVB, 6*sizeof(FLOAT) );
    m_pd3dDevice->DrawPrimitive( D3DPT_QUADLIST, 0, 1 );

    // Set state to draw the lines
    m_pd3dDevice->SetTexture( 0, NULL );
    m_pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, FALSE );
    m_pd3dDevice->SetVertexShader( D3DFVF_XYZRHW );

    for( DWORD i=0; i<dwNumCallouts; i++ )
    {
        // Determine the line start and end positions
        WORD wLineStartIndex = tags[i].wControl;
        WORD wLineEndIndex   = tags[i].wControl + 2*(tags[i].wPlacement-1)+1;
        FLOAT line1x = g_vHelpCallouts[wLineStartIndex].x;
        FLOAT line1y = g_vHelpCallouts[wLineStartIndex].y;
        FLOAT line2x = g_vHelpCallouts[wLineEndIndex].x;
        FLOAT line2y = g_vHelpCallouts[wLineEndIndex].y;

        // Draw the callout line
        D3DXVECTOR4 v[2];
        v[0] = D3DXVECTOR4( line1x, line1y, 0.0f, 0.0f );
        v[1] = D3DXVECTOR4( line2x, line2y, 0.0f, 0.0f );
        
        m_pd3dDevice->DrawPrimitiveUP( D3DPT_LINELIST, 1, v, sizeof(D3DXVECTOR4) );
    }

    // Prepare font for rendering
    pFont->Begin();

    // Render the callouts
    for( i=0; i<dwNumCallouts; i++ )
    {
        // Determine the text position
        WORD wTextPosIndex = tags[i].wControl + 2*(tags[i].wPlacement-1)+2;
        FLOAT textx = g_vHelpCallouts[wTextPosIndex].x;
        FLOAT texty = g_vHelpCallouts[wTextPosIndex].y;

        // Draw the callout text
        pFont->DrawText( textx, texty, 0xffffffff, tags[i].strText );
    }

    // Flush the text drawing
    pFont->End();

    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\Resource.h ===
// Automatically generated by the bundler tool from resource.rdf

#define resource_NUM_RESOURCES 8UL

#define resource_LobbyXP_OFFSET 0UL
#define resource_LobbyXN_OFFSET 20UL
#define resource_LobbyYP_OFFSET 40UL
#define resource_LobbyYN_OFFSET 60UL
#define resource_LobbyZP_OFFSET 80UL
#define resource_LobbyZN_OFFSET 100UL
#define resource_BiHull_OFFSET 120UL
#define resource_Wings_OFFSET 140UL
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\xbapp.cpp ===
//-----------------------------------------------------------------------------
// File: XBApp.cpp
//
// Desc: Application class for the XBox samples.
//
// Hist: 11.01.00 - New for November XDK release
//       12.15.00 - Changes for December XDK release
//       12.19.01 - Changes for March XDK release
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include "XBApp.h"




//-----------------------------------------------------------------------------
// Global access to common members
//-----------------------------------------------------------------------------
CXBApplication*    g_pXBApp     = NULL;
LPDIRECT3DDEVICE8  g_pd3dDevice = NULL;




//-----------------------------------------------------------------------------
// Name: CXBApplication()
// Desc: Constructor
//-----------------------------------------------------------------------------
CXBApplication::CXBApplication()
{
    // Initialize member variables
    g_pXBApp          = this;

    // Direct3D variables
    m_pD3D            = NULL;
    m_pd3dDevice      = NULL;
    m_pDepthBuffer    = NULL;
    m_pBackBuffer     = NULL;

    // Variables to perform app timing
    m_bPaused         = FALSE;
    m_fTime           = 0.0f;
    m_fElapsedTime    = 0.0f;
    m_fAppTime        = 0.0f;
    m_fElapsedAppTime = 0.0f;
    m_fFPS            = 0.0f;
    m_strFrameRate[0] = L'\0';

    // Set up the presentation parameters for a double-bufferd, 640x480,
    // 32-bit display using depth-stencil. Override these parameters in
    // your derived class as your app requires.
    ZeroMemory( &m_d3dpp, sizeof(m_d3dpp) );
    m_d3dpp.BackBufferWidth        = 640;
    m_d3dpp.BackBufferHeight       = 480;
    m_d3dpp.BackBufferFormat       = D3DFMT_A8R8G8B8;
    m_d3dpp.BackBufferCount        = 1;
    m_d3dpp.EnableAutoDepthStencil = TRUE;
    m_d3dpp.AutoDepthStencilFormat = D3DFMT_D24S8;
    m_d3dpp.SwapEffect             = D3DSWAPEFFECT_DISCARD;

    // Specify number and type of input devices this app will be using. By
    // default, you can use 0 and NULL, which triggers XInputDevices() to
    // prealloc the default number and types of devices. To use chat or
    // other devices, override these variables in your derived class.
    m_dwNumInputDeviceTypes = 0;
    m_InputDeviceTypes      = NULL;
}




//-----------------------------------------------------------------------------
// Name: Create()
// Desc: Create the app
//-----------------------------------------------------------------------------
HRESULT CXBApplication::Create()
{
    HRESULT hr;

    // Create the Direct3D object
    OutputDebugString( _T("XBApp: Creating Direct3D...\n") );
    if( NULL == ( m_pD3D = Direct3DCreate8(D3D_SDK_VERSION) ) )
    {
        OutputDebugString( _T("XBApp: Unable to create Direct3D!\n") );
        return E_FAIL;
    }

    // Create the device
    OutputDebugString( _T("XBApp: Creating the D3D device...\n") );
    if( FAILED( hr = m_pD3D->CreateDevice( 0, D3DDEVTYPE_HAL, NULL, 
                                           D3DCREATE_HARDWARE_VERTEXPROCESSING, 
                                           &m_d3dpp, &m_pd3dDevice ) ) )
    {
        OutputDebugString( _T("XBApp: Could not create D3D device!\n") );
        return hr;
    }

    // Allow global access to the device
    g_pd3dDevice = m_pd3dDevice;

    // Store pointers to the depth and back buffers
    m_pd3dDevice->GetDepthStencilSurface( &m_pDepthBuffer );
    m_pd3dDevice->GetBackBuffer( 0, 0, &m_pBackBuffer );

    // Clear the backbuffer
    m_pd3dDevice->Clear( 0L, NULL, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER|D3DCLEAR_STENCIL,
                         0x00000000, 1.0f, 0L );
    m_pd3dDevice->Present( NULL, NULL, NULL, NULL );

    // Initialize core peripheral port support. Note: If these parameters
    // are 0 and NULL, respectively, then the default number and types of 
    // controllers will be initialized.
    XInitDevices( m_dwNumInputDeviceTypes, m_InputDeviceTypes );

    // Create the gamepad devices
    OutputDebugString( _T("XBApp: Creating gamepad devices...\n") );
    if( FAILED( hr = XBInput_CreateGamepads( &m_Gamepad ) ) )
    {
        OutputDebugString( _T("XBApp: Call to CreateGamepads() failed!\n") );
        return hr;
    }

    // Initialize the app's device-dependent objects
    OutputDebugString( _T("XBApp: Initializing the app...\n") );
    if( FAILED( hr = Initialize() ) )
    {
        OutputDebugString( _T("XBApp: Call to Initialize() failed!\n") );
        return hr;
    }

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: Destroy()
// Desc: Cleanup objects
//-----------------------------------------------------------------------------
VOID CXBApplication::Destroy()
{
    // Perform app-specific cleanup
    Cleanup();

    // Release display objects
    SAFE_RELEASE( m_pd3dDevice );
    SAFE_RELEASE( m_pD3D );
}




//-----------------------------------------------------------------------------
// Name: Run()
// Desc: 
//-----------------------------------------------------------------------------
INT CXBApplication::Run()
{
    OutputDebugString( _T("XBApp: Running the application...\n") );

    // Get the frequency of the timer
    LARGE_INTEGER qwTicksPerSec;
    QueryPerformanceFrequency( &qwTicksPerSec );
    FLOAT fSecsPerTick = 1.0f / (FLOAT)qwTicksPerSec.QuadPart;

    // Save the start time
    LARGE_INTEGER qwTime, qwLastTime, qwElapsedTime;
    QueryPerformanceCounter( &qwTime );
    qwLastTime.QuadPart = qwTime.QuadPart;

    LARGE_INTEGER qwAppTime, qwElapsedAppTime;
    qwAppTime.QuadPart        = 0;
    qwElapsedTime.QuadPart    = 0;
    qwElapsedAppTime.QuadPart = 0;

    // Run the game loop, animating and rendering frames
    while( TRUE )
    {
        //-----------------------------------------
        // Handle input
        //-----------------------------------------

        // Read the input for all connected gampads
        XBInput_GetInput( m_Gamepad );

        // Lump inputs of all connected gamepads into one common structure.
        // This is done so apps that need only one gamepad can function with
        // any gamepad.
        ZeroMemory( &m_DefaultGamepad, sizeof(m_DefaultGamepad) );
        for( DWORD i=0; i<4; i++ )
        {
            if( m_Gamepad[i].hDevice )
            {
                m_DefaultGamepad.sThumbLX += m_Gamepad[i].sThumbLX;
                m_DefaultGamepad.sThumbLY += m_Gamepad[i].sThumbLY;
                m_DefaultGamepad.sThumbRX += m_Gamepad[i].sThumbRX;
                m_DefaultGamepad.sThumbRY += m_Gamepad[i].sThumbRY;
                m_DefaultGamepad.fX1      += m_Gamepad[i].fX1;
                m_DefaultGamepad.fY1      += m_Gamepad[i].fY1;
                m_DefaultGamepad.fX2      += m_Gamepad[i].fX2;
                m_DefaultGamepad.fY2      += m_Gamepad[i].fY2;
                m_DefaultGamepad.wButtons        |= m_Gamepad[i].wButtons;
                m_DefaultGamepad.wPressedButtons |= m_Gamepad[i].wPressedButtons;
                m_DefaultGamepad.wLastButtons    |= m_Gamepad[i].wLastButtons;

                for( DWORD b=0; b<8; b++ )
                {
                    m_DefaultGamepad.bAnalogButtons[b]        |= m_Gamepad[i].bAnalogButtons[b];
                    m_DefaultGamepad.bPressedAnalogButtons[b] |= m_Gamepad[i].bPressedAnalogButtons[b];
                    m_DefaultGamepad.bLastAnalogButtons[b]    |= m_Gamepad[i].bLastAnalogButtons[b];
                }
            }
        }

        // Handle special input functions:
        // -  Both triggers and white button triggers a screen dump
        // -  Both triggers and black button triggers a reboot
        if( m_DefaultGamepad.bAnalogButtons[XINPUT_GAMEPAD_LEFT_TRIGGER] > 0 )
        {
            if( m_DefaultGamepad.bAnalogButtons[XINPUT_GAMEPAD_RIGHT_TRIGGER] > 0 )
            {
                // With white button, dump the backbuffer contents
                if( m_DefaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_WHITE] )
                    XGWriteSurfaceToFile( m_pBackBuffer, "D:\\BackBuffer.bmp" );

                // With black button, reboot to the Xbox Dashboard
                if( m_DefaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_BLACK] )
                    XLaunchNewImage( NULL, NULL );
            }
        }

        //-----------------------------------------
        // Perform app timing
        //-----------------------------------------

        // Check Start button
        if( m_DefaultGamepad.wPressedButtons & XINPUT_GAMEPAD_START )
            m_bPaused = !m_bPaused;

        // Get the current time (keep in LARGE_INTEGER format for precision)
        QueryPerformanceCounter( &qwTime );
        qwElapsedTime.QuadPart = qwTime.QuadPart - qwLastTime.QuadPart;
        qwLastTime.QuadPart    = qwTime.QuadPart;
        if( m_bPaused )
            qwElapsedAppTime.QuadPart = 0;
        else
            qwElapsedAppTime.QuadPart = qwElapsedTime.QuadPart;
        qwAppTime.QuadPart    += qwElapsedAppTime.QuadPart;

        // Store the current time values as floating point
        m_fTime           = fSecsPerTick * ((FLOAT)(qwTime.QuadPart));
        m_fElapsedTime    = fSecsPerTick * ((FLOAT)(qwElapsedTime.QuadPart));
        m_fAppTime        = fSecsPerTick * ((FLOAT)(qwAppTime.QuadPart));
        m_fElapsedAppTime = fSecsPerTick * ((FLOAT)(qwElapsedAppTime.QuadPart));

        // Compute the FPS (frames per second) once per second
        static FLOAT fLastTime = 0.0f;
        static DWORD dwFrames  = 0L;
        dwFrames++;

        if( m_fTime - fLastTime > 1.0f )
        {
            m_fFPS    = dwFrames / ( m_fTime - fLastTime );
            fLastTime = m_fTime;
            dwFrames  = 0L;
            swprintf( m_strFrameRate, L"%0.02f fps", m_fFPS );
        }

        //-----------------------------------------
        // Animate and render a frame
        //-----------------------------------------

        // Frame move the scene
        FrameMove();

        // Render the scene
        Render();

        // Finally, show the frame (swaps the backbuffer to the front)
        m_pd3dDevice->Present( NULL, NULL, NULL, NULL );
    }

    return 0;
}




//-----------------------------------------------------------------------------
// Name: RenderGradientBackground()
// Desc: Draws a gradient filled background
//-----------------------------------------------------------------------------
HRESULT CXBApplication::RenderGradientBackground( DWORD dwTopColor, 
                                                  DWORD dwBottomColor )
{
    // First time around, allocate a vertex buffer
    static LPDIRECT3DVERTEXBUFFER8 g_pVB  = NULL;
    if( g_pVB == NULL )
    {
        m_pd3dDevice->CreateVertexBuffer( 4*5*sizeof(FLOAT), D3DUSAGE_WRITEONLY, 
                                          0L, D3DPOOL_DEFAULT, &g_pVB );
        struct BACKGROUNDVERTEX { D3DXVECTOR4 p; D3DCOLOR color; };
        BACKGROUNDVERTEX* v;
        g_pVB->Lock( 0, 0, (BYTE**)&v, 0L );
        v[0].p = D3DXVECTOR4(   0,   0, 1.0f, 1.0f ); v[0].color = dwTopColor;
        v[1].p = D3DXVECTOR4( 640,   0, 1.0f, 1.0f ); v[1].color = dwTopColor;
        v[2].p = D3DXVECTOR4(   0, 480, 1.0f, 1.0f ); v[2].color = dwBottomColor;
        v[3].p = D3DXVECTOR4( 640, 480, 1.0f, 1.0f ); v[3].color = dwBottomColor;
        g_pVB->Unlock();
    }

    // Set states
    m_pd3dDevice->SetTexture( 0, NULL );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE );
    m_pd3dDevice->SetRenderState( D3DRS_ZENABLE, FALSE ); 
    m_pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, FALSE ); 
    m_pd3dDevice->SetVertexShader( D3DFVF_XYZRHW|D3DFVF_DIFFUSE );
    m_pd3dDevice->SetStreamSource( 0, g_pVB, 5*sizeof(FLOAT) );

    m_pd3dDevice->DrawPrimitive( D3DPT_TRIANGLESTRIP, 0, 2 );

    // Clear the zbuffer
    m_pd3dDevice->Clear( 0, NULL, D3DCLEAR_ZBUFFER|D3DCLEAR_STENCIL, 0x00000000, 1.0f, 0L );

    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\xbfont.h ===
//-----------------------------------------------------------------------------
// File: XBFont.h
//
// Desc: Texture-based font class. This class reads .abc font files that are
//       generated by the FontMaker tool. These .abc files are used to create
//       a texture with all the font's glyph, and also extract information on
//       the dimensions of each glyph.
//
//       Once created, this class is used to render text in a 3D scene with the
//       following function:
//          DrawText( fScreenY, fScreenSpaceY, dwTextColor, strText,
//                    dwJustificationFlags );
//
//       For performance, you can batch mulitple DrawText calls together
//       between Begin() and End() calls, as in the following example:
//          pFont->Begin();
//          pFont->DrawText( ... );
//          pFont->DrawText( ... );
//          pFont->DrawText( ... );
//          pFont->End();
//
//       The size (extent) of the text can be computed without rendering with
//       the following function:
//          GetTextExtent( strText, pfReturnedWidth, pfReturnedHeight,
//                         bComputeExtentUsingFirstLineOnly );
//
//       Finally, the font class can create a texture to hold rendered text,
//       which is useful for static text that must be rendered for many
//       frames, or can even be used within a 3D scene. (For instance, for a
//       player's name on a jersey.) Use the following function for this:
//          CreateTexture( strText, d3dTextureFormat );
//
//       See the XDK docs for more information.
//
// Hist: 11.01.00 - New for November XDK release
//       12.15.00 - Changes for December XDK release
//       02.18.01 - Changes for March XDK release
//       04.15.01 - Using packed resources for May XDK
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#ifndef XBFONT_H
#define XBFONT_H
#include "XBResource.h"
#include "XBUtil.h"




//-----------------------------------------------------------------------------
// Number of vertex buffers for rendering text. Having this number be greater
// than 1 can reduce potential stalling of the GPU.
//-----------------------------------------------------------------------------
#define NUM_FONT_BUFFERS 2



//-----------------------------------------------------------------------------
// Flags for the CXBFont::DrawText() function
//-----------------------------------------------------------------------------
#define XBFONT_LEFT     0x00000000
#define XBFONT_RIGHT    0x00000001
#define XBFONT_CENTER_X 0x00000002
#define XBFONT_CENTER_Y 0x00000004




//-----------------------------------------------------------------------------
// Custom vertex type for rendering text
//-----------------------------------------------------------------------------
struct XBFONTVERTEX 
{ 
    D3DXVECTOR4 p;
    DWORD       color;
    FLOAT       tu, tv; 
};

#define D3DFVF_XBFONTVERTEX (D3DFVF_XYZRHW|D3DFVF_DIFFUSE|D3DFVF_TEX1)




//-----------------------------------------------------------------------------
// Name: struct GLYPH_ATTR
// Desc: Structure to hold information about one glyph (font character image)
//-----------------------------------------------------------------------------
struct GLYPH_ATTR
{
    FLOAT left, top, right, bottom; // Texture coordinates for the image
    SHORT wOffset;                  // Pixel offset for glyph start
    SHORT wWidth;                   // Pixel width of the glyph
    SHORT wAdvance;                 // Pixels to advance after the glyph
};




//-----------------------------------------------------------------------------
// Name: class CXBFont
// Desc: Class to implement texture-based font rendering. A .tga image file of 
//       the pre-rendered font is used to create the texture. A .abc file
//       contains information for spacing the font characters (aka glyphs).
//-----------------------------------------------------------------------------
class CXBFont
{
public:
    // Font and texture dimensions
    DWORD         m_dwFontHeight;
    DWORD         m_dwTexWidth;
    DWORD         m_dwTexHeight;

    // Unicode ranges
    WCHAR         m_cLowChar;
    WCHAR         m_cHighChar;

    // Glyph data for the font
    DWORD         m_dwNumGlyphs;
    GLYPH_ATTR*   m_Glyphs;

    // D3D rendering objects
    CXBPackedResource       m_xprResource;
    LPDIRECT3DDEVICE8       m_pd3dDevice;
    LPDIRECT3DTEXTURE8      m_pTexture;
    LPDIRECT3DVERTEXBUFFER8 m_pVBs[NUM_FONT_BUFFERS];
    LPDIRECT3DVERTEXBUFFER8 m_pVB;
    DWORD                   m_dwCurrentBuffer;
    XBFONTVERTEX*           m_pVertices;
    DWORD                   m_dwNumQuads;
    DWORD                   m_dwNestedBeginCount;
    BOOL                    m_bTextureFromFile;

    // Internal call to trigger rendering of the vertex buffer
    HRESULT Render();

    // Access functions for debugging purposes
    LPDIRECT3DTEXTURE8 GetTexture() const    { return m_pTexture; }
    DWORD              GetFontHeight() const { return m_dwFontHeight; }

public:
    // Constructor/destructor
    CXBFont();
    ~CXBFont();

    // Functions to create and destroy the internal objects
    HRESULT Create( LPDIRECT3DDEVICE8 pd3dDevice, 
                    const CHAR* strFontResourceFileName );
    HRESULT Destroy();

    // Replaces invalid (outside the valid glyph range) characters in a string
    VOID    ReplaceInvalidChars( WCHAR* strUpdate, WCHAR cReplacement ) const;

    // Returns the dimensions of a text string
    HRESULT GetTextExtent( const WCHAR* strText, FLOAT* pWidth, 
                           FLOAT* pHeight, BOOL bFirstLineOnly=FALSE ) const;

    // Function to create a texture containing rendered text
    LPDIRECT3DTEXTURE8 CreateTexture( const WCHAR* strText, 
                                      D3DCOLOR dwBackgroundColor = 0x00000000,
                                      D3DCOLOR dwTextColor = 0xffffffff,
                                      D3DFORMAT d3dFormat = D3DFMT_LIN_A8R8G8B8 );

    // Public calls to render text. Callers can simply call DrawText(), but for
    // performance, they should batch multople calls together, bracketed by 
    // calls to Begin() and End().
    HRESULT Begin();
    HRESULT DrawText( FLOAT sx, FLOAT sy, DWORD dwColor, 
                      const WCHAR* strText, DWORD dwFlags=0L );
    HRESULT End();
};




#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\xbfont.cpp ===
//-----------------------------------------------------------------------------
// File: XBFont.cpp
//
// Desc: Texture-based font class. This class reads .abc font files that are
//       generated by the FontMaker tool. These .abc files are used to create
//       a texture with all the font's glyph, and also extract information on
//       the dimensions of each glyph.
//
//       Once created, this class is used to render text in a 3D scene with the
//       following function:
//          DrawText( fScreenY, fScreenSpaceY, dwTextColor, strText,
//                    dwJustificationFlags );
//
//       For performance, you can batch mulitple DrawText calls together
//       between Begin() and End() calls, as in the following example:
//          pFont->Begin();
//          pFont->DrawText( ... );
//          pFont->DrawText( ... );
//          pFont->DrawText( ... );
//          pFont->End();
//
//       The size (extent) of the text can be computed without rendering with
//       the following function:
//          GetTextExtent( strText, pfReturnedWidth, pfReturnedHeight,
//                         bComputeExtentUsingFirstLineOnly );
//
//       Finally, the font class can create a texture to hold rendered text,
//       which is useful for static text that must be rendered for many
//       frames, or can even be used within a 3D scene. (For instance, for a
//       player's name on a jersey.) Use the following function for this:
//          CreateTexture( strText, d3dTextureFormat );
//
//       See the XDK docs for more information.
//
// Hist: 11.01.00 - New for November XDK release
//       12.15.00 - Changes for December XDK release
//       02.18.01 - Changes for March XDK release
//       04.15.01 - Using packed resources for May XDK
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include <xtl.h>
#include <stdio.h>
#include "XBFont.h"




// Max size for the font class' vertex buffer
const DWORD XBFONT_MAX_VERTICES = 1024 * 4;

// Helper function to init a vertex
inline XBFONTVERTEX InitFontVertex( const D3DXVECTOR4& p, D3DCOLOR color,
                                    FLOAT tu, FLOAT tv )
{
    XBFONTVERTEX v;   
    v.p     = p;   
    v.color = color;   
    v.tu    = tu;   
    v.tv    = tv;
    return v;
}




//-----------------------------------------------------------------------------
// Name: CXBFont()
// Desc: Font class constructor.
//-----------------------------------------------------------------------------
CXBFont::CXBFont()
{
    m_pd3dDevice         = NULL;
    m_pTexture           = NULL;

    for( DWORD i=0; i<NUM_FONT_BUFFERS; i++ )
        m_pVBs[i] = NULL;
    m_pVB                = NULL;
    m_dwCurrentBuffer    = 0L;
    m_bTextureFromFile   = FALSE;

    m_pVertices          = NULL;
    m_dwNumQuads         = 0L;
    m_dwNestedBeginCount = 0L;

    m_dwFontHeight       = 36;
    m_dwTexWidth         = 64;
    m_dwTexHeight        = 64;

    m_cLowChar           = 0;
    m_cHighChar          = 0;

    m_dwNumGlyphs        = 0L;
    m_Glyphs             = NULL;
}




//-----------------------------------------------------------------------------
// Name: ~CXBFont()
// Desc: Font class destructor.
//-----------------------------------------------------------------------------
CXBFont::~CXBFont()
{
    Destroy();
}




//-----------------------------------------------------------------------------
// Name: Create()
// Desc: Create the font's internal objects (texture and array of glyph info)
//       using the image and information from two files.
//-----------------------------------------------------------------------------
HRESULT CXBFont::Create( LPDIRECT3DDEVICE8 pd3dDevice, 
                         const CHAR* strFontResourceFileName )
{
    HRESULT hr;

    // Store the device for use in member functions
    m_pd3dDevice = pd3dDevice;

    if( FAILED( m_xprResource.Create( m_pd3dDevice, strFontResourceFileName, 
                                      2 ) ) )
        return E_FAIL;

    m_pTexture = m_xprResource.GetTexture( 0UL );

    BYTE* pData = (BYTE*)m_xprResource.GetData( XBResource_SizeOf(m_pTexture) );
    DWORD dwResourceType = ((DWORD*)pData)[0];
    DWORD dwResourceSize = ((DWORD*)pData)[1];
    pData += 2*sizeof(DWORD);

    DWORD dwVersion = ((DWORD*)pData)[0];
    m_dwFontHeight  = ((DWORD*)pData)[1];
    m_dwTexWidth    = ((DWORD*)pData)[2];
    m_dwTexHeight   = ((DWORD*)pData)[3];
    DWORD dwBPP     = ((DWORD*)pData)[4];
    pData += 5*sizeof(DWORD);

    // Check version of file (to make sure it matches up with the FontMaker tool)
    if( dwVersion != 0x00000004 )
    {
        OutputDebugStringA( "XBFont: Incorrect version number on font file!\n" );
        return E_FAIL;
    }

    // Read the low and high char
    m_cLowChar  = ((WCHAR*)pData)[0];
    m_cHighChar = ((WCHAR*)pData)[1];
    pData += 2*sizeof(WCHAR);

    // Read the glyph attributes from the file
    m_Glyphs = (GLYPH_ATTR*)(pData+4);

    // Create vertex buffer for rendering text strings
    for( DWORD i=0; i<NUM_FONT_BUFFERS; i++ )
    {
        hr = pd3dDevice->CreateVertexBuffer( XBFONT_MAX_VERTICES*sizeof(XBFONTVERTEX),
                                             D3DUSAGE_WRITEONLY, 0L,
                                             D3DPOOL_DEFAULT, &m_pVBs[i] );
        if( FAILED(hr) )
            return hr;
    }

    // Assign a current vertex buffer
    m_dwCurrentBuffer = 0L;
    m_pVB = m_pVBs[m_dwCurrentBuffer];

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: Destroy()
// Desc: Destroys the font object
//-----------------------------------------------------------------------------
HRESULT CXBFont::Destroy()
{
    m_xprResource.Destroy();

    // Delete vertex buffers
    for( DWORD i=0; i<NUM_FONT_BUFFERS; i++ )
        SAFE_RELEASE( m_pVBs[i] );

    if( m_bTextureFromFile )
    {
        SAFE_RELEASE( m_pTexture );
        delete [] m_Glyphs;
    }

    m_pd3dDevice         = NULL;
    m_pTexture           = NULL;
    m_pVB                = NULL;
    m_dwCurrentBuffer    = 0L;
    m_bTextureFromFile   = FALSE;

    m_pVertices          = NULL;
    m_dwNumQuads         = 0L;
    m_dwNestedBeginCount = 0L;

    m_dwFontHeight       = 36;
    m_dwTexWidth         = 64;
    m_dwTexHeight        = 64;

    m_cLowChar           = 0;
    m_cHighChar          = 0;

    m_dwNumGlyphs        = 0L;
    m_Glyphs             = NULL;

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: GetTextExtent()
// Desc: Get the dimensions of a text string
//-----------------------------------------------------------------------------
HRESULT CXBFont::GetTextExtent( const WCHAR* strText, FLOAT* pWidth, 
                                FLOAT* pHeight, BOOL bFirstLineOnly ) const
{
    // Check parameters
    if( NULL==strText || NULL==pWidth || NULL==pHeight )
        return E_INVALIDARG;

    // Set default text extent in output parameters
    (*pWidth)   = 0.0f;
    (*pHeight)  = 0.0f;

    // Initialize counters that keep track of text extent
    FLOAT sx = 0.0f;
    FLOAT sy = (FLOAT)(m_dwFontHeight + 1);

    // Loop through each character and update text extent
    while( *strText )
    {
        WCHAR letter = *strText++;
        
        // Handle newline character
        if( letter == L'\n' )
        {
            if( bFirstLineOnly )
                return S_OK;
            sx  = 0.0f;
            sy += (FLOAT)(m_dwFontHeight + 1);
        }

        // Ignore unprintable characters
        if( letter<m_cLowChar || letter>m_cHighChar )
            continue;

        // Get text extent for this character's glyph
        GLYPH_ATTR* pGlyph = &m_Glyphs[letter - m_cLowChar];
        sx += pGlyph->wOffset;
        sx += pGlyph->wAdvance;

        // Store text extent of string in output parameters
        if( sx > (*pWidth) )   (*pWidth)  = sx;
        if( sy > (*pHeight) )  (*pHeight) = sy;
     }

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: Begin()
// Desc: Prepares the font vertex buffers for rendering.
//-----------------------------------------------------------------------------
HRESULT CXBFont::Begin()
{
    // Lock vertex buffer on the first call (allow nesting of begin/end calls)
    if( 0 == m_dwNestedBeginCount )
    {
        // Assign a current vertex buffer
        if( m_pVB->IsBusy() )
        {
            if( ++m_dwCurrentBuffer >= NUM_FONT_BUFFERS )
                m_dwCurrentBuffer = 0L;
            m_pVB = m_pVBs[m_dwCurrentBuffer];
        }

        // Lock the vertex buffer
        m_pVB->Lock( 0, 0, (BYTE**)&m_pVertices, 0L );
        m_dwNumQuads = 0;
    }

    // Keep track of the nested begin/end calls.
    m_dwNestedBeginCount++;

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: DrawText()
// Desc: Draws text as textured polygons
//-----------------------------------------------------------------------------
HRESULT CXBFont::DrawText( FLOAT fOriginX, FLOAT fOriginY, DWORD dwColor,
                           const WCHAR* strText, DWORD dwFlags )
{
    // Set up stuff (i.e. lock the vertex buffer) to prepare for drawing text
    Begin();

    // Set the starting screen position
    FLOAT sx = fOriginX;
    FLOAT sy = fOriginY;

    // If vertically centered, offset the starting sy value
    if( dwFlags & XBFONT_CENTER_Y )
    {
        FLOAT w, h;
        GetTextExtent( strText, &w, &h );
        sy = floorf( sy - h/2 );
    }

    // Set a flag so we can determine initial justification effects
    BOOL bStartingNewLine = TRUE;

    while( *strText )
    {
        // If starting text on a new line, determine justification effects
        if( bStartingNewLine )
        {
            if( dwFlags & (XBFONT_RIGHT|XBFONT_CENTER_X) )
            {
                // Get the extent of this line
                FLOAT w, h;
                GetTextExtent( strText, &w, &h, TRUE );

                // Offset this line's starting sx value
                if( dwFlags & XBFONT_RIGHT )
                    sx = floorf( fOriginX - w );
                if( dwFlags & XBFONT_CENTER_X )
                    sx = floorf( fOriginX - w/2 );
            }
            bStartingNewLine = FALSE;
        }

        // Get the current letter in the string
        WCHAR letter = *strText++;

        // Handle the newline character
        if( letter == L'\n' )
        {
            sx  = fOriginX;
            sy += m_dwFontHeight;
            bStartingNewLine = TRUE;
        }

        // Skip invalid characters
        if( letter<m_cLowChar || letter>m_cHighChar )
            continue;

        // Get the glyph for this character
        GLYPH_ATTR* pGlyph = &m_Glyphs[letter-m_cLowChar];

        // Setup the screen coordinates (note the 0.5f shift value which is to
        // align texel centers with pixel centers)
        sx += pGlyph->wOffset;
        FLOAT sx1 = sx - 0.5f;
        FLOAT sx2 = sx - 0.5f + ((FLOAT)pGlyph->wWidth + 1);
        FLOAT sy1 = sy - 0.5f;
        FLOAT sy2 = sy - 0.5f + ((FLOAT)m_dwFontHeight + 1);
        sx += pGlyph->wAdvance;

        // Setup the texture coordinates (note the fudge factor for converting
        // from integer texel values to floating point texture coords).
        FLOAT tx1 = ( pGlyph->left   * ( m_dwTexWidth-1) ) / m_dwTexWidth;
        FLOAT ty1 = ( pGlyph->top    * (m_dwTexHeight-1) ) / m_dwTexHeight;
        FLOAT tx2 = ( pGlyph->right  * ( m_dwTexWidth-1) ) / m_dwTexWidth;
        FLOAT ty2 = ( pGlyph->bottom * (m_dwTexHeight-1) ) / m_dwTexHeight;

        // Set up the vertices (1 quad = 2 triangles = 6 vertices)
        *m_pVertices++ = InitFontVertex( D3DXVECTOR4(sx1,sy2,0.0f,0.0f), dwColor, tx1, ty2 );
        *m_pVertices++ = InitFontVertex( D3DXVECTOR4(sx1,sy1,0.0f,0.0f), dwColor, tx1, ty1 );
        *m_pVertices++ = InitFontVertex( D3DXVECTOR4(sx2,sy1,0.0f,0.0f), dwColor, tx2, ty1 );
        *m_pVertices++ = InitFontVertex( D3DXVECTOR4(sx2,sy2,0.0f,0.0f), dwColor, tx2, ty2 );
        m_dwNumQuads++;

        // If the vertex buffer is full, render it. This will stall the GPU, so
        // we should sure that XBFONT_MAX_VERTICES is big enough.
        if( (m_dwNumQuads+1)*4 > XBFONT_MAX_VERTICES )
        {
            // Unlock, render, and relock the vertex buffer
            m_pVB->Unlock();
            Render();
            m_pVB->Lock( 0, 0, (BYTE**)&m_pVertices, 0L );
            m_dwNumQuads = 0L;
        }
    }

    // Call End() to complete the begin/end pair for drawing text
    End();

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: End()
// Desc: Called after Begin(), this function triggers the rendering of the
//       vertex buffer contents filled during calls to DrawText().
//-----------------------------------------------------------------------------
HRESULT CXBFont::End()
{
    // Keep track of nested calls to begin/end.
    if( 0L == m_dwNestedBeginCount )
        return E_FAIL;
    if( --m_dwNestedBeginCount > 0 )
        return S_OK;
    
    // Unlock the vertex buffer
    m_pVB->Unlock();

    // Render the contents of the vertex buffer
    if( m_dwNumQuads > 0 )
        Render();

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: Render()
// Desc: The internal call to actually render the vertices.
//-----------------------------------------------------------------------------
HRESULT CXBFont::Render()
{
    // Set the necessary renderstates
    m_pd3dDevice->SetTexture( 0, m_pTexture );
    m_pd3dDevice->SetStreamSource( 0, m_pVB, sizeof(XBFONTVERTEX) );
    m_pd3dDevice->SetVertexShader( D3DFVF_XBFONTVERTEX );
    m_pd3dDevice->SetPixelShader( NULL );
    m_pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    m_pd3dDevice->SetRenderState( D3DRS_SRCBLEND,         D3DBLEND_SRCALPHA );
    m_pd3dDevice->SetRenderState( D3DRS_DESTBLEND,        D3DBLEND_INVSRCALPHA );
    m_pd3dDevice->SetRenderState( D3DRS_ALPHATESTENABLE,  TRUE );
    m_pd3dDevice->SetRenderState( D3DRS_ALPHAREF,         0x08 );
    m_pd3dDevice->SetRenderState( D3DRS_ALPHAFUNC,        D3DCMP_GREATEREQUAL );
    m_pd3dDevice->SetRenderState( D3DRS_FILLMODE,         D3DFILL_SOLID );
    m_pd3dDevice->SetRenderState( D3DRS_CULLMODE,         D3DCULL_CCW );
    m_pd3dDevice->SetRenderState( D3DRS_ZENABLE,          FALSE );
    m_pd3dDevice->SetRenderState( D3DRS_FOGENABLE,        FALSE );
    m_pd3dDevice->SetRenderState( D3DRS_STENCILENABLE,    FALSE );
    m_pd3dDevice->SetRenderState( D3DRS_EDGEANTIALIAS,    FALSE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_TEXTURETRANSFORMFLAGS, D3DTTFF_DISABLE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_TEXCOORDINDEX, 0 );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP,   D3DTOP_MODULATE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_TEXTURE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG2, D3DTA_DIFFUSE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP,   D3DTOP_MODULATE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_POINT );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_POINT );
    m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MIPFILTER, D3DTEXF_NONE );
    m_pd3dDevice->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_DISABLE );
    m_pd3dDevice->SetTextureStageState( 1, D3DTSS_ALPHAOP,   D3DTOP_DISABLE );

    // Render the vertex buffer
    m_pd3dDevice->DrawPrimitive( D3DPT_QUADLIST, 0, m_dwNumQuads );

    // We can restore state here, if we like. Unfortunately, for generic use,
    // it's hard to guess what state the app will want everything restored to.

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: RenderToTexture()
// Desc: Creates a texture and renders a text string into it. The texture
//       format defaults to a 32-bit linear texture
//-----------------------------------------------------------------------------
LPDIRECT3DTEXTURE8 CXBFont::CreateTexture( const WCHAR* strText, 
                                           D3DCOLOR dwBackgroundColor, 
                                           D3DCOLOR dwTextColor, 
                                           D3DFORMAT d3dFormat )
{
    // Calculate texture dimensions
    FLOAT fTexWidth;
    FLOAT fTexHeight;
    GetTextExtent( strText, &fTexWidth, &fTexHeight );
    DWORD dwWidth  = (DWORD)fTexWidth;
    DWORD dwHeight = (DWORD)fTexHeight;

    switch( d3dFormat )
    {
        case D3DFMT_A8R8G8B8:
        case D3DFMT_X8R8G8B8:
        case D3DFMT_R5G6B5:
        case D3DFMT_X1R5G5B5:
            // For swizzled textures, make sure the dimensions are a power of two
            for( DWORD wmask=1; dwWidth&(dwWidth-1); wmask = (wmask<<1)+1 )
                dwWidth  = ( dwWidth + wmask ) & ~wmask;
            for( DWORD hmask=1; dwHeight&(dwHeight-1); hmask = (hmask<<1)+1 )
                dwHeight = ( dwHeight + hmask ) & ~hmask;
            break;

        case D3DFMT_LIN_A8R8G8B8:
        case D3DFMT_LIN_X8R8G8B8:
        case D3DFMT_LIN_R5G6B5:
        case D3DFMT_LIN_X1R5G5B5:
            // For linear textures, make sure the stride is a multiple of 64 bytes
            dwWidth  = ( dwWidth + 0x1f ) & ~0x1f;
            break;

        default:
            // All other formats are unsupported as render targets
            return NULL;
    }

    // Create the texture
    LPDIRECT3DTEXTURE8 pTexture;
    if( FAILED( m_pd3dDevice->CreateTexture( dwWidth, dwHeight, 1, 0L, d3dFormat, 
                                             D3DPOOL_DEFAULT, &pTexture ) ) )
        return NULL;
    
    // Get the current backbuffer and zbuffer
    LPDIRECT3DSURFACE8 pBackBuffer, pZBuffer;
    m_pd3dDevice->GetRenderTarget( &pBackBuffer );
    m_pd3dDevice->GetDepthStencilSurface( &pZBuffer );

    // Set the new texture as the render target
    LPDIRECT3DSURFACE8 pTextureSurface;
    pTexture->GetSurfaceLevel( 0, &pTextureSurface );
    D3DVIEWPORT8 vp = { 0, 0, dwWidth, dwHeight, 0.0f, 1.0f };
    m_pd3dDevice->SetRenderTarget( pTextureSurface, NULL );
    m_pd3dDevice->SetViewport( &vp );
    m_pd3dDevice->Clear( 0L, NULL, D3DCLEAR_TARGET, dwBackgroundColor, 1.0f, 0L );

    // Render the text
    DrawText( 0, 0, dwTextColor, strText, 0L );

    // Restore the rendertarget
    D3DVIEWPORT8 vpBackBuffer = { 0, 0, 640, 480, 0.0f, 1.0f };
    m_pd3dDevice->SetRenderTarget( pBackBuffer, pZBuffer );
    m_pd3dDevice->SetViewport( &vpBackBuffer );
    SAFE_RELEASE( pBackBuffer );
    SAFE_RELEASE( pZBuffer );
    SAFE_RELEASE( pTextureSurface );

    // Return the new texture
    return pTexture;
}




//-----------------------------------------------------------------------------
// Name: ReplaceInvalidChars()
// Desc: Replaces any character that does not have a glyph in the font with
//       the specified character value. Function is useful for replacing
//       invalid characters with the null "box" character.
//-----------------------------------------------------------------------------
VOID CXBFont::ReplaceInvalidChars( WCHAR* strUpdate, WCHAR cReplacement ) const
{
    for( ; *strUpdate; ++strUpdate )
    {
        WCHAR cLetter = *strUpdate;
        if( cLetter == L'\n' )
            continue;
        if( cLetter < m_cLowChar || cLetter > m_cHighChar )
            *strUpdate = cReplacement;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\xbhelp.h ===
//-----------------------------------------------------------------------------
// File: XBHelp.h
//
// Desc: Support class for rendering a help image, which is an image of an Xbox
//       gamepad, with labelled callouts to each of the gamepad's controls.
//
// Hist: 11.01.00 - New for November XDK release
//       12.15.00 - Changes for December XDK release
//       03.06.01 - Changes for April XDK release
//       04.15.01 - Using packed resources for May XDK
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#ifndef XBHELP_H
#define XBHELP_H
#include "XBFont.h"
#include "XBResource.h"
#include "XBUtil.h"




//-----------------------------------------------------------------------------
// Name: struct XBHELP_CALLOUT
// Desc: Structure for callout information, used to label controls when
//       rendering an image of an Xbox gamepad. An app will define an array of
//       of these, one for each gamepad control used.
//-----------------------------------------------------------------------------
struct XBHELP_CALLOUT
{
    WORD     wControl;    // An index to identify a control, as enum'ed below
    WORD     wPlacement;  // An offset to pick from one of the possible placements
    WCHAR*   strText;     // Text to draw when rendering this callout
};




//-----------------------------------------------------------------------------
// Name: class CXBHelp
// Desc: Class for rendering a help image of a gamepad with labelled callouts.
//-----------------------------------------------------------------------------
class CXBHelp
{
    CXBPackedResource       m_xprResource;
    LPDIRECT3DDEVICE8       m_pd3dDevice;
    LPDIRECT3DTEXTURE8      m_pGamepadTexture;
    LPDIRECT3DVERTEXBUFFER8 m_pVB;

public:
    // Constructor/destructor
    CXBHelp();
    ~CXBHelp();

    // Functions to create and destroy the internal objects
    HRESULT Create( LPDIRECT3DDEVICE8 pd3dDevice, CHAR* pResource );
    HRESULT Destroy();

    // Renders the help screen
    HRESULT Render( CXBFont* pFont, XBHELP_CALLOUT* tags, DWORD dwNumCallouts );
};




//-----------------------------------------------------------------------------
// A bunch of constants used to identify callout positions
//-----------------------------------------------------------------------------
enum
{   
    XBHELP_LEFTSTICK,
    XBHELP_LEFTSTICK_LINEEND_1, XBHELP_LEFTSTICK_TEXTPOS_1,
    XBHELP_LEFTSTICK_LINEEND_2, XBHELP_LEFTSTICK_TEXTPOS_2,

    XBHELP_RIGHTSTICK,
    XBHELP_RIGHTSTICK_LINEEND_1, XBHELP_RIGHTSTICK_TEXTPOS_1,
    XBHELP_RIGHTSTICK_LINEEND_2, XBHELP_RIGHTSTICK_TEXTPOS_2,

    XBHELP_DPAD,
    XBHELP_DPAD_LINEEND_1, XBHELP_DPAD_TEXTPOS_1,
    XBHELP_DPAD_LINEEND_2, XBHELP_DPAD_TEXTPOS_2,

    XBHELP_BACK_BUTTON,
    XBHELP_BACK_BUTTON_LINEEND_1, XBHELP_BACK_BUTTON_TEXTPOS_1,
    XBHELP_BACK_BUTTON_LINEEND_2, XBHELP_BACK_BUTTON_TEXTPOS_2,

    XBHELP_START_BUTTON,
    XBHELP_START_BUTTON_LINEEND_1, XBHELP_START_BUTTON_TEXTPOS_1,
    XBHELP_START_BUTTON_LINEEND_2, XBHELP_START_BUTTON_TEXTPOS_2,

    XBHELP_X_BUTTON,
    XBHELP_X_BUTTON_LINEEND_1, XBHELP_X_BUTTON_TEXTPOS_1,
    XBHELP_X_BUTTON_LINEEND_2, XBHELP_X_BUTTON_TEXTPOS_2,

    XBHELP_Y_BUTTON,
    XBHELP_Y_BUTTON_LINEEND_1, XBHELP_Y_BUTTON_TEXTPOS_1,
    XBHELP_Y_BUTTON_LINEEND_2, XBHELP_Y_BUTTON_TEXTPOS_2,

    XBHELP_A_BUTTON,
    XBHELP_A_BUTTON_LINEEND_1, XBHELP_A_BUTTON_TEXTPOS_1,
    XBHELP_A_BUTTON_LINEEND_2, XBHELP_A_BUTTON_TEXTPOS_2,

    XBHELP_B_BUTTON,
    XBHELP_B_BUTTON_LINEEND_1, XBHELP_B_BUTTON_TEXTPOS_1,
    XBHELP_B_BUTTON_LINEEND_2, XBHELP_B_BUTTON_TEXTPOS_2,

    XBHELP_WHITE_BUTTON,
    XBHELP_WHITE_BUTTON_LINEEND_1, XBHELP_WHITE_BUTTON_TEXTPOS_1,
    XBHELP_WHITE_BUTTON_LINEEND_2, XBHELP_WHITE_BUTTON_TEXTPOS_2,

    XBHELP_BLACK_BUTTON,
    XBHELP_BLACK_BUTTON_LINEEND_1, XBHELP_BLACK_BUTTON_TEXTPOS_1,
    XBHELP_BLACK_BUTTON_LINEEND_2, XBHELP_BLACK_BUTTON_TEXTPOS_2,

    XBHELP_LEFT_BUTTON,
    XBHELP_LEFT_BUTTON_LINEEND_1, XBHELP_LEFT_BUTTON_TEXTPOS_1,
    XBHELP_LEFT_BUTTON_LINEEND_2, XBHELP_LEFT_BUTTON_TEXTPOS_2,

    XBHELP_RIGHT_BUTTON,
    XBHELP_RIGHT_BUTTON_LINEEND_1, XBHELP_RIGHT_BUTTON_TEXTPOS_1,
    XBHELP_RIGHT_BUTTON_LINEEND_2, XBHELP_RIGHT_BUTTON_TEXTPOS_2,

    XBHELP_MISC_CALLOUT,
    XBHELP_MISC_CALLOUT_LINEEND_1, XBHELP_MISC_CALLOUT_TEXTPOS_1,
    XBHELP_MISC_CALLOUT_LINEEND_2, XBHELP_MISC_CALLOUT_TEXTPOS_2,
};




//-----------------------------------------------------------------------------
// Placement options for each callout, used as an offset into the enumerated
// list above.
//-----------------------------------------------------------------------------
#define XBHELP_PLACEMENT_CUSTOM 0   // For future implementation
#define XBHELP_PLACEMENT_1      1   // Callout has one line of text
#define XBHELP_PLACEMENT_2      2   // Callout has two lines of text




#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\XBResource.h ===
//-----------------------------------------------------------------------------
// File: XBResource.h
//
// Desc: Loads resources from an XPR (Xbox Packed Resource) file.  
//
// Hist: 03.12.01 - New for April XDK release
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#ifndef XBRESOURCE_H
#define XBRESOURCE_H



//-----------------------------------------------------------------------------
// Name: XBResource_SizeOf()
// Desc: Determines the byte size of a D3DResource
//-----------------------------------------------------------------------------
DWORD XBResource_SizeOf( LPDIRECT3DRESOURCE8 pResource );





//-----------------------------------------------------------------------------
// Name: struct XBRESOURCE
// Desc: Name tag for resources. An app may initialize this structure, and pass
//       it to the resource's Create() function. From then on, the app may call
//       GetResource() to retrieve a resource using an ascii name.
//-----------------------------------------------------------------------------
struct XBRESOURCE
{
    CHAR* strName;
    DWORD dwOffset;
};





//-----------------------------------------------------------------------------
// Name: class CXBPackedResource
// Desc: 
//-----------------------------------------------------------------------------
class CXBPackedResource
{
protected:
    BYTE*       m_pSysMemData;    // Alloc'ed mem for resource headers etc.
    BYTE*       m_pVidMemData;    // Alloc'ed mem for resource data, etc.

    DWORD       m_dwNumResources; // Number of loaded resources
 
    XBRESOURCE* m_pResourceTags;  // Tags to associate names with the resources

public:
    // Loads the resources out of the specified bundle
    HRESULT Create( LPDIRECT3DDEVICE8 pd3dDevice, const CHAR* strFilename, 
                    DWORD dwNumResources, XBRESOURCE* pResourceTags = NULL );

    VOID Destroy();

    // Functions to retrieve resources by their offset
    VOID* GetData( DWORD dwOffset ) const
    { return &m_pSysMemData[dwOffset]; }

    LPDIRECT3DRESOURCE8 GetResource( DWORD dwOffset ) const
    { return (LPDIRECT3DRESOURCE8)GetData(dwOffset); }

    LPDIRECT3DTEXTURE8 GetTexture( DWORD dwOffset ) const
    { return (LPDIRECT3DTEXTURE8)GetData( dwOffset ); }

    LPDIRECT3DCUBETEXTURE8 GetCubemap( DWORD dwOffset ) const
    { return (LPDIRECT3DCUBETEXTURE8)GetData( dwOffset ); }

    LPDIRECT3DVOLUMETEXTURE8 GetVolumeTexture( DWORD dwOffset ) const
    { return (LPDIRECT3DVOLUMETEXTURE8)GetData( dwOffset ); }

    LPDIRECT3DVERTEXBUFFER8 GetVertexBuffer( DWORD dwOffset ) const
    { return (LPDIRECT3DVERTEXBUFFER8)GetData( dwOffset ); }

    // Functions to retrieve resources by their name
    VOID* GetData( const CHAR* strName ) const;

    LPDIRECT3DRESOURCE8 GetResource( const CHAR* strName ) const
    { return (LPDIRECT3DRESOURCE8)GetData( strName ); }

    LPDIRECT3DTEXTURE8 GetTexture( const CHAR* strName ) const
    { return (LPDIRECT3DTEXTURE8)GetResource( strName ); }

    LPDIRECT3DCUBETEXTURE8 GetCubemap( const CHAR* strName ) const
    { return (LPDIRECT3DCUBETEXTURE8)GetResource( strName ); }

    LPDIRECT3DVOLUMETEXTURE8 GetVolumeTexture( const CHAR* strName ) const
    { return (LPDIRECT3DVOLUMETEXTURE8)GetResource( strName ); }

    LPDIRECT3DVERTEXBUFFER8 GetVertexBuffer( const CHAR* strName ) const
    { return (LPDIRECT3DVERTEXBUFFER8)GetResource( strName ); }

    // Constructor/destructor
    CXBPackedResource();
    ~CXBPackedResource();
};




#endif XBRESOURCE_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\xbapp.h ===
//-----------------------------------------------------------------------------
// File: XBApp.h
//
// Desc: Application class for the XBox samples.
//
// Hist: 11.01.00 - New for November XDK release
//       12.15.00 - Changes for December XDK release
//       02.19.01 - Changes for March XDK release
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#ifndef XBAPP_H
#define XBAPP_H

#include <xtl.h>
#include <xgraphics.h>
#include <stdio.h>
#include "XBInput.h"
#include "XBUtil.h"




//-----------------------------------------------------------------------------
// Global access to common members
//-----------------------------------------------------------------------------
extern LPDIRECT3DDEVICE8 g_pd3dDevice;




//-----------------------------------------------------------------------------
// Error codes
//-----------------------------------------------------------------------------
#define XBAPPERR_MEDIANOTFOUND       0x82000003




//-----------------------------------------------------------------------------
// Name: class CXBApplication
// Desc: A base class for creating sample Xbox applications. To create a simple
//       Xbox application, simply derive this class and override the following
//       functions:
//          Initialize()          - To initialize the device-dependant objects
//          FrameMove()           - To animate the scene
//          Render()              - To render the scene
//-----------------------------------------------------------------------------
class CXBApplication
{
protected:
    // Main objects used for creating and rendering the 3D scene
    D3DPRESENT_PARAMETERS m_d3dpp;
    LPDIRECT3D8           m_pD3D;              // The D3D enumerator object
    LPDIRECT3DDEVICE8     m_pd3dDevice;        // The D3D rendering device
    LPDIRECT3DSURFACE8    m_pBackBuffer;       // The backbuffer
    LPDIRECT3DSURFACE8    m_pDepthBuffer;      // The depthbuffer

    // Variables for timing
    FLOAT      m_fTime;             // Current absolute time in seconds
    FLOAT      m_fElapsedTime;      // Elapsed absolute time since last frame
    FLOAT      m_fAppTime;          // Current app time in seconds
    FLOAT      m_fElapsedAppTime;   // Elapsed app time since last frame
    BOOL       m_bPaused;           // Whether app time is paused by user
    FLOAT      m_fFPS;              // Instanteous frame rate
    WCHAR      m_strFrameRate[20];  // Frame rate written to a string
    HANDLE     m_hFrameCounter;     // Handle to framerate perf counter

    // Members to init the XINPUT devices.
    XDEVICE_PREALLOC_TYPE* m_InputDeviceTypes;
    DWORD                  m_dwNumInputDeviceTypes;
    XBGAMEPAD*             m_Gamepad;
    XBGAMEPAD              m_DefaultGamepad;

    // Helper functions
    HRESULT RenderGradientBackground( DWORD dwTopColor, DWORD dwBottomColor );

    // Overridable functions for the 3D scene created by the app
    virtual HRESULT Initialize()            { return S_OK; }
    virtual HRESULT FrameMove()             { return S_OK; }
    virtual HRESULT Render()                { return S_OK; }
    virtual HRESULT Cleanup()               { return S_OK; }

public:
    // Functions to create, run, and clean up the application
    HRESULT Create();
    INT     Run();
    VOID    Destroy();

    // Internal constructor
    CXBApplication();
};




#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1016\modulex.h ===
#define PREPEND_MODULE(Suffix) module##Suffix
#define MODULE_STRING "module"
#pragma comment(linker, "/include:_module_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\xbinput.h ===
//-----------------------------------------------------------------------------
// File: XBInput.h
//
// Desc: Input helper functions for the XBox samples
//
// Hist: 12.15.00 - Separated from XBUtil.h for December XDK release
//       01.03.00 - Made changes for real Xbox controller
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#ifndef XBINPUT_H
#define XBINPUT_H




//-----------------------------------------------------------------------------
// Name: struct XBGAMEPAD
// Desc: structure for holding Gamepad data
//-----------------------------------------------------------------------------
struct XBGAMEPAD : public XINPUT_GAMEPAD
{
    // Inherited members from XINPUT_GAMEPAD
	//
    // WORD    wButtons;
    // BYTE    bAnalogButtons[8];
    // SHORT   sThumbLX;
    // SHORT   sThumbLY;
    // SHORT   sThumbRX;
    // SHORT   sThumbRY;

    // Thumb stick values in range [-1,+1]
    FLOAT      fX1;
    FLOAT      fY1;
    FLOAT      fX2;
    FLOAT      fY2;
    
    // Buttons pressed since last poll
    WORD       wLastButtons;
    BOOL       bLastAnalogButtons[8];
    WORD       wPressedButtons;
    BOOL       bPressedAnalogButtons[8];

    // Device properties
    XINPUT_CAPABILITIES caps;
    HANDLE     hDevice;

    // TRUE if controller was just inserted
    BOOL       bInserted;
};




//-----------------------------------------------------------------------------
// Global access to gamepad devices
//-----------------------------------------------------------------------------
extern XBGAMEPAD g_Gamepads[4];




//-----------------------------------------------------------------------------
// Name: XBInput_CreateGamepads()
// Desc: Creates the gamepad devices
//-----------------------------------------------------------------------------
HRESULT XBInput_CreateGamepads( XBGAMEPAD** ppGamepads = NULL );




//-----------------------------------------------------------------------------
// Name: XBInput_GetInput()
// Desc: Processes input from the gamepads
//-----------------------------------------------------------------------------
VOID XBInput_GetInput( XBGAMEPAD* pGamepads = NULL );




//-----------------------------------------------------------------------------
// Name: XBInput_GetPrimaryController()
// Desc: The first controller used by the player or the controller on the
//       lowest numbered slot. NULL if no controllers inserted.
//-----------------------------------------------------------------------------
const XBGAMEPAD* XBInput_GetPrimaryController();




//-----------------------------------------------------------------------------
// Name: XBInput_IsAnyButtonActive()
// Desc: TRUE if any button or thumbstick depressed on the given controller
//-----------------------------------------------------------------------------
BOOL XBInput_IsAnyButtonActive( const XBGAMEPAD* );




#endif // XBINPUT_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\xbutil.cpp ===
//-----------------------------------------------------------------------------
// File: XBUtil.cpp
//
// Desc: Shortcut macros and helper functions for the XBox samples
//
// Hist: 11.01.00 - New for November XDK release
//       12.01.00 - Moved input code to XBInput.cpp
//       12.15.00 - Changes for December XDK release
//       02.19.00 - Changes for March XDK release
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include <xtl.h>
#include <xgraphics.h>
#include <tchar.h> 
#include <stdio.h> 
#include "XBUtil.h"




//-----------------------------------------------------------------------------
// Path to the XBox media files on the target machine
//-----------------------------------------------------------------------------
CHAR g_strMediaPath[512] = "D:\\Media\\";




//-----------------------------------------------------------------------------
// Name: XBUtil_SetMediaPath()
// Desc: Sets the path to media files
//-----------------------------------------------------------------------------
VOID XBUtil_SetMediaPath( const CHAR* strPath )
{
    strcpy( g_strMediaPath, strPath );
}

    
    
    
//-----------------------------------------------------------------------------
// Name: XBUtil_FindMediaFile()
// Desc: Returns a valid path to a media file.
//-----------------------------------------------------------------------------
HRESULT XBUtil_FindMediaFile( CHAR* strPath, const CHAR* strFilename )
{
    // Check for valid arguments
    if( NULL==strFilename || NULL==strPath )
    {
        OutputDebugStringA( "XBUtil_FindMediaFile(): Invalid arguments\n" );
        return E_INVALIDARG;
    }

    // Default path is the filename itself as a fully qualified path
    strcpy( strPath, strFilename );

    // Check for the ':' character to see if the filename is a fully
    // qualified path. If not, prepend the media directory
    if( strFilename[1] != ':' )
        sprintf( strPath, "%s%s", g_strMediaPath, strFilename );

    // Try to open the file
    HANDLE hFile = CreateFile( strPath, GENERIC_READ, FILE_SHARE_READ, NULL, 
                               OPEN_EXISTING, 0, NULL );
    if( INVALID_HANDLE_VALUE == hFile )
    {
        // Return error
        CHAR strBuffer[80];
        sprintf( strBuffer, "XBUtil_FindMediaFile(): Could not find file [%s]\n", 
                            strFilename );
        OutputDebugStringA( strBuffer );
        return 0x82000004;
    }

    // Found the file. Close the file and return
    CloseHandle( hFile );

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: XBUtil_Timer()
// Desc: Performs timer opertations. Use the following commands:
//          TIMER_RESET           - to reset the timer
//          TIMER_START           - to start the timer
//          TIMER_STOP            - to stop (or pause) the timer
//          TIMER_ADVANCE         - to advance the timer by 0.1 seconds
//          TIMER_GETABSOLUTETIME - to get the absolute system time
//          TIMER_GETAPPTIME      - to get the current time
//-----------------------------------------------------------------------------
FLOAT XBUtil_Timer( TIMER_COMMAND command )
{
    static BOOL  m_bTimerInitialized = FALSE;
    static FLOAT m_fSecsPerTick = 0.0f;
    static FLOAT m_fBaseTime    = 0.0f;
    static FLOAT m_fStopTime    = 0.0f;
    FLOAT        fTime;

    // Initialize the timer
    if( FALSE == m_bTimerInitialized )
    {
        m_bTimerInitialized = TRUE;

        // Use QueryPerformanceFrequency() to get frequency of timer.
        LARGE_INTEGER qwTicksPerSec;
        QueryPerformanceFrequency( &qwTicksPerSec );
        m_fSecsPerTick = 1.0f / (FLOAT)qwTicksPerSec.QuadPart;
    }

    // Get the current time using QueryPerformanceCounter() or timeGetTime()
    LARGE_INTEGER qwTime;
    QueryPerformanceCounter( &qwTime );
    fTime = ((FLOAT)qwTime.QuadPart) * m_fSecsPerTick;

    // Reset the timer
    if( command == TIMER_RESET )
    {
        m_fBaseTime = fTime;
        return 0.0f;
    }

    // Return the current time
    if( command == TIMER_GETAPPTIME )
        return fTime - m_fBaseTime;

    // Start the timer
    if( command == TIMER_START )
        m_fBaseTime += fTime - m_fStopTime;

    // Stop the timer
    if( command == TIMER_STOP )
        m_fStopTime = fTime;

    // Advance the timer by 1/10th second
    if( command == TIMER_ADVANCE )
        m_fBaseTime += fTime - ( m_fStopTime + 0.1f );

    // Retract the timer by 1/10th second
    if( command == TIMER_RETRACT )
        m_fBaseTime += fTime - ( m_fStopTime - 0.1f );

    return fTime;
}




//-----------------------------------------------------------------------------
// Name: XBUtil_InitMaterial()
// Desc: Initializes a D3DMATERIAL8 structure, setting the diffuse and ambient
//       colors. It does not set emissive or specular colors.
//-----------------------------------------------------------------------------
VOID XBUtil_InitMaterial( D3DMATERIAL8& mtrl, FLOAT r, FLOAT g, FLOAT b,
                          FLOAT a )
{
    ZeroMemory( &mtrl, sizeof(D3DMATERIAL8) );
    mtrl.Diffuse.r = mtrl.Ambient.r = r;
    mtrl.Diffuse.g = mtrl.Ambient.g = g;
    mtrl.Diffuse.b = mtrl.Ambient.b = b;
    mtrl.Diffuse.a = mtrl.Ambient.a = a;
}




//-----------------------------------------------------------------------------
// Name: XBUtil_InitLight()
// Desc: Initializes a D3DLIGHT structure, setting the light position. The
//       diffuse color is set to white, specular and ambient left as black.
//-----------------------------------------------------------------------------
VOID XBUtil_InitLight( D3DLIGHT8& light, D3DLIGHTTYPE ltType,
                       FLOAT x, FLOAT y, FLOAT z )
{
    ZeroMemory( &light, sizeof(D3DLIGHT8) );
    light.Type         = ltType;
    light.Diffuse.r    = 1.0f;
    light.Diffuse.g    = 1.0f;
    light.Diffuse.b    = 1.0f;
    light.Position     = D3DXVECTOR3(x,y,z);

    light.Position.x   = x;
    light.Position.y   = y;
    light.Position.z   = z;
    D3DXVECTOR3 vSource(x,y,z);
    D3DXVec3Normalize( (D3DXVECTOR3*)&light.Direction, &vSource );
    light.Range        = 1000.0f;
}




//-----------------------------------------------------------------------------
// Name: XBUtil_CreateTexture()
// Desc: Helper function to create a texture.
//-----------------------------------------------------------------------------
HRESULT XBUtil_CreateTexture( LPDIRECT3DDEVICE8 pd3dDevice, const CHAR* strTexture,
                              LPDIRECT3DTEXTURE8* ppTexture, D3DFORMAT d3dFormat )
{
    HRESULT hr;

    // Find the media file
    CHAR strTexturePath[512];
    if( FAILED( hr = XBUtil_FindMediaFile( strTexturePath, strTexture ) ) )
        return hr;

    // Create the texture using D3DX. Check the current directory
    return D3DXCreateTextureFromFileEx( pd3dDevice, strTexturePath, 
                                        D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 
                                        0, d3dFormat, D3DPOOL_DEFAULT, 
                                        D3DX_DEFAULT, D3DX_DEFAULT, 0, NULL, NULL, 
                                        ppTexture );
}




//-----------------------------------------------------------------------------
// Name: XBUtil_UnswizzleTexture2D()
// Desc: Unswizzles a 2D texture before it gets unlocked. Note: this operation
//       can be very slow.
//-----------------------------------------------------------------------------
VOID XBUtil_UnswizzleTexture2D( D3DLOCKED_RECT* pLock, const D3DSURFACE_DESC* pDesc )
{
    DWORD dwPixelSize   = XGBytesPerPixelFromFormat( pDesc->Format );
    DWORD dwTextureSize = pDesc->Width * pDesc->Height * dwPixelSize;

    BYTE* pSrcBits = new BYTE[ dwTextureSize ];
    memcpy( pSrcBits, pLock->pBits, dwTextureSize );
    
    XGUnswizzleRect( pSrcBits, pDesc->Width, pDesc->Height, NULL, pLock->pBits, 
                     0, NULL, dwPixelSize );

    SAFE_DELETE_ARRAY( pSrcBits );
}




//-----------------------------------------------------------------------------
// Name: XBUtil_UnswizzleTexture3D()
// Desc: Unswizzles a 3D texture before it gets unlocked. Note: this operation
//       can be very slow.
//-----------------------------------------------------------------------------
VOID XBUtil_UnswizzleTexture3D( D3DLOCKED_BOX* pLock, const D3DVOLUME_DESC* pDesc )
{
    DWORD dwPixelSize   = XGBytesPerPixelFromFormat( pDesc->Format );
    DWORD dwTextureSize = pDesc->Width * pDesc->Height * pDesc->Depth * dwPixelSize;

    BYTE* pSrcBits = new BYTE[ dwTextureSize ];
    memcpy( pSrcBits, pLock->pBits, dwTextureSize );
    
    XGUnswizzleBox( pSrcBits, pDesc->Width, pDesc->Height, pDesc->Depth, NULL, pLock->pBits,
                    0, 0, NULL, dwPixelSize );

    SAFE_DELETE_ARRAY( pSrcBits );
}




//-----------------------------------------------------------------------------
// Name: XBUtil_SwizzleTexture2D()
// Desc: Swizzles a 2D texture before it gets unlocked. Note: this operation
//       can be very slow.
//-----------------------------------------------------------------------------
VOID XBUtil_SwizzleTexture2D( D3DLOCKED_RECT* pLock, const D3DSURFACE_DESC* pDesc )
{
    DWORD dwPixelSize   = XGBytesPerPixelFromFormat( pDesc->Format );
    DWORD dwTextureSize = pDesc->Width * pDesc->Height * dwPixelSize;

    BYTE* pSrcBits = new BYTE[ dwTextureSize ];
    memcpy( pSrcBits, pLock->pBits, dwTextureSize );
    
    XGSwizzleRect( pSrcBits, 0, NULL, pLock->pBits,
                  pDesc->Width, pDesc->Height, 
                  NULL, dwPixelSize );

    SAFE_DELETE_ARRAY( pSrcBits );
}




//-----------------------------------------------------------------------------
// Name: XBUtil_SwizzleTexture3D()
// Desc: Swizzles a 3D texture before it gets unlocked. Note: this operation
//       can be very slow.
//-----------------------------------------------------------------------------
VOID XBUtil_SwizzleTexture3D( D3DLOCKED_BOX* pLock, const D3DVOLUME_DESC* pDesc )
{
    DWORD dwPixelSize   = XGBytesPerPixelFromFormat( pDesc->Format );
    DWORD dwTextureSize = pDesc->Width * pDesc->Height * pDesc->Depth * dwPixelSize;

    BYTE* pSrcBits = new BYTE[ dwTextureSize ];
    memcpy( pSrcBits, pLock->pBits, dwTextureSize );
    
    XGSwizzleBox( pSrcBits, 0, 0, NULL, pLock->pBits,
                  pDesc->Width, pDesc->Height, pDesc->Depth, 
                  NULL, dwPixelSize );

    SAFE_DELETE_ARRAY( pSrcBits );
}




//-----------------------------------------------------------------------------
// Name: XBUtil_CreateVertexShader()
// Desc: Creates a file-based vertex shader
//-----------------------------------------------------------------------------
HRESULT XBUtil_CreateVertexShader( LPDIRECT3DDEVICE8 pd3dDevice, 
                                   const CHAR* strFilename,
                                   const DWORD* pdwVertexDecl,
                                   DWORD* pdwVertexShader )
{
    HRESULT hr;

    // Find the media file
    CHAR strShaderPath[512];
    if( FAILED( hr = XBUtil_FindMediaFile( strShaderPath, strFilename ) ) )
        return hr;

    // Open the vertex shader file
    HANDLE hFile = CreateFile( strShaderPath, GENERIC_READ, FILE_SHARE_READ, 
                               NULL, OPEN_EXISTING, 0, NULL );
    if( INVALID_HANDLE_VALUE == hFile )
        return E_FAIL;

    // Allocate memory to read the vertex shader file
    DWORD dwSize = GetFileSize( hFile, NULL );
    BYTE* pData  = new BYTE[dwSize+4];
    if( NULL == pData )
        return E_FAIL;
    ZeroMemory( pData, dwSize+4 );

    // Read the pre-compiled vertex shader microcode
    DWORD dwBytesRead;
    ReadFile( hFile, pData, dwSize, &dwBytesRead, NULL );

    // Create the vertex shader
    hr = pd3dDevice->CreateVertexShader( pdwVertexDecl, (const DWORD*)pData,
                                         pdwVertexShader, 0 );

    // Cleanup and return
    CloseHandle( hFile );
    delete [] pData;
    return hr;
}




//-----------------------------------------------------------------------------
// Name: XBUtil_CreatePixelShader()
// Desc: Creates a file-based pixel shader
//-----------------------------------------------------------------------------
HRESULT XBUtil_CreatePixelShader( LPDIRECT3DDEVICE8 pd3dDevice, 
                                  const CHAR* strFilename, DWORD* pdwPixelShader )
{
    HRESULT hr;

    // Find the media file
    CHAR strShaderPath[512];
    if( FAILED( hr = XBUtil_FindMediaFile( strShaderPath, strFilename ) ) )
        return hr;

    // Open the pixel shader file
    HANDLE hFile = CreateFile( strShaderPath, GENERIC_READ, FILE_SHARE_READ, 
                               NULL, OPEN_EXISTING, 0, NULL );
    if( INVALID_HANDLE_VALUE == hFile )
        return E_FAIL;

    // Load the pre-compiled pixel shader microcode
    D3DPIXELSHADERDEF_FILE psdf;
    DWORD                  dwBytesRead;
    ReadFile( hFile, &psdf, sizeof(D3DPIXELSHADERDEF_FILE), &dwBytesRead, NULL );
    CloseHandle( hFile );

    // Make sure the pixel shader is valid
    if( dwBytesRead != sizeof(D3DPIXELSHADERDEF_FILE) || 
        psdf.FileID != D3DPIXELSHADERDEF_FILE_ID )
    {
        OutputDebugString( _T("XBUtil_CreatePixelShader(): Invalid pixel shader file\n") );
        return E_FAIL;
    }

    // Create the pixel shader
    if( FAILED( hr = pd3dDevice->CreatePixelShader( &(psdf.Psd), pdwPixelShader ) ) )
    {
        OutputDebugString( _T("XBUtil_CreatePixelShader(): Could not create pixel shader\n") );
        return hr;
    }

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: XBUtil_GetCubeMapViewMatrix()
// Desc: Returns a view matrix for rendering to a face of a cubemap.
//-----------------------------------------------------------------------------
D3DXMATRIX XBUtil_GetCubeMapViewMatrix( DWORD dwFace )
{
    D3DXVECTOR3 vEyePt   = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );
    D3DXVECTOR3 vLookDir = D3DXVECTOR3( 1.0f, 0.0f, 0.0f );
    D3DXVECTOR3 vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

    switch( dwFace )
    {
        case D3DCUBEMAP_FACE_POSITIVE_X:
            vLookDir = D3DXVECTOR3( 1.0f, 0.0f, 0.0f );
            vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );
            break;
        case D3DCUBEMAP_FACE_NEGATIVE_X:
            vLookDir = D3DXVECTOR3(-1.0f, 0.0f, 0.0f );
            vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );
            break;
        case D3DCUBEMAP_FACE_POSITIVE_Y:
            vLookDir = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );
            vUpDir   = D3DXVECTOR3( 0.0f, 0.0f,-1.0f );
            break;
        case D3DCUBEMAP_FACE_NEGATIVE_Y:
            vLookDir = D3DXVECTOR3( 0.0f,-1.0f, 0.0f );
            vUpDir   = D3DXVECTOR3( 0.0f, 0.0f, 1.0f );
            break;
        case D3DCUBEMAP_FACE_POSITIVE_Z:
            vLookDir = D3DXVECTOR3( 0.0f, 0.0f, 1.0f );
            vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );
            break;
        case D3DCUBEMAP_FACE_NEGATIVE_Z:
            vLookDir = D3DXVECTOR3( 0.0f, 0.0f,-1.0f );
            vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );
            break;
    }

    // Set the view transform for this cubemap surface
    D3DXMATRIX matView;
    D3DXMatrixLookAtLH( &matView, &vEyePt, &vLookDir, &vUpDir );
    return matView;
}




//-----------------------------------------------------------------------------
// Name: XBUtil_CreateNormalizationCubeMap()
// Desc: Creates a cubemap and fills it with normalized RGBA vectors
//-----------------------------------------------------------------------------
HRESULT XBUtil_CreateNormalizationCubeMap( LPDIRECT3DDEVICE8 pd3dDevice, 
                                           DWORD dwSize, 
                                           LPDIRECT3DCUBETEXTURE8* ppCubeMap )
{
    HRESULT hr;

    // Create the cube map
    if( FAILED( hr = pd3dDevice->CreateCubeTexture( dwSize, 1, 0, D3DFMT_X8R8G8B8, 
                                                    D3DPOOL_DEFAULT, ppCubeMap ) ) )
        return E_FAIL;
    
    // Allocate temp space for swizzling the cubemap surfaces
    DWORD* pSourceBits = new DWORD[ dwSize * dwSize ];

    // Fill all six sides of the cubemap
    for( DWORD i=0; i<6; i++ )
    {
        // Lock the i'th cubemap surface
        LPDIRECT3DSURFACE8 pCubeMapFace;
        (*ppCubeMap)->GetCubeMapSurface( (D3DCUBEMAP_FACES)i, 0, &pCubeMapFace );

        // Write the RGBA-encoded normals to the surface pixels
        DWORD*      pPixel = pSourceBits;
        D3DXVECTOR3 n;
        FLOAT       w, h;

        for( DWORD y = 0; y < dwSize; y++ )
        {
            h  = (FLOAT)y / (FLOAT)(dwSize-1);  // 0 to 1
            h  = ( h * 2.0f ) - 1.0f;           // -1 to 1
            
            for( DWORD x = 0; x < dwSize; x++ )
            {
                w = (FLOAT)x / (FLOAT)(dwSize-1);   // 0 to 1
                w = ( w * 2.0f ) - 1.0f;            // -1 to 1

                // Calc the normal for this texel
                switch( i )
                {
                    case D3DCUBEMAP_FACE_POSITIVE_X:    // +x
                        n.x = +1.0;
                        n.y = -h;
                        n.z = -w;
                        break;
                        
                    case D3DCUBEMAP_FACE_NEGATIVE_X:    // -x
                        n.x = -1.0;
                        n.y = -h;
                        n.z = +w;
                        break;
                        
                    case D3DCUBEMAP_FACE_POSITIVE_Y:    // y
                        n.x = +w;
                        n.y = +1.0;
                        n.z = +h;
                        break;
                        
                    case D3DCUBEMAP_FACE_NEGATIVE_Y:    // -y
                        n.x = +w;
                        n.y = -1.0;
                        n.z = -h;
                        break;
                        
                    case D3DCUBEMAP_FACE_POSITIVE_Z:    // +z
                        n.x = +w;
                        n.y = -h;
                        n.z = +1.0;
                        break;
                        
                    case D3DCUBEMAP_FACE_NEGATIVE_Z:    // -z
                        n.x = -w;
                        n.y = -h;
                        n.z = -1.0;
                        break;
                }

                // Store the normal as an RGBA color
                D3DXVec3Normalize( &n, &n );
                *pPixel++ = XBUtil_VectorToRGBA( &n );
            }
        }
        
        // Swizzle the result into the cubemap face surface
        D3DLOCKED_RECT lock;
        pCubeMapFace->LockRect( &lock, 0, 0L );
        XGSwizzleRect( pSourceBits, 0, NULL, lock.pBits, dwSize, dwSize,
                       NULL, sizeof(DWORD) );
        pCubeMapFace->UnlockRect();

        // Release the cubemap face
        pCubeMapFace->Release();
    }

    // Free temp space
    SAFE_DELETE_ARRAY( pSourceBits );

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: XBUtil_DumpSurface()
// Desc: Writes the contents of a surface (32-bit only) to a .tga file. This
//       could be a backbuffer, texture, or any other 32-bit surface.
//-----------------------------------------------------------------------------
HRESULT XBUtil_DumpSurface( LPDIRECT3DSURFACE8 pSurface, const CHAR* strFileName )
{
    // Get the surface description. Make sure it's a 32-bit format
    D3DSURFACE_DESC desc;
    pSurface->GetDesc( &desc );
    if( desc.Size != ( desc.Width * desc.Height * sizeof(DWORD) ) )
        return E_NOTIMPL;

    // Lock the surface
    D3DLOCKED_RECT lock;
    if( FAILED( pSurface->LockRect( &lock, 0, 0 ) ) )
        return E_FAIL;

    // Allocate memory for storing the surface bits
    VOID* pBits = (VOID*)new DWORD[desc.Width*desc.Height];

    // Unswizzle the bits, if necessary
    if( XGIsSwizzledFormat( desc.Format ) )
        XGUnswizzleRect( lock.pBits, desc.Width, desc.Height, NULL,
                         pBits, lock.Pitch, NULL, sizeof(DWORD) );
    else
        memcpy( pBits, lock.pBits, desc.Size );
    
    // Unlock the surface
    pSurface->UnlockRect();

    // Setup the TGA file header
    struct TargaHeader
    {
        BYTE IDLength;
        BYTE ColormapType;
        BYTE ImageType;
        BYTE ColormapSpecification[5];
        WORD XOrigin;
        WORD YOrigin;
        WORD ImageWidth;
        WORD ImageHeight;
        BYTE PixelDepth;
        BYTE ImageDescriptor;
    } tgaHeader;

    ZeroMemory( &tgaHeader, sizeof(tgaHeader) );
    tgaHeader.IDLength        = 0;
    tgaHeader.ImageType       = 2;
    tgaHeader.ImageWidth      = (WORD)desc.Width;
    tgaHeader.ImageHeight     = (WORD)desc.Height;
    tgaHeader.PixelDepth      = 32;
    tgaHeader.ImageDescriptor = 0x28;

    // Create a new file
    FILE* file = fopen( strFileName, "wb" );
    if( NULL == file )
    {
        pSurface->UnlockRect();
        return E_FAIL;
    }

    // Write the Targa header and the surface pixels to the file
    fwrite( &tgaHeader, sizeof(TargaHeader), 1, file );
    fwrite( pBits, sizeof(BYTE), desc.Size, file );
    fclose( file );

    // Cleanup and return
    delete[] pBits;

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: XBUtil_EvaluateHermite()
// Desc: Evaluate a cubic parametric equation. Returns the point at u on a
//       Hermite curve.
//-----------------------------------------------------------------------------
D3DXVECTOR3 XBUtil_EvaluateHermite( const D3DXVECTOR3& p0, const D3DXVECTOR3& p1, 
                                    const D3DXVECTOR3& v0, const D3DXVECTOR3& v1,
                                    FLOAT u )
{
    // Generate coeffecients from the two end points and two tangents
    D3DXVECTOR3 a =  2*p0 - 2*p1 +   v0 + v1; // a = 2p0 - 2p1 +  v0 + v1
    D3DXVECTOR3 b = -3*p0 + 3*p1 - 2*v0 - v1; // b =-3p0 + 3p1 - 2v0 + v1
    D3DXVECTOR3 c =                  v0;      // c = v0  
    D3DXVECTOR3 d =    p0;                    // d = p0

    // Evaluate the equation at u, where:
    //    f(u) = au^3 + bu^2 + cu + d
    return ( ( a * u + b ) * u + c ) * u + d;
}




//-----------------------------------------------------------------------------
// Name: XBUtil_EvaluateCatmullRom()
// Desc: Evaluate a cubic parametric equation. Returns the point at u on a
//       Catmull-Rom curve.
//-----------------------------------------------------------------------------
D3DXVECTOR3 XBUtil_EvaluateCatmullRom( const D3DXVECTOR3& p1, const D3DXVECTOR3& p2, 
                                       const D3DXVECTOR3& p3, const D3DXVECTOR3& p4,
                                       FLOAT u )
{
    // Generate coeffecients from four spline points
    D3DXVECTOR3 a =   -p1 + 3*p2 - 3*p3 + p4;
    D3DXVECTOR3 b =  2*p1 - 5*p2 + 4*p3 - p4;
    D3DXVECTOR3 c =   -p1        +   p3;
    D3DXVECTOR3 d =         2*p2;

    // Evaluate the equation at u, where:
    //    f(u) = 0.5 * ( au^3 + bu^2 + cu + d )
    return 0.5f * ( ( ( a * u + b ) * u + c ) * u + d );
}




//-----------------------------------------------------------------------------
// Name: XBUtil_GetSplinePoint()
// Desc: Returns a point on a spline. The spline is defined by an array of
//       points, and the point and tangent returned are located at position t
//       on the spline, where 0 < t < dwNumSpinePts.
//-----------------------------------------------------------------------------
VOID XBUtil_GetSplinePoint( const D3DXVECTOR3* pSpline, DWORD dwNumSpinePts,
                            FLOAT t, D3DXVECTOR3* pvPoint, D3DXVECTOR3* pvTangent )
{
    DWORD p0 = ( t > 1.0 ) ? (DWORD)floorf(t)-1 : dwNumSpinePts-1;
    DWORD p1 = ( p0 < dwNumSpinePts-1 ) ? p0 + 1 : 0;
    DWORD p2 = ( p1 < dwNumSpinePts-1 ) ? p1 + 1 : 0;
    DWORD p3 = ( p2 < dwNumSpinePts-1 ) ? p2 + 1 : 0;
    FLOAT u  = t - floorf(t);

    if( pvPoint )
        (*pvPoint) = XBUtil_EvaluateCatmullRom( pSpline[p0], pSpline[p1], 
                                                pSpline[p2], pSpline[p3], u );

    if( pvTangent )
        (*pvTangent) = 0.5f * ( (1-u) * ( pSpline[p2] - pSpline[p0] ) + 
                                  (u) * ( pSpline[p3] - pSpline[p1] ) );
}




//-----------------------------------------------------------------------------
// Name: XBUtil_RenderSpline()
// Desc: For debugging purposes, visually renders a spline.
//-----------------------------------------------------------------------------
VOID XBUtil_RenderSpline( LPDIRECT3DDEVICE8 pd3dDevice, const D3DXVECTOR3* pSpline, 
                          DWORD dwNumSplinePts, DWORD dwColor, BOOL bRenderAxes )
{
    pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, FALSE );
    pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP,   D3DTOP_SELECTARG1 );
    pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_TFACTOR );
    pd3dDevice->SetVertexShader( D3DFVF_XYZ );

    for( FLOAT u = 0; u < dwNumSplinePts; u += 1.0f )
    {
        D3DXVECTOR3 p[2];
        D3DXVECTOR3 vTangent, vSide, vUp;

        XBUtil_GetSplinePoint( pSpline, dwNumSplinePts, u+0, &p[0], &vTangent );
        XBUtil_GetSplinePoint( pSpline, dwNumSplinePts, u+1, &p[1], NULL );

        D3DXVec3Normalize( &vTangent, &vTangent );
        D3DXVECTOR3 v1( 0, 1, 0 );
        D3DXVec3Cross( &vSide, &v1, &vTangent );
        D3DXVec3Cross( &vUp, &vTangent, &vSide );

        pd3dDevice->SetRenderState( D3DRS_TEXTUREFACTOR, dwColor );
        pd3dDevice->DrawPrimitiveUP( D3DPT_LINELIST, 1, p, sizeof(D3DXVECTOR3) );

        if( bRenderAxes )
        {
            p[1] = p[0] + vTangent/4;
            pd3dDevice->SetRenderState( D3DRS_TEXTUREFACTOR, 0xffff0000 );
            pd3dDevice->DrawPrimitiveUP( D3DPT_LINELIST, 1, p, sizeof(D3DXVECTOR3) );

            p[1] = p[0] + vSide/4;
            pd3dDevice->SetRenderState( D3DRS_TEXTUREFACTOR, 0xff00ff00 );
            pd3dDevice->DrawPrimitiveUP( D3DPT_LINELIST, 1, p, sizeof(D3DXVECTOR3) );

            p[1] = p[0] + vUp/4;
            pd3dDevice->SetRenderState( D3DRS_TEXTUREFACTOR, 0xffffffff );
            pd3dDevice->DrawPrimitiveUP( D3DPT_LINELIST, 1, p, sizeof(D3DXVECTOR3) );
        }
    }
}




//-----------------------------------------------------------------------------
// Name: XBUtil_DeclaratorFromFVF()
// Desc: Create a vertex declaration from an FVF. Registers are assigned as
//       follows:
//          v0     = Vertex position
//          v1     = Vertex blend weights
//          v2     = Vertex normal
//          v3     = Vertex diffuse color
//          v4     = Vertex specular color
//       // v5     = Vertex fog (no FVF code)
//       // v6     = Vertex pointsize (no FVF code)
//       // v7     = Vertex back diffuse color (no FVF code)
//       // v8     = Vertex back specular color (no FVF code)
//          v9-v12 = Vertex texture coords
//-----------------------------------------------------------------------------
HRESULT XBUtil_DeclaratorFromFVF( DWORD dwFVF, 
                                  DWORD Declaration[MAX_FVF_DECL_SIZE] )
{
    // Start the declaration
    DWORD decl = 0;
    Declaration[decl++] = D3DVSD_STREAM(0);

    // Handle position
    DWORD dwPositionFVF = ( dwFVF & D3DFVF_POSITION_MASK );
    if( dwPositionFVF == D3DFVF_XYZRHW ) Declaration[decl++] = D3DVSD_REG( 0, D3DVSDT_FLOAT4 ); 
    else                                 Declaration[decl++] = D3DVSD_REG( 0, D3DVSDT_FLOAT3 ); 

    // Handle blend weights
    if( dwPositionFVF == D3DFVF_XYZB1 )  Declaration[decl++] = D3DVSD_REG( 1, D3DVSDT_FLOAT1 ); 
    if( dwPositionFVF == D3DFVF_XYZB2 )  Declaration[decl++] = D3DVSD_REG( 1, D3DVSDT_FLOAT2 ); 
    if( dwPositionFVF == D3DFVF_XYZB3 )  Declaration[decl++] = D3DVSD_REG( 1, D3DVSDT_FLOAT3 ); 
    if( dwPositionFVF == D3DFVF_XYZB4 )  Declaration[decl++] = D3DVSD_REG( 1, D3DVSDT_FLOAT4 ); 

    // Handle normal, diffuse, and specular
    if( dwFVF & D3DFVF_NORMAL )          Declaration[decl++] = D3DVSD_REG( 2, D3DVSDT_FLOAT3 );
    if( dwFVF & D3DFVF_DIFFUSE )         Declaration[decl++] = D3DVSD_REG( 3, D3DVSDT_D3DCOLOR );
    if( dwFVF & D3DFVF_SPECULAR )        Declaration[decl++] = D3DVSD_REG( 4, D3DVSDT_D3DCOLOR );

    // Handle texture coordinates
    DWORD dwNumTextures = (dwFVF & D3DFVF_TEXCOUNT_MASK) >> D3DFVF_TEXCOUNT_SHIFT;

    for( DWORD i=0; i<dwNumTextures; i++ )
    {
        DWORD dwNumTexCoords = 0;
        if( ( dwFVF & D3DFVF_TEXCOORDSIZE1(i) ) == (DWORD)D3DFVF_TEXCOORDSIZE1(i) )
            dwNumTexCoords = D3DVSDT_FLOAT1;
        if( ( dwFVF & D3DFVF_TEXCOORDSIZE2(i) ) == (DWORD)D3DFVF_TEXCOORDSIZE2(i) )
            dwNumTexCoords = D3DVSDT_FLOAT2;
        if( ( dwFVF & D3DFVF_TEXCOORDSIZE3(i) ) == (DWORD)D3DFVF_TEXCOORDSIZE3(i) )
            dwNumTexCoords = D3DVSDT_FLOAT3;
        if( ( dwFVF & D3DFVF_TEXCOORDSIZE4(i) ) == (DWORD)D3DFVF_TEXCOORDSIZE4(i) )
            dwNumTexCoords = D3DVSDT_FLOAT4;

        Declaration[decl++] = D3DVSD_REG( 9 + i, dwNumTexCoords );
    }

    // End the declarator
    Declaration[decl++] = D3DVSD_END();

    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\xbinput.cpp ===
//-----------------------------------------------------------------------------
// File: XBInput.cpp
//
// Desc: Input helper functions for the XBox samples
//
// Hist: 12.15.00 - Separated from XBUtil.cpp for December XDK release
//       01.03.00 - Made changes for real Xbox controller
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include <xtl.h>
#include "XBInput.h"




//-----------------------------------------------------------------------------
// Globals
//-----------------------------------------------------------------------------

// Deadzone for thumbsticks
#define XBINPUT_DEADZONE 0.25

// Threshold for analog buttons
#define XBINPUT_BUTTONTHRESHOLD 1

// Global instance of gamepad devices
XBGAMEPAD g_Gamepads[4];




//-----------------------------------------------------------------------------
// Name: XBInput_CreateGamepads()
// Desc: Creates the gamepad devices
//-----------------------------------------------------------------------------
HRESULT XBInput_CreateGamepads( XBGAMEPAD** ppGamepads )
{
    // Get a mask of all currently available devices
    DWORD dwDeviceMask = XGetDevices( XDEVICE_TYPE_GAMEPAD );

    // Open the devices
    for( DWORD i=0; i < XGetPortCount(); i++ )
    {
        ZeroMemory( &g_Gamepads[i], sizeof(XBGAMEPAD) );
        if( dwDeviceMask & (1<<i) ) 
        {
            // Get a handle to the device
            g_Gamepads[i].hDevice = XInputOpen( XDEVICE_TYPE_GAMEPAD, i, 
                                                XDEVICE_NO_SLOT, NULL );

            // Store capabilites of the device
            XInputGetCapabilities( g_Gamepads[i].hDevice, &g_Gamepads[i].caps );
        }
    }

    // Created devices are kept global, but for those who prefer member
    // variables, they can get a pointer to the gamepads returned.
    if( ppGamepads )
        (*ppGamepads) = g_Gamepads;

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: XBInput_GetInput()
// Desc: Processes input from the gamepads
//-----------------------------------------------------------------------------
VOID XBInput_GetInput( XBGAMEPAD* pGamepads )
{
    if( NULL == pGamepads )
        pGamepads = g_Gamepads;

    // Get status about gamepad insertions and removals. Note that, in order to
    // not miss devices, we will check for removed device BEFORE checking for
    // insertions
    DWORD dwInsertions, dwRemovals;
    XGetDeviceChanges( XDEVICE_TYPE_GAMEPAD, &dwInsertions, &dwRemovals );

    // Loop through all gamepads
    for( DWORD i=0; i < XGetPortCount(); i++ )
    {
        // Handle removed devices.
        if( dwRemovals & (1<<i) ) 
        {
            XInputClose( pGamepads[i].hDevice );
            pGamepads[i].hDevice = NULL;
        }

        // Handle inserted devices
        pGamepads[i].bInserted = FALSE;
        if( dwInsertions & (1<<i) ) 
        {
            pGamepads[i].hDevice = XInputOpen( XDEVICE_TYPE_GAMEPAD, i, 
                                               XDEVICE_NO_SLOT, NULL );
            XInputGetCapabilities( g_Gamepads[i].hDevice, &g_Gamepads[i].caps );
            pGamepads[i].bInserted = TRUE;
        }

        // If we have a valid device, poll it's state and track button changes
        if( pGamepads[i].hDevice )
        {
            // Read the input state
            XINPUT_STATE xiState;
            XInputGetState( pGamepads[i].hDevice, &xiState );

            // Copy gamepad to local structure
            pGamepads[i].wButtons          = xiState.Gamepad.wButtons;
            pGamepads[i].bAnalogButtons[0] = xiState.Gamepad.bAnalogButtons[0];
            pGamepads[i].bAnalogButtons[1] = xiState.Gamepad.bAnalogButtons[1];
            pGamepads[i].bAnalogButtons[2] = xiState.Gamepad.bAnalogButtons[2];
            pGamepads[i].bAnalogButtons[3] = xiState.Gamepad.bAnalogButtons[3];
            pGamepads[i].bAnalogButtons[4] = xiState.Gamepad.bAnalogButtons[4];
            pGamepads[i].bAnalogButtons[5] = xiState.Gamepad.bAnalogButtons[5];
            pGamepads[i].bAnalogButtons[6] = xiState.Gamepad.bAnalogButtons[6];
            pGamepads[i].bAnalogButtons[7] = xiState.Gamepad.bAnalogButtons[7];
            pGamepads[i].sThumbLX          = xiState.Gamepad.sThumbLX;
            pGamepads[i].sThumbLY          = xiState.Gamepad.sThumbLY;
            pGamepads[i].sThumbRX          = xiState.Gamepad.sThumbRX;
            pGamepads[i].sThumbRY          = xiState.Gamepad.sThumbRY;

            // Put Xbox device input for the gamepad into our custom format
            pGamepads[i].fX1 = (pGamepads[i].sThumbLX+0.5f)/32767.5f;
            if( fabsf(pGamepads[i].fX1) < XBINPUT_DEADZONE )
                pGamepads[i].fX1 = 0.0f;

            pGamepads[i].fY1 = (pGamepads[i].sThumbLY+0.5f)/32767.5f;
            if( fabsf(pGamepads[i].fY1) < XBINPUT_DEADZONE )
                pGamepads[i].fY1 = 0.0f;

            pGamepads[i].fX2 = (pGamepads[i].sThumbRX+0.5f)/32767.5f;
            if( fabsf(pGamepads[i].fX2) < XBINPUT_DEADZONE )
                pGamepads[i].fX2 = 0.0f;

            pGamepads[i].fY2 = (pGamepads[i].sThumbRY+0.5f)/32767.5f;
            if( fabsf(pGamepads[i].fY2) < XBINPUT_DEADZONE ) 
                pGamepads[i].fY2 = 0.0f;

            // Get the boolean buttons that have been pressed since the last
            // call. Each button is represented by one bit.
            pGamepads[i].wPressedButtons = ( pGamepads[i].wLastButtons ^ pGamepads[i].wButtons ) & pGamepads[i].wButtons;
            pGamepads[i].wLastButtons    = pGamepads[i].wButtons;

            // Get the analog buttons that have been pressed since the last
            // call. Here, we considered an analog button pressed (a boolean 
            // condition) if that value is >= the threshold.
            for( DWORD b=0; b<8; b++ )
            {
                // Turn the 8-bit polled value into a boolean value
                BOOL bPressed = ( pGamepads[i].bAnalogButtons[b] >= XBINPUT_BUTTONTHRESHOLD );

                if( bPressed )
                    pGamepads[i].bPressedAnalogButtons[b] = !pGamepads[i].bLastAnalogButtons[b];
                else
                    pGamepads[i].bPressedAnalogButtons[b] = FALSE;
                
                // Store the current state for the next time
                pGamepads[i].bLastAnalogButtons[b] = bPressed;
            }
        }
    }
}



//-----------------------------------------------------------------------------
// Name: XBInput_GetPrimaryController()
// Desc: The primary controller is the first controller used by a player.
//       If no controller has been used or the controller has been removed,
//       the primary controller is the controller inserted at the lowest 
//       port number. Function returns NULL if no controller is inserted.
//-----------------------------------------------------------------------------
const XBGAMEPAD* XBInput_GetPrimaryController()
{
    static INT nPrimaryController = -1;

    // If primary controller has been set and hasn't been removed, use it
    const XBGAMEPAD* pGamePad = NULL;
    if( nPrimaryController != -1 )
    {
        pGamePad = &g_Gamepads[ nPrimaryController ];
        if( pGamePad->hDevice != NULL )
            return pGamePad;
    }

    // Primary controller hasn't been set or has been removed...

    // Examine each inserted controller to see if any is being used
    INT nFirst = -1;
    for( DWORD i=0; i < XGetPortCount(); ++i )
    {
        pGamePad = &g_Gamepads[i];
        if( pGamePad->hDevice != NULL )
        {
            // Remember the lowest inserted controller ID
            if( nFirst == -1 )
                nFirst = i;

            // If any button is active, we found the primary controller
            if( XBInput_IsAnyButtonActive( pGamePad ) )
            {
                nPrimaryController = i;
                return pGamePad;
            }
        }
    }

    // No controllers are inserted
    if( nFirst == -1 )
        return NULL;

    // The primary controller hasn't been set and no controller has been
    // used yet, so return the controller on the lowest port number
    pGamePad = &g_Gamepads[ nFirst ];
    return pGamePad;
}




//-----------------------------------------------------------------------------
// Name: XBInput_IsAnyButtonActive()
// Desc: TRUE if any button depressed or any thumbstick offset on the given
//       controller.
//-----------------------------------------------------------------------------
BOOL XBInput_IsAnyButtonActive( const XBGAMEPAD* pGamePad )
{
    // Check digital buttons
    if( pGamePad->wButtons )
        return TRUE;

    // Check analog buttons
    for( DWORD i = 0; i < 8; ++i )
    {
        if( pGamePad->bAnalogButtons[ i ] )
            return TRUE;
    }

    // Check thumbsticks
    if( pGamePad->fX1 >  XBINPUT_DEADZONE ||
        pGamePad->fX1 < -XBINPUT_DEADZONE ||
        pGamePad->fY1 >  XBINPUT_DEADZONE ||
        pGamePad->fY1 < -XBINPUT_DEADZONE )
    {
        return TRUE;
    }

    if( pGamePad->fX2 >  XBINPUT_DEADZONE ||
        pGamePad->fX2 < -XBINPUT_DEADZONE ||
        pGamePad->fY2 >  XBINPUT_DEADZONE ||
        pGamePad->fY2 < -XBINPUT_DEADZONE )
    {
        return TRUE;
    }

    // Nothing active
    return FALSE;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\xbmesh.h ===
//-----------------------------------------------------------------------------
// File: XBMesh.h
//
// Desc: Support code for loading geometry stored in .xbg files. These files
//       typically converted from .x geometry files using the MakeXBG tool. See
//       that tool for more information.
//
//       XBG files were designed to minimalize overhead in the loading and
//       rendering process on the Xbox. The data in a .xbg file is basically
//       stored in one system memory chunk, and one video memory chunk.
//       Therefore, loading a .xbg file is simply two fread() calls followed
//       by some patchup (which turns file offsets into real pointers).
//
//       Geometry files are loaded into arrays of the following structures.
//       XBMESH_FRAME structures contain data to make a frame hierarchy (such
//       as "next" and "child" pointers, plus a transformation matrix). The
//       XMMESH_DATA structure contains data for rendering a mesh (such as
//       the vertex buffer, num of indices, etc.). Finally, the XBMESH_SUBSET
//       structure contains subset properties (materials and textures) and
//       primitive ranges (start index, index count, etc.) for each subset of
//       the data in the XBMESH_DATA structure.
//
//       To use this class, simply instantiate the class, and call Create().
//       Thereafter, the mesh can be rendered with the Render() call. Some
//       render flags are available (see below) to limit what gets rendered.
//       For instance, an app might want to render opaque subsets only, or
//       use a custom vertex shader. For truely custom control, override the
//       CXBMesh class with a new RenderCallback() function, and put any
//       custom pre-rendering code in the callback. The typical use for this
//       is to pass data to a custom vertex shader.
//
// Hist: 11.01.00 - New for November XDK release
//       12.15.00 - Changes for December XDK release
//       03.15.01 - Mass changes (removed D3DX and .x support) for April XDK
//       04.15.01 - Using packed resources for May XDK
//       04.17.01 - 16-byte aligning matrices in the file format
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#ifndef XBMESH_H
#define XBMESH_H
#include "XBResource.h"
#include "XBUtil.h"




// Rendering flags. Default is no flags (0x00000000)
#define XBMESH_OPAQUEONLY      0x00000001 // Only render opaque subsets
#define XBMESH_ALPHAONLY       0x00000002 // Only render alpha subsets

#define XBMESH_NOMATERIALS     0x00000010 // Do not use mesh materials
#define XBMESH_NOTEXTURES      0x00000020 // Do not use mesh textures
#define XBMESH_NOFVF           0x00000040 // Do not use mesh FVF code


// The magic number to identify .xbg files
#define XBG_FILE_ID (((DWORD)'X'<<0)|(((DWORD)'B'<<8))|(((DWORD)'G'<<16))|(2<<24))




//-----------------------------------------------------------------------------
// Name: struct XBMESH_SUBSET
// Desc: Struct to hold data for rendering a mesh
//-----------------------------------------------------------------------------
struct XBMESH_SUBSET
{
    D3DMATERIAL8       mtrl;            // Material for this subset
    LPDIRECT3DTEXTURE8 pTexture;        // Texture
    CHAR               strTexture[64];
    DWORD              dwVertexStart;   // Range of vertices to render
    DWORD              dwVertexCount;
    DWORD              dwIndexStart;    // Range of vertex indices to render
    DWORD              dwIndexCount;
};




//-----------------------------------------------------------------------------
// Name: struct XBMESH_DATA
// Desc: Struct for mesh data
//-----------------------------------------------------------------------------
struct XBMESH_DATA
{
    D3DVertexBuffer   m_VB;            // Mesh geometry
    DWORD             m_dwNumVertices;
    D3DIndexBuffer    m_IB;
    DWORD             m_dwNumIndices;
    
    DWORD             m_dwFVF;         // Mesh vertex info
    DWORD             m_dwVertexSize;
    D3DPRIMITIVETYPE  m_dwPrimType;

    DWORD             m_dwNumSubsets;  // Subset info for rendering calls
    XBMESH_SUBSET*    m_pSubsets;
};




//-----------------------------------------------------------------------------
// Name: struct XBMESHFRAME
// Desc: Struct for building a hierarchy of meshes.
//-----------------------------------------------------------------------------
__declspec(align(16)) struct XBMESH_FRAME
{
    D3DXMATRIX        m_matTransform; // The transformation matrix for this frame
    
    XBMESH_DATA       m_MeshData;     // The mesh data belonging to this frame

    CHAR              m_strName[64];
    
    XBMESH_FRAME*     m_pChild;       // Child and sibling ptrs for the hierarchy
    XBMESH_FRAME*     m_pNext;
};




//-----------------------------------------------------------------------------
// Name: class CXBMesh
// Desc: Wrapper class for loading geoemtry files, and rendering the resulting
//       hierachy of meshes and frames.
//-----------------------------------------------------------------------------
class CXBMesh
{
    // Memory allocated during file loading. Ptrs are retained for cleanup.
    VOID* m_pAllocatedSysMem;
    VOID* m_pAllocatedVidMem;

public:
    // Hierarchy (frames and meshes) of loaded geometry
    XBMESH_FRAME* m_pMeshFrames;
    DWORD         m_dwNumFrames;

    // Internal rendering functions
    virtual HRESULT RenderFrame( LPDIRECT3DDEVICE8 pd3dDevice, XBMESH_FRAME* pMesh, 
                                 DWORD dwFlags );
    virtual HRESULT RenderMesh( LPDIRECT3DDEVICE8 pd3dDevice, XBMESH_DATA* pMesh, 
                                DWORD dwFlags );

    // Internal function to find the radius of sphere centered at zero enclosing mesh.
    float ComputeFrameRadius(XBMESH_FRAME* pFrame, D3DXMATRIX* pParentMat);
    float ComputeMeshRadius(XBMESH_DATA* pMesh, D3DXMATRIX* pMat);

public:
    // Reference counting
    DWORD   m_dwRefCount;
    DWORD   AddRef()  { return ++m_dwRefCount; }
    DWORD   Release() { if( --m_dwRefCount ) return m_dwRefCount;
                        delete this; return 0L; }

public:
    // Constructor/destructor
    CXBMesh();
    virtual ~CXBMesh();

    // Creation function. Call this function to create the hierarchy of frames
    // and meshes from a geometry file.
    HRESULT Create( LPDIRECT3DDEVICE8 pd3dDevice, CHAR* strFilename,
                    CXBPackedResource* pResource = NULL );

    // Access functions
    XBMESH_FRAME* GetFrame( DWORD i ) { return &m_pMeshFrames[i]; }
    XBMESH_DATA*  GetMesh( DWORD i )  { return &m_pMeshFrames[i].m_MeshData; }

    // Overridable callback function (called before anything is rendered). 
    // This is useful for setting vertex shader constants, etc., before
    // rendering.
    virtual BOOL RenderCallback( LPDIRECT3DDEVICE8 pd3dDevice, DWORD dwSubset,
                                 XBMESH_SUBSET* pSubset, DWORD dwFlags ) { return TRUE; }
    
    // Render function. Call this function to render the hierarchy of frames
    // and meshes.
    HRESULT Render( LPDIRECT3DDEVICE8 pd3dDevice, DWORD dwFlags = 0x00000000 );

    // Function to find the radius of sphere centered at zero enclosing mesh.
    float ComputeRadius();
};




#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\XBResource.cpp ===
//-----------------------------------------------------------------------------
// File: XBResource.cpp
//
// Desc: Loads resources from an XPR (Xbox Packed Resource) file.  
//
// Hist: 03.12.01 - New for April XDK release
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include <xtl.h>
#include <xgraphics.h>
#include <stdio.h>
#include "XBUtil.h"
#include "XBResource.h"




//-----------------------------------------------------------------------------
// Name: XBResource_SizeOf()
// Desc: Determines the byte size of a D3DResource
//-----------------------------------------------------------------------------
DWORD XBResource_SizeOf( LPDIRECT3DRESOURCE8 pResource )
{
    switch( pResource->GetType() )
    {
        case D3DRTYPE_TEXTURE:       return sizeof(D3DTexture);
        case D3DRTYPE_VOLUMETEXTURE: return sizeof(D3DVolumeTexture);
        case D3DRTYPE_CUBETEXTURE:   return sizeof(D3DCubeTexture);
        case D3DRTYPE_VERTEXBUFFER:  return sizeof(D3DVertexBuffer);
        case D3DRTYPE_INDEXBUFFER:   return sizeof(D3DIndexBuffer);
        case D3DRTYPE_PALETTE:       return sizeof(D3DPalette);
    }
    return 0;
}




//-----------------------------------------------------------------------------
// Name: CXBPackedResource()
// Desc: Constructor
//-----------------------------------------------------------------------------
CXBPackedResource::CXBPackedResource()
{
    m_pSysMemData    = NULL;
    m_pVidMemData    = NULL;
    m_dwNumResources = 0L;
    m_pResourceTags  = NULL;
}




//-----------------------------------------------------------------------------
// Name: ~CXBPackedResource()
// Desc: Destructor
//-----------------------------------------------------------------------------
CXBPackedResource::~CXBPackedResource()
{
    Destroy();
}




//-----------------------------------------------------------------------------
// Name: GetData()
// Desc: Loads all the texture resources from the given XPR.
//-----------------------------------------------------------------------------
VOID* CXBPackedResource::GetData( const CHAR* strName ) const
{
    if( NULL==m_pResourceTags || NULL==strName )
        return NULL;

    for( DWORD i=0; i<m_dwNumResources; i++ )
    {
        if( !_stricmp( strName, m_pResourceTags[i].strName ) )
            return &m_pSysMemData[m_pResourceTags[i].dwOffset];
    }

    return NULL;
}




//-----------------------------------------------------------------------------
// Name: Create()
// Desc: Loads all the texture resources from the given XPR.
//-----------------------------------------------------------------------------
HRESULT CXBPackedResource::Create( LPDIRECT3DDEVICE8 pd3dDevice, 
                                   const CHAR* strFilename, DWORD dwNumResources,
                                   XBRESOURCE* pResourceTags )
{
    // Find the media file
    CHAR strResourcePath[512];
    if( FAILED( XBUtil_FindMediaFile( strResourcePath, strFilename ) ) )
        return E_FAIL;

    // Open the fileto read the XPR headers
    FILE* file = fopen( strResourcePath, "rb" );
    if( NULL == file )
        return E_FAIL;

    // Read in and verify the XPR magic header
    XPR_HEADER xprh;
    fread( &xprh, sizeof(XPR_HEADER), 1, file );
    if( xprh.dwMagic != XPR_MAGIC_VALUE )
    {
        OutputDebugString( _T("Invalid Xbox Packed Resource (.xpr) file") );
        fclose( file );
        return E_INVALIDARG;
    }

    // Compute memory requirements
    DWORD dwSysMemDataSize = xprh.dwHeaderSize - sizeof(XPR_HEADER);
    DWORD dwVidMemDataSize = xprh.dwTotalSize - xprh.dwHeaderSize;

    // Allocate memory
    m_pSysMemData = new BYTE[dwSysMemDataSize];
    m_pVidMemData = (BYTE*)D3D_AllocContiguousMemory( dwVidMemDataSize, D3DTEXTURE_ALIGNMENT );

    // Read in the data from the file
    fread( m_pSysMemData, dwSysMemDataSize, 1, file );
    fread( m_pVidMemData, dwVidMemDataSize, 1, file );

    // Done with the file
    fclose( file );
    
    // Under UMA emulation, we copy the data from AGP memory to video memory.
    // This will not be necessary with final hardware
    D3D_CopyContiguousMemoryToVideo( m_pVidMemData );

    // Loop over resources, calling Register()
    BYTE* pData = m_pSysMemData;

    for( DWORD i = 0; i < dwNumResources; i++ )
    {
		// Check for userdata
		if( *((DWORD*)pData) & 0x80000000 )
		{
			DWORD dwType = ((DWORD*)pData)[0];
			DWORD dwSize = ((DWORD*)pData)[1];
			pData += 8;

			pData += dwSize;
		}
		else
		{
			// Get the resource
			LPDIRECT3DRESOURCE8 pResource = (LPDIRECT3DRESOURCE8)pData;
    
	        // Register the resource
		    pResource->Register( m_pVidMemData );
        
			// Advance the pointer
			pData += XBResource_SizeOf( pResource );
		}
    }

    // Finally, store number of resources and the resource tags
    m_dwNumResources = dwNumResources;
    m_pResourceTags  = pResourceTags;

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: Destroy()
// Desc: Tears down the packed resource data
//-----------------------------------------------------------------------------
VOID CXBPackedResource::Destroy() 
{
    if( m_pSysMemData != NULL )
    {
        delete[] m_pSysMemData;
        m_pSysMemData = NULL;
    }
    if( m_pVidMemData != NULL )
    {
        D3D_FreeContiguousMemory( m_pVidMemData );
        m_pVidMemData = NULL;
    }
    m_dwNumResources = 0L;
    m_pResourceTags  = NULL;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1016\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_rx1016
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SOURCES=\
    test.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1016\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1016\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\xbmesh.cpp ===
//-----------------------------------------------------------------------------
// File: XBMesh.cpp
//
// Desc: Support code for loading geometry stored in .xbg files. See the
//       <XBMesh.h> header file for information on using this class.
//
// Hist: 11.01.00 - New for November XDK release
//       12.15.00 - Changes for December XDK release
//       03.15.01 - Mass changes (removed D3DX and .x support) for April XDK
//       04.15.01 - Using packed resources for May XDK
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include <xtl.h>
#include <xgmath.h>
#include <stdio.h>
#include "XBMesh.h"
#include "XBUtil.h"




//-----------------------------------------------------------------------------
// Name: CXBMesh()
// Desc: 
//-----------------------------------------------------------------------------
CXBMesh::CXBMesh()
{
    m_pAllocatedSysMem = NULL;
    m_pAllocatedVidMem = NULL;
    m_pMeshFrames      = NULL;
    m_dwNumFrames      = 0;
    m_dwRefCount       = 1L;
}




//-----------------------------------------------------------------------------
// Name: ~CXBMesh()
// Desc: 
//-----------------------------------------------------------------------------
CXBMesh::~CXBMesh()
{
    // Free textures
    for( DWORD i=0; i<m_dwNumFrames; i++ )
    {
        for( DWORD j = 0; j < m_pMeshFrames[i].m_MeshData.m_dwNumSubsets; j++ )
        {
            SAFE_RELEASE( m_pMeshFrames[i].m_MeshData.m_pSubsets[j].pTexture );
        }
    }

    // Free alloacted memory
    if( m_pAllocatedSysMem )
        delete[] m_pAllocatedSysMem;

    if( m_pAllocatedVidMem )
        D3D_FreeContiguousMemory( m_pAllocatedVidMem );
}




//-----------------------------------------------------------------------------
// Name: Create()
// Desc: 
//-----------------------------------------------------------------------------
HRESULT CXBMesh::Create( LPDIRECT3DDEVICE8 pd3dDevice, CHAR* strFilename,
                         CXBPackedResource* pResource )
{
    // Find the media file
    CHAR strMeshPath[512];
    if( FAILED( XBUtil_FindMediaFile( strMeshPath, strFilename ) ) )
        return E_FAIL;

    // Open the file
    FILE* file = fopen( strMeshPath, "rb" );
    if( file == NULL )
    {
        OutputDebugString( _T("CXBFile::Create(): ERROR: File not found!\n") );
        return E_FAIL;
    }

    // Read the magic number
    DWORD dwFileID;
    fread( &dwFileID, 1, sizeof(DWORD), file ); 

    if( dwFileID != XBG_FILE_ID )
    {
        OutputDebugString( _T("CXBFile::Create(): ERROR: Invalid XBG file type!\n") );
        fclose( file );
        return E_FAIL;
    }

    // Read in header
    DWORD dwNumFrames;  // Number of mesh frames in the file
    DWORD dwSysMemSize; // Num bytes needed for system memory objects
    DWORD dwVidMemSize; // Num bytes needed for video memory objects

    fread( &dwNumFrames,  1, sizeof(DWORD), file );
    fread( &dwSysMemSize, 1, sizeof(DWORD), file );
    fread( &dwVidMemSize, 1, sizeof(DWORD), file );

    // Read in system memory objects
    m_pAllocatedSysMem = (VOID*)new BYTE[dwSysMemSize];
    fread( m_pAllocatedSysMem, dwSysMemSize, 1, file );

    // Read in video memory objects
    m_pAllocatedVidMem = D3D_AllocContiguousMemory( dwVidMemSize, D3DVERTEXBUFFER_ALIGNMENT );
    fread( m_pAllocatedVidMem, dwVidMemSize, 1, file ); 
    
    // Done with the file
    fclose( file );

    // Now we need to patch the mesh data. Any pointers read from the file were
    // stored as file offsets. So, we simply need to add a base address to patch
    // things up.
    m_pMeshFrames = (XBMESH_FRAME*)m_pAllocatedSysMem;
    m_dwNumFrames = dwNumFrames;

    for( DWORD i=0; i<m_dwNumFrames; i++ )
    {
        XBMESH_FRAME* pFrame = &m_pMeshFrames[i];
        XBMESH_DATA*  pMesh  = &m_pMeshFrames[i].m_MeshData;

        if( pFrame->m_pChild )
            pFrame->m_pChild  = (XBMESH_FRAME*)( (DWORD)pFrame->m_pChild - 16 + (DWORD)m_pMeshFrames );
        if( pFrame->m_pNext )
            pFrame->m_pNext   = (XBMESH_FRAME*)( (DWORD)pFrame->m_pNext  - 16 + (DWORD)m_pMeshFrames );
        if( pMesh->m_pSubsets )
            pMesh->m_pSubsets = (XBMESH_SUBSET*)( (DWORD)pMesh->m_pSubsets - 16 + (DWORD)m_pMeshFrames);
        
        if( pMesh->m_dwNumIndices )
            pMesh->m_IB.Data  = pMesh->m_IB.Data - 16 + (DWORD)m_pMeshFrames;
        if( pMesh->m_dwNumVertices )
            pMesh->m_VB.Register( m_pAllocatedVidMem );
    }

    // Finally, create any textures used by the meshes' subsets. In this 
    // implementation, we are pulling textures out of the passed in resource.
    if( pResource )
    {
        for( DWORD i=0; i<m_dwNumFrames; i++ )
        {
            XBMESH_DATA* pMesh = &m_pMeshFrames[i].m_MeshData;

            for( DWORD j = 0; j < pMesh->m_dwNumSubsets; j++ )
            {
                XBMESH_SUBSET* pSubset = &pMesh->m_pSubsets[j];

                pSubset->pTexture = pResource->GetTexture( pSubset->strTexture );
            }
        }
    }

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: Render()
// Desc: Renders the hierarchy of frames and meshes.
//-----------------------------------------------------------------------------
HRESULT CXBMesh::Render( LPDIRECT3DDEVICE8 pd3dDevice, DWORD dwFlags )
{
    if( m_pMeshFrames )
        RenderFrame( pd3dDevice, m_pMeshFrames, dwFlags );

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: RenderFrame()
// Desc: Renders a frame (save state, apply matrix, render children, restore).
//-----------------------------------------------------------------------------
HRESULT CXBMesh::RenderFrame( LPDIRECT3DDEVICE8 pd3dDevice, XBMESH_FRAME* pFrame, 
                              DWORD dwFlags )
{
    // Apply the frame's local transform
    D3DXMATRIX matSavedWorld, matWorld;
    pd3dDevice->GetTransform( D3DTS_WORLD, &matSavedWorld );
    D3DXMatrixMultiply( &matWorld, &pFrame->m_matTransform, &matSavedWorld );
    pd3dDevice->SetTransform( D3DTS_WORLD, &matWorld );

    // Render the mesh data
    if( pFrame->m_MeshData.m_dwNumSubsets ) 
        RenderMesh( pd3dDevice, &pFrame->m_MeshData, dwFlags );

    // Render any child frames
    if( pFrame->m_pChild ) 
        RenderFrame( pd3dDevice, pFrame->m_pChild, dwFlags );

    // Restore the transformation matrix
    pd3dDevice->SetTransform( D3DTS_WORLD, &matSavedWorld );
    
    // Render any sibling frames
    if( pFrame->m_pNext )  
        RenderFrame( pd3dDevice, pFrame->m_pNext, dwFlags );

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: RenderMesh()
// Desc: Renders the mesh geometry.
//-----------------------------------------------------------------------------
HRESULT CXBMesh::RenderMesh( LPDIRECT3DDEVICE8 pd3dDevice, XBMESH_DATA* pMesh, 
                             DWORD dwFlags )
{
    D3DVertexBuffer* pVB           = &pMesh->m_VB;
    DWORD            dwNumVertices =  pMesh->m_dwNumVertices;
    D3DIndexBuffer*  pIB           = &pMesh->m_IB;
    DWORD            dwNumIndices  =  pMesh->m_dwNumIndices;
    DWORD            dwFVF         =  pMesh->m_dwFVF;
    DWORD            dwVertexSize  =  pMesh->m_dwVertexSize;
    D3DPRIMITIVETYPE dwPrimType    =  pMesh->m_dwPrimType;
    DWORD            dwNumSubsets  =  pMesh->m_dwNumSubsets;
    XBMESH_SUBSET*   pSubsets      = &pMesh->m_pSubsets[0];

    if( dwNumVertices == 0 )
        return S_OK;

    // Set the vertex stream
    pd3dDevice->SetStreamSource( 0, pVB, dwVertexSize );
    pd3dDevice->SetIndices( pIB, 0 );

    // Set the FVF code, unless the user asked us not to
    if( 0 == ( dwFlags & XBMESH_NOFVF ) )
        pd3dDevice->SetVertexShader( dwFVF );

    // Render the subsets
    for( DWORD i = 0; i < dwNumSubsets; i++ )
    {
        BOOL bRender = FALSE;

        // Render the opaque subsets, unless the user asked us not to
        if( 0 == ( dwFlags & XBMESH_ALPHAONLY ) )
        {
            if( 0 == ( dwFlags & XBMESH_NOMATERIALS ) )
            {
                if( pSubsets[i].mtrl.Diffuse.a >= 1.0f )
                    bRender = TRUE;
            }
            else
                bRender = TRUE;
        }

        // Render the transparent subsets, unless the user asked us not to
        if( 0 == ( dwFlags & XBMESH_OPAQUEONLY ) )
        {
            if( 0 == ( dwFlags & XBMESH_NOMATERIALS ) )
            {
                if( pSubsets[i].mtrl.Diffuse.a < 1.0f )
                    bRender = TRUE;
            }
        }

        if( bRender )
        {
            // Set the material, unless the user asked us not to
            if( 0 == ( dwFlags & XBMESH_NOMATERIALS ) )
                pd3dDevice->SetMaterial( &pSubsets[i].mtrl );

            // Set the texture, unless the user asked us not to
            if( 0 == ( dwFlags & XBMESH_NOTEXTURES ) )
                pd3dDevice->SetTexture( 0, pSubsets[i].pTexture );

            // Call the callback, so the app can tweak state before rendering
            // each subset
            BOOL bRenderSubset = RenderCallback( pd3dDevice, i, &pSubsets[i], dwFlags );

            // Draw the mesh subset
            if( bRenderSubset )
            {
                DWORD dwNumPrimitives = ( D3DPT_TRIANGLESTRIP == dwPrimType ) ? pSubsets[i].dwIndexCount-2 : pSubsets[i].dwIndexCount/3;
                pd3dDevice->DrawIndexedPrimitive( dwPrimType, 0, pSubsets[i].dwIndexCount,
                                                  pSubsets[i].dwIndexStart, dwNumPrimitives );
            }
        }
    }

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: ComputeRadius()
// Desc: Finds the farthest point from zero on the mesh.
//-----------------------------------------------------------------------------
FLOAT CXBMesh::ComputeRadius()
{
    D3DXMATRIX matIdentity;
    D3DXMatrixIdentity( &matIdentity );

    return ComputeFrameRadius( m_pMeshFrames, &matIdentity );
}




//-----------------------------------------------------------------------------
// Name: ComputeFrameRadius()
// Desc: Calls ComputeMeshRadius for each frame with the correct transform.
//-----------------------------------------------------------------------------
FLOAT CXBMesh::ComputeFrameRadius( XBMESH_FRAME* pFrame, D3DXMATRIX* pmatParent )
{
    // Apply the frame's local transform
    D3DXMATRIX matWorld;
    D3DXMatrixMultiply( &matWorld, &pFrame->m_matTransform, pmatParent );

    FLOAT fRadius = 0.0f;

    // Compute bounds for the mesh data
    if( pFrame->m_MeshData.m_dwNumSubsets ) 
        fRadius = ComputeMeshRadius( &pFrame->m_MeshData, &matWorld );

    // Compute bounds for any child frames
    if( pFrame->m_pChild ) 
    {
        FLOAT fChildRadius = ComputeFrameRadius( pFrame->m_pChild, &matWorld  );

        if( fChildRadius > fRadius )
            fRadius = fChildRadius;
    }

    // Compute bounds for any sibling frames
    if( pFrame->m_pNext )  
    {
        FLOAT fSiblingRadius = ComputeFrameRadius( pFrame->m_pNext, pmatParent );

        if( fSiblingRadius > fRadius )
            fRadius = fSiblingRadius;
    }

    return fRadius;
}




//-----------------------------------------------------------------------------
// Name: ComputeMeshRadius()
// Desc: Finds the farthest point from zero on the mesh.
//-----------------------------------------------------------------------------
FLOAT CXBMesh::ComputeMeshRadius( XBMESH_DATA* pMesh, D3DXMATRIX* pmat )
{
    DWORD       dwNumVertices = pMesh->m_dwNumVertices;
    DWORD       dwVertexSize  = pMesh->m_dwVertexSize;
    BYTE*       pVertices;
    D3DXVECTOR3 vPos;
    FLOAT       fMaxDist2 = 0.0f;

    pMesh->m_VB.Lock( 0, 0, &pVertices, 0 );

    while( dwNumVertices-- )
    {
        D3DXVec3TransformCoord( &vPos, (D3DXVECTOR3*)pVertices, pmat );

        FLOAT fDist2 = vPos.x*vPos.x + vPos.y*vPos.y + vPos.z*vPos.z;

        if( fDist2 > fMaxDist2 )
            fMaxDist2 = fDist2;

        pVertices += dwVertexSize;
    }

    pMesh->m_VB.Unlock();

    return sqrtf( fMaxDist2 );
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1032\dtypes.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    dtypes.h

Author:

    Matt Bronder

Description:

    Various type definitions.

*******************************************************************************/

#ifndef __DTYPES_H__
#define __DTYPES_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FVF_VERTEX              (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1)
#define FVF_BVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3)
#define FVF_BVERTEX2            (D3DFVF_XYZ | D3DFVF_TEX2)
#define FVF_NVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3 | \
                                              D3DFVF_TEXCOORDSIZE2(0) | \
                                              D3DFVF_TEXCOORDSIZE2(1) | \
                                              D3DFVF_TEXCOORDSIZE3(2))
#define FVF_LVERTEX             (D3DFVF_XYZ | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLVERTEX            (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLBVERTEX           (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX2)
#define FVF_CVERTEX             (D3DFVF_XYZ | D3DFVF_NORMAL)
#define FVF_CVERTEX1_3          (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 | \
                                 D3DFVF_TEXCOORDSIZE3(0))

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _TCOORD {
    float               u;
    float               v;
} TCOORD, *PTCOORD;

//******************************************************************************
typedef struct _TCOORD2 {
    float               u;
    float               v;
} TCOORD2, *PTCOORD2;

//******************************************************************************
typedef struct _TCOORD3 {
    float               u;
    float               v;
    float               t;
} TCOORD3, *PTCOORD3;

//******************************************************************************
typedef struct _MATRIX3X3 {
    union {
        struct {
            float _11, _12, _13;
            float _21, _22, _23;
            float _31, _32, _33;
        };
        float m[3][3];
        struct {
            D3DXVECTOR3 r1;
            D3DXVECTOR3 r2;
            D3DXVECTOR3 r3;
        };
    };
} MATRIX3X3, *PMATRIX3X3;

//******************************************************************************
typedef struct _VERTEX {
    D3DXVECTOR3 vPosition;
    D3DXVECTOR3 vNormal;
    float       u0, v0;

    _VERTEX() {}
    _VERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0;
    }
} VERTEX, *PVERTEX;

//******************************************************************************
typedef struct _BVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (bump) map coordinates
    float       u2, v2;         // Diffuse light map coordinates

    _BVERTEX() {}
    _BVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2;
    }
} BVERTEX, *PBVERTEX;

//******************************************************************************
typedef struct _BVERTEX2 {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates and height (bump) map coordinates
    float       u1, v1;         // Diffuse light map coordinates

    _BVERTEX2() {}
    _BVERTEX2(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} BVERTEX2, *PBVERTEX2;

//******************************************************************************
typedef struct _NVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (normal) map coordinates
    float       u2, v2, t2;     // Light direction in tangent space

    _NVERTEX() {}
    _NVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2, float _t2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2; t2 = _t2;
    }
} NVERTEX, *PNVERTEX;

//******************************************************************************
typedef struct _LVERTEX {
    D3DXVECTOR3 vPosition;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _LVERTEX() { }
    _LVERTEX(const D3DVECTOR& v, D3DCOLOR _cDiffuse, D3DCOLOR _cSpecular, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} LVERTEX, *PLVERTEX;

//******************************************************************************
typedef struct _TLVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _TLVERTEX() {}
    _TLVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} TLVERTEX, *PTLVERTEX;

//******************************************************************************
typedef struct _TLBVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;
    float       u1, v1;

    _TLBVERTEX() {}
    _TLBVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0, float _u1, float _v1) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} TLBVERTEX, *PTLBVERTEX;

//******************************************************************************
typedef struct _CVERTEX {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;

    _CVERTEX() { }
    _CVERTEX(const D3DVECTOR& v, const D3DVECTOR& n) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
    }
} CVERTEX, *PCVERTEX;

//******************************************************************************
typedef struct _VERTEX1_3 {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;
    float         u0, v0, t0;

    _VERTEX1_3() { }
    _VERTEX1_3(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0, float _t0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0; t0 = _t0;
    }
} VERTEX1_3, *PVERTEX1_3;

#endif //__DTYPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1032\test.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.h

Author:

    Matt Bronder

Description:

    Direct3D repro test functions.

*******************************************************************************/

#ifndef __TEST_H__
#define __TEST_H__

//******************************************************************************
class CReproTest {

protected:

    HINSTANCE                       m_hInstance;
    HWND                            m_hWnd;

    LPDIRECT3D8                     m_pd3d;
    LPDIRECT3DDEVICE8               m_pDevice;

    LPDIRECT3DVERTEXBUFFER8         m_pd3dr;

public:

                                    CReproTest();
                                    ~CReproTest();

    virtual BOOL                    Create(HINSTANCE hInstance);
    virtual BOOL                    Run();

protected:

    virtual BOOL                    InitDeviceState();
    virtual BOOL                    SetViewport(DWORD dwWidth, DWORD dwHeight);
};

//******************************************************************************
LRESULT CALLBACK    WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

void                InitMatrix(D3DMATRIX* pd3dm,
                        float _11, float _12, float _13, float _14,
                        float _21, float _22, float _23, float _24,
                        float _31, float _32, float _33, float _34,
                        float _41, float _42, float _43, float _44);

void                SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, 
                        LPD3DXVECTOR3 pvAt, LPD3DXVECTOR3 pvUp);

void                SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, 
                        float fBack, float fFieldOfView, float fAspect);

#endif //__TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1032\util.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.cpp

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef UNDER_XBOX
#include <windows.h>
#else
#include <xtl.h>
#endif // UNDER_XBOX
#include <d3dx8.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include "util.h"

//******************************************************************************
// Globals
//******************************************************************************

static HANDLE               g_hHeap = NULL;

//******************************************************************************
// Debugging functions
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
#ifndef UNDER_XBOX
    TCHAR   szBuffer[2304];
#else
    TCHAR*  szBuffer = (LPTSTR)MemAlloc32(2304 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }
#endif // UNDER_XBOX

    va_start(vl, szFormat);
//    wvsprintf(szBuffer, szFormat, vl);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

#ifdef UNDER_XBOX
    MemFree32(szBuffer);
#endif // UNDER_XBOX
}

//******************************************************************************
//
// Function:
//
//     ResultFailed
//
// Description:
//
//     Test a given return code: if the code is an error, output a debug 
//     message with the error value.  If the code is a warning, output
//     a debug message with the warning value.
//
// Arguments:
//
//     HRESULT hr               - Return code to test for an error
//
//     LPCTSTR sz               - String describing the method that produced 
//                                the return code
//
// Return Value:
//
//     TRUE if the given return code is an error, FALSE otherwise.
//
//******************************************************************************
BOOL ResultFailed(HRESULT hr, LPCTSTR sz) {

    TCHAR szError[256];

    if (SUCCEEDED(hr)) {
        return FALSE;
    }

    D3DXGetErrorString(hr, szError, 256);

    if (FAILED(hr)) {
        DebugString(TEXT("%s failed with %s [0x%X]"), sz, szError, hr);
        return TRUE;
    }
    else {
        DebugString(TEXT("%s returned %s [0x%X]"), sz, szError, hr);
    }

    return FALSE;
}
#endif // DEBUG || _DEBUG

//******************************************************************************
// Memory allocation routines
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateHeap
//
// Description:
//
//     Create a heap for the application.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateHeap() {

    if (g_hHeap) {
        return FALSE;
    }

    g_hHeap = HeapCreate(0, 0, 0);
    if (!g_hHeap) {
        DebugString(TEXT("HeapCreate failed [%d]"), GetLastError());
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseHeap
//
// Description:
//
//     Destroy the application heap.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseHeap() {

    if (g_hHeap) {
        if (!HeapDestroy(g_hHeap)) {
            DebugString(TEXT("HeapDestroy failed [%d]"), GetLastError());
        }
        g_hHeap = NULL;
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc
//
// Description:
//
//     Allocate the given amount of memory from the application heap.  This 
//     memory should later be freed using the MemFree function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc(UINT uNumBytes) {

    LPVOID pvMem = NULL;
    if (g_hHeap) {
        pvMem = HeapAlloc(g_hHeap, 0, uNumBytes);
    }
    return pvMem;
}

//******************************************************************************
//
// Function:
//
//     MemFree
//
// Description:
//
//     Free a block of memory that was allocated using the MemAlloc function.
//
// Arguments:
//
//     LPVOID pvMem             - Base address of the memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree(LPVOID pvMem) {

    if (g_hHeap) {
        if (!HeapFree(g_hHeap, 0, pvMem)) {
            DebugString(TEXT("HeapFree failed [%d]"), GetLastError());
        }
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc32
//
// Description:
//
//     Allocate a given amount of memory whose base address is
//     aligned along a 32 byte boundary.  This memory must later be freed
//     using the MemFree32 function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc32(UINT uNumBytes)
{
	LPBYTE pbyAllocated, pbyAligned = NULL;

	pbyAllocated = (LPBYTE)MemAlloc(uNumBytes + 32);
    if (pbyAllocated) {
	    pbyAligned   = (LPBYTE)((((DWORD)pbyAllocated) + 32) & ~31);
	    *(((LPDWORD)pbyAligned)-1) = (DWORD)pbyAllocated;
    }
	return pbyAligned;
}

//******************************************************************************
//
// Function:
//
//     MemFree32
//
// Description:
//
//     Free an aligned block of memory that was allocated using the MemAlloc32
//     function.
//
// Arguments:
//
//     LPVOID pvAligned         - Base address of the aligned memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree32(LPVOID pvMem)
{
	LPBYTE pbyFree;

    if (pvMem) {
	    pbyFree = (LPBYTE)*(((LPDWORD)pvMem)-1);
	    MemFree(pbyFree);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\tiling\xbutil.h ===
//-----------------------------------------------------------------------------
// File: XBUtil.h
//
// Desc: Shortcut macros and helper functions for the XBox samples
//
// Hist: 11.01.00 - New for November XDK release
//       12.01.00 - Moved input code to XBInput.cpp
//       12.15.00 - Changes for December XDK release
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#ifndef XBUTIL_H
#define XBUTIL_H

#include <tchar.h>




//-----------------------------------------------------------------------------
// Miscellaneous helper functions
//-----------------------------------------------------------------------------

// For deleting and releasing objects
#define SAFE_DELETE(p)       { delete (p);     (p)=NULL; }
#define SAFE_DELETE_ARRAY(p) { delete[] (p);   (p)=NULL; }
#define SAFE_RELEASE(p)      { if(p) { (p)->Release(); (p)=NULL; } }

// For converting a FLOAT to a DWORD (useful for SetRenderState() calls)
inline DWORD FtoDW( FLOAT f ) { return *((DWORD*)&f); }




//-----------------------------------------------------------------------------
// Name: XBUtil_SetMediaPath() and XBUtil_FindMediaFile()
// Desc: Functions for setting a media path and returning a valid path to a
//       media file.
//-----------------------------------------------------------------------------
VOID    XBUtil_SetMediaPath( const CHAR* strPath );
HRESULT XBUtil_FindMediaFile( CHAR* strPath, const CHAR* strFilename );




//-----------------------------------------------------------------------------
// Name: XBUtil_Timer()
// Desc: Performs timer operations. Use the following commands:
//          TIMER_RESET           - to reset the timer
//          TIMER_START           - to start the timer
//          TIMER_STOP            - to stop (or pause) the timer
//          TIMER_ADVANCE         - to advance the timer by 0.1 seconds
//          TIMER_RETRACT         - to retract the timer by 0.1 seconds
//          TIMER_GETABSOLUTETIME - to get the absolute system time
//          TIMER_GETAPPTIME      - to get the current time
//-----------------------------------------------------------------------------
enum TIMER_COMMAND { TIMER_RESET, TIMER_START, TIMER_STOP, 
                     TIMER_ADVANCE, TIMER_RETRACT, 
                     TIMER_GETABSOLUTETIME, TIMER_GETAPPTIME };
FLOAT XBUtil_Timer( TIMER_COMMAND command );




//-----------------------------------------------------------------------------
// Name: XBUtil_InitMaterial()
// Desc: Initializes a D3DMATERIAL8 structure, setting the diffuse and ambient
//       colors. It does not set emissive or specular colors.
//-----------------------------------------------------------------------------
VOID XBUtil_InitMaterial( D3DMATERIAL8& mtrl, FLOAT r=0.0f, FLOAT g=0.0f,
                                              FLOAT b=0.0f, FLOAT a=1.0f );




//-----------------------------------------------------------------------------
// Name: XBUtil_InitLight()
// Desc: Initializes a D3DLIGHT structure, setting the light position. The
//       diffuse color is set to white, specular and ambient left as black.
//-----------------------------------------------------------------------------
VOID XBUtil_InitLight( D3DLIGHT8& light, D3DLIGHTTYPE ltType,
                       FLOAT x=0.0f, FLOAT y=0.0f, FLOAT z=0.0f );




//-----------------------------------------------------------------------------
// Name: XBUtil_CreateTexture()
// Desc: Helper function to create a texture.
//-----------------------------------------------------------------------------
HRESULT XBUtil_CreateTexture( LPDIRECT3DDEVICE8 pd3dDevice, const CHAR* strTexture,
                              LPDIRECT3DTEXTURE8* ppTexture,
                              D3DFORMAT d3dFormat = D3DFMT_UNKNOWN );




//-----------------------------------------------------------------------------
// Name: XBUtil_UnswizzleTexture() / XBUtil_SwizzleTexture()
// Desc: Unswizzles / swizzles a texture before it gets unlocked. Note: this
//       operation is typically very slow.
//-----------------------------------------------------------------------------
VOID XBUtil_UnswizzleTexture2D( D3DLOCKED_RECT* pLock, const D3DSURFACE_DESC* pDesc );
VOID XBUtil_UnswizzleTexture3D( D3DLOCKED_BOX* pLock, const D3DVOLUME_DESC* pDesc );
VOID XBUtil_SwizzleTexture2D( D3DLOCKED_RECT* pLock, const D3DSURFACE_DESC* pDesc );
VOID XBUtil_SwizzleTexture3D( D3DLOCKED_BOX* pLock, const D3DVOLUME_DESC* pDesc );




//-----------------------------------------------------------------------------
// Name: XBUtil_CreateVertexShader()
// Desc: Creates a file-based vertex shader
//-----------------------------------------------------------------------------
HRESULT XBUtil_CreateVertexShader( LPDIRECT3DDEVICE8 pd3dDevice, 
                                   const CHAR* strFilename, 
                                   const DWORD* pdwVertexDecl,
                                   DWORD* pdwVertexShader );




//-----------------------------------------------------------------------------
// Name: XBUtil_CreatePixelShader()
// Desc: Creates a file-based pixel shader
//-----------------------------------------------------------------------------
HRESULT XBUtil_CreatePixelShader( LPDIRECT3DDEVICE8 pd3dDevice, 
                                  const CHAR* strFilename, DWORD* pdwPixelShader );

                                    
                                    
                                    
//-----------------------------------------------------------------------------
// Name: XBUtil_VectorToRGBA()
// Desc: Converts a normal into an RGBA vector.
//-----------------------------------------------------------------------------
inline D3DCOLOR XBUtil_VectorToRGBA( const D3DXVECTOR3* v, FLOAT fHeight = 1.0f )
{
    D3DCOLOR r = (D3DCOLOR)( ( v->x + 1.0f ) * 127.5f );
    D3DCOLOR g = (D3DCOLOR)( ( v->y + 1.0f ) * 127.5f );
    D3DCOLOR b = (D3DCOLOR)( ( v->z + 1.0f ) * 127.5f );
    D3DCOLOR a = (D3DCOLOR)( 255.0f * fHeight );
    return( (a<<24L) + (r<<16L) + (g<<8L) + (b<<0L) );
}




//-----------------------------------------------------------------------------
// Name: XBUtil_GetCubeMapViewMatrix()
// Desc: Returns a view matrix for rendering to a face of a cubemap.
//-----------------------------------------------------------------------------
D3DXMATRIX XBUtil_GetCubeMapViewMatrix( DWORD dwFace );




//-----------------------------------------------------------------------------
// Name: XBUtil_CreateNormalizationCubeMap()
// Desc: Creates a cubemap and fills it with normalized RGBA vectors.
//-----------------------------------------------------------------------------
HRESULT XBUtil_CreateNormalizationCubeMap( LPDIRECT3DDEVICE8 pd3dDevice, 
                                           DWORD dwSize, 
                                           LPDIRECT3DCUBETEXTURE8* ppCubeMap );




//-----------------------------------------------------------------------------
// Name: XBUtil_DumpSurface()
// Desc: Writes the contents of a surface (32-bit only) to a .tga file. This
//       could be a backbuffer, texture, or any other 32-bit surface.
//-----------------------------------------------------------------------------
HRESULT XBUtil_DumpSurface( LPDIRECT3DSURFACE8 pSurface, const CHAR* strFileName );




//-----------------------------------------------------------------------------
// Name: XBUtil_EvaluateHermite()
// Desc: Evaluate a cubic parametric equation. Returns the point at u on a
//       Hermite curve.
//-----------------------------------------------------------------------------
D3DXVECTOR3 XBUtil_EvaluateHermite( const D3DXVECTOR3& p0, const D3DXVECTOR3& p1, 
                                    const D3DXVECTOR3& v0, const D3DXVECTOR3& v1,
                                    FLOAT u );




//-----------------------------------------------------------------------------
// Name: XBUtil_EvaluateCatmullRom()
// Desc: Evaluate a cubic parametric equation. Returns the point at u on a
//       Catmull-Rom curve.
//-----------------------------------------------------------------------------
D3DXVECTOR3 XBUtil_EvaluateCatmullRom( const D3DXVECTOR3& p1, const D3DXVECTOR3& p2, 
                                       const D3DXVECTOR3& p3, const D3DXVECTOR3& p4,
                                       FLOAT u );




//-----------------------------------------------------------------------------
// Name: XBUtil_GetSplinePoint()
// Desc: Returns a point on a spline. The spline is defined by an array of
//       points, and the point and tangent returned are located at position t
//       on the spline, where 0 < t < dwNumSpinePts.
//-----------------------------------------------------------------------------
VOID XBUtil_GetSplinePoint( const D3DXVECTOR3* pSpline, DWORD dwNumSpinePts, FLOAT t, 
                            D3DXVECTOR3* pvPoint, D3DXVECTOR3* pvTangent );




//-----------------------------------------------------------------------------
// Name: XBUtil_RenderSpline()
// Desc: For debugging purposes, visually renders a spline.
//-----------------------------------------------------------------------------
VOID XBUtil_RenderSpline( LPDIRECT3DDEVICE8 pd3dDevice, const D3DXVECTOR3* pSpline, 
                          DWORD dwNumSplinePts, DWORD dwColor, BOOL bRenderAxes );




//-----------------------------------------------------------------------------
// Name: XBUtil_DeclaratorFromFVF()
// Desc: Create a vertex declaration from an FVF. Registers are assigned as
//       follows:
//          v0    = Vertex position
//          v1    = Vertex blend weights
//          v2    = Vertex normal
//          v3    = Vertex pointsize
//          v4    = Vertex diffuse color
//          v5    = Vertex specular color
//          v6-v9 = Vertex texture coords
//-----------------------------------------------------------------------------
HRESULT XBUtil_DeclaratorFromFVF( DWORD dwFVF, 
								  DWORD Declaration[MAX_FVF_DECL_SIZE] );

#endif // XBUTIL_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1032\util.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.h

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef __UTIL_H__
#define __UTIL_H__

//******************************************************************************
// Precomputed fractions of pi
//******************************************************************************

#define M_PI        3.14159265359f
#define M_2PI       6.28318530718f
#define M_PIDIV2    1.57079632680f
#define M_3PIDIV2   4.71238898039f
#define M_PIDIV4    0.78539816340f
#define M_3PIDIV4   2.35619449019f
#define M_5PIDIV4   3.92699081699f
#define M_7PIDIV4   5.49778714378f

#ifndef RGB_MAKE
/*
 * Format of CI colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |         color index           |   fraction    |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define CI_GETALPHA(ci)    ((ci) >> 24)
#define CI_GETINDEX(ci)    (((ci) >> 8) & 0xffff)
#define CI_GETFRACTION(ci) ((ci) & 0xff)
#define CI_ROUNDINDEX(ci)  CI_GETINDEX((ci) + 0x80)
#define CI_MASKALPHA(ci)   ((ci) & 0xffffff)
#define CI_MAKE(a, i, f)    (((a) << 24) | ((i) << 8) | (f))

/*
 * Format of RGBA colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGBA_GETALPHA(rgb)      ((rgb) >> 24)
#define RGBA_GETRED(rgb)        (((rgb) >> 16) & 0xff)
#define RGBA_GETGREEN(rgb)      (((rgb) >> 8) & 0xff)
#define RGBA_GETBLUE(rgb)       ((rgb) & 0xff)
#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

/* D3DRGB and D3DRGBA may be used as initialisers for D3DCOLORs
 * The float values must be in the range 0..1
 */
#define D3DRGB(r, g, b) \
    (0xff000000L | ( ((long)((r) * 255)) << 16) | (((long)((g) * 255)) << 8) | (long)((b) * 255))
#define D3DRGBA(r, g, b, a) \
    (   (((long)((a) * 255)) << 24) | (((long)((r) * 255)) << 16) \
    |   (((long)((g) * 255)) << 8) | (long)((b) * 255) \
    )

/*
 * Format of RGB colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    ignored    |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGB_GETRED(rgb)         (((rgb) >> 16) & 0xff)
#define RGB_GETGREEN(rgb)       (((rgb) >> 8) & 0xff)
#define RGB_GETBLUE(rgb)        ((rgb) & 0xff)
#define RGBA_SETALPHA(rgba, x) (((x) << 24) | ((rgba) & 0x00ffffff))
#define RGB_MAKE(r, g, b)       ((D3DCOLOR) (((r) << 16) | ((g) << 8) | (b)))
#define RGBA_TORGB(rgba)       ((D3DCOLOR) ((rgba) & 0xffffff))
#define RGB_TORGBA(rgb)        ((D3DCOLOR) ((rgb) | 0xff000000))

#endif

//******************************************************************************
// Debugging function prototypes
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
void                DebugString(LPCTSTR szFormat, ...);
BOOL                ResultFailed(HRESULT hr, LPCTSTR sz);
#else
inline void         DebugString(LPCTSTR szFormat, ...) {}
inline BOOL         ResultFailed(HRESULT hr, LPCTSTR sz) {return FALSE;};
#endif

//******************************************************************************
// Memory allocation prototypes
//******************************************************************************

BOOL                CreateHeap();
void                ReleaseHeap();
LPVOID              MemAlloc(UINT uNumBytes);
void                MemFree(LPVOID pvMem);
LPVOID              MemAlloc32(UINT uNumBytes);
void                MemFree32(LPVOID pvMem);

#endif // __UTIL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1016\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=xbox1016
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1016\test.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.h

Author:

    Matt Bronder

Description:

    Direct3D test functions.

*******************************************************************************/

#ifndef __TEST_H__
#define __TEST_H__

//******************************************************************************
class CTest : public CScene {

protected:

public:

                                    CTest();
                                    ~CTest();

    virtual BOOL                    Create(CDisplay* pDisplay);
    virtual int                     Exhibit(int *pnExitCode);

protected:

    virtual BOOL                    Prepare();
    virtual BOOL                    Setup();
    virtual BOOL                    Initialize();
    virtual void                    Efface();
    virtual void                    Update();
    virtual BOOL                    Render();

    virtual void                    ProcessInput();
    virtual BOOL                    InitView();

    virtual BOOL                    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                                            WPARAM wParam, LPARAM lParam);
};

#endif //__TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1016\test.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#include "d3dlocus.h"
#include "test.h"

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CTest*   pTest;
    BOOL     bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    // Create the scene
    pTest = new CTest();
    if (!pTest) {
        return FALSE;
    }

    // Initialize the scene
    if (!pTest->Create(pDisplay)) {
        pTest->Release();
        return FALSE;
    }

    bRet = pTest->Exhibit(pnExitCode);

    // Clean up the scene
    pTest->Release();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
// CTest
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CTest
//
// Description:
//
//     Initialize the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CTest::CTest() {
}

//******************************************************************************
//
// Method:
//
//     ~CTest
//
// Description:
//
//     Clean up the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CTest::~CTest() {
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the test for rendering.
//
// Arguments:
//
//     CDisplay* pDisplay               - Pointer to a Display object.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CTest::Create(CDisplay* pDisplay) {

    return CScene::Create(pDisplay);
}

//******************************************************************************
//
// Method:
//
//     Exhibit
//
// Description:
//
//     Execute the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     The exit value contained in the wParam parameter of the WM_QUIT message.
//
//******************************************************************************
int CTest::Exhibit(int *pnExitCode) {

    return CScene::Exhibit(pnExitCode);
}

//******************************************************************************
//
// Method:
//
//     Prepare
//
// Description:
//
//     Initialize all device-independent data to be used in the scene.  This
//     method is called only once at creation (as opposed to Setup and
//     Initialize, which get called each time the device is Reset).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared, FALSE if it was not.
//
//******************************************************************************
BOOL CTest::Prepare() {

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Setup
//
// Description:
//
//     Obtain the device interface pointer from the display, save the current
//     state of the device, and initialize the background vertices to the
//     dimensions of the render target.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared for initialization, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CTest::Setup() {

    return CScene::Setup();
}

//******************************************************************************
//
// Method:
//
//     Initialize
//
// Description:
//
//     Initialize the device and all device objects to be used in the test (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the test was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CTest::Initialize() {

    UINT i;

    for (i = 0; i < 4; i++) {
        m_prBackground[i].cDiffuse = RGB_MAKE(26, 51, 102);
    }

    return CScene::Initialize();
}

//******************************************************************************
//
// Method:
//
//     Efface
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CTest::Efface() {

    CScene::Efface();
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Update the state of the scene to coincide with the given time.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CTest::Update() {

    CScene::Update();
}

//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render the test scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CTest::Render() {

    DWORD    dwClearFlags = D3DCLEAR_TARGET;
    HRESULT  hr;

    if (!m_bCreated) {
        return FALSE;
    }

#ifndef UNDER_XBOX
    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return TRUE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) {
                return FALSE;
            }
        }
    }
#endif // !UNDER_XBOX

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) {
        dwClearFlags |= D3DCLEAR_ZBUFFER;
    }
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

    m_pDevice->SetVertexShader(FVF_TLVERTEX);

    m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, m_prBackground, sizeof(TLVERTEX));

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input for the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CTest::ProcessInput() {

    CScene::ProcessInput();
}
//******************************************************************************
//
// Method:
//
//     InitView
//
// Description:
//
//     Initialize the camera view in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CTest::InitView() {

    if (!m_pDisplay) {
        return FALSE;
    }

    // Set the view position
    m_camInitial.vPosition     = D3DXVECTOR3(0.0f, 0.0f, -50.0f);
    m_camInitial.vInterest     = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_camInitial.fRoll         = 0.0f;
    m_camInitial.fFieldOfView  = M_PI / 4.0f;
    m_camInitial.fNearPlane    = 0.1f;
    m_camInitial.fFarPlane     = 1000.0f;
    m_pDisplay->SetCamera(&m_camInitial);

    return m_pDisplay->SetView(&m_camInitial);
}

//******************************************************************************
// Scene window procedure (pseudo-subclassed off the main window procedure)
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
BOOL CTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_F12: // Toggle pause state
                    m_bPaused = !m_bPaused;
                    return TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CScene::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1016\exe\sources.inc ===
TARGETNAME=xbox1016
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\l_rx1016.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1197\modulex.h ===
#define PREPEND_MODULE(Suffix) module##Suffix
#define MODULE_STRING "module"
#pragma comment(linker, "/include:_module_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox11113\sources.inc ===
TARGETNAME=xbox11113

INCLUDES=\
    $(INCLUDES); \
    $(BASEDIR)\public\sdk\inc; \
    $(BASEDIR)\private\inc; \
    $(BASEDIR)\private\ntos\inc; \
    $(BASEDIR)\private\ntos\xapi\inc; \
    $(BASEDIR)\private\test\inc;

TARGETLIBS=\
    $(LIBRARY_PATH)\d3d8$(D).lib \
    $(LIBRARY_PATH)\d3dx8$(D).lib \
    $(LIBRARY_PATH)\xgraphics$(D).lib

SOURCES=\
    main.cpp \
    textr.cpp \
    util.cpp

XE_FLAGS=\
    /INSERTFILE:..\media\grid.bmp,grid.bmp,n \
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox11113\main.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    main.cpp

Author:

    Matt Bronder

Description:

    Application entry point.

*******************************************************************************/

#include <xtl.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <xgraphics.h>
#include <xgmath.h>
#include "util.h"

using namespace XBOX11113;

#include "textr.h"

#ifdef HARNESS

#include "xtestlib.h"

#define PREPEND_MODULE(Suffix) xbox11113##Suffix
#define MODULE_STRING "xbox11113"

//******************************************************************************
// Function exports to the harness
//******************************************************************************

BOOL WINAPI PREPEND_MODULE(_DllMain)(HINSTANCE hInstance, DWORD dwReason, LPVOID lpvReserved);
void WINAPI PREPEND_MODULE(_StartTest)(HANDLE hLog);
void WINAPI PREPEND_MODULE(_EndTest)(void);

#pragma data_seg(EXPORT_SECTION_NAME)
extern EXP_TABLE_ENTRY PREPEND_MODULE(_ExportTableEntry)[];
__EXTRN_C EXP_TABLE_DIRECTORY PREPEND_MODULE(_ExportTableDirectory) = {
    MODULE_STRING,
    PREPEND_MODULE(_ExportTableEntry)
};
#pragma data_seg()

__EXTRN_C EXP_TABLE_ENTRY PREPEND_MODULE(_ExportTableEntry)[] = {
    { "StartTest", (PROC)PREPEND_MODULE(_StartTest) },
    { "EndTest",   (PROC)PREPEND_MODULE(_EndTest) },
    { "DllMain",   (PROC)PREPEND_MODULE(_DllMain) },
    { NULL, NULL }
};

#pragma data_seg()

#else

//******************************************************************************
// Function prototypes
//******************************************************************************

typedef enum _FIRMWARE_REENTRY {
    HalHaltRoutine,
    HalRebootRoutine,
    HalQuickRebootRoutine,
    HalKdRebootRoutine,
    HalMaximumRoutine
} FIRMWARE_REENTRY, *PFIRMWARE_REENTRY;

extern "C" VOID HalReturnToFirmware(IN FIRMWARE_REENTRY Routine);

#endif // HARNESS

//******************************************************************************
// main
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     main
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
#ifdef HARNESS
void WINAPI PREPEND_MODULE(_StartTest)(HANDLE hLog)
#else
void __cdecl main()
#endif // HARNESS
{
    CSample* pSample;
    UINT uStart;
    TCHAR szOut[64];
    UINT uPass;

#ifdef HARNESS

    HANDLE hMutex;

    // If any other Direct3D test is running, block until it is finished
    hMutex = CreateMutex(NULL, FALSE, "XBox Direct3D Test");
    if (!hMutex) {
        OutputDebugString(TEXT("CreateMutex failed\n"));
        return;
    }

    if (WaitForSingleObject(hMutex, INFINITE) != WAIT_OBJECT_0) {
        OutputDebugString(TEXT("The test mutex was abandoned\n"));
        CloseHandle(hMutex);
        return;
    }

    OutputDebugString(TEXT("GRAPHICS: Entering test ") TEXT(MODULE_STRING) TEXT("\r\n"));

#endif

    // Seed the pseudo-random number generator
    srand(GetTickCount());

    for (uPass = 0, uStart = GetTickCount(); ; uPass++) {
 
        pSample = new CSample();

        if (pSample) {

            if (pSample->Create()) {

                pSample->Render();
            }

            delete pSample;
        }

        if (!(uPass % 200)) {
            wsprintf(szOut, TEXT("TEXTR4: %d seconds have elapsed\n"), (GetTickCount() - uStart) / 1000);
            OutputDebugString(szOut);
        }
    }

#ifdef HARNESS
    OutputDebugString(TEXT("GRAPHICS: Leaving test ") TEXT(MODULE_STRING) TEXT("\r\n"));
    ReleaseMutex(hMutex);
    CloseHandle(hMutex);
#else
    HalReturnToFirmware(HalRebootRoutine);
#endif
}

#ifdef HARNESS

//******************************************************************************
BOOL WINAPI PREPEND_MODULE(_DllMain)(HINSTANCE hInstance, DWORD dwReason, LPVOID lpvReserved) {

    switch (dwReason) {

        case DLL_PROCESS_ATTACH:
            break;

        case DLL_PROCESS_DETACH:
            break;
    }

    return TRUE;
}

//******************************************************************************
void WINAPI PREPEND_MODULE(_EndTest)(void) {
}

#endif // HARNESS
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox11113\textr.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    textr.h

Author:

    Matt Bronder

*******************************************************************************/

#ifndef __TEXTR_H__
#define __TEXTR_H__

//******************************************************************************
class CSample {

protected:

    LPDIRECT3D8                     m_pd3d;
    D3DSurface                      m_d3dsColorBuffer[3];
    D3DSurface                      m_d3dsDepthBuffer;
    LPVOID                          m_pvColorBuffer[3];
    LPVOID                          m_pvDepthBuffer;
    LPDIRECT3DDEVICE8               m_pDevice;

    LPDIRECT3DTEXTURE8              m_pd3dt;
    VERTEX                          m_prVertices[4];
    TLVERTEX                        m_prBackground[4];

    float                           m_fAspect;
    float                           m_fFieldOfView;

public:

                                    CSample();
                                    ~CSample();

    BOOL                            Create();
    BOOL                            Render();

protected:

	BOOL                            StartGraphics();
};

inline DWORD F2DW(float f) {return *((LPDWORD)&f);}

#endif //__TEXTR_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox11113\textr.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    textr.cpp

Author:

    Matt Bronder

*******************************************************************************/

#include <xtl.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <xgraphics.h>
#include <xgmath.h>
#include "util.h"

using namespace XBOX11113;

#include "textr.h"

//******************************************************************************
// CSample
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CSample
//
// Description:
//
//     Initialize the sample.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CSample::CSample() {

    m_pd3d = NULL;
    memset(m_pvColorBuffer, 0, 3 * sizeof(LPVOID));
    m_pvDepthBuffer = NULL;
    m_pDevice = NULL;

    m_pd3dt = NULL;

    m_prVertices[0] = VERTEX(D3DXVECTOR3(-2.5f,-2.5f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, -1.0f), 0.0f, 1.0f);
    m_prVertices[1] = VERTEX(D3DXVECTOR3(-2.5f, 2.5f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, -1.0f), 0.0f, 0.0f);
    m_prVertices[2] = VERTEX(D3DXVECTOR3( 2.5f, 2.5f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, -1.0f), 1.0f, 0.0f);
    m_prVertices[3] = VERTEX(D3DXVECTOR3( 2.5f,-2.5f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, -1.0f), 1.0f, 1.0f);

    m_prBackground[0] = TLVERTEX(D3DXVECTOR3(-0.5f, 479.5f, 0.9999f), 0.01f, 0xFFFFFFFF, 0, 0.0f, 1.0f);
    m_prBackground[1] = TLVERTEX(D3DXVECTOR3(-0.5f, -0.5f, 0.9999f), 0.01f, 0xFFFFFFFF, 0, 0.0f, 0.0f);
    m_prBackground[2] = TLVERTEX(D3DXVECTOR3(639.5f, -0.5f, 0.9999f), 0.01f, 0xFFFFFFFF, 0, 1.0f, 0.0f);
    m_prBackground[3] = TLVERTEX(D3DXVECTOR3(639.5f, 479.5f, 0.9999f), 0.01f, 0xFFFFFFFF, 0, 1.0f, 1.0f);
}

//******************************************************************************
//
// Method:
//
//     ~CSample
//
// Description:
//
//     Clean up the sample.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CSample::~CSample() {

    UINT i;

    if (m_pd3dt) {
        m_pd3dt->Release();
    }

    if (m_pDevice) {

        if (m_pvColorBuffer[0]) {
            m_pDevice->SetTile(0, NULL);
        }
        if (m_pvDepthBuffer) {
            m_pDevice->SetTile(1, NULL);
        }

        m_pDevice->Release();
    }

    for (i = 0; i < 3; i++) {
        if (m_pvColorBuffer[i]) {
            D3D_FreeContiguousMemory(m_pvColorBuffer[i]);
            m_pvColorBuffer[i] = NULL;
        }
    }
    if (m_pvDepthBuffer) {
        D3D_FreeContiguousMemory(m_pvDepthBuffer);
        m_pvDepthBuffer = NULL;
    }

    if (m_pd3d) {
        m_pd3d->Release();
    }
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the sample for rendering.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CSample::Create() {

    if (!StartGraphics()) {
        return FALSE;
    }

    // Create a mipmap
    if (!LoadTexture(m_pDevice, "grid.bmp", &m_pd3dt)) {
        return FALSE;
    }

    m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);
    m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);
    m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);
    m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);
    m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TFACTOR);
    m_pDevice->SetRenderState(D3DRS_TEXTUREFACTOR, 0x80FFFFFF);

    m_pDevice->SetTexture(0, m_pd3dt);

    return TRUE;
}

//******************************************************************************
BOOL CSample::StartGraphics() {

    D3DPRESENT_PARAMETERS   d3dpp;
    UINT                    uSize, uPitch;
    D3DTILE                 tile[2];
    D3DVIEWPORT8            viewport = {0, 0, 640, 480, 0.0f, 1.0f};
    XGMATRIX                mView, mProj, mTransform;
    XGVECTOR3               vViewPos, vViewAt, vViewUp;
    UINT                    i;
    HRESULT                 hr;

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);

    // Initialize the presentation parameters
    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_LIN_X8R8G8B8;
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_LIN_D24S8;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = NULL;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = TRUE;
    
    if (XGetVideoFlags() & XC_VIDEO_FLAGS_WIDESCREEN) {
        d3dpp.Flags = D3DPRESENTFLAG_WIDESCREEN;
        m_fAspect = 640.0f / 480.0f * 1.25f;
    }
    else {
        m_fAspect = 640.0f / 480.0f;
    }

    m_fFieldOfView = XG_PI / 3.0f;

    // Allocate the prefilter buffer
    uPitch = D3DTILE_PITCH_1400; // 1280 * 4
    uSize = uPitch * 480;
    uSize = (uSize + D3DTILE_ALIGNMENT - 1) & ~(D3DTILE_ALIGNMENT - 1);

    m_pvColorBuffer[0] = D3D_AllocContiguousMemory(uSize, D3DTILE_ALIGNMENT);
    if (!m_pvColorBuffer[0]) {
        OutputDebugString(TEXT("Insufficient contiguous memory available to create color buffer surface(s)\r\n"));
        return FALSE;
    }

    memset(&tile[0], 0, sizeof(D3DTILE));
    tile[0].Size = uSize;
    tile[0].Pitch = uPitch;
    tile[0].pMemory = m_pvColorBuffer[0];

    XGSetSurfaceHeader(1280, 480, D3DFMT_LIN_X8R8G8B8, &m_d3dsColorBuffer[0], 0, uPitch);
    m_d3dsColorBuffer[0].Register((LPBYTE)m_pvColorBuffer[0]);
    d3dpp.BufferSurfaces[0] = &m_d3dsColorBuffer[0];

    // Allocate the postfilter buffer
    uPitch = D3DTILE_PITCH_0A00; // 640 * 4
    uSize = uPitch * 480;

    m_pvColorBuffer[1] = D3D_AllocContiguousMemory(uSize, D3DTILE_ALIGNMENT);
    if (!m_pvColorBuffer[1]) {
        OutputDebugString(TEXT("Insufficient contiguous memory available to create postfilter buffer surface\r\n"));
        return FALSE;
    }

    XGSetSurfaceHeader(640, 480, D3DFMT_LIN_X8R8G8B8, &m_d3dsColorBuffer[1], 0, uPitch);
    m_d3dsColorBuffer[1].Register((LPBYTE)m_pvColorBuffer[1]);
    d3dpp.BufferSurfaces[1] = &m_d3dsColorBuffer[1];

    // Allocate the depth buffer
    uPitch = D3DTILE_PITCH_1400; // 1280 * 4
    uSize = uPitch * 480;
    uSize = (uSize + D3DTILE_ALIGNMENT - 1) & ~(D3DTILE_ALIGNMENT - 1);

    m_pvDepthBuffer = D3D_AllocContiguousMemory(uSize, D3DTILE_ALIGNMENT);
    if (!m_pvDepthBuffer) {
        OutputDebugString(TEXT("Insufficient contiguous memory available to create depth buffer surface\r\n"));
        return FALSE;
    }

    memset(&tile[1], 0, sizeof(D3DTILE));
    tile[1].Size = uSize;
    tile[1].Pitch = uPitch;
    tile[1].pMemory = m_pvDepthBuffer;
    tile[1].Flags = D3DTILE_FLAGS_ZBUFFER | D3DTILE_FLAGS_ZCOMPRESS;
    tile[1].ZStartTag = 0;
    tile[1].ZOffset = 0;
    tile[1].Flags |= D3DTILE_FLAGS_Z32BITS;

    XGSetSurfaceHeader(1280, 480, D3DFMT_LIN_D24S8, &m_d3dsDepthBuffer, 0, uPitch);
    m_d3dsDepthBuffer.Register(m_pvDepthBuffer);
    d3dpp.DepthStencilSurface = &m_d3dsDepthBuffer;

    // Create the device
    hr = m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, NULL, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3D8::CreateDevice failed"));
        return FALSE;
    }

    m_pDevice->SetTile(0, &tile[0]);
    if (d3dpp.EnableAutoDepthStencil) {
        m_pDevice->SetTile(1, &tile[1]);
    }

    // Set a viewport
    m_pDevice->SetViewport(&viewport);

    vViewPos = XGVECTOR3(0.0f, 0.0f, -20.0f);
    vViewAt = XGVECTOR3(0.0f, 0.0f, 0.0f);
    vViewUp = XGVECTOR3(0.0f, 1.0f, 0.0f);
    XGMatrixLookAtLH(&mView, &vViewPos, &vViewAt, &vViewUp);
    m_pDevice->SetTransform(D3DTS_VIEW, &mView);

    XGMatrixPerspectiveFovLH(&mProj, m_fFieldOfView, m_fAspect, 0.1f, 100.0f);
    m_pDevice->SetTransform(D3DTS_PROJECTION, &mProj);

    m_pDevice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
    m_pDevice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

    for (i = 0; i < 4; i++) {
        m_pDevice->SetTextureStageState(i, D3DTSS_TEXCOORDINDEX, 0);
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render the sample scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CSample::Render() {

    XGMATRIX mWorld;
    UINT     uFrame = 0;

    for (uFrame = 0; uFrame < 11; uFrame++) {

        XGMatrixIdentity(&mWorld);

        // Clear the rendering target
        m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL, D3DCOLOR_RGBA(0, 0, 0, 255), 1.0f, 0);

        // Begin the scene
        m_pDevice->BeginScene();

        // Use a fixed function shader
        m_pDevice->SetVertexShader(FVF_TLVERTEX);

        m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

        m_pDevice->SetTextureStageState(0, D3DTSS_MIPFILTER, D3DTEXF_NONE);

        m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, m_prBackground, sizeof(TLVERTEX));

        m_pDevice->SetVertexShader(FVF_VERTEX);

        mWorld._42 = 2.75f;
        m_pDevice->SetTransform(D3DTS_WORLD, &mWorld);
        m_pDevice->SetTextureStageState(0, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);
        m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, m_prVertices, sizeof(VERTEX));

        mWorld._42 = -2.75f;
        m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);
        m_pDevice->SetTransform(D3DTS_WORLD, &mWorld);
        m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, m_prVertices, sizeof(VERTEX));

        // End the scene
        m_pDevice->EndScene();

        // Update the screen
        m_pDevice->Present(NULL, NULL, NULL, NULL);
    }

    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1032\test.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#ifndef UNDER_XBOX
#include <windows.h>
#else
#include <xtl.h>
#endif // UNDER_XBOX
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <d3dx8.h>
#include "util.h"
#include "dtypes.h"
#include "test.h"

//******************************************************************************
// WinMain
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WinMain
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     HINSTANCE hInstance      - Application instance handle
//
//     HINSTANCE hPrevInstance  - Previous instance of the application (always
//                                NULL for Win32 applications)
//
//     LPSTR szCmdLine          - Pointer to a string specifying the command
//                                line used in launching the application
//                                (excluding the program name)
//
//     int nCmdShow             - State specifying how the window is to be 
//                                displayed on creation
//
// Return Value:
//
//     0 on success, -1 on failure.
//
//******************************************************************************
#ifndef UNDER_XBOX
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR szCmdLine, int nCmdShow) 
#else
int APIENTRY wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR szCmdLine, int nCmdShow) 
#endif // UNDER_XBOX
{
    CReproTest*     pRTest;
    int             ret = 0;

    // Seed the pseudo-random number generator
    srand(GetTickCount());

    // Create a heap for the application
    if (!CreateHeap()) {
        return 0;
    }

    // Create the display
    pRTest = new CReproTest();
    if (!pRTest) {
        ReleaseHeap();
        return 0;
    }

    // Initialize the display
    if (!pRTest->Create(hInstance)) {
        DebugString(TEXT("CDisplay::Create failed"));
        delete pRTest;
        ReleaseHeap();
        return 0;
    }

    // Render the 3D scene
    pRTest->Run();

    // Clean up
    delete pRTest;
    ReleaseHeap();

    return ret;
}

//******************************************************************************
CReproTest::CReproTest() {

    m_hWnd = NULL;
    m_pd3d = NULL;
    m_pDevice = NULL;
    m_pd3dr = NULL;
}

//******************************************************************************
CReproTest::~CReproTest() {

    if (m_pd3dr) {
        m_pd3dr->Release();
        m_pd3dr = NULL;
    }

    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }

    if (m_pd3d) {
        m_pd3d->Release();
        m_pd3d = NULL;
    }

#ifndef UNDER_XBOX
    // Unregister the window class
    UnregisterClass(TEXT("Direct3D Repro Test"), m_hInstance);
#endif // !UNDER_XBOX
}

//******************************************************************************
BOOL CReproTest::Create(HINSTANCE hInstance) {

    D3DPRESENT_PARAMETERS   d3dpp;
    LVERTEX                 plrVertices[3];
    LPBYTE                  pData;
    HRESULT                 hr;
#ifndef UNDER_XBOX
    WNDCLASS                wc;
    MSG                     msg;
#endif // !UNDER_XBOX

    m_hInstance = hInstance;

#ifndef UNDER_XBOX

    // Register the window class
    memset(&wc, 0, sizeof(WNDCLASS));
    wc.style            = 0;
    wc.lpfnWndProc      = WndProc;
    wc.cbClsExtra       = 0;
    wc.cbWndExtra       = 0;
    wc.hInstance        = m_hInstance;
    wc.hIcon            = NULL;
    wc.hbrBackground    = NULL;
    wc.hCursor          = LoadCursor(NULL, IDC_ARROW);
    wc.lpszMenuName     = NULL;
    wc.lpszClassName    = TEXT("Direct3D Repro Test");

    if (!RegisterClass(&wc)) {
        DebugString(TEXT("RegisterClass failed"));
		return FALSE;
    }

    // Create the main application window
    m_hWnd = CreateWindowEx(0, TEXT("Direct3D Repro Test"), 
                            TEXT("Direct3D Repro Test"), 
                            WS_OVERLAPPEDWINDOW | WS_VISIBLE, 0, 0,
                            GetSystemMetrics(SM_CXSCREEN), 
                            GetSystemMetrics(SM_CYSCREEN),
                            NULL, NULL, m_hInstance, NULL);

    if (!m_hWnd) {
        DebugString(TEXT("CreateWindowEx failed"));
		return FALSE;
    }

    UpdateWindow(m_hWnd);

    // Pump any messages
    while(PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

#endif

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pd3d) {
        DebugString(TEXT("Direct3DCreate8 failed"));
    }

    // Initialize the presentation parameters
    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_LIN_X8R8G8B8;
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_LIN_D24S8;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = m_hWnd;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = FALSE;

    // Create the device
    hr = m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, m_hWnd, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice);
    if (ResultFailed(hr, TEXT("IDirect3D8::CreateDevice failed"))) {
        return NULL;
    }

    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_LIN_R5G6B5;
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_LIN_D16;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = m_hWnd;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = FALSE;

    hr = m_pDevice->Reset(&d3dpp);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::Reset"))) {
        return NULL;
    }

    plrVertices[0] = LVERTEX(D3DXVECTOR3(-10.0f, -10.0f, 0.0f), RGBA_MAKE(255, 0, 0, 255), 0, 0.0f, 0.0f);
    plrVertices[1] = LVERTEX(D3DXVECTOR3( 0.0f,  10.0f, 0.0f), RGBA_MAKE(0, 0, 255, 255), 0, 0.0f, 0.0f);
    plrVertices[2] = LVERTEX(D3DXVECTOR3( 10.0f, -10.0f, 0.0f), RGBA_MAKE(0, 255, 0, 255), 0, 0.0f, 0.0f);

    hr = m_pDevice->CreateVertexBuffer(3 * sizeof(LVERTEX), 0, FVF_LVERTEX, D3DPOOL_DEFAULT, &m_pd3dr);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        return NULL;
    }

    hr = m_pd3dr->Lock(0, 3 * sizeof(LVERTEX), &pData, 0);
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"))) {
        return NULL;
    }

    memcpy(pData, plrVertices, 3 * sizeof(LVERTEX));

    hr = m_pd3dr->Unlock();
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"))) {
        return NULL;
    }

    return InitDeviceState();
}

//******************************************************************************
BOOL CReproTest::Run() {

#ifndef UNDER_XBOX
    MSG      msg;
#endif // !UNDER_XBOX
    HRESULT  hr;

    do {

#ifndef UNDER_XBOX
        if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
        else if (msg.message != WM_QUIT) {

            hr = m_pDevice->TestCooperativeLevel();
            if (FAILED(hr)) {
                return FALSE;
            }

#endif // !UNDER_XBOX

            // Clear the rendering target
            m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(0, 0, 0), 1.0f, 0);

            // Begin the scene
            m_pDevice->BeginScene();

            // Disable lighting
            m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

            // Use a fixed function shader
            m_pDevice->SetVertexShader(FVF_LVERTEX);

            m_pDevice->SetStreamSource(0, m_pd3dr, sizeof(LVERTEX));

            // Draw a triangle
            m_pDevice->DrawPrimitive(D3DPT_TRIANGLELIST, 0, 1);
//            m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 1, plrVertices, sizeof(LVERTEX));

            // End the scene
            m_pDevice->EndScene();

            // Update the screen
            m_pDevice->Present(NULL, NULL, NULL, NULL);

#ifndef UNDER_XBOX
        }
    } while (msg.message != WM_QUIT);
#else
    } while (TRUE);
#endif

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::InitDeviceState() {

    D3DXMATRIX mTransform;
    UINT       i;
    HRESULT    hr;

    // Initialize the viewport
    if (!SetViewport(640, 480)) {
        DebugString(TEXT("SetViewport failed"));
    }

    // Initialize the view matrix
    SetView(&mTransform, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
            &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

    hr = m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Initialize the projection matrix
    SetPerspectiveProjection(&mTransform, 0.1f, 1000.0f, 
            M_PI / 4.0f, 480.0f / 640.0f);

    hr = m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Set ambient lighting
    hr = m_pDevice->SetRenderState(D3DRS_AMBIENT, 0x20202020);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the texture filters
    for (i = 0; i < 2; i++) {
        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }
    }

    // Set blend modes
    hr = m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    hr = m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Modulate color and alpha texture stages
    hr = m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    // Set the alpha comparison function
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAFUNC, (DWORD)D3DCMP_GREATEREQUAL);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the alpha reference value to opaque
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAREF, 0xFF);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Turn on specular highlights
    hr = m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Enable dithering
    hr = m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Disable per-vertex color
    hr = m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::SetViewport(DWORD dwWidth, DWORD dwHeight) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    // Set a viewport for the device
    viewport.X = 0;
    viewport.Y = 0;
    viewport.Width = dwWidth;
    viewport.Height = dwHeight;
    viewport.MinZ = 0.0f;
    viewport.MaxZ = 1.0f;

    hr = m_pDevice->SetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetViewport"))) {
        return FALSE;
    }

    return TRUE;
}

#ifndef UNDER_XBOX

//******************************************************************************
// WndProc
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Window procedure to process messages for the main application window
//
// Arguments:
//
//     HWND hWnd                - Application window
//
//     UINT message             - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     0 if the message was handled, the return of DefWindowProc otherwise.
//
//******************************************************************************
LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    switch (uMsg) {

        case WM_SETCURSOR:
            SetCursor(NULL);
            return TRUE;

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    SendMessage(hWnd, WM_CLOSE, 0, 0);
                    return 0;
            }
            break;

        case WM_CLOSE:
            DestroyWindow(hWnd);
            return 0;

        case WM_DESTROY:
            PostQuitMessage(0);
            return 0;
    }

    return DefWindowProc(hWnd, uMsg, wParam, lParam);
}

#endif // UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     InitMatrix
//
// Description:
//
//     Initialize the given matrix with the given values.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Matrix to initialize
//
//     float _11 to _44         - Initialization values
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
                float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44) 
{
    if (pd3dm) {

        pd3dm->_11 = _11;
        pd3dm->_12 = _12;
        pd3dm->_13 = _13;
        pd3dm->_14 = _14;
        pd3dm->_21 = _21;
        pd3dm->_22 = _22;
        pd3dm->_23 = _23;
        pd3dm->_24 = _24;
        pd3dm->_31 = _31;
        pd3dm->_32 = _32;
        pd3dm->_33 = _33;
        pd3dm->_34 = _34;
        pd3dm->_41 = _41;
        pd3dm->_42 = _42;
        pd3dm->_43 = _43;
        pd3dm->_44 = _44;
    }
}

//******************************************************************************
//
// Function:
//
//     SetView
//
// Description:
//
//     Align the given view matrix along the given direction and up vectors with
//     the position vector as the origin.
//
// Arguments:
//
//     LPD3DXMATRIX pd3dm       - View matrix to initialize
//
//     LPD3DXVECTOR3 pvPos      - View origin
//
//     LPD3DXVECTOR3 pvAt       - View interest vector
//
//     LPD3DXVECTOR3 pvUp       - View up vector
//
// Return Value:
//
//     Initialized view matrix.
//
//******************************************************************************
void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, LPD3DXVECTOR3 pvAt, 
                                                      LPD3DXVECTOR3 pvUp) 
{
    D3DXVECTOR3  d, u, r;

    if (pd3dm && pvPos && pvAt && pvUp && !(*pvPos == *pvAt) 
                                 && !(*pvUp == D3DXVECTOR3(0.0f, 0.0f, 0.0f))) {

        D3DXVec3Normalize(&d, &(*pvAt - *pvPos));
        u = *pvUp;

        // Project the up vector into the plane of the direction vector
        D3DXVec3Normalize(&u, &(u - (d * D3DXVec3Dot(&u, &d))));

        // Get the cross product
        D3DXVec3Cross(&r, &u, &d);

        // Initialize the view transform
        InitMatrix(pd3dm,
            r.x, u.x, d.x, 0.0f,
            r.y, u.y, d.y, 0.0f,
            r.z, u.z, d.z, 0.0f,
            -(pvPos->x * r.x + pvPos->y * r.y + pvPos->z * r.z), 
            -(pvPos->x * u.x + pvPos->y * u.y + pvPos->z * u.z), 
            -(pvPos->x * d.x + pvPos->y * d.y + pvPos->z * d.z), 
            1.0f
        );
    }
}

//******************************************************************************
//
// Function:
//
//     SetPerspectiveProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fFieldOfView, float fAspect) {

    float fTanHalfFOV = (float)tan((double)fFieldOfView / 2.0);
    float fFar = fBack / (fBack - fFront);

    InitMatrix(pd3dm,
        1.0f, 0.0f,           0.0f,                         0.0f,
        0.0f, 1.0f / fAspect, 0.0f,                         0.0f,
        0.0f, 0.0f,           fTanHalfFOV * fFar,           fTanHalfFOV,
        0.0f, 0.0f,           -fFront * fTanHalfFOV * fFar, 0.0f
    );
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1197\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox11113\util.cpp ===
/*******************************************************************************

Copyright (c) 2001 Microsoft Corporation.  All rights reserved.

File Name:

    util.cpp

Description:

    Helper functions.

*******************************************************************************/

#include <ntos.h>
#include <xapip.h>
#include <xtl.h>
#include <xgraphics.h>
#include <xgmath.h>
#include <math.h>
#include <tchar.h>
#include <stdio.h>
#include "util.h"

namespace XBOX11113 {

#if defined(DEBUG) || defined(_DEBUG) || defined(DBG)

//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
    TCHAR*  szBuffer = (LPTSTR)HeapAlloc(GetProcessHeap(), 0, 2304 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }

    va_start(vl, szFormat);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

    HeapFree(GetProcessHeap(), 0, szBuffer);
}

#endif

//******************************************************************************
BOOL LoadResourceFile(LPCSTR szName, LPVOID* ppvData, LPDWORD pdwSize) {

    PVOID pvFile;
    BOOL bRet = FALSE;

    pvFile = XLoadSection(szName);
    if (pvFile) {
        if (ppvData) {
            *ppvData = pvFile;
        }
        if (pdwSize) {
            HANDLE hSection = XGetSectionHandle(szName);
            *pdwSize = XGetSectionSize(hSection);
        }
        bRet = TRUE;
    }

    return bRet;
}

//******************************************************************************
void FreeResourceFile(LPCSTR szName) {

    XFreeSection(szName);
}

#include <d3dx8.h>
//******************************************************************************
BOOL LoadTexture(LPDIRECT3DDEVICE8 pDevice, LPCSTR szName, LPDIRECT3DTEXTURE8* ppd3dt) {

    LPVOID pvData;
    DWORD dwSize;
    HRESULT hr;

    if (!LoadResourceFile(szName, &pvData, &dwSize)) {
        return FALSE;
    }

    hr = D3DXCreateTextureFromFileInMemoryEx(pDevice, pvData, dwSize, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, D3DFMT_R5G6B5, 0, D3DX_FILTER_POINT, D3DX_FILTER_BOX, 0, NULL, NULL, ppd3dt);
    if (FAILED(hr)) {
        FreeResourceFile(szName);
        return FALSE;
    }

    FreeResourceFile(szName);

    return TRUE;
}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox11113\util.h ===
/*******************************************************************************

Copyright (c) 2001 Microsoft Corporation.  All rights reserved.

File Name:

    util.h

Description:

    Helper functions.

*******************************************************************************/

#ifndef __UTIL_H__
#define __UTIL_H__

#define TWOPI 6.283185f

#define FRND() ((float)rand() / (float)RAND_MAX)

#define FABS(x)     ((x) < 0.0f ? -(x) : (x))

#define FVF_VERTEX              (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1)
#define FVF_TLVERTEX            (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)

namespace XBOX11113 {

//******************************************************************************
typedef struct _TVERTEX {
    XGVECTOR3   vPosition;
#ifdef COMPRESS_TERRAIN_NORMALS
    DWORD       dwNormal;
#else
    XGVECTOR3   vNormal;
#endif
    float       u0, v0;

    _TVERTEX() {}
    _TVERTEX(const D3DVECTOR& v, const D3DVECTOR& n, const float _u0, const float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
#ifdef COMPRESS_TERRAIN_NORMALS
        dwNormal = ((((DWORD)(n.x * 1023.0f) & 0x7FF)) |
                    (((DWORD)(n.y * 1023.0f) & 0x7FF) << 11) |
                    (((DWORD)(n.z *  511.0f) & 0x3FF) << 22));
#else
        vNormal = n;
#endif
        u0 = _u0;
        v0 = _v0;
    }
} TVERTEX, *PTVERTEX;

//******************************************************************************
typedef struct _TLVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _TLVERTEX() {}
    _TLVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} TLVERTEX, *PTLVERTEX;

//******************************************************************************
typedef struct _VERTEX {
    D3DXVECTOR3 vPosition;
    D3DXVECTOR3 vNormal;
    float       u0, v0;

    _VERTEX() {}
    _VERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0;
    }
} VERTEX, *PVERTEX;

#if defined(DEBUG) || defined(_DEBUG) || defined(DBG)
void        DebugString(LPCTSTR szFormat, ...);
#else
static 
inline void DebugString(LPCTSTR szFormat, ...) {}
#endif

BOOL        LoadResourceFile(LPCSTR szName, LPVOID* ppvData, LPDWORD pdwSize);
void        FreeResourceFile(LPCSTR szName);

BOOL        LoadTexture(LPDIRECT3DDEVICE8 pDevice, LPCSTR szName, LPDIRECT3DTEXTURE8* ppd3dt);

}

#endif //__UTIL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1197\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1395\dtypes.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    dtypes.h

Author:

    Matt Bronder

Description:

    Various type definitions.

*******************************************************************************/

#ifndef __DTYPES_H__
#define __DTYPES_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FVF_VERTEX              (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1)
#define FVF_BVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3)
#define FVF_BVERTEX2            (D3DFVF_XYZ | D3DFVF_TEX2)
#define FVF_NVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3 | \
                                              D3DFVF_TEXCOORDSIZE2(0) | \
                                              D3DFVF_TEXCOORDSIZE2(1) | \
                                              D3DFVF_TEXCOORDSIZE3(2))
#define FVF_LVERTEX             (D3DFVF_XYZ | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLVERTEX            (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLBVERTEX           (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX2)
#define FVF_CVERTEX             (D3DFVF_XYZ | D3DFVF_NORMAL)
#define FVF_CVERTEX1_3          (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 | \
                                 D3DFVF_TEXCOORDSIZE3(0))

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _TCOORD {
    float               u;
    float               v;
} TCOORD, *PTCOORD;

//******************************************************************************
typedef struct _TCOORD2 {
    float               u;
    float               v;
} TCOORD2, *PTCOORD2;

//******************************************************************************
typedef struct _TCOORD3 {
    float               u;
    float               v;
    float               t;
} TCOORD3, *PTCOORD3;

//******************************************************************************
typedef struct _MATRIX3X3 {
    union {
        struct {
            float _11, _12, _13;
            float _21, _22, _23;
            float _31, _32, _33;
        };
        float m[3][3];
        struct {
            D3DXVECTOR3 r1;
            D3DXVECTOR3 r2;
            D3DXVECTOR3 r3;
        };
    };
} MATRIX3X3, *PMATRIX3X3;

//******************************************************************************
typedef struct _VERTEX {
    D3DXVECTOR3 vPosition;
    D3DXVECTOR3 vNormal;
    float       u0, v0;

    _VERTEX() {}
    _VERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0;
    }
} VERTEX, *PVERTEX;

//******************************************************************************
typedef struct _BVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (bump) map coordinates
    float       u2, v2;         // Diffuse light map coordinates

    _BVERTEX() {}
    _BVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2;
    }
} BVERTEX, *PBVERTEX;

//******************************************************************************
typedef struct _BVERTEX2 {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates and height (bump) map coordinates
    float       u1, v1;         // Diffuse light map coordinates

    _BVERTEX2() {}
    _BVERTEX2(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} BVERTEX2, *PBVERTEX2;

//******************************************************************************
typedef struct _NVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (normal) map coordinates
    float       u2, v2, t2;     // Light direction in tangent space

    _NVERTEX() {}
    _NVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2, float _t2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2; t2 = _t2;
    }
} NVERTEX, *PNVERTEX;

//******************************************************************************
typedef struct _LVERTEX {
    D3DXVECTOR3 vPosition;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _LVERTEX() { }
    _LVERTEX(const D3DVECTOR& v, D3DCOLOR _cDiffuse, D3DCOLOR _cSpecular, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} LVERTEX, *PLVERTEX;

//******************************************************************************
typedef struct _TLVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _TLVERTEX() {}
    _TLVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} TLVERTEX, *PTLVERTEX;

//******************************************************************************
typedef struct _TLBVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;
    float       u1, v1;

    _TLBVERTEX() {}
    _TLBVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0, float _u1, float _v1) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} TLBVERTEX, *PTLBVERTEX;

//******************************************************************************
typedef struct _CVERTEX {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;

    _CVERTEX() { }
    _CVERTEX(const D3DVECTOR& v, const D3DVECTOR& n) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
    }
} CVERTEX, *PCVERTEX;

//******************************************************************************
typedef struct _VERTEX1_3 {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;
    float         u0, v0, t0;

    _VERTEX1_3() { }
    _VERTEX1_3(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0, float _t0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0; t0 = _t0;
    }
} VERTEX1_3, *PVERTEX1_3;

#endif //__DTYPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1395\util.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.cpp

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef UNDER_XBOX
#include <windows.h>
#else
#include <xtl.h>
#endif // UNDER_XBOX
#include <d3dx8.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include "util.h"

//******************************************************************************
// Globals
//******************************************************************************

static HANDLE               g_hHeap = NULL;

//******************************************************************************
// Debugging functions
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
#ifndef UNDER_XBOX
    TCHAR   szBuffer[2304];
#else
    TCHAR*  szBuffer = (LPTSTR)MemAlloc32(2304 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }
#endif // UNDER_XBOX

    va_start(vl, szFormat);
//    wvsprintf(szBuffer, szFormat, vl);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

#ifdef UNDER_XBOX
    MemFree32(szBuffer);
#endif // UNDER_XBOX
}

//******************************************************************************
//
// Function:
//
//     ResultFailed
//
// Description:
//
//     Test a given return code: if the code is an error, output a debug 
//     message with the error value.  If the code is a warning, output
//     a debug message with the warning value.
//
// Arguments:
//
//     HRESULT hr               - Return code to test for an error
//
//     LPCTSTR sz               - String describing the method that produced 
//                                the return code
//
// Return Value:
//
//     TRUE if the given return code is an error, FALSE otherwise.
//
//******************************************************************************
BOOL ResultFailed(HRESULT hr, LPCTSTR sz) {

    TCHAR szError[256];

    if (SUCCEEDED(hr)) {
        return FALSE;
    }

    D3DXGetErrorString(hr, szError, 256);

    if (FAILED(hr)) {
        DebugString(TEXT("%s failed with %s [0x%X]"), sz, szError, hr);
        return TRUE;
    }
    else {
        DebugString(TEXT("%s returned %s [0x%X]"), sz, szError, hr);
    }

    return FALSE;
}
#endif // DEBUG || _DEBUG

//******************************************************************************
// Memory allocation routines
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateHeap
//
// Description:
//
//     Create a heap for the application.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateHeap() {

    if (g_hHeap) {
        return FALSE;
    }

    g_hHeap = HeapCreate(0, 0, 0);
    if (!g_hHeap) {
        DebugString(TEXT("HeapCreate failed [%d]"), GetLastError());
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseHeap
//
// Description:
//
//     Destroy the application heap.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseHeap() {

    if (g_hHeap) {
        if (!HeapDestroy(g_hHeap)) {
            DebugString(TEXT("HeapDestroy failed [%d]"), GetLastError());
        }
        g_hHeap = NULL;
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc
//
// Description:
//
//     Allocate the given amount of memory from the application heap.  This 
//     memory should later be freed using the MemFree function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc(UINT uNumBytes) {

    LPVOID pvMem = NULL;
    if (g_hHeap) {
        pvMem = HeapAlloc(g_hHeap, 0, uNumBytes);
    }
    return pvMem;
}

//******************************************************************************
//
// Function:
//
//     MemFree
//
// Description:
//
//     Free a block of memory that was allocated using the MemAlloc function.
//
// Arguments:
//
//     LPVOID pvMem             - Base address of the memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree(LPVOID pvMem) {

    if (g_hHeap) {
        if (!HeapFree(g_hHeap, 0, pvMem)) {
            DebugString(TEXT("HeapFree failed [%d]"), GetLastError());
        }
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc32
//
// Description:
//
//     Allocate a given amount of memory whose base address is
//     aligned along a 32 byte boundary.  This memory must later be freed
//     using the MemFree32 function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc32(UINT uNumBytes)
{
	LPBYTE pbyAllocated, pbyAligned = NULL;

	pbyAllocated = (LPBYTE)MemAlloc(uNumBytes + 32);
    if (pbyAllocated) {
	    pbyAligned   = (LPBYTE)((((DWORD)pbyAllocated) + 32) & ~31);
	    *(((LPDWORD)pbyAligned)-1) = (DWORD)pbyAllocated;
    }
	return pbyAligned;
}

//******************************************************************************
//
// Function:
//
//     MemFree32
//
// Description:
//
//     Free an aligned block of memory that was allocated using the MemAlloc32
//     function.
//
// Arguments:
//
//     LPVOID pvAligned         - Base address of the aligned memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree32(LPVOID pvMem)
{
	LPBYTE pbyFree;

    if (pvMem) {
	    pbyFree = (LPBYTE)*(((LPDWORD)pvMem)-1);
	    MemFree(pbyFree);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1395\util.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.h

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef __UTIL_H__
#define __UTIL_H__

//******************************************************************************
// Precomputed fractions of pi
//******************************************************************************

#define M_PI        3.14159265359f
#define M_2PI       6.28318530718f
#define M_PIDIV2    1.57079632680f
#define M_3PIDIV2   4.71238898039f
#define M_PIDIV4    0.78539816340f
#define M_3PIDIV4   2.35619449019f
#define M_5PIDIV4   3.92699081699f
#define M_7PIDIV4   5.49778714378f

#ifndef RGB_MAKE
/*
 * Format of CI colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |         color index           |   fraction    |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define CI_GETALPHA(ci)    ((ci) >> 24)
#define CI_GETINDEX(ci)    (((ci) >> 8) & 0xffff)
#define CI_GETFRACTION(ci) ((ci) & 0xff)
#define CI_ROUNDINDEX(ci)  CI_GETINDEX((ci) + 0x80)
#define CI_MASKALPHA(ci)   ((ci) & 0xffffff)
#define CI_MAKE(a, i, f)    (((a) << 24) | ((i) << 8) | (f))

/*
 * Format of RGBA colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGBA_GETALPHA(rgb)      ((rgb) >> 24)
#define RGBA_GETRED(rgb)        (((rgb) >> 16) & 0xff)
#define RGBA_GETGREEN(rgb)      (((rgb) >> 8) & 0xff)
#define RGBA_GETBLUE(rgb)       ((rgb) & 0xff)
#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

/* D3DRGB and D3DRGBA may be used as initialisers for D3DCOLORs
 * The float values must be in the range 0..1
 */
#define D3DRGB(r, g, b) \
    (0xff000000L | ( ((long)((r) * 255)) << 16) | (((long)((g) * 255)) << 8) | (long)((b) * 255))
#define D3DRGBA(r, g, b, a) \
    (   (((long)((a) * 255)) << 24) | (((long)((r) * 255)) << 16) \
    |   (((long)((g) * 255)) << 8) | (long)((b) * 255) \
    )

/*
 * Format of RGB colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    ignored    |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGB_GETRED(rgb)         (((rgb) >> 16) & 0xff)
#define RGB_GETGREEN(rgb)       (((rgb) >> 8) & 0xff)
#define RGB_GETBLUE(rgb)        ((rgb) & 0xff)
#define RGBA_SETALPHA(rgba, x) (((x) << 24) | ((rgba) & 0x00ffffff))
#define RGB_MAKE(r, g, b)       ((D3DCOLOR) (((r) << 16) | ((g) << 8) | (b)))
#define RGBA_TORGB(rgba)       ((D3DCOLOR) ((rgba) & 0xffffff))
#define RGB_TORGBA(rgb)        ((D3DCOLOR) ((rgb) | 0xff000000))

#endif

//******************************************************************************
// Debugging function prototypes
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
void                DebugString(LPCTSTR szFormat, ...);
BOOL                ResultFailed(HRESULT hr, LPCTSTR sz);
#else
inline void         DebugString(LPCTSTR szFormat, ...) {}
inline BOOL         ResultFailed(HRESULT hr, LPCTSTR sz) {return FALSE;};
#endif

//******************************************************************************
// Memory allocation prototypes
//******************************************************************************

BOOL                CreateHeap();
void                ReleaseHeap();
LPVOID              MemAlloc(UINT uNumBytes);
void                MemFree(LPVOID pvMem);
LPVOID              MemAlloc32(UINT uNumBytes);
void                MemFree32(LPVOID pvMem);

#endif // __UTIL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1197\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_rx1197
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SOURCES=\
    test.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1197\test.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#include "d3dlocus.h"
#include "test.h"

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CTest*   pTest;
    BOOL     bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    // Create the scene
    pTest = new CTest();
    if (!pTest) {
        return FALSE;
    }

    // Initialize the scene
    if (!pTest->Create(pDisplay)) {
        pTest->Release();
        return FALSE;
    }

    bRet = pTest->Exhibit(pnExitCode);

    // Clean up the scene
    pTest->Release();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
// CTest
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CTest
//
// Description:
//
//     Initialize the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CTest::CTest() {

    m_bSpecular = TRUE;
}

//******************************************************************************
//
// Method:
//
//     ~CTest
//
// Description:
//
//     Clean up the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CTest::~CTest() {

    ReleaseSphere(&m_prSphere, &m_pwSphere);
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the test for rendering.
//
// Arguments:
//
//     CDisplay* pDisplay               - Pointer to a Display object.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CTest::Create(CDisplay* pDisplay) {

    return CScene::Create(pDisplay);
}

//******************************************************************************
//
// Method:
//
//     Exhibit
//
// Description:
//
//     Execute the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     The exit value contained in the wParam parameter of the WM_QUIT message.
//
//******************************************************************************
int CTest::Exhibit(int *pnExitCode) {

    return CScene::Exhibit(pnExitCode);
}

//******************************************************************************
//
// Method:
//
//     Prepare
//
// Description:
//
//     Initialize all device-independent data to be used in the scene.  This
//     method is called only once at creation (as opposed to Setup and
//     Initialize, which get called each time the device is Reset).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared, FALSE if it was not.
//
//******************************************************************************
BOOL CTest::Prepare() {

    if (!CreateSphere(&m_prSphere, &m_dwSphereVertices, &m_pwSphere, &m_dwSphereIndices, 10.0f, 64, 64, 2.0f, 2.0f)) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Setup
//
// Description:
//
//     Obtain the device interface pointer from the display, save the current
//     state of the device, and initialize the background vertices to the
//     dimensions of the render target.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared for initialization, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CTest::Setup() {

    return CScene::Setup();
}

//******************************************************************************
//
// Method:
//
//     Initialize
//
// Description:
//
//     Initialize the device and all device objects to be used in the test (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the test was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CTest::Initialize() {

    D3DLIGHT8 light;
    HRESULT   hr;

    if (!m_bCreated) {
        return FALSE;
    }

    // Create a directional light
    memset(&light, 0, sizeof(D3DLIGHT8));
    light.Type = D3DLIGHT_DIRECTIONAL;
    light.Diffuse.r = 1.0f;
    light.Diffuse.g = 1.0f;
    light.Diffuse.b = 1.0f;
    light.Diffuse.a = 1.0f;
    light.Specular.r = 1.0f;
    light.Specular.g = 1.0f;
    light.Specular.b = 1.0f;
    light.Specular.a = 1.0f;
    light.Ambient.r = 1.0f;
    light.Ambient.g = 1.0f;
    light.Ambient.b = 1.0f;
    light.Ambient.a = 1.0f;
    light.Direction = D3DXVECTOR3(0.0f, -1.0f, 1.0f);

    hr = m_pDevice->SetLight(0, &light);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetLight"))) {
        return FALSE;
    }

    hr = m_pDevice->LightEnable(0, TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::LightEnable"))) {
        return FALSE;
    }

    // Set a material
    if (!SetMaterial(m_pDevice, RGBA_MAKE(192, 192, 192, 192), RGBA_MAKE(16, 16, 16, 16), RGBA_MAKE(255, 255, 255, 255), 0, 60.0f)) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Efface
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CTest::Efface() {

    CScene::Efface();
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Update the state of the scene to coincide with the given time.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CTest::Update() {

    CScene::Update();
}

//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render the test scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CTest::Render() {

    DWORD    dwClearFlags = D3DCLEAR_TARGET;
    HRESULT  hr;

    if (!m_bCreated) {
        return FALSE;
    }

#ifndef UNDER_XBOX
    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return TRUE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) {
                return FALSE;
            }
        }
    }
#endif // !UNDER_XBOX

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) {
        dwClearFlags |= D3DCLEAR_ZBUFFER;
    }
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, m_bSpecular);

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_VERTEX);

    m_pDevice->DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, m_dwSphereVertices, m_dwSphereIndices / 3, m_pwSphere, D3DFMT_INDEX16, m_prSphere, sizeof(VERTEX));

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // Fade out the scene on exit
    if (m_pfnFade) {
        (this->*m_pfnFade)();
    }

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input for the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CTest::ProcessInput() {

    CScene::ProcessInput();
}
//******************************************************************************
//
// Method:
//
//     InitView
//
// Description:
//
//     Initialize the camera view in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CTest::InitView() {

    if (!m_pDisplay) {
        return FALSE;
    }

    // Set the view position
    m_camInitial.vPosition     = D3DXVECTOR3(0.0f, 0.0f, -50.0f);
    m_camInitial.vInterest     = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_camInitial.fRoll         = 0.0f;
    m_camInitial.fFieldOfView  = M_PI / 4.0f;
    m_camInitial.fNearPlane    = 0.1f;
    m_camInitial.fFarPlane     = 1000.0f;
    m_pDisplay->SetCamera(&m_camInitial);

    return m_pDisplay->SetView(&m_camInitial);
}

//******************************************************************************
// Scene window procedure (pseudo-subclassed off the main window procedure)
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
BOOL CTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_F12: // Toggle pause state
                    m_bPaused = !m_bPaused;
                    return TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CScene::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1197\exe\sources.inc ===
TARGETNAME=xbox1197
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\l_rx1197.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1197\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=xbox1197
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1197\test.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.h

Author:

    Matt Bronder

Description:

    Direct3D test functions.

*******************************************************************************/

#ifndef __TEST_H__
#define __TEST_H__

//******************************************************************************
class CTest : public CScene {

protected:

    PVERTEX                         m_prSphere;
    LPWORD                          m_pwSphere;
    DWORD                           m_dwSphereVertices;
    DWORD                           m_dwSphereIndices;

    BOOL                            m_bSpecular;

public:

                                    CTest();
                                    ~CTest();

    virtual BOOL                    Create(CDisplay* pDisplay);
    virtual int                     Exhibit(int *pnExitCode);

protected:

    virtual BOOL                    Prepare();
    virtual BOOL                    Setup();
    virtual BOOL                    Initialize();
    virtual void                    Efface();
    virtual void                    Update();
    virtual BOOL                    Render();

    virtual void                    ProcessInput();
    virtual BOOL                    InitView();

    virtual BOOL                    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                                            WPARAM wParam, LPARAM lParam);
};

#endif //__TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1435\wrap.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    wrap.h

Author:

    Matt Bronder

Description:

    Direct3D test functions.

*******************************************************************************/

#ifndef __WRAP_H__
#define __WRAP_H__

//******************************************************************************
class CWrap : public CScene {

protected:

    TLVERTEX                        m_prVertices[4];
    CTexture8*                      m_pd3dt;

public:

                                    CWrap();
                                    ~CWrap();

    virtual BOOL                    Create(CDisplay* pDisplay);
    virtual int                     Exhibit(int *pnExitCode);

protected:

    virtual BOOL                    Prepare();
    virtual BOOL                    Setup();
    virtual BOOL                    Initialize();
    virtual void                    Efface();
    virtual void                    Update();
    virtual BOOL                    Render();

    virtual void                    ProcessInput();
    virtual BOOL                    InitView();

    virtual BOOL                    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                                            WPARAM wParam, LPARAM lParam);
};

#endif //__WRAP_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1435\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1435\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1435\modulex.h ===
#define PREPEND_MODULE(Suffix) wrap1##Suffix
#define MODULE_STRING "wrap1"
#pragma comment(linker, "/include:_wrap1_ExhibitScene@8")
#pragma comment(linker, "/include:_wrap1_texture")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1395\test.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.h

Author:

    Matt Bronder

Description:

    Direct3D repro test functions.

*******************************************************************************/

#ifndef __TEST_H__
#define __TEST_H__

//******************************************************************************
class CReproTest {

protected:

    HINSTANCE                       m_hInstance;
    HWND                            m_hWnd;

    LPDIRECT3D8                     m_pd3d;
    LPDIRECT3DDEVICE8               m_pDevice;

    LPDIRECT3DVERTEXBUFFER8         m_pd3dr;
    LPDIRECT3DTEXTURE8              m_pd3dt;

public:

                                    CReproTest();
                                    ~CReproTest();

    virtual BOOL                    Create(HINSTANCE hInstance);
    virtual BOOL                    Run();

protected:

    virtual BOOL                    InitDeviceState();
    virtual BOOL                    SetViewport(DWORD dwWidth, DWORD dwHeight);
};

//******************************************************************************
LRESULT CALLBACK    WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

void                InitMatrix(D3DMATRIX* pd3dm,
                        float _11, float _12, float _13, float _14,
                        float _21, float _22, float _23, float _24,
                        float _31, float _32, float _33, float _34,
                        float _41, float _42, float _43, float _44);

void                SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, 
                        LPD3DXVECTOR3 pvAt, LPD3DXVECTOR3 pvUp);

void                SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, 
                        float fBack, float fFieldOfView, float fAspect);

#endif //__TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1435\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_rx1435
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SOURCES=\
    wrap.cpp \
    texture.bmp.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1565\modulex.h ===
#define PREPEND_MODULE(Suffix) module##Suffix
#define MODULE_STRING "module"
#pragma comment(linker, "/include:_module_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1395\test.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#ifndef UNDER_XBOX
#include <windows.h>
#else
#include <xtl.h>
#endif // UNDER_XBOX
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <d3dx8.h>
#include "util.h"
#include "dtypes.h"
#include "test.h"

//******************************************************************************
// WinMain
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WinMain
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     HINSTANCE hInstance      - Application instance handle
//
//     HINSTANCE hPrevInstance  - Previous instance of the application (always
//                                NULL for Win32 applications)
//
//     LPSTR szCmdLine          - Pointer to a string specifying the command
//                                line used in launching the application
//                                (excluding the program name)
//
//     int nCmdShow             - State specifying how the window is to be 
//                                displayed on creation
//
// Return Value:
//
//     0 on success, -1 on failure.
//
//******************************************************************************
#ifndef UNDER_XBOX
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR szCmdLine, int nCmdShow) 
#else
int APIENTRY wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR szCmdLine, int nCmdShow) 
#endif // UNDER_XBOX
{
    CReproTest*     pRTest;
    int             ret = 0;

    // Seed the pseudo-random number generator
    srand(GetTickCount());

    // Create a heap for the application
    if (!CreateHeap()) {
        return 0;
    }

    // Create the display
    pRTest = new CReproTest();
    if (!pRTest) {
        ReleaseHeap();
        return 0;
    }

    // Initialize the display
    if (!pRTest->Create(hInstance)) {
        DebugString(TEXT("CDisplay::Create failed"));
        delete pRTest;
        ReleaseHeap();
        return 0;
    }

    // Render the 3D scene
    pRTest->Run();

    // Clean up
    delete pRTest;
    ReleaseHeap();

    return ret;
}

//******************************************************************************
CReproTest::CReproTest() {

    m_hWnd = NULL;
    m_pd3d = NULL;
    m_pDevice = NULL;
    m_pd3dr = NULL;
    m_pd3dt = NULL;
}

//******************************************************************************
CReproTest::~CReproTest() {

    if (m_pd3dt) {
        m_pd3dt->Release();
        m_pd3dt = NULL;
    }

    if (m_pd3dr) {
        m_pd3dr->Release();
        m_pd3dr = NULL;
    }

    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }

    if (m_pd3d) {
        m_pd3d->Release();
        m_pd3d = NULL;
    }

#ifndef UNDER_XBOX
    // Unregister the window class
    UnregisterClass(TEXT("Direct3D Repro Test"), m_hInstance);
#endif // !UNDER_XBOX
}

//******************************************************************************
BOOL CReproTest::Create(HINSTANCE hInstance) {

    D3DPRESENT_PARAMETERS   d3dpp;
    LVERTEX                 plrVertices[3];
    LPBYTE                  pData;
    D3DLOCKED_RECT          d3dlr;
    LPDWORD                 pdwPixel;
    UINT                    i, j;
    HRESULT                 hr;
#ifndef UNDER_XBOX
    WNDCLASS                wc;
    MSG                     msg;
#endif // !UNDER_XBOX

    m_hInstance = hInstance;

#ifndef UNDER_XBOX

    // Register the window class
    memset(&wc, 0, sizeof(WNDCLASS));
    wc.style            = 0;
    wc.lpfnWndProc      = WndProc;
    wc.cbClsExtra       = 0;
    wc.cbWndExtra       = 0;
    wc.hInstance        = m_hInstance;
    wc.hIcon            = NULL;
    wc.hbrBackground    = NULL;
    wc.hCursor          = LoadCursor(NULL, IDC_ARROW);
    wc.lpszMenuName     = NULL;
    wc.lpszClassName    = TEXT("Direct3D Repro Test");

    if (!RegisterClass(&wc)) {
        DebugString(TEXT("RegisterClass failed"));
		return FALSE;
    }

    // Create the main application window
    m_hWnd = CreateWindowEx(0, TEXT("Direct3D Repro Test"), 
                            TEXT("Direct3D Repro Test"), 
                            WS_OVERLAPPEDWINDOW | WS_VISIBLE, 0, 0,
                            GetSystemMetrics(SM_CXSCREEN), 
                            GetSystemMetrics(SM_CYSCREEN),
                            NULL, NULL, m_hInstance, NULL);

    if (!m_hWnd) {
        DebugString(TEXT("CreateWindowEx failed"));
		return FALSE;
    }

    UpdateWindow(m_hWnd);

    // Pump any messages
    while(PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

#endif

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pd3d) {
        DebugString(TEXT("Direct3DCreate8 failed"));
    }

    // Initialize the presentation parameters
    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_A8R8G8B8;
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_D24S8;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = m_hWnd;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = TRUE;

    // Create the device
    hr = m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, m_hWnd, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice);
    if (ResultFailed(hr, TEXT("IDirect3D8::CreateDevice failed"))) {
        return FALSE;
    }

    plrVertices[0] = LVERTEX(D3DXVECTOR3(-10.0f, -10.0f, 0.0f), RGBA_MAKE(255, 255, 255, 255), 0, 0.0f, 256.0f);
    plrVertices[1] = LVERTEX(D3DXVECTOR3( 0.0f,  10.0f, 0.0f), RGBA_MAKE(255, 255, 255, 255), 0, 128.0f, 0.0f);
    plrVertices[2] = LVERTEX(D3DXVECTOR3( 10.0f, -10.0f, 0.0f), RGBA_MAKE(255, 255, 255, 255), 0, 256.0f, 256.0f);

    hr = m_pDevice->CreateVertexBuffer(3 * sizeof(LVERTEX), 0, FVF_LVERTEX, D3DPOOL_DEFAULT, &m_pd3dr);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        return FALSE;
    }

    hr = m_pd3dr->Lock(0, 3 * sizeof(LVERTEX), &pData, 0);
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"))) {
        return FALSE;
    }

    memcpy(pData, plrVertices, 3 * sizeof(LVERTEX));

    hr = m_pd3dr->Unlock();
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"))) {
        return FALSE;
    }

    hr = m_pDevice->CreateTexture(256, 256, 1, 0, D3DFMT_LIN_A8R8G8B8, D3DPOOL_DEFAULT, &m_pd3dt);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateTexture"))) {
        return FALSE;
    }

    m_pd3dt->LockRect(0, &d3dlr, NULL, 0);
    for (i = 0, pdwPixel = (LPDWORD)d3dlr.pBits; i < 256; i++) {
        for (j = 0; j < 256; j++) {
            pdwPixel[j] = RGBA_MAKE(0, 0, 255, 255);
        }
        pdwPixel += d3dlr.Pitch >> 2;
    }
    m_pd3dt->UnlockRect(0);

    return InitDeviceState();
}

//******************************************************************************
BOOL CReproTest::Run() {

#ifndef UNDER_XBOX
    MSG      msg;
#endif // !UNDER_XBOX
    HRESULT  hr;

    do {

#ifndef UNDER_XBOX
        if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
        else if (msg.message != WM_QUIT) {

            hr = m_pDevice->TestCooperativeLevel();
            if (FAILED(hr)) {
                return FALSE;
            }

#endif // !UNDER_XBOX

            // Clear the rendering target
            m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(0, 0, 0), 1.0f, 0);

            // Begin the scene
            m_pDevice->BeginScene();

            // Disable lighting
            m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

            // Use a fixed function shader
            m_pDevice->SetVertexShader(FVF_LVERTEX);

            m_pDevice->SetStreamSource(0, m_pd3dr, sizeof(LVERTEX));

            m_pDevice->SetTextureStageState(0, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP);

            m_pDevice->SetTextureStageState(0, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP);

            m_pDevice->SetTexture(0, m_pd3dt);

            // Draw a triangle
            m_pDevice->DrawPrimitive(D3DPT_TRIANGLELIST, 0, 1);

            // End the scene
            m_pDevice->EndScene();

            // Update the screen
            m_pDevice->Present(NULL, NULL, NULL, NULL);

#ifndef UNDER_XBOX
        }
    } while (msg.message != WM_QUIT);
#else
    } while (TRUE);
#endif

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::InitDeviceState() {

    D3DXMATRIX mTransform;
    UINT       i;
    HRESULT    hr;

    // Initialize the viewport
    if (!SetViewport(640, 480)) {
        DebugString(TEXT("SetViewport failed"));
    }

    // Initialize the view matrix
    SetView(&mTransform, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
            &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

    hr = m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Initialize the projection matrix
    SetPerspectiveProjection(&mTransform, 0.1f, 1000.0f, 
            M_PI / 4.0f, 480.0f / 640.0f);

    hr = m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Set ambient lighting
    hr = m_pDevice->SetRenderState(D3DRS_AMBIENT, 0x20202020);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the texture filters
    for (i = 0; i < 2; i++) {
        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }
    }

    // Set blend modes
    hr = m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    hr = m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Modulate color and alpha texture stages
    hr = m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    // Set the alpha comparison function
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAFUNC, (DWORD)D3DCMP_GREATEREQUAL);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the alpha reference value to opaque
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAREF, 0xFF);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Turn on specular highlights
    hr = m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Enable dithering
    hr = m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Disable per-vertex color
    hr = m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::SetViewport(DWORD dwWidth, DWORD dwHeight) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    // Set a viewport for the device
    viewport.X = 0;
    viewport.Y = 0;
    viewport.Width = dwWidth;
    viewport.Height = dwHeight;
    viewport.MinZ = 0.0f;
    viewport.MaxZ = 1.0f;

    hr = m_pDevice->SetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetViewport"))) {
        return FALSE;
    }

    return TRUE;
}

#ifndef UNDER_XBOX

//******************************************************************************
// WndProc
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Window procedure to process messages for the main application window
//
// Arguments:
//
//     HWND hWnd                - Application window
//
//     UINT message             - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     0 if the message was handled, the return of DefWindowProc otherwise.
//
//******************************************************************************
LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    switch (uMsg) {

        case WM_SETCURSOR:
            SetCursor(NULL);
            return TRUE;

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    SendMessage(hWnd, WM_CLOSE, 0, 0);
                    return 0;
            }
            break;

        case WM_CLOSE:
            DestroyWindow(hWnd);
            return 0;

        case WM_DESTROY:
            PostQuitMessage(0);
            return 0;
    }

    return DefWindowProc(hWnd, uMsg, wParam, lParam);
}

#endif // UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     InitMatrix
//
// Description:
//
//     Initialize the given matrix with the given values.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Matrix to initialize
//
//     float _11 to _44         - Initialization values
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
                float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44) 
{
    if (pd3dm) {

        pd3dm->_11 = _11;
        pd3dm->_12 = _12;
        pd3dm->_13 = _13;
        pd3dm->_14 = _14;
        pd3dm->_21 = _21;
        pd3dm->_22 = _22;
        pd3dm->_23 = _23;
        pd3dm->_24 = _24;
        pd3dm->_31 = _31;
        pd3dm->_32 = _32;
        pd3dm->_33 = _33;
        pd3dm->_34 = _34;
        pd3dm->_41 = _41;
        pd3dm->_42 = _42;
        pd3dm->_43 = _43;
        pd3dm->_44 = _44;
    }
}

//******************************************************************************
//
// Function:
//
//     SetView
//
// Description:
//
//     Align the given view matrix along the given direction and up vectors with
//     the position vector as the origin.
//
// Arguments:
//
//     LPD3DXMATRIX pd3dm       - View matrix to initialize
//
//     LPD3DXVECTOR3 pvPos      - View origin
//
//     LPD3DXVECTOR3 pvAt       - View interest vector
//
//     LPD3DXVECTOR3 pvUp       - View up vector
//
// Return Value:
//
//     Initialized view matrix.
//
//******************************************************************************
void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, LPD3DXVECTOR3 pvAt, 
                                                      LPD3DXVECTOR3 pvUp) 
{
    D3DXVECTOR3  d, u, r;

    if (pd3dm && pvPos && pvAt && pvUp && !(*pvPos == *pvAt) 
                                 && !(*pvUp == D3DXVECTOR3(0.0f, 0.0f, 0.0f))) {

        D3DXVec3Normalize(&d, &(*pvAt - *pvPos));
        u = *pvUp;

        // Project the up vector into the plane of the direction vector
        D3DXVec3Normalize(&u, &(u - (d * D3DXVec3Dot(&u, &d))));

        // Get the cross product
        D3DXVec3Cross(&r, &u, &d);

        // Initialize the view transform
        InitMatrix(pd3dm,
            r.x, u.x, d.x, 0.0f,
            r.y, u.y, d.y, 0.0f,
            r.z, u.z, d.z, 0.0f,
            -(pvPos->x * r.x + pvPos->y * r.y + pvPos->z * r.z), 
            -(pvPos->x * u.x + pvPos->y * u.y + pvPos->z * u.z), 
            -(pvPos->x * d.x + pvPos->y * d.y + pvPos->z * d.z), 
            1.0f
        );
    }
}

//******************************************************************************
//
// Function:
//
//     SetPerspectiveProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fFieldOfView, float fAspect) {

    float fTanHalfFOV = (float)tan((double)fFieldOfView / 2.0);
    float fFar = fBack / (fBack - fFront);

    InitMatrix(pd3dm,
        1.0f, 0.0f,           0.0f,                         0.0f,
        0.0f, 1.0f / fAspect, 0.0f,                         0.0f,
        0.0f, 0.0f,           fTanHalfFOV * fFar,           fTanHalfFOV,
        0.0f, 0.0f,           -fFront * fTanHalfFOV * fFar, 0.0f
    );
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1435\wrap.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    wrap.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#include "d3dlocus.h"
#include "wrap.h"

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CWrap*   pWrap;
    BOOL     bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    // Create the scene
    pWrap = new CWrap();
    if (!pWrap) {
        return FALSE;
    }

    // Initialize the scene
    if (!pWrap->Create(pDisplay)) {
        pWrap->Release();
        return FALSE;
    }

    bRet = pWrap->Exhibit(pnExitCode);

    // Clean up the scene
    pWrap->Release();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
// CWrap
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CWrap
//
// Description:
//
//     Initialize the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CWrap::CWrap() {

    // Initialize the vertices
    m_prVertices[0] = TLVERTEX(D3DXVECTOR3(160.0f, 360.0f, 0.9999f), 0.0001f, RGB_MAKE(255,255,255), RGB_MAKE(0,0,0), 0.9f, 0.2f);
    m_prVertices[1] = TLVERTEX(D3DXVECTOR3(160.0f, 120.0f, 0.9999f), 0.0001f, RGB_MAKE(255,255,255), RGB_MAKE(0,0,0), 0.9f, 0.9f);
    m_prVertices[2] = TLVERTEX(D3DXVECTOR3(480.0f, 120.0f, 0.9999f), 0.0001f, RGB_MAKE(255,255,255), RGB_MAKE(0,0,0), 0.2f, 0.9f);
    m_prVertices[3] = TLVERTEX(D3DXVECTOR3(480.0f, 360.0f, 0.9999f), 0.0001f, RGB_MAKE(255,255,255), RGB_MAKE(0,0,0), 0.2f, 0.2f);
}

//******************************************************************************
//
// Method:
//
//     ~CWrap
//
// Description:
//
//     Clean up the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CWrap::~CWrap() {
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the test for rendering.
//
// Arguments:
//
//     CDisplay* pDisplay               - Pointer to a Display object.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CWrap::Create(CDisplay* pDisplay) {

    return CScene::Create(pDisplay);
}

//******************************************************************************
//
// Method:
//
//     Exhibit
//
// Description:
//
//     Execute the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     The exit value contained in the wParam parameter of the WM_QUIT message.
//
//******************************************************************************
int CWrap::Exhibit(int *pnExitCode) {

    return CScene::Exhibit(pnExitCode);
}

//******************************************************************************
//
// Method:
//
//     Prepare
//
// Description:
//
//     Initialize all device-independent data to be used in the scene.  This
//     method is called only once at creation (as opposed to Setup and
//     Initialize, which get called each time the device is Reset).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared, FALSE if it was not.
//
//******************************************************************************
BOOL CWrap::Prepare() {

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Setup
//
// Description:
//
//     Obtain the device interface pointer from the display, save the current
//     state of the device, and initialize the background vertices to the
//     dimensions of the render target.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared for initialization, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CWrap::Setup() {

    return CScene::Setup();
}

//******************************************************************************
//
// Method:
//
//     Initialize
//
// Description:
//
//     Initialize the device and all device objects to be used in the test (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the test was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CWrap::Initialize() {

    m_pd3dt = (CTexture8*)CreateTexture(m_pDevice, TEXT("texture.bmp"));
    if (!m_pd3dt) {
        return FALSE;
    }

    m_pDevice->SetTexture(0, m_pd3dt);

    m_pDevice->SetRenderState(D3DRS_WRAP0, (DWORD)(D3DWRAP_U | D3DWRAP_V));

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Efface
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CWrap::Efface() {

    CScene::Efface();
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Update the state of the scene to coincide with the given time.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CWrap::Update() {

    CScene::Update();
}

//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render the test scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CWrap::Render() {

    DWORD    dwClearFlags = D3DCLEAR_TARGET;
    HRESULT  hr;

    if (!m_bCreated) {
        return FALSE;
    }

    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return TRUE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) {
                return FALSE;
            }
        }
    }

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) {
        dwClearFlags |= D3DCLEAR_ZBUFFER;
    }
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_TLVERTEX);

    m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, m_prVertices, sizeof(TLVERTEX));

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // Fade out the scene on exit
    if (m_pfnFade) {
        (this->*m_pfnFade)();
    }

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input for the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CWrap::ProcessInput() {

    static BOOL bWrap = FALSE;

    CScene::ProcessInput();

    m_pDisplay->GetJoyState(&m_jsJoys, &m_jsLast);
    
    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_A)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_A)) {
            if (bWrap) {
                m_pDevice->SetRenderState(D3DRS_WRAP0, (DWORD)(D3DWRAP_U | D3DWRAP_V));
            }
            else {
                m_pDevice->SetRenderState(D3DRS_WRAP0, (DWORD)0);
            }
            bWrap = !bWrap;
        }
    }
}

//******************************************************************************
//
// Method:
//
//     InitView
//
// Description:
//
//     Initialize the camera view in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CWrap::InitView() {

    if (!m_pDisplay) {
        return FALSE;
    }

    // Set the view position
    m_camInitial.vPosition     = D3DXVECTOR3(0.0f, 0.0f, -50.0f);
    m_camInitial.vInterest     = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_camInitial.fRoll         = 0.0f;
    m_camInitial.fFieldOfView  = M_PI / 4.0f;
    m_camInitial.fNearPlane    = 0.1f;
    m_camInitial.fFarPlane     = 1000.0f;
    m_pDisplay->SetCamera(&m_camInitial);

    return m_pDisplay->SetView(&m_camInitial);
}

//******************************************************************************
// Scene window procedure (pseudo-subclassed off the main window procedure)
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
BOOL CWrap::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_F12: // Toggle pause state
                    m_bPaused = !m_bPaused;
                    return TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CScene::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1565\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1435\texture.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    texture.bmp.cpp

Description

    Data file for the resource texture.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_texture[] = {

   0x42, 0x4D, 0x38, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 
   0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 
   0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 
   0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 
   0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 
   0x8A, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 
   0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 
   0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 
   0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 
   0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 
   0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x9A, 0x66, 0x01, 0x99, 0x65, 0x00, 
   0x9B, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 
   0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 
   0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 
   0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 
   0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 
   0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 
   0xAA, 0x54, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 
   0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x01, 
   0xB2, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 
   0x4B, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 
   0x00, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xBA, 0x46, 0x01, 
   0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 
   0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 
   0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 
   0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 
   0x3A, 0x01, 0xC6, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x39, 
   0x00, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x01, 0xC9, 0x35, 0x00, 
   0xCA, 0x35, 0x00, 0xCB, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 
   0x33, 0x01, 0xCD, 0x33, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x30, 
   0x01, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2D, 0x01, 0xD2, 0x2C, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 
   0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x00, 0xD7, 0x28, 
   0x00, 0xD8, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 
   0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x00, 0xDB, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDD, 
   0x22, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x20, 0x01, 0xDF, 0x21, 
   0x01, 0xDF, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x00, 
   0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x00, 0xE5, 
   0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x19, 0x00, 0xE6, 0x19, 0x00, 0xE6, 0x19, 0x01, 0xE7, 0x19, 
   0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 
   0xEA, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 
   0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xEF, 0x11, 
   0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 
   0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF5, 
   0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF7, 0x08, 
   0x01, 0xF8, 0x08, 0x01, 0xF8, 0x08, 0x01, 0xF8, 0x07, 0x01, 0xF9, 0x06, 0x01, 0xF9, 0x06, 0x01, 
   0xFA, 0x06, 0x01, 0xFB, 0x05, 0x01, 0xFB, 0x04, 0x01, 0xFB, 0x04, 0x01, 0xFC, 0x04, 0x01, 0xFD, 
   0x03, 0x01, 0xFD, 0x03, 0x01, 0xFD, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 
   0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 
   0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 
   0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 
   0x8A, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x01, 0x8D, 
   0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 
   0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6F, 0x00, 0x92, 0x6D, 0x01, 
   0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 
   0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 
   0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x67, 0x00, 0x9A, 0x66, 0x01, 
   0x99, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9C, 
   0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 
   0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x59, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 
   0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 
   0xAA, 0x56, 0x00, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 
   0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 
   0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 
   0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x00, 0xB3, 0x4B, 0x01, 0xB4, 
   0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 
   0x00, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xB9, 0x46, 0x01, 
   0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBB, 0x43, 0x00, 0xBC, 
   0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 
   0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 
   0xC1, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC2, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC7, 0x39, 0x01, 0xC6, 0x39, 
   0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xCA, 0x36, 0x01, 
   0xCA, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 
   0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCF, 0x31, 0x00, 0xCE, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2D, 0x01, 0xD3, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 
   0x2C, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x00, 0xD7, 0x29, 
   0x00, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x00, 
   0xD9, 0x26, 0x01, 0xDA, 0x25, 0x00, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x00, 0xDC, 
   0x23, 0x01, 0xDD, 0x23, 0x00, 0xDD, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x00, 0xDE, 0x21, 
   0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x00, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 
   0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1C, 0x01, 0xE3, 0x1D, 0x00, 0xE3, 0x1C, 0x01, 0xE4, 
   0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 
   0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x00, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x16, 0x01, 
   0xEA, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x00, 0xEC, 
   0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 
   0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 
   0xF2, 0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 
   0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF6, 0x09, 
   0x01, 0xF7, 0x09, 0x01, 0xF7, 0x08, 0x01, 0xF8, 0x08, 0x01, 0xF9, 0x07, 0x01, 0xF9, 0x06, 0x01, 
   0xFA, 0x06, 0x01, 0xFA, 0x06, 0x01, 0xFA, 0x05, 0x01, 0xFB, 0x05, 0x01, 0xFB, 0x04, 0x01, 0xFC, 
   0x04, 0x01, 0xFD, 0x04, 0x01, 0xFD, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 
   0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 
   0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 
   0x7B, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 
   0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 
   0x74, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 
   0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 
   0x91, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x00, 0x93, 0x6D, 0x00, 0x94, 0x6C, 0x01, 0x93, 
   0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 
   0x01, 0x97, 0x69, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 
   0x63, 0x00, 0x9C, 0x62, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 
   0x01, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 
   0x5B, 0x01, 0xA4, 0x5A, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 
   0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x01, 0xA9, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x01, 0xAC, 
   0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 
   0x00, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB7, 0x49, 
   0x00, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 
   0xBA, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 
   0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 
   0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x00, 0xC1, 0x3E, 0x01, 
   0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x00, 0xC3, 
   0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 
   0x01, 0xC6, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC7, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x00, 
   0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 
   0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x31, 0x01, 0xCF, 0x31, 
   0x00, 0xCF, 0x31, 0x00, 0xCF, 0x30, 0x00, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 
   0x2C, 0x00, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x29, 
   0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x00, 
   0xD9, 0x26, 0x00, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x00, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 
   0x23, 0x01, 0xDC, 0x24, 0x00, 0xDC, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 
   0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x00, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 
   0xE1, 0x1F, 0x01, 0xE2, 0x1D, 0x00, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 
   0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 
   0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x00, 0xE8, 0x17, 0x01, 
   0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x00, 0xEB, 0x14, 0x01, 0xEB, 
   0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x12, 
   0x01, 0xEE, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 
   0xF1, 0x0F, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 
   0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x0A, 
   0x00, 0xF7, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF8, 0x08, 0x01, 0xF8, 0x07, 0x01, 0xF9, 0x07, 0x01, 
   0xF9, 0x06, 0x01, 0xFA, 0x06, 0x01, 0xFA, 0x06, 0x01, 0xFB, 0x05, 0x01, 0xFB, 0x04, 0x01, 0xFB, 
   0x04, 0x01, 0xFC, 0x03, 0x01, 0xFC, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 
   0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 
   0x80, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x01, 0x84, 
   0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 
   0x00, 0x87, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 
   0x73, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 
   0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 
   0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x00, 0x96, 0x6A, 
   0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 
   0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 
   0x64, 0x00, 0x9C, 0x64, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 
   0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x00, 0xA1, 0x5E, 0x00, 
   0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 
   0x5B, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5A, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 
   0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 
   0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 
   0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 
   0x01, 0xB7, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 
   0xB9, 0x47, 0x01, 0xBA, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 
   0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x00, 0xBD, 0x42, 0x00, 0xBE, 0x42, 
   0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 
   0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 
   0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 
   0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 
   0xC8, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 
   0x34, 0x01, 0xCC, 0x34, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 
   0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xD0, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 
   0xD1, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 
   0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2B, 0x01, 0xD6, 0x2A, 
   0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 
   0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 
   0x25, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x00, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x22, 
   0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 
   0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 
   0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x00, 0xE5, 0x1B, 0x01, 0xE6, 0x1A, 
   0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 0x00, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 
   0xE9, 0x17, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x01, 0xEB, 
   0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 
   0x01, 0xEE, 0x12, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x10, 0x01, 
   0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 
   0x0C, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF5, 0x0A, 
   0x01, 0xF6, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF8, 0x08, 0x01, 0xF8, 0x07, 0x01, 
   0xF9, 0x08, 0x01, 0xF9, 0x06, 0x01, 0xF9, 0x06, 0x01, 0xFA, 0x06, 0x01, 0xFB, 0x05, 0x01, 0xFB, 
   0x05, 0x01, 0xFC, 0x04, 0x01, 0xFC, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x81, 
   0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 
   0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 
   0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 
   0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x87, 0x77, 0x01, 
   0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 
   0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x73, 0x01, 0x8E, 0x71, 
   0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x70, 0x00, 
   0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 
   0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 
   0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x68, 0x01, 
   0x99, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 
   0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 
   0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 
   0xA1, 0x5E, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA2, 
   0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 
   0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 
   0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xAA, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 
   0x55, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 
   0x01, 0xAE, 0x52, 0x00, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 
   0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 
   0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 
   0xB9, 0x47, 0x01, 0xB8, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 
   0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x43, 
   0x01, 0xBE, 0x41, 0x01, 0xBE, 0x42, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 
   0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 
   0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 
   0x01, 0xC5, 0x39, 0x01, 0xC6, 0x39, 0x00, 0xC6, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 
   0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 
   0x35, 0x01, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCE, 0x33, 
   0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x00, 
   0xD1, 0x2F, 0x01, 0xD0, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD2, 
   0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD4, 0x2A, 0x01, 0xD5, 0x2A, 
   0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x00, 0xD7, 0x27, 0x01, 
   0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x00, 0xDB, 
   0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 
   0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x00, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x1F, 0x01, 
   0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 
   0x1D, 0x00, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x00, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 
   0x00, 0xE6, 0x19, 0x01, 0xE6, 0x19, 0x01, 0xE6, 0x18, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 0x01, 
   0xE8, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEA, 
   0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x13, 
   0x01, 0xEE, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xEF, 0x10, 0x01, 
   0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x00, 0xF2, 
   0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0B, 0x00, 0xF4, 0x0B, 0x01, 0xF5, 0x0A, 
   0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF6, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF7, 0x08, 0x01, 
   0xF8, 0x07, 0x01, 0xF8, 0x07, 0x01, 0xF9, 0x07, 0x01, 0xF9, 0x06, 0x01, 0xFA, 0x06, 0x01, 0xFA, 
   0x05, 0x01, 0xFB, 0x04, 0x01, 0xFB, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 
   0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 
   0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7B, 
   0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 
   0x88, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 
   0x75, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 
   0x00, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 
   0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 
   0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x00, 
   0x98, 0x67, 0x00, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 
   0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x63, 
   0x00, 0x9E, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9F, 0x61, 0x00, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x00, 
   0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 
   0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 
   0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 
   0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAB, 
   0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x53, 0x00, 0xAC, 0x54, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x53, 
   0x00, 0xAE, 0x52, 0x01, 0xAD, 0x51, 0x00, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 
   0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 
   0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 
   0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x48, 0x01, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 
   0xB8, 0x48, 0x01, 0xB9, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 
   0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x43, 
   0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 
   0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 
   0x3D, 0x00, 0xC3, 0x3C, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 
   0x01, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x38, 0x01, 0xC7, 0x38, 0x00, 
   0xC8, 0x37, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 
   0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x00, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 
   0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xD0, 0x30, 0x01, 
   0xD0, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD4, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 
   0x00, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 
   0xD8, 0x28, 0x00, 0xD9, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xDA, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDB, 
   0x25, 0x01, 0xDA, 0x25, 0x00, 0xDB, 0x24, 0x00, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x22, 
   0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xE0, 0x20, 0x01, 
   0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x00, 0xE2, 0x1E, 0x01, 0xE2, 
   0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE4, 0x1C, 0x00, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 
   0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x19, 0x01, 
   0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x00, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 
   0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 
   0x01, 0xED, 0x12, 0x00, 0xED, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x11, 0x00, 
   0xF0, 0x10, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x00, 0xF2, 0x0E, 0x01, 0xF2, 
   0x0D, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF5, 0x0B, 
   0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF6, 0x08, 0x01, 
   0xF7, 0x08, 0x01, 0xF8, 0x07, 0x01, 0xF9, 0x07, 0x01, 0xF9, 0x06, 0x01, 0xFA, 0x06, 0x01, 0xFA, 
   0x06, 0x01, 0xFB, 0x05, 0x01, 0xFB, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 
   0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 
   0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x01, 0x83, 0x7C, 0x01, 0x82, 0x7D, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 
   0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 
   0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 
   0x76, 0x01, 0x8B, 0x75, 0x01, 0x8A, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 
   0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 
   0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x91, 
   0x6E, 0x01, 0x93, 0x6C, 0x00, 0x92, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6A, 
   0x01, 0x95, 0x6B, 0x00, 0x95, 0x69, 0x00, 0x96, 0x6A, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 
   0x97, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 
   0x66, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 
   0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 
   0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA2, 0x5E, 0x01, 0xA1, 
   0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA2, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 
   0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 
   0x56, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x00, 0xAC, 0x53, 
   0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 
   0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 
   0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB7, 0x49, 0x01, 0xB6, 0x48, 0x00, 
   0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 
   0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x40, 0x00, 
   0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 
   0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 
   0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x00, 0xC6, 0x38, 0x01, 
   0xC7, 0x39, 0x01, 0xC8, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xCA, 
   0x36, 0x01, 0xCA, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCC, 0x34, 0x00, 0xCC, 0x33, 
   0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 
   0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x00, 0xD1, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 
   0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2B, 0x01, 0xD4, 0x2B, 
   0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 
   0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 
   0x26, 0x01, 0xDA, 0x25, 0x00, 0xDA, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x23, 0x01, 0xDC, 0x23, 
   0x01, 0xDC, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x00, 0xDE, 0x20, 0x00, 
   0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 
   0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x00, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 
   0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 
   0xE7, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 
   0x16, 0x00, 0xEB, 0x15, 0x01, 0xEA, 0x14, 0x01, 0xEB, 0x14, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 
   0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 
   0xEF, 0x11, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 
   0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0C, 
   0x01, 0xF5, 0x0B, 0x00, 0xF5, 0x0A, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x0A, 0x00, 0xF6, 0x09, 0x01, 
   0xF7, 0x09, 0x01, 0xF8, 0x08, 0x01, 0xF8, 0x08, 0x01, 0xF8, 0x07, 0x01, 0xF9, 0x06, 0x01, 0xF9, 
   0x06, 0x01, 0xFA, 0x05, 0x01, 0xFB, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 
   0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7D, 0x81, 0x00, 0x7F, 0x81, 0x01, 
   0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 
   0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 
   0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 
   0x87, 0x78, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 
   0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 
   0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 
   0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x93, 0x6B, 
   0x01, 0x95, 0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x69, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 
   0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 
   0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x64, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 
   0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 
   0x9F, 0x60, 0x01, 0xA0, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 
   0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 
   0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 
   0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xAA, 
   0x56, 0x01, 0xAA, 0x56, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 
   0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 
   0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 
   0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 
   0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 
   0x46, 0x00, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 0x44, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x43, 
   0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 
   0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 
   0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC2, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3C, 
   0x00, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x00, 
   0xC7, 0x39, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x36, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 
   0x01, 0xCC, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCE, 0x31, 0x01, 
   0xCE, 0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 
   0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 
   0x00, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 
   0xD7, 0x28, 0x01, 0xD7, 0x29, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x26, 0x01, 0xD9, 
   0x27, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 
   0x00, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x00, 
   0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 
   0x1E, 0x01, 0xE1, 0x1D, 0x01, 0xE2, 0x1E, 0x00, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 
   0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 
   0xE7, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 
   0x16, 0x01, 0xEA, 0x15, 0x00, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEC, 0x14, 
   0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x00, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 
   0xEF, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 
   0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF3, 0x0C, 
   0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 
   0xF6, 0x09, 0x01, 0xF7, 0x08, 0x01, 0xF7, 0x08, 0x01, 0xF8, 0x08, 0x00, 0xF9, 0x07, 0x01, 0xF9, 
   0x06, 0x01, 0xF9, 0x06, 0x01, 0xFA, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x84, 
   0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 
   0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 
   0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 
   0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 
   0x86, 0x78, 0x00, 0x87, 0x79, 0x00, 0x88, 0x78, 0x00, 0x87, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 
   0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 
   0x01, 0x8C, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 
   0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 
   0x6E, 0x01, 0x91, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 
   0x01, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6B, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 
   0x96, 0x68, 0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 
   0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 
   0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 
   0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 
   0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 
   0xA7, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x00, 0xA9, 
   0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 
   0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 
   0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4D, 0x00, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 
   0x01, 0xB3, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x01, 
   0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x00, 0xB9, 
   0x47, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x44, 
   0x01, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 
   0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 
   0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 
   0x00, 0xC4, 0x3C, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 
   0x37, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 
   0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 
   0xCE, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x31, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 
   0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 
   0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x00, 0xD5, 0x2A, 0x00, 0xD6, 0x2A, 0x01, 
   0xD6, 0x2A, 0x00, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD9, 
   0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 
   0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x00, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 
   0xDE, 0x21, 0x01, 0xDE, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 
   0x1E, 0x01, 0xE1, 0x1E, 0x00, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x00, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 
   0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 
   0xE7, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE9, 
   0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x00, 0xEA, 0x15, 0x00, 0xEB, 0x15, 0x01, 0xEB, 0x14, 
   0x01, 0xEB, 0x13, 0x01, 0xEC, 0x14, 0x01, 0xED, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 
   0xEE, 0x12, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x10, 0x01, 0xF0, 
   0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0D, 
   0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF6, 0x0A, 0x01, 
   0xF6, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF7, 0x08, 0x01, 0xF7, 0x08, 0x01, 0xF8, 0x07, 0x01, 0xF8, 
   0x07, 0x01, 0xF9, 0x06, 0x01, 0xF9, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 
   0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 
   0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 
   0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 
   0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 
   0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x88, 
   0x76, 0x00, 0x89, 0x77, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x74, 
   0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 
   0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 
   0x6E, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 
   0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x68, 0x01, 0x98, 
   0x66, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x65, 
   0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 
   0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 
   0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5D, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 
   0x00, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 
   0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 
   0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x54, 
   0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x01, 
   0xAD, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 0x01, 0xB0, 
   0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4D, 
   0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x00, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 
   0xB5, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB6, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 
   0x47, 0x00, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 
   0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x00, 
   0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 
   0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x00, 
   0xC5, 0x39, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 0xC8, 
   0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 
   0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCE, 0x32, 0x01, 
   0xCD, 0x32, 0x00, 0xCE, 0x31, 0x00, 0xCE, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 
   0x2F, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 
   0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 
   0xD6, 0x2A, 0x01, 0xD7, 0x2A, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 
   0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 
   0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x22, 0x01, 0xDD, 0x23, 0x01, 
   0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x00, 0xE0, 0x20, 0x01, 0xE0, 
   0x1F, 0x01, 0xE1, 0x1E, 0x00, 0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 
   0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x00, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 
   0xE6, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x19, 0x00, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 
   0x17, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 
   0x01, 0xEB, 0x15, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 
   0xEE, 0x12, 0x00, 0xEE, 0x12, 0x01, 0xEF, 0x11, 0x00, 0xEF, 0x11, 0x01, 0xF0, 0x10, 0x01, 0xF0, 
   0x10, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 
   0x01, 0xF3, 0x0D, 0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF5, 0x0A, 0x01, 
   0xF5, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF7, 0x08, 0x01, 0xF7, 0x08, 0x00, 0xF8, 
   0x08, 0x01, 0xF8, 0x07, 0x01, 0xF9, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 
   0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 
   0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 
   0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 
   0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 
   0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 
   0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x72, 0x01, 0x8D, 0x73, 0x01, 
   0x8D, 0x71, 0x00, 0x8D, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x00, 0x90, 
   0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 
   0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 
   0x95, 0x69, 0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x98, 0x67, 0x01, 0x98, 
   0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x66, 0x01, 0x9B, 0x65, 
   0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 
   0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 
   0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA2, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 
   0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5B, 0x00, 0xA3, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 
   0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 
   0x57, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAB, 0x55, 
   0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x53, 0x01, 
   0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB2, 0x4E, 0x01, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 
   0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 
   0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 
   0x48, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 
   0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x44, 0x01, 0xBD, 0x42, 0x01, 
   0xBD, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xC0, 
   0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 
   0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 
   0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 
   0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCD, 0x32, 0x01, 
   0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 
   0x30, 0x00, 0xD0, 0x2F, 0x00, 0xD1, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 
   0x01, 0xD2, 0x2D, 0x00, 0xD3, 0x2D, 0x01, 0xD4, 0x2C, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 
   0xD6, 0x2A, 0x01, 0xD5, 0x2A, 0x00, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 
   0x28, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x00, 0xDA, 0x25, 
   0x01, 0xDA, 0x24, 0x01, 0xDB, 0x24, 0x00, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 
   0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 
   0x20, 0x01, 0xE0, 0x1F, 0x00, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 
   0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 
   0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE6, 0x19, 0x00, 0xE7, 0x18, 0x01, 0xE8, 
   0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 
   0x00, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x13, 0x01, 0xEC, 0x14, 0x00, 0xED, 0x13, 0x01, 
   0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x10, 0x00, 0xF0, 
   0x10, 0x01, 0xF0, 0x10, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0E, 
   0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 
   0xF5, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF7, 0x09, 0x01, 0xF7, 
   0x08, 0x01, 0xF7, 0x08, 0x01, 0xF8, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 
   0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x82, 0x01, 
   0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 
   0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 
   0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x83, 0x7B, 0x01, 0x85, 0x7B, 0x01, 
   0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 
   0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 
   0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x90, 
   0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 
   0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x96, 0x68, 0x01, 0x97, 
   0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 
   0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 
   0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9F, 0x60, 0x00, 0x9E, 0x61, 0x01, 0xA0, 
   0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5E, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 
   0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 
   0xA4, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 
   0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x56, 0x00, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 
   0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 
   0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xB0, 
   0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 
   0x01, 0xB2, 0x4C, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 
   0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 
   0x48, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x00, 0xBA, 0x45, 
   0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 
   0xBC, 0x42, 0x00, 0xBD, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xC0, 
   0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 
   0x00, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 
   0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x00, 0xC8, 
   0x39, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x38, 0x00, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 
   0x00, 0xCA, 0x36, 0x00, 0xCA, 0x34, 0x01, 0xCB, 0x35, 0x00, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 
   0xCD, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x00, 0xD0, 
   0x30, 0x01, 0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2D, 
   0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 
   0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 
   0x29, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 
   0x00, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x00, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x00, 0xDC, 0x23, 0x01, 
   0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x00, 0xDF, 0x20, 0x01, 0xDF, 
   0x20, 0x00, 0xE0, 0x20, 0x00, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 
   0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x00, 0xE4, 0x1B, 0x01, 
   0xE5, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x18, 0x01, 0xE7, 
   0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 0x15, 
   0x01, 0xEA, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEB, 0x15, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 
   0xED, 0x13, 0x01, 0xED, 0x13, 0x01, 0xED, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEF, 
   0x11, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 0x0E, 
   0x01, 0xF1, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 
   0xF5, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF7, 
   0x09, 0x01, 0xF7, 0x08, 0x01, 0xF8, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 
   0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 
   0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 
   0x81, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 
   0x01, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7D, 0x00, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x00, 
   0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x78, 0x01, 0x87, 
   0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 
   0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 
   0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 
   0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 
   0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 
   0x68, 0x00, 0x97, 0x67, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x64, 0x01, 
   0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 
   0x60, 0x00, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 
   0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 
   0xA5, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 
   0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 
   0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x00, 
   0xAD, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 
   0x51, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 
   0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x00, 
   0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 
   0x48, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 
   0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 
   0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 
   0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3F, 
   0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC4, 0x3C, 0x00, 0xC3, 0x3C, 0x01, 
   0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 
   0x38, 0x01, 0xC8, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 
   0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x00, 
   0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCF, 
   0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 
   0xD5, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD6, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 
   0x29, 0x01, 0xD7, 0x29, 0x01, 0xD8, 0x28, 0x00, 0xD8, 0x27, 0x00, 0xD9, 0x27, 0x01, 0xD9, 0x26, 
   0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x24, 0x01, 
   0xDD, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 
   0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x00, 0xE1, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 
   0x01, 0xE2, 0x1E, 0x00, 0xE3, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x00, 
   0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x19, 0x01, 0xE6, 0x19, 0x01, 0xE7, 
   0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 
   0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 
   0xEC, 0x13, 0x01, 0xED, 0x13, 0x00, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 
   0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 
   0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF3, 0x0C, 0x01, 
   0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF6, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 0xF7, 
   0x09, 0x01, 0xF7, 0x09, 0x01, 0xF8, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 
   0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x00, 
   0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 
   0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 
   0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 
   0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x87, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 
   0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 
   0x8C, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 
   0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6F, 
   0x01, 0x92, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 
   0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 
   0x69, 0x01, 0x97, 0x69, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 
   0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x63, 0x01, 
   0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 
   0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 
   0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 
   0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 
   0x59, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 
   0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x00, 
   0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 
   0x50, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xAF, 0x4F, 0x00, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 
   0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB7, 
   0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x47, 
   0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0x46, 0x00, 0xBA, 0x44, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBE, 
   0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 
   0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 
   0xC4, 0x3B, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC6, 
   0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 
   0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 
   0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCE, 
   0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 
   0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x00, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 
   0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 
   0x00, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 
   0xDB, 0x24, 0x00, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x00, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 
   0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 
   0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 
   0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 
   0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 
   0x01, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 
   0xEC, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x00, 0xED, 0x12, 0x01, 0xEE, 
   0x12, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 
   0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 
   0xF4, 0x0C, 0x00, 0xF4, 0x0C, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x0A, 0x01, 0xF6, 
   0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF7, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 
   0x7B, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 
   0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 
   0x01, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 
   0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 
   0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 
   0x8B, 0x73, 0x00, 0x8C, 0x74, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 
   0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 
   0x01, 0x90, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 
   0x93, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 
   0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 
   0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x01, 
   0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 
   0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 
   0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 
   0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 
   0x5A, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 
   0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x00, 
   0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 
   0x51, 0x00, 0xAE, 0x51, 0x00, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 
   0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 
   0xB4, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB5, 
   0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB9, 0x47, 
   0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x45, 0x00, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 
   0xBB, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x43, 0x00, 0xBE, 0x42, 0x01, 0xBD, 
   0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3F, 0x00, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 
   0xC4, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 
   0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 
   0x01, 0xC8, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x35, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x00, 
   0xCC, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 
   0x32, 0x01, 0xCE, 0x31, 0x00, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD1, 0x2F, 
   0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 
   0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 
   0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x28, 
   0x01, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x00, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 
   0xDB, 0x25, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 
   0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 
   0x01, 0xE0, 0x1F, 0x00, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 
   0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 
   0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x18, 
   0x01, 0xE8, 0x16, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEB, 0x16, 0x01, 0xEA, 0x15, 0x01, 
   0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x13, 0x01, 0xEE, 
   0x12, 0x01, 0xEE, 0x12, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 
   0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF2, 0x0D, 0x01, 
   0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x00, 0xF5, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 
   0x0A, 0x01, 0xF6, 0x09, 0x01, 0xF6, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 
   0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 
   0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 
   0x01, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x01, 
   0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 
   0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 
   0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 
   0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 
   0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 
   0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 
   0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x96, 
   0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 0x01, 0x98, 0x67, 
   0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x64, 0x00, 
   0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x00, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 
   0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 
   0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 
   0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 
   0x59, 0x01, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 
   0x01, 0xA9, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 
   0xAB, 0x55, 0x01, 0xAB, 0x53, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 
   0x51, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 
   0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4D, 0x00, 0xB2, 0x4D, 0x00, 
   0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB4, 0x4A, 0x01, 0xB5, 
   0x4A, 0x00, 0xB5, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 
   0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 
   0xBB, 0x45, 0x00, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x00, 0xBD, 
   0x42, 0x00, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 
   0x00, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 
   0xC2, 0x3D, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 
   0x3A, 0x00, 0xC5, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC7, 0x38, 
   0x00, 0xC9, 0x37, 0x00, 0xC8, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 
   0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCD, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 
   0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x30, 
   0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 
   0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD5, 
   0x2B, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x00, 0xD8, 0x28, 
   0x01, 0xD9, 0x28, 0x00, 0xD8, 0x26, 0x01, 0xDA, 0x26, 0x00, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 
   0xDA, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 
   0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 
   0x01, 0xE1, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x00, 0xE2, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 
   0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 
   0x1B, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 
   0x01, 0xE8, 0x17, 0x01, 0xE8, 0x16, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 0x01, 
   0xEB, 0x15, 0x00, 0xEB, 0x15, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 
   0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xEF, 0x10, 
   0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 
   0xF2, 0x0C, 0x01, 0xF3, 0x0D, 0x01, 0xF4, 0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 
   0x0A, 0x01, 0xF5, 0x0A, 0x01, 0xF6, 0x89, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 
   0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 
   0x7A, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 
   0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 
   0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 
   0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 
   0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 
   0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 
   0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 
   0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 
   0x00, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 
   0x92, 0x6C, 0x01, 0x92, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 
   0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 
   0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 
   0x9B, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 
   0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 
   0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 
   0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 
   0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 
   0x00, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x00, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 
   0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 
   0x53, 0x01, 0xAE, 0x52, 0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 
   0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x00, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 
   0x4B, 0x01, 0xB6, 0x49, 0x01, 0xB5, 0x4A, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 
   0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x47, 0x00, 0xB9, 0x45, 0x01, 0xBA, 0x46, 0x01, 
   0xBA, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x00, 0xBD, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBE, 0x40, 0x01, 0xBF, 0x40, 
   0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 
   0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 
   0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 
   0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 
   0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCD, 0x33, 0x01, 0xCD, 
   0x32, 0x00, 0xCD, 0x32, 0x01, 0xCD, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 
   0x01, 0xD0, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x00, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 
   0xD3, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD4, 0x2C, 0x00, 0xD4, 
   0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 
   0x01, 0xD8, 0x27, 0x00, 0xD9, 0x28, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 
   0xDA, 0x25, 0x01, 0xDA, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 
   0x22, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 
   0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 
   0xE2, 0x1E, 0x01, 0xE2, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 
   0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 
   0x01, 0xE7, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x16, 0x01, 0xE9, 0x17, 0x01, 0xEA, 0x16, 0x01, 
   0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xED, 0x13, 0x00, 0xEC, 
   0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x10, 
   0x00, 0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 0x0D, 0x01, 
   0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x0C, 0x01, 0xF5, 
   0x0A, 0x01, 0xF5, 0x0B, 0x01, 0xF6, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 
   0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 
   0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 
   0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 
   0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 
   0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 
   0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 
   0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 
   0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 
   0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 
   0x6A, 0x00, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x01, 0x97, 0x69, 
   0x00, 0x98, 0x67, 0x01, 0x98, 0x68, 0x01, 0x99, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 
   0x9A, 0x65, 0x00, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 
   0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x60, 0x00, 0x9F, 0x60, 
   0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA5, 
   0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 
   0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 
   0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 
   0x52, 0x01, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x50, 
   0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4F, 0x00, 0xB2, 0x4E, 0x01, 
   0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 
   0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x48, 
   0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 
   0xBA, 0x45, 0x00, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x43, 0x01, 0xBD, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x40, 
   0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x00, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3B, 0x01, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x38, 
   0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x00, 
   0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 
   0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2E, 0x00, 0xD2, 0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2C, 0x00, 0xD4, 
   0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 
   0x01, 0xD8, 0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x26, 0x01, 0xDA, 0x26, 0x01, 
   0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDA, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 
   0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x00, 0xDE, 0x21, 
   0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xE1, 0x20, 0x01, 0xE0, 0x1E, 0x01, 0xE1, 0x1E, 0x00, 
   0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x00, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1B, 0x01, 0xE4, 
   0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x19, 0x01, 0xE6, 0x19, 
   0x00, 0xE8, 0x18, 0x01, 0xE8, 0x18, 0x00, 0xE8, 0x18, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x17, 0x01, 
   0xEA, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEC, 0x14, 0x01, 0xEC, 
   0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x11, 
   0x01, 0xEF, 0x10, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF2, 0x0F, 0x01, 
   0xF2, 0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 
   0x0B, 0x01, 0xF5, 0x0B, 0x01, 0xF5, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 
   0x00, 0x78, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 
   0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 
   0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 
   0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 
   0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 
   0x8A, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 
   0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 
   0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 
   0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x95, 0x69, 0x01, 0x97, 0x69, 
   0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 
   0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x01, 0x9D, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 
   0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 
   0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 
   0x5C, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 
   0xAA, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 
   0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x51, 0x00, 0xAE, 0x52, 0x00, 0xAF, 0x51, 
   0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 
   0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x48, 
   0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 
   0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 
   0x43, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x00, 0xBE, 0x41, 
   0x01, 0xBF, 0x41, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 
   0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC7, 0x39, 
   0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC8, 0x36, 0x01, 
   0xC9, 0x36, 0x01, 0xC9, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 
   0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x00, 0xD1, 0x2F, 0x01, 
   0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x00, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 
   0x2C, 0x01, 0xD4, 0x2B, 0x00, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD5, 0x29, 0x01, 0xD6, 0x29, 
   0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x27, 0x00, 
   0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x24, 0x00, 0xDB, 
   0x24, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 
   0x00, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 
   0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x00, 0xE2, 0x1E, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x00, 0xE4, 
   0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 
   0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 
   0xEA, 0x17, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEA, 0x14, 0x01, 0xEB, 0x15, 0x01, 0xEC, 
   0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 
   0x00, 0xEF, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF1, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 
   0xF1, 0x0E, 0x00, 0xF2, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 
   0x0C, 0x01, 0xF4, 0x0B, 0x01, 0xF4, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 
   0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 
   0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 
   0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 
   0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 
   0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 
   0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 
   0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 
   0x89, 0x77, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 
   0x74, 0x00, 0x8C, 0x74, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x72, 
   0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6E, 0x00, 
   0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 
   0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x00, 
   0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 
   0x64, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9D, 0x61, 
   0x01, 0x9E, 0x60, 0x00, 0x9E, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 
   0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 
   0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 
   0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 
   0xA8, 0x57, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAC, 
   0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x51, 
   0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 
   0xB0, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 
   0x4C, 0x01, 0xB3, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 
   0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 
   0xB9, 0x47, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBC, 
   0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 
   0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 
   0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC3, 
   0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 
   0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC8, 0x38, 0x00, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x01, 
   0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCB, 
   0x34, 0x00, 0xCB, 0x34, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCE, 0x33, 0x01, 0xCE, 0x31, 
   0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 
   0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD4, 
   0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD6, 0x2A, 0x01, 0xD5, 0x29, 
   0x01, 0xD6, 0x29, 0x00, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 
   0xD9, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x00, 0xDB, 
   0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 
   0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE1, 0x1F, 0x00, 
   0xE1, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 
   0x1C, 0x01, 0xE4, 0x1C, 0x00, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x00, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 
   0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 
   0xE8, 0x16, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 
   0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 
   0x01, 0xEE, 0x12, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 
   0xF0, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 0x0E, 0x01, 0xF2, 0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 
   0x0C, 0x01, 0xF3, 0x0C, 0x01, 0xF4, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 
   0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 
   0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 
   0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x81, 0x00, 0x7D, 0x81, 
   0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 
   0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 
   0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 
   0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 
   0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 
   0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 
   0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 
   0x91, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 
   0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 
   0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 
   0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 
   0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 
   0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 
   0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 
   0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 
   0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x00, 0xAB, 
   0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAE, 0x51, 
   0x00, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 
   0x4D, 0x00, 0xB4, 0x4C, 0x01, 0xB3, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 
   0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 
   0xB8, 0x47, 0x00, 0xB9, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x44, 0x01, 0xBB, 
   0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 0x42, 
   0x00, 0xBD, 0x41, 0x00, 0xBF, 0x41, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x01, 
   0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC2, 
   0x3C, 0x01, 0xC3, 0x3C, 0x00, 0xC3, 0x3B, 0x00, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 
   0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 
   0xC8, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 
   0x34, 0x01, 0xCB, 0x34, 0x00, 0xCB, 0x33, 0x01, 0xCD, 0x34, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 
   0x01, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xD0, 0x30, 0x01, 0xCF, 0x2F, 0x01, 
   0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x00, 0xD2, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 
   0x2C, 0x00, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD6, 0x2B, 
   0x01, 0xD6, 0x29, 0x00, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 
   0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x00, 0xDA, 0x26, 0x00, 0xDA, 0x25, 0x01, 0xDB, 
   0x24, 0x01, 0xDC, 0x24, 0x00, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDE, 0x22, 
   0x01, 0xDE, 0x21, 0x00, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x00, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x00, 
   0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 
   0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1A, 
   0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 0x00, 0xE6, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 
   0xE8, 0x17, 0x00, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x01, 0xEB, 
   0x15, 0x01, 0xEB, 0x14, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x13, 0x01, 0xED, 0x12, 
   0x01, 0xED, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 
   0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x0F, 0x00, 0xF2, 0x0E, 0x01, 0xF2, 0x0E, 0x01, 0xF3, 
   0x0D, 0x01, 0xF3, 0x0C, 0x01, 0xF3, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 
   0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 
   0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 
   0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 
   0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 
   0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 
   0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 
   0x01, 0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 
   0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 0x77, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x76, 0x01, 0x8A, 
   0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 
   0x01, 0x8D, 0x71, 0x01, 0x8E, 0x72, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 
   0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 
   0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6C, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 
   0x01, 0x95, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 
   0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x63, 
   0x00, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 
   0x9F, 0x5F, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 
   0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x00, 0xA5, 0x5A, 
   0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 
   0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 
   0x55, 0x00, 0xAB, 0x55, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 
   0x00, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xB0, 0x50, 0x00, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 
   0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 
   0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 
   0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 
   0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x42, 
   0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 
   0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 
   0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 
   0x00, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC8, 0x38, 0x01, 
   0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 
   0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x32, 
   0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCF, 0x32, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 
   0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 0xD2, 0x2D, 0x01, 0xD3, 
   0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 
   0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x00, 
   0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x00, 0xDA, 
   0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x24, 0x00, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDC, 0x23, 
   0x01, 0xDE, 0x23, 0x00, 0xDD, 0x21, 0x01, 0xDF, 0x22, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 
   0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1D, 0x01, 0xE2, 
   0x1E, 0x00, 0xE2, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 
   0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x00, 0xE6, 0x19, 0x01, 0xE6, 0x19, 0x01, 0xE8, 0x19, 0x01, 
   0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x00, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEA, 
   0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x00, 0xEC, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x12, 
   0x01, 0xED, 0x12, 0x00, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xEF, 0x10, 0x01, 
   0xF0, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF2, 0x0E, 0x01, 0xF2, 
   0x0D, 0x01, 0xF3, 0x0D, 0x01, 0xF3, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 
   0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x87, 0x01, 
   0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x7A, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 
   0x84, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 
   0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 
   0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 
   0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 
   0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8A, 
   0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x01, 
   0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x92, 0x6C, 0x00, 0x93, 0x6D, 0x00, 0x94, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 
   0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 
   0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 
   0x66, 0x01, 0x9B, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 
   0x01, 0x9C, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 
   0xA0, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 
   0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA5, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 
   0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xA9, 
   0x56, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 
   0x00, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAF, 0x51, 0x01, 0xAE, 0x50, 0x00, 
   0xAF, 0x4F, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4D, 0x01, 0xB2, 0x4C, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 
   0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 
   0xB7, 0x48, 0x00, 0xB7, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x46, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x43, 
   0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 
   0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC1, 
   0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 
   0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 
   0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 
   0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 
   0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 
   0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x00, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD5, 0x2B, 
   0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x00, 0xD7, 0x29, 0x00, 
   0xD7, 0x29, 0x01, 0xD7, 0x28, 0x00, 0xD8, 0x27, 0x00, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xDA, 
   0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x23, 0x00, 0xDC, 0x24, 
   0x00, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x00, 
   0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 
   0x1E, 0x00, 0xE2, 0x1E, 0x01, 0xE3, 0x1C, 0x00, 0xE3, 0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 
   0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x19, 0x01, 
   0xE7, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 
   0x15, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xED, 0x13, 
   0x01, 0xED, 0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 
   0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x01, 0xF1, 0x0E, 0x01, 0xF1, 
   0x0E, 0x00, 0xF2, 0x0E, 0x01, 0xF2, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 
   0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 
   0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 
   0x00, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 
   0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 
   0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 
   0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 
   0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 
   0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x74, 
   0x00, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 
   0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 
   0x6E, 0x00, 0x92, 0x6E, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6C, 
   0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 
   0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 
   0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 
   0x00, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 
   0x9F, 0x61, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5F, 0x00, 0xA2, 
   0x5D, 0x00, 0xA2, 0x5E, 0x00, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 
   0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 
   0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 
   0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x54, 0x01, 0xAA, 0x55, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 
   0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAF, 0x51, 0x00, 
   0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 
   0x4E, 0x00, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 
   0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4B, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 
   0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xB9, 
   0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBB, 0x44, 0x00, 0xBB, 0x43, 
   0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 
   0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 
   0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 0xC3, 0x3C, 
   0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 
   0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x35, 0x01, 0xCB, 0x34, 
   0x01, 0xCC, 0x33, 0x00, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 
   0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD2, 
   0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 
   0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x2A, 0x01, 
   0xD7, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 
   0x26, 0x00, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x00, 0xDC, 0x23, 
   0x01, 0xDC, 0x23, 0x01, 0xDC, 0x22, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 
   0xDE, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x20, 0x00, 0xE0, 0x1E, 0x01, 0xE1, 
   0x1E, 0x00, 0xE1, 0x1E, 0x01, 0xE3, 0x1E, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 
   0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE6, 0x1A, 0x01, 
   0xE7, 0x19, 0x01, 0xE8, 0x19, 0x01, 0xE7, 0x17, 0x01, 0xE8, 0x17, 0x00, 0xE8, 0x17, 0x01, 0xE9, 
   0x16, 0x01, 0xE9, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 
   0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x12, 0x01, 
   0xEE, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x0F, 0x01, 0xF0, 0x0F, 0x00, 0xF1, 0x0F, 0x01, 0xF1, 
   0x0F, 0x01, 0xF1, 0x0D, 0x01, 0xF2, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 
   0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 
   0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 
   0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 
   0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 
   0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 
   0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 
   0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 
   0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 
   0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 
   0x8E, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 
   0x6E, 0x00, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 
   0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x95, 0x69, 0x01, 
   0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0x67, 0x00, 0x99, 
   0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 
   0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 
   0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0x9F, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 
   0x5F, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 
   0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 
   0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 
   0x56, 0x00, 0xA9, 0x55, 0x01, 0xA9, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 
   0x00, 0xAC, 0x54, 0x00, 0xAD, 0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 
   0xAF, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 
   0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 
   0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x49, 0x01, 0xB6, 0x49, 0x01, 
   0xB6, 0x49, 0x00, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 
   0x47, 0x00, 0xBA, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 
   0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x00, 
   0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 
   0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 
   0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 
   0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x37, 0x00, 0xC8, 0x37, 0x01, 0xC9, 
   0x36, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 
   0x01, 0xCC, 0x34, 0x00, 0xCD, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 
   0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 
   0x2E, 0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x00, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 
   0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 
   0xD6, 0x29, 0x01, 0xD6, 0x29, 0x00, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 
   0x27, 0x01, 0xDA, 0x27, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 
   0x01, 0xDC, 0x23, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x00, 
   0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x00, 0xE0, 0x1F, 0x01, 0xE1, 
   0x1F, 0x00, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x00, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x00, 0xE3, 0x1C, 
   0x00, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 0x00, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 0x00, 
   0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 
   0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 
   0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x12, 0x01, 0xED, 0x13, 0x01, 0xEE, 0x12, 0x01, 
   0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x10, 0x01, 0xF0, 
   0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF2, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 
   0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 
   0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 
   0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 
   0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 
   0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 
   0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 
   0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 
   0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 
   0x00, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 
   0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 
   0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 
   0x01, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 
   0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 
   0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x64, 0x00, 0x9B, 0x64, 
   0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 
   0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x00, 0xA0, 
   0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 
   0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA4, 0x5A, 0x00, 0xA5, 0x59, 0x01, 
   0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 
   0x56, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x54, 
   0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x52, 0x01, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 
   0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 
   0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 
   0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 
   0xB6, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 
   0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 
   0x00, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x42, 0x01, 0xBF, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xC0, 0x40, 0x00, 0xC0, 0x40, 0x00, 0xC0, 
   0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 
   0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 
   0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCB, 0x35, 
   0x01, 0xCB, 0x34, 0x01, 0xCB, 0x33, 0x01, 0xCC, 0x34, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 
   0xCD, 0x32, 0x00, 0xCE, 0x32, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 
   0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x00, 0xD3, 0x2D, 
   0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2A, 0x01, 0xD5, 0x2A, 0x00, 
   0xD6, 0x2A, 0x01, 0xD7, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x00, 0xD8, 0x28, 0x01, 0xD8, 
   0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x00, 0xDB, 0x25, 
   0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x00, 0xDD, 0x23, 0x01, 0xDD, 0x23, 0x00, 
   0xDD, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 
   0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE2, 0x1E, 0x01, 0xE3, 0x1D, 0x00, 0xE3, 0x1D, 
   0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x00, 0xE4, 0x1C, 0x01, 0xE4, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 
   0xE6, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 
   0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 
   0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x12, 0x01, 0xED, 0x12, 0x00, 
   0xED, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x00, 0xEF, 0x10, 0x01, 0xF0, 0x10, 0x00, 0xF0, 
   0x0F, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x73, 0x8C, 0x01, 0x72, 0x8C, 
   0x00, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 
   0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 0x77, 0x87, 0x01, 0x79, 
   0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 
   0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 
   0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 
   0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 
   0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x74, 
   0x01, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 
   0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 
   0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6C, 
   0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 
   0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 
   0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x00, 0x9A, 0x66, 0x01, 0x9B, 0x65, 
   0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 
   0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 
   0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 
   0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA4, 0x5A, 0x00, 
   0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 
   0x58, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 
   0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 
   0xAE, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 
   0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x00, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 
   0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4A, 0x01, 
   0xB5, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 
   0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBB, 0x45, 
   0x01, 0xBA, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 
   0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 
   0x3F, 0x00, 0xC1, 0x3F, 0x00, 0xC0, 0x3F, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 
   0x01, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 
   0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x38, 0x01, 0xC7, 0x39, 0x01, 0xC8, 
   0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 
   0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 
   0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xD0, 
   0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 
   0x01, 0xD2, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 
   0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD7, 
   0x28, 0x00, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x25, 0x01, 0xDA, 0x25, 
   0x01, 0xDA, 0x25, 0x01, 0xDC, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 
   0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x00, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xE0, 
   0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE2, 0x1F, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 
   0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 
   0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE8, 
   0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x17, 0x00, 0xE9, 0x16, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 
   0x01, 0xEB, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x12, 0x01, 
   0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 
   0x10, 0x01, 0xF1, 0x0F, 0x01, 0xF1, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8D, 
   0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 
   0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 
   0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 
   0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 
   0x7D, 0x81, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 
   0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 
   0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 
   0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 
   0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 
   0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 
   0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 
   0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x66, 
   0x00, 0x9A, 0x65, 0x00, 0x9A, 0x64, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 
   0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 
   0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 
   0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 
   0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 
   0x57, 0x00, 0xA8, 0x58, 0x00, 0xA8, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xA9, 0x55, 
   0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 
   0xAD, 0x53, 0x00, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 
   0x50, 0x00, 0xAF, 0x4F, 0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 
   0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB4, 0x4B, 0x01, 0xB3, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 
   0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 
   0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x45, 
   0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBD, 0x43, 0x00, 
   0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 
   0x40, 0x01, 0xC0, 0x40, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 
   0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 
   0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC7, 
   0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xC9, 0x35, 
   0x01, 0xCB, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x33, 0x01, 0xCD, 0x33, 0x01, 
   0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCE, 0x31, 0x01, 0xCF, 
   0x30, 0x01, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 
   0x01, 0xD2, 0x2D, 0x00, 0xD2, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x00, 
   0xD5, 0x2B, 0x00, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x00, 0xD7, 0x29, 0x01, 0xD7, 
   0x29, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x00, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 
   0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x00, 0xDB, 0x24, 0x00, 0xDD, 0x23, 0x00, 
   0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 
   0x20, 0x01, 0xDF, 0x1F, 0x01, 0xE0, 0x20, 0x01, 0xE1, 0x1F, 0x01, 0xE2, 0x1F, 0x01, 0xE2, 0x1E, 
   0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x00, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1C, 0x01, 
   0xE5, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x1A, 0x01, 0xE6, 0x18, 0x01, 0xE8, 
   0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x00, 0xE9, 0x17, 0x01, 0xEA, 0x16, 0x01, 0xE9, 0x16, 
   0x01, 0xEB, 0x15, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x13, 0x01, 
   0xED, 0x13, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEE, 0x11, 0x01, 0xEF, 
   0x10, 0x01, 0xF0, 0x10, 0x01, 0xF0, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 
   0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x01, 
   0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 
   0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 
   0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 
   0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 
   0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 
   0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 
   0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 
   0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 
   0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 
   0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 
   0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x70, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 
   0x95, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 
   0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 
   0x00, 0x9A, 0x66, 0x01, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 
   0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 
   0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 
   0x01, 0xA2, 0x5E, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 
   0xA4, 0x5A, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA6, 
   0x59, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 
   0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x54, 0x01, 
   0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x00, 0xAF, 
   0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB2, 0x4E, 
   0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x00, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 
   0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x47, 0x00, 0xB9, 0x46, 
   0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 
   0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 
   0x40, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3F, 0x00, 0xC2, 0x3E, 
   0x01, 0xC2, 0x3E, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 
   0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 
   0x39, 0x00, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x36, 
   0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x33, 0x01, 
   0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x33, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 
   0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x00, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2F, 
   0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 
   0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 
   0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xDA, 0x26, 
   0x01, 0xD9, 0x25, 0x00, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDC, 0x24, 0x01, 
   0xDC, 0x24, 0x00, 0xDD, 0x22, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 
   0x21, 0x00, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE1, 0x20, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 
   0x00, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x00, 
   0xE4, 0x1B, 0x00, 0xE4, 0x1A, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x19, 0x01, 0xE6, 0x19, 0x01, 0xE7, 
   0x19, 0x01, 0xE7, 0x19, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x17, 
   0x00, 0xEA, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 
   0xEC, 0x14, 0x01, 0xED, 0x13, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 
   0x11, 0x01, 0xEF, 0x10, 0x01, 0xF0, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 
   0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8C, 0x01, 
   0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 
   0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 
   0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 
   0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 
   0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 
   0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 
   0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 
   0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 
   0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 
   0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 
   0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 
   0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 
   0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 
   0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 
   0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 
   0x61, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 
   0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 
   0xA4, 0x5C, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5B, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 
   0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 
   0x01, 0xAA, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x00, 
   0xAC, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 
   0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 
   0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 
   0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 
   0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 
   0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 
   0xBC, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 
   0x41, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 
   0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC2, 0x3D, 0x00, 0xC2, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 
   0xC3, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 
   0x3A, 0x01, 0xC7, 0x39, 0x01, 0xC8, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x36, 
   0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x35, 0x01, 
   0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 
   0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 
   0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x29, 0x00, 0xD6, 
   0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD8, 0x29, 0x01, 0xD8, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD9, 0x27, 
   0x01, 0xDA, 0x26, 0x01, 0xD9, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x25, 0x01, 
   0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x23, 0x00, 0xDD, 0x22, 0x00, 0xDE, 0x22, 0x01, 0xDE, 
   0x21, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1E, 
   0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1C, 0x01, 0xE3, 0x1C, 0x00, 
   0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 
   0x19, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x16, 
   0x01, 0xE9, 0x17, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 
   0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x13, 0x01, 0xEE, 0x12, 0x01, 0xEE, 
   0x11, 0x01, 0xEF, 0x11, 0x01, 0xEF, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 
   0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x00, 
   0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 
   0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 0x79, 0x87, 0x00, 0x78, 0x86, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x01, 
   0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 
   0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 
   0x00, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 
   0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 
   0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 
   0x8B, 0x73, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8E, 
   0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 
   0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x00, 
   0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 
   0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 
   0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 
   0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 
   0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x00, 0xA1, 0x5E, 
   0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 
   0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 
   0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 
   0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 
   0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 
   0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4C, 0x01, 
   0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 
   0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 
   0x01, 0xB8, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x45, 0x01, 
   0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 
   0x42, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 
   0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x01, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC5, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 
   0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 
   0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 
   0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 
   0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x31, 0x00, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 
   0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 
   0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 
   0x2A, 0x01, 0xD7, 0x2A, 0x00, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 
   0x01, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x24, 0x01, 
   0xDB, 0x25, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDE, 0x22, 0x00, 0xDE, 
   0x22, 0x00, 0xDE, 0x22, 0x01, 0xDF, 0x21, 0x00, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x00, 0xE0, 0x1F, 
   0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x00, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x00, 
   0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 0x00, 0xE6, 0x1B, 0x01, 0xE5, 
   0x19, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 
   0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 
   0xEC, 0x14, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xED, 0x13, 0x01, 0xED, 0x13, 0x00, 0xEE, 
   0x12, 0x01, 0xEE, 0x11, 0x01, 0xEF, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 
   0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x86, 0x01, 0x79, 0x85, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 
   0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7E, 
   0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 
   0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x83, 0x7D, 0x01, 0x82, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 
   0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x78, 
   0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 
   0x8A, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 
   0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 
   0x01, 0x90, 0x6E, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 
   0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 
   0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 
   0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 
   0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 
   0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x60, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 
   0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 
   0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 
   0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 
   0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xA9, 0x55, 0x01, 0xAB, 0x55, 0x01, 
   0xAB, 0x55, 0x00, 0xAC, 0x54, 0x00, 0xAB, 0x53, 0x00, 0xAD, 0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 
   0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 
   0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 
   0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 
   0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x00, 0xBB, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 
   0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 
   0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC6, 
   0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC7, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 
   0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 
   0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCD, 
   0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x30, 0x00, 0xD0, 0x2F, 
   0x00, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 
   0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 
   0x2A, 0x00, 0xD6, 0x2A, 0x00, 0xD7, 0x29, 0x00, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 
   0x01, 0xD8, 0x28, 0x01, 0xD9, 0x26, 0x00, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 
   0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x00, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 
   0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 
   0x01, 0xE0, 0x1F, 0x00, 0xE0, 0x1F, 0x00, 0xE1, 0x1E, 0x00, 0xE2, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 
   0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 
   0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x18, 
   0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 
   0xEB, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 0x13, 0x01, 0xED, 
   0x12, 0x01, 0xED, 0x12, 0x01, 0xEE, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 
   0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 
   0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 
   0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x88, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 
   0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 
   0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 
   0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 
   0x00, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 
   0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 
   0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 
   0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 
   0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 
   0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 
   0x00, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 
   0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 
   0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 
   0x00, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 
   0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x01, 0x9D, 
   0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 
   0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 
   0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x58, 
   0x01, 0xA8, 0x58, 0x01, 0xA8, 0x56, 0x00, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 
   0xAB, 0x54, 0x01, 0xAB, 0x55, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x00, 0xAC, 
   0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xB0, 0x50, 
   0x00, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x01, 0xB4, 0x4C, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 
   0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 
   0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xB9, 0x45, 0x01, 
   0xBA, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 
   0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 
   0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 
   0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x00, 
   0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 
   0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x30, 0x00, 0xCF, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 
   0xD2, 0x2D, 0x01, 0xD2, 0x2C, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD5, 
   0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD5, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD8, 0x28, 
   0x01, 0xD8, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 
   0xDB, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x00, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 
   0x22, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 
   0x01, 0xDF, 0x1F, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x00, 0xE2, 0x1E, 0x01, 
   0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x00, 0xE3, 0x1C, 0x00, 0xE5, 0x1B, 0x01, 0xE4, 
   0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 
   0x01, 0xE8, 0x18, 0x00, 0xE8, 0x18, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 0x15, 0x01, 
   0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x00, 0xEB, 0x14, 0x01, 0xEC, 0x13, 0x01, 0xEC, 
   0x13, 0x01, 0xED, 0x13, 0x01, 0xED, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 
   0x01, 0x70, 0x90, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 
   0x72, 0x8C, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 
   0x8A, 0x00, 0x75, 0x89, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 0x77, 0x88, 
   0x01, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x01, 
   0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 
   0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 
   0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7E, 0x00, 
   0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 
   0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x77, 0x01, 0x88, 0x78, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 
   0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 
   0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 
   0x01, 0x8F, 0x6F, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x92, 0x6E, 0x00, 
   0x92, 0x6E, 0x01, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 
   0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 
   0x01, 0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 
   0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 
   0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 
   0x01, 0xA0, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA5, 
   0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 
   0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x00, 
   0xAA, 0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xAF, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x01, 0xB4, 
   0x4B, 0x00, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 
   0x01, 0xB8, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x46, 0x01, 0xB8, 0x46, 0x01, 0xB9, 0x46, 0x01, 
   0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 
   0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 
   0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 
   0x01, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 
   0xCA, 0x36, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 
   0x33, 0x01, 0xCD, 0x33, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 
   0x2B, 0x00, 0xD5, 0x2B, 0x01, 0xD6, 0x2B, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD6, 0x29, 
   0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 
   0xD9, 0x26, 0x00, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 
   0x24, 0x00, 0xDC, 0x23, 0x00, 0xDE, 0x22, 0x00, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x20, 
   0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 
   0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1B, 0x01, 0xE4, 
   0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x19, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x18, 
   0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x16, 0x01, 0xE9, 0x16, 0x01, 
   0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 
   0x13, 0x01, 0xEC, 0x12, 0x01, 0xED, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x90, 0x00, 0x6E, 0x90, 
   0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 
   0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x89, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 
   0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x87, 0x01, 0x79, 0x85, 0x00, 
   0x7A, 0x86, 0x00, 0x7A, 0x84, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 
   0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 
   0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 
   0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 
   0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 
   0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 
   0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 
   0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 
   0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 
   0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 
   0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 
   0x63, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x60, 
   0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 
   0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x00, 
   0xAA, 0x56, 0x00, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 
   0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x00, 0xAF, 0x51, 
   0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 
   0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 
   0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 
   0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 
   0xB9, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBB, 
   0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 
   0x00, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 
   0x00, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC8, 0x37, 0x01, 
   0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 
   0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 
   0x00, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 
   0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2C, 0x00, 0xD3, 0x2C, 0x01, 0xD3, 
   0x2C, 0x01, 0xD4, 0x2C, 0x00, 0xD4, 0x2A, 0x01, 0xD5, 0x2A, 0x00, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 
   0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 
   0xD9, 0x26, 0x01, 0xDA, 0x26, 0x00, 0xDA, 0x25, 0x00, 0xDB, 0x25, 0x00, 0xDC, 0x25, 0x01, 0xDC, 
   0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 
   0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE1, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 
   0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x00, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 
   0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x19, 0x01, 0xE6, 0x1A, 
   0x01, 0xE7, 0x19, 0x00, 0xE7, 0x18, 0x00, 0xE7, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x17, 0x01, 
   0xE9, 0x16, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x15, 0x01, 0xEB, 0x15, 0x01, 0xEB, 0x14, 0x01, 0xEB, 
   0x14, 0x01, 0xEC, 0x14, 0x01, 0xEC, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 
   0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 
   0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x74, 
   0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 
   0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 
   0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 
   0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 
   0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 
   0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 
   0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x7A, 
   0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 
   0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 
   0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 
   0x00, 0x8F, 0x70, 0x00, 0x8F, 0x71, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 
   0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 
   0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 
   0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 
   0x99, 0x67, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 
   0x63, 0x00, 0x9C, 0x64, 0x00, 0x9D, 0x62, 0x00, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 
   0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5E, 0x01, 
   0xA0, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 
   0x00, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 
   0xA9, 0x57, 0x01, 0xA9, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 
   0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 
   0x00, 0xAE, 0x50, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4C, 0x01, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 
   0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x00, 
   0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 
   0x44, 0x01, 0xBB, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 
   0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x00, 0xC0, 0x3F, 0x01, 
   0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC4, 
   0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 
   0x00, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x00, 0xC8, 0x37, 0x01, 
   0xC9, 0x37, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 
   0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCE, 0x32, 0x01, 0xCE, 0x32, 
   0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xD0, 0x30, 0x00, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 
   0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x00, 0xD3, 0x2C, 0x00, 0xD3, 
   0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 
   0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x00, 0xD7, 0x29, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x28, 0x01, 
   0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDB, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 
   0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x22, 
   0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 
   0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 
   0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x19, 
   0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x19, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 
   0xE8, 0x17, 0x01, 0xE9, 0x16, 0x00, 0xE9, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x15, 0x01, 0xEB, 
   0x14, 0x01, 0xEC, 0x14, 0x01, 0xED, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 
   0x01, 0x6F, 0x91, 0x00, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 
   0x70, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 
   0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x89, 
   0x00, 0x77, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 
   0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 
   0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x82, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 
   0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 
   0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 
   0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 
   0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 
   0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 
   0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 
   0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 
   0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 
   0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 
   0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x96, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 
   0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x64, 0x01, 0x9B, 
   0x65, 0x01, 0x9C, 0x63, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9E, 0x62, 
   0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 
   0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA2, 
   0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 
   0x00, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x00, 
   0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAB, 
   0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAD, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 
   0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x50, 0x01, 
   0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 
   0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB4, 0x4A, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 
   0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x45, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBB, 
   0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 0x42, 
   0x00, 0xBE, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 
   0xC1, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 
   0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 
   0x01, 0xC6, 0x39, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 
   0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x00, 0xCB, 
   0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x00, 0xCD, 0x32, 
   0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x30, 0x01, 0xCF, 0x31, 0x00, 0xD0, 0x30, 0x01, 
   0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 
   0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD5, 0x2C, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2B, 
   0x01, 0xD6, 0x29, 0x00, 0xD6, 0x29, 0x01, 0xD6, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD7, 0x27, 0x01, 
   0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x27, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x00, 0xDA, 
   0x25, 0x01, 0xDB, 0x25, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x00, 0xDC, 0x22, 0x01, 0xDD, 0x22, 
   0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xDF, 0x20, 0x01, 
   0xE0, 0x20, 0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1F, 0x00, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 
   0x1D, 0x01, 0xE3, 0x1D, 0x00, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1A, 0x00, 0xE5, 0x1A, 
   0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE7, 0x19, 0x00, 0xE7, 0x19, 0x01, 0xE8, 0x18, 0x01, 
   0xE8, 0x18, 0x00, 0xE9, 0x17, 0x01, 0xE9, 0x16, 0x01, 0xE9, 0x15, 0x01, 0xEA, 0x15, 0x00, 0xEA, 
   0x15, 0x01, 0xEC, 0x14, 0x01, 0xEB, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 
   0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 
   0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 
   0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 
   0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 
   0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 
   0x80, 0x7E, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 
   0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 
   0x74, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 
   0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 
   0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 
   0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 
   0x00, 0x95, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x98, 0x67, 0x01, 
   0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 
   0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 
   0x01, 0x9D, 0x61, 0x00, 0x9D, 0x61, 0x00, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 
   0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 
   0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 
   0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 
   0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x55, 0x00, 0xAB, 
   0x55, 0x01, 0xAB, 0x55, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 
   0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x4F, 0x00, 
   0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 
   0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 
   0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x00, 
   0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 
   0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x42, 
   0x01, 0xBD, 0x42, 0x01, 0xBD, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 
   0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 
   0x3D, 0x01, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 
   0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 
   0xC7, 0x37, 0x00, 0xC8, 0x37, 0x00, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 
   0x35, 0x01, 0xCA, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 
   0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCE, 0x31, 0x00, 0xCE, 0x30, 0x01, 0xCF, 0x30, 0x01, 
   0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 0xD2, 0x2D, 0x01, 0xD2, 
   0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x00, 0xD3, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 
   0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x2A, 0x00, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 
   0xD8, 0x27, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 
   0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 
   0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 
   0xE0, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x00, 0xE3, 
   0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 
   0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE8, 0x18, 0x01, 
   0xE8, 0x18, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xEA, 0x16, 0x01, 0xEA, 0x16, 0x01, 0xEB, 
   0x16, 0x01, 0xEB, 0x15, 0x01, 0xEC, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 
   0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 
   0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 
   0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 
   0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 
   0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 
   0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 
   0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 
   0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 
   0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 
   0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 
   0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 
   0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 
   0x98, 0x68, 0x00, 0x98, 0x68, 0x01, 0x99, 0x67, 0x01, 0x98, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 
   0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x00, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x01, 
   0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 
   0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 
   0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 
   0xA8, 0x57, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 
   0x55, 0x01, 0xAB, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 
   0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 
   0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x00, 0xB5, 0x4B, 
   0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x00, 0xB7, 0x49, 0x01, 
   0xB7, 0x47, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 
   0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 
   0x00, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x40, 0x00, 
   0xBF, 0x40, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 
   0x3E, 0x00, 0xC2, 0x3D, 0x01, 0xC2, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 
   0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC7, 0x39, 0x00, 0xC7, 0x39, 0x00, 
   0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x00, 0xC9, 
   0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 
   0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 
   0xCF, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2D, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 
   0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x00, 
   0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x00, 0xD9, 0x26, 0x01, 0xD9, 
   0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x00, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 
   0x01, 0xDD, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 
   0xDF, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x00, 0xE1, 0x1E, 0x01, 0xE2, 
   0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x00, 0xE4, 0x1B, 
   0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x19, 0x01, 
   0xE7, 0x19, 0x01, 0xE8, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xEA, 
   0x15, 0x01, 0xEA, 0x16, 0x01, 0xEB, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 
   0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 
   0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 
   0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 
   0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 
   0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x7A, 0x86, 0x01, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7D, 0x83, 
   0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 
   0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 
   0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 
   0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 
   0x87, 0x78, 0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 
   0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 
   0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 
   0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 
   0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 
   0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 
   0x97, 0x69, 0x01, 0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 
   0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 
   0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 
   0xA7, 0x59, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 
   0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x53, 
   0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 
   0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 
   0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 
   0xB7, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB8, 0x46, 0x01, 0xB9, 
   0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 
   0x00, 0xBD, 0x43, 0x00, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 
   0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 
   0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 
   0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC7, 0x39, 0x00, 
   0xC7, 0x38, 0x00, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 0x38, 0x01, 0xC9, 0x36, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x33, 
   0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 
   0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xCF, 0x30, 0x00, 0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 
   0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 
   0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x29, 0x01, 
   0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x26, 0x01, 0xD9, 
   0x26, 0x01, 0xD9, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x24, 
   0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x21, 0x01, 0xDE, 0x22, 0x01, 
   0xDE, 0x20, 0x01, 0xE0, 0x21, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 
   0x1E, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x00, 0xE3, 0x1B, 
   0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x1A, 0x00, 
   0xE7, 0x19, 0x00, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 
   0x16, 0x01, 0xE9, 0x16, 0x01, 0xEB, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 
   0x01, 0x6D, 0x92, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 
   0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 
   0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 
   0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 
   0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 
   0x01, 0x7C, 0x82, 0x00, 0x7D, 0x83, 0x00, 0x7E, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x80, 0x01, 
   0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 
   0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 
   0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 
   0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x76, 0x00, 0x89, 
   0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x01, 0x8C, 0x74, 
   0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x72, 0x01, 
   0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 
   0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 
   0x01, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 
   0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 
   0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 
   0x00, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 
   0x9E, 0x61, 0x00, 0x9F, 0x61, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 
   0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 
   0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 
   0xA6, 0x58, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 
   0x56, 0x01, 0xAA, 0x56, 0x01, 0xA9, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 
   0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 
   0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 
   0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4C, 0x01, 0xB3, 0x4D, 0x00, 0xB4, 0x4C, 
   0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 
   0xB6, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 
   0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x44, 0x00, 0xBB, 0x44, 
   0x00, 0xBB, 0x44, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x41, 0x01, 
   0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 
   0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 
   0x00, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC8, 
   0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCB, 0x34, 
   0x01, 0xCC, 0x34, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 
   0xCF, 0x31, 0x01, 0xCE, 0x31, 0x00, 0xCF, 0x30, 0x00, 0xD0, 0x30, 0x00, 0xD1, 0x2F, 0x01, 0xD1, 
   0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD3, 0x2C, 
   0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2B, 0x01, 0xD6, 0x2A, 0x00, 
   0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 
   0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 
   0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 
   0xDE, 0x22, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x1F, 0x01, 0xE0, 0x20, 0x00, 0xE1, 
   0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE1, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 
   0x01, 0xE4, 0x1C, 0x00, 0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x00, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x00, 
   0xE6, 0x19, 0x00, 0xE6, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x17, 0x01, 0xE9, 
   0x17, 0x01, 0xE9, 0x16, 0x01, 0xEA, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 
   0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 
   0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 
   0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 
   0x76, 0x88, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 
   0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 
   0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 
   0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x00, 0x82, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 
   0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 
   0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 
   0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 
   0x00, 0x8C, 0x73, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x00, 
   0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 
   0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 
   0x00, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x00, 
   0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 
   0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 
   0x01, 0x9C, 0x63, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 
   0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 
   0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 
   0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 
   0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 
   0x00, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 
   0xAE, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 0x00, 0xB0, 
   0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 
   0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 
   0xB5, 0x49, 0x01, 0xB7, 0x49, 0x00, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x47, 0x01, 0xB8, 
   0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x01, 0xBA, 0x45, 
   0x00, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC1, 
   0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3C, 
   0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 
   0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x35, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x34, 
   0x00, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x00, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 
   0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x00, 0xD0, 0x30, 0x00, 0xD0, 
   0x2F, 0x00, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x00, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 
   0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2B, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD6, 0x2A, 0x01, 
   0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x00, 0xD8, 
   0x27, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 
   0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 
   0xDE, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 
   0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE2, 0x1F, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 
   0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 
   0xE6, 0x19, 0x00, 0xE6, 0x19, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x18, 0x00, 0xE8, 0x18, 0x01, 0xE8, 
   0x17, 0x01, 0xE9, 0x17, 0x01, 0xE9, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 
   0x00, 0x6C, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 
   0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 
   0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x72, 0x8D, 
   0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 
   0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 
   0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x84, 0x00, 0x7A, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 
   0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7D, 
   0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 
   0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x75, 
   0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x00, 
   0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x6F, 0x01, 0x90, 
   0x6F, 0x01, 0x91, 0x6F, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 
   0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 0x01, 0x98, 
   0x67, 0x00, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x65, 
   0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 
   0x9E, 0x62, 0x01, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 
   0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 
   0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 
   0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x57, 0x00, 0xA8, 
   0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 
   0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 
   0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 
   0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 
   0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 
   0xB6, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 
   0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 
   0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 
   0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3C, 0x00, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 
   0xC6, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 
   0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 
   0x00, 0xCA, 0x35, 0x00, 0xCC, 0x34, 0x01, 0xCB, 0x33, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x33, 0x01, 
   0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x30, 0x01, 0xD0, 
   0x2F, 0x00, 0xD1, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD2, 0x2D, 
   0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 
   0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD8, 
   0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x00, 0xDA, 0x25, 
   0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x00, 0xDD, 0x22, 0x01, 
   0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 
   0x20, 0x00, 0xE1, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 
   0x01, 0xE3, 0x1D, 0x01, 0xE4, 0x1D, 0x01, 0xE4, 0x1C, 0x00, 0xE4, 0x1B, 0x00, 0xE5, 0x1B, 0x01, 
   0xE5, 0x1A, 0x00, 0xE5, 0x1A, 0x01, 0xE7, 0x1A, 0x01, 0xE7, 0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 
   0x18, 0x01, 0xE8, 0x18, 0x00, 0xE8, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 
   0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 
   0x6E, 0x91, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x90, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x8F, 0x00, 0x6F, 
   0x90, 0x00, 0x70, 0x8E, 0x00, 0x70, 0x8F, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 
   0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 
   0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 
   0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 
   0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 
   0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 
   0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 
   0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 
   0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 
   0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 
   0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 
   0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 
   0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 
   0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 
   0x00, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9B, 0x64, 0x01, 0x9D, 0x63, 0x00, 
   0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 
   0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 
   0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 
   0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 
   0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 
   0x00, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAD, 0x53, 0x01, 
   0xAD, 0x52, 0x01, 0xAD, 0x51, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x50, 0x01, 0xB0, 
   0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 
   0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x01, 
   0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB7, 
   0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x46, 
   0x00, 0xBA, 0x44, 0x00, 0xBA, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x00, 
   0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 
   0x40, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 
   0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x00, 0xC3, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 
   0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 
   0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x00, 0xC8, 0x37, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 
   0x01, 0xCA, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 
   0xCD, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x30, 0x01, 0xCF, 
   0x30, 0x01, 0xCF, 0x2F, 0x00, 0xD0, 0x2F, 0x01, 0xD0, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 
   0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD4, 0x2D, 0x01, 0xD3, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 
   0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x00, 0xD7, 
   0x28, 0x01, 0xD8, 0x28, 0x00, 0xD9, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x00, 0xD9, 0x25, 
   0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 
   0xDD, 0x23, 0x00, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 
   0x21, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1D, 
   0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1C, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x00, 0xE4, 0x1C, 0x01, 
   0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE6, 0x19, 0x01, 0xE7, 
   0x18, 0x01, 0xE8, 0x17, 0x01, 0xE8, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 
   0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 
   0x8F, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 
   0x00, 0x72, 0x8C, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 
   0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 
   0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 
   0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7C, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 
   0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 
   0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 
   0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 
   0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 
   0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 
   0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 
   0x8D, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x70, 0x01, 0x8F, 
   0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 
   0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6C, 0x00, 
   0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 
   0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x65, 
   0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9C, 0x64, 0x01, 0x9B, 0x63, 0x01, 
   0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 
   0x60, 0x00, 0x9F, 0x5F, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA2, 0x5E, 
   0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 
   0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 
   0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 
   0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 
   0xAD, 0x52, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 
   0x51, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 
   0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB6, 
   0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 
   0x00, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x44, 0x00, 
   0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 
   0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 
   0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 
   0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 
   0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 
   0x01, 0xCA, 0x36, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x00, 
   0xCC, 0x33, 0x00, 0xCC, 0x33, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 
   0x30, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD3, 0x2B, 0x01, 
   0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 
   0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x00, 0xD9, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x27, 
   0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x00, 0xDA, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x01, 
   0xDC, 0x23, 0x01, 0xDC, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDF, 
   0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE2, 0x1F, 
   0x01, 0xE1, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 
   0xE4, 0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x1A, 0x00, 0xE6, 0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 
   0x19, 0x01, 0xE7, 0x19, 0x01, 0xE8, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 
   0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 
   0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 
   0x91, 0x00, 0x70, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 
   0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 
   0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 
   0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 
   0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 
   0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x00, 0x81, 0x7E, 
   0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 
   0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 
   0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 
   0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 
   0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 
   0x70, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 
   0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 
   0x94, 0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 
   0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 
   0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 
   0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 
   0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 
   0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 
   0x58, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x01, 0xA8, 0x56, 
   0x00, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 
   0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAF, 
   0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 
   0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x00, 
   0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB6, 
   0x49, 0x01, 0xB7, 0x49, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 
   0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x43, 0x00, 0xBC, 0x42, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBF, 
   0x40, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x00, 0xC1, 0x3E, 
   0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 
   0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC7, 
   0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 
   0x00, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 
   0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCF, 
   0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2D, 0x00, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 
   0xD4, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD6, 0x29, 0x01, 0xD6, 
   0x2A, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x00, 0xD8, 0x27, 
   0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x00, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x25, 0x01, 
   0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 
   0x21, 0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 
   0x01, 0xE1, 0x1E, 0x01, 0xE1, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x00, 0xE4, 0x1C, 0x01, 
   0xE4, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 0x1A, 0x01, 0xE6, 
   0x19, 0x01, 0xE7, 0x18, 0x01, 0xE8, 0x97, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 
   0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 
   0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 
   0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 
   0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 
   0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x79, 0x87, 0x00, 0x78, 0x86, 
   0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 
   0x7B, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 
   0x80, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 
   0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 
   0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 
   0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 
   0x01, 0x89, 0x77, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 
   0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 
   0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6E, 
   0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x01, 
   0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 
   0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x97, 0x67, 0x01, 0x98, 0x68, 0x00, 0x99, 0x67, 
   0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 
   0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x61, 0x01, 0x9E, 
   0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x61, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 
   0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 
   0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA6, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x57, 0x00, 0xA9, 0x57, 
   0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 
   0xAC, 0x54, 0x00, 0xAB, 0x53, 0x01, 0xAD, 0x53, 0x00, 0xAC, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 
   0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 
   0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 
   0x49, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB9, 0x47, 
   0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 
   0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 
   0x41, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x00, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3B, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 
   0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 0x37, 0x01, 0xC8, 0x37, 
   0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCB, 0x35, 0x01, 
   0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCE, 
   0x32, 0x00, 0xCE, 0x32, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 
   0x00, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2D, 0x00, 0xD2, 0x2C, 0x01, 
   0xD3, 0x2C, 0x00, 0xD3, 0x2B, 0x01, 0xD4, 0x2C, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 
   0x2A, 0x01, 0xD6, 0x29, 0x00, 0xD6, 0x29, 0x00, 0xD7, 0x29, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 
   0x00, 0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x01, 
   0xDB, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x00, 0xDD, 0x23, 0x01, 0xDE, 
   0x21, 0x01, 0xDE, 0x21, 0x01, 0xDE, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 
   0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1F, 0x00, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 
   0xE4, 0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE6, 
   0x1A, 0x01, 0xE6, 0x19, 0x01, 0xE7, 0x99, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 
   0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 
   0x6C, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x91, 0x01, 0x6E, 
   0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 
   0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 
   0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 
   0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7D, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 
   0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 
   0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7C, 0x00, 0x84, 0x7C, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 
   0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 
   0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 
   0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8D, 
   0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 
   0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 
   0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x95, 0x6C, 0x00, 0x94, 0x6A, 0x00, 0x95, 0x6B, 0x00, 0x95, 
   0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 
   0x01, 0x99, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 
   0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 
   0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 
   0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 
   0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 
   0x59, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x58, 
   0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x00, 
   0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x52, 0x01, 0xAD, 0x53, 0x01, 0xAE, 
   0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x4F, 0x01, 0xB0, 0x4F, 
   0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4D, 0x00, 
   0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 
   0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x47, 
   0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 
   0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBD, 
   0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x40, 
   0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3C, 0x01, 
   0xC2, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 
   0x3A, 0x00, 0xC6, 0x3A, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 
   0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x00, 
   0xCA, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x00, 0xCC, 0x34, 0x01, 0xCD, 0x32, 0x01, 0xCD, 
   0x32, 0x01, 0xCD, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 
   0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x00, 0xD2, 0x2D, 0x01, 
   0xD3, 0x2D, 0x00, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 
   0x2A, 0x00, 0xD5, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x28, 
   0x01, 0xD8, 0x27, 0x01, 0xD8, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 
   0xDB, 0x25, 0x00, 0xDB, 0x24, 0x00, 0xDB, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDC, 0x22, 0x01, 0xDD, 
   0x22, 0x01, 0xDD, 0x22, 0x00, 0xDE, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 
   0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x00, 0xE2, 0x1E, 0x01, 
   0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 0x1B, 0x01, 0xE5, 
   0x1A, 0x00, 0xE6, 0x1A, 0x01, 0xE6, 0x98, 0x01, 0x67, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 
   0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 
   0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 
   0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 
   0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 
   0x73, 0x8D, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 
   0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 
   0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 
   0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 
   0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 
   0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 
   0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x86, 
   0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 
   0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 
   0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8E, 
   0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 
   0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 
   0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x00, 0x95, 
   0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 
   0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 
   0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 
   0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x5F, 
   0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 
   0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 
   0x5B, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA8, 0x57, 
   0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 
   0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x01, 0xAD, 0x53, 0x00, 0xAC, 
   0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB5, 0x4A, 0x00, 0xB4, 
   0x4B, 0x00, 0xB5, 0x49, 0x00, 0xB6, 0x4A, 0x00, 0xB7, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 
   0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 
   0xBA, 0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 
   0x42, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 
   0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3E, 0x01, 0xC1, 0x3D, 0x01, 
   0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 
   0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 0x38, 
   0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 
   0xCA, 0x35, 0x01, 0xCB, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x33, 0x00, 0xCD, 
   0x33, 0x01, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 
   0x01, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2D, 0x00, 
   0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 
   0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 
   0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 
   0xDA, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 
   0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 
   0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 
   0xE2, 0x1D, 0x01, 0xE3, 0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE4, 0x1C, 0x01, 0xE4, 0x1B, 0x01, 0xE5, 
   0x1A, 0x01, 0xE5, 0x1A, 0x01, 0xE6, 0x99, 0x00, 0x67, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x97, 
   0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x69, 0x95, 0x01, 
   0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 
   0x93, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 
   0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 
   0x72, 0x8C, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x01, 0x74, 
   0x8A, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 
   0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 
   0x7A, 0x84, 0x00, 0x7A, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7C, 
   0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 
   0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 
   0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 
   0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x87, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 
   0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 
   0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 
   0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 
   0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 
   0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 
   0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 
   0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9C, 
   0x63, 0x00, 0x9D, 0x63, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 
   0x00, 0x9F, 0x5F, 0x00, 0x9F, 0x60, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA5, 
   0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 
   0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 
   0xA9, 0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAD, 
   0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 
   0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 
   0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 
   0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 
   0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 
   0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 
   0x00, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x3E, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x00, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC3, 0x3B, 0x01, 0xC5, 
   0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 
   0x01, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x01, 
   0xCA, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCD, 
   0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 
   0x00, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD4, 
   0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 
   0x01, 0xD7, 0x28, 0x00, 0xD7, 0x28, 0x00, 0xD9, 0x27, 0x01, 0xD8, 0x26, 0x01, 0xD9, 0x26, 0x01, 
   0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 
   0x23, 0x01, 0xDC, 0x23, 0x00, 0xDE, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x20, 
   0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 
   0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 0x1D, 0x01, 0xE3, 0x1C, 0x00, 0xE3, 0x1C, 0x01, 0xE4, 
   0x1B, 0x01, 0xE5, 0x1A, 0x01, 0xE5, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 
   0x01, 0x67, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 
   0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 
   0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x90, 
   0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 
   0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 
   0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 
   0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 
   0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 
   0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 
   0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 
   0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7B, 0x01, 0x83, 0x7C, 0x00, 0x84, 
   0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 
   0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 
   0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 
   0x73, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8F, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 
   0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 
   0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x68, 
   0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9F, 0x61, 
   0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 
   0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA7, 0x59, 
   0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 
   0x54, 0x00, 0xAC, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 
   0x00, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4C, 0x01, 0xB3, 0x4B, 0x01, 0xB4, 
   0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 
   0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x00, 
   0xB9, 0x46, 0x00, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x00, 0xBC, 0x44, 0x00, 0xBC, 
   0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x41, 0x01, 0xBF, 0x41, 
   0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x00, 0xC7, 0x39, 
   0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 
   0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCC, 
   0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x00, 0xCD, 0x31, 0x01, 0xCF, 0x32, 
   0x01, 0xCF, 0x30, 0x00, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 
   0xD2, 0x2E, 0x01, 0xD1, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 
   0x2B, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 
   0x00, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 
   0xD9, 0x26, 0x00, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 
   0x24, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x21, 0x01, 0xDE, 0x22, 
   0x01, 0xDF, 0x21, 0x00, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x00, 0xE0, 0x1F, 0x01, 0xE0, 0x1E, 0x01, 
   0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x00, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE4, 0x1C, 0x01, 0xE3, 
   0x1B, 0x01, 0xE4, 0x1C, 0x01, 0xE5, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x00, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 0x00, 
   0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 
   0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 
   0x01, 0x6E, 0x91, 0x01, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x01, 
   0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 
   0x8C, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 
   0x00, 0x76, 0x88, 0x00, 0x77, 0x87, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 
   0x7A, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 
   0x83, 0x00, 0x7D, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 
   0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x00, 
   0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 
   0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 
   0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 
   0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 
   0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 
   0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 
   0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 
   0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 
   0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 
   0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 
   0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA7, 0x58, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x58, 0x00, 0xA7, 0x57, 0x01, 0xA8, 0x57, 0x00, 
   0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 
   0x53, 0x01, 0xAC, 0x54, 0x00, 0xAD, 0x52, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 
   0x01, 0xAF, 0x50, 0x01, 0xAF, 0x51, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB4, 
   0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 
   0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 
   0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 
   0x44, 0x01, 0xBC, 0x44, 0x01, 0xBD, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBE, 0x41, 0x00, 0xBD, 0x41, 
   0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 
   0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x00, 0xC3, 
   0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 
   0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC8, 0x37, 0x01, 
   0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 
   0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 
   0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 
   0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 
   0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 
   0x01, 0xD6, 0x29, 0x00, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x00, 
   0xD9, 0x26, 0x01, 0xD9, 0x27, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x00, 0xDC, 
   0x24, 0x01, 0xDB, 0x24, 0x01, 0xDD, 0x24, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 
   0x01, 0xDE, 0x22, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x1F, 0x00, 0xE0, 0x1F, 0x01, 
   0xE1, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 
   0x1C, 0x01, 0xE3, 0x1C, 0x01, 0xE5, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 
   0x00, 0x67, 0x98, 0x00, 0x66, 0x98, 0x00, 0x67, 0x97, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 
   0x68, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 
   0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 
   0x00, 0x6E, 0x90, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 
   0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 
   0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 
   0x00, 0x77, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x86, 0x00, 
   0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 
   0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 
   0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x81, 0x7F, 0x01, 
   0x81, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x84, 
   0x7C, 0x01, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 
   0x01, 0x87, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x89, 0x77, 0x01, 
   0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 
   0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 
   0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 
   0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 
   0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 
   0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x67, 0x00, 0x98, 0x67, 0x00, 
   0x98, 0x66, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9A, 
   0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 
   0x01, 0x9E, 0x62, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 
   0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 
   0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 
   0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x00, 
   0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x56, 0x00, 0xAB, 0x55, 0x00, 0xAB, 
   0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x53, 0x00, 0xAD, 0x52, 
   0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 
   0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4C, 0x00, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 
   0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBB, 
   0x45, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 
   0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x00, 0xC0, 0x40, 0x01, 
   0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 
   0x3C, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 
   0x01, 0xC6, 0x3A, 0x00, 0xC7, 0x39, 0x00, 0xC7, 0x39, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 
   0xC9, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 
   0x34, 0x00, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 
   0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x00, 
   0xD1, 0x2F, 0x01, 0xD0, 0x2E, 0x00, 0xD2, 0x2E, 0x01, 0xD1, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 
   0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2A, 
   0x00, 0xD5, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 
   0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 
   0x24, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x00, 0xDD, 0x23, 0x01, 0xDD, 0x22, 
   0x01, 0xDE, 0x21, 0x00, 0xDE, 0x22, 0x01, 0xDE, 0x20, 0x01, 0xDF, 0x20, 0x00, 0xE0, 0x20, 0x00, 
   0xE0, 0x20, 0x01, 0xE0, 0x1E, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1D, 0x01, 0xE2, 0x1D, 0x01, 0xE3, 
   0x1D, 0x00, 0xE3, 0x1C, 0x01, 0xE4, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 
   0x68, 0x96, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x94, 0x00, 0x6A, 
   0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6D, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 
   0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 
   0x70, 0x8E, 0x01, 0x71, 0x8F, 0x01, 0x72, 0x8D, 0x00, 0x71, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x72, 
   0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 
   0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 
   0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 
   0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 
   0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 
   0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 
   0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 
   0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6F, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 
   0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x95, 0x6B, 0x01, 0x95, 0x6B, 
   0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 
   0x64, 0x00, 0x9B, 0x65, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 
   0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0xA0, 0x60, 0x01, 
   0xA0, 0x60, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 
   0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 
   0x01, 0xA6, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 
   0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x55, 0x00, 0xAA, 0x56, 0x01, 0xAB, 
   0x54, 0x00, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x53, 
   0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAE, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 
   0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 
   0x4D, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 
   0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 
   0xB7, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x47, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 
   0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 
   0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 
   0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 
   0x3D, 0x00, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 
   0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x00, 0xC7, 0x39, 0x00, 0xC7, 0x38, 0x01, 
   0xC8, 0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 
   0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 
   0x00, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x30, 0x01, 
   0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD2, 
   0x2D, 0x00, 0xD3, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2B, 
   0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x28, 0x01, 0xD8, 0x28, 0x01, 
   0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 
   0x26, 0x01, 0xDA, 0x25, 0x00, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 
   0x00, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 
   0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 
   0x1D, 0x01, 0xE2, 0x1C, 0x01, 0xE3, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x64, 0x9A, 
   0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 
   0x67, 0x97, 0x00, 0x69, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x95, 0x01, 0x69, 0x95, 0x01, 0x6A, 
   0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 
   0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 
   0x77, 0x87, 0x01, 0x79, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 
   0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7F, 0x81, 0x00, 0x7E, 0x80, 0x01, 0x80, 0x80, 0x00, 
   0x7F, 0x7F, 0x01, 0x80, 0x7E, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7E, 0x01, 0x82, 
   0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 
   0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x87, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 
   0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x00, 0x8A, 
   0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 
   0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 
   0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 
   0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 
   0x98, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 
   0x65, 0x00, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 
   0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 
   0xA0, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 
   0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 
   0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 
   0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x52, 
   0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 
   0x4D, 0x00, 0xB2, 0x4C, 0x01, 0xB2, 0x4D, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 
   0x00, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x00, 
   0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x44, 0x00, 0xBC, 0x44, 0x01, 0xBC, 0x43, 
   0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x41, 0x01, 
   0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3D, 0x01, 0xC2, 
   0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC5, 0x3B, 
   0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 
   0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 
   0x35, 0x00, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 
   0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x31, 0x01, 
   0xCF, 0x31, 0x01, 0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 
   0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x00, 0xD6, 0x29, 0x00, 0xD6, 0x29, 0x00, 0xD7, 0x29, 0x01, 
   0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 
   0x25, 0x00, 0xDA, 0x26, 0x00, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 
   0x01, 0xDD, 0x22, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 
   0xE0, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x00, 0xE1, 0x1E, 0x01, 0xE1, 0x1E, 0x01, 0xE1, 
   0x1E, 0x00, 0xE2, 0x1D, 0x01, 0xE3, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 
   0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 
   0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 
   0x96, 0x00, 0x6B, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 
   0x01, 0x6C, 0x93, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 
   0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 
   0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 
   0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 
   0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x01, 
   0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 
   0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 
   0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 
   0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 
   0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8D, 0x73, 
   0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 
   0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 
   0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 
   0x01, 0x95, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 
   0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x68, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x99, 
   0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 
   0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 
   0x9F, 0x60, 0x00, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 
   0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 
   0xA7, 0x58, 0x01, 0xA7, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 
   0x56, 0x00, 0xAA, 0x56, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 
   0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 
   0xAF, 0x51, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 
   0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 
   0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x00, 0xBB, 0x44, 0x00, 0xBB, 0x43, 
   0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 
   0xBE, 0x40, 0x01, 0xC0, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC2, 
   0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 
   0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 
   0xC7, 0x39, 0x01, 0xC8, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 
   0x01, 0xCD, 0x34, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 0x31, 0x01, 
   0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 
   0x2E, 0x00, 0xD1, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 
   0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD5, 0x2A, 0x00, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 
   0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x00, 0xD9, 
   0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x25, 0x00, 0xDB, 0x24, 0x01, 0xDC, 0x23, 
   0x01, 0xDD, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 
   0xDE, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE0, 0x1F, 0x00, 0xE1, 
   0x1E, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x63, 0x9B, 
   0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x98, 0x00, 
   0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x6A, 
   0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 
   0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 
   0x6E, 0x91, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x71, 
   0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 
   0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 
   0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 
   0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x82, 0x00, 0x7F, 0x81, 0x00, 
   0x7F, 0x81, 0x01, 0x7F, 0x7F, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 
   0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 
   0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 0x00, 
   0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 
   0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 
   0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 
   0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 
   0x6E, 0x00, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 
   0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 
   0x96, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 
   0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 
   0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 
   0x5E, 0x00, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 
   0x00, 0xA4, 0x5C, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 0x5B, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 
   0xA7, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xA9, 
   0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 
   0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x51, 0x01, 
   0xAE, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x01, 0xB0, 
   0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 
   0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x49, 0x01, 0xB6, 0x49, 0x01, 
   0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 
   0x47, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x45, 0x01, 0xBC, 0x44, 
   0x01, 0xBB, 0x44, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 
   0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 
   0x3F, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 
   0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 
   0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 
   0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 
   0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 
   0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 
   0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x00, 0xD6, 0x29, 0x00, 
   0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 
   0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 
   0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 
   0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x1F, 0x00, 0xE1, 
   0x1F, 0x01, 0xE2, 0x1E, 0x01, 0xE2, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 
   0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 
   0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 
   0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 
   0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 
   0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8B, 
   0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x89, 0x01, 0x75, 0x89, 0x00, 
   0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 
   0x00, 0x7B, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 
   0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 
   0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x84, 0x7C, 
   0x01, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 
   0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 
   0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 
   0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 
   0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 
   0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 
   0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 
   0x96, 0x69, 0x00, 0x96, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 
   0x66, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 
   0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 
   0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x00, 0xA0, 
   0x5E, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 
   0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 
   0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 
   0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x00, 0xAB, 0x54, 
   0x01, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x00, 
   0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 
   0x4F, 0x00, 0xB0, 0x4E, 0x00, 0xB1, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 
   0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 
   0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB6, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 
   0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x00, 0xBA, 0x44, 0x01, 0xBB, 0x44, 
   0x01, 0xBC, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 
   0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x00, 0xC0, 
   0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 
   0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 
   0xC5, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 
   0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 
   0x00, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 
   0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x2F, 0x01, 0xD0, 
   0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD3, 0x2D, 0x00, 0xD3, 0x2C, 
   0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 
   0xD6, 0x2A, 0x00, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 
   0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x00, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x00, 0xDA, 0x25, 
   0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 
   0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xE0, 0x20, 0x01, 0xDF, 0x20, 0x01, 0xE0, 
   0x1F, 0x00, 0xE1, 0x1E, 0x01, 0xE1, 0x9D, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 
   0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 
   0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 
   0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 
   0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 
   0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x6F, 0x90, 0x01, 0x70, 
   0x8E, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 
   0x01, 0x74, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x89, 0x00, 
   0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 
   0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 
   0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 
   0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 
   0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 
   0x01, 0x84, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 
   0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 
   0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 
   0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 
   0x8D, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 
   0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 
   0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 
   0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 
   0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 
   0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 
   0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 
   0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 
   0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 
   0x58, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 
   0x00, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x52, 0x01, 
   0xAE, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB1, 0x4E, 0x00, 0xB3, 0x4D, 
   0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 
   0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB8, 0x48, 0x01, 0xB7, 
   0x48, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x45, 0x01, 0xBA, 0x45, 
   0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBC, 0x43, 0x01, 
   0xBD, 0x42, 0x00, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 
   0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3D, 0x01, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 
   0xC5, 0x3A, 0x00, 0xC5, 0x39, 0x01, 0xC6, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 0xC8, 
   0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 
   0x01, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCB, 0x33, 0x00, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 
   0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 
   0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2D, 
   0x00, 0xD2, 0x2C, 0x01, 0xD4, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 
   0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x00, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 
   0x28, 0x00, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 
   0x01, 0xDB, 0x25, 0x00, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x22, 0x01, 
   0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 0x21, 0x01, 0xDF, 0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 
   0x20, 0x01, 0xE0, 0x1F, 0x01, 0xE1, 0x9E, 0x01, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 
   0x01, 0x62, 0x9D, 0x00, 0x64, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x01, 
   0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x68, 0x98, 0x00, 0x67, 
   0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 
   0x01, 0x6A, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 
   0x6D, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 
   0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 
   0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 
   0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x87, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 
   0x00, 0x7A, 0x85, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7C, 0x82, 0x00, 
   0x7D, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7F, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 
   0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 
   0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x87, 
   0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 
   0x00, 0x8A, 0x75, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 
   0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 
   0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x00, 0x92, 0x6C, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 
   0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x97, 
   0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 
   0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 
   0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 
   0x5F, 0x01, 0xA0, 0x60, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 
   0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x00, 
   0xA5, 0x5B, 0x00, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 
   0x57, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x00, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 
   0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x00, 
   0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 
   0x50, 0x01, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 
   0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4A, 0x00, 0xB6, 0x4A, 0x00, 0xB6, 0x4A, 0x00, 0xB6, 0x48, 0x01, 0xB7, 0x49, 0x00, 0xB8, 
   0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x47, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 
   0x00, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x00, 
   0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 
   0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC1, 0x3E, 
   0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 
   0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC7, 0x38, 0x01, 0xC7, 
   0x38, 0x00, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xC9, 0x36, 
   0x00, 0xCB, 0x35, 0x00, 0xCB, 0x35, 0x00, 0xCB, 0x34, 0x00, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 
   0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 
   0x30, 0x00, 0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 
   0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 
   0xD4, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 0x01, 0xD8, 
   0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x25, 
   0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x23, 0x01, 0xDC, 0x23, 0x01, 
   0xDC, 0x22, 0x01, 0xDD, 0x22, 0x00, 0xDD, 0x21, 0x01, 0xDE, 0x21, 0x00, 0xDF, 0x20, 0x01, 0xDF, 
   0x20, 0x01, 0xE0, 0x20, 0x01, 0xE0, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x01, 0x62, 0x9D, 
   0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 
   0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 
   0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 
   0x6D, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x71, 0x8D, 
   0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 
   0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x77, 0x88, 0x00, 0x76, 0x89, 0x00, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x86, 
   0x01, 0x7A, 0x84, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 
   0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7F, 
   0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 
   0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 
   0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 
   0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 
   0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 
   0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 
   0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 
   0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 
   0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 
   0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x60, 0x01, 0x9F, 
   0x60, 0x01, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 
   0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 
   0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA7, 0x58, 0x01, 0xA7, 
   0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 
   0x00, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 
   0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 
   0x51, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 
   0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 
   0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 
   0x48, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 
   0x01, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x44, 0x01, 
   0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 
   0x41, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x00, 0xC1, 0x3E, 
   0x01, 0xC1, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC4, 0x3C, 0x00, 0xC3, 0x3B, 0x00, 
   0xC4, 0x3B, 0x01, 0xC4, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 
   0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 
   0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 
   0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 
   0x30, 0x01, 0xCF, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 0xD1, 0x2E, 
   0x01, 0xD2, 0x2D, 0x00, 0xD2, 0x2D, 0x01, 0xD2, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 
   0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 
   0x28, 0x01, 0xD8, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x26, 0x01, 0xD9, 0x26, 
   0x00, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x24, 0x01, 
   0xDC, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDD, 0x21, 0x01, 0xDE, 0x21, 0x01, 0xDE, 
   0x20, 0x00, 0xDF, 0x20, 0x01, 0xE0, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 
   0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 
   0x64, 0x9B, 0x01, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 
   0x98, 0x00, 0x67, 0x97, 0x00, 0x67, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x97, 0x00, 0x69, 0x95, 
   0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 
   0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x00, 0x6F, 0x90, 0x01, 0x6F, 
   0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 
   0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 
   0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 
   0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 
   0x7C, 0x82, 0x01, 0x7D, 0x83, 0x01, 0x7E, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 
   0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 
   0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x01, 0x87, 
   0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 
   0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 
   0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6F, 
   0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 
   0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x97, 
   0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x00, 
   0x9C, 0x63, 0x00, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 
   0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5F, 
   0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 
   0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 
   0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x57, 
   0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x00, 
   0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAF, 
   0x51, 0x01, 0xAE, 0x51, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 
   0x00, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 
   0xB3, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 
   0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x46, 0x01, 0xB9, 0x46, 
   0x01, 0xBA, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 
   0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xC1, 0x3F, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 
   0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC4, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 
   0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 0x38, 0x00, 0xC9, 0x37, 0x00, 0xC8, 0x36, 
   0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 
   0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 
   0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD2, 0x2F, 0x01, 0xD2, 0x2E, 0x00, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 
   0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 
   0x29, 0x01, 0xD6, 0x29, 0x01, 0xD8, 0x28, 0x01, 0xD7, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD9, 0x27, 
   0x00, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 
   0xDC, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0x22, 0x01, 0xDE, 
   0x21, 0x01, 0xDF, 0x20, 0x01, 0xE0, 0x9F, 0x01, 0x60, 0xA0, 0x01, 0x60, 0x9E, 0x01, 0x61, 0x9E, 
   0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9C, 0x00, 
   0x64, 0x9C, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x66, 
   0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 
   0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 
   0x6B, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 
   0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 
   0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x74, 0x8B, 0x00, 
   0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 
   0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 
   0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 
   0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 
   0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 
   0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 
   0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 
   0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 
   0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6F, 
   0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 
   0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 
   0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 
   0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x01, 
   0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 
   0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5E, 
   0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5D, 0x00, 
   0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x59, 0x00, 0xA6, 
   0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 
   0x00, 0xA9, 0x56, 0x00, 0xA9, 0x55, 0x01, 0xAA, 0x56, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 
   0xAC, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x00, 0xAE, 
   0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 
   0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB3, 0x4B, 0x01, 0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 
   0x49, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB9, 0x46, 
   0x01, 0xB9, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 
   0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC2, 0x3E, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 
   0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 
   0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 0x35, 0x00, 0xCB, 0x35, 0x01, 
   0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 
   0x32, 0x01, 0xCE, 0x31, 0x00, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 
   0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD2, 0x2C, 0x00, 
   0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 
   0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x27, 
   0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 
   0xDB, 0x24, 0x01, 0xDB, 0x23, 0x00, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 0x23, 0x01, 0xDD, 
   0x21, 0x01, 0xDE, 0x21, 0x00, 0xDF, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 
   0x01, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 
   0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x99, 0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 
   0x00, 0x68, 0x96, 0x01, 0x69, 0x95, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x01, 
   0x6B, 0x93, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 
   0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8E, 
   0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8D, 0x00, 
   0x73, 0x8B, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 
   0x7B, 0x83, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 
   0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 
   0x01, 0x81, 0x7F, 0x01, 0x82, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7C, 0x00, 0x82, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 
   0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 
   0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 
   0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 
   0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 
   0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 
   0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 
   0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 
   0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 
   0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 
   0x61, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 
   0x00, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 
   0xA2, 0x5D, 0x00, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA6, 
   0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 
   0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 
   0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 
   0x51, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 
   0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB3, 0x4C, 0x01, 
   0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB6, 
   0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x48, 
   0x01, 0xB8, 0x46, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x45, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x44, 0x01, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 
   0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 
   0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 
   0xC3, 0x3C, 0x00, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 
   0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC7, 0x38, 
   0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 
   0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCD, 
   0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x30, 
   0x01, 0xD0, 0x2F, 0x00, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 
   0xD2, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 
   0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x00, 0xD7, 0x29, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 
   0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x00, 
   0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDB, 0x24, 0x01, 0xDD, 0x23, 0x01, 0xDC, 0x23, 0x01, 0xDD, 
   0x23, 0x01, 0xDD, 0x21, 0x01, 0xDE, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x60, 0xA0, 0x00, 0x60, 0x9F, 
   0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x01, 
   0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9B, 0x00, 0x65, 
   0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 
   0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 
   0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x92, 0x01, 0x6D, 0x93, 0x00, 0x6D, 
   0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x91, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 
   0x01, 0x70, 0x8E, 0x01, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 
   0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x01, 
   0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 
   0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 
   0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 
   0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 
   0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 
   0x01, 0x89, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 
   0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 
   0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 
   0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 
   0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x00, 0x95, 
   0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 
   0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 
   0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 
   0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 
   0xA2, 0x5C, 0x00, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5C, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 
   0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x57, 
   0x00, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 
   0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x51, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 
   0x00, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x00, 0xB0, 0x4F, 0x00, 0xB2, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 
   0xB2, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 
   0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 
   0x00, 0xB8, 0x47, 0x01, 0xB8, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 
   0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBD, 
   0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x40, 
   0x01, 0xC0, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 
   0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 
   0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 
   0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 
   0xCA, 0x35, 0x00, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 
   0x33, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 
   0x00, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 
   0xD3, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 
   0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 
   0x01, 0xD8, 0x27, 0x00, 0xD8, 0x27, 0x00, 0xD8, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x26, 0x01, 
   0xDA, 0x25, 0x01, 0xDA, 0x25, 0x00, 0xDC, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDD, 0x23, 0x00, 0xDD, 
   0x23, 0x01, 0xDD, 0x22, 0x01, 0xDE, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 
   0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 
   0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x99, 0x01, 0x67, 0x97, 
   0x00, 0x68, 0x98, 0x01, 0x69, 0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 
   0x6B, 0x95, 0x00, 0x6B, 0x95, 0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 
   0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6F, 0x90, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x8F, 
   0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 
   0x72, 0x8C, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8B, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 
   0x8B, 0x01, 0x75, 0x89, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 
   0x00, 0x77, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x86, 0x00, 
   0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 
   0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7F, 0x80, 
   0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 
   0x82, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7B, 0x01, 0x83, 0x7C, 0x01, 0x85, 0x7B, 0x01, 0x84, 
   0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 
   0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 
   0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 
   0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 
   0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 
   0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 
   0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 
   0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 
   0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 
   0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 
   0xA2, 0x5E, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA7, 0x58, 
   0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 
   0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4F, 0x01, 0xB2, 0x4E, 0x00, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x00, 0xB5, 
   0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x49, 0x00, 0xB6, 0x4A, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x49, 
   0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x46, 0x01, 0xB9, 0x46, 0x00, 
   0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBD, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 
   0x00, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x01, 0xC1, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 
   0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 
   0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x01, 
   0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 
   0x33, 0x00, 0xCC, 0x32, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCF, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2E, 0x01, 0xD2, 0x2E, 0x00, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD4, 
   0x2B, 0x00, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0x29, 0x01, 0xD7, 0x29, 
   0x01, 0xD8, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0x27, 0x00, 0xD9, 0x27, 0x01, 0xDA, 0x27, 0x01, 
   0xD9, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0x23, 0x01, 0xDC, 
   0x23, 0x01, 0xDD, 0x23, 0x01, 0xDE, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5E, 0xA0, 
   0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x00, 
   0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 
   0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x99, 
   0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 
   0x69, 0x96, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6B, 0x93, 0x00, 0x6C, 
   0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 
   0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 
   0x71, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x72, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 
   0x8B, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 
   0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x7A, 0x86, 0x00, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 
   0x82, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 
   0x81, 0x7E, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 
   0x7B, 0x00, 0x84, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 
   0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 
   0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 
   0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 
   0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 
   0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 
   0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 
   0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9B, 
   0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 
   0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 
   0xA2, 0x5D, 0x01, 0xA1, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 
   0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 
   0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x00, 
   0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x53, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x50, 
   0x00, 0xAE, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 
   0xB1, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB6, 0x49, 
   0x01, 0xB7, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x46, 0x00, 
   0xB9, 0x45, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x44, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 
   0x44, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x41, 
   0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xBF, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 
   0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC3, 
   0x3B, 0x00, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 
   0x01, 0xC7, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 
   0xCA, 0x36, 0x01, 0xC9, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCB, 
   0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0x31, 
   0x01, 0xCE, 0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 
   0xD1, 0x2E, 0x00, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 
   0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 
   0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x00, 0xD8, 0x28, 0x00, 0xD9, 0x27, 0x01, 
   0xD9, 0x26, 0x01, 0xD9, 0x26, 0x00, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 
   0x23, 0x01, 0xDC, 0x24, 0x01, 0xDD, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5D, 0xA2, 0x00, 0x5F, 0xA1, 
   0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x60, 0x9E, 0x01, 
   0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 
   0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x67, 0x99, 0x00, 0x68, 0x97, 0x01, 0x67, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x97, 0x01, 
   0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 
   0x93, 0x01, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x91, 
   0x01, 0x6E, 0x91, 0x00, 0x70, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x70, 0x8F, 0x00, 
   0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 
   0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 
   0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x86, 0x00, 0x79, 0x87, 0x00, 
   0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x84, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7B, 
   0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7F, 0x81, 
   0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x80, 0x7F, 0x01, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 
   0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 
   0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 
   0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 
   0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6E, 0x00, 
   0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 
   0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 
   0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 
   0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 
   0x01, 0x9F, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 
   0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 
   0x00, 0xA7, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x56, 0x01, 0xAB, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 
   0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 
   0x01, 0xAF, 0x50, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x00, 
   0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x00, 0xB3, 
   0x4C, 0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 
   0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 
   0xB9, 0x47, 0x01, 0xBA, 0x45, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 
   0x44, 0x01, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 
   0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 
   0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 
   0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 
   0x01, 0xC7, 0x39, 0x00, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x01, 
   0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 
   0x34, 0x01, 0xCC, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 
   0x01, 0xCE, 0x31, 0x01, 0xCE, 0x30, 0x01, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x00, 0xD0, 0x2F, 0x00, 
   0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD2, 0x2C, 0x01, 0xD3, 
   0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 
   0x01, 0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 
   0xD8, 0x27, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0x26, 0x01, 0xDB, 0x25, 0x01, 0xDB, 0x25, 0x01, 0xDC, 
   0x24, 0x00, 0xDC, 0x23, 0x01, 0xDC, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 
   0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 
   0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 
   0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x9A, 
   0x01, 0x66, 0x99, 0x01, 0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x69, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 
   0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x74, 
   0x8B, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 
   0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 
   0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x85, 0x00, 0x7B, 
   0x84, 0x01, 0x7C, 0x84, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 
   0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x84, 
   0x7C, 0x01, 0x83, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 
   0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 
   0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 
   0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x71, 
   0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 
   0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 
   0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 
   0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 
   0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 
   0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 
   0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 
   0xA1, 0x5E, 0x00, 0xA1, 0x5F, 0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5C, 0x00, 0xA4, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 
   0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 
   0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAA, 
   0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x52, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 
   0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 
   0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x00, 0xB3, 
   0x4C, 0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 
   0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x48, 0x00, 0xB7, 0x47, 0x01, 0xB8, 0x48, 0x00, 
   0xB9, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xB9, 0x45, 0x00, 0xBA, 0x45, 0x00, 0xBB, 
   0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 
   0x01, 0xBE, 0x42, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 
   0xC0, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 
   0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3A, 0x00, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 
   0x00, 0xC5, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 
   0xC8, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x00, 0xCB, 
   0x35, 0x00, 0xCB, 0x34, 0x00, 0xCC, 0x34, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 
   0x00, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x2F, 0x01, 
   0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x00, 0xD2, 0x2D, 0x00, 0xD2, 0x2D, 0x01, 0xD3, 
   0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD4, 0x2A, 0x01, 0xD6, 0x2A, 
   0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 
   0xD8, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 
   0x25, 0x01, 0xDB, 0x24, 0x01, 0xDC, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0x9F, 0x00, 0x5F, 0x9F, 0x00, 
   0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 
   0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 
   0x68, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 
   0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x90, 0x00, 
   0x71, 0x8E, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 
   0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 
   0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 
   0x79, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7B, 0x85, 0x01, 0x7B, 
   0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 
   0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x80, 0x80, 0x01, 0x80, 0x80, 0x00, 
   0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 
   0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 
   0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 0x78, 0x01, 
   0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 
   0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 
   0x01, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 
   0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 
   0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6A, 
   0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 
   0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 
   0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 
   0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 
   0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 
   0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 
   0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x00, 
   0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 
   0x55, 0x01, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 
   0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 
   0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x49, 0x01, 0xB5, 0x4A, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB8, 0x48, 0x01, 
   0xB8, 0x48, 0x01, 0xB8, 0x46, 0x01, 0xB8, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 
   0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBB, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 
   0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x00, 
   0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x00, 0xC1, 0x3D, 0x01, 0xC2, 0x3E, 0x01, 0xC3, 
   0x3D, 0x00, 0xC3, 0x3D, 0x00, 0xC4, 0x3B, 0x01, 0xC3, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 
   0x01, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 
   0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 
   0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x00, 0xCC, 0x33, 0x01, 0xCD, 0x32, 
   0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 
   0xD0, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2F, 0x00, 0xD2, 0x2E, 0x01, 0xD2, 
   0x2D, 0x00, 0xD3, 0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD3, 0x2B, 0x00, 0xD4, 0x2C, 0x00, 0xD5, 0x2A, 
   0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x00, 0xD7, 0x28, 0x01, 
   0xD8, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0x26, 0x00, 0xDA, 0x26, 0x01, 0xDA, 0x25, 0x01, 0xDA, 
   0x25, 0x01, 0xDB, 0x25, 0x00, 0xDB, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x01, 0x5D, 0xA3, 
   0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 
   0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 
   0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 
   0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 
   0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x69, 0x95, 0x00, 0x6A, 
   0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x01, 0x6C, 0x92, 
   0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 
   0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 
   0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 
   0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 
   0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 
   0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 
   0x01, 0x85, 0x79, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 
   0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x00, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 
   0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 
   0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x68, 0x00, 0x97, 0x68, 0x01, 
   0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 
   0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 
   0xA0, 0x60, 0x00, 0x9F, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA1, 
   0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 
   0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 
   0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x00, 0xAA, 
   0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 
   0x00, 0xAC, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 
   0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x00, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 
   0x01, 0xB4, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x49, 0x01, 
   0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 
   0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x00, 
   0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 
   0x3D, 0x00, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC3, 0x3B, 0x00, 0xC4, 0x3B, 
   0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 
   0xC7, 0x38, 0x00, 0xC8, 0x38, 0x00, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 
   0x36, 0x01, 0xCB, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 
   0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x00, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x00, 0xCE, 0x31, 0x01, 
   0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 
   0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 
   0xD7, 0x28, 0x01, 0xD8, 0x28, 0x01, 0xD9, 0x27, 0x01, 0xD9, 0x26, 0x01, 0xD9, 0x26, 0x00, 0xDA, 
   0x25, 0x01, 0xDA, 0x25, 0x01, 0xDB, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 
   0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 
   0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 
   0x9D, 0x01, 0x63, 0x9C, 0x00, 0x62, 0x9C, 0x01, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 
   0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 
   0x68, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x95, 0x00, 0x69, 
   0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 
   0x00, 0x6C, 0x93, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x00, 
   0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x72, 0x8E, 0x01, 0x72, 
   0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 
   0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 
   0x77, 0x87, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 
   0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 
   0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x82, 
   0x7D, 0x00, 0x83, 0x7C, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 
   0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 
   0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 
   0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 
   0x8F, 0x71, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 
   0x6D, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 
   0x01, 0x95, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 
   0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 
   0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 
   0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 
   0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 
   0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 
   0xA7, 0x59, 0x00, 0xA7, 0x57, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 
   0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x54, 
   0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x00, 
   0xAF, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 
   0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 
   0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x46, 0x01, 0xB9, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x43, 0x01, 0xBC, 0x43, 
   0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 
   0xBF, 0x41, 0x01, 0xBF, 0x3F, 0x01, 0xBF, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 
   0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3C, 
   0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 
   0xC7, 0x39, 0x00, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCB, 0x34, 
   0x00, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 
   0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x00, 0xD2, 
   0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 
   0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 
   0xD7, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 0x27, 0x01, 0xDA, 
   0x26, 0x01, 0xD9, 0x26, 0x01, 0xDA, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 
   0x5E, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x62, 
   0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 
   0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 
   0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 
   0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 
   0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x90, 0x00, 
   0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x72, 
   0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8B, 0x00, 0x73, 0x8B, 
   0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 
   0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 
   0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x84, 
   0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 
   0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 
   0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 
   0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 
   0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 
   0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 
   0x8E, 0x71, 0x01, 0x90, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 
   0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 
   0x00, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x00, 
   0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 
   0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9B, 0x63, 
   0x01, 0x9B, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x00, 
   0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 
   0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 
   0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 
   0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 
   0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 
   0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 
   0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 
   0x4E, 0x00, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 
   0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 
   0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 
   0x46, 0x01, 0xBA, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 
   0x01, 0xBB, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBC, 0x43, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x42, 0x01, 
   0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 
   0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 
   0x01, 0xC4, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 
   0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 
   0x37, 0x01, 0xCA, 0x36, 0x00, 0xC9, 0x35, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 0x01, 0xCB, 0x34, 
   0x00, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x00, 0xCD, 0x31, 0x00, 
   0xCE, 0x31, 0x00, 0xCF, 0x30, 0x00, 0xD0, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x00, 0xD1, 
   0x2F, 0x01, 0xD2, 0x2E, 0x00, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 
   0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 
   0xD7, 0x2A, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0x28, 0x00, 0xD8, 0x27, 0x01, 0xD8, 0x27, 0x01, 0xD9, 
   0x27, 0x01, 0xDA, 0x26, 0x01, 0xDA, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9E, 0x00, 0x61, 
   0x9E, 0x01, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 
   0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 
   0x66, 0x98, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 
   0x96, 0x00, 0x6A, 0x95, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6C, 0x94, 
   0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 
   0x6E, 0x91, 0x01, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x71, 
   0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 
   0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 
   0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 
   0x87, 0x00, 0x79, 0x85, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 
   0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 
   0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 
   0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 
   0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 
   0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 
   0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 
   0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 
   0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 
   0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6D, 
   0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 
   0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x97, 0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 
   0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 
   0x00, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 
   0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 
   0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 
   0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 
   0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA8, 
   0x57, 0x01, 0xA9, 0x57, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 
   0x00, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 
   0xAD, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 
   0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4D, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 
   0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 
   0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 
   0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 
   0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 
   0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 
   0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC6, 0x3A, 0x01, 
   0xC6, 0x3A, 0x00, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x00, 0xC8, 
   0x37, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 
   0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCD, 0x32, 0x01, 
   0xCE, 0x31, 0x00, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x30, 0x00, 0xD0, 
   0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 
   0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 
   0xD5, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD6, 0x28, 0x01, 0xD7, 0x28, 0x01, 0xD8, 0x27, 0x01, 0xD9, 
   0x27, 0x01, 0xD9, 0x26, 0x00, 0xD9, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 
   0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 
   0x9E, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9C, 
   0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x01, 
   0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 
   0x96, 0x00, 0x69, 0x97, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 
   0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 
   0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 
   0x00, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 
   0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 
   0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x81, 0x00, 
   0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 
   0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 
   0x00, 0x84, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 
   0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 
   0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 
   0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x00, 
   0x8D, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x90, 0x6F, 0x01, 0x90, 
   0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 
   0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 
   0x68, 0x00, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 
   0x01, 0x9B, 0x65, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x63, 0x00, 
   0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 
   0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 
   0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 
   0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 
   0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 
   0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x01, 
   0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xB0, 0x50, 0x01, 0xB0, 
   0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4C, 
   0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 
   0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 
   0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 
   0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 
   0xBD, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xBF, 
   0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC4, 0x3A, 0x01, 
   0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 
   0x37, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x35, 
   0x01, 0xCA, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 
   0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCE, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xCF, 
   0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x00, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD3, 0x2D, 
   0x01, 0xD3, 0x2D, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x00, 0xD5, 0x2B, 0x00, 
   0xD5, 0x2A, 0x00, 0xD6, 0x29, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x29, 0x00, 0xD7, 0x28, 0x00, 0xD8, 
   0x27, 0x01, 0xD8, 0x27, 0x01, 0xD8, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 
   0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 
   0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 
   0x00, 0x63, 0x9D, 0x00, 0x63, 0x9B, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 
   0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x67, 0x99, 0x00, 0x66, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 
   0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 
   0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 
   0x6D, 0x91, 0x01, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 
   0x8F, 0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8C, 
   0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 
   0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x87, 0x01, 0x77, 
   0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x84, 
   0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x83, 0x01, 
   0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x80, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 
   0x80, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 
   0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 
   0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 
   0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8B, 0x75, 
   0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 
   0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 
   0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 
   0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 
   0x68, 0x01, 0x98, 0x68, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 
   0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 
   0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 
   0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 
   0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 
   0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA7, 
   0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 
   0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 
   0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 
   0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 
   0x01, 0xB3, 0x4D, 0x00, 0xB2, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 
   0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 
   0x47, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 
   0x00, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 
   0xBC, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 
   0x40, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x00, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 
   0x00, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 
   0xC4, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 
   0x38, 0x00, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xC8, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xC9, 0x35, 
   0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCD, 0x33, 0x01, 
   0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x31, 0x01, 0xD0, 
   0x30, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x00, 0xD1, 0x2E, 0x00, 0xD2, 0x2E, 
   0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x00, 0xD5, 0x2B, 0x00, 
   0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 
   0x28, 0x01, 0xD8, 0x28, 0x01, 0xD8, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 
   0x01, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA2, 0x01, 0x5F, 0xA0, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 
   0x9F, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 
   0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 
   0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 
   0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 
   0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 
   0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 
   0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 
   0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 
   0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 
   0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7E, 0x80, 0x00, 0x7F, 
   0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 
   0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 
   0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 
   0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 
   0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 
   0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 0x8F, 
   0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6C, 0x01, 
   0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 
   0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 
   0x00, 0x9A, 0x66, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 
   0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 
   0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 
   0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5C, 0x00, 
   0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 
   0x58, 0x00, 0xA7, 0x57, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x55, 
   0x01, 0xAA, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAA, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 
   0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 
   0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 
   0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 
   0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 
   0x48, 0x01, 0xB7, 0x47, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 
   0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x44, 0x01, 
   0xBD, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 
   0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 
   0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 
   0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x01, 0xC7, 0x39, 0x01, 0xC7, 
   0x39, 0x01, 0xC8, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC9, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xCA, 0x36, 
   0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x00, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 
   0xCD, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 
   0x31, 0x01, 0xD0, 0x30, 0x00, 0xD0, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 
   0x00, 0xD1, 0x2D, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 
   0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD6, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD6, 0x29, 0x01, 0xD7, 
   0x29, 0x01, 0xD7, 0x28, 0x01, 0xD7, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x5A, 0xA6, 
   0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 
   0x5D, 0xA2, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5E, 
   0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x01, 0x61, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 
   0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 
   0x65, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 
   0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 
   0x01, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6B, 0x93, 0x00, 
   0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6F, 0x91, 0x00, 0x6F, 
   0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 
   0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x01, 
   0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 
   0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x00, 
   0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 
   0x81, 0x00, 0x80, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 
   0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7C, 0x01, 
   0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 
   0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 
   0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 
   0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 
   0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 
   0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 
   0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 
   0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 
   0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 
   0x9C, 0x63, 0x00, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 
   0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 
   0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x00, 
   0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 
   0x58, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 
   0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x00, 
   0xAC, 0x54, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAE, 
   0x50, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 
   0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB6, 
   0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x46, 
   0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 
   0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 
   0x00, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 
   0xC4, 0x3C, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x39, 0x01, 0xC6, 
   0x39, 0x01, 0xC7, 0x39, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x00, 0xC9, 0x36, 
   0x00, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 
   0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x00, 0xCE, 
   0x31, 0x01, 0xCF, 0x30, 0x00, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 
   0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2D, 0x01, 0xD2, 0x2E, 0x00, 0xD3, 0x2D, 0x01, 0xD4, 0x2C, 0x00, 
   0xD4, 0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 
   0x29, 0x01, 0xD6, 0x28, 0x01, 0xD7, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 
   0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 
   0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 
   0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 
   0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 
   0x64, 0x9C, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 
   0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 
   0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 
   0x90, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8C, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 
   0x73, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 
   0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 
   0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 
   0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 
   0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 
   0x00, 0x82, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 
   0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 
   0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 
   0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 
   0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 
   0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 
   0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 
   0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 
   0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 
   0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 
   0x61, 0x00, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 
   0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 
   0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 
   0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 
   0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x00, 
   0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 
   0x51, 0x00, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 
   0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 
   0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x47, 
   0x01, 0xB9, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x00, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 
   0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3B, 0x01, 0xC4, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 
   0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC8, 0x38, 0x01, 0xC7, 0x37, 0x01, 0xC8, 0x37, 
   0x01, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x01, 0xCB, 0x35, 0x00, 0xCB, 0x35, 0x01, 
   0xCC, 0x34, 0x00, 0xCC, 0x34, 0x01, 0xCD, 0x33, 0x01, 0xCC, 0x32, 0x00, 0xCE, 0x32, 0x01, 0xCE, 
   0x31, 0x01, 0xCE, 0x31, 0x00, 0xCE, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 
   0x00, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 
   0xD3, 0x2C, 0x01, 0xD4, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 
   0x29, 0x01, 0xD7, 0x2A, 0x01, 0xD7, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA6, 
   0x01, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 
   0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 
   0x00, 0x61, 0x9F, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 
   0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 
   0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 
   0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 
   0x6B, 0x93, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 
   0x91, 0x01, 0x6E, 0x90, 0x01, 0x6E, 0x90, 0x01, 0x70, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 
   0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8D, 0x00, 
   0x73, 0x8B, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 
   0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x87, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 
   0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 
   0x82, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 
   0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 
   0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 
   0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 
   0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 
   0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 
   0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 
   0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 
   0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x67, 0x00, 0x98, 0x67, 
   0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 
   0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9E, 0x63, 0x01, 0x9E, 
   0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 
   0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x00, 
   0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 
   0x01, 0xA8, 0x56, 0x01, 0xA9, 0x57, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 
   0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 
   0x51, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 
   0x00, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 
   0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB6, 
   0x49, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 
   0x00, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x00, 
   0xBB, 0x45, 0x00, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 
   0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 
   0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x00, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 0x01, 
   0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 0xC4, 0x3C, 0x00, 0xC5, 0x3B, 0x00, 0xC5, 0x3B, 0x01, 0xC6, 
   0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x00, 0xC8, 0x37, 
   0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 
   0xCB, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x00, 0xCC, 0x33, 0x00, 0xCD, 0x33, 0x00, 0xCD, 
   0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xCF, 0x30, 
   0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2F, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x01, 
   0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0x2B, 0x00, 0xD5, 0x2B, 0x01, 0xD5, 
   0x2A, 0x01, 0xD6, 0x2A, 0x01, 0xD7, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x59, 0xA6, 0x01, 0x5B, 0xA5, 0x00, 
   0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 
   0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 
   0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 
   0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 
   0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x99, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 
   0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x69, 0x95, 0x01, 0x6B, 0x94, 0x00, 
   0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 
   0x91, 0x01, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x8F, 0x00, 0x6F, 0x8F, 
   0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 
   0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 
   0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 
   0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 
   0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 
   0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 
   0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 
   0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 
   0x79, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 
   0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 
   0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 
   0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 
   0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 
   0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 
   0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 
   0x01, 0x99, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 
   0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 
   0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 
   0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 
   0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x00, 0xA5, 
   0x5A, 0x00, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 
   0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 
   0xAB, 0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 
   0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 
   0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 
   0x4B, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB8, 0x48, 
   0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x01, 
   0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x40, 
   0x00, 0xBF, 0x40, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3D, 0x01, 0xC2, 0x3E, 0x01, 
   0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x00, 0xC3, 0x3C, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 
   0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 
   0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 
   0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCD, 
   0x33, 0x00, 0xCE, 0x32, 0x00, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x30, 
   0x00, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x00, 0xD1, 0x2E, 0x00, 0xD1, 0x2E, 0x01, 0xD1, 0x2D, 0x01, 
   0xD3, 0x2D, 0x01, 0xD2, 0x2C, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2C, 0x01, 0xD5, 0x2B, 0x01, 0xD5, 
   0x2A, 0x01, 0xD5, 0x2A, 0x01, 0xD6, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 
   0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA3, 0x00, 0x5C, 
   0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 
   0x01, 0x5F, 0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 
   0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 
   0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 
   0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 
   0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x92, 0x00, 0x6D, 
   0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 
   0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 
   0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8A, 0x00, 0x75, 
   0x8A, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 
   0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 
   0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7B, 0x84, 0x01, 0x7D, 0x83, 0x01, 0x7C, 
   0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 
   0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x82, 0x7E, 0x00, 0x81, 0x7E, 0x01, 
   0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x85, 
   0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 
   0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8C, 0x74, 0x00, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 
   0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 
   0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 
   0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 
   0x6A, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 
   0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 
   0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 
   0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 
   0x00, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 
   0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 
   0x5A, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 
   0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 
   0xAA, 0x56, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 
   0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 
   0x4A, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB6, 0x48, 
   0x01, 0xB8, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 
   0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x40, 
   0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 
   0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 
   0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x37, 0x00, 0xC9, 0x36, 0x00, 0xC9, 0x36, 0x01, 
   0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCD, 
   0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 
   0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 
   0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2C, 0x00, 0xD4, 0x2B, 0x01, 0xD4, 
   0x2B, 0x01, 0xD5, 0x2A, 0x01, 0xD5, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x56, 0xA8, 
   0x01, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 
   0xA2, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5E, 0xA0, 
   0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 
   0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x64, 
   0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 
   0x00, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 
   0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6D, 
   0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 
   0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 
   0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 
   0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 
   0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 
   0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 
   0x82, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 
   0x00, 0x7F, 0x7F, 0x00, 0x7F, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 
   0x81, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 
   0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 
   0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 0x76, 0x00, 
   0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 
   0x73, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8F, 0x71, 0x01, 0x8E, 0x70, 
   0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 
   0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 
   0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 
   0x63, 0x00, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x60, 
   0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 
   0x5B, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 
   0x01, 0xA7, 0x58, 0x01, 0xA7, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 
   0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 
   0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4F, 0x01, 
   0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x48, 
   0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x01, 
   0xB9, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBC, 
   0x43, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x40, 
   0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3E, 0x01, 0xC0, 0x3E, 0x00, 
   0xC1, 0x3E, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 
   0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC6, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 
   0x00, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x00, 
   0xCA, 0x36, 0x01, 0xC9, 0x35, 0x00, 0xCA, 0x35, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 
   0x34, 0x01, 0xCC, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x00, 0xCE, 0x31, 
   0x00, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 
   0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2D, 0x00, 0xD2, 0x2D, 0x00, 0xD3, 0x2C, 0x01, 0xD4, 
   0x2B, 0x01, 0xD4, 0x2B, 0x01, 0xD5, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA8, 
   0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 
   0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 
   0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 
   0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 
   0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 0x63, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9B, 0x00, 0x64, 0x9A, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 
   0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 
   0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 
   0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 
   0x72, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 
   0x8B, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 
   0x01, 0x77, 0x89, 0x01, 0x77, 0x87, 0x01, 0x77, 0x87, 0x01, 0x78, 0x86, 0x00, 0x78, 0x86, 0x01, 
   0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 
   0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 
   0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 
   0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 
   0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 
   0x01, 0x86, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x01, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 
   0x74, 0x01, 0x8C, 0x72, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 
   0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 
   0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 
   0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x00, 0x96, 0x69, 
   0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 
   0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x00, 0x9E, 0x61, 
   0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 
   0xA1, 0x5F, 0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 
   0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x56, 0x01, 
   0xA9, 0x57, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 
   0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 
   0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB1, 0x4F, 0x00, 
   0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 
   0x4C, 0x00, 0xB4, 0x4C, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 
   0x01, 0xB6, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 
   0xB9, 0x46, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x00, 0xBB, 
   0x44, 0x00, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 
   0x00, 0xBE, 0x41, 0x00, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 
   0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x00, 0xC4, 
   0x3C, 0x00, 0xC4, 0x3C, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 
   0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 
   0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 
   0x33, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 
   0x01, 0xCF, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD0, 0x2F, 0x01, 
   0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0x2D, 0x00, 0xD3, 
   0x2C, 0x01, 0xD4, 0x2B, 0x01, 0xD4, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 
   0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 
   0x58, 0xA6, 0x01, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 
   0xA3, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 
   0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 
   0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x63, 
   0x9B, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 
   0x71, 0x8F, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 
   0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 
   0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 
   0x79, 0x87, 0x00, 0x79, 0x85, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 
   0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 
   0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 
   0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 
   0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x7A, 
   0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 
   0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 
   0x74, 0x00, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x00, 0x8F, 0x71, 0x00, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 
   0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 
   0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x69, 
   0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 
   0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 
   0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x61, 
   0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x00, 
   0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 
   0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 
   0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 
   0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x51, 
   0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 
   0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 
   0x00, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 
   0xB8, 0x46, 0x00, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x44, 0x01, 0xBB, 
   0x45, 0x00, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x42, 
   0x00, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 
   0xC1, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 
   0x3C, 0x00, 0xC3, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC4, 0x3B, 0x01, 0xC6, 0x3A, 
   0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x00, 
   0xC8, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 
   0x34, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCD, 0x32, 
   0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x00, 
   0xD0, 0x2F, 0x00, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD3, 0x2D, 0x00, 0xD3, 
   0x2D, 0x01, 0xD4, 0x2C, 0x01, 0xD3, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xA9, 
   0x01, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x00, 
   0x59, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5E, 0xA2, 
   0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 
   0x60, 0x9F, 0x01, 0x60, 0x9E, 0x01, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 
   0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 
   0x01, 0x66, 0x9A, 0x01, 0x66, 0x98, 0x01, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 
   0x68, 0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 
   0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 
   0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x6F, 0x8F, 0x00, 
   0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 
   0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x75, 0x8A, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x84, 0x00, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 
   0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 
   0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 
   0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 
   0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 
   0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 
   0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 
   0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 
   0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x66, 0x01, 0x9B, 
   0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 
   0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x00, 
   0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 
   0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 
   0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 
   0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 
   0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 
   0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 0x00, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 
   0x4C, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 
   0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x00, 0xBA, 
   0x44, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 
   0x00, 0xBE, 0x41, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x3F, 0x01, 
   0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3D, 0x01, 0xC2, 0x3E, 0x00, 0xC3, 
   0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 
   0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 
   0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC8, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 
   0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 
   0x01, 0xCD, 0x32, 0x00, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x01, 
   0xD0, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 0x2E, 0x01, 0xD2, 
   0x2D, 0x01, 0xD3, 0x2C, 0x01, 0xD3, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 
   0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 
   0x57, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 
   0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 
   0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 
   0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 
   0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 
   0x94, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 
   0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x00, 0x70, 0x8F, 0x00, 
   0x6F, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8B, 
   0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 
   0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 
   0x00, 0x7E, 0x81, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 
   0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x82, 
   0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 
   0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 
   0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 
   0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x73, 
   0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8F, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 
   0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 
   0x01, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 
   0x01, 0x9D, 0x63, 0x01, 0x9E, 0x62, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 
   0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 
   0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 
   0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 
   0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xAA, 
   0x55, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x55, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAD, 0x53, 
   0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x00, 
   0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 
   0x4D, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 
   0x01, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x48, 0x01, 
   0xB7, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 
   0x46, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 
   0x01, 0xBC, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 
   0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 
   0x3D, 0x01, 0xC2, 0x3C, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 
   0x00, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x00, 0xC7, 0x39, 0x00, 
   0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 
   0x35, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCC, 0x33, 
   0x00, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 
   0xCF, 0x30, 0x00, 0xCF, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2D, 0x01, 0xD3, 0x2D, 0x01, 0xD3, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 
   0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 
   0x58, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x5A, 
   0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 
   0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 
   0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 
   0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 
   0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x66, 0x98, 0x01, 
   0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 
   0x95, 0x00, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 
   0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 
   0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 
   0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8A, 
   0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 
   0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x79, 
   0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 
   0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 
   0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 
   0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 
   0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 
   0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 
   0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x00, 
   0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 
   0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 
   0x97, 0x68, 0x00, 0x97, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 
   0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 
   0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 
   0x9F, 0x61, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 
   0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 
   0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xAA, 
   0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 
   0x01, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 
   0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB4, 0x4C, 
   0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x01, 
   0xB7, 0x49, 0x01, 0xB7, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xBA, 
   0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x44, 
   0x00, 0xBC, 0x43, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x41, 0x01, 
   0xBE, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 
   0x3D, 0x01, 0xC2, 0x3E, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 
   0x00, 0xC5, 0x3A, 0x01, 0xC4, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 
   0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 
   0x35, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 
   0x01, 0xCC, 0x33, 0x00, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 
   0xCF, 0x30, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0x2E, 0x01, 0xD2, 
   0x2E, 0x01, 0xD2, 0x2E, 0x00, 0xD3, 0xAC, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 
   0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x57, 0xA8, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x00, 0x59, 
   0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 
   0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 
   0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x01, 0x64, 0x9B, 
   0x00, 0x65, 0x9B, 0x01, 0x65, 0x9B, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 
   0x66, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 
   0x95, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x94, 
   0x00, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 
   0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 
   0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x73, 0x8C, 
   0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 
   0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 
   0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 
   0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x82, 
   0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 
   0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x01, 0x87, 0x79, 0x01, 
   0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 
   0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 
   0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 
   0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 
   0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x01, 0x93, 0x6C, 
   0x00, 0x95, 0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 
   0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x00, 0x99, 
   0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 
   0x00, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 
   0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 
   0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 
   0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 
   0xA6, 0x58, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x00, 0xA9, 
   0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 
   0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x52, 0x01, 
   0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 
   0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 
   0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB6, 0x4A, 0x00, 
   0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 
   0x47, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x45, 0x00, 0xBC, 0x44, 
   0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 
   0xBE, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 
   0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 
   0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC8, 
   0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 
   0x01, 0xCC, 0x34, 0x00, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x31, 0x01, 
   0xCE, 0x31, 0x01, 0xCF, 0x30, 0x01, 0xCF, 0x30, 0x00, 0xD0, 0x2F, 0x01, 0xD1, 0x2F, 0x00, 0xD1, 
   0x2E, 0x00, 0xD2, 0x2E, 0x00, 0xD2, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 
   0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 
   0x56, 0xA9, 0x01, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 
   0xA6, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5D, 0xA1, 0x01, 
   0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 
   0x01, 0x64, 0x9B, 0x01, 0x65, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 
   0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 
   0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 
   0x01, 0x6B, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 
   0x6E, 0x90, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x90, 0x01, 0x70, 0x8E, 0x01, 0x70, 
   0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 
   0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x75, 0x89, 0x00, 
   0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 
   0x86, 0x01, 0x79, 0x85, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 
   0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7D, 0x81, 0x00, 
   0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 
   0x7E, 0x00, 0x82, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 
   0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 
   0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 
   0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 
   0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 
   0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 
   0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x94, 0x6C, 
   0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 
   0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 
   0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 
   0x01, 0x9B, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 
   0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 
   0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 
   0x00, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 
   0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 
   0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x55, 
   0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 
   0xAE, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 
   0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 
   0xB6, 0x49, 0x00, 0xB6, 0x48, 0x00, 0xB6, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 
   0x47, 0x01, 0xB9, 0x47, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 
   0x00, 0xBC, 0x44, 0x00, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x00, 0xBD, 0x42, 0x01, 
   0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x3F, 0x00, 0xC0, 0x40, 0x01, 0xC0, 
   0x3F, 0x00, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 
   0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 
   0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC8, 0x38, 0x01, 0xC9, 
   0x37, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x35, 
   0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x00, 
   0xCE, 0x32, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0x30, 0x00, 0xD0, 0x30, 0x01, 0xD0, 0x30, 0x01, 0xD0, 
   0x2F, 0x01, 0xD1, 0x2F, 0x01, 0xD1, 0xAD, 0x01, 0x51, 0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAC, 
   0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 
   0x55, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 
   0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9F, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x61, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 
   0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 
   0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 
   0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x01, 
   0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 
   0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 
   0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 
   0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 
   0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 
   0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x81, 
   0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 
   0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 
   0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 
   0x77, 0x00, 0x89, 0x77, 0x01, 0x8A, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 
   0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 
   0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 
   0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 
   0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 
   0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 
   0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 
   0x01, 0x9B, 0x65, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 
   0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 
   0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 
   0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 
   0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 
   0x57, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 
   0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 
   0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x00, 0xAE, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB0, 
   0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4D, 
   0x01, 0xB2, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 
   0xB6, 0x4A, 0x00, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x47, 0x01, 0xB8, 
   0x47, 0x00, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 
   0x00, 0xBB, 0x44, 0x01, 0xBB, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xBF, 
   0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 
   0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 
   0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 
   0x37, 0x00, 0xC8, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 
   0x01, 0xCA, 0x34, 0x01, 0xCC, 0x34, 0x00, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 
   0xCE, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xD0, 0x30, 0x00, 0xD0, 
   0x30, 0x00, 0xD0, 0x30, 0x01, 0xD1, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x51, 0xAD, 0x00, 0x53, 0xAD, 
   0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 
   0xA8, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 
   0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA3, 0x00, 
   0x5D, 0xA1, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5E, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x5F, 
   0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x00, 0x62, 0x9E, 0x01, 0x63, 0x9D, 
   0x01, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 
   0x65, 0x99, 0x00, 0x66, 0x9A, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 
   0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 
   0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 
   0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 
   0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 
   0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 
   0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 
   0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 
   0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7E, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 
   0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 
   0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 
   0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 
   0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 
   0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 
   0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x92, 0x6D, 
   0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x97, 
   0x68, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 
   0x00, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 
   0x9D, 0x63, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 
   0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 
   0x00, 0xA2, 0x5C, 0x00, 0xA3, 0x5D, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA5, 0x5A, 0x00, 
   0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA7, 
   0x57, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x55, 0x01, 0xAA, 0x55, 
   0x01, 0xAA, 0x54, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAD, 0x53, 0x00, 
   0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAD, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xAF, 
   0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 
   0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x01, 
   0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB8, 
   0x47, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x45, 
   0x01, 0xBA, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 
   0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBD, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 
   0x3F, 0x01, 0xBF, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 
   0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 
   0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 
   0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 
   0x01, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 0xCC, 0x34, 0x01, 0xCB, 0x33, 0x00, 0xCC, 0x33, 0x01, 
   0xCC, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x31, 0x01, 0xCE, 0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 
   0x30, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 
   0x00, 0x53, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 
   0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x57, 
   0xA7, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 
   0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 
   0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 
   0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 
   0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x95, 0x00, 0x69, 0x95, 
   0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 
   0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 
   0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 
   0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x01, 
   0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x78, 
   0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 
   0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x82, 0x01, 
   0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x80, 
   0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 
   0x01, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x01, 0x85, 0x7B, 0x00, 
   0x84, 0x7A, 0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x88, 
   0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 
   0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 
   0x8D, 0x73, 0x01, 0x8E, 0x72, 0x01, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 
   0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 
   0x01, 0x93, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 
   0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 
   0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 
   0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 
   0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 
   0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 
   0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x00, 
   0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 
   0x59, 0x00, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 
   0x01, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x01, 
   0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x50, 0x01, 0xAF, 
   0x51, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 
   0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 
   0x49, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 
   0x01, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x43, 0x01, 0xBC, 0x44, 0x01, 
   0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 
   0x40, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 
   0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3C, 0x01, 
   0xC5, 0x3B, 0x00, 0xC5, 0x3B, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC6, 0x39, 0x01, 0xC7, 
   0x39, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x36, 0x01, 0xC9, 0x36, 
   0x01, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 
   0xCD, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0x32, 0x01, 0xCE, 0x32, 0x01, 0xCF, 0x30, 0x01, 0xCF, 
   0x30, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0xAF, 0x00, 0x51, 0xAF, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAD, 
   0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 
   0x55, 0xAA, 0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 
   0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 
   0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 
   0xA0, 0x01, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 
   0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x64, 0x9C, 0x01, 0x64, 0x9C, 0x00, 
   0x64, 0x9A, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x67, 
   0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x96, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 
   0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x6F, 
   0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 
   0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 
   0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x77, 0x89, 0x00, 0x76, 
   0x89, 0x00, 0x78, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x00, 0x79, 0x86, 
   0x01, 0x79, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 
   0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 
   0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 
   0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 
   0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 
   0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 
   0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 
   0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 
   0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 
   0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 
   0x94, 0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 
   0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x9A, 0x66, 0x00, 0x9B, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 
   0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 
   0x60, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 
   0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 
   0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 
   0x58, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 
   0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 
   0xAC, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 
   0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xAF, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 
   0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x01, 
   0xB4, 0x4C, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x00, 0xB6, 
   0x49, 0x01, 0xB7, 0x49, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 
   0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBC, 0x42, 0x00, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 
   0x41, 0x01, 0xBF, 0x41, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 
   0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 
   0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 
   0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x36, 
   0x01, 0xC9, 0x36, 0x01, 0xC9, 0x35, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x01, 
   0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0x32, 0x01, 0xCD, 0x31, 0x01, 0xCE, 
   0x31, 0x00, 0xCF, 0x30, 0x01, 0xD0, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAF, 0x00, 0x51, 0xAE, 
   0x00, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 
   0x54, 0xAB, 0x01, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA8, 0x00, 0x56, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 
   0x5B, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x60, 0x9E, 
   0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x01, 
   0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 
   0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x97, 0x01, 0x68, 0x97, 
   0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 
   0x6C, 0x94, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6E, 
   0x90, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8F, 
   0x00, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 
   0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x77, 
   0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 
   0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x83, 0x01, 
   0x7C, 0x84, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 
   0x00, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7C, 0x00, 0x85, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 
   0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 
   0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8C, 0x74, 0x00, 
   0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8F, 
   0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 
   0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 
   0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x01, 0x96, 
   0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 
   0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 
   0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 
   0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 
   0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x56, 
   0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x00, 0xAB, 0x54, 0x00, 
   0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 
   0x51, 0x00, 0xAE, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 
   0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 
   0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 
   0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 
   0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBE, 
   0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x3F, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x01, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 
   0x39, 0x00, 0xC7, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 
   0x00, 0xC9, 0x37, 0x01, 0xC9, 0x35, 0x01, 0xCA, 0x36, 0x00, 0xCA, 0x34, 0x01, 0xCB, 0x34, 0x01, 
   0xCC, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x00, 0xCD, 0x32, 0x01, 0xCE, 
   0x31, 0x01, 0xCF, 0x31, 0x01, 0xCF, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x51, 0xAF, 
   0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 
   0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x01, 0x55, 
   0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA7, 
   0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 
   0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 
   0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x00, 0x62, 0x9C, 0x00, 
   0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x01, 0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 
   0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x01, 0x6A, 0x94, 0x00, 
   0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 
   0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 
   0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 
   0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 
   0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 
   0x7C, 0x83, 0x01, 0x7C, 0x84, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 
   0x81, 0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7E, 
   0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 
   0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 
   0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 
   0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 
   0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x91, 0x6F, 
   0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 
   0x94, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x95, 
   0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 
   0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 
   0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 
   0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 
   0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 
   0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 
   0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 
   0x01, 0xA8, 0x56, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 
   0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 
   0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 
   0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x00, 0xB6, 
   0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x48, 
   0x01, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 
   0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 
   0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 
   0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3A, 0x00, 0xC5, 
   0x3A, 0x00, 0xC5, 0x39, 0x01, 0xC6, 0x39, 0x00, 0xC7, 0x38, 0x00, 0xC7, 0x38, 0x01, 0xC8, 0x37, 
   0x00, 0xC8, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 0x35, 0x01, 
   0xCB, 0x34, 0x01, 0xCC, 0x34, 0x01, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 0x33, 0x01, 0xCE, 
   0x32, 0x00, 0xCD, 0x32, 0x01, 0xCE, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAE, 
   0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAD, 0x00, 
   0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 
   0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA5, 0x01, 0x5B, 0xA5, 0x00, 
   0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 
   0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 
   0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 
   0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x66, 
   0x9A, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 
   0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 
   0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6E, 
   0x91, 0x00, 0x6D, 0x92, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 
   0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 
   0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x76, 
   0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 
   0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 
   0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7C, 0x82, 0x00, 0x7D, 
   0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 
   0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 
   0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 
   0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x86, 0x78, 0x00, 0x88, 0x78, 0x00, 0x87, 0x77, 
   0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 
   0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x00, 0x8D, 
   0x71, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 
   0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 
   0x92, 0x6D, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 
   0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x67, 
   0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 
   0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 
   0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0xA0, 0x60, 
   0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 0xA3, 0x5D, 0x00, 
   0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 
   0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x57, 
   0x00, 0xA8, 0x58, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x55, 0x00, 
   0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 
   0x52, 0x01, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xAF, 0x50, 
   0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 
   0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB4, 
   0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x47, 
   0x00, 0xB8, 0x47, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 
   0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 
   0x42, 0x00, 0xBD, 0x41, 0x00, 0xBD, 0x42, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x41, 0x01, 0xC0, 0x40, 
   0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 
   0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3A, 0x00, 0xC5, 
   0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC8, 0x38, 
   0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC8, 0x36, 0x01, 0xCA, 0x36, 0x00, 0xCA, 0x36, 0x01, 
   0xCB, 0x35, 0x00, 0xCB, 0x34, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 0x33, 0x01, 0xCD, 
   0x33, 0x01, 0xCD, 0x32, 0x00, 0xCE, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 
   0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x53, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 
   0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 
   0x00, 0x57, 0xA7, 0x01, 0x59, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5D, 
   0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 
   0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 
   0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 
   0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x97, 
   0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 
   0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x94, 0x01, 0x6D, 0x93, 0x00, 0x6C, 
   0x92, 0x01, 0x6E, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 
   0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 
   0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 
   0x8B, 0x00, 0x76, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x77, 0x89, 0x01, 0x76, 0x88, 0x00, 0x78, 0x88, 
   0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 
   0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7C, 
   0x82, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 
   0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 
   0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 
   0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 
   0x00, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 
   0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8D, 
   0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 
   0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 
   0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 
   0x6A, 0x01, 0x96, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 
   0x00, 0x97, 0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 
   0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 
   0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 
   0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 
   0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x59, 
   0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 
   0xAA, 0x56, 0x00, 0xAA, 0x54, 0x00, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAC, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAE, 0x50, 0x00, 0xAF, 0x50, 
   0x01, 0xAF, 0x4F, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 
   0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 
   0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 
   0x00, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x00, 
   0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x44, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBD, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x41, 
   0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3C, 0x00, 0xC4, 0x3B, 0x01, 0xC4, 
   0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 
   0x00, 0xC8, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x01, 
   0xCA, 0x35, 0x01, 0xCA, 0x34, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x00, 0xCC, 0x33, 0x01, 0xCC, 
   0x33, 0x01, 0xCD, 0x33, 0x01, 0xCD, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 
   0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 
   0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA8, 
   0x00, 0x58, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5D, 
   0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 
   0x61, 0x9E, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x67, 0x99, 0x01, 0x66, 0x98, 
   0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x95, 0x00, 
   0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6D, 
   0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x90, 
   0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 
   0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 
   0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 
   0x00, 0x78, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 
   0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7B, 0x83, 0x00, 0x7D, 
   0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7E, 0x81, 
   0x01, 0x80, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 
   0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x85, 
   0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 
   0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 
   0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 
   0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 
   0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 
   0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 
   0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x68, 
   0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 
   0x9A, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 
   0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 
   0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x58, 
   0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 
   0x01, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 
   0xB2, 0x4D, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 
   0x4C, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 
   0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x00, 
   0xB9, 0x45, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 
   0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 
   0x00, 0xBF, 0x41, 0x01, 0xBF, 0x3F, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 
   0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 
   0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x39, 
   0x00, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC9, 0x37, 0x01, 0xC9, 0x36, 0x01, 
   0xC9, 0x35, 0x01, 0xC9, 0x36, 0x01, 0xCB, 0x35, 0x00, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x00, 0xCC, 
   0x34, 0x01, 0xCC, 0x32, 0x01, 0xCD, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 
   0x00, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAE, 0x00, 
   0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x53, 
   0xAB, 0x01, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA8, 
   0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 
   0x59, 0xA6, 0x01, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 
   0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 
   0x61, 0x9D, 0x00, 0x62, 0x9E, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 
   0x9B, 0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 
   0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x96, 0x00, 
   0x69, 0x95, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 
   0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x93, 0x00, 0x6E, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6F, 0x91, 
   0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 
   0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 
   0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 
   0x79, 0x85, 0x00, 0x79, 0x86, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 
   0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7E, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 
   0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 
   0x82, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x83, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 
   0x7C, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x87, 0x79, 
   0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 
   0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8B, 
   0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 
   0x01, 0x8F, 0x71, 0x00, 0x90, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 
   0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 
   0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 
   0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 
   0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 
   0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 
   0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA4, 
   0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA6, 0x5A, 
   0x01, 0xA7, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 
   0xA9, 0x56, 0x00, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAB, 
   0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x52, 
   0x00, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x01, 0xB6, 0x49, 
   0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 
   0xB8, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 
   0x43, 0x01, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x41, 
   0x01, 0xBE, 0x40, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3F, 0x01, 
   0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 0x01, 0xC3, 0x3D, 0x00, 0xC3, 
   0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 
   0x01, 0xC6, 0x39, 0x00, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x38, 0x01, 0xC8, 0x37, 0x01, 
   0xC9, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0x36, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0x34, 0x01, 0xCB, 
   0x34, 0x00, 0xCB, 0x34, 0x01, 0xCD, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 
   0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 
   0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 
   0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 
   0x01, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x57, 0xA7, 0x01, 0x59, 0xA7, 0x01, 
   0x58, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 
   0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 
   0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 
   0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 
   0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x69, 0x97, 0x00, 
   0x68, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 
   0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 
   0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x01, 
   0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 
   0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 
   0x01, 0x76, 0x88, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 
   0x78, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 
   0x84, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 
   0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 
   0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 
   0x01, 0x86, 0x78, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 
   0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 
   0x74, 0x01, 0x8B, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 
   0x00, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 
   0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x00, 0x93, 
   0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 
   0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 
   0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 
   0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 
   0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x01, 
   0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 
   0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 
   0x00, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 
   0xA9, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x55, 0x00, 0xAA, 0x56, 0x00, 0xAB, 0x55, 0x01, 0xAB, 
   0x54, 0x00, 0xAC, 0x54, 0x01, 0xAB, 0x53, 0x00, 0xAC, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 
   0x01, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 
   0x4D, 0x00, 0xB3, 0x4B, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 
   0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 
   0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBB, 0x44, 0x01, 0xBB, 
   0x45, 0x00, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBD, 0x41, 
   0x00, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 
   0xC1, 0x3F, 0x00, 0xC1, 0x3E, 0x00, 0xC1, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3C, 0x01, 0xC3, 
   0x3D, 0x01, 0xC4, 0x3B, 0x01, 0xC3, 0x3C, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 
   0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC6, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x00, 
   0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xCA, 0x36, 0x00, 0xCA, 0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 
   0x34, 0x00, 0xCB, 0x34, 0x00, 0xCC, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 
   0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x01, 
   0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 
   0xAC, 0x01, 0x54, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 
   0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA6, 0x01, 0x58, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 
   0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 
   0x9C, 0x00, 0x64, 0x9B, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 
   0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x98, 0x00, 
   0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 
   0x95, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6E, 0x92, 
   0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x6F, 0x8F, 0x00, 
   0x70, 0x8E, 0x00, 0x70, 0x8E, 0x00, 0x72, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 
   0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 
   0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 
   0x84, 0x01, 0x7C, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x83, 0x01, 0x7E, 0x82, 
   0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 
   0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 
   0x7C, 0x00, 0x84, 0x7C, 0x01, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 
   0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x88, 0x78, 0x01, 0x87, 0x77, 0x00, 
   0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 
   0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 
   0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 
   0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 
   0x6C, 0x00, 0x93, 0x6D, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 
   0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 
   0x64, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 
   0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x60, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 
   0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 
   0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 
   0x00, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 
   0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 
   0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x52, 0x01, 0xAD, 0x52, 
   0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xB0, 0x50, 0x01, 
   0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 
   0x4D, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 
   0x01, 0xB6, 0x49, 0x01, 0xB6, 0x4A, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 
   0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 
   0x45, 0x00, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 
   0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xC0, 0x40, 0x01, 
   0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x00, 0xC1, 0x3E, 0x00, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 
   0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 
   0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 
   0xC8, 0x38, 0x01, 0xC8, 0x37, 0x00, 0xC9, 0x37, 0x00, 0xC9, 0x36, 0x00, 0xCA, 0x35, 0x01, 0xCA, 
   0x35, 0x01, 0xCA, 0x34, 0x01, 0xCC, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 
   0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 
   0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 
   0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 
   0x01, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 
   0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 
   0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 
   0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 
   0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 
   0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 
   0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x97, 0x01, 
   0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 
   0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 
   0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 
   0x6F, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x70, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 
   0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 
   0x00, 0x76, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 
   0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 
   0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 
   0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 
   0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 
   0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 
   0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 
   0x75, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 
   0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 
   0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 
   0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6B, 
   0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 
   0x97, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 
   0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9C, 0x64, 0x01, 0x9D, 0x63, 
   0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 
   0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 
   0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 
   0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 
   0xA8, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 
   0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x53, 
   0x01, 0xAD, 0x52, 0x00, 0xAD, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 
   0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB1, 
   0x4D, 0x00, 0xB2, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 
   0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 
   0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 
   0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBD, 0x43, 
   0x01, 0xBC, 0x42, 0x00, 0xBD, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 
   0xC0, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3D, 0x00, 0xC1, 
   0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 
   0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x01, 
   0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC9, 0x37, 0x01, 0xC8, 0x36, 0x01, 0xC9, 0x36, 0x01, 0xCA, 
   0x35, 0x01, 0xCB, 0x35, 0x01, 0xCB, 0xB4, 0x01, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 
   0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 
   0x4F, 0xAF, 0x00, 0x4F, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x50, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x51, 
   0xAD, 0x00, 0x53, 0xAC, 0x01, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 
   0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 
   0x58, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 
   0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 
   0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 
   0x9D, 0x01, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9C, 0x01, 0x64, 0x9B, 
   0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 
   0x68, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 
   0x96, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 
   0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x00, 
   0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 
   0x8D, 0x01, 0x72, 0x8C, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8A, 
   0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 
   0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 
   0x86, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 
   0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 
   0x80, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x82, 
   0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x85, 0x7B, 
   0x00, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 
   0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x8A, 0x75, 0x00, 0x8A, 
   0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 
   0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 
   0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x92, 
   0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 
   0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 
   0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 
   0x00, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 
   0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 
   0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 
   0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x58, 0x00, 
   0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 
   0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 
   0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 
   0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 
   0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 
   0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xB9, 
   0x46, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 
   0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBF, 0x41, 0x01, 
   0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC1, 0x3E, 0x00, 0xC2, 
   0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3B, 
   0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x00, 
   0xC7, 0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0x37, 0x01, 0xC9, 0x37, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x35, 0x01, 0xCA, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 
   0x01, 0x4C, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 
   0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 
   0xAE, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 
   0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA8, 0x00, 
   0x57, 0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 
   0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5C, 0xA4, 
   0x01, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 
   0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 
   0x00, 0x65, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 
   0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 0x01, 0x68, 0x96, 0x00, 0x69, 
   0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 
   0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x01, 
   0x6E, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 
   0x8E, 0x01, 0x72, 0x8E, 0x00, 0x73, 0x8C, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 
   0x00, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x77, 0x89, 0x01, 
   0x76, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 
   0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 
   0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 
   0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7C, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 
   0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 
   0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 
   0x75, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 
   0x01, 0x8D, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 
   0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 
   0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 
   0x01, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 
   0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x97, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 
   0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 
   0x01, 0x9C, 0x64, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 
   0x9E, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 
   0x5E, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5B, 
   0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 
   0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xA9, 
   0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 
   0x01, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x52, 0x00, 
   0xAF, 0x50, 0x01, 0xAF, 0x51, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 
   0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 
   0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 
   0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xB9, 
   0x47, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 
   0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 
   0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 
   0x3F, 0x00, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3C, 
   0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x00, 0xC5, 0x3A, 0x00, 0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 
   0xC7, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC7, 0x37, 0x00, 0xC8, 0x37, 0x01, 0xC9, 
   0x36, 0x01, 0xCA, 0x36, 0x01, 0xCA, 0xB5, 0x01, 0x4B, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 
   0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 
   0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAB, 
   0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 
   0x56, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 
   0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA3, 
   0x01, 0x5B, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5D, 0xA1, 0x00, 
   0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x60, 
   0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 
   0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x65, 0x99, 0x01, 
   0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 
   0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 
   0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 
   0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x70, 
   0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 
   0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 
   0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x78, 0x87, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 
   0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 
   0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 
   0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x80, 
   0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 
   0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 
   0x86, 0x79, 0x01, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 
   0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 
   0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 
   0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 
   0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 
   0x01, 0x94, 0x6C, 0x01, 0x95, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x01, 
   0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 
   0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 
   0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 
   0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x60, 0x00, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 
   0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 
   0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 
   0x56, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 
   0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x52, 0x00, 0xAD, 0x53, 0x00, 0xAE, 0x52, 0x00, 
   0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 
   0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 
   0xB6, 0x4A, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 
   0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 
   0x00, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xC0, 0x40, 0x00, 0xC0, 0x40, 0x01, 0xC0, 
   0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x01, 
   0xC6, 0x39, 0x00, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0x37, 0x01, 0xC8, 
   0x37, 0x01, 0xC9, 0x37, 0x01, 0xCA, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB2, 0x01, 
   0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAF, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x01, 0x53, 0xAC, 
   0x01, 0x54, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x01, 0x57, 0xA7, 0x01, 0x59, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5A, 0xA4, 
   0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 
   0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x5F, 0x9F, 0x00, 0x60, 
   0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9D, 0x01, 0x62, 0x9C, 
   0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 
   0x66, 0x99, 0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 
   0x6D, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x00, 0x70, 
   0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 
   0x00, 0x73, 0x8B, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8A, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 
   0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 
   0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x85, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 
   0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 
   0x00, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 
   0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 
   0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 
   0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 
   0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x91, 
   0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 
   0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 
   0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x67, 0x00, 0x98, 
   0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 
   0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 
   0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 
   0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 
   0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 
   0xA5, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA8, 0x58, 0x00, 0xA8, 
   0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 
   0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x00, 
   0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4D, 0x01, 0xB3, 0x4C, 
   0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 
   0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x48, 0x01, 0xB7, 0x49, 0x00, 0xB7, 0x47, 0x00, 0xB8, 
   0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 
   0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0x44, 0x01, 0xBD, 0x43, 0x00, 0xBD, 0x42, 0x01, 
   0xBE, 0x42, 0x01, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x3F, 0x01, 0xC0, 
   0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x00, 0xC2, 0x3E, 0x00, 0xC3, 0x3D, 
   0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x00, 0xC4, 0x3C, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 
   0xC5, 0x3A, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x39, 0x00, 0xC7, 0x39, 0x01, 0xC7, 0x38, 0x01, 0xC8, 
   0x37, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 
   0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB2, 0x01, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x01, 
   0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xB0, 0x01, 0x50, 
   0xAF, 0x00, 0x51, 0xAE, 0x01, 0x50, 0xAE, 0x00, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x01, 0x52, 0xAD, 
   0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA9, 0x01, 0x57, 0xA7, 0x00, 0x57, 
   0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 
   0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 
   0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 
   0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 
   0x01, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x01, 0x64, 0x9C, 0x01, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x00, 
   0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 
   0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 
   0x00, 0x6A, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x93, 0x00, 
   0x6D, 0x92, 0x01, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x00, 0x70, 
   0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 
   0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8B, 0x00, 
   0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 
   0x87, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x7A, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7B, 0x85, 
   0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 
   0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x80, 0x80, 0x00, 0x80, 
   0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7C, 
   0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7B, 0x01, 
   0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 
   0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8B, 0x75, 
   0x01, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 
   0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 
   0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 
   0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 
   0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 
   0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x01, 
   0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 
   0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 
   0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 
   0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 
   0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 
   0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 
   0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 
   0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 
   0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 
   0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x49, 0x00, 0xB7, 0x49, 0x00, 0xB7, 
   0x48, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 
   0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x00, 
   0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xBF, 
   0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 
   0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3B, 0x00, 0xC4, 0x3C, 0x00, 0xC5, 0x3B, 0x01, 
   0xC4, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0x38, 0x00, 0xC7, 
   0x37, 0x01, 0xC8, 0x37, 0x01, 0xC8, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB6, 0x00, 0x49, 0xB5, 
   0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 
   0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 
   0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 
   0x01, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x00, 
   0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x01, 0x57, 
   0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x58, 0xA6, 0x01, 0x59, 0xA5, 0x01, 0x59, 0xA5, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x60, 
   0x9F, 0x00, 0x60, 0xA0, 0x00, 0x61, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 
   0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x66, 0x98, 0x00, 0x67, 0x99, 0x00, 0x67, 
   0x98, 0x01, 0x67, 0x97, 0x00, 0x69, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x95, 0x00, 0x69, 0x95, 
   0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 
   0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 
   0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 
   0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 
   0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 
   0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 
   0x00, 0x7B, 0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 
   0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 
   0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 
   0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 
   0x85, 0x7B, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 
   0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 
   0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8D, 0x73, 0x00, 
   0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6E, 
   0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 
   0x94, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x01, 0x96, 0x6A, 0x00, 0x97, 0x69, 0x00, 0x98, 
   0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 
   0x01, 0x9A, 0x66, 0x01, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 
   0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 
   0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 
   0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 
   0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 
   0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 
   0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 
   0xAC, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 
   0x50, 0x00, 0xAF, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 
   0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4C, 0x01, 
   0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 
   0x49, 0x00, 0xB8, 0x47, 0x01, 0xB7, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 
   0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 
   0xBC, 0x43, 0x00, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x00, 0xBF, 
   0x41, 0x00, 0xC0, 0x40, 0x01, 0xC0, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 
   0x00, 0xC2, 0x3E, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 
   0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x00, 0xC6, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC7, 0x39, 0x01, 0xC7, 
   0x38, 0x01, 0xC7, 0x38, 0x01, 0xC8, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x49, 0xB6, 
   0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 
   0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 
   0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAE, 0x00, 0x52, 0xAE, 
   0x00, 0x51, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 0xAB, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 
   0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x56, 
   0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA6, 
   0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 
   0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 
   0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 
   0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 
   0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x65, 0x99, 0x00, 0x67, 0x99, 0x01, 0x67, 
   0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 
   0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 
   0x6C, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 
   0x91, 0x00, 0x6F, 0x8F, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 
   0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 
   0x75, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 
   0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 
   0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 
   0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 
   0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 
   0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 
   0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 
   0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 
   0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 
   0x00, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 
   0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 
   0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x68, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 
   0x00, 0x9A, 0x66, 0x01, 0x9B, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 
   0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 
   0x60, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 
   0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5B, 0x01, 
   0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA7, 
   0x59, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 
   0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 
   0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 
   0x51, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 
   0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 
   0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 
   0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 
   0x01, 0xBA, 0x45, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 0x44, 0x00, 0xBB, 0x44, 0x01, 
   0xBC, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x00, 0xBF, 
   0x41, 0x01, 0xBF, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 
   0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC3, 0x3C, 0x00, 
   0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 
   0x39, 0x01, 0xC6, 0x38, 0x01, 0xC8, 0xB7, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 
   0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x01, 
   0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 
   0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 
   0x00, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAB, 0x01, 
   0x54, 0xAB, 0x01, 0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 
   0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 
   0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 
   0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 
   0x64, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x67, 
   0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 
   0x01, 0x69, 0x95, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 
   0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 
   0x90, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 
   0x01, 0x71, 0x8D, 0x01, 0x71, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 
   0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x8A, 0x00, 0x76, 
   0x89, 0x00, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 
   0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 
   0x7B, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 
   0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 
   0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 
   0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x76, 
   0x00, 0x8A, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 
   0x8C, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x00, 0x8E, 
   0x71, 0x01, 0x8F, 0x71, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 
   0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 
   0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x97, 
   0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x66, 
   0x00, 0x99, 0x67, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x66, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 
   0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 
   0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 
   0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 
   0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5B, 0x01, 0xA6, 0x59, 0x00, 0xA6, 
   0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 
   0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 
   0xAC, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x00, 0xAE, 
   0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4E, 
   0x00, 0xB1, 0x4F, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 
   0xB3, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 
   0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x47, 
   0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 
   0x41, 0x00, 0xBE, 0x40, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 
   0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0x3A, 0x01, 0xC5, 0x3A, 0x01, 0xC6, 
   0x39, 0x01, 0xC6, 0x39, 0x01, 0xC7, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 
   0x01, 0x49, 0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB4, 0x01, 0x4C, 0xB3, 0x01, 0x4D, 0xB3, 0x01, 0x4D, 0xB1, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 
   0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 
   0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x01, 
   0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x55, 
   0xA9, 0x00, 0x57, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 
   0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 
   0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 
   0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 
   0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x65, 
   0x99, 0x01, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 
   0x00, 0x68, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x96, 0x00, 0x6B, 0x95, 0x01, 0x6A, 0x94, 0x01, 
   0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 
   0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 
   0x00, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 
   0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 
   0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7D, 
   0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 
   0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 
   0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 
   0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 
   0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 
   0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x90, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 
   0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6D, 0x01, 
   0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x95, 
   0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 
   0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9D, 
   0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 
   0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 
   0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 
   0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 
   0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAB, 0x56, 0x01, 0xAB, 0x55, 0x00, 
   0xAB, 0x55, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 
   0x51, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x50, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 
   0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 
   0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 
   0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 
   0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 
   0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x00, 0xC3, 0x3D, 0x00, 
   0xC3, 0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0x3B, 0x01, 0xC4, 0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC6, 
   0x3A, 0x01, 0xC6, 0x39, 0x00, 0xC6, 0xB8, 0x01, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 
   0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 
   0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4B, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 
   0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 
   0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAD, 0x00, 
   0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 
   0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 
   0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 
   0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 
   0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x01, 0x60, 0x9F, 
   0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 
   0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 
   0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x66, 0x98, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 
   0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 
   0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 
   0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x70, 0x90, 0x00, 0x6F, 0x8F, 
   0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 
   0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 
   0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 
   0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 
   0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 
   0x81, 0x00, 0x7D, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 
   0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 
   0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 
   0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 
   0x01, 0x88, 0x76, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 
   0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 
   0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x00, 0x8F, 0x71, 0x01, 0x90, 0x70, 0x00, 0x90, 0x70, 
   0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 
   0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 
   0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 
   0x01, 0x99, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 
   0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 
   0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 
   0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 
   0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA8, 0x58, 0x01, 0xA7, 0x58, 
   0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 
   0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 
   0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 
   0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 
   0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x47, 
   0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 
   0xBB, 0x44, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0x42, 0x01, 0xBD, 
   0x43, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 
   0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 
   0xC2, 0x3C, 0x01, 0xC3, 0x3D, 0x01, 0xC4, 0x3C, 0x00, 0xC4, 0x3C, 0x00, 0xC4, 0x3A, 0x01, 0xC5, 
   0x3A, 0x01, 0xC6, 0x3A, 0x01, 0xC6, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 
   0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 
   0x4A, 0xB4, 0x01, 0x4B, 0xB3, 0x01, 0x4C, 0xB4, 0x00, 0x4C, 0xB2, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 
   0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 
   0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 
   0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA8, 
   0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 
   0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 
   0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x00, 
   0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 
   0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 
   0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 
   0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 
   0x92, 0x01, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 
   0x01, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 
   0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 
   0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 
   0x01, 0x78, 0x88, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 
   0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7C, 
   0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 
   0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 
   0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 
   0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x88, 0x78, 
   0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 
   0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 
   0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 
   0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 
   0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 
   0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x68, 0x00, 0x97, 0x67, 
   0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 
   0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 
   0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 
   0x01, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 
   0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 
   0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x55, 0x00, 
   0xAA, 0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xAF, 0x50, 
   0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB2, 0x4D, 0x01, 
   0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 
   0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 
   0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB8, 0x46, 0x00, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x00, 
   0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 
   0x00, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC4, 0x3B, 0x00, 0xC5, 
   0x3B, 0x01, 0xC5, 0x3B, 0x01, 0xC5, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB8, 
   0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x48, 0xB6, 0x01, 0x49, 0xB5, 0x00, 
   0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x01, 0x4D, 
   0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 
   0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x00, 0x53, 0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x55, 
   0xAB, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 
   0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 
   0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 
   0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 
   0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 
   0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 
   0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x01, 
   0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 
   0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 
   0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 
   0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 
   0x8A, 0x00, 0x74, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x76, 0x88, 
   0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 
   0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 
   0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 
   0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x01, 0x84, 
   0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x8A, 0x76, 0x01, 
   0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 
   0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 
   0x6B, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 
   0x01, 0x97, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 
   0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 
   0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 
   0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x00, 0xA4, 
   0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 
   0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x00, 0xAC, 
   0x54, 0x01, 0xAC, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x51, 
   0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4C, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 
   0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB7, 0x49, 
   0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 
   0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x00, 0xBC, 
   0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBE, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 
   0x01, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 
   0xC2, 0x3E, 0x01, 0xC1, 0x3D, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x00, 0xC4, 0x3C, 0x00, 0xC4, 
   0x3C, 0x00, 0xC5, 0x3B, 0x01, 0xC5, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB8, 
   0x01, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 
   0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB2, 0x01, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x01, 0x4E, 0xB0, 0x01, 0x4E, 0xB0, 
   0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 
   0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAD, 0x00, 0x53, 0xAB, 0x01, 0x53, 0xAB, 0x01, 0x54, 
   0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 
   0x00, 0x56, 0xA8, 0x00, 0x58, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x01, 0x58, 0xA6, 0x01, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5D, 0xA1, 0x01, 0x5F, 0xA0, 
   0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 
   0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 
   0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 
   0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 
   0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 
   0x8C, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8B, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 
   0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 
   0x7A, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 
   0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 
   0x7B, 0x01, 0x85, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 
   0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 
   0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8C, 
   0x74, 0x00, 0x8D, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 
   0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9B, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 
   0x00, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 
   0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 
   0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x01, 
   0xA9, 0x56, 0x01, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x55, 0x01, 0xAC, 
   0x54, 0x01, 0xAC, 0x54, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 
   0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 
   0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 
   0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 
   0x44, 0x00, 0xBC, 0x43, 0x00, 0xBC, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x01, 0xBE, 0x41, 
   0x01, 0xBE, 0x40, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 
   0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 0x3D, 0x00, 0xC2, 0x3D, 0x01, 0xC3, 0x3C, 0x01, 0xC3, 
   0x3C, 0x00, 0xC3, 0x3B, 0x01, 0xC4, 0xBB, 0x00, 0x45, 0xB9, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 
   0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x01, 
   0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 
   0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 
   0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x00, 
   0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 
   0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x01, 0x56, 0xA9, 
   0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 
   0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 
   0x01, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 
   0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x63, 
   0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x68, 0x98, 0x00, 0x68, 0x98, 0x00, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x95, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 
   0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x01, 
   0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 
   0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 
   0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 
   0x84, 0x01, 0x7B, 0x84, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 
   0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 
   0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x84, 
   0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 
   0x01, 0x87, 0x78, 0x01, 0x87, 0x79, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 
   0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 
   0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x00, 
   0x90, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 
   0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 
   0x00, 0x97, 0x69, 0x01, 0x96, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 
   0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9B, 
   0x64, 0x00, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 
   0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x60, 0x00, 0xA1, 0x60, 0x00, 
   0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 
   0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x57, 0x00, 0xA8, 0x58, 0x00, 
   0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAB, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAB, 
   0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x52, 
   0x01, 0xAE, 0x52, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 
   0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 
   0xB8, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 
   0x44, 0x00, 0xBB, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x43, 0x00, 0xBE, 0x42, 
   0x00, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x00, 0xC0, 0x40, 0x01, 
   0xC0, 0x3E, 0x01, 0xC1, 0x3F, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 
   0x3C, 0x01, 0xC4, 0x3C, 0x01, 0xC4, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 
   0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 
   0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 
   0xB3, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4C, 0xB2, 0x01, 0x4D, 0xB1, 
   0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 
   0x50, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x52, 
   0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 
   0x01, 0x55, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 
   0x59, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 
   0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 
   0x01, 0x5D, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 
   0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x62, 
   0x9C, 0x01, 0x64, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 
   0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 
   0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x95, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 
   0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 
   0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 
   0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 
   0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 
   0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x00, 0x7C, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 
   0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 
   0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 
   0x7D, 0x00, 0x83, 0x7B, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 
   0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 
   0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 
   0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 
   0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 
   0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 
   0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x96, 0x6A, 
   0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x67, 0x01, 
   0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 
   0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 
   0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 
   0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 
   0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 
   0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x57, 0x00, 
   0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 
   0x55, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 
   0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x4F, 0x00, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 
   0x4C, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x00, 
   0xB8, 0x47, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBB, 
   0x45, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x43, 
   0x00, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBF, 0x41, 0x00, 0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 
   0xC0, 0x40, 0x00, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC2, 
   0x3D, 0x00, 0xC3, 0x3C, 0x01, 0xC4, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 
   0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 
   0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 
   0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 
   0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 
   0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xAA, 
   0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 
   0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 
   0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 
   0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 
   0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 
   0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 
   0x67, 0x97, 0x01, 0x68, 0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x69, 0x95, 0x00, 0x6A, 
   0x95, 0x00, 0x6B, 0x95, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 
   0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 
   0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 
   0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7C, 0x82, 
   0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 
   0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 
   0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 
   0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 
   0x88, 0x78, 0x01, 0x89, 0x76, 0x01, 0x88, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 
   0x75, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 
   0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 
   0x90, 0x70, 0x01, 0x91, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 
   0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 
   0x00, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 
   0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x65, 0x00, 0x9A, 
   0x65, 0x00, 0x9B, 0x65, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 
   0x00, 0x9E, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 
   0xA0, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 
   0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 
   0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 
   0xA7, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x56, 0x01, 0xAA, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xAA, 
   0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 
   0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 
   0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 
   0x4D, 0x01, 0xB2, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB4, 0x4A, 
   0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 
   0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xB9, 0x46, 0x00, 0xBA, 
   0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x43, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x43, 
   0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 0x41, 0x00, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 
   0xC0, 0x3F, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0x3E, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 0x3E, 0x01, 0xC2, 
   0x3D, 0x01, 0xC2, 0x3C, 0x01, 0xC3, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 
   0x00, 0x44, 0xB9, 0x00, 0x46, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 
   0x48, 0xB7, 0x01, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x4A, 
   0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 
   0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 
   0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 
   0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 
   0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x01, 0x55, 0xA8, 0x00, 0x56, 0xA8, 0x00, 0x56, 0xA8, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 
   0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 
   0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 
   0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 
   0x9E, 0x01, 0x62, 0x9C, 0x00, 0x62, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 
   0x01, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x67, 0x99, 0x01, 0x67, 0x98, 0x01, 
   0x68, 0x98, 0x01, 0x67, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 
   0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 
   0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 
   0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8D, 0x01, 0x72, 
   0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 
   0x00, 0x75, 0x8B, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 
   0x78, 0x87, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 
   0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 
   0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x81, 0x00, 
   0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x82, 0x7E, 0x01, 0x82, 
   0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 
   0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 
   0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 
   0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 
   0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x8E, 0x70, 0x01, 
   0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 
   0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 
   0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 
   0x65, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 
   0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 
   0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 
   0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 
   0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 
   0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 
   0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 
   0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 
   0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 
   0xB7, 0x48, 0x00, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xBA, 
   0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 
   0x01, 0xBD, 0x43, 0x00, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x00, 0xBE, 0x42, 0x01, 0xBF, 0x41, 0x01, 
   0xBF, 0x40, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0x3E, 0x01, 0xC1, 
   0x3E, 0x01, 0xC2, 0x3D, 0x01, 0xC3, 0xBC, 0x01, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x01, 0x44, 0xBB, 
   0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x45, 0xB9, 0x01, 0x46, 0xB8, 0x00, 
   0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 
   0xB6, 0x00, 0x49, 0xB4, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 
   0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 
   0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 
   0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 
   0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA9, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 
   0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9E, 0x01, 0x61, 0x9F, 0x01, 0x62, 
   0x9D, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 
   0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 
   0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 
   0x95, 0x01, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 
   0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 
   0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 
   0x8E, 0x00, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x73, 0x8B, 
   0x00, 0x74, 0x8A, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 
   0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 
   0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7B, 0x83, 
   0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 
   0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 
   0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 
   0x00, 0x85, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 
   0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 
   0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x74, 
   0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 
   0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 
   0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 
   0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 
   0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 
   0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 
   0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x00, 0x9E, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 
   0x5F, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 
   0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 
   0x57, 0x00, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 
   0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 
   0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB1, 
   0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 
   0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x49, 0x01, 0xB6, 0x4A, 0x00, 
   0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 
   0x46, 0x00, 0xB9, 0x45, 0x00, 0xBA, 0x45, 0x00, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 
   0x01, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x00, 0xBE, 0x41, 0x01, 
   0xBF, 0x40, 0x01, 0xBF, 0x40, 0x00, 0xC0, 0x3F, 0x01, 0xBF, 0x3F, 0x01, 0xC0, 0x3E, 0x01, 0xC1, 
   0x3E, 0x01, 0xC1, 0x3E, 0x00, 0xC2, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBC, 
   0x00, 0x43, 0xBB, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 
   0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 
   0xB6, 0x01, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 
   0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB1, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 
   0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 
   0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 
   0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 
   0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x01, 0x59, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 
   0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 
   0x9E, 0x01, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9B, 
   0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 
   0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 
   0x96, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6C, 0x94, 
   0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x00, 0x6F, 0x91, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 
   0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8B, 
   0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 
   0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x78, 
   0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 
   0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7D, 0x81, 0x00, 
   0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x80, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x80, 
   0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7B, 
   0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 
   0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 0x00, 0x89, 0x77, 0x01, 0x89, 
   0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8C, 0x74, 
   0x00, 0x8B, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 
   0x8F, 0x70, 0x00, 0x8E, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6F, 0x01, 0x91, 
   0x6F, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6B, 
   0x01, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 
   0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x67, 0x00, 0x98, 0x67, 0x00, 0x98, 
   0x66, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x64, 
   0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 
   0x9E, 0x61, 0x01, 0x9E, 0x60, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 
   0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 
   0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 
   0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 
   0x57, 0x00, 0xA9, 0x57, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 
   0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 
   0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB1, 
   0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4D, 
   0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x01, 
   0xB6, 0x49, 0x01, 0xB6, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 
   0x47, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 
   0x00, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 
   0xBE, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x41, 0x01, 0xBF, 0x3F, 0x01, 0xC0, 0x3F, 0x00, 0xC0, 
   0x3F, 0x01, 0xC0, 0x3F, 0x01, 0xC1, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 
   0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x00, 
   0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 
   0xB7, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 
   0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 
   0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 
   0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x00, 
   0x55, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 
   0x5D, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 
   0x9E, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x61, 0x9D, 0x01, 0x63, 0x9D, 0x00, 0x63, 0x9C, 
   0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 
   0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 
   0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 
   0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 
   0x8E, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 
   0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 
   0x76, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 
   0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7B, 0x85, 0x01, 0x7A, 0x85, 
   0x01, 0x7C, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 
   0x7E, 0x82, 0x00, 0x7E, 0x80, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 
   0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 
   0x01, 0x84, 0x7B, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 
   0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x01, 0x88, 
   0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 
   0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 
   0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x91, 
   0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 
   0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 
   0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 
   0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 
   0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 
   0x9D, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 
   0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 
   0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 
   0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 
   0x01, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 
   0xAE, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB0, 
   0x50, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 
   0x01, 0xB3, 0x4D, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 
   0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 
   0x48, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x44, 
   0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x43, 0x01, 
   0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 0x40, 0x01, 0xC0, 
   0x3F, 0x00, 0xC1, 0x3F, 0x00, 0xC1, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBC, 
   0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 
   0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 
   0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 
   0x01, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 
   0x4E, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xAF, 0x00, 0x4F, 0xAF, 0x01, 0x50, 
   0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 
   0x01, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 
   0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 
   0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5C, 0xA2, 0x01, 
   0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 
   0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 
   0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9B, 0x01, 
   0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x98, 0x01, 0x66, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 
   0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 
   0x00, 0x6A, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 
   0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 
   0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 
   0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 
   0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x87, 0x00, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7B, 0x85, 
   0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x7F, 
   0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 
   0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 
   0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x78, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x77, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 
   0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 
   0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 
   0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 
   0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x94, 0x6A, 0x00, 
   0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 
   0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 
   0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 
   0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 
   0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 
   0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 
   0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 
   0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 
   0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x00, 
   0xAD, 0x53, 0x01, 0xAD, 0x51, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xB0, 
   0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 
   0x01, 0xB3, 0x4C, 0x00, 0xB3, 0x4D, 0x00, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 
   0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB8, 
   0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x45, 0x01, 0xBA, 0x45, 
   0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x00, 
   0xBD, 0x42, 0x00, 0xBE, 0x42, 0x01, 0xBD, 0x41, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0x40, 0x01, 0xC0, 
   0x40, 0x00, 0xC0, 0x3F, 0x00, 0xC1, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBE, 0x01, 0x42, 0xBD, 
   0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 
   0x45, 0xBA, 0x01, 0x46, 0xBA, 0x01, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x47, 
   0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 
   0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 
   0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 
   0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAC, 
   0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 
   0x54, 0xA9, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 
   0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 
   0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 
   0x01, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 
   0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 
   0x98, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 
   0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 
   0x6C, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x91, 0x01, 0x70, 
   0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 
   0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 
   0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 
   0x87, 0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x86, 
   0x00, 0x7A, 0x84, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 
   0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 
   0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 
   0x01, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 
   0x84, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 
   0x78, 0x00, 0x88, 0x78, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 
   0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8D, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x90, 
   0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6D, 
   0x01, 0x93, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 
   0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 
   0x68, 0x01, 0x97, 0x67, 0x00, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9D, 0x63, 0x00, 
   0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 
   0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA2, 0x5E, 0x01, 0xA1, 0x5D, 
   0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 
   0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 
   0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x55, 
   0x01, 0xAA, 0x55, 0x01, 0xAA, 0x54, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 
   0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 
   0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 
   0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB7, 
   0x49, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xBA, 0x46, 
   0x01, 0xBA, 0x45, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x44, 0x00, 0xBC, 0x43, 0x01, 
   0xBC, 0x43, 0x01, 0xBD, 0x42, 0x00, 0xBD, 0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0x41, 0x01, 0xBF, 
   0x41, 0x01, 0xC0, 0x40, 0x01, 0xC0, 0xBF, 0x01, 0x41, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 
   0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 
   0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x01, 0x47, 
   0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB6, 
   0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 
   0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 
   0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 
   0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 
   0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 
   0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 
   0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 
   0x65, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 
   0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 
   0x00, 0x69, 0x96, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 
   0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 
   0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 
   0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x73, 0x8B, 0x01, 
   0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x75, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 
   0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 
   0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 
   0x81, 0x01, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 
   0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 
   0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x86, 
   0x79, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 
   0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 
   0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x92, 0x6D, 
   0x00, 0x91, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 
   0x95, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 
   0x68, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 
   0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 
   0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 
   0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 
   0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 
   0xA4, 0x5B, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x5A, 0x01, 0xA7, 
   0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 
   0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x54, 0x00, 
   0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 
   0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 
   0x01, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 
   0xB4, 0x4B, 0x00, 0xB4, 0x4A, 0x00, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB6, 
   0x49, 0x01, 0xB7, 0x49, 0x00, 0xB8, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xB9, 0x46, 
   0x01, 0xBA, 0x46, 0x00, 0xB9, 0x45, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 
   0xBC, 0x44, 0x01, 0xBC, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 0x42, 0x00, 0xBE, 
   0x41, 0x01, 0xBF, 0x41, 0x00, 0xC0, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBE, 
   0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBC, 0x01, 
   0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x44, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 
   0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB5, 
   0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 
   0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 
   0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 
   0x53, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 
   0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 
   0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 
   0x5B, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 
   0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x5F, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 
   0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 
   0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x66, 
   0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 
   0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 
   0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 
   0x90, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8F, 
   0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 
   0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 
   0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 
   0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 
   0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7E, 0x00, 0x81, 0x7E, 
   0x01, 0x82, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 
   0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 
   0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 
   0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 
   0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 
   0x71, 0x00, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 
   0x01, 0x91, 0x6D, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x01, 
   0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 
   0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 
   0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 
   0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 
   0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 
   0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 
   0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 
   0x01, 0xA9, 0x57, 0x01, 0xA9, 0x55, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 
   0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAE, 0x52, 0x00, 0xAE, 
   0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x00, 0xB0, 0x4E, 
   0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB3, 0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 
   0x4A, 0x00, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x46, 
   0x00, 0xB9, 0x46, 0x00, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x00, 0xBA, 0x45, 0x01, 0xBB, 0x44, 0x01, 
   0xBB, 0x44, 0x01, 0xBC, 0x44, 0x00, 0xBD, 0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0x42, 0x01, 0xBE, 
   0x41, 0x00, 0xBF, 0x41, 0x01, 0xBF, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 
   0x00, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 
   0x43, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x01, 0x45, 0xB9, 0x01, 0x46, 0xBA, 0x00, 0x46, 
   0xB9, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 
   0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 
   0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 
   0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 
   0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x59, 0xA5, 0x01, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 
   0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 
   0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 
   0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 
   0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 
   0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 
   0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 
   0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 
   0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 
   0x73, 0x8B, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x75, 
   0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 
   0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7B, 0x85, 0x00, 0x7A, 0x84, 0x00, 
   0x7B, 0x83, 0x01, 0x7B, 0x84, 0x00, 0x7D, 0x82, 0x00, 0x7C, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7D, 
   0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 
   0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 
   0x79, 0x01, 0x86, 0x78, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 
   0x01, 0x89, 0x77, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 
   0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 
   0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x91, 0x6F, 
   0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 
   0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x69, 0x00, 0x96, 
   0x69, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 
   0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 
   0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 
   0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x60, 0x00, 0xA0, 0x5F, 
   0x00, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 
   0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 
   0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x57, 0x01, 0xA8, 0x57, 
   0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 
   0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x00, 0xAD, 0x52, 0x00, 0xAE, 
   0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 
   0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 
   0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 
   0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x48, 0x00, 0xB8, 0x47, 
   0x00, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x46, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x45, 0x01, 
   0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 0x44, 0x01, 0xBD, 0x43, 0x01, 0xBD, 0x43, 0x01, 0xBE, 
   0x42, 0x01, 0xBE, 0x41, 0x01, 0xBE, 0xC1, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 
   0x00, 0x40, 0xBE, 0x01, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x00, 
   0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x01, 0x45, 
   0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 
   0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 
   0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 
   0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAF, 
   0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 
   0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 
   0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x57, 0xA7, 
   0x01, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 
   0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 
   0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 
   0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9D, 0x00, 
   0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 
   0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 
   0x00, 0x69, 0x96, 0x01, 0x69, 0x97, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 
   0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 
   0x91, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 
   0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 
   0x73, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 
   0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x76, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 
   0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x84, 0x00, 
   0x7A, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 
   0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 
   0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 
   0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 
   0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 
   0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 
   0x8A, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 
   0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 
   0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6C, 0x00, 
   0x92, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 
   0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 
   0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 
   0x9A, 0x65, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 
   0x62, 0x00, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 
   0xA2, 0x5D, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 
   0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 
   0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 
   0xAA, 0x54, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x53, 0x00, 0xAD, 
   0x52, 0x01, 0xAE, 0x52, 0x01, 0xAF, 0x52, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 
   0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 
   0xB3, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 
   0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x48, 
   0x00, 0xB8, 0x47, 0x00, 0xB9, 0x47, 0x00, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x00, 0xBA, 0x46, 0x00, 
   0xBB, 0x45, 0x00, 0xBB, 0x45, 0x00, 0xBC, 0x43, 0x01, 0xBC, 0x43, 0x00, 0xBD, 0x42, 0x00, 0xBD, 
   0x42, 0x00, 0xBD, 0x41, 0x01, 0xBE, 0xC0, 0x00, 0x3F, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 
   0x00, 0x40, 0xBE, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 
   0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x45, 
   0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 
   0x01, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 
   0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 
   0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 
   0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x01, 
   0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x55, 0xAB, 0x01, 0x55, 
   0xAA, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 
   0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 
   0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x01, 0x61, 0x9E, 0x01, 
   0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 
   0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 
   0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 
   0x6B, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 
   0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 
   0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8E, 0x00, 
   0x73, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 
   0x8A, 0x00, 0x76, 0x8A, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 
   0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 
   0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x82, 0x00, 0x7C, 
   0x83, 0x00, 0x7E, 0x81, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 
   0x82, 0x7D, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x84, 
   0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x77, 
   0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 
   0x8B, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 
   0x72, 0x01, 0x8E, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 
   0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 
   0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 
   0x6A, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 
   0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 0x01, 
   0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 
   0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x60, 0x00, 0x9F, 0x60, 
   0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 
   0xA2, 0x5E, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 
   0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x58, 
   0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 
   0xAA, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x54, 0x01, 0xAD, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xAF, 0x50, 
   0x01, 0xAF, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 
   0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 
   0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x46, 0x01, 0xB9, 0x47, 0x00, 0xB9, 0x45, 0x01, 
   0xBA, 0x46, 0x01, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x00, 0xBC, 0x43, 0x00, 0xBC, 0x43, 0x01, 0xBC, 
   0x43, 0x01, 0xBD, 0x42, 0x01, 0xBD, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 
   0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBD, 0x00, 
   0x42, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 
   0xBB, 0x00, 0x44, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 
   0x01, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 
   0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 
   0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 
   0xAB, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 
   0x01, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 
   0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 
   0x00, 0x5F, 0x9F, 0x00, 0x5F, 0xA0, 0x00, 0x61, 0x9F, 0x01, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 
   0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x97, 0x01, 0x69, 0x95, 0x00, 
   0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 
   0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 
   0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x72, 0x8E, 0x01, 
   0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8C, 0x00, 0x75, 
   0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x89, 
   0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 
   0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 
   0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 
   0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 
   0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 
   0x01, 0x88, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 
   0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x01, 0x8B, 0x73, 0x00, 0x8C, 
   0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 
   0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x00, 0x93, 0x6C, 0x00, 0x94, 
   0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x68, 
   0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 
   0x99, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 
   0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 
   0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 0xA4, 
   0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 
   0x01, 0xA8, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x01, 
   0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 
   0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 
   0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 
   0xB2, 0x4E, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4B, 0x00, 0xB5, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x49, 0x00, 0xB6, 0x49, 
   0x00, 0xB7, 0x48, 0x01, 0xB8, 0x48, 0x01, 0xB8, 0x48, 0x00, 0xB9, 0x46, 0x01, 0xB9, 0x47, 0x01, 
   0xBA, 0x45, 0x00, 0xBA, 0x46, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0x44, 0x01, 0xBB, 0x44, 0x01, 0xBC, 
   0x43, 0x00, 0xBC, 0x43, 0x01, 0xBD, 0xC1, 0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 
   0x00, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x01, 0x40, 0xBE, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 
   0x41, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 
   0xBB, 0x00, 0x45, 0xBB, 0x01, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 
   0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x01, 0x4C, 
   0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 
   0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x4F, 0xAF, 0x01, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 
   0x51, 0xAE, 0x00, 0x51, 0xAD, 0x01, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 
   0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 
   0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 
   0x5A, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5F, 0xA1, 
   0x01, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 
   0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x00, 0x67, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 
   0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6C, 0x93, 0x00, 0x6C, 
   0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x90, 
   0x00, 0x6E, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 
   0x72, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 
   0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x88, 
   0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x01, 
   0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 
   0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 
   0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x83, 0x7D, 0x01, 0x82, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 
   0x7B, 0x00, 0x85, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 
   0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x76, 0x01, 0x88, 0x77, 0x01, 
   0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8C, 0x74, 0x01, 0x8C, 
   0x74, 0x00, 0x8D, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 
   0x00, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 
   0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 
   0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 
   0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 
   0x64, 0x00, 0x9D, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9F, 0x61, 
   0x01, 0x9F, 0x61, 0x00, 0xA0, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x00, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 
   0x00, 0xA7, 0x58, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 
   0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x53, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 
   0x00, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 
   0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB7, 0x47, 0x01, 0xB8, 0x48, 0x01, 0xB9, 0x47, 0x01, 
   0xB9, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x00, 0xBB, 0x44, 0x01, 0xBB, 
   0x44, 0x01, 0xBC, 0x43, 0x01, 0xBC, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 
   0x00, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 
   0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x44, 
   0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 
   0x00, 0x46, 0xB9, 0x00, 0x47, 0xB7, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 
   0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB4, 0x00, 0x4C, 
   0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4C, 0xB1, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB0, 
   0x01, 0x4F, 0xB0, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x00, 
   0x51, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 
   0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x00, 0x56, 0xA8, 
   0x01, 0x56, 0xA8, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 
   0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 
   0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 
   0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 
   0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 
   0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x65, 0x99, 
   0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 
   0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 
   0x01, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 
   0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 
   0x8B, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 
   0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 
   0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7C, 
   0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x81, 0x00, 0x7D, 0x81, 
   0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x81, 0x7F, 0x00, 
   0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 
   0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 
   0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 
   0x89, 0x77, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 
   0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 
   0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 
   0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 
   0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 
   0x98, 0x66, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 
   0x64, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x61, 
   0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 
   0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 
   0x5D, 0x00, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 
   0xA8, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x54, 0x01, 0xAB, 
   0x54, 0x01, 0xAC, 0x54, 0x01, 0xAD, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 
   0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 0x00, 0xB5, 0x4A, 
   0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 
   0xB8, 0x47, 0x00, 0xB9, 0x47, 0x01, 0xBA, 0x45, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0x45, 0x00, 0xBB, 
   0x45, 0x01, 0xBC, 0x44, 0x00, 0xBC, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 
   0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBE, 0x01, 0x42, 0xBC, 0x01, 0x43, 0xBD, 0x00, 0x43, 
   0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 0xB9, 
   0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x01, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 
   0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 
   0x51, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAE, 0x00, 0x52, 0xAC, 0x00, 0x52, 0xAC, 0x00, 0x53, 
   0xAC, 0x00, 0x54, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 
   0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 
   0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x01, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 
   0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 
   0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 
   0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 
   0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 
   0x68, 0x96, 0x00, 0x68, 0x96, 0x01, 0x6A, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 
   0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 
   0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 
   0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 
   0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 
   0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 
   0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x00, 
   0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 
   0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 
   0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8A, 
   0x74, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 
   0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x00, 0x8F, 0x71, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x70, 0x01, 
   0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 
   0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 
   0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 
   0x98, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 
   0x64, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 
   0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x00, 
   0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 
   0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 
   0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 
   0xA8, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 
   0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 
   0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 
   0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB3, 
   0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 
   0x01, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 
   0xB8, 0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0x46, 0x01, 0xBA, 0x45, 0x00, 0xBB, 
   0x45, 0x00, 0xBB, 0x45, 0x01, 0xBB, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 
   0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 
   0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 
   0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 
   0x00, 0x46, 0xBA, 0x00, 0x46, 0xB8, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB8, 0x00, 
   0x48, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x01, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 
   0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x53, 
   0xAD, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xA9, 
   0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 
   0x58, 0xA7, 0x01, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 
   0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 
   0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 
   0x60, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 
   0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 
   0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 
   0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 
   0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 
   0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 
   0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 
   0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 
   0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 
   0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 
   0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 
   0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 
   0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 
   0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x73, 
   0x00, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 
   0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 
   0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 
   0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x00, 0x98, 0x68, 0x01, 
   0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 
   0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 
   0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 
   0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 
   0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x00, 
   0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 
   0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 
   0x01, 0xAD, 0x52, 0x01, 0xAD, 0x51, 0x00, 0xAE, 0x51, 0x00, 0xAF, 0x51, 0x01, 0xAF, 0x51, 0x01, 
   0xAF, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4D, 0x00, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 
   0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x00, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0x48, 0x00, 
   0xB7, 0x48, 0x00, 0xB8, 0x47, 0x00, 0xB8, 0x46, 0x01, 0xB9, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x45, 0x01, 0xBA, 0x45, 0x01, 0xBB, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 
   0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 
   0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 
   0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x01, 0x44, 0xBA, 0x00, 0x44, 0xBB, 
   0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 
   0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 
   0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 
   0x01, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 
   0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 
   0xAD, 0x01, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 
   0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 
   0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x01, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 
   0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 
   0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 
   0x9D, 0x00, 0x62, 0x9C, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x63, 0x9B, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 
   0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 
   0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6B, 0x93, 0x01, 0x6C, 0x92, 
   0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x01, 
   0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 
   0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8A, 
   0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 
   0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 
   0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 
   0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 
   0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x81, 
   0x7D, 0x01, 0x83, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 
   0x00, 0x85, 0x7B, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 
   0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 
   0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 
   0x90, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 
   0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x00, 
   0x98, 0x68, 0x00, 0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 
   0x00, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x00, 
   0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA1, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 
   0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 
   0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x01, 
   0xA7, 0x59, 0x00, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x57, 0x00, 0xAA, 
   0x55, 0x00, 0xAB, 0x55, 0x00, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0x53, 
   0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x00, 0xB2, 0x4E, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 
   0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x49, 0x01, 
   0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB8, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x46, 0x01, 0xBA, 
   0x46, 0x01, 0xBA, 0x46, 0x01, 0xBB, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 
   0x01, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 
   0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 
   0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x01, 0x44, 0xBB, 
   0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 
   0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 
   0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 
   0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 
   0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 
   0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 
   0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 
   0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5B, 0xA3, 
   0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 
   0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 
   0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x63, 0x9B, 
   0x01, 0x64, 0x9A, 0x01, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 
   0x66, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x68, 0x96, 0x00, 0x69, 
   0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 
   0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 
   0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8F, 0x00, 0x71, 
   0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8C, 
   0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 
   0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 
   0x86, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 
   0x01, 0x7D, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7E, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 
   0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 
   0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 
   0x00, 0x85, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x87, 0x79, 0x01, 
   0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 
   0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 
   0x00, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 
   0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 
   0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 
   0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 
   0x96, 0x69, 0x01, 0x98, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 
   0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 
   0x00, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x60, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 
   0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA3, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 
   0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 
   0x56, 0x01, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 
   0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 
   0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 
   0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 
   0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 
   0xB7, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x47, 0x01, 0xB9, 0x47, 0x01, 0xB9, 
   0x46, 0x01, 0xB9, 0x45, 0x01, 0xBA, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3C, 0xC4, 
   0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 
   0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 
   0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBC, 
   0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB8, 0x00, 
   0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x49, 
   0xB6, 0x00, 0x49, 0xB5, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4C, 0xB2, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 
   0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 
   0xAE, 0x00, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x01, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 
   0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x01, 
   0x57, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x58, 
   0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 
   0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9F, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 
   0x01, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 
   0x67, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 
   0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 
   0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 
   0x8F, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 
   0x01, 0x73, 0x8C, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 
   0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 
   0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 
   0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 
   0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 
   0x01, 0x83, 0x7C, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 
   0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x87, 0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 
   0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 
   0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 
   0x8E, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6E, 0x01, 0x90, 
   0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 
   0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 
   0x97, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 
   0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 
   0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x61, 0x00, 0x9E, 0x61, 0x01, 0xA0, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 
   0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5D, 
   0x01, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x01, 
   0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA9, 
   0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 
   0x00, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 
   0xAF, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 
   0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 
   0x00, 0xB4, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x01, 
   0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0x48, 0x01, 0xB8, 0x47, 0x01, 0xB9, 
   0x47, 0x01, 0xB9, 0x46, 0x00, 0xBA, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 
   0x01, 0x3C, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 
   0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 
   0xBE, 0x00, 0x41, 0xBD, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x01, 0x43, 0xBC, 
   0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 
   0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x48, 
   0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB2, 0x00, 
   0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 
   0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x01, 
   0x56, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 
   0xA6, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5A, 0xA4, 
   0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 
   0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 
   0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 
   0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x00, 0x68, 0x97, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 
   0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 
   0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 
   0x8E, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x72, 0x8C, 
   0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 0x89, 0x00, 
   0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 
   0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 
   0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 
   0x7F, 0x00, 0x80, 0x7F, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 
   0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 
   0x85, 0x7A, 0x00, 0x87, 0x79, 0x01, 0x87, 0x79, 0x00, 0x88, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 
   0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 
   0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x91, 
   0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 
   0x01, 0x93, 0x6C, 0x01, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 
   0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 
   0x67, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 
   0x00, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 
   0x9D, 0x62, 0x01, 0x9F, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 
   0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 
   0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 
   0x58, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 
   0x00, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x01, 0xAD, 0x52, 0x00, 
   0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 
   0x50, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 
   0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4B, 0x00, 0xB4, 0x4B, 0x00, 0xB4, 0x4A, 0x01, 0xB5, 0x4A, 0x01, 
   0xB5, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0x48, 0x00, 0xB8, 
   0x47, 0x01, 0xB8, 0x47, 0x01, 0xB9, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3A, 0xC4, 
   0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x01, 
   0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 
   0xBE, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBD, 
   0x00, 0x43, 0xBB, 0x00, 0x44, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 
   0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 
   0xB7, 0x01, 0x49, 0xB7, 0x00, 0x49, 0xB5, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 
   0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 
   0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 
   0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 
   0x01, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 
   0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 
   0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 
   0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 
   0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 
   0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 
   0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 
   0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 
   0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 
   0x6E, 0x91, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 
   0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 
   0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x77, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 
   0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 
   0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7C, 0x82, 0x00, 
   0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7C, 
   0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 
   0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 
   0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 
   0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 
   0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x90, 0x70, 0x01, 0x90, 
   0x70, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x92, 0x6C, 
   0x01, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x96, 0x68, 0x00, 0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 
   0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9A, 0x65, 
   0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x63, 0x01, 
   0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 
   0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 
   0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5C, 0x00, 0xA5, 0x5A, 0x01, 
   0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 
   0x58, 0x01, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x55, 0x01, 0xAA, 0x55, 
   0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 
   0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x51, 0x00, 0xB0, 
   0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 
   0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB5, 0x4B, 0x01, 
   0xB5, 0x4A, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB6, 0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 
   0x47, 0x00, 0xB8, 0x47, 0x01, 0xB8, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 
   0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x01, 0x3C, 0xC3, 0x01, 
   0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 
   0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 
   0x01, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x01, 0x44, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 
   0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 
   0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 
   0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 
   0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 
   0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 
   0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x00, 
   0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 
   0xA7, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x01, 0x5A, 0xA6, 0x00, 0x59, 0xA5, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 
   0xA0, 0x01, 0x5F, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 
   0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x01, 0x65, 0x9B, 0x00, 
   0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 
   0x98, 0x01, 0x67, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x92, 0x00, 
   0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x70, 
   0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x71, 0x8E, 
   0x01, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8A, 0x00, 
   0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 
   0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 
   0x00, 0x7A, 0x84, 0x01, 0x7B, 0x85, 0x01, 0x7C, 0x83, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x82, 0x00, 
   0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 
   0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 
   0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 
   0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 
   0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 
   0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x01, 
   0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 
   0x70, 0x00, 0x90, 0x70, 0x00, 0x91, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 
   0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x00, 
   0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 
   0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 
   0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 
   0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 
   0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 
   0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x00, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 
   0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 
   0x58, 0x01, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 
   0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 
   0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x52, 0x01, 0xAF, 0x51, 0x01, 0xAF, 
   0x51, 0x00, 0xB0, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 
   0x00, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4B, 0x00, 0xB5, 0x4A, 0x01, 0xB6, 0x4A, 0x00, 0xB6, 0x49, 0x01, 0xB6, 0x48, 0x01, 0xB7, 
   0x49, 0x01, 0xB7, 0x48, 0x00, 0xB8, 0xC7, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 
   0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 
   0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 
   0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBC, 0x00, 0x44, 0xBB, 0x00, 
   0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 
   0xB8, 0x01, 0x48, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 
   0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 
   0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 
   0xB0, 0x01, 0x50, 0xB0, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAE, 
   0x00, 0x51, 0xAD, 0x00, 0x53, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 
   0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x56, 
   0xA8, 0x00, 0x58, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 
   0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 
   0x5D, 0xA2, 0x01, 0x5C, 0xA2, 0x01, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x01, 0x5F, 
   0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 
   0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 
   0x65, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 
   0x99, 0x01, 0x67, 0x97, 0x01, 0x67, 0x97, 0x00, 0x69, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x95, 
   0x00, 0x6A, 0x96, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 
   0x6C, 0x92, 0x01, 0x6C, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 
   0x00, 0x72, 0x8E, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 
   0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 
   0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x87, 0x00, 0x79, 0x85, 
   0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7A, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7B, 0x83, 0x01, 
   0x7C, 0x82, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x81, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 
   0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7D, 
   0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 
   0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 
   0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 
   0x01, 0x8A, 0x76, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 
   0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 
   0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x01, 
   0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 
   0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9B, 0x63, 0x01, 
   0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9E, 
   0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA1, 0x5F, 0x00, 0xA0, 0x5E, 0x01, 0xA2, 0x5E, 
   0x00, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 
   0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 
   0x59, 0x01, 0xA7, 0x59, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 
   0x00, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 
   0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 
   0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 
   0x00, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x01, 
   0xB4, 0x4C, 0x01, 0xB4, 0x4A, 0x00, 0xB5, 0x4A, 0x01, 0xB5, 0x49, 0x00, 0xB6, 0x4A, 0x01, 0xB7, 
   0x49, 0x01, 0xB7, 0x48, 0x01, 0xB7, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x01, 
   0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 
   0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x01, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 
   0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBC, 0x01, 
   0x44, 0xBB, 0x00, 0x45, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 
   0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 
   0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x01, 
   0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 
   0xB1, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 
   0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 
   0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x00, 0x59, 0xA6, 
   0x01, 0x5A, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 
   0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 
   0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 
   0x01, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9D, 0x00, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x01, 
   0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 
   0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 
   0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 
   0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x77, 
   0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 
   0x01, 0x7A, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7B, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 
   0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 
   0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 
   0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x01, 
   0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 
   0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 
   0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x73, 0x00, 
   0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 
   0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 
   0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 
   0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 
   0x69, 0x00, 0x96, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 
   0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 
   0x9B, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x00, 0x9E, 
   0x62, 0x01, 0x9E, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA0, 0x5E, 
   0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 
   0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 
   0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 
   0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 
   0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 
   0x52, 0x00, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 
   0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 
   0xB3, 0x4C, 0x00, 0xB4, 0x4C, 0x00, 0xB5, 0x4B, 0x01, 0xB5, 0x4A, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 
   0x49, 0x01, 0xB7, 0x49, 0x01, 0xB7, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 
   0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 
   0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x41, 0xBE, 
   0x00, 0x41, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x01, 
   0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 
   0xB9, 0x00, 0x47, 0xB9, 0x01, 0x47, 0xB7, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x49, 0xB6, 
   0x00, 0x49, 0xB5, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB4, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x50, 0xAE, 
   0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x01, 
   0x54, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA8, 0x00, 0x56, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 
   0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 
   0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 
   0x01, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 
   0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 
   0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 
   0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 
   0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6D, 
   0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 
   0x00, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x75, 
   0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 
   0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 
   0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7D, 
   0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 
   0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 
   0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 
   0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8A, 0x74, 0x00, 
   0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 
   0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 
   0x00, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 
   0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x01, 0x94, 0x6B, 0x01, 0x96, 0x6A, 0x01, 0x96, 
   0x6A, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 
   0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 
   0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9D, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 
   0x61, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 
   0x00, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 
   0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 
   0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 
   0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x53, 0x00, 0xAE, 
   0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 
   0x01, 0xB0, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4D, 0x00, 
   0xB3, 0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0x4B, 0x01, 0xB4, 0x4B, 0x01, 0xB5, 0x4A, 0x00, 0xB6, 
   0x49, 0x01, 0xB6, 0x49, 0x00, 0xB7, 0xC8, 0x00, 0x37, 0xC7, 0x01, 0x38, 0xC8, 0x00, 0x38, 0xC7, 
   0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x00, 
   0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 0x3E, 
   0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 
   0x00, 0x41, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 
   0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 
   0xB9, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 
   0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 
   0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 
   0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 
   0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x01, 
   0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xA9, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 
   0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 
   0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 
   0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 
   0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x65, 
   0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 
   0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 
   0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 
   0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x8F, 
   0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 
   0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x75, 
   0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x77, 0x87, 
   0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 
   0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 
   0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 
   0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 
   0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 
   0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 
   0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 
   0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8E, 
   0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 
   0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 
   0x92, 0x6C, 0x01, 0x93, 0x6B, 0x00, 0x94, 0x6C, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 
   0x6A, 0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 
   0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x00, 
   0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 
   0x62, 0x00, 0x9E, 0x62, 0x01, 0x9F, 0x61, 0x00, 0x9E, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 
   0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 
   0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 
   0x01, 0xA8, 0x57, 0x01, 0xA8, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 
   0xAB, 0x55, 0x01, 0xAC, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 
   0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x01, 
   0xB3, 0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB5, 0x4B, 0x01, 0xB4, 0x4A, 0x01, 0xB6, 
   0x4A, 0x00, 0xB6, 0x4A, 0x01, 0xB6, 0xC8, 0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 
   0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC5, 0x01, 0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 
   0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x01, 0x3D, 0xC3, 0x00, 0x3D, 
   0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x3F, 0xBF, 
   0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 
   0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 
   0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 
   0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x01, 
   0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 
   0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4E, 0xB0, 0x00, 0x50, 0xAF, 
   0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 
   0x53, 0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 
   0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA8, 
   0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5C, 
   0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 
   0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 
   0x9A, 0x01, 0x65, 0x99, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 
   0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 
   0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 
   0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 
   0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 
   0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 
   0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 
   0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 
   0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 
   0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 
   0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 
   0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 
   0x7A, 0x00, 0x85, 0x79, 0x01, 0x85, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 
   0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x88, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x89, 0x75, 0x01, 
   0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8D, 0x73, 0x00, 0x8D, 
   0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x8F, 0x70, 
   0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x91, 0x6E, 0x01, 
   0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 
   0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 
   0x00, 0x98, 0x67, 0x00, 0x98, 0x67, 0x00, 0x99, 0x67, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x00, 
   0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 
   0x63, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 
   0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x01, 
   0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA7, 0x58, 
   0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 
   0xAB, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAD, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 
   0x00, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 
   0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB3, 0x4C, 0x00, 0xB4, 0x4B, 0x00, 0xB5, 
   0x4B, 0x01, 0xB5, 0x4B, 0x00, 0xB6, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC9, 0x01, 0x37, 0xC8, 
   0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x39, 0xC5, 0x01, 
   0x3A, 0xC4, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3D, 
   0xC3, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 
   0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x41, 0xBD, 0x00, 
   0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x00, 0x45, 
   0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 
   0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 
   0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x01, 0x4C, 
   0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 
   0x00, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 
   0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x56, 0xA8, 
   0x00, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 
   0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA1, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 
   0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 
   0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 
   0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 
   0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 
   0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 
   0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 
   0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 
   0x01, 0x77, 0x87, 0x01, 0x77, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x00, 
   0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7D, 
   0x82, 0x00, 0x7D, 0x83, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 
   0x82, 0x7E, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 
   0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x86, 0x78, 
   0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 
   0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 
   0x72, 0x00, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 
   0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x00, 0x92, 0x6E, 0x00, 
   0x92, 0x6D, 0x00, 0x92, 0x6C, 0x00, 0x93, 0x6D, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x94, 
   0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x97, 0x69, 0x00, 0x97, 0x69, 
   0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 
   0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 
   0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 
   0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5B, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x59, 
   0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 
   0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x00, 0xAE, 0x50, 
   0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 
   0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 0x4C, 0x01, 0xB4, 
   0x4B, 0x01, 0xB5, 0x4B, 0x01, 0xB5, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC9, 
   0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC5, 0x00, 
   0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 
   0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 
   0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 0x00, 0x41, 0xBE, 0x00, 
   0x41, 0xBE, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x43, 0xBB, 0x00, 0x44, 
   0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 
   0x00, 0x47, 0xB7, 0x01, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 
   0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB4, 0x00, 0x4C, 
   0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 
   0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 
   0x52, 0xAD, 0x01, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 
   0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 
   0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x01, 
   0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 
   0x00, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 
   0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 
   0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 
   0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 
   0x00, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 
   0x8B, 0x00, 0x75, 0x8A, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 
   0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 
   0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7C, 
   0x83, 0x00, 0x7D, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 
   0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7F, 0x01, 
   0x82, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 
   0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 
   0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8B, 
   0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x71, 0x01, 0x90, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6D, 0x01, 0x91, 0x6E, 0x01, 0x93, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 
   0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 
   0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 
   0x64, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x00, 0x9E, 0x61, 
   0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 
   0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 
   0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 
   0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 
   0x53, 0x00, 0xAD, 0x53, 0x01, 0xAD, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 0xAE, 0x51, 
   0x00, 0xAF, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB1, 0x4F, 0x01, 
   0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 0x4C, 0x01, 0xB3, 0x4C, 0x01, 0xB4, 
   0x4C, 0x01, 0xB4, 0x4B, 0x01, 0xB4, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 
   0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x39, 0xC6, 0x00, 
   0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3B, 
   0xC4, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 
   0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 
   0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 
   0xBB, 0x00, 0x45, 0xBB, 0x01, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 
   0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 
   0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4B, 
   0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 
   0x00, 0x4F, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 
   0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 
   0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x55, 0xA9, 
   0x01, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA7, 0x01, 
   0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 
   0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 
   0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 
   0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x64, 
   0x9B, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x65, 0x99, 
   0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 
   0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 
   0x94, 0x01, 0x6B, 0x94, 0x00, 0x6D, 0x92, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 
   0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 
   0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 
   0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 
   0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 
   0x83, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 
   0x01, 0x7E, 0x80, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 
   0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 
   0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 
   0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 
   0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x72, 
   0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x6F, 0x01, 0x8F, 0x6F, 0x00, 0x91, 0x6F, 0x00, 
   0x90, 0x6E, 0x00, 0x92, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 
   0x6C, 0x00, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 
   0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 0x00, 0x98, 0x67, 0x00, 
   0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 0x9A, 0x64, 0x01, 0x9B, 
   0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 
   0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 
   0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA3, 
   0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 
   0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 
   0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 
   0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 
   0x01, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x00, 0xB0, 0x4F, 0x01, 
   0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB2, 0x4C, 0x01, 0xB3, 
   0x4C, 0x01, 0xB4, 0x4B, 0x00, 0xB4, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xC9, 0x01, 0x35, 0xC9, 
   0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x38, 0xC7, 0x00, 
   0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 
   0xC4, 0x00, 0x3C, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 
   0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x42, 0xBD, 0x00, 0x43, 
   0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 
   0x00, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 
   0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 
   0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 
   0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 
   0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x01, 
   0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 
   0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 
   0x61, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 
   0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x9A, 
   0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 
   0x69, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 
   0x94, 0x00, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x00, 0x6D, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x00, 
   0x71, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 
   0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 
   0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 
   0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 
   0x84, 0x01, 0x7C, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 
   0x01, 0x7E, 0x82, 0x01, 0x7F, 0x80, 0x00, 0x7E, 0x81, 0x01, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 
   0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 
   0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 
   0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x01, 
   0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 
   0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x73, 0x00, 0x8E, 0x72, 
   0x00, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x70, 0x00, 
   0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x92, 0x6E, 0x00, 0x93, 0x6D, 0x01, 0x93, 
   0x6C, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 
   0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 
   0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 
   0x65, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9E, 0x62, 
   0x01, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 
   0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA3, 0x5D, 0x01, 0xA2, 
   0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 
   0x01, 0xA5, 0x5A, 0x01, 0xA7, 0x59, 0x00, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 
   0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAB, 
   0x55, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 
   0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 
   0xB0, 0x4F, 0x00, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 0x4D, 0x00, 0xB3, 
   0x4C, 0x01, 0xB3, 0x4C, 0x00, 0xB3, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 
   0x00, 0x36, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 
   0x39, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 
   0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 
   0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 
   0x01, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4A, 
   0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 
   0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 
   0xAD, 0x00, 0x53, 0xAB, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x54, 0xAA, 
   0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 
   0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 
   0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 
   0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 
   0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x64, 0x9A, 
   0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 
   0x67, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 
   0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 
   0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 
   0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 
   0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 
   0x00, 0x75, 0x89, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x88, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x01, 
   0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x00, 0x7A, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x80, 0x7F, 0x01, 
   0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 
   0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7B, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 
   0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8A, 
   0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 
   0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 
   0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 
   0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6A, 
   0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 
   0x98, 0x67, 0x00, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 
   0x65, 0x01, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 
   0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 
   0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5D, 0x00, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5A, 
   0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 
   0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAA, 
   0x55, 0x01, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x53, 
   0x00, 0xAE, 0x52, 0x00, 0xAD, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 
   0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4E, 0x01, 0xB1, 0x4E, 0x00, 0xB1, 0x4E, 0x00, 0xB2, 
   0x4D, 0x01, 0xB3, 0x4C, 0x01, 0xB3, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 
   0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC8, 0x00, 
   0x38, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 
   0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3C, 0xC3, 
   0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 
   0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 
   0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 
   0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 
   0x47, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 
   0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 
   0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x01, 
   0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x52, 
   0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 
   0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x01, 
   0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 
   0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 
   0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x01, 0x62, 
   0x9D, 0x00, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 
   0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 
   0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 
   0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x93, 
   0x00, 0x6D, 0x93, 0x01, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 
   0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x01, 0x72, 
   0x8E, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 
   0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 
   0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x7A, 
   0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 
   0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 
   0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7A, 
   0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x85, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 
   0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 0x00, 0x8A, 
   0x76, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 
   0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 
   0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 
   0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 
   0x97, 0x68, 0x00, 0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 
   0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 
   0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 
   0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x00, 
   0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x01, 0xAA, 
   0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0x53, 
   0x00, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAF, 0x50, 0x01, 
   0xAF, 0x50, 0x00, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4F, 0x01, 0xB1, 0x4E, 0x01, 0xB2, 
   0x4E, 0x01, 0xB2, 0x4E, 0x00, 0xB3, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x01, 0x34, 0xCB, 
   0x00, 0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x01, 0x37, 0xC8, 0x00, 
   0x38, 0xC8, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x01, 0x3A, 
   0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 
   0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC1, 0x01, 
   0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x41, 
   0xBE, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBA, 
   0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 
   0x47, 0xB8, 0x01, 0x48, 0xB8, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 
   0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 
   0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4E, 0xB1, 0x01, 
   0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x01, 0x51, 
   0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 
   0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x01, 
   0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x5A, 
   0xA5, 0x01, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 
   0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 
   0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x99, 0x00, 
   0x67, 0x98, 0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 
   0x95, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 
   0x00, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 
   0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 
   0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 
   0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x89, 0x01, 
   0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 
   0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 
   0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 
   0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 
   0x7D, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 
   0x01, 0x85, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x79, 0x01, 0x85, 0x79, 0x00, 0x86, 0x78, 0x00, 
   0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 0x01, 0x88, 0x76, 0x01, 0x88, 0x76, 0x00, 0x89, 
   0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 
   0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 
   0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 
   0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 
   0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 
   0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x67, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 
   0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 
   0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 
   0x5E, 0x01, 0xA1, 0x5D, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 
   0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x01, 
   0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA9, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xAA, 
   0x56, 0x01, 0xA9, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAC, 0x53, 
   0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x00, 0xAE, 0x52, 0x01, 0xAE, 0x51, 0x01, 
   0xAE, 0x50, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x00, 0xB1, 0x4E, 0x00, 0xB1, 
   0x4E, 0x01, 0xB2, 0x4E, 0x01, 0xB2, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 
   0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x01, 0x37, 0xC9, 0x01, 
   0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 
   0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 
   0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 
   0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x41, 0xBF, 0x00, 0x41, 
   0xBD, 0x00, 0x42, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBB, 
   0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 
   0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x01, 0x49, 
   0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 
   0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAE, 0x01, 0x51, 
   0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x53, 0xAB, 
   0x00, 0x53, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 
   0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 
   0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 
   0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 
   0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 
   0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 
   0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 
   0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x93, 
   0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 
   0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 
   0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 
   0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x78, 
   0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 
   0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 
   0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 
   0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 
   0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x88, 
   0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 
   0x01, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 
   0x8E, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6F, 0x01, 0x91, 
   0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 
   0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 
   0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x99, 
   0x67, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 
   0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 
   0x9E, 0x61, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 
   0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x59, 0x00, 
   0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xA9, 
   0x57, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 
   0x00, 0xAB, 0x54, 0x00, 0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x53, 0x00, 0xAE, 0x52, 0x01, 
   0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x01, 0xB0, 0x4F, 0x01, 0xB0, 0x4F, 0x01, 0xB1, 
   0x4F, 0x00, 0xB1, 0x4F, 0x00, 0xB2, 0xCD, 0x01, 0x32, 0xCC, 0x01, 0x32, 0xCC, 0x00, 0x33, 0xCC, 
   0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x34, 0xCA, 0x01, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x00, 
   0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x39, 
   0xC6, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 
   0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x01, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 
   0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBB, 
   0x00, 0x43, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 
   0x46, 0xB8, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 
   0xB6, 0x00, 0x49, 0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 
   0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 
   0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x50, 
   0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 
   0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x58, 
   0xA6, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x59, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 
   0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 
   0x9F, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9C, 
   0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9B, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x99, 0x00, 
   0x65, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 
   0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x01, 
   0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 
   0x8F, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 
   0x01, 0x74, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 
   0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 
   0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7E, 0x81, 0x01, 
   0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 
   0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 
   0x01, 0x83, 0x7B, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 
   0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 0x88, 
   0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x75, 
   0x01, 0x8C, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 
   0x8D, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 
   0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 
   0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 
   0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 
   0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 
   0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 
   0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 
   0xA6, 0x59, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x01, 0xA9, 
   0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x55, 
   0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0x52, 0x00, 
   0xAD, 0x52, 0x00, 0xAE, 0x52, 0x00, 0xAE, 0x50, 0x00, 0xAF, 0x50, 0x00, 0xB0, 0x50, 0x00, 0xB0, 
   0x4F, 0x01, 0xB1, 0x4F, 0x00, 0xB1, 0xCD, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 
   0x00, 0x34, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x00, 
   0x36, 0xC9, 0x00, 0x36, 0xC8, 0x01, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x01, 0x38, 
   0xC7, 0x01, 0x38, 0xC6, 0x01, 0x3A, 0xC6, 0x01, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 
   0x01, 0x3B, 0xC4, 0x01, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x01, 
   0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x00, 0x40, 
   0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBD, 
   0x01, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x01, 
   0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 
   0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB4, 
   0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 
   0x4D, 0xB2, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xB0, 0x00, 0x50, 
   0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 
   0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 
   0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA4, 
   0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 
   0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x61, 0x9D, 0x01, 0x63, 0x9C, 
   0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 
   0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x67, 
   0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x95, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 
   0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 
   0x8F, 0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 
   0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 
   0x75, 0x89, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 
   0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 
   0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x81, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 
   0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7D, 0x00, 0x81, 0x7D, 0x00, 0x83, 0x7C, 
   0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 
   0x85, 0x7A, 0x00, 0x85, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x88, 
   0x78, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x89, 0x75, 0x00, 0x8B, 0x75, 
   0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x00, 
   0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 
   0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x93, 0x6D, 
   0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 
   0x68, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 
   0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 
   0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x00, 0xA0, 
   0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 
   0x00, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 
   0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 
   0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0x55, 
   0x01, 0xAA, 0x54, 0x01, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x01, 
   0xAD, 0x52, 0x01, 0xAE, 0x51, 0x00, 0xAE, 0x51, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x50, 0x00, 0xB0, 
   0x50, 0x00, 0xB0, 0x4F, 0x01, 0xB0, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 
   0x00, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x01, 0x35, 0xCA, 0x00, 0x34, 0xCA, 0x01, 
   0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 
   0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 
   0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 
   0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 
   0xC0, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 
   0x01, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x44, 0xBA, 0x01, 
   0x45, 0xB9, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 
   0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 
   0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 
   0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 
   0xB0, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 
   0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 
   0x55, 0xA9, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 
   0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 
   0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9D, 
   0x00, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 
   0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 
   0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 
   0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x01, 
   0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 
   0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 
   0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 
   0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 
   0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 
   0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7F, 
   0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7D, 0x01, 0x81, 0x7E, 
   0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 
   0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x87, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 
   0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 
   0x00, 0x8B, 0x74, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 
   0x70, 0x01, 0x8F, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6F, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6E, 
   0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 
   0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 
   0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 
   0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 
   0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0xA0, 
   0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 
   0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 0xA4, 0x5C, 0x01, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x01, 
   0xA5, 0x5B, 0x00, 0xA6, 0x5A, 0x01, 0xA5, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 
   0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAA, 0x55, 
   0x01, 0xAA, 0x55, 0x00, 0xAB, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x00, 
   0xAC, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAF, 0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 
   0x50, 0x01, 0xB0, 0x4F, 0x00, 0xB0, 0xCE, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCE, 0x01, 0x32, 0xCD, 
   0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 
   0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 
   0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC5, 
   0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x01, 0x3C, 0xC3, 0x01, 
   0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3F, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 
   0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 
   0x00, 0x42, 0xBD, 0x01, 0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBC, 0x01, 0x44, 0xBA, 0x00, 
   0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x01, 0x47, 
   0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 
   0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 
   0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 
   0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x51, 0xAD, 
   0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 
   0x55, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 
   0xA8, 0x01, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA5, 
   0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 
   0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 
   0x01, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 
   0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 
   0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 
   0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6E, 
   0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8D, 
   0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 
   0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 
   0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x7A, 0x85, 
   0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 
   0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 
   0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x82, 0x7E, 
   0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7D, 0x00, 0x84, 0x7C, 0x01, 0x84, 0x7C, 0x01, 
   0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 
   0x78, 0x00, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 
   0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 
   0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 
   0x71, 0x00, 0x8F, 0x6F, 0x01, 0x8F, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 
   0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 
   0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x68, 0x00, 0x96, 
   0x69, 0x01, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 
   0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x00, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x00, 
   0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9E, 
   0x61, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 
   0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 
   0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 
   0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x00, 0xA9, 0x57, 0x01, 0xA9, 0x56, 
   0x00, 0xA9, 0x55, 0x00, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x00, 
   0xAC, 0x53, 0x00, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0x52, 0x00, 0xAE, 0x51, 0x01, 0xAF, 
   0x50, 0x00, 0xAF, 0x51, 0x00, 0xAF, 0xCF, 0x01, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x01, 0x31, 0xCD, 
   0x01, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x01, 
   0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xCA, 0x01, 0x36, 0xC8, 0x00, 0x36, 
   0xC8, 0x00, 0x37, 0xC8, 0x01, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC7, 0x00, 0x39, 0xC5, 
   0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x01, 0x3C, 0xC3, 0x00, 
   0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 
   0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x41, 0xBF, 0x00, 0x41, 0xBD, 
   0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 
   0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x46, 
   0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB7, 0x00, 0x49, 0xB6, 
   0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 
   0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 
   0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 
   0x00, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 
   0x53, 0xAB, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 
   0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x58, 0xA6, 
   0x01, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 
   0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 
   0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 
   0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 
   0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 
   0x01, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 
   0x6B, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 
   0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x70, 0x8E, 
   0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 
   0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 
   0x88, 0x01, 0x76, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7C, 0x84, 0x01, 
   0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7D, 0x82, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x81, 0x7E, 0x00, 0x80, 0x7E, 
   0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 
   0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x86, 0x79, 0x00, 0x85, 0x7A, 0x01, 0x87, 
   0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 
   0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 
   0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x00, 0x8F, 
   0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 
   0x01, 0x91, 0x6D, 0x00, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x01, 
   0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 
   0x69, 0x00, 0x97, 0x69, 0x01, 0x98, 0x68, 0x01, 0x98, 0x68, 0x01, 0x99, 0x67, 0x01, 0x99, 0x67, 
   0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 
   0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 
   0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA3, 0x5C, 0x01, 
   0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA8, 0x58, 0x00, 0xA8, 0x58, 0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 
   0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x00, 0xAA, 0x55, 0x00, 0xAB, 0x54, 0x01, 0xAB, 0x54, 0x01, 
   0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAE, 0x52, 0x01, 0xAD, 0x51, 0x01, 0xAE, 
   0x51, 0x01, 0xAF, 0x51, 0x00, 0xAF, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x30, 0xCE, 
   0x00, 0x31, 0xCD, 0x00, 0x31, 0xCD, 0x01, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 
   0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 
   0xC9, 0x00, 0x37, 0xC9, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x39, 0xC6, 
   0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 
   0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 
   0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x01, 0x40, 0xBE, 
   0x00, 0x41, 0xBD, 0x01, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBB, 0x00, 
   0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 
   0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 
   0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 
   0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB2, 0x00, 0x4E, 
   0xB0, 0x01, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAF, 
   0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 
   0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xAA, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 
   0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9F, 
   0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 
   0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x65, 
   0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 
   0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 
   0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 
   0x91, 0x00, 0x6E, 0x90, 0x01, 0x6E, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 
   0x01, 0x71, 0x8F, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 
   0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 
   0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x78, 0x87, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 
   0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 
   0x82, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 
   0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 
   0x83, 0x7B, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 
   0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x01, 0x87, 0x78, 0x00, 0x88, 0x76, 
   0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8A, 0x74, 0x00, 
   0x8C, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 
   0x71, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x71, 0x00, 0x90, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 
   0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x93, 0x6D, 0x01, 
   0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 
   0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 
   0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 
   0x9C, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 
   0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 
   0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x00, 
   0xA4, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 
   0x59, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x58, 
   0x01, 0xA9, 0x57, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x01, 
   0xAB, 0x54, 0x01, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAC, 0x52, 0x00, 0xAD, 0x52, 0x01, 0xAE, 
   0x52, 0x00, 0xAE, 0x51, 0x00, 0xAF, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 
   0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCD, 0x01, 0x33, 0xCC, 0x01, 
   0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x34, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x36, 
   0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 
   0x01, 0x39, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 
   0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 
   0xC1, 0x00, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 
   0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 
   0x43, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 
   0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x01, 0x48, 0xB7, 
   0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 
   0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 
   0x00, 0x51, 0xAF, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 
   0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 
   0xA9, 0x00, 0x55, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x01, 0x58, 0xA7, 
   0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 
   0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 
   0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 
   0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 
   0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x65, 
   0x9A, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x98, 
   0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 
   0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 
   0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x90, 
   0x00, 0x71, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x74, 0x8A, 0x00, 0x75, 
   0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x88, 
   0x01, 0x79, 0x86, 0x01, 0x78, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 
   0x7B, 0x85, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x83, 0x00, 0x7D, 
   0x82, 0x00, 0x7E, 0x82, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 
   0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 
   0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 
   0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 
   0x8A, 0x75, 0x00, 0x8B, 0x73, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8E, 
   0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 
   0x00, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 
   0x93, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x96, 
   0x6A, 0x00, 0x95, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x97, 0x67, 
   0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 
   0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 
   0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 
   0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 
   0x5B, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA8, 0x58, 
   0x01, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xAA, 0x55, 0x01, 
   0xAA, 0x54, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x53, 0x01, 0xAC, 0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 
   0x52, 0x01, 0xAE, 0x52, 0x01, 0xAE, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x01, 0x32, 0xCD, 0x00, 
   0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 
   0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x01, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 
   0x00, 0x38, 0xC6, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC4, 0x00, 
   0x3A, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x01, 0x3C, 0xC3, 0x00, 0x3D, 
   0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x40, 0xBF, 
   0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 
   0x42, 0xBC, 0x01, 0x44, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBA, 0x00, 0x44, 0xBA, 0x00, 0x45, 
   0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x47, 0xB7, 
   0x00, 0x48, 0xB6, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 
   0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 
   0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 
   0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAC, 0x00, 
   0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x54, 
   0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 
   0x00, 0x57, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 
   0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 
   0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 
   0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 
   0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 
   0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 
   0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 
   0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 
   0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 
   0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 
   0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 
   0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 
   0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x82, 0x00, 0x7D, 
   0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7E, 0x80, 0x00, 0x80, 0x80, 
   0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 
   0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 
   0x7B, 0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 
   0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 
   0x8A, 0x75, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8D, 
   0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 
   0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x91, 0x6E, 0x00, 
   0x92, 0x6D, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 
   0x6A, 0x00, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 
   0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 
   0x9B, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 
   0x63, 0x01, 0x9E, 0x62, 0x01, 0x9D, 0x61, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 
   0x00, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 
   0xA2, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA3, 0x5B, 0x00, 0xA4, 0x5B, 0x00, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x01, 0xA6, 0x59, 0x01, 0xA6, 0x58, 0x00, 0xA7, 0x58, 
   0x01, 0xA8, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xAA, 0x56, 0x01, 0xA9, 0x56, 0x00, 
   0xAB, 0x55, 0x00, 0xAB, 0x54, 0x00, 0xAB, 0x55, 0x01, 0xAC, 0x54, 0x00, 0xAC, 0x53, 0x01, 0xAD, 
   0x52, 0x01, 0xAD, 0x52, 0x01, 0xAE, 0xD1, 0x00, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 
   0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x34, 
   0xCA, 0x01, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 
   0x00, 0x37, 0xC7, 0x01, 0x38, 0xC6, 0x01, 0x39, 0xC7, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 
   0x3B, 0xC4, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 
   0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 
   0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 
   0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 
   0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB9, 0x00, 0x47, 0xB7, 
   0x00, 0x48, 0xB7, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x01, 
   0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 
   0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 
   0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 
   0x52, 0xAC, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 
   0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 
   0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x58, 0xA6, 0x01, 0x58, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 
   0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 
   0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x60, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 
   0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9B, 0x01, 0x63, 0x9B, 0x01, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 
   0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 
   0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6A, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6D, 
   0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 
   0x01, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x01, 
   0x71, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 
   0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 
   0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x01, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7D, 
   0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 
   0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 
   0x82, 0x7E, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 
   0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 
   0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x00, 
   0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8B, 0x73, 0x01, 0x8C, 
   0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 
   0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 
   0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 0x94, 
   0x6A, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 
   0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x66, 0x00, 
   0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x00, 0x9D, 
   0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0x61, 
   0x00, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA4, 
   0x5B, 0x01, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x59, 
   0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 
   0xA9, 0x56, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x54, 0x00, 0xAB, 0x54, 0x01, 0xAC, 0x53, 0x01, 0xAD, 
   0x53, 0x01, 0xAD, 0x52, 0x01, 0xAD, 0xD1, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD1, 0x00, 0x2F, 0xD0, 
   0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x31, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 
   0x31, 0xCD, 0x01, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 
   0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC9, 
   0x01, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x01, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 
   0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 
   0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 
   0x01, 0x3F, 0xBF, 0x01, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 
   0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 
   0xBB, 0x01, 0x44, 0xBA, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB5, 0x00, 
   0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 
   0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 
   0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x01, 0x51, 0xAE, 0x00, 
   0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x01, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 
   0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA8, 
   0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x01, 0x58, 0xA6, 0x01, 
   0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 
   0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 
   0x01, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x60, 0x9E, 0x01, 
   0x61, 0x9D, 0x00, 0x61, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 
   0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 
   0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 
   0x94, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 
   0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 
   0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 
   0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 
   0x00, 0x76, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 
   0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 
   0x84, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 
   0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 
   0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 
   0x01, 0x87, 0x79, 0x01, 0x88, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 
   0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 
   0x00, 0x8E, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x70, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 
   0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x97, 0x69, 
   0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x99, 0x67, 0x01, 0x98, 0x66, 0x01, 
   0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 
   0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 
   0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 
   0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA3, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 
   0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x57, 0x01, 
   0xA9, 0x57, 0x01, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x01, 0xAB, 0x54, 0x01, 0xAB, 
   0x53, 0x00, 0xAC, 0x53, 0x01, 0xAC, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 
   0x00, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 
   0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 
   0xCB, 0x01, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC8, 
   0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 
   0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 
   0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 
   0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBE, 0x00, 0x40, 0xBE, 0x01, 
   0x41, 0xBE, 0x01, 0x42, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 
   0xBC, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x01, 0x46, 0xB9, 
   0x00, 0x47, 0xB9, 0x00, 0x47, 0xB7, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 
   0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 
   0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 
   0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 
   0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 
   0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA9, 
   0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 
   0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 
   0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 
   0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 
   0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x64, 
   0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 
   0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 
   0x8B, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 
   0x00, 0x77, 0x88, 0x01, 0x76, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 
   0x79, 0x87, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 
   0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x82, 
   0x00, 0x7E, 0x80, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x81, 0x7F, 0x00, 
   0x80, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 
   0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x85, 0x79, 
   0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 
   0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 
   0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x72, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x71, 0x00, 0x8D, 0x71, 
   0x01, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 0x90, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 
   0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 
   0x6C, 0x00, 0x93, 0x6C, 0x00, 0x95, 0x6B, 0x00, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 
   0x00, 0x96, 0x69, 0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x99, 0x67, 0x00, 
   0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9C, 
   0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x61, 
   0x01, 0x9F, 0x61, 0x00, 0x9F, 0x61, 0x01, 0xA0, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA1, 0x5F, 0x01, 
   0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0x59, 
   0x01, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x57, 0x01, 
   0xA8, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0x55, 0x00, 0xAB, 
   0x54, 0x00, 0xAC, 0x54, 0x01, 0xAC, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 
   0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCF, 0x00, 
   0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 0x34, 
   0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xC9, 
   0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x01, 
   0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 
   0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 
   0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x00, 
   0x41, 0xBE, 0x01, 0x41, 0xBD, 0x01, 0x41, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 
   0xBC, 0x01, 0x44, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xB9, 
   0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x01, 
   0x48, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 
   0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 
   0x00, 0x4E, 0xB0, 0x01, 0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 
   0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 
   0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 
   0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 
   0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 
   0x60, 0x9E, 0x00, 0x60, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 
   0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 
   0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 
   0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x01, 0x6B, 
   0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 
   0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 
   0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 
   0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 
   0x00, 0x75, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 
   0x79, 0x86, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 
   0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 
   0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 
   0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 
   0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 
   0x89, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8B, 0x75, 0x00, 0x8B, 
   0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 
   0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 
   0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6C, 0x00, 0x93, 
   0x6C, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 
   0x01, 0x96, 0x6A, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 
   0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9B, 
   0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 
   0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0x9F, 0x5F, 0x01, 
   0xA1, 0x5F, 0x00, 0xA0, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA4, 0x5A, 0x01, 0xA5, 0x5A, 
   0x00, 0xA5, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 
   0xA8, 0x57, 0x01, 0xA8, 0x57, 0x00, 0xA9, 0x56, 0x01, 0xA9, 0x56, 0x00, 0xAB, 0x55, 0x00, 0xAA, 
   0x55, 0x01, 0xAB, 0x54, 0x00, 0xAC, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 
   0x01, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 
   0x30, 0xCE, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 
   0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 
   0x00, 0x36, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 
   0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 
   0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x01, 0x3D, 0xC2, 0x00, 0x3C, 0xC2, 0x01, 0x3D, 0xC1, 
   0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xC0, 0x01, 
   0x41, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 
   0xBC, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 
   0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB7, 0x01, 0x47, 0xB7, 0x00, 
   0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4A, 
   0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x4F, 0xAF, 0x00, 
   0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 
   0xAC, 0x00, 0x53, 0xAB, 0x01, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 
   0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 
   0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 
   0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 
   0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x63, 
   0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 
   0x67, 0x97, 0x00, 0x68, 0x96, 0x00, 0x68, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 
   0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x01, 0x6C, 0x92, 
   0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x71, 0x8D, 0x00, 0x72, 
   0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 
   0x00, 0x75, 0x89, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 
   0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 
   0x85, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x83, 
   0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 
   0x80, 0x80, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x84, 0x7A, 
   0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8B, 
   0x75, 0x01, 0x8B, 0x75, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 
   0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 
   0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 
   0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 
   0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x00, 0x98, 0x68, 0x01, 
   0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 
   0x01, 0x9E, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x60, 0x00, 0x9F, 0x60, 0x00, 
   0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 
   0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 0x59, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 
   0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA8, 0x57, 0x01, 0xAA, 0x56, 0x00, 0xAA, 0x56, 0x00, 0xAA, 
   0x55, 0x01, 0xAA, 0x55, 0x01, 0xAB, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 
   0x01, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD1, 0x00, 0x2F, 0xCF, 0x00, 
   0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 
   0xCC, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x01, 0x34, 0xCA, 
   0x01, 0x35, 0xCA, 0x01, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 
   0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 
   0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 
   0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x41, 0xBD, 0x00, 0x42, 
   0xBC, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 
   0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB9, 0x00, 0x47, 0xB8, 0x01, 
   0x48, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x4A, 
   0xB5, 0x01, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 
   0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 
   0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 
   0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 
   0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 
   0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 
   0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 
   0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 
   0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 
   0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 
   0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 
   0x01, 0x6D, 0x93, 0x01, 0x6D, 0x91, 0x00, 0x6D, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 
   0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8F, 0x01, 0x72, 0x8E, 0x00, 0x72, 
   0x8E, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 
   0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 
   0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 
   0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 
   0x00, 0x7C, 0x83, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x01, 
   0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 
   0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x85, 0x7B, 
   0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 
   0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8E, 0x70, 0x01, 
   0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6B, 0x01, 0x93, 0x6C, 0x01, 0x95, 0x6B, 
   0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 
   0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 
   0x00, 0x9C, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 
   0x9F, 0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 
   0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 
   0x00, 0xA4, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x01, 
   0xA7, 0x58, 0x01, 0xA8, 0x58, 0x01, 0xA9, 0x57, 0x00, 0xA9, 0x56, 0x00, 0xA9, 0x56, 0x00, 0xAA, 
   0x56, 0x01, 0xAB, 0x55, 0x01, 0xAA, 0xD4, 0x01, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 
   0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 0x00, 
   0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x31, 
   0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 
   0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x01, 0x36, 0xC8, 0x00, 
   0x37, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x39, 
   0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC3, 
   0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC1, 0x01, 
   0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x00, 0x41, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 
   0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 
   0x01, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x01, 
   0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x4A, 
   0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 
   0x01, 0x4C, 0xB3, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB1, 0x00, 
   0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 
   0xAD, 0x01, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 
   0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x01, 0x59, 
   0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 
   0x5F, 0x9F, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x62, 
   0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x62, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 
   0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 
   0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 
   0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 
   0x00, 0x6C, 0x92, 0x00, 0x6C, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 
   0x6F, 0x91, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x72, 
   0x8D, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 
   0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x01, 
   0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 
   0x85, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 
   0x00, 0x7D, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x01, 
   0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 
   0x7D, 0x01, 0x81, 0x7E, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 
   0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 
   0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 
   0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 
   0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 
   0x8F, 0x71, 0x00, 0x90, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6F, 0x00, 0x91, 
   0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x00, 0x93, 0x6B, 
   0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 
   0x97, 0x68, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x99, 
   0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x64, 
   0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 
   0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 
   0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 
   0x00, 0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 
   0xA7, 0x58, 0x01, 0xA7, 0x58, 0x00, 0xA8, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 0x56, 0x00, 0xA9, 
   0x56, 0x00, 0xAA, 0x55, 0x01, 0xAA, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 
   0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x01, 
   0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x30, 0xCE, 0x00, 0x31, 
   0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x36, 0xC8, 0x01, 
   0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 
   0xC5, 0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 
   0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 
   0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 
   0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 
   0x01, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x01, 0x46, 0xB8, 0x00, 
   0x46, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 
   0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 
   0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 
   0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 
   0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 
   0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 
   0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x61, 
   0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 
   0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 
   0x67, 0x99, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x67, 0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 
   0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 
   0x00, 0x6C, 0x94, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 
   0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 
   0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 
   0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 
   0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 
   0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x00, 
   0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x01, 0x82, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 
   0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 
   0x87, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 
   0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 
   0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x71, 0x00, 0x8E, 0x72, 0x01, 
   0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x90, 
   0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 
   0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 
   0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x67, 0x01, 0x97, 0x67, 0x01, 0x98, 0x66, 0x00, 0x99, 
   0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9B, 0x64, 
   0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 
   0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 
   0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 
   0x01, 0xA3, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x01, 
   0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x57, 0x00, 0xA8, 0x57, 0x01, 0xA9, 
   0x56, 0x01, 0xA9, 0x56, 0x01, 0xA9, 0xD5, 0x00, 0x2B, 0xD5, 0x01, 0x2A, 0xD4, 0x00, 0x2C, 0xD3, 
   0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 
   0x2F, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 
   0xCE, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x36, 0xC9, 0x01, 0x35, 0xC9, 0x00, 
   0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 
   0xC7, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3A, 0xC4, 0x00, 0x3C, 0xC4, 
   0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 
   0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 
   0xBF, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 
   0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 
   0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB6, 0x01, 0x48, 
   0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB1, 0x01, 
   0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 
   0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x54, 0xA9, 0x00, 0x55, 0xA9, 0x01, 
   0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x59, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA1, 0x01, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 
   0x00, 0x64, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 
   0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x01, 0x67, 0x97, 0x00, 0x68, 
   0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x95, 
   0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 
   0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 
   0x8E, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 
   0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 
   0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 
   0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x83, 0x00, 0x7E, 0x82, 0x01, 
   0x7D, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x80, 
   0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 
   0x00, 0x84, 0x7B, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 
   0x86, 0x7A, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 
   0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 
   0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 
   0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 
   0x6E, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6D, 
   0x00, 0x93, 0x6C, 0x01, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x01, 
   0x95, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x99, 
   0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9A, 0x64, 
   0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x01, 
   0x9D, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x01, 0xA0, 
   0x5F, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 
   0x01, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA5, 0x5C, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x5A, 0x00, 
   0xA6, 0x5A, 0x01, 0xA6, 0x59, 0x00, 0xA6, 0x58, 0x01, 0xA7, 0x58, 0x01, 0xA7, 0x57, 0x01, 0xA8, 
   0x57, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 
   0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2E, 0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 
   0xCF, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 
   0x00, 0x34, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x01, 
   0x35, 0xCA, 0x01, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x01, 0x37, 0xC7, 0x00, 0x38, 0xC8, 0x00, 0x38, 
   0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x01, 
   0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 
   0xBE, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 
   0x00, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 
   0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 
   0xB6, 0x00, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 
   0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 
   0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 
   0xAF, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x52, 0xAC, 
   0x01, 0x53, 0xAB, 0x01, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 
   0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 
   0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 
   0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 
   0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 
   0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 
   0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 
   0x97, 0x00, 0x69, 0x96, 0x01, 0x68, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6C, 0x92, 0x01, 
   0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 
   0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x72, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 
   0x76, 0x89, 0x00, 0x76, 0x8A, 0x00, 0x77, 0x88, 0x00, 0x76, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 
   0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x87, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 
   0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 
   0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 
   0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 
   0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 
   0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 
   0x77, 0x01, 0x88, 0x76, 0x01, 0x88, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x75, 
   0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8C, 0x72, 0x01, 
   0x8E, 0x71, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 
   0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 
   0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x00, 0x95, 0x69, 0x01, 0x97, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 
   0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 
   0x00, 0x9B, 0x65, 0x00, 0x9C, 0x64, 0x00, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 
   0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9E, 0x61, 0x00, 0xA0, 0x60, 0x00, 0xA0, 
   0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 
   0x01, 0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA4, 0x5C, 0x01, 0xA5, 0x5B, 0x01, 0xA5, 0x5B, 0x01, 
   0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA7, 0x58, 0x00, 0xA7, 0x58, 0x00, 0xA8, 
   0x57, 0x00, 0xA8, 0x57, 0x00, 0xA9, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 
   0x00, 0x2B, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2D, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x2F, 
   0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCE, 0x01, 0x32, 0xCD, 0x01, 0x32, 0xCD, 
   0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 
   0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x38, 0xC7, 0x00, 0x37, 
   0xC8, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 
   0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC3, 0x00, 
   0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 
   0xC0, 0x00, 0x40, 0xBE, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBC, 
   0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 
   0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 
   0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 
   0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 
   0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 
   0xAF, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x01, 0x52, 0xAD, 
   0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x01, 
   0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x58, 
   0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 
   0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 
   0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 
   0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 
   0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x01, 0x69, 0x95, 
   0x00, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 
   0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 
   0x90, 0x01, 0x70, 0x90, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 
   0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x75, 0x8B, 0x01, 
   0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 
   0x00, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 
   0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 
   0x80, 0x00, 0x80, 0x80, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 
   0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x85, 0x7B, 0x01, 
   0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x79, 0x00, 0x87, 
   0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x76, 
   0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 
   0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 
   0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 
   0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x68, 0x01, 0x96, 0x69, 0x00, 0x97, 
   0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x99, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9D, 0x63, 0x00, 
   0x9C, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 
   0x60, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 
   0x00, 0xA2, 0x5D, 0x00, 0xA3, 0x5D, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x00, 
   0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA6, 0x5A, 0x01, 0xA7, 0x59, 0x01, 0xA7, 0x58, 0x00, 0xA7, 
   0x58, 0x00, 0xA7, 0x57, 0x01, 0xA8, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD6, 0x00, 0x29, 0xD5, 
   0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 
   0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 
   0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 
   0x01, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 
   0x34, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 
   0xC8, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 
   0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3C, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 
   0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 
   0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 
   0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBC, 0x00, 0x44, 0xBB, 0x00, 
   0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 
   0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB5, 
   0x01, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 
   0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 
   0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 
   0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 
   0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA9, 0x01, 0x57, 
   0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 
   0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 
   0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 
   0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 
   0x98, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 
   0x01, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 
   0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x01, 0x6F, 0x8F, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 
   0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 
   0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 
   0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x86, 
   0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 
   0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 
   0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 
   0x00, 0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 
   0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x85, 0x79, 0x01, 0x86, 0x78, 0x00, 0x86, 
   0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 
   0x01, 0x8A, 0x76, 0x01, 0x8B, 0x75, 0x01, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 
   0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 
   0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 
   0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 
   0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 
   0x01, 0x99, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 
   0x9D, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 
   0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 
   0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 
   0xA4, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 0x5A, 0x00, 0xA5, 0x59, 0x01, 0xA6, 0x59, 0x00, 0xA6, 
   0x58, 0x00, 0xA7, 0x58, 0x01, 0xA7, 0xD7, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD6, 0x00, 0x29, 0xD5, 
   0x00, 0x29, 0xD6, 0x01, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x01, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 
   0x2C, 0xD2, 0x01, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 
   0xD1, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCE, 
   0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCB, 0x00, 
   0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x37, 
   0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC2, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 
   0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 
   0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBC, 0x00, 
   0x44, 0xBB, 0x01, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 
   0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 
   0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 
   0x4C, 0xB2, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 
   0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAD, 
   0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 
   0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x01, 0x59, 0xA6, 
   0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 
   0x5C, 0xA2, 0x00, 0x5D, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 
   0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x5F, 0x9E, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 
   0x01, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x64, 0x9B, 0x01, 
   0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 
   0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 0x96, 0x01, 0x69, 0x96, 
   0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x01, 
   0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 
   0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 
   0x73, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 
   0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 
   0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 
   0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 
   0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x7F, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7F, 
   0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 
   0x79, 0x00, 0x87, 0x79, 0x00, 0x88, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 
   0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x01, 
   0x8C, 0x74, 0x00, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 
   0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 
   0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 
   0x93, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 
   0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 
   0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x00, 
   0x9B, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 
   0x61, 0x01, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x01, 0xA1, 0x5F, 0x00, 0xA1, 0x5F, 
   0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 
   0xA4, 0x5B, 0x01, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 0x5A, 0x00, 0xA6, 0x59, 0x00, 0xA6, 
   0x59, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x29, 0xD6, 0x01, 0x28, 0xD6, 
   0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 
   0x2C, 0xD3, 0x00, 0x2D, 0xD3, 0x00, 0x2D, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 
   0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 
   0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x01, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 
   0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 
   0xC9, 0x00, 0x36, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 
   0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 
   0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 
   0xC1, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 
   0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 
   0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 
   0xB8, 0x01, 0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB7, 
   0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 
   0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAE, 
   0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x01, 
   0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 
   0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 
   0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 
   0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 
   0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 
   0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 
   0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x01, 
   0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x00, 0x6E, 
   0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 
   0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 
   0x73, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x75, 
   0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 
   0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 
   0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 
   0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 
   0x83, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 
   0x79, 0x01, 0x86, 0x78, 0x01, 0x86, 0x78, 0x01, 0x87, 0x77, 0x00, 0x87, 0x77, 0x00, 0x89, 0x77, 
   0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 
   0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 
   0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 
   0x00, 0x91, 0x6F, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 
   0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x95, 
   0x69, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x66, 
   0x00, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x00, 0x9C, 0x63, 0x00, 0x9D, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9E, 
   0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x60, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 
   0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x00, 
   0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA4, 0x5B, 0x00, 0xA5, 0x5B, 0x01, 0xA5, 0x5A, 0x01, 0xA5, 
   0x5A, 0x01, 0xA6, 0x59, 0x01, 0xA7, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 
   0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 
   0x2C, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2D, 
   0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 
   0x00, 0x31, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 
   0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 
   0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 
   0x00, 0x38, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x01, 
   0x3B, 0xC3, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x01, 0x3D, 
   0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC1, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xC0, 0x01, 0x40, 0xBE, 
   0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 
   0x44, 0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 
   0xB9, 0x01, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 
   0x00, 0x48, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 
   0x4B, 0xB3, 0x01, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 
   0x01, 0x51, 0xAF, 0x00, 0x51, 0xAD, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 
   0x53, 0xAB, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 
   0xA9, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 
   0x01, 0x59, 0xA7, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 
   0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 
   0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 
   0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x62, 0x9C, 0x00, 
   0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x65, 
   0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 
   0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x00, 
   0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 
   0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 
   0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 
   0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x88, 
   0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 
   0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 
   0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 
   0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7E, 0x01, 0x83, 0x7D, 0x00, 
   0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 
   0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 
   0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 
   0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 
   0x71, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x8F, 0x70, 
   0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 
   0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x95, 
   0x6A, 0x01, 0x95, 0x69, 0x00, 0x96, 0x68, 0x00, 0x97, 0x68, 0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 
   0x00, 0x98, 0x67, 0x00, 0x98, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x00, 0x9E, 
   0x62, 0x01, 0x9D, 0x62, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x5F, 
   0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x00, 
   0xA2, 0x5C, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 0x5B, 0x00, 0xA5, 
   0x5A, 0x00, 0xA6, 0x5A, 0x00, 0xA6, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 
   0x01, 0x28, 0xD6, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x01, 0x29, 0xD4, 0x00, 0x2A, 0xD5, 0x00, 
   0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 
   0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 
   0x33, 0xCC, 0x00, 0x34, 0xCB, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 
   0xC9, 0x00, 0x36, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC7, 0x01, 0x38, 0xC7, 
   0x00, 0x38, 0xC6, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 
   0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 
   0xC1, 0x01, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xBF, 
   0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x01, 0x42, 0xBD, 0x00, 
   0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 
   0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x47, 0xB7, 
   0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x01, 0x4A, 0xB6, 0x01, 0x4A, 0xB4, 0x01, 
   0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 
   0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 
   0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x01, 
   0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 
   0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 
   0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 
   0x01, 0x60, 0x9E, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 
   0x63, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x64, 0x9B, 0x00, 0x65, 
   0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x99, 0x01, 0x66, 0x98, 0x01, 0x68, 0x98, 
   0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 
   0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 
   0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x8F, 
   0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 
   0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 
   0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x87, 
   0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 
   0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 
   0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x82, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 
   0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 
   0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 
   0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 
   0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 
   0x8A, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 
   0x72, 0x00, 0x8E, 0x72, 0x00, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 
   0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6E, 0x01, 
   0x92, 0x6C, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 
   0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x68, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 
   0x00, 0x98, 0x68, 0x01, 0x99, 0x67, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x66, 0x00, 
   0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9B, 0x64, 0x01, 0x9C, 0x62, 0x01, 0x9C, 
   0x63, 0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x60, 
   0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 0x5D, 0x01, 
   0xA2, 0x5D, 0x01, 0xA2, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 
   0x5B, 0x00, 0xA5, 0x5A, 0x01, 0xA6, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 
   0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 
   0x2B, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 
   0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 0x01, 0x30, 0xD0, 
   0x00, 0x30, 0xD0, 0x00, 0x31, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 
   0x32, 0xCD, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCB, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x34, 
   0xCA, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC9, 0x01, 0x37, 0xC7, 
   0x00, 0x38, 0xC8, 0x00, 0x38, 0xC6, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 
   0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 
   0xC3, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 
   0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x01, 
   0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 
   0xBA, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 
   0x01, 0x48, 0xB8, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x49, 0xB5, 0x00, 
   0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 
   0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 
   0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x01, 
   0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x54, 
   0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 
   0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 
   0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 
   0x01, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x01, 
   0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 
   0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 
   0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 
   0x92, 0x00, 0x6C, 0x92, 0x01, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 
   0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x00, 0x72, 0x8E, 0x00, 
   0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 
   0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x76, 0x88, 
   0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 
   0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 
   0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7D, 0x01, 0x82, 0x7C, 0x01, 0x82, 0x7D, 0x01, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 
   0x7A, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 
   0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x76, 0x00, 
   0x8A, 0x75, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8B, 0x74, 0x01, 0x8C, 
   0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 
   0x00, 0x8F, 0x6F, 0x01, 0x90, 0x70, 0x00, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x00, 
   0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 
   0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x96, 0x68, 0x01, 0x96, 0x68, 
   0x00, 0x97, 0x68, 0x00, 0x97, 0x67, 0x01, 0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 
   0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x01, 0x9C, 
   0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x61, 0x01, 0x9F, 0x60, 
   0x01, 0x9F, 0x60, 0x01, 0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 0x5E, 0x00, 
   0xA1, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 0x5C, 0x01, 0xA4, 0x5C, 0x01, 0xA4, 0x5C, 0x00, 0xA4, 
   0x5B, 0x01, 0xA4, 0x5B, 0x01, 0xA5, 0xDA, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD8, 
   0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD5, 0x00, 
   0x2A, 0xD5, 0x01, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 
   0xD3, 0x00, 0x2D, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xD0, 
   0x00, 0x30, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x01, 0x31, 0xCE, 0x00, 
   0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 
   0xCB, 0x00, 0x35, 0xCA, 0x01, 0x36, 0xC9, 0x00, 0x35, 0xCA, 0x01, 0x36, 0xC8, 0x00, 0x37, 0xC8, 
   0x00, 0x37, 0xC8, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 
   0x3A, 0xC6, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x01, 0x3C, 
   0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xC1, 
   0x00, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 
   0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBC, 0x00, 0x44, 
   0xBA, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 
   0x01, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 
   0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 
   0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAF, 0x01, 0x51, 0xAE, 0x00, 
   0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 
   0xAA, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 
   0x00, 0x57, 0xA7, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 
   0xA3, 0x01, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 
   0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 
   0x61, 0x9E, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 
   0x9B, 0x01, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 
   0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x90, 
   0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 
   0x71, 0x8D, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 
   0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 
   0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 
   0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 
   0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7F, 0x81, 
   0x01, 0x7E, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 
   0x81, 0x7D, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 
   0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x85, 0x7A, 0x01, 0x87, 0x79, 
   0x01, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 
   0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 
   0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x70, 
   0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6F, 0x00, 
   0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 
   0x6C, 0x01, 0x94, 0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x96, 0x69, 
   0x00, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x67, 0x01, 
   0x9A, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x65, 0x00, 0x9B, 0x64, 0x00, 0x9C, 
   0x63, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0x61, 
   0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA1, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 
   0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5C, 0x00, 0xA3, 0x5C, 0x01, 0xA4, 
   0x5C, 0x01, 0xA5, 0x5B, 0x00, 0xA4, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x27, 0xD8, 
   0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 
   0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 
   0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD1, 
   0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x01, 
   0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 
   0xCB, 0x00, 0x35, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 
   0x00, 0x36, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 
   0x3A, 0xC6, 0x00, 0x39, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 
   0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 
   0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x40, 0xBE, 0x01, 
   0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 
   0xBB, 0x00, 0x44, 0xBA, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 
   0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 
   0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 
   0x01, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 
   0x51, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAB, 0x01, 0x53, 
   0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 
   0x00, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 
   0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 
   0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 
   0x01, 0x5F, 0xA0, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 
   0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x65, 0x99, 
   0x00, 0x67, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 
   0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 
   0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x73, 
   0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 
   0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 
   0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x79, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 
   0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 
   0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 
   0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 
   0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 
   0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 
   0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 
   0x73, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x00, 0x8E, 0x71, 
   0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 
   0x90, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x96, 0x6A, 
   0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 
   0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9A, 0x64, 0x01, 0x9B, 
   0x64, 0x01, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 
   0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 0x60, 0x00, 0x9F, 0x5F, 0x00, 0xA0, 0x5E, 0x00, 
   0xA1, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA2, 0x5C, 0x01, 0xA3, 
   0x5C, 0x01, 0xA4, 0x5B, 0x01, 0xA4, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 
   0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x01, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x00, 
   0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 
   0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 
   0x01, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 
   0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 
   0xCB, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 
   0x01, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x38, 0xC7, 0x00, 
   0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 
   0xC3, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 
   0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBE, 0x00, 
   0x40, 0xBF, 0x01, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 
   0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 
   0x00, 0x47, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x01, 
   0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 
   0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 
   0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 
   0x51, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 
   0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAA, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xA9, 
   0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 
   0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 
   0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x00, 
   0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 
   0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 
   0x01, 0x66, 0x99, 0x01, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x67, 0x97, 0x00, 
   0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 
   0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6C, 0x92, 0x00, 0x6E, 0x91, 
   0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 
   0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 
   0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x8A, 
   0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 
   0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 
   0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 
   0x01, 0x7E, 0x82, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 
   0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 
   0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7C, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 
   0x01, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 
   0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 
   0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 
   0x01, 0x8D, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x6F, 0x00, 0x8F, 0x70, 0x00, 
   0x90, 0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 
   0x6C, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 
   0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x00, 0x9B, 
   0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x01, 0x9D, 0x62, 
   0x00, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 
   0xA0, 0x5F, 0x01, 0xA1, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0x5D, 0x01, 0xA3, 
   0x5D, 0x00, 0xA3, 0x5C, 0x01, 0xA3, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 
   0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 
   0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x01, 0x2A, 0xD5, 0x01, 0x2B, 0xD5, 0x00, 0x2A, 
   0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 
   0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 
   0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 
   0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 
   0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 
   0x38, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 
   0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 
   0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 
   0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 
   0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x01, 
   0x48, 0xB7, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x01, 0x4D, 0xB2, 
   0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 
   0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x53, 
   0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 
   0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x57, 0xA8, 0x01, 
   0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 
   0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 
   0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 
   0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 
   0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 
   0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 
   0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 
   0x01, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 
   0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 
   0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 
   0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 
   0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 
   0x80, 0x7F, 0x01, 0x80, 0x7E, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 
   0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 
   0x00, 0x86, 0x79, 0x01, 0x85, 0x79, 0x01, 0x86, 0x78, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 
   0x88, 0x77, 0x01, 0x88, 0x76, 0x00, 0x89, 0x77, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x76, 0x00, 0x8A, 
   0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8C, 0x72, 
   0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x01, 
   0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x93, 
   0x6D, 0x00, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 
   0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x67, 0x00, 
   0x97, 0x67, 0x00, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 
   0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x63, 0x00, 0x9C, 0x62, 
   0x00, 0x9D, 0x62, 0x01, 0x9E, 0x62, 0x00, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x01, 
   0xA0, 0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x01, 0xA2, 0x5E, 0x00, 0xA2, 0x5D, 0x00, 0xA2, 
   0x5D, 0x01, 0xA2, 0x5C, 0x00, 0xA3, 0xDC, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xD9, 
   0x00, 0x26, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 
   0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 
   0xD4, 0x00, 0x2A, 0xD4, 0x01, 0x2B, 0xD3, 0x00, 0x2B, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 
   0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x01, 
   0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x01, 0x32, 0xCD, 0x00, 0x32, 
   0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 
   0x00, 0x36, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC7, 0x00, 
   0x38, 0xC8, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3C, 0xC3, 
   0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x40, 0xC0, 0x00, 
   0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x01, 0x42, 
   0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 
   0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB7, 0x00, 
   0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 
   0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4C, 0xB2, 
   0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 
   0x4F, 0xB0, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x51, 0xAE, 0x00, 0x52, 
   0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 
   0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 
   0x57, 0xA7, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 
   0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 
   0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 
   0x01, 0x65, 0x99, 0x00, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 
   0x68, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 
   0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 
   0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6E, 0x90, 0x01, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 
   0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 
   0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 
   0x78, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 
   0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x82, 
   0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 
   0x80, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 
   0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 
   0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x79, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 0x88, 0x77, 0x01, 0x8A, 0x75, 0x00, 0x8A, 
   0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 
   0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 
   0x8F, 0x70, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 
   0x6D, 0x00, 0x93, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x94, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 
   0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 
   0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x63, 
   0x01, 0x9D, 0x63, 0x01, 0x9E, 0x62, 0x00, 0x9D, 0x62, 0x01, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 
   0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA0, 0x5E, 0x00, 0xA1, 0x5E, 0x01, 0xA1, 
   0x5D, 0x01, 0xA3, 0x5D, 0x01, 0xA3, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 
   0x00, 0x25, 0xDA, 0x00, 0x26, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x01, 0x27, 0xD7, 0x00, 
   0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD7, 0x01, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 
   0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 
   0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 
   0x30, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x31, 
   0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCB, 0x00, 0x35, 0xCB, 
   0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 
   0x37, 0xC8, 0x01, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 
   0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 
   0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 
   0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 0x00, 0x40, 0xBE, 0x01, 0x41, 0xBD, 0x00, 0x42, 
   0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 
   0x00, 0x45, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x46, 0xB8, 0x01, 
   0x47, 0xB7, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB6, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x4A, 
   0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 
   0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 
   0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x01, 0x50, 0xAE, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 
   0xAD, 0x00, 0x52, 0xAC, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 
   0x00, 0x54, 0xAB, 0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x57, 0xA9, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 
   0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 
   0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x01, 0x64, 0x9B, 
   0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 
   0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 
   0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 
   0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x00, 
   0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 
   0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 
   0x00, 0x75, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x89, 0x01, 0x76, 0x8A, 0x00, 0x77, 0x88, 0x00, 
   0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 
   0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 
   0x7E, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x80, 0x7E, 0x01, 0x81, 
   0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 
   0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 
   0x87, 0x78, 0x01, 0x87, 0x77, 0x00, 0x88, 0x78, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 
   0x75, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8B, 0x73, 
   0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 
   0x8F, 0x71, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x92, 
   0x6E, 0x01, 0x91, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 0x94, 0x6B, 
   0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x01, 0x96, 0x69, 0x00, 0x96, 0x69, 0x01, 
   0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 
   0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 0x9C, 0x63, 
   0x01, 0x9C, 0x63, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x62, 0x01, 0x9D, 0x61, 0x01, 0x9E, 0x61, 0x01, 
   0x9E, 0x61, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 0x5E, 0x01, 0xA1, 
   0x5E, 0x01, 0xA2, 0x5D, 0x01, 0xA2, 0xDC, 0x00, 0x22, 0xDC, 0x01, 0x23, 0xDB, 0x00, 0x24, 0xDB, 
   0x00, 0x25, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 
   0x27, 0xD8, 0x01, 0x28, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 
   0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2B, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 
   0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2E, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2E, 0xD1, 0x01, 
   0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 
   0xCE, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCD, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 
   0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x39, 
   0xC5, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x00, 0x3C, 0xC4, 0x01, 0x3C, 0xC3, 
   0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC1, 0x01, 0x3D, 0xC1, 0x00, 0x3F, 0xC1, 0x00, 
   0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 
   0xBD, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBB, 
   0x00, 0x45, 0xBA, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 
   0x46, 0xB8, 0x01, 0x48, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 
   0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 
   0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAE, 0x00, 0x51, 
   0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x53, 0xAB, 
   0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 
   0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x00, 0x59, 
   0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 0xA3, 0x01, 0x5B, 0xA4, 
   0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 
   0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 
   0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9C, 
   0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 
   0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 
   0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 
   0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 
   0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 
   0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 
   0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x78, 
   0x86, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 
   0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7D, 0x82, 0x00, 
   0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x84, 0x7C, 
   0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x86, 0x7A, 0x01, 0x85, 0x79, 0x01, 
   0x86, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x77, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 
   0x76, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 
   0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x00, 0x8D, 0x71, 0x00, 
   0x8E, 0x70, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 
   0x6E, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 
   0x00, 0x94, 0x6C, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 
   0x96, 0x69, 0x01, 0x96, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x01, 0x98, 
   0x66, 0x01, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 
   0x00, 0x9B, 0x64, 0x00, 0x9C, 0x62, 0x01, 0x9C, 0x62, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 
   0x9E, 0x61, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0xA0, 0x60, 0x01, 0xA0, 0x5F, 0x01, 0xA1, 
   0x5F, 0x01, 0xA2, 0x5E, 0x01, 0xA2, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 
   0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 
   0x26, 0xD8, 0x00, 0x26, 0xD7, 0x01, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 
   0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 
   0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 
   0x2F, 0xD1, 0x01, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 
   0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x01, 
   0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 
   0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 
   0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 
   0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 
   0xBE, 0x01, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBB, 
   0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x45, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 
   0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 
   0xB7, 0x00, 0x49, 0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB3, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB2, 0x00, 
   0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 
   0xAE, 0x00, 0x51, 0xAD, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 
   0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x00, 
   0x56, 0xA8, 0x00, 0x56, 0xA9, 0x01, 0x58, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 
   0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 
   0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA2, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA0, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9B, 
   0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 
   0x66, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 
   0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x00, 
   0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 
   0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 
   0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8B, 0x01, 0x75, 0x89, 0x01, 
   0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 
   0x87, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x84, 0x00, 0x7A, 0x84, 
   0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 
   0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 
   0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 
   0x00, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 
   0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 
   0x76, 0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 
   0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 
   0x8D, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 
   0x6F, 0x00, 0x90, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6C, 
   0x00, 0x94, 0x6B, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x01, 
   0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 
   0x66, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x64, 
   0x01, 0x9B, 0x64, 0x01, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x62, 0x01, 
   0x9E, 0x62, 0x01, 0x9E, 0x61, 0x00, 0x9F, 0x60, 0x01, 0x9F, 0x60, 0x00, 0xA0, 0x5F, 0x00, 0xA0, 
   0x5E, 0x01, 0xA1, 0x5E, 0x00, 0xA1, 0xDD, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 
   0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xDA, 0x00, 
   0x25, 0xD9, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 
   0xD6, 0x01, 0x29, 0xD6, 0x01, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 
   0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2D, 0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x31, 
   0xCE, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 
   0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x01, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 
   0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC8, 0x01, 0x38, 
   0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 
   0x3E, 0xC1, 0x00, 0x3F, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 
   0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBD, 
   0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBB, 0x00, 0x45, 0xBA, 0x00, 
   0x46, 0xBA, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x47, 0xB8, 0x01, 0x49, 
   0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 
   0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 
   0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 0x50, 
   0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 
   0x01, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 
   0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 
   0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA4, 
   0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 
   0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x00, 0x60, 
   0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 
   0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 
   0x66, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 
   0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 
   0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 
   0x8F, 0x01, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x73, 0x8C, 
   0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 
   0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 
   0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 
   0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 
   0x7D, 0x81, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x7F, 
   0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 
   0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 
   0x85, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x00, 0x88, 
   0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 
   0x01, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 
   0x8D, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 
   0x70, 0x00, 0x90, 0x6E, 0x01, 0x90, 0x6E, 0x00, 0x92, 0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 
   0x01, 0x92, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 
   0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x97, 0x69, 0x00, 0x96, 0x68, 0x01, 0x97, 0x67, 0x00, 0x98, 
   0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x00, 0x9A, 0x65, 
   0x01, 0x9B, 0x65, 0x00, 0x9C, 0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x63, 0x00, 0x9C, 0x62, 0x01, 
   0x9D, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x60, 0x01, 0xA0, 
   0x5F, 0x00, 0xA0, 0x5F, 0x01, 0xA1, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 
   0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 
   0x25, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 
   0xD7, 0x01, 0x28, 0xD7, 0x01, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 
   0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2D, 0xD1, 0x01, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 0x01, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x01, 0x2F, 
   0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 
   0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 
   0x35, 0xC9, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x38, 
   0xC7, 0x00, 0x39, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 
   0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 
   0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3F, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 
   0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBD, 0x00, 0x43, 0xBD, 
   0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 
   0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 
   0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 
   0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4C, 0xB2, 0x00, 0x4C, 0xB2, 0x00, 
   0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 
   0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 
   0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 
   0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA2, 0x01, 
   0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5F, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 
   0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 
   0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 
   0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x99, 0x01, 0x67, 0x97, 0x00, 0x67, 
   0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 
   0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 
   0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 
   0x8F, 0x01, 0x70, 0x90, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 
   0x01, 0x73, 0x8C, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 
   0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 
   0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 
   0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 
   0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 
   0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 
   0x85, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 0x87, 
   0x78, 0x01, 0x87, 0x78, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 
   0x01, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 
   0x6F, 0x00, 0x8F, 0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x01, 0x93, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x00, 
   0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 
   0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 
   0x01, 0x9B, 0x65, 0x01, 0x9B, 0x65, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0x64, 0x00, 0x9C, 0x63, 0x01, 
   0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9F, 0x61, 0x01, 0x9F, 0x61, 0x00, 0x9F, 
   0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x01, 0x22, 0xDC, 
   0x01, 0x22, 0xDD, 0x00, 0x22, 0xDB, 0x01, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x01, 
   0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x01, 0x28, 
   0xD8, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 
   0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 
   0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 
   0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 
   0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 
   0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC8, 0x00, 0x37, 
   0xC8, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x00, 0x39, 0xC5, 
   0x00, 0x3A, 0xC5, 0x01, 0x3B, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x01, 
   0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3F, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 
   0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 
   0x01, 0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 
   0x45, 0xBB, 0x00, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 
   0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x48, 0xB6, 0x01, 0x4A, 0xB6, 0x00, 0x4A, 0xB6, 
   0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x01, 0x4C, 0xB2, 0x00, 
   0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x01, 0x4F, 
   0xB0, 0x01, 0x50, 0xAF, 0x01, 0x51, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAD, 
   0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAB, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 
   0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA8, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA6, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 
   0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 
   0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 
   0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 
   0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 
   0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 
   0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6B, 0x93, 0x00, 
   0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 
   0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 
   0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 
   0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 
   0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 
   0x7C, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 
   0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7E, 0x01, 0x80, 0x7E, 0x01, 0x82, 0x7D, 
   0x01, 0x82, 0x7E, 0x01, 0x82, 0x7C, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 
   0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 
   0x78, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 
   0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 
   0x94, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 
   0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x66, 
   0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9C, 0x64, 0x00, 0x9B, 0x63, 0x01, 
   0x9C, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9E, 0x62, 0x01, 0x9E, 0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 
   0x60, 0x01, 0x9F, 0x5F, 0x00, 0xA0, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x20, 0xDD, 0x00, 0x21, 0xDD, 
   0x01, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 
   0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x26, 0xD9, 0x00, 0x27, 
   0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 
   0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2C, 0xD4, 0x01, 0x2C, 0xD3, 0x00, 
   0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 
   0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 
   0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 
   0x34, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 
   0xC8, 0x01, 0x37, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3C, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3E, 
   0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBD, 
   0x00, 0x42, 0xBE, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 
   0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 
   0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 
   0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB3, 0x00, 
   0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 
   0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 
   0x01, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 
   0x54, 0xAB, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x57, 
   0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 
   0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 
   0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 
   0x00, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 
   0x64, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 
   0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6A, 0x94, 0x00, 0x6C, 0x94, 0x01, 
   0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 
   0x91, 0x00, 0x6E, 0x90, 0x01, 0x70, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 
   0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8B, 0x01, 
   0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 
   0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 
   0x00, 0x7A, 0x85, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x84, 0x00, 0x7A, 0x84, 0x01, 0x7C, 0x84, 0x00, 
   0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 
   0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 
   0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 
   0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 
   0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x77, 
   0x01, 0x89, 0x75, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x73, 0x01, 
   0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 
   0x70, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6E, 0x01, 0x91, 0x6F, 
   0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 
   0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x96, 0x69, 0x00, 0x95, 0x69, 0x01, 0x96, 
   0x69, 0x00, 0x96, 0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 
   0x01, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 0x64, 0x00, 
   0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0x63, 0x01, 0x9D, 0x62, 0x00, 0x9E, 0x62, 0x01, 0x9E, 
   0x61, 0x01, 0x9E, 0x61, 0x01, 0x9F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 
   0x00, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 
   0x23, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 
   0xD8, 0x01, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 
   0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x01, 
   0x2C, 0xD3, 0x00, 0x2D, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 
   0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 
   0x00, 0x31, 0xCD, 0x00, 0x31, 0xCD, 0x00, 0x33, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 
   0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x01, 0x36, 
   0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 
   0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 
   0x3C, 0xC3, 0x01, 0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 
   0xC1, 0x01, 0x3F, 0xC0, 0x01, 0x40, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 
   0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 
   0x44, 0xBB, 0x01, 0x44, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 
   0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x01, 0x48, 0xB8, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 
   0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 
   0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB2, 0x00, 0x4E, 
   0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 
   0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 
   0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 
   0xA8, 0x01, 0x57, 0xA9, 0x00, 0x58, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 
   0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 
   0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 
   0x01, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 
   0x64, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 
   0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 
   0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 
   0x91, 0x00, 0x6F, 0x90, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x90, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 
   0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x76, 0x8A, 0x00, 0x76, 
   0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 
   0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 
   0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 
   0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7C, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x85, 
   0x79, 0x01, 0x87, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x77, 
   0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x01, 
   0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 
   0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 
   0x00, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 
   0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 
   0x69, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 
   0x00, 0x98, 0x67, 0x00, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x01, 
   0x9B, 0x64, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x00, 0x9D, 0x62, 0x00, 0x9D, 0x61, 0x01, 0x9E, 
   0x62, 0x00, 0x9E, 0x61, 0x00, 0x9E, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 
   0x00, 0x20, 0xDE, 0x00, 0x22, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDB, 0x00, 
   0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 
   0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x27, 0xD7, 0x01, 0x28, 0xD6, 
   0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x01, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 
   0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2D, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 
   0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCE, 
   0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x01, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 
   0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xCA, 0x01, 0x36, 0xCA, 0x00, 0x36, 
   0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x38, 0xC7, 
   0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x01, 
   0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 
   0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 
   0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x41, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 
   0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x46, 
   0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x49, 0xB7, 
   0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 
   0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 
   0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x51, 0xAF, 
   0x01, 0x51, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x00, 
   0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 
   0xAA, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 
   0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 
   0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 
   0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 
   0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 
   0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 
   0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x69, 0x95, 0x01, 0x6B, 0x94, 0x00, 
   0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 
   0x91, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x6F, 0x8F, 
   0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 
   0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 
   0x8A, 0x01, 0x76, 0x8A, 0x00, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x77, 0x87, 
   0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 
   0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 
   0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 
   0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 
   0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 
   0x7A, 0x00, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 
   0x00, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x01, 
   0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 
   0x71, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x00, 0x90, 0x6F, 
   0x01, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 
   0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x00, 0x95, 
   0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x68, 
   0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0x65, 0x01, 
   0x9B, 0x64, 0x01, 0x9B, 0x63, 0x00, 0x9B, 0x63, 0x00, 0x9C, 0x63, 0x01, 0x9C, 0x62, 0x01, 0x9D, 
   0x61, 0x01, 0x9E, 0x62, 0x01, 0x9E, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 
   0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x21, 0xDC, 0x00, 0x22, 0xDD, 0x00, 
   0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xD9, 0x01, 0x25, 
   0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x26, 0xD8, 0x00, 0x28, 0xD8, 0x00, 0x27, 0xD7, 
   0x01, 0x29, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 
   0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 
   0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x30, 0xCF, 
   0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 
   0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xCA, 0x00, 0x35, 
   0xC9, 0x01, 0x35, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x01, 0x38, 0xC8, 0x01, 0x37, 0xC7, 
   0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 
   0x3A, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 
   0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3F, 0xC1, 0x01, 0x3E, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x3F, 0xC0, 
   0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 
   0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBB, 0x00, 0x45, 
   0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB8, 
   0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 
   0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 0x4D, 
   0xB2, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x4F, 0xAF, 
   0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x01, 
   0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAB, 0x00, 0x55, 
   0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 
   0x00, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 
   0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 
   0xA1, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 
   0x00, 0x60, 0x9F, 0x01, 0x61, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 
   0x62, 0x9C, 0x00, 0x62, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 
   0x9A, 0x00, 0x66, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x98, 0x00, 0x66, 0x98, 0x00, 0x68, 0x97, 
   0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 
   0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x01, 0x6C, 
   0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 
   0x00, 0x6F, 0x90, 0x01, 0x70, 0x8E, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 
   0x73, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 
   0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x88, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 
   0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 
   0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 
   0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x7F, 
   0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 
   0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 
   0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x86, 0x78, 0x00, 0x88, 0x78, 
   0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 
   0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8D, 0x73, 0x01, 0x8D, 
   0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 
   0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x91, 0x6E, 0x00, 
   0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x00, 0x95, 
   0x6A, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x97, 0x68, 
   0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x01, 0x9A, 0x65, 0x01, 
   0x9A, 0x65, 0x00, 0x9A, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9B, 0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 
   0x62, 0x01, 0x9D, 0x62, 0x01, 0x9E, 0xE1, 0x01, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 
   0x00, 0x1F, 0xDF, 0x00, 0x21, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 
   0x22, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 
   0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD8, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x28, 0xD8, 
   0x00, 0x27, 0xD7, 0x00, 0x29, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 
   0x2A, 0xD4, 0x01, 0x2B, 0xD4, 0x00, 0x2C, 0xD4, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 
   0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 
   0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 
   0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 
   0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 
   0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 
   0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 
   0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 
   0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBE, 0x00, 
   0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 
   0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB7, 
   0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 
   0x4B, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 
   0x00, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x52, 0xAE, 0x00, 0x51, 0xAD, 0x01, 
   0x52, 0xAC, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 
   0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 
   0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 
   0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5C, 
   0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 
   0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x01, 
   0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9A, 0x01, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 
   0x01, 0x67, 0x98, 0x00, 0x68, 0x96, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x01, 
   0x6A, 0x95, 0x00, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 
   0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 
   0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 
   0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 
   0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x75, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 
   0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 
   0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 
   0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 
   0x00, 0x80, 0x7F, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x82, 0x7E, 0x00, 
   0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 
   0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x85, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 
   0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 
   0x8A, 0x75, 0x00, 0x8A, 0x74, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 
   0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x00, 0x8F, 0x71, 
   0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6E, 0x00, 0x90, 0x6E, 0x00, 0x92, 0x6E, 0x01, 
   0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 0x93, 0x6B, 0x01, 0x95, 
   0x6B, 0x00, 0x94, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x01, 0x97, 0x68, 
   0x00, 0x97, 0x68, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 0x99, 0x66, 0x00, 
   0x9A, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 0x63, 0x01, 0x9C, 
   0x63, 0x00, 0x9C, 0x63, 0x01, 0x9D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xDF, 
   0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x01, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 
   0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDB, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 
   0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 
   0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 
   0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 
   0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 
   0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 
   0x31, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 0xCC, 0x00, 0x34, 
   0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 
   0x00, 0x38, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 
   0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x01, 0x3D, 
   0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 
   0x00, 0x40, 0xBF, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 
   0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x01, 0x43, 0xBB, 0x01, 0x43, 0xBB, 0x00, 0x44, 
   0xBB, 0x00, 0x45, 0xBB, 0x01, 0x45, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 
   0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 
   0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 
   0x00, 0x4F, 0xAF, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 
   0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAD, 0x00, 0x53, 0xAB, 0x00, 0x53, 0xAB, 0x01, 0x54, 
   0xAB, 0x01, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA8, 
   0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 
   0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 
   0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 
   0x00, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x01, 
   0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 
   0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x95, 0x01, 
   0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 
   0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 
   0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 
   0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 
   0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 
   0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x78, 0x86, 0x00, 
   0x79, 0x85, 0x00, 0x79, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 
   0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 
   0x00, 0x7F, 0x81, 0x00, 0x80, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x81, 0x7E, 0x00, 0x80, 0x7E, 0x01, 
   0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7B, 0x01, 0x84, 
   0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 
   0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 
   0x89, 0x75, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 
   0x73, 0x01, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 0x71, 
   0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x01, 
   0x91, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x69, 
   0x01, 0x97, 0x68, 0x00, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0x67, 0x01, 0x98, 0x67, 0x01, 
   0x99, 0x66, 0x00, 0x9A, 0x65, 0x00, 0x9A, 0x65, 0x00, 0x9B, 0x64, 0x01, 0x9B, 0x64, 0x00, 0x9C, 
   0x63, 0x01, 0x9C, 0x63, 0x01, 0x9D, 0xE2, 0x00, 0x1D, 0xE1, 0x01, 0x1E, 0xE1, 0x01, 0x1E, 0xE1, 
   0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x01, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 
   0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 
   0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 
   0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 
   0x2A, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2B, 
   0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 
   0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCE, 0x00, 
   0x31, 0xCD, 0x00, 0x31, 0xCD, 0x01, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 
   0xCB, 0x00, 0x35, 0xCA, 0x01, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 
   0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 
   0x3A, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 
   0xC4, 0x01, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 
   0x00, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 
   0x41, 0xBE, 0x01, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x01, 0x43, 0xBD, 0x00, 0x44, 0xBC, 0x01, 0x44, 
   0xBB, 0x00, 0x45, 0xBB, 0x01, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x47, 0xB9, 
   0x00, 0x47, 0xB9, 0x01, 0x47, 0xB8, 0x01, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x01, 
   0x4A, 0xB5, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x01, 0x4C, 0xB4, 0x01, 0x4C, 
   0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 
   0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xAF, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 
   0x51, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 
   0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 
   0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x01, 
   0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5B, 
   0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5D, 0xA0, 
   0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 
   0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 
   0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 
   0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 
   0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x93, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 
   0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 
   0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 
   0x8B, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 
   0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 
   0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 
   0x83, 0x00, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 
   0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 
   0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 
   0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 
   0x00, 0x86, 0x78, 0x01, 0x86, 0x78, 0x01, 0x88, 0x77, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 
   0x89, 0x76, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 
   0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 
   0x00, 0x8E, 0x70, 0x01, 0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 
   0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 
   0x6C, 0x01, 0x93, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x94, 0x6A, 0x00, 0x95, 0x69, 0x01, 0x96, 0x6A, 
   0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x67, 0x00, 0x98, 0x67, 0x00, 
   0x98, 0x66, 0x01, 0x99, 0x66, 0x01, 0x9A, 0x65, 0x01, 0x9B, 0x65, 0x01, 0x9B, 0x64, 0x00, 0x9B, 
   0x64, 0x00, 0x9C, 0x64, 0x01, 0x9C, 0xE3, 0x00, 0x1C, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 
   0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x01, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x01, 
   0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x21, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 
   0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x25, 0xD9, 
   0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 
   0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 
   0xD3, 0x01, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 
   0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 0x01, 
   0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 
   0xCB, 0x00, 0x34, 0xCC, 0x00, 0x35, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x35, 0xC9, 
   0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 
   0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 
   0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 
   0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 
   0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 
   0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 
   0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB2, 
   0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 
   0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 
   0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 
   0x00, 0x56, 0xA9, 0x01, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 
   0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 
   0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 
   0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 
   0x9C, 0x01, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x65, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 
   0x69, 0x97, 0x00, 0x68, 0x96, 0x01, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 
   0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x01, 
   0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 
   0x8D, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 
   0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x89, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 
   0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7A, 
   0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 
   0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 
   0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 
   0x7C, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 
   0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x78, 0x01, 
   0x88, 0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 
   0x74, 0x00, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 
   0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x6F, 0x00, 
   0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 
   0x6D, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x6A, 
   0x00, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 
   0x98, 0x67, 0x00, 0x98, 0x66, 0x00, 0x99, 0x66, 0x01, 0x99, 0x65, 0x00, 0x9B, 0x65, 0x01, 0x9B, 
   0x64, 0x01, 0x9B, 0x64, 0x01, 0x9B, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 
   0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 
   0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x22, 
   0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 
   0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x27, 0xD7, 0x00, 
   0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 
   0xD4, 0x00, 0x2C, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x01, 0x2D, 0xD1, 
   0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 
   0x30, 0xCE, 0x00, 0x31, 0xCE, 0x01, 0x32, 0xCD, 0x01, 0x31, 0xCE, 0x00, 0x32, 0xCC, 0x01, 0x33, 
   0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x35, 0xCA, 0x01, 0x35, 0xC9, 
   0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x01, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 
   0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC5, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 
   0xC4, 0x01, 0x3C, 0xC3, 0x00, 0x3B, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 
   0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x00, 0x40, 0xBF, 0x00, 0x42, 0xBD, 0x00, 0x41, 0xBD, 0x01, 0x43, 0xBD, 0x00, 0x42, 
   0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 
   0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 
   0xB5, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 
   0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 
   0x50, 0xAF, 0x01, 0x50, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 
   0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 
   0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 
   0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 
   0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 
   0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 
   0x9D, 0x01, 0x62, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x97, 0x01, 
   0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 
   0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 
   0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 
   0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x89, 0x00, 0x75, 0x8A, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 
   0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 
   0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 
   0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 
   0x7F, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 
   0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 
   0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x88, 0x78, 0x01, 
   0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 
   0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8C, 0x73, 0x00, 0x8D, 0x72, 
   0x00, 0x8D, 0x71, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 
   0x90, 0x70, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x92, 
   0x6D, 0x01, 0x93, 0x6D, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 
   0x01, 0x95, 0x69, 0x01, 0x96, 0x6A, 0x01, 0x96, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 
   0x98, 0x67, 0x01, 0x99, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x65, 0x00, 0x9A, 0x65, 0x01, 0x9A, 
   0x65, 0x01, 0x9A, 0x65, 0x00, 0x9B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 
   0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x01, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 
   0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x22, 
   0xDD, 0x01, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x01, 0x24, 0xDB, 0x00, 0x25, 0xDB, 0x00, 0x25, 0xDA, 
   0x00, 0x26, 0xD9, 0x01, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 
   0x28, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 
   0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 
   0x00, 0x2E, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 
   0x2F, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x33, 
   0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x35, 0xCA, 
   0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC8, 0x00, 
   0x38, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 
   0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 
   0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 
   0xBD, 0x01, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x44, 0xBA, 
   0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB9, 0x00, 0x47, 0xB8, 0x00, 
   0x47, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 
   0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 
   0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x50, 0xB0, 0x00, 
   0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 
   0xAD, 0x00, 0x53, 0xAD, 0x01, 0x53, 0xAB, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 
   0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 
   0x58, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 
   0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 
   0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 
   0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 
   0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9B, 
   0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x65, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 
   0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 
   0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 
   0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 
   0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 
   0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 
   0x01, 0x75, 0x8B, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 
   0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 
   0x85, 0x00, 0x7A, 0x84, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7E, 0x80, 0x00, 
   0x7F, 0x80, 0x00, 0x80, 0x80, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 
   0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x85, 0x7B, 
   0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x85, 0x7A, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 
   0x88, 0x77, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 0x01, 0x8A, 
   0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x73, 
   0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x01, 
   0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6E, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x00, 0x93, 0x6B, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 
   0x00, 0x94, 0x6A, 0x01, 0x96, 0x6A, 0x00, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 
   0x97, 0x67, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x01, 0x9A, 0x66, 0x00, 0x9A, 
   0x65, 0x00, 0x9A, 0x65, 0x01, 0x9B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 
   0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 
   0x1F, 0xE0, 0x01, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 
   0xDD, 0x00, 0x23, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x01, 0x23, 0xDB, 0x00, 0x24, 0xDA, 
   0x00, 0x25, 0xDA, 0x01, 0x25, 0xD9, 0x00, 0x25, 0xD8, 0x00, 0x27, 0xD8, 0x01, 0x26, 0xD8, 0x00, 
   0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 
   0xD5, 0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2D, 0xD2, 
   0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 
   0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x31, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x31, 
   0xCD, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 
   0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 
   0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 
   0xC5, 0x01, 0x3A, 0xC5, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 
   0x01, 0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC1, 0x00, 0x3F, 0xC0, 0x01, 
   0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 
   0xBD, 0x01, 0x42, 0xBC, 0x01, 0x42, 0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBC, 0x01, 0x44, 0xBB, 
   0x00, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x01, 0x45, 0xB9, 0x01, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x00, 
   0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 
   0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 
   0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x01, 
   0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x52, 
   0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAB, 
   0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 
   0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 
   0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 
   0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 
   0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9E, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x61, 
   0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9B, 0x01, 0x64, 0x9C, 0x00, 0x64, 0x9B, 
   0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 
   0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 
   0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 
   0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 
   0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 0x71, 
   0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x73, 0x8B, 
   0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 
   0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x77, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 
   0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 
   0x7E, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 
   0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 
   0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 
   0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 
   0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 
   0x00, 0x8D, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x70, 0x01, 
   0x8F, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 
   0x6E, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 
   0x01, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 
   0x97, 0x69, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 
   0x66, 0x01, 0x9A, 0x65, 0x01, 0x9A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 
   0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 
   0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 
   0xDE, 0x01, 0x22, 0xDD, 0x01, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 
   0x00, 0x24, 0xDB, 0x01, 0x25, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 
   0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x2A, 
   0xD6, 0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD4, 0x01, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 
   0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 
   0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x00, 0x31, 
   0xCD, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 0xCB, 
   0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 
   0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x01, 0x38, 0xC6, 0x00, 0x39, 
   0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 
   0x01, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 
   0x3E, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 
   0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBC, 
   0x00, 0x44, 0xBA, 0x00, 0x44, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 
   0x47, 0xB9, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 
   0xB6, 0x01, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 
   0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 
   0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAE, 0x01, 0x51, 
   0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 
   0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 
   0x57, 0xA9, 0x01, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 
   0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 
   0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x62, 0x9B, 0x00, 0x63, 0x9B, 
   0x01, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 
   0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 
   0x96, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 
   0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x90, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 
   0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 
   0x00, 0x73, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 
   0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x79, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x84, 
   0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 
   0x7F, 0x80, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 
   0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7D, 0x00, 0x83, 0x7C, 
   0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 
   0x87, 0x79, 0x01, 0x87, 0x79, 0x01, 0x88, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 
   0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x73, 
   0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 
   0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 
   0x6E, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6C, 
   0x01, 0x94, 0x6B, 0x00, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x96, 0x6A, 0x00, 0x96, 0x69, 0x01, 
   0x96, 0x69, 0x01, 0x97, 0x68, 0x00, 0x97, 0x68, 0x00, 0x98, 0x67, 0x00, 0x99, 0x67, 0x01, 0x99, 
   0x67, 0x00, 0x99, 0x66, 0x01, 0x9A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 
   0x00, 0x1B, 0xE2, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x01, 0x1D, 0xE1, 0x01, 
   0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x01, 0x1F, 0xDF, 0x00, 0x1F, 0xDE, 0x00, 0x20, 0xDE, 0x01, 0x20, 
   0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 
   0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 
   0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 
   0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x01, 0x2B, 0xD4, 0x01, 0x2B, 0xD4, 
   0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 
   0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 
   0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x33, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x01, 
   0x37, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x38, 
   0xC6, 0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 
   0x00, 0x3C, 0xC4, 0x01, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3E, 0xC1, 0x01, 
   0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x40, 
   0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 
   0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x01, 
   0x47, 0xB8, 0x01, 0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x48, 
   0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 
   0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x01, 
   0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x50, 
   0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 
   0x01, 0x54, 0xAC, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x00, 
   0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 
   0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 
   0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 
   0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 
   0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 
   0x00, 0x64, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 
   0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 
   0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 
   0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x71, 
   0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x73, 0x8C, 
   0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x74, 0x8A, 0x00, 0x76, 0x89, 0x00, 
   0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 
   0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7A, 0x84, 
   0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 
   0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 
   0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x86, 0x7A, 0x00, 
   0x86, 0x79, 0x01, 0x87, 0x78, 0x00, 0x86, 0x78, 0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 
   0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 0x75, 
   0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 
   0x8D, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 
   0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x01, 0x93, 0x6C, 
   0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x6A, 0x00, 
   0x95, 0x69, 0x01, 0x97, 0x69, 0x00, 0x97, 0x68, 0x01, 0x97, 0x68, 0x01, 0x98, 0x68, 0x01, 0x98, 
   0x67, 0x00, 0x99, 0x66, 0x00, 0x99, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x01, 0x1B, 0xE3, 
   0x00, 0x1C, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x01, 0x1D, 0xE1, 0x00, 
   0x1E, 0xE1, 0x00, 0x1F, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 
   0xDF, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x21, 0xDD, 0x01, 0x22, 0xDC, 0x00, 0x23, 0xDC, 
   0x00, 0x23, 0xDB, 0x01, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 0x01, 0x25, 0xDA, 0x00, 
   0x25, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x01, 0x28, 
   0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x01, 0x2A, 0xD5, 0x01, 0x2B, 0xD4, 0x00, 0x2A, 0xD4, 
   0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2D, 0xD1, 0x00, 0x2F, 0xD1, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 
   0xCE, 0x01, 0x31, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x01, 0x32, 0xCC, 
   0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 
   0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 
   0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 
   0x01, 0x3C, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 
   0x3D, 0xC1, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x3F, 0xBF, 0x00, 0x40, 
   0xBF, 0x00, 0x41, 0xBF, 0x00, 0x42, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 
   0x01, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 
   0x45, 0xB9, 0x01, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 
   0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 
   0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB1, 0x00, 
   0x4D, 0xB1, 0x01, 0x4F, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x4F, 0xAF, 0x00, 0x50, 
   0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 
   0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 
   0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 
   0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 
   0x00, 0x5B, 0xA3, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 
   0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 
   0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 
   0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 
   0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 
   0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 
   0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 
   0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 
   0x01, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x01, 
   0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x77, 0x88, 0x00, 0x77, 0x89, 0x00, 0x77, 0x87, 0x01, 0x78, 
   0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x87, 0x00, 0x79, 0x85, 0x01, 0x7A, 0x86, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 
   0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 
   0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x84, 0x7B, 0x00, 
   0x86, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x78, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 
   0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 
   0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x90, 
   0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 
   0x00, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0x6C, 0x00, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x00, 
   0x95, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x69, 0x01, 0x96, 0x68, 0x01, 0x97, 0x68, 0x01, 0x97, 
   0x67, 0x01, 0x98, 0x66, 0x01, 0x99, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE4, 0x01, 0x1A, 0xE4, 
   0x00, 0x1A, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 
   0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x01, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 
   0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 
   0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDB, 0x01, 0x25, 0xDA, 0x00, 
   0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 
   0xD7, 0x00, 0x28, 0xD6, 0x01, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD5, 
   0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 
   0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 
   0xCF, 0x01, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x01, 0x31, 0xCD, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 
   0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x34, 0xCA, 0x01, 
   0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x38, 
   0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 
   0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 
   0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 
   0xC0, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x01, 0x42, 0xBD, 
   0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 
   0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 
   0xB8, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 
   0x00, 0x4B, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 
   0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x4F, 
   0xAF, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x00, 0x52, 0xAD, 
   0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 
   0x55, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA4, 
   0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 
   0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 
   0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 
   0x01, 0x63, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 
   0x65, 0x99, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 
   0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 
   0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 
   0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x6F, 
   0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 
   0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 
   0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 
   0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 
   0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 
   0x7D, 0x83, 0x00, 0x7E, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 
   0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 
   0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x00, 0x84, 0x7B, 0x01, 
   0x84, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x87, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 
   0x78, 0x01, 0x87, 0x77, 0x01, 0x89, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 
   0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 
   0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 
   0x70, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 
   0x00, 0x92, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x94, 0x6A, 0x01, 
   0x95, 0x6A, 0x00, 0x95, 0x6A, 0x01, 0x95, 0x69, 0x00, 0x96, 0x69, 0x00, 0x97, 0x69, 0x01, 0x98, 
   0x68, 0x00, 0x98, 0x67, 0x00, 0x98, 0xE6, 0x01, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 
   0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x01, 
   0x1D, 0xE2, 0x01, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x01, 0x1F, 
   0xDF, 0x00, 0x1F, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDC, 
   0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x01, 
   0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 
   0xD8, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 
   0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 
   0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x01, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 
   0xD0, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x01, 0x32, 0xCD, 
   0x00, 0x32, 0xCD, 0x01, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x01, 0x34, 0xCA, 0x00, 
   0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x38, 
   0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 
   0x00, 0x3A, 0xC5, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x01, 
   0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 
   0xBF, 0x01, 0x40, 0xC0, 0x00, 0x41, 0xBF, 0x00, 0x40, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 
   0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x01, 
   0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 
   0xB8, 0x00, 0x47, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x01, 0x4A, 0xB6, 
   0x01, 0x4A, 0xB4, 0x01, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 
   0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 
   0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 
   0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 
   0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x57, 
   0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 
   0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 
   0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 
   0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9E, 
   0x01, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x00, 
   0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 
   0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 
   0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 
   0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x00, 0x6F, 
   0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8E, 
   0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 
   0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x76, 
   0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 
   0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 
   0x80, 0x01, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 
   0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x84, 0x7B, 0x01, 0x83, 0x7B, 0x01, 
   0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 
   0x78, 0x00, 0x88, 0x78, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 
   0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8B, 0x73, 0x01, 
   0x8C, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x00, 0x91, 0x6E, 
   0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6C, 0x00, 
   0x95, 0x6B, 0x01, 0x95, 0x6B, 0x00, 0x95, 0x6A, 0x00, 0x96, 0x69, 0x00, 0x97, 0x68, 0x00, 0x97, 
   0x68, 0x01, 0x97, 0x68, 0x00, 0x98, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 
   0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 
   0x1D, 0xE2, 0x01, 0x1D, 0xE2, 0x00, 0x1E, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1E, 
   0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 
   0x01, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x01, 0x24, 0xDB, 0x00, 
   0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD9, 0x00, 0x27, 
   0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 
   0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 
   0x2D, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 
   0xD0, 0x01, 0x30, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 
   0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x01, 
   0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 
   0xC8, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 
   0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC5, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 
   0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 
   0x00, 0x42, 0xBD, 0x01, 0x42, 0xBC, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x01, 
   0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x46, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 
   0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x01, 0x49, 0xB5, 
   0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB4, 0x01, 
   0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 
   0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 
   0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 
   0x54, 0xAB, 0x01, 0x54, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 
   0xA8, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 
   0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 
   0x00, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 
   0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 
   0x99, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x67, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 0x96, 
   0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x00, 
   0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 
   0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 
   0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 
   0x88, 0x00, 0x76, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7C, 0x83, 0x01, 
   0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 
   0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 
   0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 
   0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x86, 
   0x78, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 
   0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 
   0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x72, 0x00, 0x8F, 
   0x71, 0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x91, 0x6F, 
   0x01, 0x91, 0x6E, 0x00, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x01, 
   0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x00, 0x95, 0x69, 0x00, 0x95, 0x69, 0x00, 0x96, 
   0x69, 0x01, 0x97, 0x68, 0x01, 0x97, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x01, 0x19, 0xE6, 
   0x01, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 
   0x1C, 0xE2, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x01, 0x1E, 0xE1, 0x00, 0x1E, 
   0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 
   0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 0x01, 0x23, 0xDB, 0x00, 
   0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x01, 0x26, 0xD9, 0x00, 0x26, 
   0xD9, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 
   0x00, 0x2A, 0xD5, 0x01, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 
   0x2B, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x01, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 
   0xD0, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 
   0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 
   0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 
   0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x39, 0xC6, 
   0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 
   0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC3, 0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 
   0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x40, 0xBE, 
   0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x01, 
   0x44, 0xBC, 0x00, 0x45, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 
   0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB7, 
   0x00, 0x49, 0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 
   0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x50, 0xAE, 
   0x01, 0x51, 0xAD, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 
   0x53, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 
   0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA4, 0x01, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 
   0x5B, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5F, 
   0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 
   0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 
   0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x69, 0x97, 
   0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 
   0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 
   0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 
   0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x74, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 
   0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 
   0x7B, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 
   0x01, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x83, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 
   0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 
   0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x01, 
   0x8B, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x71, 0x01, 0x8E, 
   0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x90, 0x6F, 
   0x01, 0x91, 0x6F, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 0x6C, 0x00, 
   0x93, 0x6B, 0x00, 0x94, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0x6B, 0x00, 0x95, 0x6A, 0x01, 0x96, 
   0x69, 0x01, 0x97, 0x69, 0x01, 0x97, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE7, 0x01, 0x18, 0xE6, 
   0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 
   0x1C, 0xE4, 0x01, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE2, 0x00, 0x1D, 
   0xE1, 0x01, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDE, 
   0x00, 0x21, 0xDE, 0x00, 0x22, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 
   0x23, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 
   0xD9, 0x00, 0x26, 0xD8, 0x00, 0x26, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 
   0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 
   0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 
   0xD1, 0x00, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCF, 
   0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x01, 
   0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x36, 
   0xC9, 0x00, 0x37, 0xC9, 0x01, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 
   0x00, 0x39, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 
   0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 
   0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 
   0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x41, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x01, 
   0x43, 0xBB, 0x01, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 
   0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 
   0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 
   0x00, 0x51, 0xAF, 0x01, 0x51, 0xAE, 0x01, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 
   0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA3, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 
   0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 
   0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 
   0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9A, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 
   0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x99, 0x00, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x96, 
   0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 
   0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 
   0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 
   0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 
   0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x73, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 
   0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 
   0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 
   0x7B, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 
   0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 
   0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 
   0x83, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 
   0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x79, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 
   0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x74, 0x01, 
   0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8D, 
   0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x00, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x6F, 
   0x01, 0x91, 0x6F, 0x00, 0x91, 0x6F, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x00, 
   0x93, 0x6C, 0x01, 0x93, 0x6C, 0x01, 0x94, 0x6B, 0x01, 0x95, 0x6B, 0x01, 0x95, 0x6A, 0x01, 0x96, 
   0x6A, 0x01, 0x96, 0x69, 0x01, 0x96, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x17, 0xE7, 
   0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 
   0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 
   0xE2, 0x01, 0x1D, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 
   0x00, 0x20, 0xDF, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x01, 0x22, 0xDC, 0x00, 
   0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x23, 0xDA, 0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x26, 
   0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x27, 0xD6, 
   0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x2A, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 
   0x2B, 0xD4, 0x01, 0x2C, 0xD3, 0x00, 0x2B, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 
   0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x30, 0xCE, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 
   0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 0xCA, 0x01, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x36, 
   0xC9, 0x01, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 
   0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 
   0x3A, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 
   0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 
   0x01, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 
   0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 
   0xB9, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB9, 0x01, 0x48, 0xB8, 0x00, 0x47, 0xB7, 
   0x00, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 
   0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 
   0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xB0, 0x00, 0x50, 0xAF, 
   0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 
   0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 
   0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 
   0x5B, 0xA5, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 
   0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x01, 0x60, 0xA0, 
   0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 
   0x63, 0x9C, 0x01, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x01, 0x65, 
   0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x98, 
   0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 
   0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 
   0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 
   0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 
   0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 
   0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 
   0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 
   0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x80, 
   0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 
   0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 
   0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x87, 0x77, 
   0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x75, 0x00, 0x8A, 0x75, 0x01, 
   0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 
   0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8F, 0x71, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x6F, 
   0x00, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x01, 
   0x92, 0x6C, 0x00, 0x93, 0x6C, 0x01, 0x93, 0x6C, 0x00, 0x94, 0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 
   0x6A, 0x01, 0x95, 0x6A, 0x00, 0x96, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x17, 0xE7, 
   0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 
   0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 
   0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 
   0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDD, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 
   0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x01, 0x24, 0xDA, 0x01, 0x25, 0xDB, 0x00, 0x25, 
   0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 
   0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x01, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x01, 
   0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 
   0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 
   0x33, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xCB, 0x00, 0x34, 
   0xCA, 0x01, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 
   0x01, 0x38, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 
   0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC3, 0x00, 0x3D, 
   0xC2, 0x01, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 
   0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x00, 0x42, 0xBD, 0x01, 
   0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBA, 0x01, 0x44, 
   0xBA, 0x00, 0x46, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x01, 0x48, 0xB7, 
   0x00, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 
   0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 
   0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 
   0x01, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x01, 
   0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 
   0xAB, 0x01, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 
   0x01, 0x57, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x01, 
   0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5C, 
   0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 
   0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 
   0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 
   0x9A, 0x01, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 
   0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 
   0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 
   0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 
   0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 
   0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 
   0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 
   0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 
   0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 
   0x82, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 
   0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x01, 
   0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 
   0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x86, 0x78, 
   0x00, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 
   0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8B, 0x73, 0x00, 0x8D, 
   0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 
   0x00, 0x8F, 0x70, 0x01, 0x8F, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6E, 0x00, 
   0x91, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x94, 0x6C, 0x01, 0x94, 
   0x6B, 0x00, 0x95, 0x6B, 0x01, 0x95, 0xEA, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 
   0x00, 0x18, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x01, 0x18, 0xE5, 0x00, 0x1A, 0xE6, 0x00, 
   0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x01, 0x1C, 
   0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE1, 0x01, 0x1F, 0xE0, 
   0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 
   0x22, 0xDD, 0x00, 0x22, 0xDD, 0x01, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x01, 0x23, 0xDB, 0x00, 0x24, 
   0xDA, 0x01, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 
   0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 
   0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x01, 0x2A, 0xD4, 0x01, 0x2C, 0xD4, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 
   0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 
   0x00, 0x30, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x32, 0xCE, 0x00, 
   0x31, 0xCD, 0x00, 0x33, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x00, 0x34, 
   0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 
   0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 
   0x39, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 
   0xC3, 0x01, 0x3D, 0xC3, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 
   0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x40, 0xBE, 0x00, 0x42, 0xBD, 0x00, 
   0x41, 0xBD, 0x00, 0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x43, 0xBC, 0x01, 0x44, 
   0xBB, 0x01, 0x44, 0xBB, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 
   0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x01, 0x4C, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 
   0xB3, 0x01, 0x4C, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 
   0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 
   0x51, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 
   0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 
   0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 
   0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 
   0xA3, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 
   0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 
   0x62, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 
   0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 
   0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 
   0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 
   0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 
   0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 
   0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 
   0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 
   0x84, 0x00, 0x7D, 0x82, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 
   0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 
   0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 
   0x8A, 0x75, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8C, 0x73, 0x01, 0x8C, 
   0x73, 0x00, 0x8C, 0x72, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x71, 
   0x01, 0x8F, 0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x01, 
   0x91, 0x6E, 0x01, 0x91, 0x6D, 0x01, 0x93, 0x6D, 0x00, 0x93, 0x6C, 0x00, 0x93, 0x6C, 0x00, 0x94, 
   0x6B, 0x01, 0x94, 0x6B, 0x01, 0x95, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x16, 0xE9, 0x01, 0x16, 0xE9, 
   0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x17, 0xE7, 0x00, 0x19, 0xE7, 0x00, 0x19, 0xE5, 0x00, 
   0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x01, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 
   0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1E, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 
   0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x01, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 
   0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDD, 0x00, 0x23, 0xDB, 0x00, 0x23, 0xDB, 0x00, 0x24, 
   0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x01, 0x27, 0xD8, 
   0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x01, 
   0x29, 0xD6, 0x01, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x01, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 
   0xD2, 0x00, 0x2C, 0xD2, 0x01, 0x2C, 0xD2, 0x01, 0x2E, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 
   0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 
   0x32, 0xCE, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 
   0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 
   0x00, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 
   0x39, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 
   0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 
   0x01, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 
   0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 
   0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x47, 0xB9, 
   0x00, 0x46, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 
   0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 
   0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 
   0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 
   0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 
   0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 
   0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 
   0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 
   0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 
   0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 
   0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 
   0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x01, 0x65, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 
   0x69, 0x95, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 
   0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 
   0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 
   0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 
   0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 
   0x00, 0x77, 0x89, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 
   0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x85, 0x00, 0x7C, 
   0x83, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 
   0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 
   0x81, 0x7F, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 
   0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 
   0x01, 0x86, 0x79, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 
   0x88, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 
   0x74, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8E, 0x71, 
   0x00, 0x8E, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 
   0x91, 0x6E, 0x01, 0x91, 0x6E, 0x01, 0x92, 0x6D, 0x00, 0x92, 0x6D, 0x00, 0x92, 0x6C, 0x01, 0x93, 
   0x6C, 0x01, 0x94, 0x6B, 0x01, 0x94, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 
   0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE7, 0x00, 
   0x19, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1B, 
   0xE3, 0x01, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 
   0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 
   0x21, 0xDE, 0x01, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 
   0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 
   0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x00, 
   0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x01, 0x2B, 
   0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 
   0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x01, 
   0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 
   0xCB, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x34, 0xC9, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 
   0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 
   0x38, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x01, 0x3B, 0xC4, 0x01, 0x3C, 
   0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 
   0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x00, 
   0x40, 0xBE, 0x01, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBD, 0x00, 0x43, 
   0xBB, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 
   0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 
   0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 
   0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 
   0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 
   0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 
   0x01, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA7, 0x01, 0x59, 0xA5, 0x00, 0x59, 0xA6, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 
   0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 
   0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 
   0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 
   0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 
   0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x92, 
   0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 
   0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 
   0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 
   0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 
   0x79, 0x86, 0x01, 0x78, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7B, 0x85, 0x00, 0x7B, 
   0x85, 0x01, 0x7B, 0x83, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x83, 0x01, 0x7E, 0x82, 
   0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x80, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 
   0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7B, 0x00, 0x86, 0x79, 
   0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x00, 
   0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 
   0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x73, 0x01, 0x8E, 0x71, 
   0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 0x6F, 0x00, 
   0x90, 0x6E, 0x00, 0x90, 0x6F, 0x00, 0x91, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x92, 0x6D, 0x01, 0x93, 
   0x6C, 0x01, 0x94, 0x6C, 0x01, 0x94, 0xEA, 0x00, 0x15, 0xEB, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 
   0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE7, 0x00, 
   0x18, 0xE6, 0x00, 0x19, 0xE6, 0x01, 0x19, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 
   0xE4, 0x01, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE2, 
   0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 
   0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x01, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 
   0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x01, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 
   0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x01, 0x28, 0xD7, 0x00, 
   0x28, 0xD7, 0x01, 0x29, 0xD5, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD4, 0x00, 0x2B, 
   0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD1, 
   0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x01, 0x30, 0xCF, 0x01, 0x2F, 0xCF, 0x00, 
   0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 
   0xCC, 0x01, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xC9, 
   0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC7, 0x00, 
   0x38, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x01, 0x3B, 
   0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 
   0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x01, 0x40, 0xBF, 0x01, 
   0x41, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 
   0xBD, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 
   0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 
   0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB2, 
   0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB1, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 
   0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x52, 
   0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 
   0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 
   0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 
   0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x01, 0x5D, 0xA1, 
   0x01, 0x5D, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 
   0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 
   0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 
   0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 
   0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 
   0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 
   0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x73, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 
   0x77, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 
   0x01, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 
   0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 
   0x7D, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 
   0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x78, 0x00, 0x87, 0x78, 0x01, 
   0x87, 0x78, 0x01, 0x89, 0x77, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 
   0x74, 0x00, 0x8B, 0x75, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x01, 0x8D, 0x72, 
   0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8E, 0x71, 0x00, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x01, 
   0x90, 0x6F, 0x01, 0x90, 0x6F, 0x00, 0x90, 0x6F, 0x00, 0x92, 0x6D, 0x00, 0x91, 0x6E, 0x01, 0x93, 
   0x6D, 0x01, 0x93, 0x6C, 0x00, 0x93, 0xEB, 0x00, 0x13, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xEA, 
   0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x01, 0x17, 0xE7, 0x00, 
   0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 
   0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 
   0x00, 0x1E, 0xE2, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE0, 0x01, 0x1F, 0xE0, 0x01, 0x1F, 0xE0, 0x00, 
   0x20, 0xDF, 0x01, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x01, 0x22, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 
   0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 
   0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 
   0x28, 0xD7, 0x00, 0x28, 0xD7, 0x01, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x01, 0x29, 0xD5, 0x00, 0x2B, 
   0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 
   0x01, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 
   0x2F, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 
   0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x01, 0x34, 0xCB, 0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 
   0x00, 0x35, 0xCA, 0x01, 0x36, 0xC9, 0x01, 0x36, 0xC9, 0x01, 0x37, 0xC8, 0x01, 0x37, 0xC8, 0x00, 
   0x38, 0xC7, 0x00, 0x38, 0xC6, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 
   0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 
   0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x42, 
   0xBC, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 
   0x00, 0x46, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x01, 0x48, 0xB8, 0x01, 
   0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x49, 0xB5, 0x01, 0x4A, 
   0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB2, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 
   0x50, 0xB0, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAF, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 
   0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 
   0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x01, 
   0x58, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA6, 0x00, 0x5A, 
   0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA3, 
   0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 
   0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 
   0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9B, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 
   0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 
   0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 
   0x95, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 
   0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x01, 
   0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 
   0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 
   0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 
   0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x7A, 
   0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 
   0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x01, 
   0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 
   0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7A, 
   0x01, 0x84, 0x7B, 0x00, 0x86, 0x79, 0x01, 0x86, 0x7A, 0x00, 0x87, 0x79, 0x01, 0x87, 0x78, 0x01, 
   0x87, 0x78, 0x00, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 
   0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x74, 0x01, 0x8C, 0x73, 
   0x00, 0x8D, 0x73, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0x71, 0x01, 0x8F, 0x70, 0x00, 0x8E, 0x70, 0x00, 
   0x8F, 0x6F, 0x01, 0x8F, 0x6F, 0x00, 0x90, 0x6F, 0x01, 0x91, 0x6F, 0x00, 0x91, 0x6E, 0x01, 0x92, 
   0x6D, 0x00, 0x93, 0x6C, 0x01, 0x93, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEA, 
   0x00, 0x15, 0xEA, 0x01, 0x16, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE8, 0x01, 0x17, 0xE7, 0x00, 
   0x18, 0xE8, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 
   0xE5, 0x01, 0x1A, 0xE4, 0x00, 0x1A, 0xE3, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 
   0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 
   0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 
   0xDD, 0x01, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 
   0x01, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD9, 0x00, 0x27, 0xD7, 0x00, 
   0x28, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD6, 0x00, 0x2A, 
   0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 
   0x00, 0x2C, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 
   0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 
   0xCD, 0x01, 0x32, 0xCD, 0x01, 0x32, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x01, 0x35, 0xCB, 
   0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 
   0x38, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x3A, 
   0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 
   0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 
   0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 
   0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBA, 
   0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x47, 0xB9, 0x00, 0x47, 0xB8, 0x00, 
   0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x49, 
   0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 
   0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x00, 0x4E, 0xB0, 0x00, 
   0x4F, 0xAF, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x51, 
   0xAE, 0x01, 0x53, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 
   0x00, 0x55, 0xAB, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA9, 0x00, 
   0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 
   0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 
   0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA1, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 
   0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 
   0x9E, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9C, 0x01, 0x64, 0x9C, 0x01, 0x64, 0x9A, 
   0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x98, 0x00, 
   0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x6A, 
   0x96, 0x00, 0x6A, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 
   0x01, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 
   0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 
   0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x00, 0x74, 0x8B, 
   0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 
   0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 
   0x7E, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x7F, 0x80, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 
   0x7E, 0x01, 0x81, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7B, 
   0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 
   0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x8A, 
   0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x01, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8C, 0x73, 
   0x00, 0x8D, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x71, 0x01, 0x8F, 0x71, 0x00, 
   0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 
   0x6E, 0x00, 0x92, 0x6D, 0x00, 0x93, 0xEC, 0x00, 0x12, 0xEB, 0x00, 0x13, 0xEB, 0x00, 0x13, 0xEB, 
   0x00, 0x14, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 
   0x17, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 
   0xE6, 0x00, 0x1A, 0xE5, 0x01, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE2, 
   0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 
   0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x01, 0x21, 0xDE, 0x00, 0x22, 
   0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 
   0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 
   0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 
   0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 
   0x00, 0x2D, 0xD2, 0x01, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2F, 0xD0, 0x00, 
   0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 
   0xCE, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCB, 
   0x00, 0x34, 0xCB, 0x01, 0x35, 0xCA, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 
   0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 
   0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 
   0x00, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 
   0x3F, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 
   0xBE, 0x01, 0x42, 0xBD, 0x01, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 
   0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 
   0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 
   0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4B, 0xB3, 
   0x00, 0x4C, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 
   0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x01, 0x51, 
   0xAE, 0x01, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 
   0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 
   0x57, 0xA9, 0x00, 0x57, 0xA7, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 
   0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5B, 0xA4, 
   0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 
   0x9E, 0x01, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 
   0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 
   0x67, 0x99, 0x01, 0x67, 0x98, 0x01, 0x68, 0x98, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 
   0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x93, 
   0x01, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 
   0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 
   0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 
   0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 
   0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 
   0x86, 0x00, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7A, 0x84, 0x00, 0x7C, 0x83, 
   0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 
   0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 
   0x7E, 0x00, 0x81, 0x7D, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 
   0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x7A, 0x00, 
   0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x89, 
   0x77, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 
   0x01, 0x8B, 0x74, 0x00, 0x8C, 0x72, 0x00, 0x8D, 0x72, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x00, 
   0x8F, 0x71, 0x00, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x00, 0x91, 0x6F, 0x01, 0x91, 
   0x6E, 0x00, 0x91, 0x6E, 0x01, 0x92, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 
   0x00, 0x13, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x01, 
   0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 
   0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 
   0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x01, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 
   0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 
   0xDD, 0x01, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDB, 
   0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 
   0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD7, 0x00, 0x29, 
   0xD6, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 
   0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD3, 0x01, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD0, 0x00, 
   0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x31, 0xCF, 0x00, 0x31, 
   0xCE, 0x00, 0x31, 0xCD, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 
   0x00, 0x34, 0xCB, 0x01, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x00, 
   0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 
   0xC6, 0x00, 0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 
   0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 
   0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x40, 
   0xBE, 0x00, 0x41, 0xBD, 0x01, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 
   0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x00, 
   0x47, 0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x48, 
   0xB7, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x01, 
   0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAB, 
   0x01, 0x53, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 
   0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 
   0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 
   0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x60, 
   0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 
   0x00, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 
   0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x96, 0x00, 0x68, 
   0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x93, 
   0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 
   0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 
   0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x73, 0x8C, 
   0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 
   0x76, 0x8A, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 
   0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 
   0x7E, 0x82, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x80, 
   0x7E, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7C, 
   0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 
   0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x79, 0x01, 0x88, 0x78, 0x01, 0x87, 0x77, 0x01, 0x88, 
   0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x75, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x01, 0x8B, 0x74, 
   0x00, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x01, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 0x8D, 0x72, 0x00, 
   0x8E, 0x72, 0x01, 0x8F, 0x71, 0x01, 0x8F, 0x70, 0x01, 0x8F, 0x70, 0x01, 0x90, 0x70, 0x01, 0x91, 
   0x6E, 0x00, 0x91, 0x6E, 0x00, 0x92, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEC, 
   0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 
   0x15, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x18, 
   0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x01, 0x1B, 0xE4, 
   0x00, 0x1B, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 
   0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xE0, 0x00, 0x20, 0xDF, 0x01, 0x21, 
   0xDF, 0x00, 0x21, 0xDE, 0x01, 0x21, 0xDE, 0x01, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x01, 0x23, 0xDC, 
   0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 
   0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x28, 
   0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD6, 0x00, 0x29, 0xD5, 0x01, 0x2B, 0xD5, 0x00, 0x2B, 0xD4, 
   0x00, 0x2C, 0xD4, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 
   0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 
   0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x01, 0x32, 0xCD, 0x00, 0x33, 0xCC, 
   0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x35, 0xC9, 0x00, 
   0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x01, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x38, 
   0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 
   0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x01, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x40, 
   0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 
   0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 
   0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 
   0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB4, 0x01, 0x4A, 0xB4, 
   0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4E, 0xB2, 0x00, 
   0x4D, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x52, 0xAC, 
   0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 
   0x55, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 
   0xA7, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA5, 
   0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 
   0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 
   0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9C, 0x00, 0x62, 0x9C, 
   0x01, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x01, 
   0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 
   0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 
   0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 
   0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x8F, 0x01, 0x6F, 0x90, 0x01, 0x70, 
   0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 
   0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 
   0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x00, 0x78, 
   0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x00, 0x7D, 0x82, 0x00, 
   0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 
   0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 
   0x00, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 
   0x86, 0x7A, 0x00, 0x86, 0x7A, 0x00, 0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x77, 0x01, 0x87, 
   0x77, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8A, 0x75, 
   0x00, 0x8B, 0x74, 0x00, 0x8C, 0x74, 0x00, 0x8B, 0x73, 0x00, 0x8D, 0x72, 0x00, 0x8C, 0x72, 0x00, 
   0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x70, 0x01, 0x8F, 0x70, 0x00, 0x90, 0x70, 0x01, 0x90, 
   0x70, 0x01, 0x90, 0x6F, 0x01, 0x90, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 
   0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 
   0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE8, 0x00, 0x18, 
   0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x01, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE4, 
   0x00, 0x1A, 0xE3, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x01, 0x1D, 0xE2, 0x00, 
   0x1E, 0xE1, 0x01, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x01, 0x20, 
   0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x21, 0xDD, 0x00, 0x23, 0xDC, 
   0x01, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 0x00, 
   0x25, 0xDA, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x27, 
   0xD7, 0x00, 0x29, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 
   0x00, 0x2B, 0xD3, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 
   0xCF, 0x00, 0x30, 0xCE, 0x00, 0x30, 0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 
   0x00, 0x33, 0xCC, 0x00, 0x34, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xCA, 0x00, 
   0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 
   0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 
   0x3D, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x40, 
   0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x41, 0xBD, 0x00, 0x42, 0xBC, 
   0x01, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 
   0x46, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 
   0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB5, 0x00, 0x49, 0xB5, 0x01, 0x4B, 0xB4, 
   0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 
   0x4E, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 
   0xB0, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 
   0x00, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x01, 
   0x55, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x57, 0xA9, 0x01, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA4, 0x01, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 
   0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 
   0x9F, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x61, 0x9E, 0x00, 0x63, 0x9D, 
   0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x64, 0x9A, 0x01, 
   0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x67, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 
   0x98, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 
   0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 
   0x6D, 0x92, 0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x70, 
   0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 
   0x00, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 
   0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 0x77, 0x88, 0x01, 0x78, 
   0x88, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x78, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 
   0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 
   0x7F, 0x00, 0x80, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x01, 0x82, 0x7D, 
   0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x83, 0x7B, 0x01, 0x84, 0x7B, 0x00, 
   0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 
   0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 0x76, 0x00, 0x89, 0x77, 0x00, 0x8A, 0x76, 0x00, 0x8A, 0x76, 
   0x01, 0x8B, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8C, 0x73, 0x01, 0x8B, 0x74, 0x01, 0x8D, 0x73, 0x01, 
   0x8D, 0x72, 0x01, 0x8D, 0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0x71, 0x01, 0x8F, 0x71, 0x00, 0x90, 
   0x70, 0x01, 0x90, 0x6F, 0x00, 0x91, 0xEE, 0x00, 0x10, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 
   0x00, 0x13, 0xEC, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 0x00, 
   0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 
   0xE7, 0x01, 0x18, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x19, 0xE4, 
   0x00, 0x1B, 0xE5, 0x00, 0x1B, 0xE3, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 
   0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 0x01, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 
   0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x21, 0xDC, 
   0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x00, 0x24, 0xDB, 0x01, 0x24, 0xDB, 0x00, 
   0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD8, 0x01, 0x27, 0xD8, 0x00, 0x28, 
   0xD8, 0x00, 0x27, 0xD7, 0x00, 0x29, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 
   0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD3, 0x00, 
   0x2D, 0xD2, 0x00, 0x2E, 0xD2, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 
   0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCD, 
   0x01, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 
   0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 
   0xC8, 0x00, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 
   0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 
   0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 
   0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 
   0x00, 0x43, 0xBD, 0x01, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x01, 
   0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 
   0xB8, 0x01, 0x48, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x49, 0xB5, 0x01, 0x4A, 0xB5, 
   0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x01, 
   0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x01, 0x4F, 
   0xAF, 0x01, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAE, 0x00, 0x52, 0xAE, 
   0x01, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAC, 0x01, 0x55, 0xAA, 0x01, 
   0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA8, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x5A, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 
   0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 
   0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 
   0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 
   0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 0x67, 
   0x98, 0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 
   0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 
   0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 
   0x01, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 0x00, 
   0x75, 0x8B, 0x00, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 
   0x89, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 
   0x00, 0x7A, 0x86, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7B, 0x83, 0x01, 
   0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 
   0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 0x7D, 
   0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7C, 0x00, 
   0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x00, 0x86, 0x7A, 0x01, 0x87, 0x79, 0x00, 0x87, 
   0x78, 0x01, 0x88, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 0x76, 0x00, 0x89, 0x75, 
   0x01, 0x8A, 0x76, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8C, 0x74, 0x00, 0x8C, 0x73, 0x00, 
   0x8C, 0x73, 0x00, 0x8D, 0x72, 0x01, 0x8E, 0x71, 0x01, 0x8E, 0x72, 0x01, 0x8F, 0x71, 0x00, 0x8F, 
   0x71, 0x00, 0x8F, 0x6F, 0x01, 0x90, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 
   0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x12, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x13, 0xEB, 0x01, 
   0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xEA, 0x01, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 
   0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 
   0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 
   0x1C, 0xE3, 0x01, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 
   0xE0, 0x01, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDE, 
   0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 
   0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 
   0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 
   0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x01, 0x2C, 0xD3, 0x00, 
   0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 
   0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 
   0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 
   0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 
   0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 
   0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 
   0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 
   0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBD, 
   0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x43, 0xBB, 0x00, 
   0x45, 0xBB, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 
   0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x49, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 
   0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB3, 0x00, 
   0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 
   0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAD, 
   0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 
   0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA8, 0x01, 0x57, 0xA7, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 
   0x5C, 0xA3, 0x01, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 
   0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 
   0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 
   0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 
   0x01, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x01, 
   0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 
   0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8C, 0x01, 
   0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 
   0x89, 0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 
   0x01, 0x79, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 0x01, 
   0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x00, 0x7E, 
   0x81, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 
   0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x01, 
   0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x86, 
   0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 
   0x00, 0x89, 0x75, 0x01, 0x8A, 0x76, 0x01, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x01, 
   0x8C, 0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 0x71, 0x01, 0x8F, 
   0x70, 0x00, 0x8F, 0x70, 0x01, 0x90, 0xEF, 0x01, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 
   0x00, 0x12, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 
   0x14, 0xEA, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 
   0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 
   0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 0x01, 
   0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 
   0xE1, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 
   0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 
   0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 
   0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x01, 0x28, 0xD7, 0x00, 0x29, 0xD6, 
   0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x01, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 
   0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 
   0xD0, 0x00, 0x2E, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 
   0x00, 0x31, 0xCD, 0x00, 0x31, 0xCD, 0x01, 0x33, 0xCD, 0x01, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x01, 
   0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 
   0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 
   0x01, 0x3A, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3A, 0xC4, 0x00, 0x3C, 0xC4, 0x00, 
   0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3E, 0xC2, 0x00, 0x3E, 
   0xC1, 0x01, 0x3E, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 
   0x00, 0x42, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 
   0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x01, 0x46, 
   0xB9, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 
   0x00, 0x4A, 0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 
   0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAE, 0x01, 0x50, 0xAE, 
   0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 
   0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x00, 0x56, 
   0xA9, 0x01, 0x56, 0xA8, 0x01, 0x57, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x58, 0xA6, 
   0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 
   0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x00, 0x5E, 
   0xA1, 0x00, 0x5F, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x61, 0x9F, 0x01, 0x61, 0x9E, 
   0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 
   0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x01, 0x69, 0x96, 
   0x00, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 
   0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 
   0x91, 0x01, 0x6E, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 
   0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 
   0x00, 0x78, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 
   0x7C, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x81, 0x00, 0x7E, 
   0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 
   0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 
   0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x85, 0x7B, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 
   0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x79, 0x00, 0x88, 0x77, 0x00, 0x88, 0x77, 0x01, 0x89, 0x77, 
   0x01, 0x89, 0x77, 0x01, 0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x74, 0x00, 0x8B, 0x74, 0x00, 
   0x8C, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0x72, 0x01, 0x8E, 0x72, 0x00, 0x8E, 
   0x71, 0x01, 0x8E, 0x71, 0x00, 0x8F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x01, 0x11, 0xEE, 
   0x00, 0x10, 0xED, 0x00, 0x11, 0xED, 0x00, 0x11, 0xEC, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 
   0x13, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 
   0xE9, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 
   0x00, 0x19, 0xE5, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 
   0x1C, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 
   0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 
   0x00, 0x20, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 
   0x24, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xD9, 0x00, 0x25, 0xDA, 0x00, 0x26, 
   0xD8, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x01, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 
   0x01, 0x29, 0xD6, 0x01, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 
   0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 
   0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x31, 0xCE, 
   0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x01, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 
   0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x35, 
   0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 
   0x01, 0x39, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 
   0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 
   0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 
   0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 
   0x44, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 
   0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 
   0x00, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 
   0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x01, 0x4D, 0xB2, 0x01, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 
   0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 
   0x54, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 
   0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA8, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 
   0x5C, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 
   0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 
   0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9D, 0x00, 
   0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 
   0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 0x00, 0x68, 0x97, 
   0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x95, 0x01, 
   0x6B, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6E, 
   0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 
   0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 
   0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x75, 
   0x89, 0x00, 0x76, 0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 0x00, 0x78, 0x87, 
   0x01, 0x79, 0x87, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7B, 0x85, 0x01, 
   0x7B, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 
   0x81, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 
   0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x00, 
   0x82, 0x7D, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 
   0x7A, 0x01, 0x86, 0x79, 0x00, 0x87, 0x79, 0x00, 0x86, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 
   0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 
   0x8A, 0x75, 0x01, 0x8B, 0x73, 0x00, 0x8B, 0x74, 0x01, 0x8C, 0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 
   0x72, 0x00, 0x8E, 0x71, 0x00, 0x8E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 
   0x00, 0x10, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x11, 0xEE, 0x01, 0x12, 0xEC, 0x00, 0x12, 0xED, 0x00, 
   0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x01, 0x15, 
   0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x01, 0x18, 0xE6, 
   0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE5, 0x00, 
   0x1B, 0xE3, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 
   0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x01, 0x20, 0xDF, 0x00, 0x1F, 0xDF, 
   0x00, 0x20, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 
   0x22, 0xDC, 0x01, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x25, 
   0xDA, 0x01, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD7, 
   0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x01, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 
   0x2B, 0xD4, 0x01, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 
   0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 
   0x00, 0x31, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x01, 
   0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 
   0xCA, 0x01, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 
   0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 
   0x3B, 0xC4, 0x00, 0x3C, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 
   0xC1, 0x01, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3E, 0xC1, 0x00, 0x40, 0xC0, 0x00, 0x3F, 0xBF, 
   0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 
   0x42, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x44, 0xBA, 0x01, 0x45, 
   0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 
   0x00, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x01, 0x4A, 0xB4, 0x01, 
   0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 
   0xB2, 0x00, 0x4E, 0xB2, 0x00, 0x4F, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 
   0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x01, 
   0x52, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 
   0xA9, 0x00, 0x56, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 
   0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 
   0x01, 0x60, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 
   0x62, 0x9D, 0x00, 0x63, 0x9B, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9B, 0x00, 0x65, 
   0x9A, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x97, 0x00, 0x67, 0x97, 
   0x00, 0x68, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x95, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 
   0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 
   0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x90, 
   0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 
   0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 
   0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 
   0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x86, 0x01, 0x79, 0x85, 0x01, 
   0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 
   0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 
   0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 
   0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x85, 
   0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x01, 0x87, 0x78, 0x00, 0x87, 0x78, 
   0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x01, 0x8A, 0x76, 0x01, 
   0x8A, 0x75, 0x01, 0x8A, 0x74, 0x00, 0x8B, 0x74, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0x73, 0x01, 0x8D, 
   0x72, 0x00, 0x8D, 0x71, 0x01, 0x8E, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 
   0x00, 0x10, 0xEE, 0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 0xED, 0x00, 
   0x13, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 
   0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 
   0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x19, 0xE5, 0x00, 
   0x1A, 0xE5, 0x01, 0x1B, 0xE4, 0x00, 0x1C, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x01, 0x1D, 
   0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 
   0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x22, 0xDE, 0x00, 0x21, 0xDD, 0x00, 
   0x23, 0xDD, 0x01, 0x23, 0xDB, 0x00, 0x24, 0xDC, 0x00, 0x24, 0xDA, 0x00, 0x24, 0xDB, 0x00, 0x25, 
   0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x27, 0xD8, 
   0x01, 0x28, 0xD6, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 
   0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 
   0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2E, 0xD0, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 0x01, 0x30, 0xCF, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 
   0x32, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x35, 
   0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 
   0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC5, 0x01, 
   0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 
   0xC2, 0x00, 0x3E, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 0xBF, 
   0x01, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBD, 0x00, 
   0x42, 0xBC, 0x00, 0x42, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 
   0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 
   0x01, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB6, 0x00, 
   0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 
   0x00, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x01, 0x52, 0xAD, 0x00, 0x51, 0xAD, 0x00, 
   0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x54, 
   0xAB, 0x01, 0x55, 0xAA, 0x01, 0x56, 0xAA, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 
   0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x01, 
   0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 
   0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 
   0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 
   0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 
   0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 
   0x00, 0x67, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 
   0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 
   0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x90, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 
   0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x01, 
   0x72, 0x8D, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 
   0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 
   0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 
   0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 
   0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 
   0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x83, 0x7B, 0x01, 0x83, 0x7B, 0x00, 0x84, 
   0x7A, 0x00, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x00, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x87, 0x78, 
   0x00, 0x87, 0x78, 0x01, 0x87, 0x77, 0x01, 0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x75, 0x00, 
   0x8A, 0x76, 0x01, 0x8A, 0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x73, 0x00, 0x8C, 0x74, 0x00, 0x8D, 
   0x73, 0x01, 0x8C, 0x72, 0x00, 0x8D, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 
   0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x01, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 
   0x12, 0xEC, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x14, 
   0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x01, 0x16, 0xE9, 0x00, 0x17, 0xE9, 0x00, 0x17, 0xE8, 
   0x00, 0x18, 0xE7, 0x01, 0x17, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 0x00, 
   0x1A, 0xE4, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 
   0xE2, 0x01, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 
   0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 
   0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 
   0xDB, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 
   0x00, 0x27, 0xD7, 0x01, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD5, 0x01, 
   0x29, 0xD4, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 
   0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 
   0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x01, 0x31, 0xCE, 0x01, 
   0x32, 0xCD, 0x00, 0x32, 0xCC, 0x01, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x35, 
   0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 
   0x01, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x39, 0xC7, 0x01, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 
   0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x01, 0x3C, 
   0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 
   0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x00, 
   0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 
   0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 
   0x49, 0xB5, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB3, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 
   0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB1, 
   0x00, 0x4F, 0xAF, 0x01, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 
   0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 
   0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 
   0x00, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 
   0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 
   0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 
   0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 
   0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9B, 0x00, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x99, 
   0x00, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 
   0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 0x6C, 
   0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x91, 
   0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 
   0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 
   0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 
   0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 
   0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 
   0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 
   0x81, 0x7D, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 0x01, 0x84, 
   0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 
   0x00, 0x87, 0x78, 0x00, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x77, 0x01, 
   0x8A, 0x76, 0x01, 0x8A, 0x75, 0x00, 0x8B, 0x75, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0x74, 0x00, 0x8C, 
   0x73, 0x01, 0x8C, 0x73, 0x01, 0x8D, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 
   0x00, 0x0F, 0xF0, 0x00, 0x10, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 
   0x11, 0xED, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 
   0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 
   0x00, 0x17, 0xE7, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 
   0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1B, 
   0xE3, 0x00, 0x1C, 0xE2, 0x01, 0x1D, 0xE2, 0x00, 0x1E, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 
   0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 
   0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x01, 0x24, 
   0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD9, 0x00, 0x26, 0xD8, 
   0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD5, 0x00, 
   0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD3, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 
   0xD3, 0x00, 0x2C, 0xD2, 0x01, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 
   0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 
   0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 
   0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 
   0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x37, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 
   0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 
   0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 
   0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x01, 
   0x41, 0xBD, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 
   0xBB, 0x01, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB9, 
   0x00, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x01, 0x49, 0xB7, 0x00, 
   0x49, 0xB5, 0x01, 0x4A, 0xB5, 0x01, 0x4A, 0xB4, 0x01, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 
   0xB4, 0x01, 0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 
   0x00, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 
   0x52, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x54, 
   0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 
   0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 
   0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 
   0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 
   0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 
   0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x63, 
   0x9B, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 
   0x01, 0x67, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x68, 0x96, 0x00, 0x68, 0x97, 0x00, 
   0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 
   0x94, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 
   0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 
   0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 
   0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 
   0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 
   0x79, 0x86, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 
   0x83, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x82, 
   0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7D, 0x01, 0x84, 
   0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x85, 0x79, 0x01, 0x86, 0x79, 
   0x00, 0x86, 0x78, 0x01, 0x87, 0x78, 0x01, 0x88, 0x77, 0x01, 0x87, 0x78, 0x01, 0x89, 0x77, 0x00, 
   0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x76, 0x01, 0x8B, 0x75, 0x00, 0x8B, 0x75, 0x00, 0x8B, 
   0x73, 0x00, 0x8C, 0x73, 0x00, 0x8C, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 
   0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 0x00, 
   0x11, 0xED, 0x00, 0x12, 0xEE, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x01, 0x13, 0xEC, 0x00, 0x13, 
   0xEC, 0x00, 0x13, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xEA, 0x00, 0x16, 0xE8, 
   0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE6, 0x01, 
   0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 
   0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 
   0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xDF, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDE, 0x00, 0x21, 0xDF, 0x00, 
   0x21, 0xDE, 0x00, 0x21, 0xDE, 0x01, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 
   0xDC, 0x01, 0x23, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD9, 
   0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x01, 
   0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 
   0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 
   0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 
   0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x01, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 0x33, 
   0xCC, 0x00, 0x34, 0xCB, 0x01, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 
   0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 
   0x39, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 
   0xC4, 0x00, 0x3B, 0xC3, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 
   0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x01, 
   0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x43, 
   0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 
   0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x01, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 
   0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4D, 0xB1, 
   0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB1, 0x00, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 
   0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 
   0xAC, 0x00, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xAA, 
   0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA6, 0x01, 0x5A, 0xA4, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 
   0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 
   0x00, 0x5E, 0xA0, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x01, 
   0x61, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 
   0x9C, 0x01, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 
   0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 
   0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 
   0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 
   0x01, 0x76, 0x89, 0x01, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 
   0x79, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 
   0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 
   0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7D, 0x00, 0x81, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 
   0x7C, 0x01, 0x84, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x00, 0x85, 0x7B, 0x00, 0x86, 0x7A, 
   0x00, 0x86, 0x79, 0x00, 0x86, 0x78, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 
   0x89, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x01, 0x8A, 0x75, 0x01, 0x8B, 
   0x74, 0x01, 0x8C, 0x74, 0x01, 0x8B, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 
   0x00, 0x0E, 0xF1, 0x01, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 
   0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 0xED, 0x01, 0x12, 0xED, 0x00, 0x13, 
   0xEB, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xEA, 
   0x01, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 
   0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE4, 0x00, 0x1A, 0xE4, 0x00, 0x1A, 
   0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 
   0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 
   0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 
   0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x01, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xDA, 
   0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x01, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD6, 0x00, 
   0x28, 0xD6, 0x00, 0x29, 0xD6, 0x01, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 
   0xD4, 0x01, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 
   0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCE, 0x00, 
   0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 
   0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 
   0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x01, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 
   0x38, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 
   0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 
   0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 
   0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 
   0x00, 0x45, 0xB9, 0x01, 0x47, 0xB9, 0x00, 0x47, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 
   0x48, 0xB6, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB1, 
   0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 
   0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 
   0xAC, 0x00, 0x53, 0xAB, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x01, 0x56, 0xAA, 
   0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 
   0x58, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 
   0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 
   0x01, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 
   0x60, 0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9D, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 
   0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 
   0x00, 0x66, 0x9A, 0x01, 0x66, 0x98, 0x00, 0x67, 0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 
   0x68, 0x97, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 
   0x94, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x00, 0x6D, 0x91, 
   0x00, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 
   0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 
   0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x01, 0x7A, 
   0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 
   0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 
   0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7F, 0x01, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 
   0x7D, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 
   0x00, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x00, 0x87, 0x78, 0x01, 0x88, 0x77, 0x00, 
   0x88, 0x77, 0x00, 0x89, 0x77, 0x00, 0x89, 0x76, 0x01, 0x89, 0x76, 0x00, 0x8A, 0x75, 0x00, 0x8B, 
   0x74, 0x01, 0x8B, 0x74, 0x01, 0x8B, 0xF3, 0x01, 0x0C, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF1, 
   0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 
   0x10, 0xEF, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x11, 0xEC, 0x00, 0x12, 
   0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 
   0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x17, 0xE7, 0x01, 
   0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 
   0xE4, 0x00, 0x1B, 0xE4, 0x01, 0x1C, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 
   0x01, 0x1D, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 
   0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 
   0xDD, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 
   0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x27, 0xD8, 0x00, 
   0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x01, 0x2A, 
   0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x01, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 
   0x00, 0x2E, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xD0, 0x00, 
   0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x01, 0x32, 
   0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x35, 0xCA, 
   0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x00, 
   0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3C, 0xC2, 
   0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 
   0x40, 0xBF, 0x00, 0x40, 0xBE, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 
   0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 
   0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 
   0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 
   0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4C, 0xB2, 
   0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 
   0x4F, 0xAF, 0x01, 0x50, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 
   0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAA, 
   0x00, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x57, 0xA8, 0x00, 
   0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 
   0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 
   0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x01, 
   0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 
   0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 
   0x00, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x67, 0x99, 0x01, 0x67, 0x98, 0x01, 
   0x67, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 
   0x95, 0x01, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 
   0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 
   0x70, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 
   0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 
   0x01, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x89, 0x01, 
   0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 
   0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x00, 
   0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x81, 
   0x7D, 0x01, 0x83, 0x7C, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 0x01, 0x84, 0x7A, 
   0x01, 0x85, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x00, 0x87, 0x79, 0x00, 
   0x88, 0x77, 0x01, 0x87, 0x77, 0x01, 0x88, 0x77, 0x00, 0x89, 0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 
   0x75, 0x00, 0x8A, 0x74, 0x00, 0x8B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF2, 
   0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 
   0x10, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 
   0xED, 0x01, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEC, 0x00, 0x14, 0xEB, 0x01, 0x14, 0xEA, 
   0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 
   0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 
   0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE3, 0x01, 0x1B, 0xE3, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 
   0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x01, 
   0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 
   0xDD, 0x00, 0x23, 0xDD, 0x00, 0x22, 0xDC, 0x01, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 
   0x00, 0x25, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 
   0x28, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x29, 
   0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 
   0x01, 0x2C, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 
   0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 
   0xCD, 0x00, 0x32, 0xCD, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x01, 0x34, 0xCB, 
   0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x37, 0xC9, 0x00, 0x36, 0xC8, 0x00, 
   0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC7, 0x01, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x39, 
   0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 
   0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 
   0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 
   0xBD, 0x01, 0x43, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 
   0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 
   0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x01, 0x4A, 0xB6, 0x01, 0x49, 
   0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 
   0x00, 0x4D, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4E, 0xB0, 0x00, 
   0x50, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAE, 0x00, 0x52, 
   0xAD, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x01, 0x53, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 
   0x01, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xAA, 0x01, 0x57, 0xA9, 0x00, 0x56, 0xA8, 0x00, 
   0x58, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 
   0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 
   0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9D, 0x01, 0x62, 
   0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 
   0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 
   0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x01, 0x69, 
   0x95, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x92, 
   0x01, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x91, 0x00, 
   0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x01, 0x6F, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 
   0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x00, 0x74, 0x8B, 
   0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x77, 0x89, 0x01, 
   0x77, 0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 
   0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 
   0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x00, 
   0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 
   0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7C, 
   0x01, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x79, 0x00, 0x87, 0x79, 0x01, 
   0x87, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x01, 0x89, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 
   0x76, 0x00, 0x8A, 0x76, 0x01, 0x8A, 0xF4, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 
   0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0E, 0xF0, 0x00, 
   0x0E, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 
   0xED, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x01, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 
   0x00, 0x14, 0xEB, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 
   0x17, 0xE7, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 
   0xE6, 0x00, 0x1A, 0xE5, 0x01, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 
   0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 
   0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x01, 0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 
   0xDD, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 
   0x00, 0x24, 0xDB, 0x00, 0x25, 0xD9, 0x01, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 
   0x27, 0xD8, 0x01, 0x28, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x01, 0x29, 
   0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 
   0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 
   0x2E, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x30, 0xCE, 0x00, 0x30, 0xCD, 0x00, 0x31, 
   0xCD, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x01, 0x33, 0xCB, 
   0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 
   0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 
   0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3A, 0xC5, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 
   0x00, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 
   0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 
   0xBD, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 
   0x00, 0x45, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x45, 0xB9, 0x01, 0x46, 0xB9, 0x00, 
   0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x49, 0xB7, 0x01, 0x49, 
   0xB5, 0x00, 0x4A, 0xB5, 0x01, 0x4B, 0xB4, 0x01, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 
   0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 
   0x4F, 0xB1, 0x01, 0x4F, 0xB0, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAE, 0x01, 0x50, 0xAE, 0x00, 0x51, 
   0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAB, 
   0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x00, 0x57, 0xA9, 0x00, 
   0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 
   0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 
   0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 
   0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9C, 
   0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 
   0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 
   0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 
   0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x00, 
   0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x71, 
   0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 
   0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 
   0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 
   0x86, 0x00, 0x79, 0x85, 0x00, 0x79, 0x85, 0x01, 0x7B, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 
   0x00, 0x7C, 0x84, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 
   0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x81, 
   0x7E, 0x01, 0x81, 0x7D, 0x01, 0x81, 0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x00, 0x83, 0x7B, 
   0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 
   0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x00, 0x88, 0x77, 0x01, 0x88, 0x76, 0x01, 0x89, 
   0x76, 0x00, 0x89, 0x76, 0x01, 0x8A, 0xF5, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 
   0x00, 0x0C, 0xF3, 0x01, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x01, 0x0E, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 
   0x0E, 0xF0, 0x00, 0x0E, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x0F, 0xEE, 0x00, 0x10, 0xEE, 0x00, 0x10, 
   0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 
   0x00, 0x13, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x14, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 
   0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x18, 
   0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE3, 0x00, 0x1B, 0xE3, 
   0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 
   0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 
   0xDD, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 
   0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 
   0x26, 0xD8, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 
   0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 
   0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x01, 0x2C, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 
   0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCF, 0x01, 0x30, 
   0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 
   0x01, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x00, 
   0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x39, 
   0xC6, 0x01, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3C, 0xC4, 
   0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 
   0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 
   0xBE, 0x01, 0x42, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 0x00, 0x44, 0xBC, 
   0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 
   0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 
   0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 
   0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 
   0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x50, 
   0xAF, 0x00, 0x51, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 
   0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAB, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 
   0x56, 0xA8, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 
   0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 
   0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 
   0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 
   0x9F, 0x01, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 
   0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x9A, 0x00, 
   0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 
   0x97, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x01, 0x6B, 0x94, 
   0x01, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x92, 0x01, 
   0x6E, 0x91, 0x00, 0x6F, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 
   0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x71, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x73, 0x8C, 
   0x01, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 
   0x75, 0x89, 0x01, 0x77, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 
   0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 
   0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 
   0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 
   0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7C, 
   0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7A, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x7A, 0x01, 
   0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0x78, 0x01, 0x88, 0x78, 0x01, 0x88, 0x77, 0x00, 0x88, 
   0x77, 0x00, 0x89, 0x76, 0x01, 0x8A, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 
   0x00, 0x0C, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 
   0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 
   0xEF, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x01, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 
   0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x01, 0x14, 0xEA, 0x00, 0x16, 0xE9, 0x00, 
   0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 
   0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 
   0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE2, 0x00, 
   0x1D, 0xE0, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 
   0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x21, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x22, 0xDC, 
   0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDB, 0x00, 0x25, 0xDA, 0x01, 0x26, 0xDA, 0x01, 
   0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 
   0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD5, 0x00, 0x2B, 0xD4, 
   0x01, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD2, 0x00, 
   0x2E, 0xD1, 0x00, 0x2F, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 
   0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x01, 0x32, 0xCC, 0x01, 0x33, 0xCC, 
   0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 
   0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x01, 0x38, 
   0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC5, 
   0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 
   0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x41, 
   0xBF, 0x01, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 
   0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 
   0x46, 0xB9, 0x01, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x49, 
   0xB7, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4A, 0xB5, 
   0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 
   0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x50, 
   0xAF, 0x01, 0x51, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 
   0x01, 0x54, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x01, 
   0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 
   0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x01, 0x5A, 0xA5, 
   0x00, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x01, 0x60, 
   0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9E, 0x01, 0x62, 0x9D, 0x01, 0x62, 0x9C, 
   0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 
   0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 
   0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x95, 0x00, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x01, 
   0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 
   0x8F, 0x00, 0x71, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x72, 0x8C, 
   0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 
   0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 
   0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 
   0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x00, 0x80, 
   0x7F, 0x01, 0x81, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7C, 
   0x01, 0x82, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x01, 
   0x85, 0x7A, 0x00, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 
   0x77, 0x00, 0x88, 0x76, 0x01, 0x89, 0xF6, 0x00, 0x09, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 
   0x00, 0x0B, 0xF4, 0x01, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF1, 0x00, 
   0x0D, 0xF1, 0x00, 0x0D, 0xF0, 0x00, 0x0F, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 
   0xEF, 0x00, 0x10, 0xEE, 0x00, 0x10, 0xED, 0x00, 0x11, 0xED, 0x00, 0x11, 0xEC, 0x00, 0x12, 0xEC, 
   0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xEA, 0x00, 
   0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 
   0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x01, 0x1A, 0xE4, 
   0x01, 0x1B, 0xE4, 0x01, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 
   0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 
   0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x01, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 
   0x00, 0x23, 0xDC, 0x01, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 
   0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 
   0xD7, 0x00, 0x28, 0xD6, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 
   0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x01, 0x2B, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 
   0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 
   0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 
   0x00, 0x33, 0xCC, 0x01, 0x34, 0xCC, 0x01, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 
   0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC9, 0x00, 0x36, 0xC8, 0x01, 0x37, 0xC8, 0x01, 0x38, 
   0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC5, 0x00, 0x3B, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC3, 0x01, 
   0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x40, 
   0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x43, 0xBD, 
   0x00, 0x43, 0xBD, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBA, 0x01, 
   0x45, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB9, 0x01, 0x48, 0xB8, 0x00, 0x47, 
   0xB7, 0x00, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x01, 0x4B, 0xB5, 
   0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4C, 0xB2, 0x01, 
   0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 
   0xB0, 0x01, 0x51, 0xAF, 0x01, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 
   0x01, 0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x01, 
   0x56, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA8, 0x01, 0x56, 0xA9, 0x01, 0x57, 0xA7, 0x00, 0x58, 
   0xA8, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x01, 0x5A, 0xA5, 
   0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA4, 0x01, 0x5C, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x00, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x00, 0x60, 
   0x9F, 0x00, 0x60, 0x9F, 0x01, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 
   0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x00, 
   0x65, 0x99, 0x01, 0x65, 0x99, 0x01, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x68, 
   0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 
   0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 
   0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 
   0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 
   0x00, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 
   0x75, 0x8A, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x01, 0x77, 0x88, 0x01, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 
   0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 
   0x7D, 0x82, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x7F, 
   0x80, 0x01, 0x80, 0x80, 0x00, 0x81, 0x7F, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 
   0x01, 0x82, 0x7C, 0x01, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 
   0x85, 0x7A, 0x01, 0x86, 0x7A, 0x01, 0x86, 0x79, 0x01, 0x87, 0x79, 0x00, 0x87, 0x79, 0x01, 0x88, 
   0x78, 0x00, 0x88, 0x78, 0x01, 0x89, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x01, 0x0A, 0xF4, 
   0x00, 0x0B, 0xF5, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF3, 0x00, 
   0x0D, 0xF2, 0x00, 0x0E, 0xF1, 0x01, 0x0E, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x10, 
   0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 
   0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x01, 0x14, 0xEA, 0x00, 0x14, 0xEA, 0x00, 
   0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 
   0xE7, 0x01, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 
   0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 
   0x1D, 0xE2, 0x00, 0x1E, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x20, 
   0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDC, 
   0x01, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 
   0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x27, 0xD8, 0x01, 0x27, 0xD8, 0x00, 0x27, 
   0xD7, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x01, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 
   0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 0x2D, 0xD3, 0x00, 
   0x2D, 0xD2, 0x01, 0x2E, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 
   0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCD, 0x00, 0x32, 0xCD, 
   0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 
   0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 
   0xC8, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x39, 0xC5, 
   0x00, 0x3B, 0xC5, 0x01, 0x3A, 0xC4, 0x01, 0x3B, 0xC4, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 
   0x3C, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 0x00, 0x3F, 
   0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 
   0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 
   0x45, 0xBA, 0x01, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 
   0xB7, 0x01, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 
   0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x01, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 
   0x4C, 0xB2, 0x01, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 
   0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 
   0x01, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 
   0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x01, 0x57, 
   0xA7, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA5, 
   0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 
   0x5D, 0xA3, 0x00, 0x5E, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 
   0x9F, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x01, 
   0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 
   0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x69, 0x95, 
   0x00, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x01, 
   0x6C, 0x93, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x92, 0x01, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 
   0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x72, 0x8E, 
   0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x00, 0x72, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 
   0x75, 0x8B, 0x01, 0x75, 0x8A, 0x01, 0x75, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x89, 0x01, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x85, 
   0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 
   0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 
   0x80, 0x00, 0x80, 0x80, 0x01, 0x7F, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 
   0x00, 0x82, 0x7E, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x00, 
   0x85, 0x7A, 0x00, 0x85, 0x7B, 0x01, 0x85, 0x79, 0x00, 0x86, 0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 
   0x78, 0x00, 0x87, 0x78, 0x01, 0x88, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF5, 0x00, 0x09, 0xF5, 
   0x00, 0x0A, 0xF4, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 
   0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x01, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 
   0xF0, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 0xED, 
   0x00, 0x11, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 0x00, 
   0x15, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE9, 0x00, 0x17, 
   0xE8, 0x01, 0x18, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 
   0x00, 0x19, 0xE5, 0x01, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 
   0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 
   0xE0, 0x00, 0x20, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 
   0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x23, 0xDB, 0x00, 
   0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x01, 0x27, 
   0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD6, 0x01, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 
   0x01, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x01, 0x2B, 0xD4, 0x00, 0x2C, 0xD4, 0x01, 0x2B, 0xD3, 0x01, 
   0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD1, 0x01, 0x2F, 
   0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCD, 
   0x01, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCC, 0x00, 0x34, 0xCB, 0x00, 
   0x35, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 
   0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 
   0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 
   0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 
   0xC1, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x41, 0xBF, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBD, 
   0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 
   0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x46, 
   0xB9, 0x00, 0x48, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 
   0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 
   0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x50, 0xB0, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAF, 0x01, 0x52, 0xAE, 
   0x00, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x01, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 
   0x54, 0xAA, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA8, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 
   0x01, 0x5A, 0xA6, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 
   0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 
   0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 
   0x64, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x01, 0x67, 0x98, 0x00, 0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x96, 
   0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x01, 
   0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 
   0x91, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8C, 0x01, 
   0x74, 0x8B, 0x01, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 
   0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x00, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x00, 
   0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 
   0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 0x7E, 
   0x00, 0x81, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7C, 0x01, 0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 
   0x84, 0x7B, 0x00, 0x84, 0x7A, 0x01, 0x85, 0x7A, 0x00, 0x85, 0x7A, 0x00, 0x86, 0x7A, 0x01, 0x86, 
   0x79, 0x00, 0x87, 0x78, 0x00, 0x87, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF5, 
   0x00, 0x09, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0C, 0xF3, 0x00, 
   0x0C, 0xF3, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 
   0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 
   0x00, 0x11, 0xED, 0x00, 0x12, 0xED, 0x01, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 
   0x14, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xEA, 0x00, 0x16, 0xE9, 0x00, 0x16, 
   0xE8, 0x00, 0x17, 0xE7, 0x01, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE7, 0x00, 0x19, 0xE6, 
   0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE4, 0x00, 
   0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 
   0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 
   0x00, 0x21, 0xDD, 0x00, 0x21, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDB, 0x01, 0x23, 0xDB, 0x00, 
   0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 
   0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD6, 
   0x00, 0x2A, 0xD6, 0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 
   0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2D, 0xD1, 0x00, 0x2E, 
   0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x01, 0x30, 0xCE, 0x00, 0x31, 0xCE, 
   0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCD, 0x01, 0x32, 0xCB, 0x00, 0x34, 0xCC, 0x00, 
   0x33, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x34, 0xC9, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 
   0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3F, 
   0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x01, 0x41, 0xBE, 
   0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBB, 0x00, 
   0x44, 0xBC, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 
   0xB9, 0x01, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB8, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 
   0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB4, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xAF, 0x01, 0x50, 0xAF, 0x01, 0x50, 0xAE, 
   0x00, 0x51, 0xAE, 0x00, 0x52, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x54, 0xAC, 0x00, 
   0x54, 0xAC, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 
   0xA8, 0x00, 0x57, 0xA9, 0x01, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 
   0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA3, 0x01, 
   0x5C, 0xA4, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 
   0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x01, 
   0x63, 0x9B, 0x00, 0x64, 0x9A, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 
   0x99, 0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 
   0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x01, 
   0x6B, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 
   0x91, 0x01, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x90, 0x01, 0x70, 0x8F, 0x00, 0x70, 0x8E, 
   0x01, 0x71, 0x8D, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x00, 
   0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 
   0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x00, 0x78, 0x88, 0x00, 0x78, 0x87, 0x00, 0x79, 0x87, 
   0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 
   0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 
   0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0x7F, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7F, 
   0x00, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x82, 0x7D, 0x00, 0x83, 0x7C, 0x00, 
   0x84, 0x7B, 0x01, 0x84, 0x7B, 0x00, 0x84, 0x7B, 0x00, 0x85, 0x7A, 0x01, 0x85, 0x79, 0x01, 0x86, 
   0x79, 0x01, 0x86, 0x79, 0x01, 0x87, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x08, 0xF6, 
   0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF5, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 
   0x0C, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0E, 0xF2, 0x00, 0x0E, 
   0xF0, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 
   0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 
   0x13, 0xEC, 0x00, 0x14, 0xEA, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xE9, 0x01, 0x16, 0xEA, 0x00, 0x16, 
   0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE7, 
   0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 
   0x1B, 0xE3, 0x01, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x01, 0x1E, 0xE1, 0x00, 0x1D, 
   0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x01, 0x20, 0xDE, 
   0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x21, 0xDC, 0x00, 0x23, 0xDD, 0x01, 0x23, 0xDC, 0x00, 
   0x24, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 
   0xD9, 0x00, 0x26, 0xD8, 0x00, 0x26, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x27, 0xD7, 0x00, 0x29, 0xD7, 
   0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x01, 0x2A, 0xD5, 0x01, 0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 
   0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2D, 0xD1, 0x00, 0x2E, 
   0xD1, 0x00, 0x2E, 0xD1, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x31, 0xCE, 
   0x00, 0x30, 0xCE, 0x01, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x01, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 
   0x33, 0xCC, 0x00, 0x34, 0xCB, 0x01, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 
   0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x00, 0x39, 0xC6, 
   0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 
   0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 
   0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 
   0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x01, 0x43, 0xBC, 0x00, 
   0x43, 0xBB, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x45, 
   0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 
   0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 
   0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 
   0xB1, 0x00, 0x4E, 0xB0, 0x01, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 
   0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 
   0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 
   0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 
   0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 
   0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 
   0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA0, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 
   0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x00, 
   0x64, 0x9B, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9B, 0x00, 0x66, 0x9A, 0x00, 0x65, 
   0x9A, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x00, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x96, 
   0x00, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x94, 0x00, 
   0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x01, 0x6D, 0x91, 0x00, 0x6E, 
   0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x70, 0x8F, 
   0x01, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 
   0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 
   0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 
   0x01, 0x79, 0x86, 0x00, 0x79, 0x85, 0x01, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x00, 
   0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x01, 0x7D, 
   0x81, 0x01, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 
   0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x01, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x00, 
   0x83, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x85, 0x7B, 0x01, 0x85, 0x7A, 0x01, 0x86, 
   0x7A, 0x01, 0x86, 0x79, 0x01, 0x86, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x07, 0xF7, 0x00, 0x08, 0xF6, 
   0x00, 0x08, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 
   0x0B, 0xF3, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 
   0xF1, 0x00, 0x0D, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0xEF, 
   0x00, 0x10, 0xEE, 0x01, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 0xEC, 0x00, 0x12, 0xED, 0x00, 
   0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 
   0xEA, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE7, 0x01, 0x18, 0xE7, 0x00, 0x18, 0xE6, 
   0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1A, 0xE4, 0x00, 
   0x1A, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 
   0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 
   0x00, 0x20, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x21, 0xDD, 0x01, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 
   0x23, 0xDC, 0x01, 0x23, 0xDB, 0x00, 0x24, 0xDB, 0x01, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x25, 
   0xD9, 0x01, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 
   0x00, 0x28, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x01, 
   0x2B, 0xD3, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 
   0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x30, 0xD0, 0x00, 0x2F, 0xCF, 
   0x01, 0x31, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 
   0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 
   0xCA, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 
   0x00, 0x39, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x3A, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 
   0x3B, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 
   0xC2, 0x00, 0x3D, 0xC1, 0x01, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x3F, 0xBF, 
   0x00, 0x41, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 
   0x42, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x46, 
   0xBA, 0x00, 0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB7, 0x00, 0x48, 0xB7, 
   0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 
   0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB4, 0x01, 0x4D, 0xB3, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 
   0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 
   0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 
   0x52, 0xAD, 0x00, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x01, 0x55, 0xAA, 0x01, 0x54, 0xAB, 0x00, 0x55, 
   0xAA, 0x00, 0x56, 0xAA, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 
   0x01, 0x59, 0xA7, 0x01, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 
   0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 
   0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 
   0x01, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x01, 
   0x63, 0x9D, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 
   0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x01, 0x67, 0x97, 
   0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x01, 0x69, 0x95, 0x01, 0x6A, 0x95, 0x01, 
   0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x93, 0x01, 0x6D, 
   0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x8F, 0x00, 0x6F, 0x8F, 
   0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 
   0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 
   0x8A, 0x00, 0x76, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 
   0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 
   0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x00, 0x7D, 
   0x82, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x80, 
   0x00, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x01, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 0x7D, 0x00, 
   0x83, 0x7D, 0x01, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 
   0x7A, 0x01, 0x86, 0x7A, 0x00, 0x85, 0xF9, 0x00, 0x07, 0xF8, 0x00, 0x07, 0xF8, 0x00, 0x07, 0xF7, 
   0x00, 0x08, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x01, 0x0A, 0xF4, 0x00, 
   0x0A, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 
   0xF2, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x0F, 0xEF, 
   0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 0xED, 0x00, 0x12, 0xED, 0x00, 
   0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 
   0xEA, 0x00, 0x15, 0xEA, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x01, 0x17, 0xE7, 
   0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE5, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 
   0x1B, 0xE5, 0x00, 0x1B, 0xE3, 0x01, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 
   0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 
   0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 
   0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x00, 0x24, 
   0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 
   0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x01, 0x29, 0xD5, 0x00, 
   0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2B, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 
   0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xD0, 
   0x00, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCE, 0x00, 0x32, 0xCC, 0x01, 
   0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x00, 0x35, 
   0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC8, 
   0x01, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 
   0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 
   0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xC0, 
   0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x00, 0x41, 0xBD, 0x00, 
   0x43, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 
   0xBA, 0x01, 0x45, 0xB9, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x46, 0xB8, 0x00, 0x48, 0xB8, 
   0x01, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 
   0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xB0, 
   0x00, 0x50, 0xAF, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 
   0x53, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 
   0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x57, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 
   0x00, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA5, 0x01, 
   0x5A, 0xA4, 0x01, 0x5B, 0xA5, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 
   0xA2, 0x00, 0x5E, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 
   0x00, 0x5F, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x01, 
   0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 
   0x9B, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 
   0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 
   0x6B, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 
   0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x8F, 
   0x01, 0x70, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 
   0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x75, 
   0x8A, 0x00, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 
   0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 
   0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x00, 0x7C, 
   0x82, 0x00, 0x7D, 0x83, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x80, 0x00, 0x7F, 0x80, 
   0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 
   0x82, 0x7D, 0x01, 0x82, 0x7C, 0x00, 0x83, 0x7C, 0x01, 0x83, 0x7C, 0x01, 0x84, 0x7B, 0x01, 0x84, 
   0x7B, 0x01, 0x85, 0x7A, 0x00, 0x86, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF8, 0x00, 0x07, 0xF8, 
   0x00, 0x08, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF5, 0x00, 
   0x0A, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 
   0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0E, 0xEF, 
   0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x11, 0xED, 0x00, 
   0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 
   0xEA, 0x00, 0x14, 0xEA, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 
   0x00, 0x18, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 
   0x1A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 
   0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x01, 0x1F, 0xE0, 
   0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDE, 0x00, 
   0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x24, 
   0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD8, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD8, 
   0x00, 0x27, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 
   0x2A, 0xD5, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 
   0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 
   0x01, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCF, 0x01, 0x30, 0xCD, 0x01, 0x32, 0xCD, 0x00, 
   0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 
   0xCA, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x01, 0x37, 0xC8, 
   0x00, 0x37, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x01, 
   0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 
   0xC2, 0x00, 0x3C, 0xC2, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 
   0x00, 0x3F, 0xBF, 0x01, 0x40, 0xBF, 0x01, 0x41, 0xBF, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBD, 0x01, 
   0x42, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x45, 
   0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x47, 0xB8, 
   0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB6, 0x00, 0x48, 0xB6, 0x01, 0x4A, 0xB6, 0x00, 
   0x4A, 0xB5, 0x01, 0x4B, 0xB5, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4C, 0xB3, 0x00, 0x4C, 
   0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x01, 0x4E, 0xB1, 
   0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x01, 0x51, 0xAF, 0x00, 0x51, 0xAD, 0x01, 
   0x52, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x54, 
   0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 
   0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x59, 0xA7, 0x00, 0x59, 0xA6, 0x00, 
   0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 0xA3, 0x00, 0x5C, 0xA4, 0x01, 0x5C, 
   0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5E, 0xA1, 0x01, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 
   0x01, 0x5F, 0xA0, 0x00, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 
   0x61, 0x9E, 0x00, 0x62, 0x9C, 0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9B, 0x00, 0x64, 
   0x9A, 0x01, 0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x67, 0x98, 
   0x01, 0x67, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 0x96, 0x01, 0x68, 0x96, 0x00, 0x69, 0x96, 0x01, 
   0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x00, 0x6C, 
   0x92, 0x00, 0x6C, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 
   0x00, 0x6F, 0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 
   0x72, 0x8E, 0x00, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x01, 0x74, 
   0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 
   0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x01, 
   0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 
   0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 
   0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 
   0x81, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7D, 0x00, 0x83, 0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 
   0x7B, 0x01, 0x84, 0x7B, 0x01, 0x85, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF8, 
   0x00, 0x07, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF5, 0x00, 
   0x0A, 0xF5, 0x01, 0x0A, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 
   0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0E, 0xF0, 
   0x00, 0x0E, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 
   0x12, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x14, 
   0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 
   0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 
   0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1A, 0xE4, 0x01, 0x1A, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 
   0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x01, 0x1D, 0xE1, 0x00, 0x1E, 0xE1, 
   0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x01, 
   0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 
   0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xDA, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD8, 
   0x00, 0x27, 0xD7, 0x00, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x01, 
   0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 
   0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x01, 0x2E, 0xD1, 0x01, 0x2F, 0xD1, 
   0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x00, 
   0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 
   0xCB, 0x00, 0x34, 0xCA, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 
   0x01, 0x37, 0xC8, 0x01, 0x37, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x00, 
   0x39, 0xC5, 0x01, 0x3A, 0xC5, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3B, 
   0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC0, 
   0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 
   0x41, 0xBE, 0x00, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 0x44, 
   0xBB, 0x00, 0x44, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 
   0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 
   0x49, 0xB5, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 
   0xB3, 0x00, 0x4C, 0xB2, 0x01, 0x4D, 0xB3, 0x00, 0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 
   0x00, 0x4E, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 
   0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 
   0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x00, 0x56, 0xA9, 
   0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA7, 0x00, 
   0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA3, 0x00, 0x5B, 
   0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 
   0x00, 0x5E, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 
   0x61, 0x9D, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x63, 
   0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 0x66, 0x99, 
   0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 
   0x69, 0x96, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 
   0x93, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x01, 0x6E, 0x91, 
   0x00, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x70, 0x8E, 0x01, 
   0x71, 0x8E, 0x00, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x01, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 
   0x8C, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8B, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 
   0x00, 0x76, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x87, 0x01, 0x78, 0x86, 0x00, 
   0x79, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x00, 0x7B, 
   0x83, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7E, 0x81, 0x01, 0x7E, 0x81, 
   0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7E, 0x00, 
   0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x82, 0x7D, 0x01, 0x83, 0x7C, 0x01, 0x84, 
   0x7C, 0x00, 0x84, 0x7B, 0x00, 0x84, 0xFA, 0x00, 0x05, 0xFA, 0x00, 0x06, 0xF9, 0x00, 0x05, 0xF8, 
   0x00, 0x07, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x07, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF6, 0x00, 
   0x09, 0xF5, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0B, 
   0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF2, 0x00, 0x0C, 0xF1, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 
   0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 0x00, 
   0x10, 0xED, 0x00, 0x11, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 
   0xEB, 0x00, 0x13, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 
   0x00, 0x17, 0xE8, 0x00, 0x16, 0xE7, 0x00, 0x17, 0xE7, 0x00, 0x17, 0xE7, 0x01, 0x18, 0xE7, 0x00, 
   0x19, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 
   0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 
   0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xE0, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 
   0x21, 0xDD, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDD, 0x00, 0x22, 0xDB, 0x00, 0x23, 
   0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD9, 
   0x00, 0x27, 0xD8, 0x00, 0x26, 0xD8, 0x01, 0x27, 0xD8, 0x00, 0x28, 0xD6, 0x00, 0x28, 0xD6, 0x01, 
   0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 
   0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 
   0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 
   0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x32, 0xCC, 0x00, 0x33, 
   0xCB, 0x00, 0x33, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x34, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 
   0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 
   0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 
   0xC4, 0x01, 0x3B, 0xC3, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x01, 0x3D, 0xC1, 0x00, 0x3D, 0xC1, 
   0x01, 0x3F, 0xC0, 0x00, 0x3E, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xC0, 0x01, 0x41, 0xBF, 0x00, 
   0x41, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBD, 0x00, 0x43, 0xBD, 0x00, 0x43, 
   0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 
   0x00, 0x47, 0xB9, 0x00, 0x47, 0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x01, 0x48, 0xB6, 0x00, 
   0x48, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4C, 
   0xB4, 0x00, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 
   0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 
   0x51, 0xAE, 0x01, 0x51, 0xAD, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 
   0xAC, 0x00, 0x54, 0xAB, 0x01, 0x54, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 
   0x00, 0x56, 0xA9, 0x01, 0x57, 0xA8, 0x00, 0x58, 0xA8, 0x01, 0x57, 0xA8, 0x01, 0x58, 0xA6, 0x00, 
   0x58, 0xA7, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 
   0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5D, 0xA1, 
   0x01, 0x5E, 0xA0, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x00, 0x60, 0x9F, 0x01, 
   0x60, 0x9E, 0x00, 0x61, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 
   0x9B, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 
   0x00, 0x66, 0x99, 0x01, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 
   0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x01, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 
   0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 
   0x00, 0x6E, 0x91, 0x00, 0x6E, 0x90, 0x01, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 
   0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8E, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x01, 0x73, 
   0x8C, 0x01, 0x74, 0x8C, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 
   0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 
   0x79, 0x86, 0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7B, 0x85, 0x01, 0x7B, 
   0x84, 0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x00, 0x7E, 0x81, 
   0x00, 0x7E, 0x81, 0x01, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x01, 
   0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x01, 0x83, 0x7C, 0x01, 0x83, 
   0x7C, 0x00, 0x83, 0x7C, 0x00, 0x84, 0xFA, 0x00, 0x04, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 
   0x00, 0x06, 0xF9, 0x00, 0x07, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF7, 0x00, 
   0x08, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF5, 0x00, 0x0A, 0xF5, 0x00, 0x0B, 0xF5, 0x00, 0x0B, 
   0xF3, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 
   0x00, 0x0E, 0xF0, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0xF0, 0x00, 0x10, 0xEF, 0x00, 
   0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 0xEE, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 
   0xEB, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 
   0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE6, 0x00, 
   0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1B, 
   0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x01, 0x1D, 0xE1, 0x00, 0x1D, 0xE2, 
   0x00, 0x1E, 0xE1, 0x01, 0x1F, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x01, 
   0x21, 0xDE, 0x01, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 
   0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDA, 0x01, 0x25, 0xD9, 
   0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x01, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 
   0x29, 0xD6, 0x01, 0x29, 0xD6, 0x01, 0x2A, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 
   0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 
   0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xCF, 0x00, 0x30, 0xD0, 0x00, 0x30, 0xCE, 0x00, 
   0x31, 0xCF, 0x01, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x32, 0xCD, 0x00, 0x33, 
   0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xCA, 
   0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x01, 0x38, 0xC7, 0x00, 
   0x39, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 
   0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 
   0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 
   0x40, 0xBE, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x43, 
   0xBC, 0x01, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xBA, 
   0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x01, 
   0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 
   0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x01, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 
   0x00, 0x4D, 0xB1, 0x01, 0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x01, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x00, 
   0x50, 0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x53, 
   0xAC, 0x00, 0x53, 0xAB, 0x00, 0x53, 0xAB, 0x01, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xAA, 
   0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA7, 0x00, 
   0x58, 0xA7, 0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x00, 0x5A, 0xA6, 0x00, 0x5B, 0xA5, 0x00, 0x5B, 
   0xA4, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 
   0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x60, 0x9F, 0x00, 
   0x60, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9D, 0x00, 0x61, 0x9E, 0x01, 0x62, 0x9D, 0x00, 0x63, 
   0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9C, 0x01, 0x65, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x99, 
   0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x67, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 
   0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x01, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 
   0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 
   0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 
   0x70, 0x8E, 0x00, 0x70, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 
   0x8D, 0x00, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 
   0x00, 0x75, 0x89, 0x01, 0x76, 0x88, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 
   0x78, 0x87, 0x00, 0x78, 0x86, 0x00, 0x79, 0x85, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x85, 0x01, 0x7A, 
   0x84, 0x00, 0x7B, 0x84, 0x01, 0x7C, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 
   0x00, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x7F, 0x01, 
   0x80, 0x7F, 0x00, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x81, 0x7E, 0x01, 0x82, 0x7D, 0x00, 0x83, 
   0x7D, 0x00, 0x83, 0x7C, 0x01, 0x83, 0xFC, 0x00, 0x04, 0xFA, 0x00, 0x04, 0xFA, 0x00, 0x05, 0xFA, 
   0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x07, 0xF7, 0x00, 
   0x08, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF5, 0x00, 0x09, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 
   0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0B, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 
   0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x01, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 
   0x10, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x11, 0xEE, 0x01, 0x11, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 
   0xEC, 0x00, 0x12, 0xEB, 0x00, 0x14, 0xEB, 0x01, 0x14, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x14, 0xE9, 
   0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 
   0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x19, 0xE5, 0x00, 0x1B, 
   0xE4, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE2, 
   0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x01, 
   0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 
   0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDB, 0x00, 0x25, 0xDB, 0x01, 0x25, 0xDA, 
   0x00, 0x26, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 
   0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2B, 
   0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 
   0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x01, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xCF, 0x00, 
   0x30, 0xCF, 0x01, 0x30, 0xCE, 0x00, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x33, 
   0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 
   0x01, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x01, 
   0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 
   0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3D, 0xC2, 0x01, 0x3D, 0xC2, 
   0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 
   0x40, 0xBF, 0x01, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBE, 0x00, 0x42, 0xBD, 0x01, 0x43, 
   0xBC, 0x00, 0x42, 0xBC, 0x01, 0x44, 0xBC, 0x00, 0x44, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x45, 0xBA, 
   0x00, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x01, 0x47, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x48, 0xB7, 0x00, 
   0x47, 0xB7, 0x01, 0x48, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 
   0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB3, 
   0x01, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x01, 0x4F, 0xB0, 0x01, 
   0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 0x01, 0x51, 0xAD, 0x01, 0x51, 0xAD, 0x00, 0x52, 
   0xAD, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 0x55, 0xAA, 
   0x01, 0x55, 0xA9, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x01, 
   0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA5, 0x00, 0x59, 0xA5, 0x00, 0x5B, 
   0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 
   0x01, 0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 
   0x5F, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 
   0x9D, 0x00, 0x62, 0x9D, 0x01, 0x64, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x01, 0x65, 0x9A, 
   0x00, 0x65, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x98, 0x00, 
   0x68, 0x97, 0x01, 0x68, 0x97, 0x00, 0x69, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x95, 0x00, 0x6A, 
   0x95, 0x00, 0x6A, 0x94, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 
   0x00, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x01, 
   0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8E, 0x00, 0x72, 
   0x8D, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x74, 0x8B, 0x01, 0x75, 0x8B, 
   0x01, 0x75, 0x8A, 0x01, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 0x88, 0x01, 
   0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x79, 0x86, 0x01, 0x7A, 
   0x85, 0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x01, 
   0x7F, 0x80, 0x01, 0x80, 0x7F, 0x00, 0x80, 0x7E, 0x00, 0x81, 0x7E, 0x00, 0x82, 0x7E, 0x00, 0x82, 
   0x7D, 0x00, 0x82, 0x7C, 0x00, 0x83, 0xFC, 0x01, 0x04, 0xFB, 0x00, 0x04, 0xFB, 0x00, 0x04, 0xFA, 
   0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF8, 0x00, 0x07, 0xF8, 0x00, 
   0x07, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 
   0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0C, 0xF2, 
   0x00, 0x0D, 0xF2, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 
   0x0F, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 
   0xEC, 0x01, 0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEB, 0x00, 0x14, 0xEA, 
   0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 
   0x17, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 
   0xE5, 0x00, 0x1B, 0xE5, 0x00, 0x1B, 0xE4, 0x01, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 
   0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE0, 0x01, 0x1F, 0xE0, 0x01, 0x1F, 0xE0, 0x00, 
   0x20, 0xE0, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x21, 0xDE, 0x00, 0x22, 
   0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDA, 
   0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 
   0x28, 0xD7, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x01, 0x29, 0xD6, 0x00, 0x29, 0xD5, 0x00, 0x2A, 
   0xD5, 0x00, 0x2B, 0xD4, 0x01, 0x2B, 0xD3, 0x00, 0x2B, 0xD3, 0x01, 0x2B, 0xD2, 0x00, 0x2C, 0xD3, 
   0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD0, 0x00, 0x2E, 0xD1, 0x01, 0x2F, 0xD0, 0x00, 
   0x2F, 0xD0, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x31, 
   0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 
   0x00, 0x35, 0xCA, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC8, 0x00, 
   0x38, 0xC8, 0x01, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x3A, 0xC6, 0x01, 0x39, 
   0xC5, 0x01, 0x3A, 0xC4, 0x01, 0x3B, 0xC4, 0x01, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 
   0x01, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 
   0x3F, 0xBF, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x42, 
   0xBD, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x43, 0xBB, 0x00, 0x44, 0xBB, 0x01, 0x45, 0xBB, 
   0x00, 0x45, 0xBA, 0x01, 0x45, 0xB9, 0x01, 0x45, 0xB9, 0x00, 0x46, 0xB8, 0x01, 0x47, 0xB8, 0x00, 
   0x47, 0xB7, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB6, 0x00, 0x49, 
   0xB5, 0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 
   0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 0xB0, 0x01, 
   0x50, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x01, 0x51, 
   0xAD, 0x00, 0x52, 0xAC, 0x00, 0x52, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAB, 
   0x00, 0x55, 0xAB, 0x01, 0x55, 0xAA, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x57, 0xA8, 0x01, 
   0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x59, 
   0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5C, 0xA4, 0x00, 0x5C, 0xA3, 0x01, 0x5C, 0xA3, 
   0x00, 0x5C, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x00, 
   0x5F, 0xA0, 0x01, 0x5F, 0x9F, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x01, 0x62, 0x9E, 0x01, 0x61, 
   0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x01, 0x63, 0x9C, 0x00, 0x64, 0x9A, 
   0x00, 0x64, 0x9A, 0x01, 0x65, 0x99, 0x01, 0x65, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 
   0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 0x96, 0x01, 0x69, 0x96, 0x01, 0x69, 0x96, 0x00, 0x69, 
   0x96, 0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x93, 0x00, 0x6C, 0x93, 
   0x00, 0x6D, 0x92, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 
   0x6F, 0x90, 0x00, 0x70, 0x90, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x72, 0x8E, 0x00, 0x72, 
   0x8D, 0x01, 0x72, 0x8D, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x74, 0x8B, 
   0x01, 0x75, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 
   0x77, 0x88, 0x00, 0x78, 0x87, 0x00, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x79, 
   0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 
   0x00, 0x7D, 0x83, 0x00, 0x7D, 0x82, 0x01, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7E, 0x81, 0x01, 
   0x7F, 0x80, 0x00, 0x80, 0x7F, 0x01, 0x7F, 0x7F, 0x00, 0x81, 0x7F, 0x01, 0x81, 0x7E, 0x00, 0x81, 
   0x7D, 0x01, 0x82, 0x7D, 0x01, 0x82, 0xFC, 0x00, 0x03, 0xFC, 0x00, 0x04, 0xFB, 0x00, 0x04, 0xFA, 
   0x00, 0x05, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x07, 0xF8, 0x00, 
   0x07, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 
   0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 
   0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF2, 0x01, 0x0E, 0xF2, 0x01, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 
   0x0F, 0xEF, 0x00, 0x10, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 
   0xED, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 
   0x00, 0x15, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x01, 0x16, 0xE8, 0x01, 0x16, 0xE8, 0x00, 
   0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x01, 0x19, 
   0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE3, 
   0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 
   0x1E, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 
   0xDE, 0x00, 0x22, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x00, 0x23, 0xDA, 
   0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 0x25, 0xD9, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD8, 0x01, 
   0x27, 0xD8, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD6, 0x00, 0x28, 0xD5, 0x00, 0x2A, 
   0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x01, 0x2B, 0xD3, 0x00, 0x2B, 0xD3, 0x01, 0x2B, 0xD3, 
   0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 
   0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x00, 0x31, 
   0xCE, 0x00, 0x32, 0xCC, 0x01, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x35, 0xC9, 0x01, 0x36, 0xC9, 0x00, 
   0x37, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 
   0xC6, 0x00, 0x3A, 0xC5, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 0x3C, 0xC3, 
   0x00, 0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x01, 
   0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x01, 0x41, 
   0xBE, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBD, 0x01, 0x43, 0xBC, 0x01, 0x44, 0xBB, 0x00, 0x43, 0xBB, 
   0x00, 0x45, 0xBA, 0x00, 0x44, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x00, 
   0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB7, 0x00, 0x4A, 
   0xB5, 0x01, 0x49, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 
   0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 
   0x4E, 0xB0, 0x00, 0x4F, 0xAF, 0x01, 0x4F, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 
   0xAE, 0x01, 0x52, 0xAE, 0x01, 0x52, 0xAD, 0x00, 0x52, 0xAC, 0x00, 0x53, 0xAC, 0x01, 0x53, 0xAB, 
   0x01, 0x54, 0xAB, 0x00, 0x54, 0xAA, 0x00, 0x55, 0xAA, 0x01, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x01, 
   0x57, 0xA8, 0x01, 0x58, 0xA8, 0x01, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 
   0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 
   0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 
   0x5E, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x61, 0x9E, 0x01, 0x61, 
   0x9E, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x63, 0x9D, 0x01, 0x63, 0x9C, 0x00, 0x63, 0x9B, 
   0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x99, 0x00, 0x65, 0x99, 0x00, 0x66, 0x99, 0x01, 
   0x67, 0x98, 0x00, 0x68, 0x98, 0x01, 0x68, 0x98, 0x00, 0x68, 0x97, 0x00, 0x68, 0x96, 0x00, 0x69, 
   0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 
   0x01, 0x6C, 0x93, 0x01, 0x6D, 0x92, 0x01, 0x6D, 0x91, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 
   0x6E, 0x91, 0x00, 0x6F, 0x90, 0x01, 0x6F, 0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8F, 0x00, 0x71, 
   0x8E, 0x01, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8C, 0x01, 0x73, 0x8C, 
   0x01, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x00, 0x75, 0x89, 0x01, 0x76, 0x89, 0x01, 
   0x76, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x01, 0x79, 
   0x86, 0x01, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x01, 0x7B, 0x84, 0x00, 0x7B, 0x83, 
   0x00, 0x7C, 0x83, 0x01, 0x7C, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x01, 0x7E, 0x81, 0x00, 
   0x7E, 0x80, 0x01, 0x7F, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x80, 0x7F, 0x01, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x00, 0x82, 0x7D, 0x01, 0x81, 0xFC, 0x00, 0x02, 0xFC, 0x00, 0x03, 0xFB, 0x00, 0x03, 0xFB, 
   0x00, 0x04, 0xFB, 0x00, 0x04, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x05, 0xF9, 0x00, 0x06, 0xF8, 0x00, 
   0x06, 0xF8, 0x00, 0x07, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x09, 0xF6, 0x00, 0x08, 
   0xF5, 0x01, 0x09, 0xF5, 0x01, 0x0A, 0xF4, 0x00, 0x0A, 0xF4, 0x01, 0x0B, 0xF3, 0x00, 0x0B, 0xF3, 
   0x00, 0x0C, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 
   0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x10, 0xEE, 0x01, 0x10, 
   0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 0xEC, 0x00, 0x12, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 
   0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 
   0x17, 0xE9, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x17, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 
   0xE6, 0x01, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 
   0x00, 0x1C, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 0x1D, 0xE0, 0x00, 
   0x1E, 0xE1, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDE, 0x00, 0x20, 0xDE, 0x00, 0x21, 
   0xDE, 0x00, 0x22, 0xDE, 0x01, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x22, 0xDB, 0x00, 0x23, 0xDB, 
   0x00, 0x24, 0xDA, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x25, 0xD9, 0x00, 
   0x27, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD8, 0x01, 0x28, 0xD7, 0x00, 0x28, 0xD6, 0x00, 0x29, 
   0xD6, 0x01, 0x29, 0xD5, 0x01, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 
   0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2E, 0xD1, 0x00, 
   0x2E, 0xD1, 0x00, 0x2F, 0xCF, 0x00, 0x2F, 0xCF, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCE, 0x00, 0x30, 
   0xCE, 0x00, 0x31, 0xCE, 0x01, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x01, 0x33, 0xCC, 0x00, 0x33, 0xCB, 
   0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x36, 0xC9, 0x00, 
   0x36, 0xC8, 0x00, 0x37, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x37, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 
   0xC6, 0x00, 0x3A, 0xC6, 0x01, 0x39, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 
   0x01, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 
   0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x01, 0x3F, 0xC0, 0x01, 0x3F, 0xBF, 0x00, 0x40, 0xBE, 0x00, 0x40, 
   0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 0x00, 0x42, 0xBC, 0x00, 0x42, 0xBC, 0x00, 0x43, 0xBC, 
   0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 
   0x46, 0xB8, 0x00, 0x47, 0xB8, 0x01, 0x48, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 
   0xB7, 0x00, 0x49, 0xB6, 0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x01, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 
   0x01, 0x4C, 0xB3, 0x01, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 
   0x4E, 0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xB0, 0x01, 0x50, 0xAF, 0x00, 0x51, 0xAF, 0x00, 0x50, 
   0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x01, 0x53, 0xAD, 0x00, 0x54, 0xAB, 
   0x01, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAA, 0x01, 0x55, 0xA9, 0x01, 0x55, 0xA9, 0x00, 
   0x56, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x58, 0xA7, 0x01, 0x58, 0xA8, 0x00, 0x58, 0xA6, 0x00, 0x59, 
   0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5A, 0xA4, 0x00, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 
   0x5E, 0xA1, 0x01, 0x5F, 0xA0, 0x01, 0x60, 0xA0, 0x01, 0x60, 0x9F, 0x00, 0x60, 0x9E, 0x01, 0x60, 
   0x9F, 0x00, 0x61, 0x9E, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x64, 0x9C, 
   0x01, 0x64, 0x9C, 0x00, 0x64, 0x9A, 0x00, 0x65, 0x9B, 0x00, 0x65, 0x9A, 0x01, 0x65, 0x9A, 0x00, 
   0x66, 0x99, 0x01, 0x66, 0x99, 0x01, 0x67, 0x97, 0x00, 0x68, 0x98, 0x01, 0x68, 0x97, 0x00, 0x68, 
   0x96, 0x00, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x94, 0x00, 0x6C, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6C, 0x93, 0x00, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 
   0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x70, 
   0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8C, 
   0x00, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x00, 0x74, 0x8A, 0x01, 0x75, 0x89, 0x01, 0x76, 0x89, 0x00, 
   0x77, 0x89, 0x00, 0x76, 0x89, 0x01, 0x77, 0x88, 0x01, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x79, 
   0x86, 0x01, 0x79, 0x86, 0x01, 0x79, 0x85, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x84, 0x00, 0x7B, 0x84, 
   0x01, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 
   0x7E, 0x81, 0x01, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x7F, 0x00, 0x81, 
   0x7E, 0x00, 0x81, 0x7E, 0x00, 0x81, 0xFD, 0x00, 0x02, 0xFC, 0x00, 0x02, 0xFC, 0x00, 0x03, 0xFC, 
   0x00, 0x04, 0xFB, 0x00, 0x04, 0xFB, 0x00, 0x04, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x05, 0xF9, 0x00, 
   0x06, 0xF9, 0x00, 0x07, 0xF8, 0x00, 0x07, 0xF8, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x09, 
   0xF6, 0x01, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF5, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 
   0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0D, 0xF1, 0x00, 
   0x0E, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0E, 0xEF, 0x00, 0x0F, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 
   0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 
   0x00, 0x14, 0xEB, 0x01, 0x13, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 
   0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 
   0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE5, 0x00, 0x1A, 0xE5, 0x01, 0x1A, 0xE4, 0x00, 0x1B, 0xE3, 
   0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x01, 0x1C, 0xE2, 0x01, 0x1D, 0xE2, 0x00, 0x1D, 0xE1, 0x00, 
   0x1E, 0xE0, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x20, 0xDF, 0x00, 0x20, 0xDE, 0x01, 0x21, 
   0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 
   0x00, 0x24, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 
   0x26, 0xD9, 0x00, 0x27, 0xD8, 0x01, 0x27, 0xD8, 0x00, 0x28, 0xD7, 0x01, 0x28, 0xD7, 0x00, 0x28, 
   0xD7, 0x01, 0x28, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD3, 
   0x01, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x00, 0x2D, 0xD3, 0x00, 0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 
   0x2D, 0xD1, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 
   0xCE, 0x01, 0x31, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 
   0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 
   0x36, 0xC9, 0x01, 0x36, 0xC9, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x01, 0x38, 0xC7, 0x00, 0x38, 
   0xC7, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x01, 0x3B, 0xC5, 0x00, 0x3A, 0xC4, 
   0x01, 0x3B, 0xC3, 0x00, 0x3B, 0xC3, 0x00, 0x3D, 0xC2, 0x00, 0x3C, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 
   0x3D, 0xC1, 0x01, 0x3E, 0xC1, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 
   0xBF, 0x01, 0x41, 0xBE, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBE, 0x00, 0x43, 0xBD, 0x00, 0x43, 0xBC, 
   0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 0x44, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x00, 
   0x46, 0xB9, 0x01, 0x46, 0xB9, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 0xB8, 0x00, 0x48, 
   0xB7, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 
   0x01, 0x4B, 0xB3, 0x00, 0x4B, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB2, 0x00, 
   0x4E, 0xB1, 0x01, 0x4E, 0xB0, 0x01, 0x4E, 0xB1, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 
   0xAF, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x01, 0x51, 0xAD, 0x00, 0x53, 0xAD, 0x00, 0x53, 0xAC, 
   0x00, 0x53, 0xAC, 0x00, 0x54, 0xAC, 0x00, 0x54, 0xAA, 0x01, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 
   0x55, 0xA9, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x57, 0xA8, 0x00, 0x58, 
   0xA7, 0x01, 0x59, 0xA6, 0x00, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 
   0x00, 0x5B, 0xA3, 0x00, 0x5B, 0xA3, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x01, 
   0x5E, 0xA1, 0x00, 0x5E, 0xA1, 0x01, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x01, 0x60, 
   0x9F, 0x01, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x62, 0x9E, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9D, 
   0x00, 0x63, 0x9C, 0x01, 0x63, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 0x65, 0x99, 0x01, 
   0x66, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x68, 0x98, 0x00, 0x68, 
   0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x95, 0x01, 0x6A, 0x95, 0x00, 0x6B, 0x94, 
   0x00, 0x6B, 0x94, 0x00, 0x6B, 0x93, 0x00, 0x6C, 0x92, 0x01, 0x6D, 0x93, 0x01, 0x6D, 0x92, 0x01, 
   0x6D, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x90, 0x01, 0x70, 
   0x8F, 0x00, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x01, 0x72, 0x8D, 0x01, 0x72, 0x8D, 
   0x01, 0x73, 0x8C, 0x01, 0x74, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x75, 0x8A, 0x01, 0x75, 0x8A, 0x00, 
   0x76, 0x89, 0x01, 0x76, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x88, 0x00, 0x78, 
   0x87, 0x01, 0x78, 0x87, 0x00, 0x79, 0x85, 0x00, 0x7A, 0x86, 0x00, 0x7A, 0x85, 0x00, 0x7A, 0x85, 
   0x01, 0x7B, 0x84, 0x00, 0x7C, 0x83, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7F, 0x81, 0x01, 0x7F, 0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 
   0x7F, 0x01, 0x81, 0x7F, 0x00, 0x81, 0xFE, 0x00, 0x01, 0xFD, 0x00, 0x02, 0xFC, 0x00, 0x03, 0xFC, 
   0x00, 0x03, 0xFB, 0x00, 0x03, 0xFB, 0x00, 0x04, 0xFA, 0x00, 0x04, 0xFA, 0x00, 0x05, 0xF9, 0x00, 
   0x06, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF8, 0x00, 0x07, 0xF7, 0x00, 0x07, 0xF7, 0x00, 0x08, 
   0xF6, 0x00, 0x09, 0xF6, 0x00, 0x09, 0xF5, 0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF4, 
   0x00, 0x0A, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0C, 0xF3, 0x00, 0x0D, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 
   0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xEF, 0x00, 0x0F, 0xEF, 0x00, 0x10, 
   0xEF, 0x01, 0x10, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x11, 0xED, 0x00, 0x12, 0xED, 0x00, 0x12, 0xEC, 
   0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x14, 0xEB, 0x01, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 
   0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x18, 
   0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 
   0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x01, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 
   0x1D, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1F, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 
   0xDE, 0x00, 0x20, 0xDE, 0x01, 0x21, 0xDE, 0x00, 0x22, 0xDD, 0x00, 0x22, 0xDD, 0x00, 0x23, 0xDC, 
   0x00, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x00, 0x23, 0xDB, 0x00, 0x24, 0xDA, 0x00, 0x25, 0xD9, 0x00, 
   0x25, 0xDA, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 
   0xD7, 0x00, 0x28, 0xD6, 0x01, 0x28, 0xD5, 0x00, 0x29, 0xD5, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 
   0x00, 0x2A, 0xD4, 0x00, 0x2C, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2C, 0xD2, 0x01, 
   0x2E, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 0xCF, 0x00, 0x30, 
   0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x00, 0x31, 0xCD, 0x00, 0x31, 0xCD, 0x00, 0x32, 0xCC, 
   0x00, 0x33, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x34, 0xCB, 0x01, 0x35, 0xCA, 0x00, 0x35, 0xCA, 0x00, 
   0x35, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x36, 0xC9, 0x01, 0x36, 0xC8, 0x00, 0x37, 0xC7, 0x00, 0x38, 
   0xC7, 0x00, 0x38, 0xC6, 0x01, 0x39, 0xC6, 0x01, 0x39, 0xC5, 0x00, 0x3A, 0xC5, 0x00, 0x3A, 0xC4, 
   0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x01, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x00, 
   0x3E, 0xC2, 0x00, 0x3D, 0xC1, 0x00, 0x3E, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 
   0xBF, 0x00, 0x40, 0xBF, 0x00, 0x41, 0xBE, 0x01, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x42, 0xBD, 
   0x00, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x01, 0x44, 0xBB, 0x01, 0x45, 0xBA, 0x00, 
   0x46, 0xBA, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x00, 0x48, 
   0xB7, 0x00, 0x49, 0xB7, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x49, 0xB5, 0x00, 0x4A, 0xB5, 
   0x01, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4C, 0xB3, 0x00, 0x4C, 0xB3, 0x00, 0x4D, 0xB2, 0x00, 
   0x4D, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 
   0xAF, 0x00, 0x50, 0xAF, 0x01, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 0x00, 0x52, 0xAC, 
   0x00, 0x53, 0xAC, 0x01, 0x53, 0xAC, 0x00, 0x53, 0xAB, 0x00, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x01, 
   0x55, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 
   0xA7, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x01, 0x59, 0xA6, 0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 
   0x01, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA4, 0x01, 0x5C, 0xA3, 0x01, 0x5D, 0xA2, 0x00, 
   0x5D, 0xA2, 0x01, 0x5E, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5F, 0xA1, 0x00, 0x5F, 0xA0, 0x01, 0x60, 
   0x9F, 0x01, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x00, 0x62, 0x9D, 
   0x01, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 
   0x65, 0x9A, 0x00, 0x66, 0x99, 0x00, 0x66, 0x99, 0x00, 0x66, 0x98, 0x01, 0x67, 0x98, 0x00, 0x67, 
   0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x97, 0x00, 0x69, 0x96, 0x00, 0x6A, 0x96, 0x00, 0x6A, 0x95, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x01, 0x6C, 0x93, 0x01, 0x6C, 0x93, 0x01, 
   0x6D, 0x91, 0x01, 0x6E, 0x92, 0x01, 0x6F, 0x91, 0x00, 0x6F, 0x91, 0x01, 0x6F, 0x90, 0x01, 0x6F, 
   0x8F, 0x00, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8E, 0x00, 0x71, 0x8E, 0x00, 0x72, 0x8D, 
   0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x01, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 
   0x75, 0x8A, 0x00, 0x76, 0x89, 0x01, 0x76, 0x89, 0x01, 0x77, 0x89, 0x00, 0x77, 0x88, 0x00, 0x77, 
   0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 
   0x00, 0x7B, 0x84, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x83, 0x00, 0x7C, 0x83, 0x00, 0x7D, 0x82, 0x01, 
   0x7D, 0x82, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x81, 0x00, 0x7E, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x80, 
   0x80, 0x00, 0x80, 0x7F, 0x01, 0x80, 0xFE, 0x00, 0x01, 0xFE, 0x00, 0x01, 0xFD, 0x00, 0x02, 0xFC, 
   0x00, 0x02, 0xFC, 0x00, 0x03, 0xFB, 0x00, 0x03, 0xFB, 0x00, 0x04, 0xFA, 0x00, 0x04, 0xFA, 0x00, 
   0x05, 0xFA, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF8, 0x00, 0x07, 0xF8, 0x00, 0x07, 0xF8, 0x00, 0x07, 
   0xF7, 0x00, 0x08, 0xF7, 0x01, 0x09, 0xF7, 0x00, 0x09, 0xF5, 0x00, 0x09, 0xF5, 0x00, 0x0A, 0xF4, 
   0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 
   0x0D, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 
   0xEF, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xEE, 0x00, 0x11, 0xED, 0x00, 0x12, 0xED, 
   0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x15, 0xEA, 0x00, 
   0x14, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x16, 0xE8, 0x00, 0x17, 0xE7, 0x00, 0x17, 
   0xE8, 0x00, 0x17, 0xE6, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 0x00, 0x19, 0xE4, 
   0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE4, 0x01, 0x1B, 0xE3, 0x00, 0x1C, 0xE2, 0x00, 0x1D, 0xE3, 0x00, 
   0x1D, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 0xDF, 0x00, 0x1F, 
   0xDF, 0x01, 0x20, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x22, 0xDD, 
   0x01, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDC, 0x00, 0x24, 0xDB, 0x00, 0x24, 0xDA, 0x00, 
   0x25, 0xDA, 0x00, 0x26, 0xDA, 0x00, 0x26, 0xD9, 0x01, 0x26, 0xD8, 0x00, 0x27, 0xD8, 0x00, 0x27, 
   0xD7, 0x00, 0x28, 0xD7, 0x01, 0x29, 0xD6, 0x00, 0x29, 0xD6, 0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD5, 
   0x00, 0x2A, 0xD5, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD4, 0x00, 0x2C, 0xD3, 0x00, 0x2C, 0xD2, 0x01, 
   0x2D, 0xD2, 0x00, 0x2D, 0xD2, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 0xD0, 0x00, 0x2F, 
   0xCF, 0x00, 0x30, 0xCF, 0x01, 0x31, 0xCE, 0x01, 0x30, 0xCE, 0x00, 0x31, 0xCE, 0x00, 0x32, 0xCD, 
   0x00, 0x32, 0xCC, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x00, 0x34, 0xCB, 0x00, 0x34, 0xCA, 0x01, 
   0x35, 0xC9, 0x01, 0x35, 0xCA, 0x01, 0x36, 0xC9, 0x01, 0x36, 0xC9, 0x01, 0x37, 0xC8, 0x00, 0x38, 
   0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x39, 0xC6, 0x01, 0x39, 0xC6, 0x00, 0x3A, 0xC5, 
   0x00, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3C, 0xC3, 0x00, 0x3C, 0xC3, 0x00, 0x3D, 0xC3, 0x00, 
   0x3D, 0xC2, 0x00, 0x3E, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC0, 0x01, 0x3F, 0xC0, 0x00, 0x3F, 
   0xBF, 0x00, 0x40, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 0x00, 0x42, 0xBD, 
   0x00, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBB, 0x01, 0x44, 0xBB, 0x00, 0x44, 0xBB, 0x00, 
   0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x46, 0xB9, 0x00, 0x46, 0xB9, 0x01, 0x47, 0xB8, 0x01, 0x47, 
   0xB8, 0x01, 0x48, 0xB7, 0x01, 0x49, 0xB6, 0x01, 0x49, 0xB6, 0x00, 0x4A, 0xB6, 0x00, 0x4A, 0xB5, 
   0x00, 0x4A, 0xB4, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB3, 0x01, 0x4C, 0xB3, 0x01, 
   0x4D, 0xB2, 0x00, 0x4E, 0xB2, 0x01, 0x4E, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4F, 0xB0, 0x00, 0x50, 
   0xB0, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x51, 0xAD, 0x00, 0x52, 0xAD, 
   0x00, 0x52, 0xAC, 0x00, 0x52, 0xAD, 0x00, 0x53, 0xAC, 0x01, 0x54, 0xAB, 0x00, 0x55, 0xAB, 0x00, 
   0x55, 0xAB, 0x00, 0x55, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA9, 0x00, 0x56, 0xA8, 0x01, 0x57, 
   0xA8, 0x01, 0x58, 0xA8, 0x01, 0x58, 0xA7, 0x00, 0x59, 0xA6, 0x01, 0x5A, 0xA6, 0x00, 0x5A, 0xA5, 
   0x00, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x00, 0x5B, 0xA4, 0x01, 0x5C, 0xA3, 0x00, 0x5C, 0xA3, 0x00, 
   0x5D, 0xA3, 0x01, 0x5E, 0xA2, 0x01, 0x5D, 0xA1, 0x01, 0x5E, 0xA0, 0x00, 0x5F, 0xA0, 0x01, 0x5F, 
   0x9F, 0x00, 0x5F, 0x9F, 0x00, 0x61, 0x9F, 0x00, 0x61, 0x9E, 0x01, 0x61, 0x9E, 0x00, 0x61, 0x9D, 
   0x00, 0x62, 0x9D, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9C, 0x01, 0x64, 0x9B, 0x00, 0x64, 0x9B, 0x00, 
   0x64, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 0x98, 0x00, 0x67, 
   0x97, 0x00, 0x68, 0x97, 0x00, 0x69, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x6A, 0x96, 
   0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x01, 0x6B, 0x94, 0x01, 0x6C, 0x94, 0x00, 0x6C, 0x93, 0x00, 
   0x6D, 0x92, 0x00, 0x6D, 0x92, 0x01, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x00, 0x6F, 
   0x8F, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x70, 0x8F, 0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 
   0x00, 0x72, 0x8D, 0x00, 0x72, 0x8C, 0x00, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x01, 0x74, 0x8B, 0x01, 
   0x74, 0x8A, 0x00, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 0x89, 0x00, 0x77, 
   0x88, 0x00, 0x77, 0x87, 0x01, 0x78, 0x87, 0x01, 0x78, 0x86, 0x01, 0x79, 0x86, 0x00, 0x79, 0x86, 
   0x01, 0x7A, 0x85, 0x01, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x01, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 
   0x7D, 0x82, 0x00, 0x7D, 0x82, 0x00, 0x7D, 0x81, 0x00, 0x7D, 0x81, 0x00, 0x7E, 0x81, 0x01, 0x7F, 
   0x80, 0x01, 0x80, 0x80, 0x00, 0x80, 0xFE, 0x00, 0x01, 0xFF, 0x00, 0x01, 0xFE, 0x00, 0x01, 0xFD, 
   0x00, 0x02, 0xFD, 0x00, 0x02, 0xFC, 0x00, 0x03, 0xFB, 0x01, 0x03, 0xFB, 0x00, 0x04, 0xFA, 0x00, 
   0x04, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x07, 0xF8, 0x00, 0x07, 
   0xF7, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF6, 0x00, 0x0A, 0xF5, 
   0x00, 0x0A, 0xF4, 0x00, 0x0A, 0xF4, 0x00, 0x0A, 0xF3, 0x00, 0x0B, 0xF3, 0x00, 0x0C, 0xF2, 0x00, 
   0x0C, 0xF2, 0x00, 0x0D, 0xF2, 0x01, 0x0D, 0xF1, 0x00, 0x0E, 0xF0, 0x00, 0x0F, 0xF1, 0x00, 0x0F, 
   0xEF, 0x01, 0x10, 0xEF, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xED, 
   0x00, 0x12, 0xED, 0x00, 0x13, 0xED, 0x00, 0x13, 0xEB, 0x00, 0x13, 0xEB, 0x01, 0x14, 0xEA, 0x00, 
   0x15, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE8, 0x00, 0x17, 
   0xE8, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE7, 0x00, 0x18, 0xE6, 0x00, 0x19, 0xE6, 0x00, 0x1A, 0xE5, 
   0x00, 0x1A, 0xE5, 0x00, 0x1A, 0xE4, 0x01, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 0x1C, 0xE3, 0x00, 
   0x1C, 0xE2, 0x00, 0x1D, 0xE2, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 
   0xE0, 0x00, 0x1F, 0xDF, 0x01, 0x20, 0xDF, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 0x00, 0x21, 0xDE, 
   0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x23, 0xDC, 0x01, 0x23, 0xDC, 0x00, 0x24, 0xDA, 0x00, 
   0x25, 0xDA, 0x00, 0x25, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x26, 0xD9, 0x00, 0x26, 0xD9, 0x01, 0x27, 
   0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD5, 0x00, 0x2A, 0xD6, 
   0x00, 0x2A, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD3, 0x00, 0x2B, 0xD3, 0x00, 0x2C, 0xD3, 0x01, 
   0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD1, 0x01, 0x2E, 0xD1, 0x00, 0x2E, 0xD0, 0x00, 0x2F, 
   0xCF, 0x00, 0x2F, 0xCF, 0x01, 0x30, 0xCF, 0x00, 0x30, 0xCE, 0x01, 0x31, 0xCE, 0x00, 0x31, 0xCD, 
   0x00, 0x32, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x33, 0xCC, 0x00, 0x33, 0xCB, 0x00, 0x34, 0xCB, 0x01, 
   0x34, 0xCA, 0x01, 0x34, 0xCA, 0x00, 0x36, 0xCA, 0x00, 0x36, 0xC9, 0x00, 0x37, 0xC9, 0x00, 0x37, 
   0xC8, 0x01, 0x37, 0xC8, 0x01, 0x38, 0xC7, 0x01, 0x38, 0xC6, 0x00, 0x39, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x3A, 0xC5, 0x01, 0x3A, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC4, 0x00, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 0xC1, 0x00, 0x3E, 
   0xC0, 0x00, 0x40, 0xC0, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x00, 0x41, 0xBE, 
   0x01, 0x41, 0xBD, 0x00, 0x42, 0xBD, 0x01, 0x43, 0xBC, 0x00, 0x43, 0xBC, 0x00, 0x44, 0xBB, 0x00, 
   0x44, 0xBB, 0x01, 0x45, 0xBA, 0x00, 0x45, 0xB9, 0x00, 0x46, 0xB9, 0x00, 0x46, 0xB8, 0x00, 0x46, 
   0xB8, 0x01, 0x47, 0xB8, 0x00, 0x48, 0xB7, 0x00, 0x48, 0xB7, 0x00, 0x49, 0xB6, 0x00, 0x49, 0xB5, 
   0x00, 0x4A, 0xB5, 0x00, 0x4A, 0xB5, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x01, 0x4B, 0xB3, 0x00, 
   0x4D, 0xB2, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x01, 0x4E, 0xB1, 0x00, 0x4E, 0xB1, 0x01, 0x4F, 
   0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAE, 0x00, 0x51, 0xAD, 
   0x00, 0x52, 0xAE, 0x00, 0x53, 0xAD, 0x01, 0x53, 0xAC, 0x01, 0x53, 0xAB, 0x01, 0x53, 0xAB, 0x00, 
   0x54, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xAA, 0x00, 0x55, 0xA9, 0x01, 0x56, 0xA8, 0x00, 0x57, 
   0xA8, 0x00, 0x57, 0xA8, 0x00, 0x58, 0xA7, 0x00, 0x58, 0xA6, 0x00, 0x59, 0xA7, 0x01, 0x5A, 0xA6, 
   0x00, 0x5A, 0xA5, 0x00, 0x5A, 0xA5, 0x01, 0x5B, 0xA5, 0x01, 0x5B, 0xA4, 0x00, 0x5C, 0xA3, 0x00, 
   0x5C, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x01, 0x5E, 0xA1, 0x00, 0x5F, 
   0xA0, 0x00, 0x5F, 0xA0, 0x00, 0x60, 0x9F, 0x00, 0x60, 0x9F, 0x00, 0x61, 0x9F, 0x01, 0x61, 0x9E, 
   0x00, 0x62, 0x9D, 0x01, 0x62, 0x9C, 0x00, 0x62, 0x9C, 0x00, 0x63, 0x9B, 0x00, 0x64, 0x9C, 0x00, 
   0x64, 0x9B, 0x01, 0x65, 0x9A, 0x00, 0x65, 0x9A, 0x00, 0x66, 0x99, 0x01, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x97, 0x01, 0x68, 0x97, 0x00, 0x68, 0x97, 0x01, 0x69, 0x96, 0x00, 0x69, 0x96, 
   0x00, 0x6A, 0x95, 0x00, 0x6A, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 0x6B, 0x93, 0x00, 
   0x6C, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6D, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 0x91, 0x01, 0x6F, 
   0x90, 0x01, 0x6F, 0x90, 0x01, 0x70, 0x8F, 0x01, 0x71, 0x8F, 0x00, 0x71, 0x8E, 0x00, 0x71, 0x8E, 
   0x00, 0x71, 0x8D, 0x01, 0x72, 0x8D, 0x01, 0x73, 0x8D, 0x01, 0x73, 0x8C, 0x00, 0x73, 0x8B, 0x00, 
   0x74, 0x8B, 0x01, 0x75, 0x8B, 0x01, 0x75, 0x8A, 0x00, 0x76, 0x8A, 0x00, 0x76, 0x89, 0x00, 0x76, 
   0x88, 0x01, 0x77, 0x88, 0x00, 0x77, 0x88, 0x01, 0x78, 0x87, 0x01, 0x79, 0x87, 0x01, 0x79, 0x86, 
   0x00, 0x79, 0x86, 0x00, 0x7A, 0x85, 0x01, 0x7A, 0x84, 0x00, 0x7B, 0x84, 0x00, 0x7B, 0x84, 0x01, 
   0x7C, 0x83, 0x00, 0x7D, 0x83, 0x01, 0x7D, 0x82, 0x00, 0x7E, 0x82, 0x01, 0x7E, 0x81, 0x01, 0x7F, 
   0x80, 0x00, 0x7F, 0x80, 0x01, 0x7F, 0xFF, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x01, 0xFE, 
   0x00, 0x02, 0xFD, 0x00, 0x02, 0xFD, 0x00, 0x03, 0xFC, 0x00, 0x03, 0xFB, 0x00, 0x04, 0xFB, 0x00, 
   0x04, 0xFA, 0x00, 0x05, 0xFA, 0x00, 0x05, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 0xF9, 0x00, 0x06, 
   0xF8, 0x00, 0x07, 0xF8, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF7, 0x00, 0x08, 0xF6, 0x00, 0x09, 0xF5, 
   0x00, 0x0A, 0xF6, 0x00, 0x0A, 0xF5, 0x00, 0x0A, 0xF4, 0x00, 0x0B, 0xF4, 0x00, 0x0B, 0xF3, 0x00, 
   0x0C, 0xF2, 0x00, 0x0C, 0xF2, 0x00, 0x0D, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0E, 0xF1, 0x00, 0x0F, 
   0xF0, 0x01, 0x0F, 0xF0, 0x00, 0x10, 0xEF, 0x00, 0x10, 0xEE, 0x00, 0x10, 0xEE, 0x00, 0x11, 0xEE, 
   0x01, 0x12, 0xED, 0x00, 0x12, 0xED, 0x00, 0x13, 0xEC, 0x00, 0x13, 0xEB, 0x00, 0x13, 0xEB, 0x00, 
   0x14, 0xEB, 0x00, 0x14, 0xEA, 0x00, 0x15, 0xEA, 0x00, 0x15, 0xE9, 0x00, 0x16, 0xE9, 0x00, 0x16, 
   0xE9, 0x00, 0x17, 0xE8, 0x00, 0x17, 0xE7, 0x01, 0x18, 0xE6, 0x00, 0x18, 0xE6, 0x01, 0x18, 0xE6, 
   0x00, 0x1A, 0xE6, 0x00, 0x1A, 0xE4, 0x00, 0x1A, 0xE4, 0x00, 0x1B, 0xE4, 0x00, 0x1B, 0xE3, 0x00, 
   0x1C, 0xE2, 0x00, 0x1C, 0xE2, 0x00, 0x1C, 0xE1, 0x00, 0x1D, 0xE1, 0x00, 0x1E, 0xE0, 0x00, 0x1F, 
   0xE1, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x1F, 0xDF, 0x00, 0x20, 0xDF, 0x00, 0x21, 0xDD, 
   0x00, 0x22, 0xDE, 0x00, 0x22, 0xDC, 0x00, 0x22, 0xDC, 0x00, 0x23, 0xDC, 0x00, 0x24, 0xDB, 0x00, 
   0x24, 0xDB, 0x00, 0x24, 0xDA, 0x01, 0x25, 0xDA, 0x00, 0x25, 0xD9, 0x01, 0x26, 0xD9, 0x00, 0x26, 
   0xD9, 0x00, 0x26, 0xD8, 0x00, 0x27, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD7, 0x00, 0x28, 0xD6, 
   0x01, 0x29, 0xD5, 0x00, 0x2A, 0xD4, 0x00, 0x2A, 0xD4, 0x00, 0x2B, 0xD4, 0x00, 0x2B, 0xD3, 0x00, 
   0x2B, 0xD3, 0x00, 0x2C, 0xD2, 0x00, 0x2D, 0xD2, 0x00, 0x2E, 0xD2, 0x00, 0x2D, 0xD1, 0x00, 0x2F, 
   0xD0, 0x00, 0x2F, 0xD0, 0x01, 0x2F, 0xD0, 0x00, 0x30, 0xCF, 0x00, 0x30, 0xCF, 0x00, 0x31, 0xCD, 
   0x00, 0x31, 0xCD, 0x00, 0x32, 0xCD, 0x00, 0x32, 0xCC, 0x00, 0x33, 0xCC, 0x01, 0x33, 0xCC, 0x00, 
   0x34, 0xCB, 0x00, 0x35, 0xCB, 0x00, 0x35, 0xCA, 0x00, 0x35, 0xC9, 0x00, 0x35, 0xC9, 0x00, 0x36, 
   0xC9, 0x00, 0x37, 0xC8, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC7, 0x00, 0x38, 0xC6, 0x00, 0x39, 0xC6, 
   0x00, 0x39, 0xC6, 0x01, 0x3A, 0xC5, 0x00, 0x3B, 0xC5, 0x00, 0x3A, 0xC4, 0x01, 0x3B, 0xC3, 0x00, 
   0x3C, 0xC3, 0x01, 0x3C, 0xC2, 0x01, 0x3D, 0xC2, 0x00, 0x3D, 0xC2, 0x00, 0x3D, 0xC1, 0x01, 0x3F, 
   0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x3F, 0xBF, 0x00, 0x40, 0xBF, 0x01, 0x40, 0xBE, 0x01, 0x40, 0xBE, 
   0x00, 0x41, 0xBD, 0x00, 0x41, 0xBD, 0x01, 0x42, 0xBD, 0x00, 0x43, 0xBC, 0x01, 0x43, 0xBC, 0x00, 
   0x44, 0xBB, 0x00, 0x45, 0xBA, 0x00, 0x45, 0xBA, 0x01, 0x45, 0xBA, 0x00, 0x46, 0xB9, 0x01, 0x46, 
   0xB9, 0x01, 0x47, 0xB8, 0x00, 0x47, 0xB7, 0x01, 0x48, 0xB7, 0x01, 0x48, 0xB7, 0x00, 0x49, 0xB6, 
   0x00, 0x49, 0xB6, 0x01, 0x4A, 0xB5, 0x00, 0x4A, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 0x4B, 0xB4, 0x00, 
   0x4C, 0xB3, 0x00, 0x4C, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4D, 0xB2, 0x00, 0x4E, 0xB1, 0x00, 0x4E, 
   0xB0, 0x00, 0x4F, 0xB0, 0x00, 0x4F, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x50, 0xAF, 0x00, 0x51, 0xAE, 
   0x00, 0x51, 0xAE, 0x00, 0x51, 0xAE, 0x00, 0x53, 0xAD, 0x00, 0x52, 0xAC, 0x01, 0x53, 0xAC, 0x01, 
   0x53, 0xAB, 0x01, 0x54, 0xAB, 0x01, 0x55, 0xAB, 0x00, 0x56, 0xAA, 0x00, 0x56, 0xA9, 0x00, 0x56, 
   0xA9, 0x01, 0x57, 0xA8, 0x00, 0x57, 0xA8, 0x00, 0x57, 0xA7, 0x00, 0x58, 0xA7, 0x01, 0x58, 0xA6, 
   0x00, 0x59, 0xA6, 0x00, 0x59, 0xA5, 0x01, 0x5A, 0xA5, 0x00, 0x5B, 0xA4, 0x01, 0x5B, 0xA4, 0x01, 
   0x5C, 0xA3, 0x01, 0x5C, 0xA2, 0x00, 0x5D, 0xA3, 0x00, 0x5D, 0xA2, 0x00, 0x5E, 0xA1, 0x00, 0x5E, 
   0xA0, 0x01, 0x5F, 0xA0, 0x01, 0x5F, 0xA0, 0x00, 0x5F, 0x9F, 0x00, 0x60, 0x9E, 0x00, 0x60, 0x9F, 
   0x01, 0x61, 0x9D, 0x00, 0x62, 0x9D, 0x01, 0x62, 0x9D, 0x00, 0x63, 0x9C, 0x00, 0x63, 0x9C, 0x00, 
   0x63, 0x9B, 0x01, 0x64, 0x9B, 0x01, 0x64, 0x9A, 0x01, 0x65, 0x9A, 0x01, 0x66, 0x99, 0x00, 0x66, 
   0x99, 0x00, 0x67, 0x99, 0x01, 0x67, 0x97, 0x01, 0x68, 0x98, 0x00, 0x68, 0x96, 0x00, 0x68, 0x97, 
   0x00, 0x69, 0x95, 0x00, 0x6A, 0x95, 0x00, 0x6B, 0x95, 0x01, 0x6B, 0x94, 0x00, 0x6B, 0x94, 0x01, 
   0x6C, 0x94, 0x00, 0x6C, 0x93, 0x01, 0x6C, 0x92, 0x00, 0x6E, 0x92, 0x00, 0x6E, 0x91, 0x00, 0x6E, 
   0x91, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x6F, 0x90, 0x00, 0x70, 0x8F, 0x01, 0x71, 0x8E, 
   0x00, 0x71, 0x8E, 0x01, 0x71, 0x8D, 0x00, 0x72, 0x8D, 0x00, 0x73, 0x8D, 0x00, 0x73, 0x8B, 0x00, 
   0x74, 0x8B, 0x00, 0x74, 0x8B, 0x01, 0x74, 0x8A, 0x01, 0x75, 0x8A, 0x01, 0x76, 0x89, 0x00, 0x76, 
   0x89, 0x01, 0x76, 0x88, 0x01, 0x77, 0x88, 0x00, 0x78, 0x88, 0x01, 0x78, 0x87, 0x00, 0x78, 0x87, 
   0x01, 0x79, 0x86, 0x01, 0x7A, 0x86, 0x01, 0x7A, 0x85, 0x00, 0x7B, 0x84, 0x01, 0x7B, 0x84, 0x00, 
   0x7C, 0x84, 0x00, 0x7C, 0x83, 0x01, 0x7C, 0x83, 0x01, 0x7D, 0x82, 0x01, 0x7D, 0x82, 0x00, 0x7E, 
   0x81, 0x01, 0x7F, 0x81, 0x00, 0x7F, 0x00, 0x00, 
};

static RESOURCEDATA g_rd_texture(TEXT("texture.bmp"), g_texture, sizeof(g_texture));

extern "C" LPVOID PREPEND_MODULE(_texture) = (LPVOID)&g_rd_texture;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1435\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=xbox1435
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\l_rx1435.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1565\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_rx1565
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SOURCES=\
    test.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1565\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1435\exe\sources.inc ===
TARGETNAME=xbox1435
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\wrap.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\l_rx1435.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1565\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=xbox1565
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1831\dtypes.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    dtypes.h

Author:

    Matt Bronder

Description:

    Various type definitions.

*******************************************************************************/

#ifndef __DTYPES_H__
#define __DTYPES_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FVF_VERTEX              (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1)
#define FVF_BVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3)
#define FVF_BVERTEX2            (D3DFVF_XYZ | D3DFVF_TEX2)
#define FVF_NVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3 | \
                                              D3DFVF_TEXCOORDSIZE2(0) | \
                                              D3DFVF_TEXCOORDSIZE2(1) | \
                                              D3DFVF_TEXCOORDSIZE3(2))
#define FVF_LVERTEX             (D3DFVF_XYZ | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLVERTEX            (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLBVERTEX           (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX2)
#define FVF_CVERTEX             (D3DFVF_XYZ | D3DFVF_NORMAL)
#define FVF_CVERTEX1_3          (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 | \
                                 D3DFVF_TEXCOORDSIZE3(0))

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _TCOORD {
    float               u;
    float               v;
} TCOORD, *PTCOORD;

//******************************************************************************
typedef struct _TCOORD2 {
    float               u;
    float               v;
} TCOORD2, *PTCOORD2;

//******************************************************************************
typedef struct _TCOORD3 {
    float               u;
    float               v;
    float               t;
} TCOORD3, *PTCOORD3;

//******************************************************************************
typedef struct _MATRIX3X3 {
    union {
        struct {
            float _11, _12, _13;
            float _21, _22, _23;
            float _31, _32, _33;
        };
        float m[3][3];
        struct {
            D3DXVECTOR3 r1;
            D3DXVECTOR3 r2;
            D3DXVECTOR3 r3;
        };
    };
} MATRIX3X3, *PMATRIX3X3;

//******************************************************************************
typedef struct _VERTEX {
    D3DXVECTOR3 vPosition;
    D3DXVECTOR3 vNormal;
    float       u0, v0;

    _VERTEX() {}
    _VERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0;
    }
} VERTEX, *PVERTEX;

//******************************************************************************
typedef struct _BVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (bump) map coordinates
    float       u2, v2;         // Diffuse light map coordinates

    _BVERTEX() {}
    _BVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2;
    }
} BVERTEX, *PBVERTEX;

//******************************************************************************
typedef struct _BVERTEX2 {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates and height (bump) map coordinates
    float       u1, v1;         // Diffuse light map coordinates

    _BVERTEX2() {}
    _BVERTEX2(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} BVERTEX2, *PBVERTEX2;

//******************************************************************************
typedef struct _NVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (normal) map coordinates
    float       u2, v2, t2;     // Light direction in tangent space

    _NVERTEX() {}
    _NVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2, float _t2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2; t2 = _t2;
    }
} NVERTEX, *PNVERTEX;

//******************************************************************************
typedef struct _LVERTEX {
    D3DXVECTOR3 vPosition;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _LVERTEX() { }
    _LVERTEX(const D3DVECTOR& v, D3DCOLOR _cDiffuse, D3DCOLOR _cSpecular, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} LVERTEX, *PLVERTEX;

//******************************************************************************
typedef struct _TLVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _TLVERTEX() {}
    _TLVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} TLVERTEX, *PTLVERTEX;

//******************************************************************************
typedef struct _TLBVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;
    float       u1, v1;

    _TLBVERTEX() {}
    _TLBVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0, float _u1, float _v1) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} TLBVERTEX, *PTLBVERTEX;

//******************************************************************************
typedef struct _CVERTEX {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;

    _CVERTEX() { }
    _CVERTEX(const D3DVECTOR& v, const D3DVECTOR& n) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
    }
} CVERTEX, *PCVERTEX;

//******************************************************************************
typedef struct _VERTEX1_3 {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;
    float         u0, v0, t0;

    _VERTEX1_3() { }
    _VERTEX1_3(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0, float _t0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0; t0 = _t0;
    }
} VERTEX1_3, *PVERTEX1_3;

#endif //__DTYPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1831\test.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.h

Author:

    Matt Bronder

Description:

    Direct3D repro test functions.

*******************************************************************************/

#ifndef __TEST_H__
#define __TEST_H__

//******************************************************************************
class CReproTest {

protected:

    HINSTANCE                       m_hInstance;
    HWND                            m_hWnd;

    LPDIRECT3D8                     m_pd3d;
    LPDIRECT3DDEVICE8               m_pDevice;

    LPDIRECT3DVERTEXBUFFER8         m_pd3dr;

public:

                                    CReproTest();
                                    ~CReproTest();

    virtual BOOL                    Create(HINSTANCE hInstance);
    virtual BOOL                    Run();

protected:

    virtual BOOL                    InitDeviceState();
    virtual BOOL                    SetViewport(DWORD dwWidth, DWORD dwHeight);
};

//******************************************************************************
LRESULT CALLBACK    WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

void                InitMatrix(D3DMATRIX* pd3dm,
                        float _11, float _12, float _13, float _14,
                        float _21, float _22, float _23, float _24,
                        float _31, float _32, float _33, float _34,
                        float _41, float _42, float _43, float _44);

void                SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, 
                        LPD3DXVECTOR3 pvAt, LPD3DXVECTOR3 pvUp);

void                SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, 
                        float fBack, float fFieldOfView, float fAspect);

#endif //__TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1831\util.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.cpp

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef UNDER_XBOX
#include <windows.h>
#else
#include <xtl.h>
#endif // UNDER_XBOX
#include <d3dx8.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include "util.h"

//******************************************************************************
// Globals
//******************************************************************************

static HANDLE               g_hHeap = NULL;

//******************************************************************************
// Debugging functions
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
#ifndef UNDER_XBOX
    TCHAR   szBuffer[2304];
#else
    TCHAR*  szBuffer = (LPTSTR)MemAlloc32(2304 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }
#endif // UNDER_XBOX

    va_start(vl, szFormat);
//    wvsprintf(szBuffer, szFormat, vl);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

#ifdef UNDER_XBOX
    MemFree32(szBuffer);
#endif // UNDER_XBOX
}

//******************************************************************************
//
// Function:
//
//     ResultFailed
//
// Description:
//
//     Test a given return code: if the code is an error, output a debug 
//     message with the error value.  If the code is a warning, output
//     a debug message with the warning value.
//
// Arguments:
//
//     HRESULT hr               - Return code to test for an error
//
//     LPCTSTR sz               - String describing the method that produced 
//                                the return code
//
// Return Value:
//
//     TRUE if the given return code is an error, FALSE otherwise.
//
//******************************************************************************
BOOL ResultFailed(HRESULT hr, LPCTSTR sz) {

    TCHAR szError[256];

    if (SUCCEEDED(hr)) {
        return FALSE;
    }

    D3DXGetErrorString(hr, szError, 256);

    if (FAILED(hr)) {
        DebugString(TEXT("%s failed with %s [0x%X]"), sz, szError, hr);
        return TRUE;
    }
    else {
        DebugString(TEXT("%s returned %s [0x%X]"), sz, szError, hr);
    }

    return FALSE;
}
#endif // DEBUG || _DEBUG

//******************************************************************************
// Memory allocation routines
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateHeap
//
// Description:
//
//     Create a heap for the application.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateHeap() {

    if (g_hHeap) {
        return FALSE;
    }

    g_hHeap = HeapCreate(0, 0, 0);
    if (!g_hHeap) {
        DebugString(TEXT("HeapCreate failed [%d]"), GetLastError());
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseHeap
//
// Description:
//
//     Destroy the application heap.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseHeap() {

    if (g_hHeap) {
        if (!HeapDestroy(g_hHeap)) {
            DebugString(TEXT("HeapDestroy failed [%d]"), GetLastError());
        }
        g_hHeap = NULL;
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc
//
// Description:
//
//     Allocate the given amount of memory from the application heap.  This 
//     memory should later be freed using the MemFree function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc(UINT uNumBytes) {

    LPVOID pvMem = NULL;
    if (g_hHeap) {
        pvMem = HeapAlloc(g_hHeap, 0, uNumBytes);
    }
    return pvMem;
}

//******************************************************************************
//
// Function:
//
//     MemFree
//
// Description:
//
//     Free a block of memory that was allocated using the MemAlloc function.
//
// Arguments:
//
//     LPVOID pvMem             - Base address of the memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree(LPVOID pvMem) {

    if (g_hHeap) {
        if (!HeapFree(g_hHeap, 0, pvMem)) {
            DebugString(TEXT("HeapFree failed [%d]"), GetLastError());
        }
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc32
//
// Description:
//
//     Allocate a given amount of memory whose base address is
//     aligned along a 32 byte boundary.  This memory must later be freed
//     using the MemFree32 function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc32(UINT uNumBytes)
{
	LPBYTE pbyAllocated, pbyAligned = NULL;

	pbyAllocated = (LPBYTE)MemAlloc(uNumBytes + 32);
    if (pbyAllocated) {
	    pbyAligned   = (LPBYTE)((((DWORD)pbyAllocated) + 32) & ~31);
	    *(((LPDWORD)pbyAligned)-1) = (DWORD)pbyAllocated;
    }
	return pbyAligned;
}

//******************************************************************************
//
// Function:
//
//     MemFree32
//
// Description:
//
//     Free an aligned block of memory that was allocated using the MemAlloc32
//     function.
//
// Arguments:
//
//     LPVOID pvAligned         - Base address of the aligned memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree32(LPVOID pvMem)
{
	LPBYTE pbyFree;

    if (pvMem) {
	    pbyFree = (LPBYTE)*(((LPDWORD)pvMem)-1);
	    MemFree(pbyFree);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1831\util.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.h

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef __UTIL_H__
#define __UTIL_H__

//******************************************************************************
// Precomputed fractions of pi
//******************************************************************************

#define M_PI        3.14159265359f
#define M_2PI       6.28318530718f
#define M_PIDIV2    1.57079632680f
#define M_3PIDIV2   4.71238898039f
#define M_PIDIV4    0.78539816340f
#define M_3PIDIV4   2.35619449019f
#define M_5PIDIV4   3.92699081699f
#define M_7PIDIV4   5.49778714378f

#ifndef RGB_MAKE
/*
 * Format of CI colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |         color index           |   fraction    |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define CI_GETALPHA(ci)    ((ci) >> 24)
#define CI_GETINDEX(ci)    (((ci) >> 8) & 0xffff)
#define CI_GETFRACTION(ci) ((ci) & 0xff)
#define CI_ROUNDINDEX(ci)  CI_GETINDEX((ci) + 0x80)
#define CI_MASKALPHA(ci)   ((ci) & 0xffffff)
#define CI_MAKE(a, i, f)    (((a) << 24) | ((i) << 8) | (f))

/*
 * Format of RGBA colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGBA_GETALPHA(rgb)      ((rgb) >> 24)
#define RGBA_GETRED(rgb)        (((rgb) >> 16) & 0xff)
#define RGBA_GETGREEN(rgb)      (((rgb) >> 8) & 0xff)
#define RGBA_GETBLUE(rgb)       ((rgb) & 0xff)
#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

/* D3DRGB and D3DRGBA may be used as initialisers for D3DCOLORs
 * The float values must be in the range 0..1
 */
#define D3DRGB(r, g, b) \
    (0xff000000L | ( ((long)((r) * 255)) << 16) | (((long)((g) * 255)) << 8) | (long)((b) * 255))
#define D3DRGBA(r, g, b, a) \
    (   (((long)((a) * 255)) << 24) | (((long)((r) * 255)) << 16) \
    |   (((long)((g) * 255)) << 8) | (long)((b) * 255) \
    )

/*
 * Format of RGB colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    ignored    |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGB_GETRED(rgb)         (((rgb) >> 16) & 0xff)
#define RGB_GETGREEN(rgb)       (((rgb) >> 8) & 0xff)
#define RGB_GETBLUE(rgb)        ((rgb) & 0xff)
#define RGBA_SETALPHA(rgba, x) (((x) << 24) | ((rgba) & 0x00ffffff))
#define RGB_MAKE(r, g, b)       ((D3DCOLOR) (((r) << 16) | ((g) << 8) | (b)))
#define RGBA_TORGB(rgba)       ((D3DCOLOR) ((rgba) & 0xffffff))
#define RGB_TORGBA(rgb)        ((D3DCOLOR) ((rgb) | 0xff000000))

#endif

//******************************************************************************
// Debugging function prototypes
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
void                DebugString(LPCTSTR szFormat, ...);
BOOL                ResultFailed(HRESULT hr, LPCTSTR sz);
#else
inline void         DebugString(LPCTSTR szFormat, ...) {}
inline BOOL         ResultFailed(HRESULT hr, LPCTSTR sz) {return FALSE;};
#endif

//******************************************************************************
// Memory allocation prototypes
//******************************************************************************

BOOL                CreateHeap();
void                ReleaseHeap();
LPVOID              MemAlloc(UINT uNumBytes);
void                MemFree(LPVOID pvMem);
LPVOID              MemAlloc32(UINT uNumBytes);
void                MemFree32(LPVOID pvMem);

#endif // __UTIL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1565\test.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.h

Author:

    Matt Bronder

Description:

    Direct3D test functions.

*******************************************************************************/

#ifndef __TEST_H__
#define __TEST_H__

#define FVF_TLNODIFFUSE             (D3DFVF_XYZRHW | D3DFVF_SPECULAR)
#define FVF_TLNOSPECULAR            (D3DFVF_XYZRHW | D3DFVF_DIFFUSE)

//******************************************************************************
typedef struct _TLVNODIFFUSE {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cSpecular;

    _TLVNODIFFUSE() {}
    _TLVNODIFFUSE(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cSpecular) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cSpecular = _cSpecular;
    }
} TLVNODIFFUSE, *PTLVNODIFFUSE;

//******************************************************************************
typedef struct _TLVNOSPECULAR {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;

    _TLVNOSPECULAR() {}
    _TLVNOSPECULAR(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse;
    }
} TLVNOSPECULAR, *PTLVNOSPECULAR;

//******************************************************************************
class CTest : public CScene {

protected:

    TLVNODIFFUSE                    m_prNoDiffuse[4];
    TLVNOSPECULAR                   m_prNoSpecular[4];

public:

                                    CTest();
                                    ~CTest();

    virtual BOOL                    Create(CDisplay* pDisplay);
    virtual int                     Exhibit(int *pnExitCode);

protected:

    virtual BOOL                    Prepare();
    virtual BOOL                    Setup();
    virtual BOOL                    Initialize();
    virtual void                    Efface();
    virtual void                    Update();
    virtual BOOL                    Render();

    virtual void                    ProcessInput();
    virtual BOOL                    InitView();

    virtual BOOL                    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                                            WPARAM wParam, LPARAM lParam);
};

#endif //__TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1565\test.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#include "d3dlocus.h"
#include "test.h"

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CTest*   pTest;
    BOOL     bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    // Create the scene
    pTest = new CTest();
    if (!pTest) {
        return FALSE;
    }

    // Initialize the scene
    if (!pTest->Create(pDisplay)) {
        pTest->Release();
        return FALSE;
    }

    bRet = pTest->Exhibit(pnExitCode);

    // Clean up the scene
    pTest->Release();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
// CTest
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CTest
//
// Description:
//
//     Initialize the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CTest::CTest() {
}

//******************************************************************************
//
// Method:
//
//     ~CTest
//
// Description:
//
//     Clean up the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CTest::~CTest() {
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the test for rendering.
//
// Arguments:
//
//     CDisplay* pDisplay               - Pointer to a Display object.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CTest::Create(CDisplay* pDisplay) {

    return CScene::Create(pDisplay);
}

//******************************************************************************
//
// Method:
//
//     Exhibit
//
// Description:
//
//     Execute the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     The exit value contained in the wParam parameter of the WM_QUIT message.
//
//******************************************************************************
int CTest::Exhibit(int *pnExitCode) {

    return CScene::Exhibit(pnExitCode);
}

//******************************************************************************
//
// Method:
//
//     Prepare
//
// Description:
//
//     Initialize all device-independent data to be used in the scene.  This
//     method is called only once at creation (as opposed to Setup and
//     Initialize, which get called each time the device is Reset).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared, FALSE if it was not.
//
//******************************************************************************
BOOL CTest::Prepare() {

    m_prNoDiffuse[0] = TLVNODIFFUSE(D3DXVECTOR3(0.0f, 480.0f, 0.5f), 2.0f, 0);
    m_prNoDiffuse[1] = TLVNODIFFUSE(D3DXVECTOR3(0.0f, 0.0f, 0.5f), 2.0f, 0);
    m_prNoDiffuse[2] = TLVNODIFFUSE(D3DXVECTOR3(320.0f, 0.0f, 0.5f), 2.0f, 0);
    m_prNoDiffuse[3] = TLVNODIFFUSE(D3DXVECTOR3(320.0f, 480.0f, 0.5f), 2.0f, 0);

    m_prNoSpecular[0] = TLVNOSPECULAR(D3DXVECTOR3(320.0f, 480.0f, 0.5f), 2.0f, 0);
    m_prNoSpecular[1] = TLVNOSPECULAR(D3DXVECTOR3(320.0f, 0.0f, 0.5f), 2.0f, 0);
    m_prNoSpecular[2] = TLVNOSPECULAR(D3DXVECTOR3(640.0f, 0.0f, 0.5f), 2.0f, 0);
    m_prNoSpecular[3] = TLVNOSPECULAR(D3DXVECTOR3(640.0f, 480.0f, 0.5f), 2.0f, 0);

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Setup
//
// Description:
//
//     Obtain the device interface pointer from the display, save the current
//     state of the device, and initialize the background vertices to the
//     dimensions of the render target.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared for initialization, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CTest::Setup() {

    return CScene::Setup();
}

//******************************************************************************
//
// Method:
//
//     Initialize
//
// Description:
//
//     Initialize the device and all device objects to be used in the test (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the test was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CTest::Initialize() {

    return CScene::Initialize();
}

//******************************************************************************
//
// Method:
//
//     Efface
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CTest::Efface() {

    CScene::Efface();
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Update the state of the scene to coincide with the given time.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CTest::Update() {

    CScene::Update();
}

//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render the test scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CTest::Render() {

    DWORD    dwClearFlags = D3DCLEAR_TARGET;
    HRESULT  hr;

    if (!m_bCreated) {
        return FALSE;
    }

#ifndef UNDER_XBOX
    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return TRUE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) {
                return FALSE;
            }
        }
    }
#endif // !UNDER_XBOX

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) {
        dwClearFlags |= D3DCLEAR_ZBUFFER;
    }
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(255, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);
    m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, TRUE);

    m_pDevice->SetVertexShader(FVF_TLNODIFFUSE);

    m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, m_prNoDiffuse, sizeof(TLVNODIFFUSE));

    m_pDevice->SetVertexShader(FVF_TLNOSPECULAR);

    m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, m_prNoSpecular, sizeof(TLVNOSPECULAR));

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // Fade out the scene on exit
    if (m_pfnFade) {
        (this->*m_pfnFade)();
    }

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input for the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CTest::ProcessInput() {

    CScene::ProcessInput();
}
//******************************************************************************
//
// Method:
//
//     InitView
//
// Description:
//
//     Initialize the camera view in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CTest::InitView() {

    if (!m_pDisplay) {
        return FALSE;
    }

    // Set the view position
    m_camInitial.vPosition     = D3DXVECTOR3(0.0f, 0.0f, -50.0f);
    m_camInitial.vInterest     = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_camInitial.fRoll         = 0.0f;
    m_camInitial.fFieldOfView  = M_PI / 4.0f;
    m_camInitial.fNearPlane    = 0.1f;
    m_camInitial.fFarPlane     = 1000.0f;
    m_pDisplay->SetCamera(&m_camInitial);

    return m_pDisplay->SetView(&m_camInitial);
}

//******************************************************************************
// Scene window procedure (pseudo-subclassed off the main window procedure)
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
BOOL CTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_F12: // Toggle pause state
                    m_bPaused = !m_bPaused;
                    return TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CScene::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1565\exe\sources.inc ===
TARGETNAME=xbox1565
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\l_rx1565.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1849\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1849\modulex.h ===
#define PREPEND_MODULE(Suffix) invalid##Suffix
#define MODULE_STRING "invalid"
#pragma comment(linker, "/include:_invalid_ExhibitScene@8")
#pragma comment(linker, "/include:_invalid_texture")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1849\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1849\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_rx1849
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SOURCES=\
    test.cpp \
    texture.bmp.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1849\test.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#include "d3dlocus.h"
#include "test.h"

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CTest*   pTest;
    BOOL     bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    // Create the scene
    pTest = new CTest();
    if (!pTest) {
        return FALSE;
    }

    // Initialize the scene
    if (!pTest->Create(pDisplay)) {
        pTest->Release();
        return FALSE;
    }

    bRet = pTest->Exhibit(pnExitCode);

    // Clean up the scene
    pTest->Release();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
// CTest
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CTest
//
// Description:
//
//     Initialize the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CTest::CTest() {
}

//******************************************************************************
//
// Method:
//
//     ~CTest
//
// Description:
//
//     Clean up the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CTest::~CTest() {
}

//******************************************************************************
//
// Method:
//
//     Prepare
//
// Description:
//
//     Initialize all device-independent data to be used in the scene.  This
//     method is called only once at creation (as opposed to Setup and
//     Initialize, which get called each time the device is Reset).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared, FALSE if it was not.
//
//******************************************************************************
BOOL CTest::Prepare() {

    m_prQuad[0] = VERTEX(D3DXVECTOR3(-20.0f,-10.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, -1.0f), 0.0f, 1.0f);
    m_prQuad[1] = VERTEX(D3DXVECTOR3(-20.0f, 10.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, -1.0f), 0.0f, 0.0f);
    m_prQuad[2] = VERTEX(D3DXVECTOR3( 0.0f, 10.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, -1.0f), 1.0f, 0.0f);
    m_prQuad[3] = VERTEX(D3DXVECTOR3( 0.0f,-10.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, -1.0f), 1.0f, 1.0f);

    m_plrQuad[0] = LVERTEX(D3DXVECTOR3( 0.0f,-10.0f, 0.0f), 0xFFFFFFFF, 0, 0.0f, 1.0f);
    m_plrQuad[1] = LVERTEX(D3DXVECTOR3( 0.0f, 10.0f, 0.0f), 0xFFFFFFFF, 0, 0.0f, 0.0f);
    m_plrQuad[2] = LVERTEX(D3DXVECTOR3( 20.0f, 10.0f, 0.0f), 0xFFFFFFFF, 0, 1.0f, 0.0f);
    m_plrQuad[3] = LVERTEX(D3DXVECTOR3( 20.0f,-10.0f, 0.0f), 0xFFFFFFFF, 0, 1.0f, 1.0f);

    m_pwIndices[0] = 0;
    m_pwIndices[1] = 1;
    m_pwIndices[2] = 2;
    m_pwIndices[3] = 0;
    m_pwIndices[4] = 2;
    m_pwIndices[5] = 3;

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Initialize
//
// Description:
//
//     Initialize the device and all device objects to be used in the test (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the test was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CTest::Initialize() {

    m_pd3dt = (CTexture8*)CreateTexture(m_pDevice, TEXT("texture.bmp"));
    if (!m_pd3dt) {
        return FALSE;
    }

    return CScene::Initialize();
}

//******************************************************************************
//
// Method:
//
//     Efface
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CTest::Efface() {

    ReleaseTexture(m_pd3dt);
    CScene::Efface();
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Update the state of the scene to coincide with the given time.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CTest::Update() {

    CScene::Update();
}

//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render the test scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CTest::Render() {

    DWORD    dwClearFlags = D3DCLEAR_TARGET;
    HRESULT  hr;

    if (!m_bCreated) {
        return FALSE;
    }

#ifndef UNDER_XBOX
    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return TRUE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) {
                return FALSE;
            }
        }
    }
#endif // !UNDER_XBOX

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) {
        dwClearFlags |= D3DCLEAR_ZBUFFER;
    }
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    m_pDevice->SetVertexShader(FVF_VERTEX);

    m_pDevice->SetTexture(0, m_pd3dt);

    m_pDevice->DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, m_pwIndices, D3DFMT_INDEX16, m_prQuad, sizeof(VERTEX));

    m_pDevice->SetTexture(0, NULL);

    m_pDevice->SetVertexShader(FVF_LVERTEX);

    m_pDevice->DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, m_pwIndices, D3DFMT_INDEX16, m_plrQuad, sizeof(LVERTEX));

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // Fade out the scene on exit
    if (m_pfnFade) {
        (this->*m_pfnFade)();
    }

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input for the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CTest::ProcessInput() {

    CScene::ProcessInput();
}
//******************************************************************************
//
// Method:
//
//     InitView
//
// Description:
//
//     Initialize the camera view in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CTest::InitView() {

    if (!m_pDisplay) {
        return FALSE;
    }

    // Set the view position
    m_camInitial.vPosition     = D3DXVECTOR3(0.0f, 0.0f, -50.0f);
    m_camInitial.vInterest     = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_camInitial.fRoll         = 0.0f;
    m_camInitial.fFieldOfView  = M_PI / 4.0f;
    m_camInitial.fNearPlane    = 0.1f;
    m_camInitial.fFarPlane     = 1000.0f;
    m_pDisplay->SetCamera(&m_camInitial);

    return m_pDisplay->SetView(&m_camInitial);
}

//******************************************************************************
// Scene window procedure (pseudo-subclassed off the main window procedure)
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
BOOL CTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_F12: // Toggle pause state
                    m_bPaused = !m_bPaused;
                    return TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CScene::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1831\test.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.cpp

Author:

    Matt Bronder

Description:

    Test functions.

*******************************************************************************/

#ifndef UNDER_XBOX
#include <windows.h>
#else
#include <xtl.h>
#endif // UNDER_XBOX
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <d3dx8.h>
#include "util.h"
#include "dtypes.h"
#include "test.h"

//******************************************************************************
// WinMain
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WinMain
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     HINSTANCE hInstance      - Application instance handle
//
//     HINSTANCE hPrevInstance  - Previous instance of the application (always
//                                NULL for Win32 applications)
//
//     LPSTR szCmdLine          - Pointer to a string specifying the command
//                                line used in launching the application
//                                (excluding the program name)
//
//     int nCmdShow             - State specifying how the window is to be 
//                                displayed on creation
//
// Return Value:
//
//     0 on success, -1 on failure.
//
//******************************************************************************
#ifndef UNDER_XBOX
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR szCmdLine, int nCmdShow) 
#else
int APIENTRY wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR szCmdLine, int nCmdShow) 
#endif // UNDER_XBOX
{
    CReproTest*     pRTest;
    int             ret = 0;

    // Seed the pseudo-random number generator
    srand(GetTickCount());

    // Create a heap for the application
    if (!CreateHeap()) {
        return 0;
    }

    // Create the display
    pRTest = new CReproTest();
    if (!pRTest) {
        ReleaseHeap();
        return 0;
    }

    // Initialize the display
    if (!pRTest->Create(hInstance)) {
        DebugString(TEXT("CDisplay::Create failed"));
        delete pRTest;
        ReleaseHeap();
        return 0;
    }

    // Render the 3D scene
    pRTest->Run();

    // Clean up
    delete pRTest;
    ReleaseHeap();

    return ret;
}

//******************************************************************************
CReproTest::CReproTest() {

    m_hWnd = NULL;
    m_pd3d = NULL;
    m_pDevice = NULL;
    m_pd3dr = NULL;
}

//******************************************************************************
CReproTest::~CReproTest() {

    if (m_pd3dr) {
        m_pd3dr->Release();
        m_pd3dr = NULL;
    }

    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }

    if (m_pd3d) {
        m_pd3d->Release();
        m_pd3d = NULL;
    }

#ifndef UNDER_XBOX
    // Unregister the window class
    UnregisterClass(TEXT("Direct3D Repro Test"), m_hInstance);
#endif // !UNDER_XBOX
}

//******************************************************************************
BOOL CReproTest::Create(HINSTANCE hInstance) {

    D3DPRESENT_PARAMETERS   d3dpp;
    LVERTEX                 plrVertices[3];
    LPBYTE                  pData;
    HRESULT                 hr;
#ifndef UNDER_XBOX
    WNDCLASS                wc;
    MSG                     msg;
#endif // !UNDER_XBOX

    m_hInstance = hInstance;

#ifndef UNDER_XBOX

    // Register the window class
    memset(&wc, 0, sizeof(WNDCLASS));
    wc.style            = 0;
    wc.lpfnWndProc      = WndProc;
    wc.cbClsExtra       = 0;
    wc.cbWndExtra       = 0;
    wc.hInstance        = m_hInstance;
    wc.hIcon            = NULL;
    wc.hbrBackground    = NULL;
    wc.hCursor          = LoadCursor(NULL, IDC_ARROW);
    wc.lpszMenuName     = NULL;
    wc.lpszClassName    = TEXT("Direct3D Repro Test");

    if (!RegisterClass(&wc)) {
        DebugString(TEXT("RegisterClass failed"));
		return FALSE;
    }

    // Create the main application window
    m_hWnd = CreateWindowEx(0, TEXT("Direct3D Repro Test"), 
                            TEXT("Direct3D Repro Test"), 
                            WS_OVERLAPPEDWINDOW | WS_VISIBLE, 0, 0,
                            GetSystemMetrics(SM_CXSCREEN), 
                            GetSystemMetrics(SM_CYSCREEN),
                            NULL, NULL, m_hInstance, NULL);

    if (!m_hWnd) {
        DebugString(TEXT("CreateWindowEx failed"));
		return FALSE;
    }

    UpdateWindow(m_hWnd);

    // Pump any messages
    while(PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

#endif

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pd3d) {
        DebugString(TEXT("Direct3DCreate8 failed"));
    }

    // Initialize the presentation parameters
    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_A8R8G8B8;
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_D24S8;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = m_hWnd;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = TRUE;

    // Create the device
    hr = m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, m_hWnd, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice);
    if (ResultFailed(hr, TEXT("IDirect3D8::CreateDevice failed"))) {
        return FALSE;
    }

    plrVertices[0] = LVERTEX(D3DXVECTOR3(-10.0f, -10.0f, 0.0f), RGBA_MAKE(255, 0, 0, 255), 0, 0.0f, 0.0f);
    plrVertices[1] = LVERTEX(D3DXVECTOR3( 0.0f,  10.0f, 0.0f), RGBA_MAKE(0, 0, 255, 255), 0, 0.0f, 0.0f);
    plrVertices[2] = LVERTEX(D3DXVECTOR3( 10.0f, -10.0f, 0.0f), RGBA_MAKE(0, 255, 0, 255), 0, 0.0f, 0.0f);

    hr = m_pDevice->CreateVertexBuffer(3 * sizeof(LVERTEX), 0, FVF_LVERTEX, D3DPOOL_DEFAULT, &m_pd3dr);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        return FALSE;
    }

    hr = m_pd3dr->Lock(0, 3 * sizeof(LVERTEX), &pData, 0);
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"))) {
        return FALSE;
    }

    memcpy(pData, plrVertices, 3 * sizeof(LVERTEX));

    hr = m_pd3dr->Unlock();
    if (ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"))) {
        return FALSE;
    }

    return InitDeviceState();
}

//******************************************************************************
BOOL CReproTest::Run() {

#ifndef UNDER_XBOX
    MSG             msg;
#endif // !UNDER_XBOX
    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    do {

#ifndef UNDER_XBOX
        if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
        else if (msg.message != WM_QUIT) {

            hr = m_pDevice->TestCooperativeLevel();
            if (FAILED(hr)) {
                return FALSE;
            }

#endif // !UNDER_XBOX

            // Set a viewport for the device
            viewport.X = 0;
            viewport.Y = 0;
            viewport.Width = 640;
            viewport.Height = 480;
            viewport.MinZ = 0.0f;
            viewport.MaxZ = 1.0f;

            hr = m_pDevice->SetViewport(&viewport);
            if (FAILED(hr)) {
                DebugString(TEXT("IDirect3DDevice8::SetViewport failed [0x%X]"), hr);
                return FALSE;
            }

            // Clear the rendering target
            m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(0, 0, 255), 1.0f, 0);


            // Set a viewport for the device
            viewport.X = 100;
            viewport.Y = 50;
            viewport.Width = 440;
            viewport.Height = 380;
            viewport.MinZ = 0.0f;
            viewport.MaxZ = 1.0f;

            hr = m_pDevice->SetViewport(&viewport);
            if (FAILED(hr)) {
                DebugString(TEXT("IDirect3DDevice8::SetViewport failed [0x%X]"), hr);
                return FALSE;
            }

            // Clear the rendering target
            m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(255, 0, 0), 1.0f, 0);

            // Update the screen
            m_pDevice->Present(NULL, NULL, NULL, NULL);

#ifndef UNDER_XBOX
        }
    } while (msg.message != WM_QUIT);
#else
    } while (TRUE);
#endif

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::InitDeviceState() {

    D3DXMATRIX mTransform;
    UINT       i;
    HRESULT    hr;

    // Initialize the viewport
    if (!SetViewport(640, 480)) {
        DebugString(TEXT("SetViewport failed"));
    }

    // Initialize the view matrix
    SetView(&mTransform, &D3DXVECTOR3(0.0f, 0.0f, -50.0f), &D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
            &D3DXVECTOR3(0.0f, 1.0f, 0.0f));

    hr = m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Initialize the projection matrix
    SetPerspectiveProjection(&mTransform, 0.1f, 1000.0f, 
            M_PI / 4.0f, 480.0f / 640.0f);

    hr = m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Set ambient lighting
    hr = m_pDevice->SetRenderState(D3DRS_AMBIENT, 0x20202020);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the texture filters
    for (i = 0; i < 2; i++) {
        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
        if (FAILED(hr)) {
            DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
        }
    }

    // Set blend modes
    hr = m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    hr = m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Modulate color and alpha texture stages
    hr = m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetTextureStageState"));
    }

    // Set the alpha comparison function
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAFUNC, (DWORD)D3DCMP_GREATEREQUAL);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Set the alpha reference value to opaque
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAREF, 0xFF);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Turn on specular highlights
    hr = m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Enable dithering
    hr = m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    // Disable per-vertex color
    hr = m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);
    if (FAILED(hr)) {
        DebugString(TEXT("IDirect3DDevice8::SetRenderState failed"));
    }

    return TRUE;
}

//******************************************************************************
BOOL CReproTest::SetViewport(DWORD dwWidth, DWORD dwHeight) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    // Set a viewport for the device
    viewport.X = 0;
    viewport.Y = 0;
    viewport.Width = dwWidth;
    viewport.Height = dwHeight;
    viewport.MinZ = 0.0f;
    viewport.MaxZ = 1.0f;

    hr = m_pDevice->SetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetViewport"))) {
        return FALSE;
    }

    return TRUE;
}

#ifndef UNDER_XBOX

//******************************************************************************
// WndProc
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Window procedure to process messages for the main application window
//
// Arguments:
//
//     HWND hWnd                - Application window
//
//     UINT message             - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     0 if the message was handled, the return of DefWindowProc otherwise.
//
//******************************************************************************
LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    switch (uMsg) {

        case WM_SETCURSOR:
            SetCursor(NULL);
            return TRUE;

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    SendMessage(hWnd, WM_CLOSE, 0, 0);
                    return 0;
            }
            break;

        case WM_CLOSE:
            DestroyWindow(hWnd);
            return 0;

        case WM_DESTROY:
            PostQuitMessage(0);
            return 0;
    }

    return DefWindowProc(hWnd, uMsg, wParam, lParam);
}

#endif // UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     InitMatrix
//
// Description:
//
//     Initialize the given matrix with the given values.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Matrix to initialize
//
//     float _11 to _44         - Initialization values
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
                float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44) 
{
    if (pd3dm) {

        pd3dm->_11 = _11;
        pd3dm->_12 = _12;
        pd3dm->_13 = _13;
        pd3dm->_14 = _14;
        pd3dm->_21 = _21;
        pd3dm->_22 = _22;
        pd3dm->_23 = _23;
        pd3dm->_24 = _24;
        pd3dm->_31 = _31;
        pd3dm->_32 = _32;
        pd3dm->_33 = _33;
        pd3dm->_34 = _34;
        pd3dm->_41 = _41;
        pd3dm->_42 = _42;
        pd3dm->_43 = _43;
        pd3dm->_44 = _44;
    }
}

//******************************************************************************
//
// Function:
//
//     SetView
//
// Description:
//
//     Align the given view matrix along the given direction and up vectors with
//     the position vector as the origin.
//
// Arguments:
//
//     LPD3DXMATRIX pd3dm       - View matrix to initialize
//
//     LPD3DXVECTOR3 pvPos      - View origin
//
//     LPD3DXVECTOR3 pvAt       - View interest vector
//
//     LPD3DXVECTOR3 pvUp       - View up vector
//
// Return Value:
//
//     Initialized view matrix.
//
//******************************************************************************
void SetView(LPD3DXMATRIX pd3dm, LPD3DXVECTOR3 pvPos, LPD3DXVECTOR3 pvAt, 
                                                      LPD3DXVECTOR3 pvUp) 
{
    D3DXVECTOR3  d, u, r;

    if (pd3dm && pvPos && pvAt && pvUp && !(*pvPos == *pvAt) 
                                 && !(*pvUp == D3DXVECTOR3(0.0f, 0.0f, 0.0f))) {

        D3DXVec3Normalize(&d, &(*pvAt - *pvPos));
        u = *pvUp;

        // Project the up vector into the plane of the direction vector
        D3DXVec3Normalize(&u, &(u - (d * D3DXVec3Dot(&u, &d))));

        // Get the cross product
        D3DXVec3Cross(&r, &u, &d);

        // Initialize the view transform
        InitMatrix(pd3dm,
            r.x, u.x, d.x, 0.0f,
            r.y, u.y, d.y, 0.0f,
            r.z, u.z, d.z, 0.0f,
            -(pvPos->x * r.x + pvPos->y * r.y + pvPos->z * r.z), 
            -(pvPos->x * u.x + pvPos->y * u.y + pvPos->z * u.z), 
            -(pvPos->x * d.x + pvPos->y * d.y + pvPos->z * d.z), 
            1.0f
        );
    }
}

//******************************************************************************
//
// Function:
//
//     SetPerspectiveProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fFieldOfView, float fAspect) {

    float fTanHalfFOV = (float)tan((double)fFieldOfView / 2.0);
    float fFar = fBack / (fBack - fFront);

    InitMatrix(pd3dm,
        1.0f, 0.0f,           0.0f,                         0.0f,
        0.0f, 1.0f / fAspect, 0.0f,                         0.0f,
        0.0f, 0.0f,           fTanHalfFOV * fFar,           fTanHalfFOV,
        0.0f, 0.0f,           -fFront * fTanHalfFOV * fFar, 0.0f
    );
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1849\test.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    test.h

Author:

    Matt Bronder

Description:

    Direct3D test functions.

*******************************************************************************/

#ifndef __TEST_H__
#define __TEST_H__

//******************************************************************************
class CTest : public CScene {

protected:

    VERTEX                          m_prQuad[4];
    LVERTEX                         m_plrQuad[4];

    WORD                            m_pwIndices[6];

    CTexture8*                      m_pd3dt;

public:

                                    CTest();
                                    ~CTest();

protected:

    virtual BOOL                    Prepare();
    virtual BOOL                    Initialize();
    virtual void                    Efface();
    virtual void                    Update();
    virtual BOOL                    Render();

    virtual void                    ProcessInput();
    virtual BOOL                    InitView();

    virtual BOOL                    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                                            WPARAM wParam, LPARAM lParam);
};

#endif //__TEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1849\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=xbox1849
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1849\exe\sources.inc ===
TARGETNAME=xbox1849
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\l_rx1849.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox2024\snow.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    snow.bmp.cpp

Description

    Data file for the resource snow.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_snow[] = {

   0x42, 0x4D, 0x88, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x14, 0x00, 
   0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xF7, 0xF7, 0xF7, 0x00, 0xF0, 0xF0, 
   0xF0, 0x00, 0xEA, 0xEA, 0xEA, 0x00, 0xE6, 0xE6, 0xE6, 0x00, 0xE2, 0xE2, 0xE2, 0x00, 0xDC, 0xDC, 
   0xDC, 0x00, 0xDB, 0xDB, 0xDB, 0x00, 0xD8, 0xD8, 0xD8, 0x00, 0xD4, 0xD4, 0xD4, 0x00, 0xD2, 0xD2, 
   0xD2, 0x00, 0xD1, 0xD1, 0xD1, 0x00, 0xCE, 0xCE, 0xCE, 0x00, 0xCD, 0xCD, 0xCD, 0x00, 0xCC, 0xCC, 
   0xCC, 0x00, 0xCB, 0xCB, 0xCB, 0x00, 0xCA, 0xCA, 0xCA, 0x00, 0xC9, 0xC9, 0xC9, 0x00, 0xC8, 0xC8, 
   0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x0F, 0x0B, 0x0A, 0x0D, 
   0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x10, 0x09, 0x05, 0x04, 0x06, 
   0x0D, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x0E, 0x07, 0x02, 0x01, 0x04, 
   0x0A, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x0F, 0x08, 0x03, 0x02, 0x05, 
   0x0B, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x0C, 0x08, 0x07, 0x09, 
   0x0F, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x0F, 0x0E, 0x10, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x00, 0x00, 
};

static RESOURCEDATA g_rd_snow(TEXT("snow.bmp"), g_snow, sizeof(g_snow));

extern "C" LPVOID PREPEND_MODULE(_snow) = (LPVOID)&g_rd_snow;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox2024\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\regress\xbox1849\texture.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    texture.bmp.cpp

Description

    Data file for the resource texture.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_texture[] = {

   0x42, 0x4D, 0x38, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0xB7, 0xB4, 0xD2, 0xB1, 0xAE, 0xD4, 0xB3, 0xB0, 0xD2, 
   0xB1, 0xAE, 0xD4, 0xB3, 0xB0, 0xD4, 0xB3, 0xB0, 0xD3, 0xB2, 0xAF, 0xD4, 0xB3, 0xB0, 0xD4, 0xB3, 
   0xB0, 0xD6, 0xB5, 0xB2, 0xD6, 0xB5, 0xB2, 0xD7, 0xB6, 0xB3, 0xD4, 0xB3, 0xB0, 0xD5, 0xB4, 0xB1, 
   0xD6, 0xB5, 0xB2, 0xD8, 0xB7, 0xB4, 0xCF, 0xAE, 0xAB, 0xD2, 0xB1, 0xAE, 0xD1, 0xB0, 0xAD, 0xD2, 
   0xB1, 0xAE, 0xD3, 0xB2, 0xAF, 0xD5, 0xB4, 0xB1, 0xD9, 0xB8, 0xB5, 0xDC, 0xBB, 0xB8, 0xDD, 0xBC, 
   0xB9, 0xDD, 0xBC, 0xB9, 0xD9, 0xB8, 0xB5, 0xD3, 0xB2, 0xAF, 0xD6, 0xB5, 0xB2, 0xD1, 0xB0, 0xAD, 
   0xD7, 0xB6, 0xB3, 0xE3, 0xC2, 0xBF, 0xDB, 0xBA, 0xB7, 0xD6, 0xB5, 0xB2, 0xD8, 0xB7, 0xB4, 0xDB, 
   0xBA, 0xB7, 0xDA, 0xB9, 0xB6, 0xD3, 0xB2, 0xAF, 0xD7, 0xB6, 0xB3, 0xDA, 0xB9, 0xB6, 0xD9, 0xB8, 
   0xB5, 0xD7, 0xB6, 0xB3, 0xD6, 0xB5, 0xB2, 0xDA, 0xB9, 0xB6, 0xDD, 0xBC, 0xB9, 0xDC, 0xBB, 0xB8, 
   0xD7, 0xB6, 0xB4, 0xD5, 0xB4, 0xB1, 0xD8, 0xB7, 0xB4, 0xE3, 0xC2, 0xBF, 0xDB, 0xB9, 0xB7, 0xD8, 
   0xB7, 0xB4, 0xDC, 0xBB, 0xB8, 0xE1, 0xC0, 0xBD, 0xD7, 0xB6, 0xB3, 0xD2, 0xB1, 0xAE, 0xDF, 0xBE, 
   0xBB, 0xEA, 0xC9, 0xC6, 0xF1, 0xD0, 0xCD, 0xE8, 0xC8, 0xC6, 0xE5, 0xC7, 0xC4, 0xE7, 0xCB, 0xC7, 
   0xDE, 0xC2, 0xBE, 0xE4, 0xCA, 0xC6, 0xE0, 0xC7, 0xC3, 0xDC, 0xC3, 0xBF, 0xDE, 0xC5, 0xC1, 0xDD, 
   0xC2, 0xBE, 0xDA, 0xBE, 0xBA, 0xD9, 0xBB, 0xB7, 0xDF, 0xBF, 0xBC, 0xDB, 0xBC, 0xB9, 0xD6, 0xB7, 
   0xB4, 0xD8, 0xB9, 0xB6, 0xD3, 0xB4, 0xB1, 0xD2, 0xB3, 0xB0, 0xD3, 0xB4, 0xB1, 0xCB, 0xAC, 0xA9, 
   0xD3, 0xB2, 0xAF, 0xD4, 0xB1, 0xAE, 0xD5, 0xB3, 0xB1, 0xD6, 0xB7, 0xB3, 0xD3, 0xB7, 0xB3, 0xD4, 
   0xBA, 0xB6, 0xCD, 0xB4, 0xB0, 0xC2, 0xAA, 0xA2, 0xB0, 0x9A, 0x92, 0xA7, 0x94, 0x8C, 0xD0, 0xBC, 
   0xB4, 0xDD, 0xC6, 0xBE, 0xC5, 0xA7, 0xA1, 0xBD, 0x9E, 0x99, 0xE7, 0xC8, 0xC5, 0xF3, 0xD6, 0xD2, 
   0xE5, 0xC8, 0xC4, 0xD9, 0xBF, 0xBB, 0xD6, 0xBD, 0xB9, 0xCB, 0xB2, 0xAE, 0xC5, 0xAA, 0xA3, 0xBF, 
   0xA3, 0x9C, 0xC0, 0xA3, 0x9D, 0xC6, 0xA7, 0xA2, 0xB9, 0x97, 0x94, 0xD7, 0xB3, 0xB2, 0xC6, 0xA3, 
   0xA0, 0xDF, 0xC4, 0xC0, 0xB7, 0xAF, 0xB2, 0x45, 0x4B, 0x54, 0x36, 0x4B, 0x5A, 0x5B, 0x76, 0x87, 
   0x74, 0x91, 0xA2, 0x72, 0x8D, 0xA0, 0xBC, 0xC7, 0xD3, 0xF3, 0xE8, 0xEB, 0xF5, 0xDE, 0xDA, 0xF6, 
   0xDF, 0xD7, 0xF2, 0xE3, 0xDB, 0xC8, 0xC7, 0xC6, 0x65, 0x6E, 0x75, 0x75, 0x85, 0x8D, 0x63, 0x7C, 
   0x84, 0x1F, 0x35, 0x3D, 0x3A, 0x4A, 0x4F, 0x4E, 0x56, 0x59, 0x60, 0x59, 0x61, 0xC5, 0xBD, 0xC3, 
   0xF0, 0xE5, 0xE9, 0xF9, 0xEE, 0xEE, 0xF8, 0xE7, 0xE4, 0xFB, 0xE7, 0xE1, 0xF5, 0xE7, 0xE4, 0xED, 
   0xE3, 0xE6, 0xF1, 0xE0, 0xE3, 0xF0, 0xD9, 0xDC, 0xEE, 0xD5, 0xD7, 0xEB, 0xD3, 0xD3, 0xD6, 0xC1, 
   0xC0, 0xC3, 0xB3, 0xB0, 0x60, 0x5C, 0x5C, 0x4E, 0x58, 0x5C, 0x8A, 0x8E, 0x96, 0xD8, 0xCD, 0xD6, 
   0xE1, 0xD1, 0xD5, 0x6D, 0x71, 0x70, 0x4C, 0x5F, 0x5E, 0x56, 0x66, 0x65, 0x30, 0x3D, 0x3D, 0x3D, 
   0x47, 0x47, 0x44, 0x4B, 0x4C, 0x42, 0x48, 0x49, 0x3E, 0x46, 0x48, 0x3F, 0x48, 0x4C, 0x34, 0x3D, 
   0x40, 0x35, 0x3E, 0x41, 0x39, 0x42, 0x45, 0x33, 0x3C, 0x3F, 0x31, 0x3C, 0x3E, 0x33, 0x42, 0x40, 
   0x31, 0x3B, 0x38, 0x2F, 0x33, 0x31, 0x31, 0x36, 0x37, 0x33, 0x43, 0x4C, 0x48, 0x5F, 0x6E, 0x66, 
   0x82, 0x98, 0x74, 0x8E, 0xA4, 0x6A, 0x80, 0x8E, 0x78, 0x88, 0x8F, 0x41, 0x4F, 0x53, 0x3A, 0x49, 
   0x4D, 0x40, 0x4E, 0x51, 0x40, 0x4B, 0x49, 0x3B, 0x46, 0x45, 0x3A, 0x47, 0x49, 0x3D, 0x4B, 0x51, 
   0x54, 0x65, 0x6D, 0x58, 0x6A, 0x73, 0x50, 0x64, 0x6A, 0x42, 0x58, 0x5C, 0x47, 0x5E, 0x66, 0x68, 
   0x80, 0x8E, 0x57, 0x70, 0x83, 0x5D, 0x78, 0x8F, 0x57, 0x71, 0x8B, 0x64, 0x83, 0xA0, 0x68, 0x88, 
   0xA3, 0x64, 0x86, 0x9A, 0x62, 0x80, 0x8F, 0x41, 0x58, 0x63, 0x42, 0x51, 0x59, 0x38, 0x44, 0x4C, 
   0x4D, 0x55, 0x5C, 0xAB, 0xAA, 0xAF, 0xEE, 0xE2, 0xE5, 0xF2, 0xDF, 0xE0, 0xC0, 0xAB, 0xA9, 0xE4, 
   0xCF, 0xCA, 0xF7, 0xE6, 0xE4, 0xF7, 0xE6, 0xE5, 0xF5, 0xE4, 0xE3, 0xF4, 0xE3, 0xE1, 0xF1, 0xE0, 
   0xDF, 0xF4, 0xE2, 0xE1, 0xF8, 0xE7, 0xE7, 0xF6, 0xE8, 0xEA, 0xED, 0xE8, 0xE9, 0x78, 0x7C, 0x7E, 
   0x52, 0x5D, 0x60, 0x38, 0x46, 0x49, 0x39, 0x47, 0x4C, 0x48, 0x56, 0x5C, 0x35, 0x3C, 0x41, 0xC0, 
   0xC1, 0xC2, 0xB0, 0xAF, 0xB2, 0x64, 0x67, 0x6C, 0x89, 0x93, 0x9C, 0x47, 0x53, 0x5C, 0x65, 0x75, 
   0x7E, 0x40, 0x56, 0x5D, 0x31, 0x4D, 0x52, 0x3B, 0x59, 0x5E, 0x65, 0x80, 0x86, 0x52, 0x6A, 0x71, 
   0x52, 0x67, 0x6F, 0x60, 0x75, 0x7C, 0x4C, 0x60, 0x67, 0x68, 0x7C, 0x83, 0x5B, 0x71, 0x79, 0x51, 
   0x68, 0x73, 0x5B, 0x74, 0x82, 0x63, 0x7B, 0x8A, 0x53, 0x66, 0x71, 0x35, 0x42, 0x49, 0x39, 0x3F, 
   0x42, 0x6E, 0x6E, 0x6E, 0x69, 0x62, 0x61, 0x62, 0x45, 0x41, 0x68, 0x4A, 0x43, 0x64, 0x47, 0x3C, 
   0x69, 0x4F, 0x40, 0x67, 0x4D, 0x3C, 0x67, 0x4F, 0x39, 0x67, 0x4E, 0x3B, 0x67, 0x4C, 0x3E, 0x67, 
   0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x66, 0x4B, 0x3D, 0x65, 0x4B, 0x3D, 0xDB, 0xBA, 0xB7, 0xDB, 0xBA, 0xB6, 0xDA, 0xB9, 0xB6, 0xD9, 
   0xB8, 0xB5, 0xDC, 0xBC, 0xB8, 0xDD, 0xBC, 0xB8, 0xD8, 0xB7, 0xB4, 0xD4, 0xB3, 0xB0, 0xD7, 0xB6, 
   0xB3, 0xDB, 0xBA, 0xB7, 0xDB, 0xBA, 0xB7, 0xE1, 0xC0, 0xBD, 0xE0, 0xBF, 0xBC, 0xDA, 0xB9, 0xB6, 
   0xD8, 0xB7, 0xB4, 0xD9, 0xB8, 0xB5, 0xD4, 0xB3, 0xB0, 0xD6, 0xB5, 0xB2, 0xD6, 0xB5, 0xB2, 0xD7, 
   0xB6, 0xB3, 0xD8, 0xB7, 0xB4, 0xDA, 0xB9, 0xB6, 0xDD, 0xBC, 0xB9, 0xDD, 0xBC, 0xB9, 0xDB, 0xBA, 
   0xB7, 0xD9, 0xB8, 0xB5, 0xD9, 0xB8, 0xB5, 0xD7, 0xB6, 0xB3, 0xD6, 0xB5, 0xB2, 0xCB, 0xAA, 0xA7, 
   0xD1, 0xB0, 0xAD, 0xD6, 0xB5, 0xB2, 0xCB, 0xAA, 0xA7, 0xD1, 0xB0, 0xAD, 0xD7, 0xB6, 0xB3, 0xDD, 
   0xBC, 0xB9, 0xD7, 0xB6, 0xB3, 0xD5, 0xB4, 0xB1, 0xE1, 0xC0, 0xBD, 0xDB, 0xBA, 0xB7, 0xD7, 0xB6, 
   0xB3, 0xD7, 0xB6, 0xB3, 0xDA, 0xB9, 0xB6, 0xDB, 0xBA, 0xB7, 0xDA, 0xB9, 0xB6, 0xD8, 0xB7, 0xB4, 
   0xD7, 0xB6, 0xB3, 0xD9, 0xB8, 0xB5, 0xDB, 0xBB, 0xB7, 0xD9, 0xB8, 0xB4, 0xE3, 0xC2, 0xBF, 0xE0, 
   0xBF, 0xBC, 0xD9, 0xB8, 0xB4, 0xD5, 0xB4, 0xB0, 0xD7, 0xB6, 0xB2, 0xD3, 0xB2, 0xAE, 0xD5, 0xB4, 
   0xB0, 0xDC, 0xBB, 0xB8, 0xE2, 0xC2, 0xBE, 0xEB, 0xCB, 0xC9, 0xE9, 0xCB, 0xC8, 0xE5, 0xC7, 0xC3, 
   0xE7, 0xCB, 0xC7, 0xE7, 0xCD, 0xC9, 0xDF, 0xC6, 0xC2, 0xDE, 0xC5, 0xC1, 0xD9, 0xC0, 0xBC, 0xD8, 
   0xBD, 0xB9, 0xDC, 0xC0, 0xBC, 0xE3, 0xC5, 0xC2, 0xE3, 0xC4, 0xC1, 0xD5, 0xB6, 0xB3, 0xD7, 0xB8, 
   0xB5, 0xDB, 0xBC, 0xB9, 0xD4, 0xB5, 0xB2, 0xCE, 0xAF, 0xAC, 0xCE, 0xAF, 0xAC, 0xC6, 0xA8, 0xA5, 
   0xD1, 0xB0, 0xAD, 0xD9, 0xB6, 0xB3, 0xD7, 0xB6, 0xB3, 0xD2, 0xB3, 0xAF, 0xC8, 0xAC, 0xA8, 0xC6, 
   0xAB, 0xA7, 0xC4, 0xA9, 0xA5, 0xC7, 0xAD, 0xA6, 0xB6, 0xA0, 0x98, 0xAD, 0x99, 0x91, 0x9B, 0x86, 
   0x7E, 0xBC, 0xA5, 0x9D, 0xD1, 0xB3, 0xAC, 0xBF, 0x9F, 0x9B, 0xC4, 0xA5, 0xA2, 0xF2, 0xD6, 0xD2, 
   0xF3, 0xD7, 0xD3, 0xE1, 0xC5, 0xC1, 0xD5, 0xBB, 0xB7, 0xCB, 0xB2, 0xAE, 0xC1, 0xA5, 0x9E, 0xC0, 
   0xA4, 0x9D, 0xC3, 0xA6, 0xA0, 0xC0, 0xA1, 0x9D, 0xBE, 0x9D, 0x9B, 0xC9, 0xA8, 0xA8, 0xD2, 0xB2, 
   0xAF, 0xED, 0xD8, 0xD4, 0x9F, 0x97, 0x9B, 0x3C, 0x42, 0x4B, 0x32, 0x44, 0x52, 0x67, 0x7E, 0x8E, 
   0x7B, 0x93, 0xA3, 0x83, 0x95, 0xA6, 0xDE, 0xE2, 0xEE, 0xF2, 0xE3, 0xE5, 0xF6, 0xE2, 0xDD, 0xF1, 
   0xDE, 0xD8, 0xEC, 0xE0, 0xDA, 0xC2, 0xC3, 0xC5, 0x5F, 0x6A, 0x74, 0x78, 0x88, 0x92, 0x29, 0x40, 
   0x4B, 0x16, 0x2B, 0x34, 0x51, 0x60, 0x66, 0x7E, 0x86, 0x8A, 0xC8, 0xC2, 0xC7, 0xF8, 0xF1, 0xF5, 
   0xF6, 0xEC, 0xEE, 0xF6, 0xEA, 0xE9, 0xFE, 0xEE, 0xEB, 0xFF, 0xED, 0xE7, 0xF8, 0xE7, 0xE3, 0xE7, 
   0xD6, 0xD7, 0xED, 0xD7, 0xD8, 0xF0, 0xD7, 0xD8, 0xE7, 0xCC, 0xCC, 0xD8, 0xC2, 0xC0, 0xD6, 0xC2, 
   0xC1, 0xC0, 0xB2, 0xB1, 0x64, 0x62, 0x62, 0x58, 0x63, 0x66, 0xA0, 0xA5, 0xAB, 0xE4, 0xDA, 0xE2, 
   0xD2, 0xC4, 0xC7, 0x83, 0x86, 0x86, 0x72, 0x82, 0x80, 0x43, 0x50, 0x4F, 0x37, 0x42, 0x43, 0x3D, 
   0x46, 0x46, 0x46, 0x4B, 0x4B, 0x3F, 0x43, 0x44, 0x3D, 0x45, 0x47, 0x3E, 0x48, 0x4B, 0x3A, 0x44, 
   0x46, 0x3E, 0x48, 0x4A, 0x3B, 0x45, 0x48, 0x37, 0x41, 0x44, 0x37, 0x43, 0x45, 0x3A, 0x49, 0x48, 
   0x35, 0x3F, 0x3D, 0x34, 0x39, 0x38, 0x3C, 0x45, 0x46, 0x3F, 0x51, 0x5A, 0x68, 0x81, 0x90, 0x70, 
   0x8E, 0xA3, 0x60, 0x7C, 0x90, 0x65, 0x7B, 0x88, 0x79, 0x8A, 0x90, 0x39, 0x45, 0x4A, 0x3D, 0x49, 
   0x4E, 0x3F, 0x4C, 0x4F, 0x43, 0x4D, 0x4C, 0x3A, 0x44, 0x44, 0x3C, 0x48, 0x4C, 0x3D, 0x4B, 0x51, 
   0x55, 0x66, 0x6E, 0x5A, 0x6C, 0x75, 0x5D, 0x71, 0x78, 0x45, 0x5B, 0x60, 0x58, 0x6F, 0x78, 0x66, 
   0x7F, 0x8C, 0x5A, 0x74, 0x86, 0x56, 0x71, 0x88, 0x50, 0x6D, 0x85, 0x5C, 0x7C, 0x97, 0x71, 0x93, 
   0xAB, 0x5B, 0x7B, 0x8F, 0x45, 0x62, 0x6F, 0x45, 0x5C, 0x65, 0x3E, 0x4C, 0x53, 0x30, 0x3A, 0x41, 
   0x77, 0x7D, 0x82, 0xD6, 0xD4, 0xD8, 0xEB, 0xDF, 0xE1, 0xED, 0xDA, 0xDA, 0xDC, 0xC7, 0xC5, 0xF1, 
   0xDC, 0xD8, 0xF4, 0xE6, 0xE3, 0xF5, 0xE7, 0xE5, 0xF2, 0xE4, 0xE2, 0xF4, 0xE6, 0xE4, 0xF4, 0xE6, 
   0xE4, 0xF4, 0xE6, 0xE4, 0xF4, 0xE6, 0xE5, 0xF5, 0xE9, 0xE9, 0xE7, 0xE2, 0xE3, 0x55, 0x5C, 0x61, 
   0x56, 0x64, 0x6A, 0x3B, 0x4B, 0x54, 0x40, 0x52, 0x5D, 0x40, 0x4E, 0x59, 0x90, 0x97, 0x9F, 0xDC, 
   0xDD, 0xE1, 0x77, 0x74, 0x79, 0xA4, 0xA5, 0xAB, 0x57, 0x5F, 0x67, 0x6C, 0x77, 0x81, 0x40, 0x4F, 
   0x59, 0x25, 0x39, 0x42, 0x48, 0x63, 0x6A, 0x4C, 0x67, 0x6F, 0x6C, 0x86, 0x8E, 0x5A, 0x70, 0x79, 
   0x60, 0x75, 0x7D, 0x5A, 0x6F, 0x78, 0x57, 0x6C, 0x75, 0x63, 0x79, 0x81, 0x55, 0x6C, 0x75, 0x57, 
   0x6E, 0x79, 0x59, 0x70, 0x7D, 0x5C, 0x6F, 0x7C, 0x49, 0x58, 0x61, 0x62, 0x6A, 0x6F, 0x6C, 0x6B, 
   0x6C, 0x79, 0x71, 0x70, 0x59, 0x4B, 0x48, 0x64, 0x47, 0x42, 0x68, 0x4B, 0x43, 0x67, 0x4B, 0x40, 
   0x67, 0x4D, 0x3D, 0x67, 0x4D, 0x3C, 0x67, 0x4F, 0x3A, 0x67, 0x4E, 0x3C, 0x67, 0x4C, 0x3E, 0x67, 
   0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x66, 0x4B, 0x3D, 0x65, 0x4B, 0x3D, 0xDE, 0xBE, 0xB9, 0xE0, 0xC0, 0xBB, 0xDF, 0xBF, 0xBA, 0xDD, 
   0xBD, 0xB8, 0xDD, 0xBE, 0xB8, 0xDF, 0xBF, 0xBA, 0xDB, 0xBA, 0xB6, 0xD8, 0xB7, 0xB4, 0xDA, 0xB9, 
   0xB6, 0xDD, 0xBC, 0xB9, 0xDC, 0xBB, 0xB8, 0xE2, 0xC1, 0xBE, 0xEB, 0xCA, 0xC7, 0xEE, 0xCD, 0xCA, 
   0xE8, 0xC7, 0xC4, 0xE2, 0xC1, 0xBE, 0xE7, 0xC6, 0xC3, 0xE1, 0xC0, 0xBD, 0xE2, 0xC1, 0xBE, 0xE2, 
   0xC1, 0xBE, 0xE1, 0xC0, 0xBD, 0xDF, 0xBE, 0xBB, 0xDE, 0xBD, 0xBA, 0xE2, 0xC1, 0xBE, 0xE0, 0xBF, 
   0xBC, 0xDD, 0xBC, 0xB9, 0xDC, 0xBB, 0xB8, 0xDA, 0xB9, 0xB6, 0xD9, 0xB8, 0xB5, 0xD3, 0xB2, 0xAF, 
   0xCB, 0xAA, 0xA7, 0xC6, 0xA5, 0xA2, 0xD0, 0xAF, 0xAC, 0xD8, 0xB7, 0xB4, 0xD8, 0xB7, 0xB4, 0xD7, 
   0xB6, 0xB3, 0xD9, 0xB8, 0xB5, 0xDA, 0xB9, 0xB6, 0xD1, 0xB0, 0xAD, 0xD1, 0xB0, 0xAD, 0xD8, 0xB7, 
   0xB4, 0xDB, 0xBA, 0xB7, 0xDA, 0xB9, 0xB6, 0xDC, 0xBB, 0xB8, 0xDA, 0xB9, 0xB6, 0xD8, 0xB7, 0xB4, 
   0xD9, 0xB9, 0xB4, 0xD7, 0xB7, 0xB2, 0xD0, 0xB0, 0xAA, 0xCD, 0xAD, 0xA8, 0xD8, 0xB8, 0xB3, 0xE5, 
   0xC5, 0xC0, 0xE9, 0xC9, 0xC4, 0xD9, 0xB9, 0xB4, 0xD7, 0xB7, 0xB2, 0xD9, 0xBA, 0xB4, 0xD3, 0xB3, 
   0xAE, 0xD1, 0xB1, 0xAC, 0xD9, 0xB9, 0xB4, 0xE2, 0xC3, 0xBF, 0xEC, 0xCE, 0xCA, 0xE7, 0xCA, 0xC6, 
   0xE7, 0xCC, 0xC8, 0xF2, 0xD7, 0xD3, 0xE3, 0xCA, 0xC6, 0xDC, 0xC3, 0xBF, 0xDC, 0xC3, 0xBF, 0xD5, 
   0xBB, 0xB7, 0xD7, 0xBC, 0xB8, 0xE4, 0xC6, 0xC2, 0xDF, 0xBF, 0xBD, 0xD2, 0xB3, 0xB0, 0xD4, 0xB5, 
   0xB2, 0xCC, 0xAD, 0xAA, 0xCF, 0xB0, 0xAD, 0xCA, 0xAB, 0xA8, 0xCA, 0xAB, 0xA8, 0xC9, 0xAA, 0xA7, 
   0xC3, 0xA3, 0xA0, 0xCF, 0xAE, 0xAB, 0xD8, 0xB7, 0xB4, 0xD1, 0xB2, 0xAF, 0xC8, 0xAB, 0xA7, 0xC7, 
   0xAA, 0xA6, 0xBF, 0xA3, 0x9E, 0xC4, 0xAA, 0xA4, 0x99, 0x83, 0x7B, 0x78, 0x64, 0x5C, 0x79, 0x64, 
   0x5C, 0x8F, 0x76, 0x6E, 0xC1, 0xA3, 0x9C, 0xE1, 0xC1, 0xBC, 0xCC, 0xAD, 0xAA, 0xC0, 0xA0, 0x9D, 
   0xE4, 0xC7, 0xC3, 0xF7, 0xDB, 0xD7, 0xE4, 0xC9, 0xC5, 0xD2, 0xB8, 0xB4, 0xD0, 0xB5, 0xAE, 0xCC, 
   0xAF, 0xA9, 0xBE, 0xA1, 0x9C, 0xB3, 0x97, 0x93, 0xBD, 0x9F, 0x9F, 0xBF, 0xA2, 0xA1, 0xC9, 0xAE, 
   0xAB, 0xD3, 0xC0, 0xBD, 0xB2, 0xAC, 0xB1, 0x43, 0x48, 0x51, 0x43, 0x51, 0x5F, 0x85, 0x96, 0xA5, 
   0x7A, 0x8A, 0x97, 0x9F, 0xA4, 0xB2, 0xF1, 0xED, 0xF5, 0xF1, 0xDD, 0xDF, 0xFA, 0xE3, 0xDE, 0xF6, 
   0xE6, 0xE1, 0xD6, 0xCF, 0xCC, 0x55, 0x5A, 0x5E, 0x42, 0x4F, 0x5B, 0x4B, 0x5B, 0x69, 0x09, 0x1F, 
   0x2B, 0x38, 0x49, 0x55, 0x86, 0x92, 0x9A, 0xAD, 0xB4, 0xBA, 0xF8, 0xEF, 0xF4, 0xF8, 0xED, 0xF0, 
   0xF4, 0xE9, 0xE9, 0xF4, 0xE6, 0xE5, 0xF9, 0xE7, 0xE4, 0xF8, 0xE5, 0xE0, 0xF6, 0xE2, 0xDE, 0xEB, 
   0xD4, 0xD2, 0xE8, 0xCE, 0xCC, 0xEC, 0xCF, 0xCE, 0xE8, 0xCD, 0xCC, 0xDD, 0xC9, 0xC7, 0xDB, 0xCA, 
   0xC8, 0xB5, 0xA9, 0xAB, 0x4D, 0x4D, 0x4E, 0x5A, 0x66, 0x68, 0xCB, 0xD0, 0xD5, 0xE4, 0xDC, 0xE2, 
   0xE1, 0xD8, 0xDA, 0xD7, 0xDA, 0xDA, 0x61, 0x6B, 0x6B, 0x2C, 0x35, 0x36, 0x3F, 0x47, 0x47, 0x40, 
   0x46, 0x47, 0x42, 0x45, 0x47, 0x38, 0x3C, 0x3D, 0x3D, 0x47, 0x49, 0x44, 0x50, 0x52, 0x40, 0x4C, 
   0x4E, 0x3C, 0x48, 0x4A, 0x38, 0x44, 0x46, 0x3B, 0x48, 0x4A, 0x3E, 0x4B, 0x4C, 0x3F, 0x4B, 0x4B, 
   0x37, 0x40, 0x40, 0x36, 0x3E, 0x3E, 0x2F, 0x3A, 0x3E, 0x50, 0x64, 0x6F, 0x6E, 0x89, 0x99, 0x62, 
   0x82, 0x95, 0x5A, 0x78, 0x89, 0x68, 0x7F, 0x8A, 0x44, 0x54, 0x5B, 0x38, 0x44, 0x49, 0x44, 0x4F, 
   0x53, 0x40, 0x4A, 0x4E, 0x3A, 0x44, 0x44, 0x39, 0x44, 0x46, 0x3B, 0x47, 0x4B, 0x43, 0x51, 0x57, 
   0x4F, 0x61, 0x68, 0x4D, 0x5E, 0x69, 0x59, 0x6D, 0x76, 0x48, 0x5F, 0x65, 0x64, 0x7B, 0x84, 0x5A, 
   0x72, 0x80, 0x53, 0x6D, 0x7F, 0x5E, 0x79, 0x8E, 0x54, 0x70, 0x88, 0x68, 0x89, 0xA2, 0x69, 0x8B, 
   0xA0, 0x54, 0x72, 0x83, 0x56, 0x6F, 0x7B, 0x55, 0x66, 0x6E, 0x2A, 0x36, 0x3B, 0x44, 0x4D, 0x51, 
   0xAC, 0xAF, 0xB3, 0xDC, 0xD7, 0xD9, 0xE8, 0xDA, 0xDB, 0xE8, 0xD5, 0xD5, 0xEF, 0xDA, 0xD8, 0xF7, 
   0xE3, 0xE1, 0xF5, 0xE8, 0xE6, 0xF5, 0xEA, 0xE7, 0xF3, 0xE7, 0xE5, 0xF1, 0xE5, 0xE3, 0xF4, 0xE8, 
   0xE6, 0xF5, 0xEA, 0xE8, 0xF7, 0xE9, 0xE8, 0xF1, 0xE5, 0xE6, 0xA7, 0xA4, 0xA6, 0x3A, 0x46, 0x4C, 
   0x42, 0x53, 0x5F, 0x2E, 0x41, 0x51, 0x3C, 0x4F, 0x62, 0x75, 0x82, 0x94, 0xE1, 0xE6, 0xF3, 0xE9, 
   0xE7, 0xF0, 0xD9, 0xD2, 0xD9, 0x68, 0x65, 0x6B, 0x6E, 0x71, 0x78, 0x8C, 0x96, 0xA0, 0x2D, 0x3D, 
   0x4A, 0x50, 0x64, 0x6F, 0x4A, 0x62, 0x6D, 0x61, 0x7A, 0x84, 0x65, 0x7C, 0x86, 0x4B, 0x5F, 0x6A, 
   0x5C, 0x70, 0x7B, 0x68, 0x7C, 0x87, 0x79, 0x8E, 0x99, 0x5C, 0x73, 0x7E, 0x5D, 0x71, 0x7C, 0x58, 
   0x6C, 0x77, 0x54, 0x66, 0x70, 0x4A, 0x59, 0x61, 0x65, 0x6F, 0x74, 0x6A, 0x6A, 0x6D, 0x65, 0x5C, 
   0x5B, 0x5A, 0x4A, 0x47, 0x5F, 0x49, 0x44, 0x68, 0x4B, 0x44, 0x66, 0x49, 0x40, 0x67, 0x4B, 0x40, 
   0x67, 0x4D, 0x3E, 0x67, 0x4D, 0x3C, 0x67, 0x4E, 0x3A, 0x67, 0x4D, 0x3C, 0x67, 0x4C, 0x3E, 0x67, 
   0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x66, 0x4B, 0x3D, 0x65, 0x4B, 0x3D, 0xE0, 0xC0, 0xBB, 0xE1, 0xC1, 0xBC, 0xE1, 0xC1, 0xBC, 0xE2, 
   0xC2, 0xBD, 0xE1, 0xC1, 0xBC, 0xE2, 0xC2, 0xBD, 0xDF, 0xBF, 0xBA, 0xDC, 0xBB, 0xB8, 0xDB, 0xBA, 
   0xB7, 0xDB, 0xBA, 0xB7, 0xDA, 0xB9, 0xB6, 0xE0, 0xBF, 0xBC, 0xE1, 0xC0, 0xBD, 0xE7, 0xC6, 0xC3, 
   0xEB, 0xCA, 0xC7, 0xE7, 0xC6, 0xC3, 0xE7, 0xC6, 0xC3, 0xE4, 0xC3, 0xC0, 0xE7, 0xC6, 0xC3, 0xE5, 
   0xC4, 0xC1, 0xE2, 0xC1, 0xBE, 0xE0, 0xBF, 0xBC, 0xDD, 0xBC, 0xB9, 0xDD, 0xBC, 0xB9, 0xDC, 0xBB, 
   0xB8, 0xDA, 0xB9, 0xB6, 0xDB, 0xBA, 0xB7, 0xDA, 0xB9, 0xB6, 0xDD, 0xBC, 0xB9, 0xDC, 0xBB, 0xB8, 
   0xDB, 0xBA, 0xB7, 0xDF, 0xBE, 0xBB, 0xE1, 0xC0, 0xBD, 0xDE, 0xBD, 0xBA, 0xDE, 0xBD, 0xBA, 0xDE, 
   0xBD, 0xBA, 0xDD, 0xBC, 0xB9, 0xDC, 0xBB, 0xB8, 0xD9, 0xB8, 0xB5, 0xD9, 0xB8, 0xB5, 0xD8, 0xB7, 
   0xB4, 0xD8, 0xB7, 0xB4, 0xD6, 0xB5, 0xB2, 0xD8, 0xB7, 0xB4, 0xDA, 0xB9, 0xB6, 0xD6, 0xB5, 0xB2, 
   0xD7, 0xB7, 0xB2, 0xD9, 0xB9, 0xB3, 0xD1, 0xB1, 0xAC, 0xCD, 0xAD, 0xA8, 0xCA, 0xAA, 0xA5, 0xD6, 
   0xB6, 0xB1, 0xDA, 0xBA, 0xB5, 0xD4, 0xB4, 0xAF, 0xD9, 0xB9, 0xB4, 0xD6, 0xB6, 0xB1, 0xD2, 0xB2, 
   0xAD, 0xCF, 0xAF, 0xAA, 0xD3, 0xB3, 0xAF, 0xCE, 0xAE, 0xAB, 0xE2, 0xC4, 0xC1, 0xF0, 0xD3, 0xCF, 
   0xE8, 0xCD, 0xC9, 0xEC, 0xD2, 0xCE, 0xF3, 0xDA, 0xD6, 0xE8, 0xCF, 0xCB, 0xDB, 0xC2, 0xBE, 0xC9, 
   0xAE, 0xAA, 0xDA, 0xBE, 0xBA, 0xD7, 0xB9, 0xB5, 0xD5, 0xB6, 0xB3, 0xD0, 0xB1, 0xAE, 0xCC, 0xAD, 
   0xAA, 0xC6, 0xA7, 0xA4, 0xC3, 0xA4, 0xA1, 0xC9, 0xAA, 0xA7, 0xCD, 0xAE, 0xAB, 0xC8, 0xA9, 0xA6, 
   0xBE, 0x9F, 0x9C, 0xBE, 0x9F, 0x9C, 0xCE, 0xAF, 0xAC, 0xDA, 0xBB, 0xB8, 0xD7, 0xB9, 0xB5, 0xC7, 
   0xAB, 0xA7, 0xC4, 0xA7, 0xA2, 0xC9, 0xAD, 0xA7, 0x93, 0x7A, 0x72, 0x7C, 0x66, 0x5E, 0x93, 0x7C, 
   0x74, 0xC4, 0xAB, 0xA4, 0xD6, 0xB6, 0xAF, 0xE3, 0xC1, 0xBC, 0xDD, 0xBC, 0xB9, 0xC9, 0xAA, 0xA7, 
   0xB7, 0x98, 0x95, 0xD4, 0xB6, 0xB2, 0xF3, 0xD7, 0xD3, 0xE8, 0xCD, 0xC9, 0xD8, 0xBA, 0xB5, 0xC4, 
   0xA7, 0xA1, 0xC8, 0xAB, 0xA6, 0xC0, 0xA4, 0xA1, 0xB2, 0x99, 0x98, 0xB0, 0x98, 0x97, 0x9A, 0x84, 
   0x83, 0xA9, 0x9B, 0x9A, 0xC9, 0xC5, 0xCA, 0x4A, 0x4F, 0x58, 0x54, 0x5D, 0x69, 0x7B, 0x85, 0x91, 
   0x80, 0x86, 0x91, 0xD3, 0xCD, 0xD8, 0xF1, 0xE2, 0xEA, 0xF6, 0xDF, 0xDE, 0xF6, 0xE0, 0xDB, 0xF8, 
   0xED, 0xE9, 0xB8, 0xB7, 0xB6, 0x2E, 0x37, 0x3E, 0x71, 0x81, 0x8E, 0x38, 0x48, 0x57, 0x14, 0x25, 
   0x35, 0x6F, 0x7C, 0x88, 0x91, 0x99, 0xA2, 0xCD, 0xD0, 0xD5, 0xF3, 0xE9, 0xEB, 0xF1, 0xE5, 0xE6, 
   0xF3, 0xE7, 0xE6, 0xF5, 0xE7, 0xE5, 0xF8, 0xE7, 0xE4, 0xF5, 0xE6, 0xE0, 0xF5, 0xDE, 0xD9, 0xF6, 
   0xDA, 0xD6, 0xE4, 0xC7, 0xC3, 0xE2, 0xC5, 0xC1, 0xE5, 0xCC, 0xCA, 0xE2, 0xD0, 0xCD, 0xB2, 0xA5, 
   0xA3, 0x54, 0x4B, 0x50, 0x47, 0x4A, 0x4F, 0x80, 0x8D, 0x8F, 0xF2, 0xF7, 0xF9, 0xEA, 0xE4, 0xE6, 
   0xC0, 0xBA, 0xBB, 0x47, 0x49, 0x4A, 0x2A, 0x2F, 0x30, 0x40, 0x45, 0x46, 0x3D, 0x42, 0x43, 0x3E, 
   0x42, 0x43, 0x3F, 0x43, 0x44, 0x40, 0x44, 0x45, 0x3C, 0x47, 0x48, 0x43, 0x4F, 0x51, 0x42, 0x4E, 
   0x50, 0x3D, 0x49, 0x4B, 0x36, 0x42, 0x44, 0x3D, 0x49, 0x4B, 0x40, 0x4C, 0x4D, 0x3D, 0x49, 0x48, 
   0x34, 0x3E, 0x40, 0x33, 0x3E, 0x41, 0x30, 0x3D, 0x44, 0x62, 0x78, 0x84, 0x69, 0x87, 0x95, 0x63, 
   0x86, 0x97, 0x5D, 0x7D, 0x8C, 0x6A, 0x82, 0x8C, 0x3D, 0x4C, 0x52, 0x4F, 0x58, 0x5C, 0x44, 0x4A, 
   0x51, 0x48, 0x4F, 0x54, 0x3F, 0x48, 0x49, 0x41, 0x4C, 0x4E, 0x41, 0x4D, 0x52, 0x3E, 0x4B, 0x53, 
   0x2E, 0x3E, 0x49, 0x57, 0x68, 0x74, 0x5C, 0x70, 0x78, 0x4D, 0x64, 0x6C, 0x63, 0x7C, 0x86, 0x58, 
   0x72, 0x80, 0x5B, 0x76, 0x87, 0x56, 0x74, 0x87, 0x58, 0x78, 0x8D, 0x67, 0x8B, 0xA0, 0x53, 0x75, 
   0x87, 0x5C, 0x78, 0x86, 0x44, 0x57, 0x5F, 0x35, 0x40, 0x46, 0x31, 0x37, 0x39, 0x54, 0x58, 0x59, 
   0x83, 0x83, 0x84, 0xAF, 0xA8, 0xA9, 0xEE, 0xDE, 0xE0, 0xF7, 0xE3, 0xE3, 0xF0, 0xDC, 0xD9, 0xFA, 
   0xEA, 0xE6, 0xF4, 0xEB, 0xE8, 0xF7, 0xED, 0xEA, 0xF6, 0xED, 0xEA, 0xF2, 0xE9, 0xE6, 0xF1, 0xE8, 
   0xE5, 0xF1, 0xE9, 0xE5, 0xF9, 0xED, 0xEC, 0xAE, 0xA3, 0xA5, 0x5A, 0x5B, 0x5E, 0x44, 0x52, 0x5C, 
   0x2F, 0x44, 0x52, 0x3A, 0x50, 0x65, 0x6C, 0x80, 0x99, 0x9A, 0xA4, 0xB9, 0xBE, 0xC1, 0xD1, 0xEE, 
   0xEA, 0xF3, 0x88, 0x7F, 0x87, 0x60, 0x5A, 0x5F, 0xB2, 0xB1, 0xB7, 0x9E, 0xA6, 0xB0, 0x45, 0x54, 
   0x62, 0x63, 0x76, 0x83, 0x54, 0x6B, 0x77, 0x75, 0x8D, 0x99, 0x5C, 0x70, 0x7D, 0x5F, 0x6F, 0x7C, 
   0x5C, 0x6E, 0x79, 0x6F, 0x81, 0x8D, 0x61, 0x75, 0x83, 0x5C, 0x70, 0x7E, 0x62, 0x74, 0x7F, 0x58, 
   0x69, 0x72, 0x3F, 0x4D, 0x52, 0x61, 0x68, 0x6A, 0x59, 0x5A, 0x5A, 0x51, 0x4B, 0x4A, 0x59, 0x4B, 
   0x46, 0x62, 0x4B, 0x46, 0x66, 0x49, 0x43, 0x68, 0x4B, 0x43, 0x69, 0x4C, 0x42, 0x67, 0x4B, 0x3F, 
   0x67, 0x4C, 0x3E, 0x67, 0x4D, 0x3D, 0x67, 0x4D, 0x3C, 0x67, 0x4D, 0x3D, 0x67, 0x4C, 0x3E, 0x67, 
   0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x66, 0x4B, 0x3D, 0x65, 0x4B, 0x3D, 0xDF, 0xBE, 0xB9, 0xE1, 0xC1, 0xBB, 0xDF, 0xBF, 0xB9, 0xDD, 
   0xBD, 0xB7, 0xDE, 0xBE, 0xB9, 0xE0, 0xC0, 0xBA, 0xDF, 0xBF, 0xBA, 0xDA, 0xB8, 0xB6, 0xDC, 0xBB, 
   0xB8, 0xDF, 0xBE, 0xBB, 0xE2, 0xC1, 0xBE, 0xE2, 0xC1, 0xBE, 0xE1, 0xC0, 0xBD, 0xDE, 0xBD, 0xBA, 
   0xDD, 0xBC, 0xB9, 0xE1, 0xC0, 0xBD, 0xE2, 0xC1, 0xBE, 0xE3, 0xC2, 0xBF, 0xE3, 0xC2, 0xBF, 0xE3, 
   0xC2, 0xBF, 0xE0, 0xBF, 0xBC, 0xE2, 0xC1, 0xBE, 0xE2, 0xC1, 0xBE, 0xE0, 0xBF, 0xBC, 0xE0, 0xBF, 
   0xBC, 0xE0, 0xBF, 0xBC, 0xDF, 0xBE, 0xBB, 0xDE, 0xBD, 0xBA, 0xDC, 0xBB, 0xB8, 0xDB, 0xBA, 0xB7, 
   0xDC, 0xBB, 0xB8, 0xDB, 0xBA, 0xB7, 0xDC, 0xBB, 0xB8, 0xDC, 0xBB, 0xB8, 0xDC, 0xBB, 0xB8, 0xDC, 
   0xBB, 0xB8, 0xDD, 0xBC, 0xB9, 0xDB, 0xBA, 0xB7, 0xDB, 0xBA, 0xB7, 0xD9, 0xB8, 0xB5, 0xD4, 0xB3, 
   0xB0, 0xCE, 0xAD, 0xAA, 0xCF, 0xAE, 0xAB, 0xD6, 0xB5, 0xB2, 0xD5, 0xB4, 0xB1, 0xCC, 0xAB, 0xA8, 
   0xC8, 0xA8, 0xA2, 0xCE, 0xAE, 0xA8, 0xCF, 0xAF, 0xA9, 0xC9, 0xA9, 0xA3, 0xCD, 0xAD, 0xA8, 0xD5, 
   0xB5, 0xB0, 0xCD, 0xAD, 0xA7, 0xD2, 0xB2, 0xAC, 0xD8, 0xB8, 0xB3, 0xD7, 0xB7, 0xB1, 0xD9, 0xB9, 
   0xB4, 0xD8, 0xB8, 0xB3, 0xD7, 0xB7, 0xB2, 0xCD, 0xAD, 0xAA, 0xCF, 0xB1, 0xAD, 0xE7, 0xCB, 0xC7, 
   0xF6, 0xDB, 0xD7, 0xEA, 0xD0, 0xCC, 0xF1, 0xD8, 0xD4, 0xF2, 0xDA, 0xD6, 0xDE, 0xC4, 0xC0, 0xE1, 
   0xC6, 0xC2, 0xDD, 0xC1, 0xBD, 0xD7, 0xB9, 0xB5, 0xD5, 0xB6, 0xB3, 0xCD, 0xAE, 0xAB, 0xC8, 0xA9, 
   0xA6, 0xC7, 0xA8, 0xA5, 0xC2, 0xA3, 0xA0, 0xBF, 0xA0, 0x9D, 0xC5, 0xA6, 0xA3, 0xBE, 0x9F, 0x9C, 
   0xBE, 0xA0, 0x9D, 0xBC, 0x9F, 0x9B, 0xCC, 0xAE, 0xAB, 0xCF, 0xB0, 0xAD, 0xCA, 0xAB, 0xA8, 0xCB, 
   0xAD, 0xAA, 0xCA, 0xAB, 0xA8, 0xBC, 0xA0, 0x99, 0x82, 0x69, 0x62, 0x7E, 0x67, 0x5F, 0xA3, 0x8C, 
   0x84, 0xCF, 0xB3, 0xAC, 0xC9, 0xA8, 0xA2, 0xD6, 0xB3, 0xAF, 0xDD, 0xBC, 0xB9, 0xD3, 0xB4, 0xB1, 
   0xB6, 0x96, 0x94, 0xB3, 0x95, 0x91, 0xCC, 0xAF, 0xAB, 0xF0, 0xD3, 0xCF, 0xE2, 0xC2, 0xBE, 0xC4, 
   0xA6, 0xA2, 0x94, 0x78, 0x74, 0x9F, 0x85, 0x84, 0xC3, 0xAE, 0xAD, 0xBA, 0xA6, 0xA5, 0x97, 0x87, 
   0x86, 0x94, 0x8B, 0x8C, 0x8E, 0x8D, 0x93, 0x55, 0x5A, 0x63, 0x6E, 0x74, 0x7E, 0x6F, 0x71, 0x7B, 
   0xB9, 0xB7, 0xBE, 0xF4, 0xE8, 0xEF, 0xF1, 0xDF, 0xE2, 0xF2, 0xDB, 0xD9, 0xF3, 0xE0, 0xDA, 0xEC, 
   0xE7, 0xE4, 0x8A, 0x8E, 0x92, 0x37, 0x44, 0x4E, 0x6F, 0x80, 0x8D, 0x26, 0x34, 0x44, 0x50, 0x5C, 
   0x6D, 0x87, 0x8D, 0x9A, 0xBA, 0xBD, 0xC4, 0xF1, 0xEF, 0xF2, 0xF4, 0xE8, 0xE7, 0xF1, 0xE4, 0xE3, 
   0xF3, 0xE5, 0xE3, 0xF6, 0xE7, 0xE5, 0xF6, 0xE5, 0xE2, 0xF4, 0xE4, 0xE0, 0xEF, 0xDB, 0xD5, 0xF0, 
   0xD7, 0xD1, 0xEB, 0xD1, 0xCD, 0xE1, 0xC8, 0xC6, 0xDE, 0xCA, 0xC8, 0xB8, 0xAB, 0xAA, 0x81, 0x79, 
   0x78, 0x51, 0x4A, 0x52, 0x4E, 0x51, 0x56, 0xBE, 0xCB, 0xCC, 0xE6, 0xE8, 0xE9, 0x8B, 0x85, 0x86, 
   0x27, 0x24, 0x24, 0x1D, 0x20, 0x21, 0x35, 0x3A, 0x3B, 0x3D, 0x41, 0x42, 0x3D, 0x41, 0x42, 0x3D, 
   0x42, 0x43, 0x3F, 0x43, 0x44, 0x39, 0x3D, 0x3E, 0x3E, 0x49, 0x4A, 0x3E, 0x4C, 0x4E, 0x40, 0x4D, 
   0x4F, 0x3D, 0x4A, 0x4C, 0x35, 0x41, 0x43, 0x3F, 0x4B, 0x4D, 0x3F, 0x4B, 0x4C, 0x3B, 0x47, 0x48, 
   0x38, 0x43, 0x47, 0x32, 0x3E, 0x47, 0x42, 0x52, 0x5D, 0x6C, 0x84, 0x93, 0x73, 0x92, 0xA1, 0x6B, 
   0x8D, 0x9C, 0x71, 0x90, 0x9C, 0x52, 0x69, 0x70, 0x38, 0x46, 0x4B, 0x4C, 0x55, 0x59, 0x41, 0x49, 
   0x50, 0x46, 0x4D, 0x54, 0x45, 0x4E, 0x51, 0x43, 0x4E, 0x51, 0x41, 0x4D, 0x52, 0x36, 0x43, 0x4B, 
   0x46, 0x56, 0x62, 0x69, 0x79, 0x86, 0x61, 0x75, 0x80, 0x60, 0x78, 0x81, 0x60, 0x78, 0x84, 0x52, 
   0x6D, 0x7B, 0x5D, 0x7B, 0x8B, 0x55, 0x75, 0x86, 0x68, 0x89, 0x9D, 0x63, 0x88, 0x99, 0x54, 0x74, 
   0x83, 0x51, 0x67, 0x72, 0x26, 0x32, 0x3A, 0x31, 0x35, 0x3A, 0x45, 0x43, 0x45, 0x72, 0x6F, 0x70, 
   0x6B, 0x67, 0x67, 0xB3, 0xA7, 0xA7, 0xF3, 0xE1, 0xE1, 0xF5, 0xE1, 0xE0, 0xF6, 0xE3, 0xE1, 0xF5, 
   0xE3, 0xE2, 0xF3, 0xEA, 0xE7, 0xF6, 0xEE, 0xEB, 0xF3, 0xEA, 0xE7, 0xF3, 0xEA, 0xE7, 0xF0, 0xE8, 
   0xE5, 0xF3, 0xEB, 0xE8, 0xF8, 0xED, 0xEC, 0x87, 0x7D, 0x7E, 0x5A, 0x5E, 0x61, 0x3E, 0x50, 0x59, 
   0x45, 0x5C, 0x6B, 0x5E, 0x73, 0x89, 0x66, 0x77, 0x91, 0xA3, 0xAA, 0xBF, 0xD0, 0xCF, 0xE1, 0xA0, 
   0x99, 0xA4, 0x4C, 0x42, 0x49, 0x8C, 0x86, 0x8B, 0xE1, 0xE0, 0xE4, 0x92, 0x9B, 0xA4, 0x49, 0x5B, 
   0x67, 0x5E, 0x72, 0x7E, 0x5C, 0x73, 0x7D, 0x68, 0x7E, 0x88, 0x58, 0x69, 0x75, 0x64, 0x71, 0x7D, 
   0x64, 0x71, 0x7C, 0x6E, 0x7E, 0x8B, 0x58, 0x6B, 0x7A, 0x61, 0x74, 0x81, 0x64, 0x72, 0x7D, 0x54, 
   0x60, 0x64, 0x68, 0x6D, 0x6C, 0x5F, 0x5D, 0x59, 0x56, 0x50, 0x4C, 0x57, 0x4A, 0x45, 0x60, 0x4C, 
   0x45, 0x68, 0x4B, 0x44, 0x69, 0x48, 0x3F, 0x69, 0x4D, 0x42, 0x69, 0x4C, 0x42, 0x67, 0x4C, 0x3F, 
   0x67, 0x4C, 0x3E, 0x67, 0x4D, 0x3D, 0x67, 0x4D, 0x3D, 0x67, 0x4D, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 
   0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x66, 0x4B, 0x3D, 0x65, 0x4B, 0x3D, 0xE4, 0xC5, 0xBD, 0xE5, 0xC5, 0xBD, 0xE0, 0xC0, 0xB8, 0xDD, 
   0xBE, 0xB6, 0xDE, 0xBF, 0xB7, 0xDF, 0xBF, 0xB7, 0xDF, 0xBF, 0xB8, 0xDC, 0xBB, 0xB9, 0xDE, 0xBD, 
   0xBA, 0xE0, 0xBF, 0xBC, 0xE2, 0xC1, 0xBE, 0xE0, 0xBF, 0xBC, 0xE1, 0xC0, 0xBD, 0xE3, 0xC2, 0xBF, 
   0xE1, 0xC0, 0xBD, 0xE3, 0xC2, 0xBF, 0xE2, 0xC1, 0xBE, 0xE4, 0xC3, 0xC0, 0xE3, 0xC2, 0xBF, 0xE3, 
   0xC2, 0xBF, 0xDF, 0xBE, 0xBB, 0xDD, 0xBC, 0xB9, 0xDD, 0xBC, 0xB9, 0xDA, 0xB9, 0xB6, 0xDC, 0xBB, 
   0xB8, 0xE0, 0xBF, 0xBC, 0xDE, 0xBD, 0xBA, 0xDE, 0xBD, 0xBA, 0xDF, 0xBE, 0xBB, 0xDE, 0xBD, 0xBA, 
   0xDC, 0xBB, 0xB8, 0xDA, 0xB9, 0xB6, 0xD8, 0xB7, 0xB4, 0xDB, 0xBA, 0xB7, 0xDA, 0xB9, 0xB6, 0xD9, 
   0xB8, 0xB5, 0xDA, 0xB9, 0xB6, 0xD9, 0xB8, 0xB5, 0xD9, 0xB8, 0xB5, 0xD6, 0xB5, 0xB2, 0xD6, 0xB5, 
   0xB2, 0xD5, 0xB4, 0xB1, 0xD3, 0xB2, 0xAF, 0xD4, 0xB3, 0xB0, 0xD6, 0xB5, 0xB2, 0xD5, 0xB4, 0xB1, 
   0xD7, 0xB7, 0xAF, 0xD5, 0xB7, 0xAE, 0xD3, 0xB4, 0xAB, 0xD7, 0xB7, 0xAF, 0xDC, 0xBD, 0xB5, 0xD8, 
   0xB8, 0xB0, 0xCE, 0xAE, 0xA6, 0xDA, 0xBA, 0xB2, 0xD5, 0xB5, 0xAD, 0xD8, 0xB9, 0xB1, 0xDD, 0xBE, 
   0xB6, 0xDA, 0xBA, 0xB2, 0xD5, 0xB6, 0xAE, 0xD1, 0xB2, 0xAE, 0xD1, 0xB3, 0xB0, 0xD1, 0xB5, 0xB1, 
   0xE4, 0xCA, 0xC6, 0xF2, 0xD7, 0xD3, 0xE8, 0xCF, 0xCB, 0xF1, 0xD8, 0xD4, 0xF1, 0xD8, 0xD4, 0xE2, 
   0xC6, 0xC2, 0xD7, 0xBB, 0xB7, 0xD6, 0xB8, 0xB5, 0xD5, 0xB6, 0xB3, 0xCA, 0xAB, 0xA8, 0xC8, 0xA9, 
   0xA6, 0xC1, 0xA2, 0x9F, 0xB9, 0x9A, 0x97, 0xC2, 0xA3, 0xA0, 0xC1, 0xA2, 0x9F, 0xB5, 0x95, 0x92, 
   0xBB, 0x9D, 0x9A, 0xB2, 0x96, 0x92, 0xBB, 0x9F, 0x9A, 0xB2, 0x94, 0x91, 0xB2, 0x92, 0x90, 0xC8, 
   0xA8, 0xA5, 0x9F, 0x80, 0x7C, 0xA0, 0x82, 0x7C, 0x83, 0x69, 0x62, 0x89, 0x72, 0x6A, 0xA5, 0x8D, 
   0x85, 0xBD, 0xA0, 0x99, 0xC7, 0xA5, 0x9E, 0xCF, 0xAC, 0xA8, 0xD2, 0xB0, 0xAD, 0xD3, 0xB2, 0xAF, 
   0xD3, 0xB3, 0xB0, 0xCC, 0xAD, 0xAA, 0xB1, 0x94, 0x90, 0xE3, 0xC6, 0xC1, 0xF3, 0xD2, 0xCE, 0xE5, 
   0xC5, 0xC3, 0xA6, 0x8B, 0x88, 0x62, 0x4B, 0x49, 0x98, 0x87, 0x86, 0xAE, 0x9F, 0x9E, 0xA8, 0x9C, 
   0x9D, 0x6F, 0x6A, 0x6D, 0x4C, 0x4E, 0x54, 0x53, 0x59, 0x61, 0x59, 0x5A, 0x62, 0x94, 0x8E, 0x96, 
   0xE8, 0xDD, 0xE3, 0xF1, 0xE2, 0xE5, 0xEE, 0xDB, 0xDB, 0xED, 0xD9, 0xD4, 0xE7, 0xD8, 0xD3, 0xE4, 
   0xE1, 0xE2, 0x6F, 0x78, 0x81, 0x4B, 0x59, 0x66, 0x6C, 0x7B, 0x87, 0x4F, 0x59, 0x68, 0x82, 0x89, 
   0x98, 0xCA, 0xC9, 0xD4, 0xF6, 0xF0, 0xF6, 0xF0, 0xE7, 0xE8, 0xF1, 0xE1, 0xDE, 0xF4, 0xE4, 0xE1, 
   0xF6, 0xE5, 0xE3, 0xF3, 0xE3, 0xE0, 0xF3, 0xE2, 0xDF, 0xF2, 0xE1, 0xDE, 0xEC, 0xDC, 0xD7, 0xE5, 
   0xD4, 0xCE, 0xE1, 0xCE, 0xCA, 0xE1, 0xCF, 0xCE, 0xC6, 0xB8, 0xB8, 0x88, 0x81, 0x83, 0x51, 0x4F, 
   0x52, 0x4C, 0x48, 0x53, 0x9E, 0xA4, 0xAB, 0x96, 0xA3, 0xA4, 0x42, 0x4A, 0x48, 0x2F, 0x2C, 0x2B, 
   0x29, 0x2B, 0x29, 0x27, 0x2D, 0x2D, 0x3A, 0x3D, 0x3E, 0x39, 0x3D, 0x3E, 0x37, 0x3C, 0x3D, 0x35, 
   0x3C, 0x3C, 0x33, 0x3C, 0x3C, 0x3B, 0x43, 0x43, 0x44, 0x51, 0x53, 0x3E, 0x4C, 0x4E, 0x3A, 0x49, 
   0x4B, 0x39, 0x47, 0x49, 0x39, 0x47, 0x49, 0x3D, 0x4C, 0x4E, 0x3A, 0x47, 0x48, 0x36, 0x3F, 0x41, 
   0x3E, 0x48, 0x4F, 0x3D, 0x4B, 0x57, 0x63, 0x75, 0x85, 0x77, 0x92, 0xA3, 0x6F, 0x90, 0xA0, 0x64, 
   0x83, 0x90, 0x71, 0x8B, 0x96, 0x38, 0x4B, 0x51, 0x42, 0x50, 0x52, 0x42, 0x4C, 0x50, 0x41, 0x4A, 
   0x51, 0x42, 0x4B, 0x52, 0x47, 0x4F, 0x52, 0x42, 0x4B, 0x50, 0x38, 0x43, 0x4A, 0x3B, 0x48, 0x51, 
   0x40, 0x50, 0x5C, 0x5F, 0x6F, 0x7C, 0x6A, 0x7F, 0x8A, 0x6C, 0x84, 0x8F, 0x63, 0x7C, 0x88, 0x50, 
   0x6A, 0x78, 0x57, 0x76, 0x85, 0x5E, 0x7F, 0x8F, 0x70, 0x91, 0xA2, 0x62, 0x84, 0x93, 0x67, 0x82, 
   0x8F, 0x39, 0x47, 0x51, 0x2C, 0x2E, 0x35, 0x47, 0x42, 0x45, 0x81, 0x76, 0x77, 0x8F, 0x85, 0x84, 
   0xBA, 0xB0, 0xAF, 0xEE, 0xE2, 0xE1, 0xF8, 0xE4, 0xE3, 0xF7, 0xE3, 0xE2, 0xF9, 0xE6, 0xE5, 0xF5, 
   0xE5, 0xE4, 0xF5, 0xEA, 0xE8, 0xF8, 0xED, 0xEA, 0xF3, 0xE9, 0xE6, 0xF1, 0xE7, 0xE4, 0xF3, 0xE8, 
   0xE6, 0xF4, 0xEA, 0xE7, 0xF1, 0xE6, 0xE5, 0x78, 0x70, 0x72, 0x53, 0x59, 0x5D, 0x30, 0x43, 0x4C, 
   0x47, 0x5E, 0x6C, 0x6B, 0x7D, 0x91, 0x64, 0x6E, 0x87, 0x81, 0x83, 0x96, 0x5B, 0x57, 0x65, 0x50, 
   0x46, 0x50, 0xA3, 0x98, 0x9C, 0xD9, 0xD5, 0xD7, 0xEE, 0xF0, 0xF2, 0x7D, 0x88, 0x8F, 0x5F, 0x72, 
   0x7C, 0x5C, 0x70, 0x79, 0x57, 0x6E, 0x77, 0x47, 0x5A, 0x64, 0x60, 0x6E, 0x79, 0x64, 0x6E, 0x78, 
   0x83, 0x8D, 0x94, 0x56, 0x63, 0x6D, 0x5A, 0x69, 0x77, 0x63, 0x72, 0x7F, 0x58, 0x62, 0x68, 0x65, 
   0x6A, 0x69, 0x63, 0x5E, 0x59, 0x57, 0x4C, 0x44, 0x56, 0x48, 0x40, 0x5D, 0x4A, 0x41, 0x65, 0x4D, 
   0x42, 0x67, 0x4B, 0x3F, 0x69, 0x4A, 0x3E, 0x6A, 0x4E, 0x41, 0x69, 0x4E, 0x41, 0x68, 0x4D, 0x3F, 
   0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 
   0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x66, 0x4B, 0x3D, 0x65, 0x4B, 0x3D, 0xE2, 0xC3, 0xBA, 0xE3, 0xC4, 0xBB, 0xE1, 0xC2, 0xB9, 0xE1, 
   0xC2, 0xB9, 0xE0, 0xC1, 0xB8, 0xDF, 0xC0, 0xB7, 0xE0, 0xC1, 0xB9, 0xE1, 0xC0, 0xBD, 0xE1, 0xBF, 
   0xBD, 0xE0, 0xBF, 0xBC, 0xE0, 0xBF, 0xBC, 0xDF, 0xBE, 0xBB, 0xE1, 0xC0, 0xBD, 0xE2, 0xC1, 0xBE, 
   0xE0, 0xBF, 0xBC, 0xDF, 0xBE, 0xBB, 0xDF, 0xBE, 0xBB, 0xE5, 0xC4, 0xC1, 0xE3, 0xC2, 0xBF, 0xE3, 
   0xC2, 0xBF, 0xDD, 0xBC, 0xB9, 0xDC, 0xBB, 0xB8, 0xDE, 0xBD, 0xBA, 0xDC, 0xBB, 0xB8, 0xDC, 0xBB, 
   0xB8, 0xDF, 0xBE, 0xBB, 0xE0, 0xBF, 0xBC, 0xE1, 0xC0, 0xBD, 0xE2, 0xC1, 0xBE, 0xE2, 0xC1, 0xBE, 
   0xE3, 0xC2, 0xBF, 0xE1, 0xC0, 0xBD, 0xDE, 0xBD, 0xBA, 0xDA, 0xB9, 0xB6, 0xD9, 0xB8, 0xB5, 0xD8, 
   0xB7, 0xB4, 0xDB, 0xBA, 0xB7, 0xDB, 0xBA, 0xB7, 0xDB, 0xBA, 0xB7, 0xD8, 0xB7, 0xB4, 0xD7, 0xB6, 
   0xB3, 0xD7, 0xB6, 0xB3, 0xD8, 0xB7, 0xB4, 0xD7, 0xB6, 0xB3, 0xD8, 0xB7, 0xB5, 0xDA, 0xBA, 0xB6, 
   0xDC, 0xBD, 0xB4, 0xD9, 0xBA, 0xB0, 0xD3, 0xB4, 0xAB, 0xD3, 0xB4, 0xAB, 0xD0, 0xB1, 0xA8, 0xD4, 
   0xB5, 0xAC, 0xD6, 0xB7, 0xAE, 0xD2, 0xB3, 0xAA, 0xCF, 0xB0, 0xA7, 0xD0, 0xB1, 0xA8, 0xC9, 0xAB, 
   0xA1, 0xE2, 0xC3, 0xB8, 0xD5, 0xB6, 0xAE, 0xCC, 0xAD, 0xA9, 0xCE, 0xB0, 0xAC, 0xD1, 0xB4, 0xB0, 
   0xB5, 0x9A, 0x96, 0xD9, 0xBE, 0xBA, 0xE9, 0xD0, 0xCC, 0xDD, 0xC4, 0xC0, 0xF6, 0xDE, 0xDA, 0xED, 
   0xD3, 0xCF, 0xD1, 0xB5, 0xB1, 0xCE, 0xB0, 0xAC, 0xCF, 0xB0, 0xAD, 0xC9, 0xAA, 0xA7, 0xC0, 0xA1, 
   0x9E, 0xBE, 0x9F, 0x9C, 0xBC, 0x9D, 0x9A, 0xBE, 0x9F, 0x9C, 0xC8, 0xA9, 0xA6, 0x92, 0x73, 0x71, 
   0xA2, 0x85, 0x82, 0xA6, 0x8B, 0x87, 0x92, 0x76, 0x72, 0x91, 0x73, 0x70, 0xB2, 0x92, 0x8F, 0xB6, 
   0x94, 0x91, 0x81, 0x5F, 0x5C, 0xA3, 0x85, 0x7F, 0x99, 0x7E, 0x77, 0x92, 0x78, 0x71, 0xB4, 0x9A, 
   0x93, 0xB3, 0x96, 0x8F, 0xC7, 0xA4, 0x9E, 0xCF, 0xAB, 0xA6, 0xD5, 0xB1, 0xAF, 0xD0, 0xAE, 0xAB, 
   0xD3, 0xB3, 0xB0, 0xDD, 0xBE, 0xBB, 0xC8, 0xAA, 0xA6, 0xD0, 0xB2, 0xAE, 0xE4, 0xC1, 0xBE, 0xE4, 
   0xC4, 0xC2, 0xDD, 0xC2, 0xC1, 0xB7, 0xA1, 0xA1, 0x89, 0x7B, 0x7A, 0x6E, 0x63, 0x63, 0x5C, 0x56, 
   0x56, 0x54, 0x54, 0x57, 0x56, 0x5C, 0x62, 0x3C, 0x42, 0x49, 0x94, 0x92, 0x9A, 0xE8, 0xDC, 0xE1, 
   0xEB, 0xD7, 0xDB, 0xE8, 0xD9, 0xD8, 0xE2, 0xD2, 0xCD, 0xE9, 0xDA, 0xD2, 0xF4, 0xEA, 0xE4, 0xCA, 
   0xCC, 0xCE, 0x3C, 0x48, 0x54, 0x5A, 0x69, 0x77, 0x7D, 0x88, 0x93, 0x7E, 0x84, 0x91, 0xBA, 0xBA, 
   0xC7, 0xF0, 0xE8, 0xF0, 0xEF, 0xE2, 0xE4, 0xF0, 0xE2, 0xDF, 0xF8, 0xE7, 0xE2, 0xF5, 0xE3, 0xDE, 
   0xF1, 0xDF, 0xDB, 0xED, 0xDD, 0xD9, 0xEA, 0xD9, 0xD6, 0xEE, 0xDC, 0xDA, 0xE8, 0xDD, 0xD9, 0xE6, 
   0xE1, 0xDB, 0xCF, 0xC5, 0xC3, 0xC1, 0xB7, 0xB6, 0xA6, 0x9E, 0xA2, 0x53, 0x52, 0x57, 0x59, 0x5B, 
   0x62, 0x73, 0x73, 0x80, 0x80, 0x89, 0x91, 0x27, 0x37, 0x36, 0x20, 0x28, 0x24, 0x31, 0x30, 0x2D, 
   0x28, 0x2D, 0x2A, 0x2C, 0x34, 0x34, 0x39, 0x3C, 0x3E, 0x33, 0x38, 0x39, 0x33, 0x3A, 0x3A, 0x2B, 
   0x36, 0x36, 0x37, 0x43, 0x43, 0x49, 0x55, 0x55, 0x42, 0x50, 0x52, 0x41, 0x50, 0x52, 0x3A, 0x49, 
   0x4B, 0x33, 0x42, 0x44, 0x38, 0x47, 0x49, 0x39, 0x48, 0x4A, 0x32, 0x3F, 0x40, 0x3B, 0x43, 0x44, 
   0x3C, 0x46, 0x4E, 0x36, 0x48, 0x57, 0x72, 0x88, 0x9B, 0x69, 0x87, 0x99, 0x5C, 0x80, 0x8F, 0x76, 
   0x92, 0x9E, 0x52, 0x67, 0x70, 0x36, 0x47, 0x4D, 0x42, 0x4E, 0x51, 0x3B, 0x47, 0x4A, 0x3F, 0x4C, 
   0x53, 0x44, 0x50, 0x57, 0x51, 0x5A, 0x5E, 0x45, 0x4E, 0x54, 0x36, 0x41, 0x49, 0x3B, 0x48, 0x52, 
   0x39, 0x49, 0x56, 0x71, 0x81, 0x8F, 0x65, 0x79, 0x86, 0x65, 0x7E, 0x8A, 0x60, 0x7A, 0x86, 0x47, 
   0x63, 0x71, 0x53, 0x73, 0x81, 0x60, 0x82, 0x91, 0x67, 0x8A, 0x99, 0x75, 0x94, 0xA1, 0x62, 0x76, 
   0x83, 0x40, 0x46, 0x50, 0x39, 0x31, 0x37, 0x70, 0x60, 0x62, 0x89, 0x75, 0x74, 0xA4, 0x94, 0x91, 
   0xE8, 0xDB, 0xD9, 0xF4, 0xE3, 0xE1, 0xF6, 0xE1, 0xE0, 0xF5, 0xE0, 0xDF, 0xF5, 0xE2, 0xE1, 0xF2, 
   0xE3, 0xE1, 0xF2, 0xE4, 0xE2, 0xF8, 0xEA, 0xE8, 0xFA, 0xEC, 0xEA, 0xF5, 0xE7, 0xE5, 0xF2, 0xE4, 
   0xE2, 0xF4, 0xE7, 0xE4, 0xE9, 0xDB, 0xDC, 0x5E, 0x58, 0x5B, 0x3F, 0x46, 0x4B, 0x34, 0x49, 0x50, 
   0x71, 0x86, 0x93, 0x78, 0x84, 0x96, 0x7E, 0x82, 0x95, 0x5F, 0x5D, 0x69, 0x8A, 0x84, 0x8B, 0xBF, 
   0xB4, 0xB9, 0xFD, 0xF3, 0xF4, 0xFD, 0xFA, 0xFB, 0xC0, 0xC5, 0xC8, 0x59, 0x66, 0x6B, 0x65, 0x79, 
   0x7E, 0x65, 0x7B, 0x80, 0x50, 0x66, 0x6B, 0x40, 0x53, 0x58, 0x50, 0x5E, 0x65, 0x64, 0x6E, 0x74, 
   0x8E, 0x95, 0x97, 0x6A, 0x72, 0x7A, 0x4A, 0x55, 0x61, 0x5C, 0x66, 0x70, 0x4A, 0x50, 0x53, 0x75, 
   0x73, 0x6C, 0x61, 0x56, 0x4B, 0x5E, 0x4B, 0x3E, 0x62, 0x4E, 0x40, 0x64, 0x4E, 0x40, 0x66, 0x4E, 
   0x3F, 0x66, 0x4D, 0x3D, 0x67, 0x4B, 0x3C, 0x68, 0x4E, 0x3F, 0x68, 0x4D, 0x3E, 0x66, 0x4B, 0x3D, 
   0x67, 0x4C, 0x3D, 0x67, 0x4C, 0x3E, 0x67, 0x4B, 0x3F, 0x67, 0x4B, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 
   0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x66, 0x4B, 0x3D, 0x65, 0x4B, 0x3D, 0xDC, 0xBD, 0xB4, 0xDD, 0xBE, 0xB5, 0xDE, 0xBF, 0xB6, 0xE0, 
   0xC1, 0xB8, 0xDF, 0xC0, 0xB7, 0xDF, 0xC0, 0xB7, 0xE0, 0xC1, 0xBA, 0xE1, 0xC0, 0xBD, 0xE1, 0xC0, 
   0xBD, 0xE0, 0xBF, 0xBC, 0xDE, 0xBD, 0xBA, 0xDE, 0xBD, 0xBA, 0xE1, 0xC0, 0xBD, 0xE1, 0xC0, 0xBD, 
   0xE1, 0xC0, 0xBD, 0xE1, 0xC0, 0xBD, 0xDF, 0xBE, 0xBB, 0xE2, 0xC1, 0xBE, 0xE0, 0xBF, 0xBC, 0xE1, 
   0xC0, 0xBD, 0xDE, 0xBD, 0xBA, 0xE0, 0xBF, 0xBC, 0xE1, 0xC0, 0xBD, 0xDB, 0xBA, 0xB7, 0xDC, 0xBB, 
   0xB8, 0xDF, 0xBE, 0xBB, 0xDF, 0xBE, 0xBB, 0xDF, 0xBE, 0xBB, 0xDD, 0xBC, 0xB9, 0xDD, 0xBC, 0xB9, 
   0xE0, 0xBF, 0xBC, 0xE4, 0xC3, 0xC0, 0xE4, 0xC3, 0xC0, 0xE0, 0xBF, 0xBC, 0xDF, 0xBE, 0xBB, 0xDD, 
   0xBC, 0xB9, 0xDB, 0xBA, 0xB7, 0xDA, 0xB9, 0xB6, 0xDA, 0xB9, 0xB6, 0xD9, 0xB8, 0xB5, 0xD9, 0xB8, 
   0xB5, 0xD6, 0xB4, 0xB1, 0xD7, 0xB6, 0xB3, 0xD9, 0xB8, 0xB5, 0xD7, 0xB6, 0xB3, 0xD8, 0xB7, 0xB3, 
   0xD8, 0xB9, 0xB0, 0xD9, 0xBA, 0xB1, 0xD8, 0xB9, 0xB0, 0xD8, 0xB9, 0xB0, 0xD8, 0xB9, 0xB0, 0xD4, 
   0xB5, 0xAC, 0xD2, 0xB3, 0xAA, 0xD0, 0xB1, 0xA8, 0xD1, 0xB2, 0xA9, 0xCE, 0xAF, 0xA6, 0xC8, 0xA9, 
   0xA0, 0xBE, 0x9F, 0x96, 0xD5, 0xB6, 0xAE, 0xD3, 0xB4, 0xB1, 0xCC, 0xAE, 0xAA, 0xC6, 0xAA, 0xA6, 
   0xBE, 0xA3, 0x9F, 0xC3, 0xA8, 0xA4, 0xF8, 0xDF, 0xDB, 0xDE, 0xC6, 0xC1, 0xEC, 0xD4, 0xD0, 0xEA, 
   0xD0, 0xCB, 0xD3, 0xB7, 0xB3, 0xD1, 0xB3, 0xAF, 0xCA, 0xAB, 0xA8, 0xC0, 0xA1, 0x9E, 0xC1, 0xA2, 
   0x9F, 0xB9, 0x9A, 0x97, 0xAD, 0x8E, 0x8B, 0x9E, 0x7F, 0x7C, 0xA5, 0x86, 0x83, 0x91, 0x72, 0x6F, 
   0x96, 0x7A, 0x76, 0xA3, 0x89, 0x85, 0x89, 0x6E, 0x6A, 0xAD, 0x90, 0x8C, 0xC5, 0xA4, 0xA1, 0xB7, 
   0x94, 0x91, 0xBA, 0x96, 0x93, 0xC4, 0xA5, 0x9E, 0xB3, 0x98, 0x91, 0x87, 0x6D, 0x66, 0x97, 0x7D, 
   0x76, 0x99, 0x7C, 0x75, 0xB9, 0x96, 0x90, 0xCC, 0xA6, 0xA2, 0xD5, 0xB0, 0xAE, 0xD0, 0xAD, 0xAA, 
   0xCC, 0xAA, 0xA7, 0xE3, 0xC3, 0xC0, 0xDC, 0xBE, 0xBB, 0xD2, 0xB2, 0xB0, 0xD6, 0xB1, 0xB0, 0xD4, 
   0xB3, 0xB3, 0xD0, 0xB4, 0xB4, 0xC3, 0xAE, 0xAE, 0xAE, 0xA1, 0xA2, 0x98, 0x91, 0x91, 0x5F, 0x5E, 
   0x5F, 0x4A, 0x4F, 0x52, 0x39, 0x41, 0x48, 0x39, 0x3F, 0x46, 0xDC, 0xD7, 0xDE, 0xED, 0xDC, 0xE0, 
   0xF1, 0xD8, 0xDA, 0xE9, 0xDC, 0xD7, 0xEE, 0xE2, 0xDA, 0xF3, 0xE8, 0xDE, 0xD3, 0xCD, 0xC6, 0x56, 
   0x5B, 0x5F, 0x35, 0x42, 0x51, 0x76, 0x84, 0x93, 0x80, 0x8A, 0x93, 0x99, 0x9C, 0xA7, 0xEC, 0xE6, 
   0xF1, 0xF2, 0xE4, 0xE9, 0xF3, 0xE1, 0xDF, 0xF6, 0xE3, 0xDC, 0xF5, 0xE2, 0xDC, 0xF0, 0xDD, 0xD7, 
   0xF0, 0xDE, 0xD8, 0xEF, 0xDE, 0xD9, 0xED, 0xDB, 0xD8, 0xF0, 0xDC, 0xDA, 0xE2, 0xDD, 0xD8, 0x9A, 
   0x9F, 0x9A, 0x5F, 0x5E, 0x5D, 0x62, 0x5F, 0x61, 0x69, 0x66, 0x6C, 0x4D, 0x50, 0x58, 0x54, 0x5A, 
   0x64, 0x43, 0x44, 0x52, 0x2F, 0x39, 0x42, 0x23, 0x34, 0x32, 0x2A, 0x34, 0x2E, 0x37, 0x37, 0x32, 
   0x37, 0x3C, 0x3A, 0x2C, 0x35, 0x35, 0x31, 0x37, 0x38, 0x28, 0x30, 0x30, 0x26, 0x31, 0x31, 0x2E, 
   0x3C, 0x3B, 0x3F, 0x4E, 0x4D, 0x45, 0x55, 0x54, 0x38, 0x46, 0x48, 0x40, 0x4F, 0x51, 0x3A, 0x49, 
   0x4B, 0x2D, 0x3C, 0x3E, 0x37, 0x46, 0x48, 0x3D, 0x4D, 0x4F, 0x34, 0x40, 0x42, 0x36, 0x3D, 0x3F, 
   0x29, 0x34, 0x3D, 0x55, 0x66, 0x79, 0x66, 0x7E, 0x93, 0x4F, 0x6F, 0x81, 0x65, 0x8A, 0x99, 0x5F, 
   0x77, 0x82, 0x38, 0x49, 0x50, 0x36, 0x44, 0x4A, 0x3A, 0x46, 0x49, 0x41, 0x4E, 0x51, 0x39, 0x4B, 
   0x51, 0x3B, 0x4A, 0x51, 0x46, 0x4F, 0x53, 0x3C, 0x44, 0x4A, 0x3A, 0x45, 0x4D, 0x39, 0x45, 0x4F, 
   0x52, 0x61, 0x6E, 0x5F, 0x6F, 0x7E, 0x40, 0x54, 0x62, 0x68, 0x82, 0x8E, 0x60, 0x7A, 0x87, 0x4D, 
   0x6A, 0x78, 0x4E, 0x70, 0x7E, 0x5A, 0x7D, 0x8B, 0x72, 0x96, 0xA4, 0x73, 0x90, 0x9C, 0x59, 0x6B, 
   0x75, 0x5F, 0x5E, 0x67, 0x5F, 0x51, 0x57, 0xA9, 0x92, 0x94, 0xCC, 0xB0, 0xAF, 0xE5, 0xD1, 0xCD, 
   0xE8, 0xD9, 0xD5, 0xF4, 0xE0, 0xDD, 0xF7, 0xE2, 0xE0, 0xF4, 0xDE, 0xDE, 0xF3, 0xE0, 0xE0, 0xF0, 
   0xE2, 0xE0, 0xF4, 0xE4, 0xE3, 0xF5, 0xE6, 0xE4, 0xF7, 0xE7, 0xE5, 0xF8, 0xE8, 0xE6, 0xF1, 0xE1, 
   0xDF, 0xF9, 0xE8, 0xE6, 0xC5, 0xB6, 0xB8, 0x4D, 0x47, 0x4D, 0x41, 0x4B, 0x4F, 0x47, 0x5C, 0x62, 
   0x6A, 0x7C, 0x86, 0x81, 0x88, 0x96, 0x9A, 0x97, 0xA6, 0xC9, 0xC3, 0xC9, 0xFF, 0xFA, 0xFC, 0xFA, 
   0xEE, 0xEE, 0xDC, 0xD2, 0xD2, 0xA0, 0x9F, 0x9E, 0x68, 0x71, 0x74, 0x5A, 0x6B, 0x6E, 0x5F, 0x76, 
   0x77, 0x5D, 0x76, 0x77, 0x62, 0x79, 0x7A, 0x4D, 0x60, 0x62, 0x33, 0x42, 0x45, 0x62, 0x6B, 0x6F, 
   0xA9, 0xAB, 0xAB, 0xB0, 0xB7, 0xBC, 0x4F, 0x58, 0x62, 0x5B, 0x63, 0x6B, 0x7A, 0x7C, 0x7C, 0x73, 
   0x6D, 0x61, 0x60, 0x4F, 0x3F, 0x65, 0x4C, 0x3B, 0x66, 0x4D, 0x3D, 0x64, 0x4D, 0x3C, 0x65, 0x4F, 
   0x3E, 0x64, 0x4E, 0x3C, 0x64, 0x4E, 0x3A, 0x66, 0x4C, 0x3C, 0x66, 0x4B, 0x3C, 0x64, 0x49, 0x3B, 
   0x66, 0x4B, 0x3D, 0x67, 0x4C, 0x3F, 0x67, 0x4B, 0x40, 0x67, 0x4B, 0x3F, 0x67, 0x4C, 0x3E, 0x67, 
   0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x66, 0x4B, 0x3D, 0x65, 0x4B, 0x3D, 0xDD, 0xBE, 0xB5, 0xDB, 0xBC, 0xB3, 0xDB, 0xBC, 0xB3, 0xDB, 
   0xBC, 0xB4, 0xDD, 0xBE, 0xB5, 0xDF, 0xC0, 0xB6, 0xE0, 0xC0, 0xB9, 0xDF, 0xBE, 0xBB, 0xE0, 0xBF, 
   0xBD, 0xE0, 0xBF, 0xBC, 0xDD, 0xBC, 0xB9, 0xDE, 0xBD, 0xBA, 0xE1, 0xC0, 0xBD, 0xE0, 0xBF, 0xBC, 
   0xE1, 0xC0, 0xBD, 0xE3, 0xC2, 0xBF, 0xE0, 0xBF, 0xBC, 0xDF, 0xBE, 0xBB, 0xDE, 0xBD, 0xBA, 0xDF, 
   0xBE, 0xBB, 0xDF, 0xBE, 0xBB, 0xE2, 0xC1, 0xBE, 0xDD, 0xBB, 0xB8, 0xD9, 0xB7, 0xB5, 0xE0, 0xBE, 
   0xBB, 0xE8, 0xC7, 0xC4, 0xE4, 0xC3, 0xC0, 0xE0, 0xBF, 0xBC, 0xE1, 0xC0, 0xBD, 0xDD, 0xBC, 0xB9, 
   0xDE, 0xBD, 0xBA, 0xE6, 0xC5, 0xC2, 0xE9, 0xC8, 0xC5, 0xE7, 0xC6, 0xC3, 0xE5, 0xC4, 0xC1, 0xE5, 
   0xC3, 0xC0, 0xE1, 0xC0, 0xBD, 0xDD, 0xBC, 0xB9, 0xDD, 0xBC, 0xB9, 0xDA, 0xB9, 0xB6, 0xD7, 0xB7, 
   0xB4, 0xD8, 0xB7, 0xB4, 0xD6, 0xB5, 0xB2, 0xD5, 0xB4, 0xB1, 0xD6, 0xB6, 0xB2, 0xD6, 0xB6, 0xB2, 
   0xD6, 0xB7, 0xAE, 0xD9, 0xB9, 0xB0, 0xDB, 0xBB, 0xB3, 0xD7, 0xB8, 0xB0, 0xD2, 0xB3, 0xAA, 0xCD, 
   0xAE, 0xA5, 0xCF, 0xAF, 0xA7, 0xD0, 0xB1, 0xA8, 0xCB, 0xAC, 0xA3, 0xCA, 0xAB, 0xA2, 0xBF, 0xA0, 
   0x97, 0xB2, 0x93, 0x8A, 0xB1, 0x92, 0x8A, 0xD8, 0xB8, 0xB5, 0xCF, 0xAF, 0xAC, 0xC0, 0xA1, 0x9E, 
   0xAE, 0x93, 0x8F, 0xC6, 0xAB, 0xA7, 0xE2, 0xC8, 0xC4, 0xE6, 0xCC, 0xC8, 0xEA, 0xD1, 0xCD, 0xF4, 
   0xD9, 0xD6, 0xCB, 0xAF, 0xAB, 0xCF, 0xB0, 0xAD, 0xD2, 0xB3, 0xB0, 0xBE, 0x9F, 0x9C, 0xAC, 0x8E, 
   0x8A, 0xB0, 0x91, 0x8E, 0xA5, 0x87, 0x83, 0xA8, 0x8A, 0x87, 0x90, 0x72, 0x6F, 0x82, 0x64, 0x61, 
   0x97, 0x7D, 0x79, 0xAD, 0x96, 0x91, 0xB0, 0x96, 0x92, 0xC5, 0xA8, 0xA5, 0xC0, 0xA1, 0x9E, 0xD0, 
   0xAF, 0xAB, 0xBE, 0x9C, 0x99, 0xAF, 0x8F, 0x89, 0x99, 0x7D, 0x76, 0x7D, 0x63, 0x5C, 0x97, 0x7B, 
   0x74, 0xA2, 0x85, 0x7E, 0xB6, 0x92, 0x8B, 0xCB, 0xA4, 0xA0, 0xCD, 0xA7, 0xA5, 0xCE, 0xA9, 0xA7, 
   0xD3, 0xAF, 0xAC, 0xD5, 0xB4, 0xB1, 0xE1, 0xC1, 0xBE, 0xD7, 0xB8, 0xB5, 0xD8, 0xB4, 0xB3, 0xD0, 
   0xB1, 0xAF, 0xCE, 0xB4, 0xB2, 0xC1, 0xAE, 0xAD, 0xB2, 0xA8, 0xA6, 0x98, 0x92, 0x92, 0x7D, 0x7C, 
   0x7F, 0x4B, 0x50, 0x54, 0x36, 0x3C, 0x42, 0xB0, 0xB4, 0xBB, 0xEE, 0xE8, 0xEB, 0xF1, 0xE1, 0xE2, 
   0xE4, 0xCE, 0xCD, 0xC9, 0xBF, 0xB8, 0xC8, 0xC0, 0xB9, 0x85, 0x7E, 0x75, 0x45, 0x43, 0x3F, 0x32, 
   0x3A, 0x3F, 0x5C, 0x6C, 0x7C, 0x87, 0x97, 0xA5, 0x5E, 0x66, 0x70, 0xC4, 0xC5, 0xCE, 0xEC, 0xE1, 
   0xE9, 0xEB, 0xD7, 0xDB, 0xF1, 0xDA, 0xD7, 0xF0, 0xD9, 0xD1, 0xEB, 0xD9, 0xD2, 0xEC, 0xDA, 0xD5, 
   0xE9, 0xD6, 0xD2, 0xE8, 0xD7, 0xD2, 0xF5, 0xE7, 0xE4, 0xE9, 0xDC, 0xD9, 0x66, 0x65, 0x61, 0x30, 
   0x3B, 0x38, 0x3F, 0x46, 0x45, 0x49, 0x4C, 0x4F, 0x3F, 0x41, 0x48, 0x54, 0x59, 0x63, 0x3C, 0x43, 
   0x4F, 0x32, 0x33, 0x42, 0x30, 0x39, 0x43, 0x2A, 0x39, 0x39, 0x24, 0x2D, 0x28, 0x36, 0x37, 0x33, 
   0x35, 0x3D, 0x3A, 0x30, 0x3A, 0x39, 0x35, 0x3B, 0x3B, 0x29, 0x31, 0x32, 0x33, 0x3E, 0x3F, 0x43, 
   0x51, 0x51, 0x3D, 0x4D, 0x4E, 0x3E, 0x4F, 0x4F, 0x3C, 0x4B, 0x4D, 0x44, 0x52, 0x55, 0x3A, 0x49, 
   0x4B, 0x36, 0x45, 0x47, 0x44, 0x52, 0x55, 0x3F, 0x4E, 0x50, 0x2E, 0x39, 0x3A, 0x2B, 0x32, 0x35, 
   0x2F, 0x3B, 0x44, 0x60, 0x73, 0x85, 0x48, 0x61, 0x76, 0x52, 0x71, 0x84, 0x6A, 0x8B, 0x9B, 0x45, 
   0x5B, 0x64, 0x33, 0x41, 0x47, 0x32, 0x3E, 0x42, 0x38, 0x44, 0x46, 0x42, 0x51, 0x53, 0x3D, 0x4F, 
   0x56, 0x35, 0x46, 0x4C, 0x32, 0x3B, 0x3F, 0x31, 0x3B, 0x40, 0x49, 0x54, 0x5C, 0x40, 0x4D, 0x59, 
   0x57, 0x66, 0x74, 0x52, 0x61, 0x72, 0x56, 0x6B, 0x79, 0x68, 0x83, 0x90, 0x50, 0x6C, 0x7B, 0x46, 
   0x63, 0x72, 0x4B, 0x6B, 0x78, 0x4C, 0x6F, 0x7B, 0x70, 0x93, 0x9F, 0x4F, 0x6B, 0x75, 0x66, 0x75, 
   0x7F, 0x98, 0x93, 0x9A, 0xB5, 0xA1, 0xA5, 0xD5, 0xB8, 0xB9, 0xF1, 0xD1, 0xCF, 0xEB, 0xD4, 0xCF, 
   0xED, 0xDA, 0xD6, 0xF9, 0xE4, 0xE1, 0xF4, 0xDD, 0xDC, 0xF4, 0xDD, 0xDD, 0xF1, 0xDF, 0xDE, 0xEE, 
   0xE1, 0xDF, 0xF3, 0xE1, 0xDF, 0xF5, 0xE2, 0xE1, 0xF4, 0xE1, 0xE0, 0xF6, 0xE4, 0xE3, 0xF3, 0xE1, 
   0xE0, 0xFA, 0xE7, 0xE6, 0xA0, 0x93, 0x96, 0x44, 0x40, 0x46, 0x5C, 0x68, 0x6C, 0x66, 0x79, 0x7E, 
   0x6E, 0x7E, 0x83, 0xA5, 0xA8, 0xB1, 0xCA, 0xC3, 0xCC, 0xF9, 0xF1, 0xF1, 0xC1, 0xB4, 0xB2, 0xB2, 
   0xA5, 0xA1, 0x6D, 0x63, 0x5F, 0x41, 0x3E, 0x3D, 0x46, 0x4C, 0x4E, 0x5D, 0x6A, 0x6C, 0x52, 0x65, 
   0x65, 0x62, 0x77, 0x77, 0x4B, 0x60, 0x5F, 0x35, 0x46, 0x46, 0x4B, 0x59, 0x5A, 0x6B, 0x72, 0x74, 
   0xA6, 0xA5, 0xA5, 0x7F, 0x81, 0x85, 0x58, 0x5C, 0x63, 0x68, 0x6B, 0x70, 0xA5, 0xA1, 0x9E, 0x68, 
   0x5D, 0x4F, 0x5D, 0x48, 0x36, 0x6A, 0x4D, 0x3C, 0x67, 0x4D, 0x3C, 0x68, 0x50, 0x3F, 0x64, 0x4E, 
   0x3D, 0x62, 0x4E, 0x3B, 0x61, 0x4E, 0x39, 0x68, 0x4D, 0x3E, 0x67, 0x4D, 0x3D, 0x66, 0x4C, 0x3C, 
   0x67, 0x4C, 0x3E, 0x67, 0x4B, 0x40, 0x67, 0x4B, 0x40, 0x67, 0x4C, 0x3F, 0x67, 0x4C, 0x3E, 0x67, 
   0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x66, 0x4B, 0x3D, 0x65, 0x4B, 0x3D, 0xDD, 0xBD, 0xB7, 0xDD, 0xBD, 0xB7, 0xDD, 0xBD, 0xB7, 0xDD, 
   0xBD, 0xB7, 0xDE, 0xBE, 0xB8, 0xDE, 0xBF, 0xB8, 0xE0, 0xC0, 0xBB, 0xE1, 0xC0, 0xBD, 0xE1, 0xC0, 
   0xBD, 0xDF, 0xBE, 0xBB, 0xDD, 0xBC, 0xB9, 0xE0, 0xBF, 0xBC, 0xDF, 0xBE, 0xBB, 0xE0, 0xBF, 0xBC, 
   0xE1, 0xC0, 0xBD, 0xE4, 0xC3, 0xC0, 0xE1, 0xC0, 0xBD, 0xDE, 0xBD, 0xBA, 0xDD, 0xBC, 0xB9, 0xDC, 
   0xBA, 0xB7, 0xD9, 0xB3, 0xB1, 0xDB, 0xB5, 0xB3, 0xE1, 0xBB, 0xB9, 0xE4, 0xBE, 0xBC, 0xE6, 0xC0, 
   0xBE, 0xE9, 0xC3, 0xC1, 0xE8, 0xC6, 0xC3, 0xDF, 0xBF, 0xBC, 0xE4, 0xC3, 0xC0, 0xE6, 0xC5, 0xC2, 
   0xE6, 0xC5, 0xC2, 0xE5, 0xC4, 0xC1, 0xE4, 0xC3, 0xC0, 0xE7, 0xC4, 0xC1, 0xE7, 0xC4, 0xC1, 0xEA, 
   0xC7, 0xC4, 0xEB, 0xC8, 0xC5, 0xEA, 0xC7, 0xC4, 0xE9, 0xC6, 0xC3, 0xE3, 0xC3, 0xBF, 0xD9, 0xBC, 
   0xB8, 0xD7, 0xBA, 0xB6, 0xD7, 0xBA, 0xB6, 0xD7, 0xBA, 0xB6, 0xD4, 0xB7, 0xB4, 0xD6, 0xB9, 0xB5, 
   0xD8, 0xB8, 0xB2, 0xD5, 0xB5, 0xAF, 0xD6, 0xB6, 0xB0, 0xD4, 0xB4, 0xAE, 0xD5, 0xB5, 0xAF, 0xCE, 
   0xAE, 0xA8, 0xC8, 0xA8, 0xA1, 0xCD, 0xAE, 0xA5, 0xD1, 0xB2, 0xA9, 0xBD, 0x9E, 0x95, 0xA8, 0x89, 
   0x80, 0xB4, 0x95, 0x8C, 0xBB, 0x9B, 0x92, 0xDF, 0xB6, 0xB4, 0xD2, 0xAA, 0xA8, 0xCE, 0xA8, 0xA6, 
   0xAC, 0x89, 0x86, 0xB6, 0x95, 0x93, 0xDF, 0xC0, 0xBC, 0xD9, 0xBC, 0xBA, 0xE3, 0xC7, 0xC6, 0xF2, 
   0xD5, 0xD4, 0xCD, 0xB0, 0xAC, 0xAD, 0x8F, 0x8B, 0xD3, 0xB4, 0xB0, 0xDF, 0xC1, 0xBC, 0xC8, 0xAB, 
   0xA7, 0xC4, 0xA9, 0xA5, 0xCE, 0xB4, 0xB0, 0xBA, 0xA3, 0x9E, 0xB5, 0xA1, 0x9C, 0x9D, 0x8A, 0x85, 
   0x73, 0x63, 0x5D, 0x9A, 0x8B, 0x84, 0xC1, 0xB1, 0xAA, 0xA1, 0x8E, 0x88, 0xA3, 0x8F, 0x88, 0xAD, 
   0x96, 0x90, 0xB3, 0x9A, 0x94, 0xAA, 0x8F, 0x8B, 0x96, 0x7E, 0x79, 0x8C, 0x75, 0x6D, 0xA8, 0x8E, 
   0x84, 0xAB, 0x8D, 0x82, 0xBE, 0x99, 0x8C, 0xC6, 0x9B, 0x93, 0xCB, 0x9F, 0x9D, 0xDC, 0xB1, 0xAE, 
   0xD9, 0xB0, 0xAD, 0xCC, 0xA6, 0xA2, 0xE4, 0xBF, 0xBC, 0xE5, 0xC5, 0xC0, 0xD8, 0xC4, 0xB8, 0xD4, 
   0xC2, 0xB8, 0xAC, 0x9C, 0x95, 0x7D, 0x72, 0x6D, 0x61, 0x5C, 0x5B, 0x67, 0x62, 0x63, 0x4D, 0x4A, 
   0x4E, 0x72, 0x6C, 0x71, 0xD6, 0xCB, 0xCE, 0xF2, 0xE5, 0xE7, 0xEB, 0xE3, 0xE0, 0xE5, 0xE4, 0xDE, 
   0x56, 0x5A, 0x52, 0x2B, 0x2B, 0x2A, 0x34, 0x33, 0x36, 0x37, 0x3D, 0x40, 0x38, 0x44, 0x4A, 0x53, 
   0x68, 0x71, 0x7A, 0x97, 0xA1, 0x65, 0x78, 0x89, 0x7B, 0x7F, 0x91, 0xDC, 0xD5, 0xDA, 0xEA, 0xD7, 
   0xD2, 0xF3, 0xD9, 0xD3, 0xF5, 0xD8, 0xD5, 0xF1, 0xD7, 0xD7, 0xE7, 0xD8, 0xD6, 0xE0, 0xD3, 0xD1, 
   0xE5, 0xDA, 0xD7, 0xE7, 0xE0, 0xDD, 0xA2, 0xA1, 0x9D, 0x4C, 0x4C, 0x48, 0x2C, 0x32, 0x32, 0x37, 
   0x43, 0x47, 0x4F, 0x5B, 0x5F, 0x47, 0x54, 0x57, 0x32, 0x3C, 0x40, 0x43, 0x48, 0x4D, 0x40, 0x42, 
   0x48, 0x42, 0x3F, 0x48, 0x2F, 0x2E, 0x37, 0x2F, 0x34, 0x39, 0x27, 0x30, 0x31, 0x2E, 0x37, 0x35, 
   0x2F, 0x37, 0x33, 0x36, 0x39, 0x37, 0x35, 0x34, 0x36, 0x55, 0x56, 0x58, 0x36, 0x3A, 0x3F, 0x42, 
   0x48, 0x50, 0x49, 0x50, 0x5B, 0x3E, 0x47, 0x53, 0x42, 0x4E, 0x56, 0x42, 0x4E, 0x54, 0x3A, 0x46, 
   0x4B, 0x43, 0x4F, 0x52, 0x42, 0x4C, 0x50, 0x32, 0x3D, 0x42, 0x32, 0x3B, 0x3C, 0x35, 0x3E, 0x3A, 
   0x42, 0x55, 0x56, 0x1D, 0x3E, 0x44, 0x3D, 0x5D, 0x6A, 0x69, 0x80, 0x90, 0x69, 0x77, 0x88, 0x40, 
   0x4D, 0x4F, 0x39, 0x47, 0x43, 0x34, 0x42, 0x3F, 0x3D, 0x4A, 0x4B, 0x3E, 0x4C, 0x50, 0x3C, 0x4B, 
   0x51, 0x37, 0x47, 0x4C, 0x32, 0x42, 0x44, 0x35, 0x43, 0x48, 0x4A, 0x59, 0x61, 0x58, 0x68, 0x74, 
   0x5F, 0x6F, 0x7F, 0x5E, 0x6D, 0x7F, 0x60, 0x75, 0x86, 0x5C, 0x78, 0x85, 0x51, 0x6B, 0x7B, 0x47, 
   0x5F, 0x71, 0x5B, 0x76, 0x83, 0x5D, 0x7D, 0x83, 0x66, 0x87, 0x8C, 0x58, 0x74, 0x7C, 0x92, 0x9B, 
   0xA1, 0xC5, 0xB7, 0xB8, 0xDE, 0xC0, 0xBC, 0xEE, 0xCC, 0xC7, 0xEC, 0xCC, 0xC7, 0xF0, 0xD7, 0xD2, 
   0xF9, 0xE7, 0xE4, 0xF6, 0xE3, 0xE0, 0xEE, 0xDB, 0xD8, 0xF0, 0xDD, 0xDA, 0xED, 0xDC, 0xD9, 0xEB, 
   0xDA, 0xD6, 0xF0, 0xDA, 0xD5, 0xF1, 0xDA, 0xD6, 0xF0, 0xDA, 0xD8, 0xED, 0xD9, 0xD8, 0xEE, 0xDF, 
   0xDD, 0xFC, 0xF3, 0xF1, 0x7A, 0x7B, 0x7C, 0x2D, 0x3A, 0x3E, 0x5E, 0x6C, 0x74, 0x6E, 0x79, 0x81, 
   0x7C, 0x80, 0x84, 0xC6, 0xC3, 0xC0, 0xC6, 0xBD, 0xB6, 0x96, 0x83, 0x7B, 0x52, 0x3F, 0x37, 0x5A, 
   0x47, 0x3F, 0x5C, 0x49, 0x41, 0x61, 0x4E, 0x46, 0x63, 0x4E, 0x46, 0x5D, 0x53, 0x4C, 0x63, 0x64, 
   0x5E, 0x5F, 0x5F, 0x59, 0x4B, 0x4B, 0x45, 0x4F, 0x4F, 0x49, 0x6F, 0x6F, 0x69, 0x6F, 0x6F, 0x6A, 
   0x63, 0x5E, 0x5E, 0x6F, 0x65, 0x65, 0x74, 0x67, 0x62, 0x61, 0x4F, 0x48, 0x5D, 0x44, 0x3A, 0x66, 
   0x49, 0x3D, 0x67, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x68, 0x4D, 0x3F, 0x68, 0x4D, 0x3F, 0x67, 0x4C, 
   0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x68, 0x4D, 0x3F, 0x67, 0x4C, 0x3E, 
   0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x68, 0x4D, 0x3F, 0x68, 0x4D, 0x3F, 0x68, 
   0x4D, 0x3F, 0x69, 0x4E, 0x40, 0x68, 0x4D, 0x3F, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x67, 0x4C, 0x3E, 0x67, 0x4D, 0x3F, 0xDC, 0xBC, 0xB6, 0xDC, 0xBC, 0xB6, 0xDC, 0xBC, 0xB7, 0xDD, 
   0xBD, 0xB7, 0xDC, 0xBC, 0xB6, 0xDC, 0xBC, 0xB6, 0xDF, 0xBF, 0xBA, 0xE0, 0xBF, 0xBC, 0xE0, 0xBE, 
   0xBC, 0xDF, 0xBE, 0xBC, 0xE0, 0xBF, 0xBC, 0xE1, 0xC0, 0xBD, 0xDF, 0xBE, 0xBB, 0xE2, 0xC1, 0xBE, 
   0xDF, 0xBE, 0xBB, 0xE0, 0xBF, 0xBC, 0xE2, 0xC1, 0xBE, 0xE2, 0xC1, 0xBE, 0xE0, 0xBF, 0xBC, 0xDF, 
   0xBD, 0xBA, 0xDC, 0xB9, 0xB6, 0xDC, 0xB8, 0xB5, 0xDF, 0xBB, 0xB8, 0xDF, 0xBB, 0xB9, 0xE1, 0xBE, 
   0xBB, 0xE2, 0xBE, 0xBB, 0xE1, 0xC0, 0xBD, 0xDE, 0xBD, 0xBA, 0xE0, 0xBF, 0xBC, 0xE0, 0xBF, 0xBC, 
   0xE1, 0xC0, 0xBD, 0xE2, 0xC1, 0xBE, 0xE1, 0xC0, 0xBD, 0xE0, 0xBD, 0xBA, 0xDF, 0xBC, 0xB9, 0xD9, 
   0xB6, 0xB3, 0xD3, 0xB0, 0xAD, 0xE7, 0xC4, 0xC1, 0xF0, 0xCD, 0xCA, 0xF1, 0xD1, 0xCD, 0xED, 0xCF, 
   0xCC, 0xE4, 0xC6, 0xC3, 0xDC, 0xBD, 0xBA, 0xD7, 0xB8, 0xB5, 0xD6, 0xB7, 0xB4, 0xD7, 0xB8, 0xB5, 
   0xD7, 0xB7, 0xB1, 0xD6, 0xB6, 0xB0, 0xD6, 0xB6, 0xB0, 0xD4, 0xB4, 0xAE, 0xD5, 0xB5, 0xAF, 0xD5, 
   0xB5, 0xAF, 0xD4, 0xB5, 0xAD, 0xD2, 0xB3, 0xA9, 0xD4, 0xB5, 0xAC, 0xB8, 0x99, 0x90, 0xAE, 0x8F, 
   0x86, 0xB2, 0x94, 0x8A, 0xBC, 0x9D, 0x95, 0xC9, 0xA8, 0xA6, 0xCC, 0xAC, 0xAA, 0xC3, 0xA6, 0xA2, 
   0xAD, 0x92, 0x8E, 0xC2, 0xA9, 0xA4, 0xC6, 0xAF, 0xAA, 0xC9, 0xB1, 0xAD, 0xC8, 0xAE, 0xAC, 0xE6, 
   0xCC, 0xCA, 0xE4, 0xC9, 0xC6, 0xEE, 0xD2, 0xCE, 0xDE, 0xC2, 0xBE, 0xCF, 0xB4, 0xAF, 0xC6, 0xA8, 
   0xA4, 0xA3, 0x88, 0x84, 0x8A, 0x73, 0x6E, 0xA8, 0x96, 0x91, 0xB6, 0xA9, 0xA3, 0xA4, 0x99, 0x92, 
   0x58, 0x4E, 0x48, 0x60, 0x55, 0x51, 0x78, 0x6D, 0x68, 0x78, 0x6A, 0x66, 0xA4, 0x93, 0x90, 0xA5, 
   0x93, 0x90, 0xA5, 0x92, 0x8E, 0xA5, 0x93, 0x8F, 0x9A, 0x88, 0x85, 0xA8, 0x97, 0x92, 0xAC, 0x98, 
   0x91, 0xB3, 0x9A, 0x91, 0xBE, 0xA1, 0x96, 0xC3, 0x9F, 0x99, 0xC7, 0xA0, 0x9E, 0xCB, 0xA6, 0xA3, 
   0xD5, 0xB3, 0xAF, 0xCD, 0xAC, 0xA9, 0xCC, 0xAC, 0xA9, 0xE7, 0xCA, 0xC5, 0xDD, 0xCA, 0xC0, 0xAC, 
   0x9D, 0x93, 0xA5, 0x98, 0x90, 0x8A, 0x81, 0x7C, 0x6C, 0x67, 0x66, 0x78, 0x77, 0x77, 0x66, 0x68, 
   0x69, 0xBE, 0xBC, 0xBF, 0xE2, 0xDB, 0xDD, 0xD5, 0xCB, 0xCC, 0xED, 0xE7, 0xE7, 0x90, 0x8F, 0x8D, 
   0x30, 0x35, 0x30, 0x41, 0x42, 0x43, 0x4C, 0x4D, 0x50, 0x4B, 0x51, 0x56, 0x4E, 0x5B, 0x63, 0x7D, 
   0x91, 0x9C, 0x79, 0x94, 0xA0, 0x77, 0x88, 0x9A, 0xA8, 0xAC, 0xBC, 0xE2, 0xDA, 0xDF, 0xEA, 0xD7, 
   0xD3, 0xF1, 0xD9, 0xD1, 0xEE, 0xD3, 0xCF, 0xEE, 0xD6, 0xD6, 0xE1, 0xD4, 0xD4, 0xE6, 0xDC, 0xDC, 
   0xDB, 0xD4, 0xD2, 0x7B, 0x77, 0x76, 0x29, 0x2A, 0x27, 0x2F, 0x32, 0x2E, 0x37, 0x3E, 0x3F, 0x53, 
   0x5C, 0x61, 0x3E, 0x48, 0x4C, 0x31, 0x3A, 0x3E, 0x3C, 0x43, 0x48, 0x41, 0x46, 0x4B, 0x3C, 0x3F, 
   0x44, 0x45, 0x44, 0x49, 0x3F, 0x3F, 0x44, 0x2B, 0x31, 0x34, 0x2A, 0x33, 0x33, 0x34, 0x3C, 0x3C, 
   0x2F, 0x35, 0x33, 0x30, 0x31, 0x31, 0x5E, 0x5E, 0x5F, 0x70, 0x72, 0x75, 0x2F, 0x33, 0x38, 0x3D, 
   0x45, 0x4C, 0x4E, 0x57, 0x61, 0x3F, 0x49, 0x55, 0x3A, 0x49, 0x51, 0x3D, 0x4B, 0x51, 0x40, 0x4C, 
   0x52, 0x46, 0x50, 0x55, 0x36, 0x3D, 0x41, 0x39, 0x40, 0x45, 0x3B, 0x40, 0x40, 0x45, 0x47, 0x44, 
   0x38, 0x47, 0x48, 0x3D, 0x5A, 0x63, 0x61, 0x7F, 0x8D, 0x67, 0x7E, 0x8D, 0x6F, 0x7E, 0x8E, 0x3F, 
   0x4A, 0x4D, 0x34, 0x3F, 0x3C, 0x3A, 0x47, 0x44, 0x3C, 0x49, 0x4A, 0x3F, 0x4B, 0x50, 0x33, 0x40, 
   0x48, 0x32, 0x40, 0x46, 0x39, 0x49, 0x4B, 0x2D, 0x3D, 0x41, 0x56, 0x66, 0x6E, 0x68, 0x78, 0x84, 
   0x66, 0x76, 0x87, 0x5C, 0x6B, 0x7D, 0x66, 0x7C, 0x8A, 0x58, 0x74, 0x81, 0x67, 0x80, 0x92, 0x55, 
   0x6E, 0x81, 0x56, 0x71, 0x80, 0x65, 0x85, 0x8F, 0x62, 0x83, 0x8B, 0x64, 0x78, 0x7F, 0xB5, 0xB7, 
   0xBC, 0xC7, 0xB5, 0xB4, 0xEE, 0xCD, 0xCA, 0xED, 0xCC, 0xC7, 0xED, 0xCE, 0xCA, 0xF0, 0xD9, 0xD5, 
   0xF6, 0xE6, 0xE3, 0xF6, 0xE4, 0xE1, 0xF1, 0xDE, 0xDB, 0xF1, 0xDD, 0xDA, 0xEF, 0xDA, 0xD8, 0xED, 
   0xD9, 0xD7, 0xEF, 0xD9, 0xD3, 0xEE, 0xD9, 0xD3, 0xF3, 0xDF, 0xDC, 0xCB, 0xBD, 0xBB, 0xB4, 0xAA, 
   0xAA, 0xE2, 0xDA, 0xDB, 0x7C, 0x7F, 0x81, 0x30, 0x3D, 0x40, 0x65, 0x70, 0x77, 0x64, 0x6B, 0x72, 
   0x55, 0x55, 0x57, 0x60, 0x59, 0x53, 0x5E, 0x50, 0x47, 0x5E, 0x48, 0x3E, 0x60, 0x49, 0x3F, 0x68, 
   0x52, 0x48, 0x62, 0x4C, 0x42, 0x63, 0x4C, 0x42, 0x65, 0x4E, 0x43, 0x5D, 0x4B, 0x43, 0x57, 0x4A, 
   0x44, 0x5A, 0x4D, 0x47, 0x60, 0x52, 0x4C, 0x5D, 0x50, 0x4A, 0x63, 0x56, 0x50, 0x68, 0x5B, 0x55, 
   0x5E, 0x53, 0x51, 0x59, 0x4E, 0x4A, 0x56, 0x47, 0x40, 0x5D, 0x49, 0x41, 0x63, 0x4B, 0x3F, 0x67, 
   0x4D, 0x3F, 0x68, 0x4D, 0x3E, 0x66, 0x4B, 0x3D, 0x67, 0x4C, 0x3E, 0x68, 0x4D, 0x3F, 0x67, 0x4C, 
   0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x68, 0x4D, 0x3F, 0x67, 0x4C, 0x3E, 
   0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x68, 0x4D, 0x3F, 0x68, 0x4D, 0x3F, 0x68, 
   0x4D, 0x3F, 0x69, 0x4E, 0x40, 0x68, 0x4D, 0x3F, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x67, 0x4C, 0x3E, 0x67, 0x4D, 0x3F, 0xDA, 0xBA, 0xB4, 0xDB, 0xBB, 0xB5, 0xDC, 0xBC, 0xB6, 0xDA, 
   0xBA, 0xB4, 0xE0, 0xC0, 0xBA, 0xE4, 0xC4, 0xBE, 0xE4, 0xC4, 0xBE, 0xE1, 0xC1, 0xBC, 0xDE, 0xBE, 
   0xB9, 0xDE, 0xBE, 0xB9, 0xE1, 0xC1, 0xBC, 0xE0, 0xC0, 0xBB, 0xDF, 0xBE, 0xB9, 0xDF, 0xBE, 0xBB, 
   0xDF, 0xBE, 0xBB, 0xE0, 0xBF, 0xBC, 0xDE, 0xBD, 0xBA, 0xDC, 0xBB, 0xB8, 0xD9, 0xB8, 0xB5, 0xDE, 
   0xBD, 0xBA, 0xDE, 0xBD, 0xBB, 0xE1, 0xC1, 0xBE, 0xDC, 0xBC, 0xB9, 0xD9, 0xB9, 0xB6, 0xDC, 0xBC, 
   0xB9, 0xDA, 0xBA, 0xB7, 0xDD, 0xBC, 0xB9, 0xDF, 0xBE, 0xBB, 0xDE, 0xBD, 0xBA, 0xDA, 0xB9, 0xB6, 
   0xDB, 0xBA, 0xB7, 0xDF, 0xBE, 0xBB, 0xDF, 0xBE, 0xBB, 0xE1, 0xBE, 0xBB, 0xE1, 0xBE, 0xBB, 0xDE, 
   0xBB, 0xB8, 0xD3, 0xB0, 0xAD, 0xD1, 0xAE, 0xAB, 0xE5, 0xC1, 0xBE, 0xEB, 0xCA, 0xC7, 0xEE, 0xCF, 
   0xCC, 0xF4, 0xD5, 0xD2, 0xEC, 0xCD, 0xCA, 0xE0, 0xC1, 0xBE, 0xDB, 0xBC, 0xB9, 0xD8, 0xB9, 0xB6, 
   0xD8, 0xB8, 0xB2, 0xD9, 0xB9, 0xB3, 0xD9, 0xB9, 0xB3, 0xD6, 0xB6, 0xB0, 0xD3, 0xB3, 0xAD, 0xD3, 
   0xB3, 0xAD, 0xD1, 0xB1, 0xAB, 0xCF, 0xB0, 0xA9, 0xCE, 0xAE, 0xA7, 0xBF, 0x9F, 0x98, 0xC4, 0xA4, 
   0x9D, 0xBA, 0x9A, 0x94, 0xB8, 0x99, 0x92, 0xC8, 0xB0, 0xAB, 0xB8, 0xA2, 0x9E, 0x9E, 0x89, 0x84, 
   0xAC, 0x97, 0x92, 0xCA, 0xB8, 0xB3, 0xC0, 0xB0, 0xA9, 0xC6, 0xB2, 0xAE, 0xBC, 0xA6, 0xA4, 0xCC, 
   0xB6, 0xB4, 0xE3, 0xCD, 0xCB, 0xF1, 0xDA, 0xD7, 0xF1, 0xDA, 0xD8, 0xD7, 0xC0, 0xBD, 0xD0, 0xB1, 
   0xAF, 0xD8, 0xBD, 0xBB, 0xAE, 0x9A, 0x96, 0x71, 0x64, 0x5F, 0x7C, 0x76, 0x70, 0x59, 0x59, 0x52, 
   0x51, 0x51, 0x4D, 0x48, 0x44, 0x43, 0x46, 0x41, 0x3F, 0x4D, 0x46, 0x44, 0x77, 0x6F, 0x6D, 0x78, 
   0x70, 0x6E, 0x80, 0x77, 0x76, 0x63, 0x5A, 0x59, 0x47, 0x3F, 0x3E, 0x52, 0x4B, 0x48, 0x7C, 0x72, 
   0x6D, 0x9F, 0x92, 0x8D, 0xAE, 0x9B, 0x95, 0xC3, 0xA9, 0xA7, 0xC3, 0xA4, 0xA4, 0xC6, 0xA9, 0xA8, 
   0xCE, 0xB3, 0xB2, 0xD3, 0xBA, 0xB8, 0xBC, 0xA4, 0xA3, 0xDD, 0xC7, 0xC5, 0xC9, 0xBC, 0xB3, 0x84, 
   0x7B, 0x73, 0x7C, 0x74, 0x6F, 0x69, 0x63, 0x61, 0x59, 0x59, 0x59, 0x53, 0x56, 0x57, 0xB2, 0xB7, 
   0xB7, 0xA9, 0xAD, 0xAB, 0x88, 0x88, 0x88, 0x8C, 0x89, 0x8A, 0x76, 0x74, 0x75, 0x50, 0x52, 0x53, 
   0x24, 0x28, 0x29, 0x75, 0x77, 0x7C, 0xA1, 0xA5, 0xAB, 0x3F, 0x47, 0x4F, 0x61, 0x6D, 0x77, 0x4E, 
   0x62, 0x6F, 0x54, 0x6C, 0x7A, 0x4F, 0x5F, 0x6F, 0x8C, 0x8E, 0x9C, 0xCA, 0xC2, 0xC7, 0xEC, 0xDA, 
   0xD6, 0xE9, 0xD3, 0xCC, 0xEE, 0xD6, 0xD3, 0xE9, 0xD2, 0xD3, 0xE5, 0xDC, 0xDE, 0xD1, 0xC9, 0xCB, 
   0x46, 0x42, 0x43, 0x2B, 0x29, 0x2A, 0x43, 0x44, 0x44, 0x37, 0x3B, 0x3A, 0x57, 0x5D, 0x5E, 0x45, 
   0x4B, 0x4F, 0x34, 0x39, 0x3D, 0x4A, 0x4F, 0x54, 0x42, 0x46, 0x4B, 0x45, 0x4A, 0x4D, 0x3E, 0x42, 
   0x46, 0x38, 0x37, 0x39, 0x33, 0x35, 0x36, 0x2E, 0x35, 0x34, 0x2F, 0x38, 0x38, 0x2E, 0x35, 0x36, 
   0x2E, 0x31, 0x33, 0x56, 0x56, 0x58, 0xBE, 0xBF, 0xBF, 0x32, 0x35, 0x36, 0x32, 0x38, 0x3D, 0x3D, 
   0x47, 0x4E, 0x49, 0x55, 0x5F, 0x39, 0x48, 0x52, 0x38, 0x4A, 0x51, 0x3D, 0x4E, 0x54, 0x36, 0x43, 
   0x49, 0x29, 0x32, 0x38, 0x36, 0x3B, 0x3F, 0x6C, 0x6D, 0x72, 0x61, 0x5E, 0x61, 0x46, 0x41, 0x41, 
   0x50, 0x58, 0x5B, 0x35, 0x4C, 0x57, 0x6C, 0x87, 0x96, 0x67, 0x7E, 0x8E, 0x64, 0x75, 0x83, 0x33, 
   0x3E, 0x3F, 0x33, 0x3B, 0x39, 0x3C, 0x46, 0x46, 0x3F, 0x48, 0x4C, 0x37, 0x42, 0x47, 0x30, 0x3A, 
   0x44, 0x36, 0x42, 0x4A, 0x34, 0x43, 0x48, 0x40, 0x50, 0x56, 0x6E, 0x7F, 0x87, 0x71, 0x81, 0x8E, 
   0x4E, 0x5E, 0x6F, 0x74, 0x84, 0x96, 0x61, 0x78, 0x86, 0x5B, 0x76, 0x84, 0x59, 0x73, 0x85, 0x51, 
   0x6B, 0x7F, 0x65, 0x81, 0x94, 0x66, 0x85, 0x95, 0x4E, 0x6D, 0x7B, 0x88, 0x8E, 0x96, 0xC1, 0xB9, 
   0xBD, 0xD5, 0xBC, 0xBC, 0xEB, 0xC9, 0xC6, 0xEB, 0xCA, 0xC6, 0xEB, 0xCF, 0xCB, 0xF2, 0xDE, 0xDA, 
   0xF3, 0xE5, 0xE2, 0xF5, 0xE3, 0xE0, 0xF6, 0xE2, 0xDF, 0xF2, 0xDC, 0xDA, 0xEE, 0xD6, 0xD4, 0xF0, 
   0xD9, 0xD6, 0xEB, 0xD5, 0xCD, 0xF4, 0xDF, 0xD8, 0xD2, 0xC2, 0xBE, 0x6A, 0x61, 0x60, 0x55, 0x51, 
   0x52, 0x5F, 0x5E, 0x61, 0x4A, 0x4F, 0x52, 0x41, 0x4A, 0x4E, 0x72, 0x77, 0x7E, 0x63, 0x63, 0x67, 
   0x4D, 0x45, 0x44, 0x59, 0x4A, 0x41, 0x61, 0x4C, 0x41, 0x69, 0x4F, 0x45, 0x68, 0x4E, 0x44, 0x6A, 
   0x50, 0x46, 0x66, 0x4C, 0x42, 0x65, 0x4B, 0x41, 0x66, 0x4C, 0x42, 0x65, 0x4B, 0x42, 0x68, 0x4C, 
   0x45, 0x67, 0x4C, 0x44, 0x63, 0x48, 0x40, 0x66, 0x4B, 0x43, 0x66, 0x4A, 0x42, 0x63, 0x48, 0x40, 
   0x5C, 0x48, 0x43, 0x5F, 0x4B, 0x45, 0x5F, 0x4A, 0x42, 0x61, 0x4B, 0x40, 0x67, 0x4F, 0x40, 0x68, 
   0x4F, 0x3E, 0x68, 0x4E, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 
   0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x68, 0x4D, 0x3F, 0x67, 0x4C, 0x3E, 
   0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x68, 0x4D, 0x3F, 0x68, 0x4D, 0x3F, 0x68, 
   0x4D, 0x3F, 0x69, 0x4E, 0x40, 0x68, 0x4D, 0x3F, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x66, 0x4C, 0x3E, 0x66, 0x4C, 0x3E, 0xDD, 0xBD, 0xB7, 0xDF, 0xBF, 0xB9, 0xE0, 0xC0, 0xBA, 0xE1, 
   0xC1, 0xBB, 0xE5, 0xC5, 0xBF, 0xE8, 0xC8, 0xC2, 0xE7, 0xC7, 0xC1, 0xE2, 0xC2, 0xBD, 0xE0, 0xC0, 
   0xBB, 0xE3, 0xC3, 0xBE, 0xE1, 0xC1, 0xBC, 0xDD, 0xBD, 0xB8, 0xDB, 0xBB, 0xB6, 0xDA, 0xB9, 0xB6, 
   0xDD, 0xBC, 0xB9, 0xE6, 0xC5, 0xC2, 0xE4, 0xC3, 0xC0, 0xE4, 0xC4, 0xC1, 0xEB, 0xCB, 0xC8, 0xE9, 
   0xC9, 0xC6, 0xD8, 0xBC, 0xB8, 0xE6, 0xC9, 0xC6, 0xEB, 0xCE, 0xCB, 0xEC, 0xCF, 0xCB, 0xE6, 0xC9, 
   0xC5, 0xDA, 0xBD, 0xBA, 0xE1, 0xC1, 0xBE, 0xE5, 0xC5, 0xC2, 0xE0, 0xC0, 0xBD, 0xE3, 0xC3, 0xC0, 
   0xE6, 0xC6, 0xC3, 0xE5, 0xC5, 0xC2, 0xE2, 0xC2, 0xBF, 0xDD, 0xBB, 0xB8, 0xDC, 0xBA, 0xB7, 0xDF, 
   0xBD, 0xBA, 0xDC, 0xBA, 0xB7, 0xD0, 0xAE, 0xAB, 0xD8, 0xB6, 0xB3, 0xE0, 0xBF, 0xBC, 0xE7, 0xC7, 
   0xC4, 0xF6, 0xD6, 0xD3, 0xF7, 0xD7, 0xD4, 0xEF, 0xCF, 0xCC, 0xE8, 0xC8, 0xC5, 0xE2, 0xC2, 0xBF, 
   0xE0, 0xBF, 0xB9, 0xDC, 0xBC, 0xB6, 0xD7, 0xB7, 0xB1, 0xD4, 0xB4, 0xAE, 0xD3, 0xB3, 0xAD, 0xD0, 
   0xB0, 0xAA, 0xD0, 0xB0, 0xAA, 0xCF, 0xAF, 0xAA, 0xCA, 0xAA, 0xA4, 0xCD, 0xAD, 0xA7, 0xCA, 0xAA, 
   0xA5, 0xCB, 0xAB, 0xA5, 0xB7, 0x98, 0x92, 0xAC, 0x97, 0x92, 0xB5, 0xA1, 0x9C, 0xAF, 0x9B, 0x96, 
   0x96, 0x83, 0x7E, 0xBB, 0xAA, 0xA4, 0xC3, 0xB3, 0xAD, 0xC6, 0xB4, 0xAF, 0xBD, 0xA9, 0xA7, 0xB6, 
   0xA4, 0xA1, 0xCA, 0xB8, 0xB6, 0xD5, 0xC2, 0xC1, 0xF1, 0xE1, 0xDF, 0xE3, 0xD0, 0xD0, 0xDC, 0xBE, 
   0xBD, 0xBA, 0xA1, 0xA0, 0xA3, 0x91, 0x8E, 0x95, 0x8C, 0x89, 0x63, 0x63, 0x5E, 0x53, 0x5B, 0x55, 
   0x5E, 0x65, 0x61, 0x70, 0x71, 0x72, 0x61, 0x63, 0x63, 0x46, 0x47, 0x47, 0x42, 0x43, 0x43, 0x50, 
   0x51, 0x51, 0x93, 0x93, 0x93, 0x72, 0x71, 0x74, 0x35, 0x36, 0x36, 0x3A, 0x3D, 0x3C, 0x43, 0x46, 
   0x44, 0x5D, 0x5B, 0x5A, 0x87, 0x7F, 0x7E, 0xB9, 0xA9, 0xAA, 0xC5, 0xB1, 0xB2, 0xC5, 0xB2, 0xB3, 
   0xC4, 0xB1, 0xB2, 0xBF, 0xAD, 0xAE, 0xBE, 0xAD, 0xAE, 0xA0, 0x90, 0x90, 0x7C, 0x74, 0x6E, 0x53, 
   0x4F, 0x4A, 0x3D, 0x3A, 0x38, 0x41, 0x41, 0x40, 0x44, 0x48, 0x49, 0x63, 0x69, 0x6C, 0x68, 0x71, 
   0x71, 0x3A, 0x43, 0x40, 0x35, 0x3B, 0x3A, 0x33, 0x36, 0x37, 0x3C, 0x3E, 0x41, 0x3F, 0x42, 0x47, 
   0x3A, 0x3D, 0x45, 0x99, 0x9A, 0xA3, 0xA1, 0xA5, 0xAE, 0x6B, 0x75, 0x7E, 0x5C, 0x69, 0x75, 0x48, 
   0x59, 0x67, 0x48, 0x5C, 0x6B, 0x45, 0x50, 0x5F, 0x66, 0x65, 0x70, 0xBC, 0xB5, 0xBA, 0xF0, 0xE0, 
   0xDE, 0xF2, 0xDD, 0xD9, 0xEB, 0xD5, 0xD3, 0xE9, 0xD5, 0xD6, 0xDA, 0xD3, 0xD7, 0x75, 0x70, 0x74, 
   0x37, 0x33, 0x37, 0x3F, 0x3F, 0x43, 0x43, 0x46, 0x49, 0x54, 0x59, 0x5B, 0x4D, 0x50, 0x52, 0x32, 
   0x32, 0x35, 0x5A, 0x5A, 0x5D, 0x83, 0x82, 0x85, 0x45, 0x45, 0x49, 0x41, 0x45, 0x47, 0x42, 0x47, 
   0x49, 0x3A, 0x3D, 0x3B, 0x29, 0x2C, 0x2B, 0x2F, 0x36, 0x35, 0x39, 0x40, 0x41, 0x33, 0x37, 0x3A, 
   0x2E, 0x2D, 0x34, 0xBF, 0xBD, 0xC1, 0x94, 0x94, 0x93, 0x23, 0x26, 0x27, 0x45, 0x4C, 0x50, 0x41, 
   0x4C, 0x52, 0x4B, 0x5A, 0x61, 0x36, 0x48, 0x50, 0x31, 0x46, 0x4D, 0x31, 0x45, 0x4C, 0x3A, 0x47, 
   0x4E, 0x35, 0x3C, 0x42, 0x83, 0x83, 0x88, 0xE6, 0xE2, 0xE6, 0xCE, 0xC4, 0xC7, 0xBD, 0xB1, 0xB4, 
   0x7E, 0x7F, 0x85, 0x40, 0x52, 0x5E, 0x56, 0x6F, 0x7C, 0x77, 0x8D, 0x9B, 0x45, 0x56, 0x63, 0x35, 
   0x3E, 0x40, 0x37, 0x3D, 0x3B, 0x3C, 0x43, 0x44, 0x3E, 0x45, 0x4A, 0x38, 0x3F, 0x47, 0x3F, 0x47, 
   0x50, 0x40, 0x4C, 0x55, 0x46, 0x56, 0x5D, 0x6E, 0x7F, 0x86, 0x73, 0x85, 0x8F, 0x61, 0x72, 0x7F, 
   0x4E, 0x61, 0x70, 0x7D, 0x90, 0xA1, 0x51, 0x68, 0x76, 0x5E, 0x7A, 0x87, 0x4F, 0x6A, 0x7C, 0x4D, 
   0x68, 0x7E, 0x6C, 0x89, 0x9E, 0x55, 0x72, 0x85, 0x4D, 0x67, 0x78, 0xB5, 0xAC, 0xB6, 0xDA, 0xC5, 
   0xCA, 0xE1, 0xC2, 0xC3, 0xEA, 0xC6, 0xC2, 0xE5, 0xC6, 0xC2, 0xEB, 0xD2, 0xCE, 0xF4, 0xE3, 0xDF, 
   0xF4, 0xE6, 0xE3, 0xF4, 0xE2, 0xDF, 0xEE, 0xDA, 0xD7, 0xED, 0xD5, 0xD3, 0xF4, 0xDA, 0xD8, 0xF5, 
   0xDA, 0xD7, 0xE5, 0xCE, 0xC6, 0xD8, 0xC5, 0xBD, 0x7B, 0x6F, 0x6A, 0x57, 0x53, 0x53, 0x43, 0x45, 
   0x47, 0x34, 0x38, 0x3E, 0x3D, 0x41, 0x47, 0x5F, 0x62, 0x67, 0x82, 0x80, 0x85, 0x54, 0x4B, 0x4C, 
   0x5A, 0x4A, 0x44, 0x68, 0x51, 0x45, 0x69, 0x4D, 0x40, 0x69, 0x4E, 0x43, 0x67, 0x4C, 0x41, 0x68, 
   0x4C, 0x42, 0x68, 0x4D, 0x42, 0x66, 0x4B, 0x40, 0x67, 0x4C, 0x42, 0x6B, 0x4C, 0x42, 0x6D, 0x4B, 
   0x40, 0x6C, 0x4B, 0x3F, 0x6D, 0x4B, 0x40, 0x6E, 0x4C, 0x41, 0x6D, 0x4C, 0x40, 0x6D, 0x4C, 0x41, 
   0x66, 0x4A, 0x42, 0x65, 0x4B, 0x42, 0x67, 0x4E, 0x43, 0x65, 0x4C, 0x3E, 0x68, 0x4F, 0x3E, 0x68, 
   0x50, 0x3D, 0x67, 0x4E, 0x3D, 0x68, 0x4D, 0x3F, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x67, 0x4C, 
   0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x68, 0x4D, 0x3F, 0x67, 0x4C, 0x3E, 
   0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x68, 0x4D, 0x3F, 0x68, 0x4D, 0x3F, 0x68, 
   0x4D, 0x3F, 0x69, 0x4E, 0x40, 0x68, 0x4D, 0x3F, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x66, 0x4B, 0x3D, 0x65, 0x4B, 0x3D, 0xDC, 0xBC, 0xB6, 0xDD, 0xBD, 0xB7, 0xDF, 0xBF, 0xB9, 0xE1, 
   0xC1, 0xBB, 0xDE, 0xBE, 0xB8, 0xDB, 0xBB, 0xB5, 0xDE, 0xBE, 0xB8, 0xDC, 0xBC, 0xB7, 0xDD, 0xBD, 
   0xB8, 0xE3, 0xC3, 0xBE, 0xE1, 0xC1, 0xBC, 0xDD, 0xBD, 0xB8, 0xDB, 0xBB, 0xB5, 0xDC, 0xBB, 0xB8, 
   0xDB, 0xBA, 0xB7, 0xDE, 0xBD, 0xBA, 0xE4, 0xC3, 0xC0, 0xF2, 0xD2, 0xCF, 0xFA, 0xDF, 0xDC, 0xFC, 
   0xE0, 0xDD, 0xE7, 0xCD, 0xC9, 0xE4, 0xCB, 0xC7, 0xF0, 0xD6, 0xD2, 0xF5, 0xDB, 0xD7, 0xF7, 0xDD, 
   0xD9, 0xF3, 0xD9, 0xD5, 0xF2, 0xD5, 0xD1, 0xF3, 0xD6, 0xD2, 0xF2, 0xD4, 0xD1, 0xED, 0xCF, 0xCC, 
   0xE7, 0xC9, 0xC5, 0xE6, 0xC7, 0xC4, 0xE5, 0xC7, 0xC3, 0xDC, 0xBB, 0xB8, 0xD8, 0xB7, 0xB4, 0xD7, 
   0xB6, 0xB3, 0xDB, 0xBA, 0xB7, 0xDF, 0xBE, 0xBB, 0xD7, 0xB6, 0xB3, 0xDB, 0xBA, 0xB7, 0xDC, 0xBB, 
   0xB8, 0xE2, 0xC1, 0xBE, 0xEA, 0xC9, 0xC6, 0xF5, 0xD4, 0xD1, 0xF9, 0xD8, 0xD5, 0xF2, 0xD1, 0xCE, 
   0xE3, 0xC3, 0xBE, 0xE1, 0xC1, 0xBB, 0xDA, 0xBA, 0xB4, 0xD4, 0xB4, 0xAE, 0xD3, 0xB3, 0xAD, 0xD3, 
   0xB3, 0xAD, 0xD1, 0xB1, 0xAB, 0xCC, 0xAC, 0xA6, 0xC8, 0xA8, 0xA2, 0xC6, 0xA6, 0xA0, 0xBC, 0x9C, 
   0x96, 0xAB, 0x8B, 0x85, 0xC4, 0xA5, 0x9F, 0xB5, 0x9D, 0x98, 0x95, 0x7C, 0x78, 0x9C, 0x84, 0x7F, 
   0xAA, 0x93, 0x8E, 0xA6, 0x8F, 0x8A, 0x98, 0x80, 0x7C, 0x85, 0x70, 0x6B, 0x9E, 0x8D, 0x89, 0x9E, 
   0x8D, 0x8A, 0xA4, 0x94, 0x92, 0xAF, 0xA0, 0x9F, 0xD1, 0xC4, 0xC3, 0xF2, 0xE3, 0xE4, 0xEC, 0xD1, 
   0xD2, 0xC4, 0xAE, 0xAF, 0x95, 0x87, 0x86, 0x52, 0x4E, 0x4B, 0x49, 0x4F, 0x4B, 0x54, 0x60, 0x5A, 
   0x4F, 0x58, 0x56, 0x61, 0x66, 0x68, 0x89, 0x8E, 0x90, 0x72, 0x77, 0x79, 0x37, 0x3C, 0x3E, 0x3C, 
   0x41, 0x43, 0x6D, 0x71, 0x74, 0x65, 0x6A, 0x6E, 0x45, 0x4D, 0x4F, 0x49, 0x53, 0x54, 0x35, 0x40, 
   0x41, 0x3C, 0x43, 0x45, 0x4D, 0x4C, 0x50, 0x61, 0x5B, 0x5E, 0x7D, 0x72, 0x75, 0x7E, 0x75, 0x78, 
   0x6B, 0x62, 0x64, 0x5D, 0x54, 0x57, 0x70, 0x66, 0x69, 0x5F, 0x55, 0x58, 0x4C, 0x49, 0x48, 0x49, 
   0x48, 0x47, 0x39, 0x39, 0x3A, 0x42, 0x45, 0x47, 0x69, 0x70, 0x72, 0x5B, 0x63, 0x66, 0x39, 0x44, 
   0x44, 0x3A, 0x46, 0x43, 0x47, 0x51, 0x50, 0x44, 0x4D, 0x4D, 0x45, 0x4B, 0x50, 0x43, 0x46, 0x4E, 
   0xA7, 0xA8, 0xB3, 0xA6, 0xA6, 0xB1, 0x78, 0x7C, 0x87, 0x39, 0x43, 0x4E, 0x25, 0x33, 0x3E, 0x50, 
   0x5E, 0x6B, 0x4F, 0x5D, 0x6C, 0x61, 0x67, 0x74, 0x7D, 0x7A, 0x83, 0xDA, 0xD1, 0xD5, 0xCD, 0xC0, 
   0xBF, 0xB5, 0xA4, 0xA1, 0xD5, 0xC3, 0xC1, 0xE0, 0xCE, 0xCF, 0x7C, 0x76, 0x7B, 0x46, 0x42, 0x47, 
   0x47, 0x43, 0x48, 0x38, 0x38, 0x3B, 0x44, 0x45, 0x49, 0x67, 0x69, 0x6E, 0x4A, 0x49, 0x4C, 0x4D, 
   0x48, 0x49, 0x6D, 0x66, 0x68, 0x94, 0x8D, 0x8E, 0x4C, 0x49, 0x49, 0x48, 0x4A, 0x4B, 0x41, 0x48, 
   0x47, 0x2E, 0x33, 0x2E, 0x1D, 0x22, 0x1F, 0x2C, 0x32, 0x31, 0x2E, 0x34, 0x36, 0x2F, 0x30, 0x36, 
   0x5C, 0x57, 0x61, 0xDB, 0xD6, 0xDA, 0x47, 0x45, 0x44, 0x35, 0x36, 0x37, 0x41, 0x48, 0x4A, 0x50, 
   0x5A, 0x5F, 0x4C, 0x5C, 0x63, 0x41, 0x54, 0x5C, 0x29, 0x3F, 0x47, 0x31, 0x45, 0x4E, 0x41, 0x4E, 
   0x56, 0x49, 0x4E, 0x54, 0xBE, 0xB9, 0xBE, 0xF3, 0xEA, 0xED, 0xF5, 0xE7, 0xE9, 0xE2, 0xD2, 0xD7, 
   0x62, 0x5E, 0x67, 0x49, 0x59, 0x65, 0x64, 0x7C, 0x87, 0x72, 0x87, 0x94, 0x32, 0x42, 0x4E, 0x37, 
   0x3F, 0x41, 0x3A, 0x3F, 0x3E, 0x47, 0x4F, 0x50, 0x3C, 0x44, 0x49, 0x31, 0x38, 0x41, 0x42, 0x4B, 
   0x55, 0x43, 0x4F, 0x59, 0x6B, 0x7C, 0x85, 0x6F, 0x81, 0x8B, 0x74, 0x87, 0x92, 0x4B, 0x5F, 0x6C, 
   0x64, 0x7A, 0x89, 0x66, 0x7C, 0x8C, 0x4C, 0x65, 0x73, 0x5A, 0x76, 0x83, 0x52, 0x6F, 0x80, 0x57, 
   0x74, 0x8A, 0x5F, 0x79, 0x90, 0x4C, 0x62, 0x77, 0x70, 0x82, 0x95, 0xC9, 0xB4, 0xBD, 0xD0, 0xB2, 
   0xB6, 0xDD, 0xB9, 0xBA, 0xE2, 0xBF, 0xBB, 0xE7, 0xC9, 0xC4, 0xF0, 0xDA, 0xD6, 0xF0, 0xE0, 0xDC, 
   0xF1, 0xE2, 0xDF, 0xED, 0xDC, 0xD9, 0xEA, 0xD5, 0xD2, 0xF1, 0xD9, 0xD7, 0xF0, 0xD4, 0xD3, 0xE2, 
   0xC5, 0xC4, 0xD5, 0xBD, 0xB6, 0x8E, 0x7D, 0x76, 0x56, 0x4E, 0x4A, 0x45, 0x47, 0x47, 0x3D, 0x43, 
   0x45, 0x42, 0x4B, 0x51, 0x44, 0x47, 0x4D, 0x6D, 0x6A, 0x6D, 0x69, 0x62, 0x62, 0x58, 0x48, 0x44, 
   0x62, 0x4B, 0x42, 0x6B, 0x4E, 0x40, 0x6F, 0x4F, 0x3F, 0x69, 0x4C, 0x41, 0x6D, 0x50, 0x45, 0x6A, 
   0x4E, 0x43, 0x68, 0x4C, 0x41, 0x68, 0x4B, 0x40, 0x69, 0x4C, 0x41, 0x69, 0x4B, 0x3E, 0x6D, 0x4D, 
   0x3F, 0x6D, 0x4E, 0x40, 0x6D, 0x4D, 0x3F, 0x6C, 0x4C, 0x3E, 0x6B, 0x4B, 0x3C, 0x6C, 0x4D, 0x3E, 
   0x6C, 0x4B, 0x40, 0x68, 0x49, 0x3D, 0x69, 0x4C, 0x3F, 0x69, 0x4E, 0x3F, 0x67, 0x4E, 0x3C, 0x67, 
   0x50, 0x3C, 0x66, 0x4D, 0x3C, 0x68, 0x4D, 0x3F, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 
   0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x68, 0x4D, 0x3F, 0x67, 0x4C, 0x3E, 
   0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x67, 0x4C, 0x3E, 0x68, 0x4D, 0x3F, 0x67, 0x4C, 0x3E, 0x67, 
   0x4C, 0x3E, 0x68, 0x4D, 0x3F, 0x68, 0x4D, 0x3F, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 
   0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 0x66, 0x4B, 0x3D, 
   0x65, 0x4B, 0x3D, 0x65, 0x4B, 0x3D, 0xDD, 0xBD, 0xB7, 0xDA, 0xBA, 0xB4, 0xDA, 0xBA, 0xB4, 0xDB, 
   0xBB, 0xB5, 0xDE, 0xBE, 0xB8, 0xDC, 0xBC, 0xB6, 0xDD, 0xBD, 0xB7, 0xDD, 0xBD, 0xB6, 0xDB, 0xBB, 
   0xB4, 0xDD, 0xBD, 0xB7, 0xE1, 0xC1, 0xBB, 0xE0, 0xC0, 0xBA, 0xDE, 0xBE, 0xB7, 0xDC, 0xBB, 0xB6, 
   0xDC, 0xBB, 0xB8, 0xDC, 0xBB, 0xB8, 0xD8, 0xB7, 0xB4, 0xD7, 0xB6, 0xB3, 0xDB, 0xB9, 0xB6, 0xDE, 
   0xBF, 0xBB, 0xD8, 0xBF, 0xBB, 0xD4, 0xBB, 0xB7, 0xDC, 0xC3, 0xBF, 0xDE, 0xC5, 0xC1, 0xE0, 0xC7, 
   0xC3, 0xE2, 0xC9, 0xC5, 0xE8, 0xCC, 0xC8, 0xF0, 0xD3, 0xCF, 0xE6, 0xCA, 0xC6, 0xDD, 0xC0, 0xBC, 
   0xE1, 0xC4, 0xC0, 0xEA, 0xCD, 0xC9, 0xE5, 0xC8, 0xC4, 0xDF, 0xBF, 0xBC, 0xDE, 0xBD, 0xBA, 0xDA, 
   0xBA, 0xB7, 0xD3, 0xB2, 0xAF, 0xD8, 0xB8, 0xB5, 0xD2, 0xB1, 0xAE, 0xCD, 0xAC, 0xA9, 0xDE, 0xBD, 
   0xBA, 0xD7, 0xB6, 0xB3, 0xD1, 0xB0, 0xAD, 0xDB, 0xBA, 0xB7, 0xE6, 0xC5, 0xC2, 0xF1, 0xD0, 0xCD, 
   0xEA, 0xCA, 0xC4, 0xE1, 0xC1, 0xBB, 0xE2, 0xC2, 0xBC, 0xDB, 0xBB, 0xB5, 0xD5, 0xB5, 0xAF, 0xD2, 
   0xB2, 0xAC, 0xD0, 0xB0, 0xAA, 0xD2, 0xB2, 0xAE, 0xCB, 0xAB, 0xA6, 0xBE, 0x9E, 0x99, 0xBB, 0x9B, 
   0x96, 0xBC, 0x9C, 0x97, 0xC7, 0xA7, 0xA2, 0xC7, 0xA9, 0xA5, 0xB9, 0x9B, 0x98, 0xBC, 0x9E, 0x9A, 
   0xBE, 0x9E, 0x9B, 0xC8, 0xA7, 0xA4, 0xD0, 0xAF, 0xAC, 0xB6, 0x9C, 0x98, 0xB5, 0xA5, 0x9F, 0x9A, 
   0x89, 0x86, 0x7D, 0x6E, 0x6D, 0x7D, 0x71, 0x70, 0x9E, 0x92, 0x93, 0xC1, 0xB6, 0xB9, 0xE3, 0xD1, 
   0xD3, 0xDD, 0xCE, 0xD0, 0xD4, 0xCA, 0xCB, 0x8E, 0x8B, 0x8A, 0x43, 0x46, 0x45, 0x47, 0x4F, 0x4D, 
   0x56, 0x5B, 0x5D, 0x61, 0x61, 0x68, 0x81, 0x83, 0x89, 0x8E, 0x91, 0x96, 0x8F, 0x92, 0x98, 0x66, 
   0x69, 0x6E, 0x40, 0x43, 0x48, 0x43, 0x4A, 0x4D, 0x4A, 0x54, 0x58, 0x47, 0x53, 0x58, 0x52, 0